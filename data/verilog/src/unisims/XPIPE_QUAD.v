///////////////////////////////////////////////////////////////////////////////
//  Copyright (c) 1995/2020 Xilinx, Inc.
//  All Right Reserved.
///////////////////////////////////////////////////////////////////////////////
//   ____  ____
//  /   /\/   /
// /___/  \  /     Vendor      : Xilinx
// \   \   \/      Version     : 2020.3
//  \   \          Description : Xilinx Unified Simulation Library Component
//  /   /                        XPIPE_QUAD
// /___/   /\      Filename    : XPIPE_QUAD.v
// \   \  /  \
//  \___\/\___\
//
///////////////////////////////////////////////////////////////////////////////
//  Revision:
//
//  End Revision:
///////////////////////////////////////////////////////////////////////////////

`timescale 1 ps / 1 ps

`celldefine

module XPIPE_QUAD #(
`ifdef XIL_TIMING
  parameter LOC = "UNPLACED",
`endif
  parameter real DATA_RATE = 8.0,
  parameter integer GT_CHANNELS = 1,
  parameter SIM_DEVICE = "VERSAL_AI_CORE",
  parameter [31:0] XPIPE_CLKDLY_CFG = 32'h00000000,
  parameter [31:0] XPIPE_CLK_CFG = 32'h00000000,
  parameter [0:0] XPIPE_INSTANTIATED = 1'b1,
  parameter XPIPE_LINK0_CFG = "DISABLE",
  parameter XPIPE_LINK1_CFG = "DISABLE",
  parameter XPIPE_LOC = "QUAD0",
  parameter [1:0] XPIPE_MODE = 2'b00,
  parameter [15:0] XPIPE_REG_CFG = 16'h0000,
  parameter [31:0] XPIPE_RSVD = 32'h00000000
)(
  output ALTCLK_M,
  output APB3CLK_M,
  output [15:0] APB3PADDR_M,
  output APB3PENABLE_M,
  output [31:0] APB3PRDATA,
  output APB3PREADY,
  output APB3PRESETN_M,
  output APB3PSEL_M,
  output APB3PSLVERR,
  output [31:0] APB3PWDATA_M,
  output APB3PWRITE_M,
  output AXISCLK_M,
  output BGBYPASSB_M,
  output BGMONITORENB_M,
  output BGPDB_M,
  output BGRCALOVRDENB_M,
  output [4:0] BGRCALOVRD_M,
  output CH0_BUFGTCE,
  output [3:0] CH0_BUFGTCEMASK,
  output [11:0] CH0_BUFGTDIV,
  output CH0_BUFGTRST,
  output [3:0] CH0_BUFGTRSTMASK,
  output CH0_CDRBMCDRREQ_M,
  output CH0_CDRFREQOS_M,
  output CH0_CDRINCPCTRL_M,
  output CH0_CDRSTEPDIR_M,
  output CH0_CDRSTEPSQ_M,
  output CH0_CDRSTEPSX_M,
  output CH0_CFOKOVRDFINISH_M,
  output CH0_CFOKOVRDPULSE_M,
  output CH0_CFOKOVRDRDY0,
  output CH0_CFOKOVRDRDY1,
  output CH0_CFOKOVRDSTART_M,
  output CH0_CLKRSVD0_M,
  output CH0_CLKRSVD1_M,
  output CH0_DMONFIFORESET_M,
  output CH0_DMONITORCLK_M,
  output [31:0] CH0_DMONITOROUT,
  output CH0_EYESCANDATAERROR,
  output CH0_EYESCANRESET_M,
  output CH0_EYESCANTRIGGER_M,
  output [15:0] CH0_GTRSVD_M,
  output CH0_GTRXRESET_M,
  output CH0_GTTXRESET_M,
  output CH0_HSDPPCSRESET_M,
  output CH0_ILORESETDONE,
  output CH0_ILORESETMASK_M,
  output CH0_ILORESET_M,
  output [2:0] CH0_LOOPBACK_M,
  output CH0_PCIERSTB_M,
  output [15:0] CH0_PCSRSVDIN_M,
  output [15:0] CH0_PCSRSVDOUT,
  output CH0_PHYESMADAPTSAVE_M,
  output CH0_PHYREADY,
  output CH0_PHYSTATUS,
  output [15:0] CH0_PINRSVDAS,
  output CH0_RESETEXCEPTION,
  output [7:0] CH0_RX10GSTAT,
  output [2:0] CH0_RXBUFSTATUS,
  output CH0_RXBYTEISALIGNED,
  output CH0_RXBYTEREALIGN,
  output CH0_RXCDRHOLD_M,
  output CH0_RXCDRLOCK,
  output CH0_RXCDROVRDEN_M,
  output CH0_RXCDRPHDONE,
  output CH0_RXCDRRESET_M,
  output CH0_RXCHANBONDSEQ,
  output CH0_RXCHANISALIGNED,
  output CH0_RXCHANREALIGN,
  output [4:0] CH0_RXCHBONDI_M,
  output [4:0] CH0_RXCHBONDO,
  output [1:0] CH0_RXCLKCORCNT,
  output CH0_RXCOMINITDET,
  output CH0_RXCOMMADET,
  output CH0_RXCOMSASDET,
  output CH0_RXCOMWAKEDET,
  output [15:0] CH0_RXCTRL0,
  output [15:0] CH0_RXCTRL1,
  output [7:0] CH0_RXCTRL2,
  output [7:0] CH0_RXCTRL3,
  output CH0_RXDAPICODEOVRDEN_M,
  output CH0_RXDAPICODERESET_M,
  output [127:0] CH0_RXDATA,
  output [7:0] CH0_RXDATAEXTENDRSVD,
  output [1:0] CH0_RXDATAVALID,
  output CH0_RXDCCDONE,
  output CH0_RXDLYALIGNERR,
  output CH0_RXDLYALIGNPROG,
  output CH0_RXDLYALIGNREQ_M,
  output CH0_RXELECIDLE,
  output CH0_RXEQTRAINING_M,
  output CH0_RXFINEALIGNDONE,
  output CH0_RXGEARBOXSLIP_M,
  output [5:0] CH0_RXHEADER,
  output [1:0] CH0_RXHEADERVALID,
  output CH0_RXLATCLK_M,
  output CH0_RXLPMEN_M,
  output CH0_RXMLDCHAINDONE_M,
  output CH0_RXMLDCHAINREQ_M,
  output CH0_RXMLFINEALIGNREQ_M,
  output CH0_RXOOBRESET_M,
  output CH0_RXOSINTDONE,
  output CH0_RXOSINTSTARTED,
  output CH0_RXOSINTSTROBEDONE,
  output CH0_RXOSINTSTROBESTARTED,
  output [4:0] CH0_RXPCSRESETMASK_M,
  output [1:0] CH0_RXPD_M,
  output CH0_RXPHALIGNDONE,
  output CH0_RXPHALIGNERR,
  output CH0_RXPHALIGNREQ_M,
  output [1:0] CH0_RXPHALIGNRESETMASK_M,
  output CH0_RXPHDLYPD_M,
  output CH0_RXPHDLYRESETDONE,
  output CH0_RXPHDLYRESET_M,
  output CH0_RXPHSETINITDONE,
  output CH0_RXPHSETINITREQ_M,
  output CH0_RXPHSHIFT180DONE,
  output CH0_RXPHSHIFT180_M,
  output CH0_RXPMARESETDONE,
  output [6:0] CH0_RXPMARESETMASK_M,
  output CH0_RXPOLARITY_M,
  output CH0_RXPRBSCNTRESET_M,
  output CH0_RXPRBSERR,
  output CH0_RXPRBSLOCKED,
  output [3:0] CH0_RXPRBSSEL_M,
  output CH0_RXPROGDIVRESETDONE,
  output CH0_RXPROGDIVRESET_M,
  output [7:0] CH0_RXRATE_M,
  output CH0_RXRESETDONE,
  output [1:0] CH0_RXRESETMODE_M,
  output CH0_RXSLIDERDY,
  output CH0_RXSLIDE_M,
  output [1:0] CH0_RXSTARTOFSEQ,
  output [2:0] CH0_RXSTATUS,
  output CH0_RXSYNCALLIN_M,
  output CH0_RXSYNCDONE,
  output CH0_RXTERMINATION_M,
  output CH0_RXUSERRDY_M,
  output CH0_RXUSRCLK_M,
  output CH0_RXVALID,
  output CH0_TSTCLK0_M,
  output CH0_TSTCLK1_M,
  output [19:0] CH0_TSTIN_M,
  output CH0_TX10GSTAT,
  output [1:0] CH0_TXBUFSTATUS,
  output CH0_TXCOMFINISH,
  output CH0_TXCOMINIT_M,
  output CH0_TXCOMSAS_M,
  output CH0_TXCOMWAKE_M,
  output [15:0] CH0_TXCTRL0_M,
  output [15:0] CH0_TXCTRL1_M,
  output [7:0] CH0_TXCTRL2_M,
  output CH0_TXDAPICODEOVRDEN_M,
  output CH0_TXDAPICODERESET_M,
  output [7:0] CH0_TXDATAEXTENDRSVD_M,
  output [127:0] CH0_TXDATA_M,
  output CH0_TXDCCDONE,
  output [1:0] CH0_TXDEEMPH_M,
  output CH0_TXDETECTRX_M,
  output [4:0] CH0_TXDIFFCTRL_M,
  output CH0_TXDLYALIGNERR,
  output CH0_TXDLYALIGNPROG,
  output CH0_TXDLYALIGNREQ_M,
  output CH0_TXELECIDLE_M,
  output [5:0] CH0_TXHEADER_M,
  output CH0_TXINHIBIT_M,
  output CH0_TXLATCLK_M,
  output [6:0] CH0_TXMAINCURSOR_M,
  output [2:0] CH0_TXMARGIN_M,
  output CH0_TXMLDCHAINDONE_M,
  output CH0_TXMLDCHAINREQ_M,
  output CH0_TXONESZEROS_M,
  output CH0_TXPAUSEDELAYALIGN_M,
  output CH0_TXPCSRESETMASK_M,
  output [1:0] CH0_TXPD_M,
  output CH0_TXPHALIGNDONE,
  output CH0_TXPHALIGNERR,
  output CH0_TXPHALIGNOUTRSVD,
  output CH0_TXPHALIGNREQ_M,
  output [1:0] CH0_TXPHALIGNRESETMASK_M,
  output CH0_TXPHDLYPD_M,
  output CH0_TXPHDLYRESETDONE,
  output CH0_TXPHDLYRESET_M,
  output CH0_TXPHDLYTSTCLK_M,
  output CH0_TXPHSETINITDONE,
  output CH0_TXPHSETINITREQ_M,
  output CH0_TXPHSHIFT180DONE,
  output CH0_TXPHSHIFT180_M,
  output CH0_TXPICODEOVRDEN_M,
  output CH0_TXPICODERESET_M,
  output CH0_TXPIPPMEN_M,
  output [4:0] CH0_TXPIPPMSTEPSIZE_M,
  output CH0_TXPISOPD_M,
  output CH0_TXPMARESETDONE,
  output [2:0] CH0_TXPMARESETMASK_M,
  output CH0_TXPOLARITY_M,
  output [4:0] CH0_TXPOSTCURSOR_M,
  output CH0_TXPRBSFORCEERR_M,
  output [3:0] CH0_TXPRBSSEL_M,
  output [4:0] CH0_TXPRECURSOR_M,
  output CH0_TXPROGDIVRESETDONE,
  output CH0_TXPROGDIVRESET_M,
  output [7:0] CH0_TXRATE_M,
  output CH0_TXRESETDONE,
  output [1:0] CH0_TXRESETMODE_M,
  output [6:0] CH0_TXSEQUENCE_M,
  output CH0_TXSWING_M,
  output CH0_TXSYNCALLIN_M,
  output CH0_TXSYNCDONE,
  output CH0_TXUSERRDY_M,
  output CH0_TXUSRCLK_M,
  output CH1_BUFGTCE,
  output [3:0] CH1_BUFGTCEMASK,
  output [11:0] CH1_BUFGTDIV,
  output CH1_BUFGTRST,
  output [3:0] CH1_BUFGTRSTMASK,
  output CH1_CDRBMCDRREQ_M,
  output CH1_CDRFREQOS_M,
  output CH1_CDRINCPCTRL_M,
  output CH1_CDRSTEPDIR_M,
  output CH1_CDRSTEPSQ_M,
  output CH1_CDRSTEPSX_M,
  output CH1_CFOKOVRDFINISH_M,
  output CH1_CFOKOVRDPULSE_M,
  output CH1_CFOKOVRDRDY0,
  output CH1_CFOKOVRDRDY1,
  output CH1_CFOKOVRDSTART_M,
  output CH1_CLKRSVD0_M,
  output CH1_CLKRSVD1_M,
  output CH1_DMONFIFORESET_M,
  output CH1_DMONITORCLK_M,
  output [31:0] CH1_DMONITOROUT,
  output CH1_EYESCANDATAERROR,
  output CH1_EYESCANRESET_M,
  output CH1_EYESCANTRIGGER_M,
  output [15:0] CH1_GTRSVD_M,
  output CH1_GTRXRESET_M,
  output CH1_GTTXRESET_M,
  output CH1_HSDPPCSRESET_M,
  output CH1_ILORESETDONE,
  output CH1_ILORESETMASK_M,
  output CH1_ILORESET_M,
  output [2:0] CH1_LOOPBACK_M,
  output CH1_PCIERSTB_M,
  output [15:0] CH1_PCSRSVDIN_M,
  output [15:0] CH1_PCSRSVDOUT,
  output CH1_PHYESMADAPTSAVE_M,
  output CH1_PHYREADY,
  output CH1_PHYSTATUS,
  output [15:0] CH1_PINRSVDAS,
  output CH1_RESETEXCEPTION,
  output [7:0] CH1_RX10GSTAT,
  output [2:0] CH1_RXBUFSTATUS,
  output CH1_RXBYTEISALIGNED,
  output CH1_RXBYTEREALIGN,
  output CH1_RXCDRHOLD_M,
  output CH1_RXCDRLOCK,
  output CH1_RXCDROVRDEN_M,
  output CH1_RXCDRPHDONE,
  output CH1_RXCDRRESET_M,
  output CH1_RXCHANBONDSEQ,
  output CH1_RXCHANISALIGNED,
  output CH1_RXCHANREALIGN,
  output [4:0] CH1_RXCHBONDI_M,
  output [4:0] CH1_RXCHBONDO,
  output [1:0] CH1_RXCLKCORCNT,
  output CH1_RXCOMINITDET,
  output CH1_RXCOMMADET,
  output CH1_RXCOMSASDET,
  output CH1_RXCOMWAKEDET,
  output [15:0] CH1_RXCTRL0,
  output [15:0] CH1_RXCTRL1,
  output [7:0] CH1_RXCTRL2,
  output [7:0] CH1_RXCTRL3,
  output CH1_RXDAPICODEOVRDEN_M,
  output CH1_RXDAPICODERESET_M,
  output [127:0] CH1_RXDATA,
  output [7:0] CH1_RXDATAEXTENDRSVD,
  output [1:0] CH1_RXDATAVALID,
  output CH1_RXDCCDONE,
  output CH1_RXDLYALIGNERR,
  output CH1_RXDLYALIGNPROG,
  output CH1_RXDLYALIGNREQ_M,
  output CH1_RXELECIDLE,
  output CH1_RXEQTRAINING_M,
  output CH1_RXFINEALIGNDONE,
  output CH1_RXGEARBOXSLIP_M,
  output [5:0] CH1_RXHEADER,
  output [1:0] CH1_RXHEADERVALID,
  output CH1_RXLATCLK_M,
  output CH1_RXLPMEN_M,
  output CH1_RXMLDCHAINDONE_M,
  output CH1_RXMLDCHAINREQ_M,
  output CH1_RXMLFINEALIGNREQ_M,
  output CH1_RXOOBRESET_M,
  output CH1_RXOSINTDONE,
  output CH1_RXOSINTSTARTED,
  output CH1_RXOSINTSTROBEDONE,
  output CH1_RXOSINTSTROBESTARTED,
  output [4:0] CH1_RXPCSRESETMASK_M,
  output [1:0] CH1_RXPD_M,
  output CH1_RXPHALIGNDONE,
  output CH1_RXPHALIGNERR,
  output CH1_RXPHALIGNREQ_M,
  output [1:0] CH1_RXPHALIGNRESETMASK_M,
  output CH1_RXPHDLYPD_M,
  output CH1_RXPHDLYRESETDONE,
  output CH1_RXPHDLYRESET_M,
  output CH1_RXPHSETINITDONE,
  output CH1_RXPHSETINITREQ_M,
  output CH1_RXPHSHIFT180DONE,
  output CH1_RXPHSHIFT180_M,
  output CH1_RXPMARESETDONE,
  output [6:0] CH1_RXPMARESETMASK_M,
  output CH1_RXPOLARITY_M,
  output CH1_RXPRBSCNTRESET_M,
  output CH1_RXPRBSERR,
  output CH1_RXPRBSLOCKED,
  output [3:0] CH1_RXPRBSSEL_M,
  output CH1_RXPROGDIVRESETDONE,
  output CH1_RXPROGDIVRESET_M,
  output [7:0] CH1_RXRATE_M,
  output CH1_RXRESETDONE,
  output [1:0] CH1_RXRESETMODE_M,
  output CH1_RXSLIDERDY,
  output CH1_RXSLIDE_M,
  output [1:0] CH1_RXSTARTOFSEQ,
  output [2:0] CH1_RXSTATUS,
  output CH1_RXSYNCALLIN_M,
  output CH1_RXSYNCDONE,
  output CH1_RXTERMINATION_M,
  output CH1_RXUSERRDY_M,
  output CH1_RXUSRCLK_M,
  output CH1_RXVALID,
  output CH1_TSTCLK0_M,
  output CH1_TSTCLK1_M,
  output [19:0] CH1_TSTIN_M,
  output CH1_TX10GSTAT,
  output [1:0] CH1_TXBUFSTATUS,
  output CH1_TXCOMFINISH,
  output CH1_TXCOMINIT_M,
  output CH1_TXCOMSAS_M,
  output CH1_TXCOMWAKE_M,
  output [15:0] CH1_TXCTRL0_M,
  output [15:0] CH1_TXCTRL1_M,
  output [7:0] CH1_TXCTRL2_M,
  output CH1_TXDAPICODEOVRDEN_M,
  output CH1_TXDAPICODERESET_M,
  output [7:0] CH1_TXDATAEXTENDRSVD_M,
  output [127:0] CH1_TXDATA_M,
  output CH1_TXDCCDONE,
  output [1:0] CH1_TXDEEMPH_M,
  output CH1_TXDETECTRX_M,
  output [4:0] CH1_TXDIFFCTRL_M,
  output CH1_TXDLYALIGNERR,
  output CH1_TXDLYALIGNPROG,
  output CH1_TXDLYALIGNREQ_M,
  output CH1_TXELECIDLE_M,
  output [5:0] CH1_TXHEADER_M,
  output CH1_TXINHIBIT_M,
  output CH1_TXLATCLK_M,
  output [6:0] CH1_TXMAINCURSOR_M,
  output [2:0] CH1_TXMARGIN_M,
  output CH1_TXMLDCHAINDONE_M,
  output CH1_TXMLDCHAINREQ_M,
  output CH1_TXONESZEROS_M,
  output CH1_TXPAUSEDELAYALIGN_M,
  output CH1_TXPCSRESETMASK_M,
  output [1:0] CH1_TXPD_M,
  output CH1_TXPHALIGNDONE,
  output CH1_TXPHALIGNERR,
  output CH1_TXPHALIGNOUTRSVD,
  output CH1_TXPHALIGNREQ_M,
  output [1:0] CH1_TXPHALIGNRESETMASK_M,
  output CH1_TXPHDLYPD_M,
  output CH1_TXPHDLYRESETDONE,
  output CH1_TXPHDLYRESET_M,
  output CH1_TXPHDLYTSTCLK_M,
  output CH1_TXPHSETINITDONE,
  output CH1_TXPHSETINITREQ_M,
  output CH1_TXPHSHIFT180DONE,
  output CH1_TXPHSHIFT180_M,
  output CH1_TXPICODEOVRDEN_M,
  output CH1_TXPICODERESET_M,
  output CH1_TXPIPPMEN_M,
  output [4:0] CH1_TXPIPPMSTEPSIZE_M,
  output CH1_TXPISOPD_M,
  output CH1_TXPMARESETDONE,
  output [2:0] CH1_TXPMARESETMASK_M,
  output CH1_TXPOLARITY_M,
  output [4:0] CH1_TXPOSTCURSOR_M,
  output CH1_TXPRBSFORCEERR_M,
  output [3:0] CH1_TXPRBSSEL_M,
  output [4:0] CH1_TXPRECURSOR_M,
  output CH1_TXPROGDIVRESETDONE,
  output CH1_TXPROGDIVRESET_M,
  output [7:0] CH1_TXRATE_M,
  output CH1_TXRESETDONE,
  output [1:0] CH1_TXRESETMODE_M,
  output [6:0] CH1_TXSEQUENCE_M,
  output CH1_TXSWING_M,
  output CH1_TXSYNCALLIN_M,
  output CH1_TXSYNCDONE,
  output CH1_TXUSERRDY_M,
  output CH1_TXUSRCLK_M,
  output CH2_BUFGTCE,
  output [3:0] CH2_BUFGTCEMASK,
  output [11:0] CH2_BUFGTDIV,
  output CH2_BUFGTRST,
  output [3:0] CH2_BUFGTRSTMASK,
  output CH2_CDRBMCDRREQ_M,
  output CH2_CDRFREQOS_M,
  output CH2_CDRINCPCTRL_M,
  output CH2_CDRSTEPDIR_M,
  output CH2_CDRSTEPSQ_M,
  output CH2_CDRSTEPSX_M,
  output CH2_CFOKOVRDFINISH_M,
  output CH2_CFOKOVRDPULSE_M,
  output CH2_CFOKOVRDRDY0,
  output CH2_CFOKOVRDRDY1,
  output CH2_CFOKOVRDSTART_M,
  output CH2_CLKRSVD0_M,
  output CH2_CLKRSVD1_M,
  output CH2_DMONFIFORESET_M,
  output CH2_DMONITORCLK_M,
  output [31:0] CH2_DMONITOROUT,
  output CH2_EYESCANDATAERROR,
  output CH2_EYESCANRESET_M,
  output CH2_EYESCANTRIGGER_M,
  output [15:0] CH2_GTRSVD_M,
  output CH2_GTRXRESET_M,
  output CH2_GTTXRESET_M,
  output CH2_HSDPPCSRESET_M,
  output CH2_ILORESETDONE,
  output CH2_ILORESETMASK_M,
  output CH2_ILORESET_M,
  output [2:0] CH2_LOOPBACK_M,
  output CH2_PCIERSTB_M,
  output [15:0] CH2_PCSRSVDIN_M,
  output [15:0] CH2_PCSRSVDOUT,
  output CH2_PHYESMADAPTSAVE_M,
  output CH2_PHYREADY,
  output CH2_PHYSTATUS,
  output [15:0] CH2_PINRSVDAS,
  output CH2_RESETEXCEPTION,
  output [7:0] CH2_RX10GSTAT,
  output [2:0] CH2_RXBUFSTATUS,
  output CH2_RXBYTEISALIGNED,
  output CH2_RXBYTEREALIGN,
  output CH2_RXCDRHOLD_M,
  output CH2_RXCDRLOCK,
  output CH2_RXCDROVRDEN_M,
  output CH2_RXCDRPHDONE,
  output CH2_RXCDRRESET_M,
  output CH2_RXCHANBONDSEQ,
  output CH2_RXCHANISALIGNED,
  output CH2_RXCHANREALIGN,
  output [4:0] CH2_RXCHBONDI_M,
  output [4:0] CH2_RXCHBONDO,
  output [1:0] CH2_RXCLKCORCNT,
  output CH2_RXCOMINITDET,
  output CH2_RXCOMMADET,
  output CH2_RXCOMSASDET,
  output CH2_RXCOMWAKEDET,
  output [15:0] CH2_RXCTRL0,
  output [15:0] CH2_RXCTRL1,
  output [7:0] CH2_RXCTRL2,
  output [7:0] CH2_RXCTRL3,
  output CH2_RXDAPICODEOVRDEN_M,
  output CH2_RXDAPICODERESET_M,
  output [127:0] CH2_RXDATA,
  output [7:0] CH2_RXDATAEXTENDRSVD,
  output [1:0] CH2_RXDATAVALID,
  output CH2_RXDCCDONE,
  output CH2_RXDLYALIGNERR,
  output CH2_RXDLYALIGNPROG,
  output CH2_RXDLYALIGNREQ_M,
  output CH2_RXELECIDLE,
  output CH2_RXEQTRAINING_M,
  output CH2_RXFINEALIGNDONE,
  output CH2_RXGEARBOXSLIP_M,
  output [5:0] CH2_RXHEADER,
  output [1:0] CH2_RXHEADERVALID,
  output CH2_RXLATCLK_M,
  output CH2_RXLPMEN_M,
  output CH2_RXMLDCHAINDONE_M,
  output CH2_RXMLDCHAINREQ_M,
  output CH2_RXMLFINEALIGNREQ_M,
  output CH2_RXOOBRESET_M,
  output CH2_RXOSINTDONE,
  output CH2_RXOSINTSTARTED,
  output CH2_RXOSINTSTROBEDONE,
  output CH2_RXOSINTSTROBESTARTED,
  output [4:0] CH2_RXPCSRESETMASK_M,
  output [1:0] CH2_RXPD_M,
  output CH2_RXPHALIGNDONE,
  output CH2_RXPHALIGNERR,
  output CH2_RXPHALIGNREQ_M,
  output [1:0] CH2_RXPHALIGNRESETMASK_M,
  output CH2_RXPHDLYPD_M,
  output CH2_RXPHDLYRESETDONE,
  output CH2_RXPHDLYRESET_M,
  output CH2_RXPHSETINITDONE,
  output CH2_RXPHSETINITREQ_M,
  output CH2_RXPHSHIFT180DONE,
  output CH2_RXPHSHIFT180_M,
  output CH2_RXPMARESETDONE,
  output [6:0] CH2_RXPMARESETMASK_M,
  output CH2_RXPOLARITY_M,
  output CH2_RXPRBSCNTRESET_M,
  output CH2_RXPRBSERR,
  output CH2_RXPRBSLOCKED,
  output [3:0] CH2_RXPRBSSEL_M,
  output CH2_RXPROGDIVRESETDONE,
  output CH2_RXPROGDIVRESET_M,
  output [7:0] CH2_RXRATE_M,
  output CH2_RXRESETDONE,
  output [1:0] CH2_RXRESETMODE_M,
  output CH2_RXSLIDERDY,
  output CH2_RXSLIDE_M,
  output [1:0] CH2_RXSTARTOFSEQ,
  output [2:0] CH2_RXSTATUS,
  output CH2_RXSYNCALLIN_M,
  output CH2_RXSYNCDONE,
  output CH2_RXTERMINATION_M,
  output CH2_RXUSERRDY_M,
  output CH2_RXUSRCLK_M,
  output CH2_RXVALID,
  output CH2_TSTCLK0_M,
  output CH2_TSTCLK1_M,
  output [19:0] CH2_TSTIN_M,
  output CH2_TX10GSTAT,
  output [1:0] CH2_TXBUFSTATUS,
  output CH2_TXCOMFINISH,
  output CH2_TXCOMINIT_M,
  output CH2_TXCOMSAS_M,
  output CH2_TXCOMWAKE_M,
  output [15:0] CH2_TXCTRL0_M,
  output [15:0] CH2_TXCTRL1_M,
  output [7:0] CH2_TXCTRL2_M,
  output CH2_TXDAPICODEOVRDEN_M,
  output CH2_TXDAPICODERESET_M,
  output [7:0] CH2_TXDATAEXTENDRSVD_M,
  output [127:0] CH2_TXDATA_M,
  output CH2_TXDCCDONE,
  output [1:0] CH2_TXDEEMPH_M,
  output CH2_TXDETECTRX_M,
  output [4:0] CH2_TXDIFFCTRL_M,
  output CH2_TXDLYALIGNERR,
  output CH2_TXDLYALIGNPROG,
  output CH2_TXDLYALIGNREQ_M,
  output CH2_TXELECIDLE_M,
  output [5:0] CH2_TXHEADER_M,
  output CH2_TXINHIBIT_M,
  output CH2_TXLATCLK_M,
  output [6:0] CH2_TXMAINCURSOR_M,
  output [2:0] CH2_TXMARGIN_M,
  output CH2_TXMLDCHAINDONE_M,
  output CH2_TXMLDCHAINREQ_M,
  output CH2_TXONESZEROS_M,
  output CH2_TXPAUSEDELAYALIGN_M,
  output CH2_TXPCSRESETMASK_M,
  output [1:0] CH2_TXPD_M,
  output CH2_TXPHALIGNDONE,
  output CH2_TXPHALIGNERR,
  output CH2_TXPHALIGNOUTRSVD,
  output CH2_TXPHALIGNREQ_M,
  output [1:0] CH2_TXPHALIGNRESETMASK_M,
  output CH2_TXPHDLYPD_M,
  output CH2_TXPHDLYRESETDONE,
  output CH2_TXPHDLYRESET_M,
  output CH2_TXPHDLYTSTCLK_M,
  output CH2_TXPHSETINITDONE,
  output CH2_TXPHSETINITREQ_M,
  output CH2_TXPHSHIFT180DONE,
  output CH2_TXPHSHIFT180_M,
  output CH2_TXPICODEOVRDEN_M,
  output CH2_TXPICODERESET_M,
  output CH2_TXPIPPMEN_M,
  output [4:0] CH2_TXPIPPMSTEPSIZE_M,
  output CH2_TXPISOPD_M,
  output CH2_TXPMARESETDONE,
  output [2:0] CH2_TXPMARESETMASK_M,
  output CH2_TXPOLARITY_M,
  output [4:0] CH2_TXPOSTCURSOR_M,
  output CH2_TXPRBSFORCEERR_M,
  output [3:0] CH2_TXPRBSSEL_M,
  output [4:0] CH2_TXPRECURSOR_M,
  output CH2_TXPROGDIVRESETDONE,
  output CH2_TXPROGDIVRESET_M,
  output [7:0] CH2_TXRATE_M,
  output CH2_TXRESETDONE,
  output [1:0] CH2_TXRESETMODE_M,
  output [6:0] CH2_TXSEQUENCE_M,
  output CH2_TXSWING_M,
  output CH2_TXSYNCALLIN_M,
  output CH2_TXSYNCDONE,
  output CH2_TXUSERRDY_M,
  output CH2_TXUSRCLK_M,
  output CH3_BUFGTCE,
  output [3:0] CH3_BUFGTCEMASK,
  output [11:0] CH3_BUFGTDIV,
  output CH3_BUFGTRST,
  output [3:0] CH3_BUFGTRSTMASK,
  output CH3_CDRBMCDRREQ_M,
  output CH3_CDRFREQOS_M,
  output CH3_CDRINCPCTRL_M,
  output CH3_CDRSTEPDIR_M,
  output CH3_CDRSTEPSQ_M,
  output CH3_CDRSTEPSX_M,
  output CH3_CFOKOVRDFINISH_M,
  output CH3_CFOKOVRDPULSE_M,
  output CH3_CFOKOVRDRDY0,
  output CH3_CFOKOVRDRDY1,
  output CH3_CFOKOVRDSTART_M,
  output CH3_CLKRSVD0_M,
  output CH3_CLKRSVD1_M,
  output CH3_DMONFIFORESET_M,
  output CH3_DMONITORCLK_M,
  output [31:0] CH3_DMONITOROUT,
  output CH3_EYESCANDATAERROR,
  output CH3_EYESCANRESET_M,
  output CH3_EYESCANTRIGGER_M,
  output [15:0] CH3_GTRSVD_M,
  output CH3_GTRXRESET_M,
  output CH3_GTTXRESET_M,
  output CH3_HSDPPCSRESET_M,
  output CH3_ILORESETDONE,
  output CH3_ILORESETMASK_M,
  output CH3_ILORESET_M,
  output [2:0] CH3_LOOPBACK_M,
  output CH3_PCIERSTB_M,
  output [15:0] CH3_PCSRSVDIN_M,
  output [15:0] CH3_PCSRSVDOUT,
  output CH3_PHYESMADAPTSAVE_M,
  output CH3_PHYREADY,
  output CH3_PHYSTATUS,
  output [15:0] CH3_PINRSVDAS,
  output CH3_RESETEXCEPTION,
  output [7:0] CH3_RX10GSTAT,
  output [2:0] CH3_RXBUFSTATUS,
  output CH3_RXBYTEISALIGNED,
  output CH3_RXBYTEREALIGN,
  output CH3_RXCDRHOLD_M,
  output CH3_RXCDRLOCK,
  output CH3_RXCDROVRDEN_M,
  output CH3_RXCDRPHDONE,
  output CH3_RXCDRRESET_M,
  output CH3_RXCHANBONDSEQ,
  output CH3_RXCHANISALIGNED,
  output CH3_RXCHANREALIGN,
  output [4:0] CH3_RXCHBONDI_M,
  output [4:0] CH3_RXCHBONDO,
  output [1:0] CH3_RXCLKCORCNT,
  output CH3_RXCOMINITDET,
  output CH3_RXCOMMADET,
  output CH3_RXCOMSASDET,
  output CH3_RXCOMWAKEDET,
  output [15:0] CH3_RXCTRL0,
  output [15:0] CH3_RXCTRL1,
  output [7:0] CH3_RXCTRL2,
  output [7:0] CH3_RXCTRL3,
  output CH3_RXDAPICODEOVRDEN_M,
  output CH3_RXDAPICODERESET_M,
  output [127:0] CH3_RXDATA,
  output [7:0] CH3_RXDATAEXTENDRSVD,
  output [1:0] CH3_RXDATAVALID,
  output CH3_RXDCCDONE,
  output CH3_RXDLYALIGNERR,
  output CH3_RXDLYALIGNPROG,
  output CH3_RXDLYALIGNREQ_M,
  output CH3_RXELECIDLE,
  output CH3_RXEQTRAINING_M,
  output CH3_RXFINEALIGNDONE,
  output CH3_RXGEARBOXSLIP_M,
  output [5:0] CH3_RXHEADER,
  output [1:0] CH3_RXHEADERVALID,
  output CH3_RXLATCLK_M,
  output CH3_RXLPMEN_M,
  output CH3_RXMLDCHAINDONE_M,
  output CH3_RXMLDCHAINREQ_M,
  output CH3_RXMLFINEALIGNREQ_M,
  output CH3_RXOOBRESET_M,
  output CH3_RXOSINTDONE,
  output CH3_RXOSINTSTARTED,
  output CH3_RXOSINTSTROBEDONE,
  output CH3_RXOSINTSTROBESTARTED,
  output [4:0] CH3_RXPCSRESETMASK_M,
  output [1:0] CH3_RXPD_M,
  output CH3_RXPHALIGNDONE,
  output CH3_RXPHALIGNERR,
  output CH3_RXPHALIGNREQ_M,
  output [1:0] CH3_RXPHALIGNRESETMASK_M,
  output CH3_RXPHDLYPD_M,
  output CH3_RXPHDLYRESETDONE,
  output CH3_RXPHDLYRESET_M,
  output CH3_RXPHSETINITDONE,
  output CH3_RXPHSETINITREQ_M,
  output CH3_RXPHSHIFT180DONE,
  output CH3_RXPHSHIFT180_M,
  output CH3_RXPMARESETDONE,
  output [6:0] CH3_RXPMARESETMASK_M,
  output CH3_RXPOLARITY_M,
  output CH3_RXPRBSCNTRESET_M,
  output CH3_RXPRBSERR,
  output CH3_RXPRBSLOCKED,
  output [3:0] CH3_RXPRBSSEL_M,
  output CH3_RXPROGDIVRESETDONE,
  output CH3_RXPROGDIVRESET_M,
  output [7:0] CH3_RXRATE_M,
  output CH3_RXRESETDONE,
  output [1:0] CH3_RXRESETMODE_M,
  output CH3_RXSLIDERDY,
  output CH3_RXSLIDE_M,
  output [1:0] CH3_RXSTARTOFSEQ,
  output [2:0] CH3_RXSTATUS,
  output CH3_RXSYNCALLIN_M,
  output CH3_RXSYNCDONE,
  output CH3_RXTERMINATION_M,
  output CH3_RXUSERRDY_M,
  output CH3_RXUSRCLK_M,
  output CH3_RXVALID,
  output CH3_TSTCLK0_M,
  output CH3_TSTCLK1_M,
  output [19:0] CH3_TSTIN_M,
  output CH3_TX10GSTAT,
  output [1:0] CH3_TXBUFSTATUS,
  output CH3_TXCOMFINISH,
  output CH3_TXCOMINIT_M,
  output CH3_TXCOMSAS_M,
  output CH3_TXCOMWAKE_M,
  output [15:0] CH3_TXCTRL0_M,
  output [15:0] CH3_TXCTRL1_M,
  output [7:0] CH3_TXCTRL2_M,
  output CH3_TXDAPICODEOVRDEN_M,
  output CH3_TXDAPICODERESET_M,
  output [7:0] CH3_TXDATAEXTENDRSVD_M,
  output [127:0] CH3_TXDATA_M,
  output CH3_TXDCCDONE,
  output [1:0] CH3_TXDEEMPH_M,
  output CH3_TXDETECTRX_M,
  output [4:0] CH3_TXDIFFCTRL_M,
  output CH3_TXDLYALIGNERR,
  output CH3_TXDLYALIGNPROG,
  output CH3_TXDLYALIGNREQ_M,
  output CH3_TXELECIDLE_M,
  output [5:0] CH3_TXHEADER_M,
  output CH3_TXINHIBIT_M,
  output CH3_TXLATCLK_M,
  output [6:0] CH3_TXMAINCURSOR_M,
  output [2:0] CH3_TXMARGIN_M,
  output CH3_TXMLDCHAINDONE_M,
  output CH3_TXMLDCHAINREQ_M,
  output CH3_TXONESZEROS_M,
  output CH3_TXPAUSEDELAYALIGN_M,
  output CH3_TXPCSRESETMASK_M,
  output [1:0] CH3_TXPD_M,
  output CH3_TXPHALIGNDONE,
  output CH3_TXPHALIGNERR,
  output CH3_TXPHALIGNOUTRSVD,
  output CH3_TXPHALIGNREQ_M,
  output [1:0] CH3_TXPHALIGNRESETMASK_M,
  output CH3_TXPHDLYPD_M,
  output CH3_TXPHDLYRESETDONE,
  output CH3_TXPHDLYRESET_M,
  output CH3_TXPHDLYTSTCLK_M,
  output CH3_TXPHSETINITDONE,
  output CH3_TXPHSETINITREQ_M,
  output CH3_TXPHSHIFT180DONE,
  output CH3_TXPHSHIFT180_M,
  output CH3_TXPICODEOVRDEN_M,
  output CH3_TXPICODERESET_M,
  output CH3_TXPIPPMEN_M,
  output [4:0] CH3_TXPIPPMSTEPSIZE_M,
  output CH3_TXPISOPD_M,
  output CH3_TXPMARESETDONE,
  output [2:0] CH3_TXPMARESETMASK_M,
  output CH3_TXPOLARITY_M,
  output [4:0] CH3_TXPOSTCURSOR_M,
  output CH3_TXPRBSFORCEERR_M,
  output [3:0] CH3_TXPRBSSEL_M,
  output [4:0] CH3_TXPRECURSOR_M,
  output CH3_TXPROGDIVRESETDONE,
  output CH3_TXPROGDIVRESET_M,
  output [7:0] CH3_TXRATE_M,
  output CH3_TXRESETDONE,
  output [1:0] CH3_TXRESETMODE_M,
  output [6:0] CH3_TXSEQUENCE_M,
  output CH3_TXSWING_M,
  output CH3_TXSYNCALLIN_M,
  output CH3_TXSYNCDONE,
  output CH3_TXUSERRDY_M,
  output CH3_TXUSRCLK_M,
  output CORRECTERR,
  output [15:0] CTRLRSVDIN0_M,
  output [13:0] CTRLRSVDIN1_M,
  output [31:0] CTRLRSVDOUT,
  output DEBUGTRACECLK_M,
  output DEBUGTRACEREADY_M,
  output [15:0] DEBUGTRACETDATA,
  output DEBUGTRACETVALID,
  output [15:0] GPI_M,
  output [15:0] GPO,
  output GTPOWERGOOD,
  output HSCLK0_LCPLLCLKRSVD0_M,
  output HSCLK0_LCPLLCLKRSVD1_M,
  output HSCLK0_LCPLLFBCLKLOST,
  output [7:0] HSCLK0_LCPLLFBDIV_M,
  output HSCLK0_LCPLLGTGREFCLK_M,
  output HSCLK0_LCPLLLOCK,
  output HSCLK0_LCPLLPD_M,
  output HSCLK0_LCPLLREFCLKLOST,
  output HSCLK0_LCPLLREFCLKMONITOR,
  output [2:0] HSCLK0_LCPLLREFCLKSEL_M,
  output HSCLK0_LCPLLRESETBYPASSMODE_M,
  output [1:0] HSCLK0_LCPLLRESETMASK_M,
  output HSCLK0_LCPLLRESET_M,
  output [7:0] HSCLK0_LCPLLRSVD0_M,
  output [7:0] HSCLK0_LCPLLRSVD1_M,
  output [7:0] HSCLK0_LCPLLRSVDOUT,
  output [25:0] HSCLK0_LCPLLSDMDATA_M,
  output HSCLK0_LCPLLSDMTOGGLE_M,
  output HSCLK0_RPLLCLKRSVD0_M,
  output HSCLK0_RPLLCLKRSVD1_M,
  output HSCLK0_RPLLFBCLKLOST,
  output [7:0] HSCLK0_RPLLFBDIV_M,
  output HSCLK0_RPLLGTGREFCLK_M,
  output HSCLK0_RPLLLOCK,
  output HSCLK0_RPLLPD_M,
  output HSCLK0_RPLLREFCLKLOST,
  output HSCLK0_RPLLREFCLKMONITOR,
  output [2:0] HSCLK0_RPLLREFCLKSEL_M,
  output HSCLK0_RPLLRESETBYPASSMODE_M,
  output [1:0] HSCLK0_RPLLRESETMASK_M,
  output HSCLK0_RPLLRESET_M,
  output [7:0] HSCLK0_RPLLRSVD0_M,
  output [7:0] HSCLK0_RPLLRSVD1_M,
  output [7:0] HSCLK0_RPLLRSVDOUT,
  output [25:0] HSCLK0_RPLLSDMDATA_M,
  output HSCLK0_RPLLSDMTOGGLE_M,
  output HSCLK1_LCPLLCLKRSVD0_M,
  output HSCLK1_LCPLLCLKRSVD1_M,
  output HSCLK1_LCPLLFBCLKLOST,
  output [7:0] HSCLK1_LCPLLFBDIV_M,
  output HSCLK1_LCPLLGTGREFCLK_M,
  output HSCLK1_LCPLLLOCK,
  output HSCLK1_LCPLLPD_M,
  output HSCLK1_LCPLLREFCLKLOST,
  output HSCLK1_LCPLLREFCLKMONITOR,
  output [2:0] HSCLK1_LCPLLREFCLKSEL_M,
  output HSCLK1_LCPLLRESETBYPASSMODE_M,
  output [1:0] HSCLK1_LCPLLRESETMASK_M,
  output HSCLK1_LCPLLRESET_M,
  output [7:0] HSCLK1_LCPLLRSVD0_M,
  output [7:0] HSCLK1_LCPLLRSVD1_M,
  output [7:0] HSCLK1_LCPLLRSVDOUT,
  output [25:0] HSCLK1_LCPLLSDMDATA_M,
  output HSCLK1_LCPLLSDMTOGGLE_M,
  output HSCLK1_RPLLCLKRSVD0_M,
  output HSCLK1_RPLLCLKRSVD1_M,
  output HSCLK1_RPLLFBCLKLOST,
  output [7:0] HSCLK1_RPLLFBDIV_M,
  output HSCLK1_RPLLGTGREFCLK_M,
  output HSCLK1_RPLLLOCK,
  output HSCLK1_RPLLPD_M,
  output HSCLK1_RPLLREFCLKLOST,
  output HSCLK1_RPLLREFCLKMONITOR,
  output [2:0] HSCLK1_RPLLREFCLKSEL_M,
  output HSCLK1_RPLLRESETBYPASSMODE_M,
  output [1:0] HSCLK1_RPLLRESETMASK_M,
  output HSCLK1_RPLLRESET_M,
  output [7:0] HSCLK1_RPLLRSVD0_M,
  output [7:0] HSCLK1_RPLLRSVD1_M,
  output [7:0] HSCLK1_RPLLRSVDOUT,
  output [25:0] HSCLK1_RPLLSDMDATA_M,
  output HSCLK1_RPLLSDMTOGGLE_M,
  output [31:0] M0_AXIS_TDATA,
  output M0_AXIS_TLAST,
  output M0_AXIS_TREADY_M,
  output M0_AXIS_TVALID,
  output [31:0] M1_AXIS_TDATA,
  output M1_AXIS_TLAST,
  output M1_AXIS_TREADY_M,
  output M1_AXIS_TVALID,
  output [31:0] M2_AXIS_TDATA,
  output M2_AXIS_TLAST,
  output M2_AXIS_TREADY_M,
  output M2_AXIS_TVALID,
  output [3:0] MSTRXRESETDONE,
  output [3:0] MSTRXRESET_M,
  output [3:0] MSTTXRESETDONE,
  output [3:0] MSTTXRESET_M,
  output PCIELINKREACHTARGET_M,
  output [5:0] PCIELTSSM_M,
  output RCALENB_M,
  output REFCLK0_CLKTESTSIG_M,
  output REFCLK0_GTREFCLKPD_M,
  output REFCLK1_CLKTESTSIG_M,
  output REFCLK1_GTREFCLKPD_M,
  output RXMARGINCLK_M,
  output RXMARGINREQACK,
  output [3:0] RXMARGINREQCMD_M,
  output [1:0] RXMARGINREQLANENUM_M,
  output [7:0] RXMARGINREQPAYLD_M,
  output RXMARGINREQREQ_M,
  output RXMARGINRESACK_M,
  output [3:0] RXMARGINRESCMD,
  output [1:0] RXMARGINRESLANENUM,
  output [7:0] RXMARGINRESPAYLD,
  output RXMARGINRESREQ,
  output [31:0] S0_AXIS_TDATA_M,
  output S0_AXIS_TLAST_M,
  output S0_AXIS_TREADY,
  output S0_AXIS_TVALID_M,
  output [31:0] S1_AXIS_TDATA_M,
  output S1_AXIS_TLAST_M,
  output S1_AXIS_TREADY,
  output S1_AXIS_TVALID_M,
  output [31:0] S2_AXIS_TDATA_M,
  output S2_AXIS_TLAST_M,
  output S2_AXIS_TREADY,
  output S2_AXIS_TVALID_M,
  output TRIGACKIN0,
  output TRIGACKOUT0_M,
  output TRIGIN0_M,
  output TRIGOUT0,
  output TXOUTCLKDBG_NORTH,
  output TXOUTCLKDBG_SOUTH,
  output UBENABLE_M,
  output UBINTERRUPT,
  output [11:0] UBINTR_M,
  output UBIOLMBRST_M,
  output UBMBRST_M,
  output UBRXUART_M,
  output UBTXUART,
  output UNCORRECTERR,
  output XPIPE_BUFGTCE,
  output XPIPE_BUFGTCE_1,
  output [3:0] XPIPE_BUFGTCE_MASK,
  output [3:0] XPIPE_BUFGTCE_MASK_1,
  output [11:0] XPIPE_BUFGTDIV,
  output [11:0] XPIPE_BUFGTDIV_1,
  output XPIPE_BUFGTRST,
  output XPIPE_BUFGTRST_1,
  output [3:0] XPIPE_BUFGTRST_MASK,
  output [3:0] XPIPE_BUFGTRST_MASK_1,
  output XPIPE_GT_OUTCLK,
  output XPIPE_GT_OUTCLK_1,
  output XPIPE_GT_PIPECLK_M,
  output XPIPE_GT_PIPECLK_M_1,
  output XPIPE_GT_RXOUTCLK,
  output XPIPE_GT_RXUSRCLK_M,
  output XPIPE_HSDP_RXDATAVALID,
  output XPIPE_HSDP_RXDATAVALID_1,
  output XPIPE_HSDP_RXDATAVALID_2,
  output XPIPE_HSDP_RXGEARBOXSLIP_M,
  output XPIPE_HSDP_RXGEARBOXSLIP_M_1,
  output XPIPE_HSDP_RXGEARBOXSLIP_M_2,
  output [1:0] XPIPE_HSDP_RXHEADER,
  output XPIPE_HSDP_RXHEADERVALID,
  output XPIPE_HSDP_RXHEADERVALID_1,
  output XPIPE_HSDP_RXHEADERVALID_2,
  output [1:0] XPIPE_HSDP_RXHEADER_1,
  output [1:0] XPIPE_HSDP_RXHEADER_2,
  output XPIPE_HSDP_RXPCSRESET_M,
  output XPIPE_HSDP_RXPCSRESET_M_1,
  output XPIPE_HSDP_RXPCSRESET_M_2,
  output XPIPE_HSDP_RXRESETDONE,
  output XPIPE_HSDP_RXRESETDONE_1,
  output XPIPE_HSDP_RXRESETDONE_2,
  output [1:0] XPIPE_HSDP_TXHEADER_M,
  output [1:0] XPIPE_HSDP_TXHEADER_M_1,
  output [1:0] XPIPE_HSDP_TXHEADER_M_2,
  output XPIPE_HSDP_TXRESETDONE,
  output XPIPE_HSDP_TXRESETDONE_1,
  output XPIPE_HSDP_TXRESETDONE_2,
  output [6:0] XPIPE_HSDP_TXSEQUENCE_M,
  output [6:0] XPIPE_HSDP_TXSEQUENCE_M_1,
  output [6:0] XPIPE_HSDP_TXSEQUENCE_M_2,
  output XPIPE_PCIELINKREACHTARGET_M,
  output XPIPE_PCIELINKREACHTARGET_M_1,
  output [5:0] XPIPE_PCIELTSSMSTATE_M,
  output [5:0] XPIPE_PCIELTSSMSTATE_M_1,
  output XPIPE_PCIE_PERST_N_M,
  output XPIPE_PCIE_PERST_N_M_1,
  output [2:0] XPIPE_PCIE_RATE_M,
  output [2:0] XPIPE_PCIE_RATE_M_1,
  output XPIPE_PHYESMADAPTSAVE_M,
  output XPIPE_PHYESMADAPTSAVE_M_1,
  output XPIPE_PHYREADY_FR_BOT_M,
  output XPIPE_PHYREADY_TO_BOT,
  output XPIPE_PHY_READY,
  output XPIPE_PHY_READY_1,
  output XPIPE_PIPE_CH0_PHYSTATUS,
  output [1:0] XPIPE_PIPE_CH0_POWERDOWN_M,
  output [1:0] XPIPE_PIPE_CH0_RXCHARISK,
  output [31:0] XPIPE_PIPE_CH0_RXDATA,
  output XPIPE_PIPE_CH0_RXDATAVALID,
  output XPIPE_PIPE_CH0_RXELECIDLE,
  output XPIPE_PIPE_CH0_RXPOLARITY_M,
  output XPIPE_PIPE_CH0_RXSTARTBLOCK,
  output [2:0] XPIPE_PIPE_CH0_RXSTATUS,
  output [1:0] XPIPE_PIPE_CH0_RXSYNCHEADER,
  output XPIPE_PIPE_CH0_RXTERMINATION_M,
  output XPIPE_PIPE_CH0_RXVALID,
  output [1:0] XPIPE_PIPE_CH0_TXCHARISK_M,
  output XPIPE_PIPE_CH0_TXCOMPLIANCE_M,
  output XPIPE_PIPE_CH0_TXDATAVALID_M,
  output [31:0] XPIPE_PIPE_CH0_TXDATA_M,
  output XPIPE_PIPE_CH0_TXDEEMPH_M,
  output XPIPE_PIPE_CH0_TXDETECTRXLOOPBACK_M,
  output XPIPE_PIPE_CH0_TXELECIDLE_M,
  output [6:0] XPIPE_PIPE_CH0_TXMAINCURSOR_M,
  output [2:0] XPIPE_PIPE_CH0_TXMARGIN_M,
  output [4:0] XPIPE_PIPE_CH0_TXPOSTCURSOR_M,
  output [4:0] XPIPE_PIPE_CH0_TXPRECURSOR_M,
  output XPIPE_PIPE_CH0_TXSTARTBLOCK_M,
  output XPIPE_PIPE_CH0_TXSWING_M,
  output [1:0] XPIPE_PIPE_CH0_TXSYNCHEADER_M,
  output XPIPE_PIPE_CH10_PHYSTATUS,
  output [1:0] XPIPE_PIPE_CH10_POWERDOWN_M,
  output [1:0] XPIPE_PIPE_CH10_RXCHARISK,
  output [31:0] XPIPE_PIPE_CH10_RXDATA,
  output XPIPE_PIPE_CH10_RXDATAVALID,
  output XPIPE_PIPE_CH10_RXELECIDLE,
  output XPIPE_PIPE_CH10_RXPOLARITY_M,
  output XPIPE_PIPE_CH10_RXSTARTBLOCK,
  output [2:0] XPIPE_PIPE_CH10_RXSTATUS,
  output [1:0] XPIPE_PIPE_CH10_RXSYNCHEADER,
  output XPIPE_PIPE_CH10_RXTERMINATION_M,
  output XPIPE_PIPE_CH10_RXVALID,
  output [1:0] XPIPE_PIPE_CH10_TXCHARISK_M,
  output XPIPE_PIPE_CH10_TXCOMPLIANCE_M,
  output XPIPE_PIPE_CH10_TXDATAVALID_M,
  output [31:0] XPIPE_PIPE_CH10_TXDATA_M,
  output XPIPE_PIPE_CH10_TXDEEMPH_M,
  output XPIPE_PIPE_CH10_TXDETECTRXLOOPBACK_M,
  output XPIPE_PIPE_CH10_TXELECIDLE_M,
  output [6:0] XPIPE_PIPE_CH10_TXMAINCURSOR_M,
  output [2:0] XPIPE_PIPE_CH10_TXMARGIN_M,
  output [4:0] XPIPE_PIPE_CH10_TXPOSTCURSOR_M,
  output [4:0] XPIPE_PIPE_CH10_TXPRECURSOR_M,
  output XPIPE_PIPE_CH10_TXSTARTBLOCK_M,
  output XPIPE_PIPE_CH10_TXSWING_M,
  output [1:0] XPIPE_PIPE_CH10_TXSYNCHEADER_M,
  output XPIPE_PIPE_CH11_PHYSTATUS,
  output [1:0] XPIPE_PIPE_CH11_POWERDOWN_M,
  output [1:0] XPIPE_PIPE_CH11_RXCHARISK,
  output [31:0] XPIPE_PIPE_CH11_RXDATA,
  output XPIPE_PIPE_CH11_RXDATAVALID,
  output XPIPE_PIPE_CH11_RXELECIDLE,
  output XPIPE_PIPE_CH11_RXPOLARITY_M,
  output XPIPE_PIPE_CH11_RXSTARTBLOCK,
  output [2:0] XPIPE_PIPE_CH11_RXSTATUS,
  output [1:0] XPIPE_PIPE_CH11_RXSYNCHEADER,
  output XPIPE_PIPE_CH11_RXTERMINATION_M,
  output XPIPE_PIPE_CH11_RXVALID,
  output [1:0] XPIPE_PIPE_CH11_TXCHARISK_M,
  output XPIPE_PIPE_CH11_TXCOMPLIANCE_M,
  output XPIPE_PIPE_CH11_TXDATAVALID_M,
  output [31:0] XPIPE_PIPE_CH11_TXDATA_M,
  output XPIPE_PIPE_CH11_TXDEEMPH_M,
  output XPIPE_PIPE_CH11_TXDETECTRXLOOPBACK_M,
  output XPIPE_PIPE_CH11_TXELECIDLE_M,
  output [6:0] XPIPE_PIPE_CH11_TXMAINCURSOR_M,
  output [2:0] XPIPE_PIPE_CH11_TXMARGIN_M,
  output [4:0] XPIPE_PIPE_CH11_TXPOSTCURSOR_M,
  output [4:0] XPIPE_PIPE_CH11_TXPRECURSOR_M,
  output XPIPE_PIPE_CH11_TXSTARTBLOCK_M,
  output XPIPE_PIPE_CH11_TXSWING_M,
  output [1:0] XPIPE_PIPE_CH11_TXSYNCHEADER_M,
  output XPIPE_PIPE_CH12_PHYSTATUS,
  output [1:0] XPIPE_PIPE_CH12_POWERDOWN_M,
  output [1:0] XPIPE_PIPE_CH12_RXCHARISK,
  output [31:0] XPIPE_PIPE_CH12_RXDATA,
  output XPIPE_PIPE_CH12_RXDATAVALID,
  output XPIPE_PIPE_CH12_RXELECIDLE,
  output XPIPE_PIPE_CH12_RXPOLARITY_M,
  output XPIPE_PIPE_CH12_RXSTARTBLOCK,
  output [2:0] XPIPE_PIPE_CH12_RXSTATUS,
  output [1:0] XPIPE_PIPE_CH12_RXSYNCHEADER,
  output XPIPE_PIPE_CH12_RXTERMINATION_M,
  output XPIPE_PIPE_CH12_RXVALID,
  output [1:0] XPIPE_PIPE_CH12_TXCHARISK_M,
  output XPIPE_PIPE_CH12_TXCOMPLIANCE_M,
  output XPIPE_PIPE_CH12_TXDATAVALID_M,
  output [31:0] XPIPE_PIPE_CH12_TXDATA_M,
  output XPIPE_PIPE_CH12_TXDEEMPH_M,
  output XPIPE_PIPE_CH12_TXDETECTRXLOOPBACK_M,
  output XPIPE_PIPE_CH12_TXELECIDLE_M,
  output [6:0] XPIPE_PIPE_CH12_TXMAINCURSOR_M,
  output [2:0] XPIPE_PIPE_CH12_TXMARGIN_M,
  output [4:0] XPIPE_PIPE_CH12_TXPOSTCURSOR_M,
  output [4:0] XPIPE_PIPE_CH12_TXPRECURSOR_M,
  output XPIPE_PIPE_CH12_TXSTARTBLOCK_M,
  output XPIPE_PIPE_CH12_TXSWING_M,
  output [1:0] XPIPE_PIPE_CH12_TXSYNCHEADER_M,
  output XPIPE_PIPE_CH13_PHYSTATUS,
  output [1:0] XPIPE_PIPE_CH13_POWERDOWN_M,
  output [1:0] XPIPE_PIPE_CH13_RXCHARISK,
  output [31:0] XPIPE_PIPE_CH13_RXDATA,
  output XPIPE_PIPE_CH13_RXDATAVALID,
  output XPIPE_PIPE_CH13_RXELECIDLE,
  output XPIPE_PIPE_CH13_RXPOLARITY_M,
  output XPIPE_PIPE_CH13_RXSTARTBLOCK,
  output [2:0] XPIPE_PIPE_CH13_RXSTATUS,
  output [1:0] XPIPE_PIPE_CH13_RXSYNCHEADER,
  output XPIPE_PIPE_CH13_RXTERMINATION_M,
  output XPIPE_PIPE_CH13_RXVALID,
  output [1:0] XPIPE_PIPE_CH13_TXCHARISK_M,
  output XPIPE_PIPE_CH13_TXCOMPLIANCE_M,
  output XPIPE_PIPE_CH13_TXDATAVALID_M,
  output [31:0] XPIPE_PIPE_CH13_TXDATA_M,
  output XPIPE_PIPE_CH13_TXDEEMPH_M,
  output XPIPE_PIPE_CH13_TXDETECTRXLOOPBACK_M,
  output XPIPE_PIPE_CH13_TXELECIDLE_M,
  output [6:0] XPIPE_PIPE_CH13_TXMAINCURSOR_M,
  output [2:0] XPIPE_PIPE_CH13_TXMARGIN_M,
  output [4:0] XPIPE_PIPE_CH13_TXPOSTCURSOR_M,
  output [4:0] XPIPE_PIPE_CH13_TXPRECURSOR_M,
  output XPIPE_PIPE_CH13_TXSTARTBLOCK_M,
  output XPIPE_PIPE_CH13_TXSWING_M,
  output [1:0] XPIPE_PIPE_CH13_TXSYNCHEADER_M,
  output XPIPE_PIPE_CH14_PHYSTATUS,
  output [1:0] XPIPE_PIPE_CH14_POWERDOWN_M,
  output [1:0] XPIPE_PIPE_CH14_RXCHARISK,
  output [31:0] XPIPE_PIPE_CH14_RXDATA,
  output XPIPE_PIPE_CH14_RXDATAVALID,
  output XPIPE_PIPE_CH14_RXELECIDLE,
  output XPIPE_PIPE_CH14_RXPOLARITY_M,
  output XPIPE_PIPE_CH14_RXSTARTBLOCK,
  output [2:0] XPIPE_PIPE_CH14_RXSTATUS,
  output [1:0] XPIPE_PIPE_CH14_RXSYNCHEADER,
  output XPIPE_PIPE_CH14_RXTERMINATION_M,
  output XPIPE_PIPE_CH14_RXVALID,
  output [1:0] XPIPE_PIPE_CH14_TXCHARISK_M,
  output XPIPE_PIPE_CH14_TXCOMPLIANCE_M,
  output XPIPE_PIPE_CH14_TXDATAVALID_M,
  output [31:0] XPIPE_PIPE_CH14_TXDATA_M,
  output XPIPE_PIPE_CH14_TXDEEMPH_M,
  output XPIPE_PIPE_CH14_TXDETECTRXLOOPBACK_M,
  output XPIPE_PIPE_CH14_TXELECIDLE_M,
  output [6:0] XPIPE_PIPE_CH14_TXMAINCURSOR_M,
  output [2:0] XPIPE_PIPE_CH14_TXMARGIN_M,
  output [4:0] XPIPE_PIPE_CH14_TXPOSTCURSOR_M,
  output [4:0] XPIPE_PIPE_CH14_TXPRECURSOR_M,
  output XPIPE_PIPE_CH14_TXSTARTBLOCK_M,
  output XPIPE_PIPE_CH14_TXSWING_M,
  output [1:0] XPIPE_PIPE_CH14_TXSYNCHEADER_M,
  output XPIPE_PIPE_CH15_PHYSTATUS,
  output [1:0] XPIPE_PIPE_CH15_POWERDOWN_M,
  output [1:0] XPIPE_PIPE_CH15_RXCHARISK,
  output [31:0] XPIPE_PIPE_CH15_RXDATA,
  output XPIPE_PIPE_CH15_RXDATAVALID,
  output XPIPE_PIPE_CH15_RXELECIDLE,
  output XPIPE_PIPE_CH15_RXPOLARITY_M,
  output XPIPE_PIPE_CH15_RXSTARTBLOCK,
  output [2:0] XPIPE_PIPE_CH15_RXSTATUS,
  output [1:0] XPIPE_PIPE_CH15_RXSYNCHEADER,
  output XPIPE_PIPE_CH15_RXTERMINATION_M,
  output XPIPE_PIPE_CH15_RXVALID,
  output [1:0] XPIPE_PIPE_CH15_TXCHARISK_M,
  output XPIPE_PIPE_CH15_TXCOMPLIANCE_M,
  output XPIPE_PIPE_CH15_TXDATAVALID_M,
  output [31:0] XPIPE_PIPE_CH15_TXDATA_M,
  output XPIPE_PIPE_CH15_TXDEEMPH_M,
  output XPIPE_PIPE_CH15_TXDETECTRXLOOPBACK_M,
  output XPIPE_PIPE_CH15_TXELECIDLE_M,
  output [6:0] XPIPE_PIPE_CH15_TXMAINCURSOR_M,
  output [2:0] XPIPE_PIPE_CH15_TXMARGIN_M,
  output [4:0] XPIPE_PIPE_CH15_TXPOSTCURSOR_M,
  output [4:0] XPIPE_PIPE_CH15_TXPRECURSOR_M,
  output XPIPE_PIPE_CH15_TXSTARTBLOCK_M,
  output XPIPE_PIPE_CH15_TXSWING_M,
  output [1:0] XPIPE_PIPE_CH15_TXSYNCHEADER_M,
  output XPIPE_PIPE_CH1_PHYSTATUS,
  output [1:0] XPIPE_PIPE_CH1_POWERDOWN_M,
  output [1:0] XPIPE_PIPE_CH1_RXCHARISK,
  output [31:0] XPIPE_PIPE_CH1_RXDATA,
  output XPIPE_PIPE_CH1_RXDATAVALID,
  output XPIPE_PIPE_CH1_RXELECIDLE,
  output XPIPE_PIPE_CH1_RXPOLARITY_M,
  output XPIPE_PIPE_CH1_RXSTARTBLOCK,
  output [2:0] XPIPE_PIPE_CH1_RXSTATUS,
  output [1:0] XPIPE_PIPE_CH1_RXSYNCHEADER,
  output XPIPE_PIPE_CH1_RXTERMINATION_M,
  output XPIPE_PIPE_CH1_RXVALID,
  output [1:0] XPIPE_PIPE_CH1_TXCHARISK_M,
  output XPIPE_PIPE_CH1_TXCOMPLIANCE_M,
  output XPIPE_PIPE_CH1_TXDATAVALID_M,
  output [31:0] XPIPE_PIPE_CH1_TXDATA_M,
  output XPIPE_PIPE_CH1_TXDEEMPH_M,
  output XPIPE_PIPE_CH1_TXDETECTRXLOOPBACK_M,
  output XPIPE_PIPE_CH1_TXELECIDLE_M,
  output [6:0] XPIPE_PIPE_CH1_TXMAINCURSOR_M,
  output [2:0] XPIPE_PIPE_CH1_TXMARGIN_M,
  output [4:0] XPIPE_PIPE_CH1_TXPOSTCURSOR_M,
  output [4:0] XPIPE_PIPE_CH1_TXPRECURSOR_M,
  output XPIPE_PIPE_CH1_TXSTARTBLOCK_M,
  output XPIPE_PIPE_CH1_TXSWING_M,
  output [1:0] XPIPE_PIPE_CH1_TXSYNCHEADER_M,
  output XPIPE_PIPE_CH2_PHYSTATUS,
  output [1:0] XPIPE_PIPE_CH2_POWERDOWN_M,
  output [1:0] XPIPE_PIPE_CH2_RXCHARISK,
  output [31:0] XPIPE_PIPE_CH2_RXDATA,
  output XPIPE_PIPE_CH2_RXDATAVALID,
  output XPIPE_PIPE_CH2_RXELECIDLE,
  output XPIPE_PIPE_CH2_RXPOLARITY_M,
  output XPIPE_PIPE_CH2_RXSTARTBLOCK,
  output [2:0] XPIPE_PIPE_CH2_RXSTATUS,
  output [1:0] XPIPE_PIPE_CH2_RXSYNCHEADER,
  output XPIPE_PIPE_CH2_RXTERMINATION_M,
  output XPIPE_PIPE_CH2_RXVALID,
  output [1:0] XPIPE_PIPE_CH2_TXCHARISK_M,
  output XPIPE_PIPE_CH2_TXCOMPLIANCE_M,
  output XPIPE_PIPE_CH2_TXDATAVALID_M,
  output [31:0] XPIPE_PIPE_CH2_TXDATA_M,
  output XPIPE_PIPE_CH2_TXDEEMPH_M,
  output XPIPE_PIPE_CH2_TXDETECTRXLOOPBACK_M,
  output XPIPE_PIPE_CH2_TXELECIDLE_M,
  output [6:0] XPIPE_PIPE_CH2_TXMAINCURSOR_M,
  output [2:0] XPIPE_PIPE_CH2_TXMARGIN_M,
  output [4:0] XPIPE_PIPE_CH2_TXPOSTCURSOR_M,
  output [4:0] XPIPE_PIPE_CH2_TXPRECURSOR_M,
  output XPIPE_PIPE_CH2_TXSTARTBLOCK_M,
  output XPIPE_PIPE_CH2_TXSWING_M,
  output [1:0] XPIPE_PIPE_CH2_TXSYNCHEADER_M,
  output XPIPE_PIPE_CH3_PHYSTATUS,
  output [1:0] XPIPE_PIPE_CH3_POWERDOWN_M,
  output [1:0] XPIPE_PIPE_CH3_RXCHARISK,
  output [31:0] XPIPE_PIPE_CH3_RXDATA,
  output XPIPE_PIPE_CH3_RXDATAVALID,
  output XPIPE_PIPE_CH3_RXELECIDLE,
  output XPIPE_PIPE_CH3_RXPOLARITY_M,
  output XPIPE_PIPE_CH3_RXSTARTBLOCK,
  output [2:0] XPIPE_PIPE_CH3_RXSTATUS,
  output [1:0] XPIPE_PIPE_CH3_RXSYNCHEADER,
  output XPIPE_PIPE_CH3_RXTERMINATION_M,
  output XPIPE_PIPE_CH3_RXVALID,
  output [1:0] XPIPE_PIPE_CH3_TXCHARISK_M,
  output XPIPE_PIPE_CH3_TXCOMPLIANCE_M,
  output XPIPE_PIPE_CH3_TXDATAVALID_M,
  output [31:0] XPIPE_PIPE_CH3_TXDATA_M,
  output XPIPE_PIPE_CH3_TXDEEMPH_M,
  output XPIPE_PIPE_CH3_TXDETECTRXLOOPBACK_M,
  output XPIPE_PIPE_CH3_TXELECIDLE_M,
  output [6:0] XPIPE_PIPE_CH3_TXMAINCURSOR_M,
  output [2:0] XPIPE_PIPE_CH3_TXMARGIN_M,
  output [4:0] XPIPE_PIPE_CH3_TXPOSTCURSOR_M,
  output [4:0] XPIPE_PIPE_CH3_TXPRECURSOR_M,
  output XPIPE_PIPE_CH3_TXSTARTBLOCK_M,
  output XPIPE_PIPE_CH3_TXSWING_M,
  output [1:0] XPIPE_PIPE_CH3_TXSYNCHEADER_M,
  output XPIPE_PIPE_CH4_PHYSTATUS,
  output [1:0] XPIPE_PIPE_CH4_POWERDOWN_M,
  output [1:0] XPIPE_PIPE_CH4_RXCHARISK,
  output [31:0] XPIPE_PIPE_CH4_RXDATA,
  output XPIPE_PIPE_CH4_RXDATAVALID,
  output XPIPE_PIPE_CH4_RXELECIDLE,
  output XPIPE_PIPE_CH4_RXPOLARITY_M,
  output XPIPE_PIPE_CH4_RXSTARTBLOCK,
  output [2:0] XPIPE_PIPE_CH4_RXSTATUS,
  output [1:0] XPIPE_PIPE_CH4_RXSYNCHEADER,
  output XPIPE_PIPE_CH4_RXTERMINATION_M,
  output XPIPE_PIPE_CH4_RXVALID,
  output [1:0] XPIPE_PIPE_CH4_TXCHARISK_M,
  output XPIPE_PIPE_CH4_TXCOMPLIANCE_M,
  output XPIPE_PIPE_CH4_TXDATAVALID_M,
  output [31:0] XPIPE_PIPE_CH4_TXDATA_M,
  output XPIPE_PIPE_CH4_TXDEEMPH_M,
  output XPIPE_PIPE_CH4_TXDETECTRXLOOPBACK_M,
  output XPIPE_PIPE_CH4_TXELECIDLE_M,
  output [6:0] XPIPE_PIPE_CH4_TXMAINCURSOR_M,
  output [2:0] XPIPE_PIPE_CH4_TXMARGIN_M,
  output [4:0] XPIPE_PIPE_CH4_TXPOSTCURSOR_M,
  output [4:0] XPIPE_PIPE_CH4_TXPRECURSOR_M,
  output XPIPE_PIPE_CH4_TXSTARTBLOCK_M,
  output XPIPE_PIPE_CH4_TXSWING_M,
  output [1:0] XPIPE_PIPE_CH4_TXSYNCHEADER_M,
  output XPIPE_PIPE_CH5_PHYSTATUS,
  output [1:0] XPIPE_PIPE_CH5_POWERDOWN_M,
  output [1:0] XPIPE_PIPE_CH5_RXCHARISK,
  output [31:0] XPIPE_PIPE_CH5_RXDATA,
  output XPIPE_PIPE_CH5_RXDATAVALID,
  output XPIPE_PIPE_CH5_RXELECIDLE,
  output XPIPE_PIPE_CH5_RXPOLARITY_M,
  output XPIPE_PIPE_CH5_RXSTARTBLOCK,
  output [2:0] XPIPE_PIPE_CH5_RXSTATUS,
  output [1:0] XPIPE_PIPE_CH5_RXSYNCHEADER,
  output XPIPE_PIPE_CH5_RXTERMINATION_M,
  output XPIPE_PIPE_CH5_RXVALID,
  output [1:0] XPIPE_PIPE_CH5_TXCHARISK_M,
  output XPIPE_PIPE_CH5_TXCOMPLIANCE_M,
  output XPIPE_PIPE_CH5_TXDATAVALID_M,
  output [31:0] XPIPE_PIPE_CH5_TXDATA_M,
  output XPIPE_PIPE_CH5_TXDEEMPH_M,
  output XPIPE_PIPE_CH5_TXDETECTRXLOOPBACK_M,
  output XPIPE_PIPE_CH5_TXELECIDLE_M,
  output [6:0] XPIPE_PIPE_CH5_TXMAINCURSOR_M,
  output [2:0] XPIPE_PIPE_CH5_TXMARGIN_M,
  output [4:0] XPIPE_PIPE_CH5_TXPOSTCURSOR_M,
  output [4:0] XPIPE_PIPE_CH5_TXPRECURSOR_M,
  output XPIPE_PIPE_CH5_TXSTARTBLOCK_M,
  output XPIPE_PIPE_CH5_TXSWING_M,
  output [1:0] XPIPE_PIPE_CH5_TXSYNCHEADER_M,
  output XPIPE_PIPE_CH6_PHYSTATUS,
  output [1:0] XPIPE_PIPE_CH6_POWERDOWN_M,
  output [1:0] XPIPE_PIPE_CH6_RXCHARISK,
  output [31:0] XPIPE_PIPE_CH6_RXDATA,
  output XPIPE_PIPE_CH6_RXDATAVALID,
  output XPIPE_PIPE_CH6_RXELECIDLE,
  output XPIPE_PIPE_CH6_RXPOLARITY_M,
  output XPIPE_PIPE_CH6_RXSTARTBLOCK,
  output [2:0] XPIPE_PIPE_CH6_RXSTATUS,
  output [1:0] XPIPE_PIPE_CH6_RXSYNCHEADER,
  output XPIPE_PIPE_CH6_RXTERMINATION_M,
  output XPIPE_PIPE_CH6_RXVALID,
  output [1:0] XPIPE_PIPE_CH6_TXCHARISK_M,
  output XPIPE_PIPE_CH6_TXCOMPLIANCE_M,
  output XPIPE_PIPE_CH6_TXDATAVALID_M,
  output [31:0] XPIPE_PIPE_CH6_TXDATA_M,
  output XPIPE_PIPE_CH6_TXDEEMPH_M,
  output XPIPE_PIPE_CH6_TXDETECTRXLOOPBACK_M,
  output XPIPE_PIPE_CH6_TXELECIDLE_M,
  output [6:0] XPIPE_PIPE_CH6_TXMAINCURSOR_M,
  output [2:0] XPIPE_PIPE_CH6_TXMARGIN_M,
  output [4:0] XPIPE_PIPE_CH6_TXPOSTCURSOR_M,
  output [4:0] XPIPE_PIPE_CH6_TXPRECURSOR_M,
  output XPIPE_PIPE_CH6_TXSTARTBLOCK_M,
  output XPIPE_PIPE_CH6_TXSWING_M,
  output [1:0] XPIPE_PIPE_CH6_TXSYNCHEADER_M,
  output XPIPE_PIPE_CH7_PHYSTATUS,
  output [1:0] XPIPE_PIPE_CH7_POWERDOWN_M,
  output [1:0] XPIPE_PIPE_CH7_RXCHARISK,
  output [31:0] XPIPE_PIPE_CH7_RXDATA,
  output XPIPE_PIPE_CH7_RXDATAVALID,
  output XPIPE_PIPE_CH7_RXELECIDLE,
  output XPIPE_PIPE_CH7_RXPOLARITY_M,
  output XPIPE_PIPE_CH7_RXSTARTBLOCK,
  output [2:0] XPIPE_PIPE_CH7_RXSTATUS,
  output [1:0] XPIPE_PIPE_CH7_RXSYNCHEADER,
  output XPIPE_PIPE_CH7_RXTERMINATION_M,
  output XPIPE_PIPE_CH7_RXVALID,
  output [1:0] XPIPE_PIPE_CH7_TXCHARISK_M,
  output XPIPE_PIPE_CH7_TXCOMPLIANCE_M,
  output XPIPE_PIPE_CH7_TXDATAVALID_M,
  output [31:0] XPIPE_PIPE_CH7_TXDATA_M,
  output XPIPE_PIPE_CH7_TXDEEMPH_M,
  output XPIPE_PIPE_CH7_TXDETECTRXLOOPBACK_M,
  output XPIPE_PIPE_CH7_TXELECIDLE_M,
  output [6:0] XPIPE_PIPE_CH7_TXMAINCURSOR_M,
  output [2:0] XPIPE_PIPE_CH7_TXMARGIN_M,
  output [4:0] XPIPE_PIPE_CH7_TXPOSTCURSOR_M,
  output [4:0] XPIPE_PIPE_CH7_TXPRECURSOR_M,
  output XPIPE_PIPE_CH7_TXSTARTBLOCK_M,
  output XPIPE_PIPE_CH7_TXSWING_M,
  output [1:0] XPIPE_PIPE_CH7_TXSYNCHEADER_M,
  output XPIPE_PIPE_CH8_PHYSTATUS,
  output [1:0] XPIPE_PIPE_CH8_POWERDOWN_M,
  output [1:0] XPIPE_PIPE_CH8_RXCHARISK,
  output [31:0] XPIPE_PIPE_CH8_RXDATA,
  output XPIPE_PIPE_CH8_RXDATAVALID,
  output XPIPE_PIPE_CH8_RXELECIDLE,
  output XPIPE_PIPE_CH8_RXPOLARITY_M,
  output XPIPE_PIPE_CH8_RXSTARTBLOCK,
  output [2:0] XPIPE_PIPE_CH8_RXSTATUS,
  output [1:0] XPIPE_PIPE_CH8_RXSYNCHEADER,
  output XPIPE_PIPE_CH8_RXTERMINATION_M,
  output XPIPE_PIPE_CH8_RXVALID,
  output [1:0] XPIPE_PIPE_CH8_TXCHARISK_M,
  output XPIPE_PIPE_CH8_TXCOMPLIANCE_M,
  output XPIPE_PIPE_CH8_TXDATAVALID_M,
  output [31:0] XPIPE_PIPE_CH8_TXDATA_M,
  output XPIPE_PIPE_CH8_TXDEEMPH_M,
  output XPIPE_PIPE_CH8_TXDETECTRXLOOPBACK_M,
  output XPIPE_PIPE_CH8_TXELECIDLE_M,
  output [6:0] XPIPE_PIPE_CH8_TXMAINCURSOR_M,
  output [2:0] XPIPE_PIPE_CH8_TXMARGIN_M,
  output [4:0] XPIPE_PIPE_CH8_TXPOSTCURSOR_M,
  output [4:0] XPIPE_PIPE_CH8_TXPRECURSOR_M,
  output XPIPE_PIPE_CH8_TXSTARTBLOCK_M,
  output XPIPE_PIPE_CH8_TXSWING_M,
  output [1:0] XPIPE_PIPE_CH8_TXSYNCHEADER_M,
  output XPIPE_PIPE_CH9_PHYSTATUS,
  output [1:0] XPIPE_PIPE_CH9_POWERDOWN_M,
  output [1:0] XPIPE_PIPE_CH9_RXCHARISK,
  output [31:0] XPIPE_PIPE_CH9_RXDATA,
  output XPIPE_PIPE_CH9_RXDATAVALID,
  output XPIPE_PIPE_CH9_RXELECIDLE,
  output XPIPE_PIPE_CH9_RXPOLARITY_M,
  output XPIPE_PIPE_CH9_RXSTARTBLOCK,
  output [2:0] XPIPE_PIPE_CH9_RXSTATUS,
  output [1:0] XPIPE_PIPE_CH9_RXSYNCHEADER,
  output XPIPE_PIPE_CH9_RXTERMINATION_M,
  output XPIPE_PIPE_CH9_RXVALID,
  output [1:0] XPIPE_PIPE_CH9_TXCHARISK_M,
  output XPIPE_PIPE_CH9_TXCOMPLIANCE_M,
  output XPIPE_PIPE_CH9_TXDATAVALID_M,
  output [31:0] XPIPE_PIPE_CH9_TXDATA_M,
  output XPIPE_PIPE_CH9_TXDEEMPH_M,
  output XPIPE_PIPE_CH9_TXDETECTRXLOOPBACK_M,
  output XPIPE_PIPE_CH9_TXELECIDLE_M,
  output [6:0] XPIPE_PIPE_CH9_TXMAINCURSOR_M,
  output [2:0] XPIPE_PIPE_CH9_TXMARGIN_M,
  output [4:0] XPIPE_PIPE_CH9_TXPOSTCURSOR_M,
  output [4:0] XPIPE_PIPE_CH9_TXPRECURSOR_M,
  output XPIPE_PIPE_CH9_TXSTARTBLOCK_M,
  output XPIPE_PIPE_CH9_TXSWING_M,
  output [1:0] XPIPE_PIPE_CH9_TXSYNCHEADER_M,
  output XPIPE_RXMARGINREQACK,
  output XPIPE_RXMARGINREQACK_1,
  output XPIPE_RXMARGINREQACK_2,
  output XPIPE_RXMARGINREQACK_3,
  output [3:0] XPIPE_RXMARGINREQCMD_M,
  output [3:0] XPIPE_RXMARGINREQCMD_M_1,
  output [3:0] XPIPE_RXMARGINREQCMD_M_2,
  output [3:0] XPIPE_RXMARGINREQCMD_M_3,
  output [1:0] XPIPE_RXMARGINREQLANENUM_M,
  output [1:0] XPIPE_RXMARGINREQLANENUM_M_1,
  output [1:0] XPIPE_RXMARGINREQLANENUM_M_2,
  output [1:0] XPIPE_RXMARGINREQLANENUM_M_3,
  output [7:0] XPIPE_RXMARGINREQPAYLOAD_M,
  output [7:0] XPIPE_RXMARGINREQPAYLOAD_M_1,
  output [7:0] XPIPE_RXMARGINREQPAYLOAD_M_2,
  output [7:0] XPIPE_RXMARGINREQPAYLOAD_M_3,
  output XPIPE_RXMARGINREQREQ_M,
  output XPIPE_RXMARGINREQREQ_M_1,
  output XPIPE_RXMARGINREQREQ_M_2,
  output XPIPE_RXMARGINREQREQ_M_3,
  output XPIPE_RXMARGINRESACK_M,
  output XPIPE_RXMARGINRESACK_M_1,
  output XPIPE_RXMARGINRESACK_M_2,
  output XPIPE_RXMARGINRESACK_M_3,
  output [3:0] XPIPE_RXMARGINRESCMD,
  output [3:0] XPIPE_RXMARGINRESCMD_1,
  output [3:0] XPIPE_RXMARGINRESCMD_2,
  output [3:0] XPIPE_RXMARGINRESCMD_3,
  output [1:0] XPIPE_RXMARGINRESLANENUM,
  output [1:0] XPIPE_RXMARGINRESLANENUM_1,
  output [1:0] XPIPE_RXMARGINRESLANENUM_2,
  output [1:0] XPIPE_RXMARGINRESLANENUM_3,
  output [7:0] XPIPE_RXMARGINRESPAYLOAD,
  output [7:0] XPIPE_RXMARGINRESPAYLOAD_1,
  output [7:0] XPIPE_RXMARGINRESPAYLOAD_2,
  output [7:0] XPIPE_RXMARGINRESPAYLOAD_3,
  output XPIPE_RXMARGINRESREQ,
  output XPIPE_RXMARGINRESREQ_1,
  output XPIPE_RXMARGINRESREQ_2,
  output XPIPE_RXMARGINRESREQ_3,

  input ALTCLK,
  input APB3CLK,
  input [15:0] APB3PADDR,
  input APB3PENABLE,
  input [31:0] APB3PRDATA_M,
  input APB3PREADY_M,
  input APB3PRESETN,
  input APB3PSEL,
  input APB3PSLVERR_M,
  input [31:0] APB3PWDATA,
  input APB3PWRITE,
  input AXISCLK,
  input BGBYPASSB,
  input BGMONITORENB,
  input BGPDB,
  input [4:0] BGRCALOVRD,
  input BGRCALOVRDENB,
  input [3:0] CH0_BUFGTCEMASK_M,
  input CH0_BUFGTCE_M,
  input [11:0] CH0_BUFGTDIV_M,
  input [3:0] CH0_BUFGTRSTMASK_M,
  input CH0_BUFGTRST_M,
  input CH0_CDRBMCDRREQ,
  input CH0_CDRFREQOS,
  input CH0_CDRINCPCTRL,
  input CH0_CDRSTEPDIR,
  input CH0_CDRSTEPSQ,
  input CH0_CDRSTEPSX,
  input CH0_CFOKOVRDFINISH,
  input CH0_CFOKOVRDPULSE,
  input CH0_CFOKOVRDRDY0_M,
  input CH0_CFOKOVRDRDY1_M,
  input CH0_CFOKOVRDSTART,
  input CH0_CLKRSVD0,
  input CH0_CLKRSVD1,
  input CH0_DMONFIFORESET,
  input CH0_DMONITORCLK,
  input [31:0] CH0_DMONITOROUT_M,
  input CH0_EYESCANDATAERROR_M,
  input CH0_EYESCANRESET,
  input CH0_EYESCANTRIGGER,
  input [15:0] CH0_GTRSVD,
  input CH0_GTRXRESET,
  input CH0_GTTXRESET,
  input CH0_HSDPPCSRESET,
  input CH0_ILORESET,
  input CH0_ILORESETDONE_M,
  input CH0_ILORESETMASK,
  input [2:0] CH0_LOOPBACK,
  input CH0_PCIERSTB,
  input [15:0] CH0_PCSRSVDIN,
  input [15:0] CH0_PCSRSVDOUT_M,
  input CH0_PHYESMADAPTSAVE,
  input CH0_PHYREADY_M,
  input CH0_PHYSTATUS_M,
  input [15:0] CH0_PINRSVDAS_M,
  input CH0_RESETEXCEPTION_M,
  input [7:0] CH0_RX10GSTAT_M,
  input [2:0] CH0_RXBUFSTATUS_M,
  input CH0_RXBYTEISALIGNED_M,
  input CH0_RXBYTEREALIGN_M,
  input CH0_RXCDRHOLD,
  input CH0_RXCDRLOCK_M,
  input CH0_RXCDROVRDEN,
  input CH0_RXCDRPHDONE_M,
  input CH0_RXCDRRESET,
  input CH0_RXCHANBONDSEQ_M,
  input CH0_RXCHANISALIGNED_M,
  input CH0_RXCHANREALIGN_M,
  input [4:0] CH0_RXCHBONDI,
  input [4:0] CH0_RXCHBONDO_M,
  input [1:0] CH0_RXCLKCORCNT_M,
  input CH0_RXCOMINITDET_M,
  input CH0_RXCOMMADET_M,
  input CH0_RXCOMSASDET_M,
  input CH0_RXCOMWAKEDET_M,
  input [15:0] CH0_RXCTRL0_M,
  input [15:0] CH0_RXCTRL1_M,
  input [7:0] CH0_RXCTRL2_M,
  input [7:0] CH0_RXCTRL3_M,
  input CH0_RXDAPICODEOVRDEN,
  input CH0_RXDAPICODERESET,
  input [7:0] CH0_RXDATAEXTENDRSVD_M,
  input [1:0] CH0_RXDATAVALID_M,
  input [127:0] CH0_RXDATA_M,
  input CH0_RXDCCDONE_M,
  input CH0_RXDLYALIGNERR_M,
  input CH0_RXDLYALIGNPROG_M,
  input CH0_RXDLYALIGNREQ,
  input CH0_RXELECIDLE_M,
  input CH0_RXEQTRAINING,
  input CH0_RXFINEALIGNDONE_M,
  input CH0_RXGEARBOXSLIP,
  input [1:0] CH0_RXHEADERVALID_M,
  input [5:0] CH0_RXHEADER_M,
  input CH0_RXLATCLK,
  input CH0_RXLPMEN,
  input CH0_RXMLDCHAINDONE,
  input CH0_RXMLDCHAINREQ,
  input CH0_RXMLFINEALIGNREQ,
  input CH0_RXOOBRESET,
  input CH0_RXOSINTDONE_M,
  input CH0_RXOSINTSTARTED_M,
  input CH0_RXOSINTSTROBEDONE_M,
  input CH0_RXOSINTSTROBESTARTED_M,
  input CH0_RXOUTCLK_M,
  input [4:0] CH0_RXPCSRESETMASK,
  input [1:0] CH0_RXPD,
  input CH0_RXPHALIGNDONE_M,
  input CH0_RXPHALIGNERR_M,
  input CH0_RXPHALIGNREQ,
  input [1:0] CH0_RXPHALIGNRESETMASK,
  input CH0_RXPHDLYPD,
  input CH0_RXPHDLYRESET,
  input CH0_RXPHDLYRESETDONE_M,
  input CH0_RXPHSETINITDONE_M,
  input CH0_RXPHSETINITREQ,
  input CH0_RXPHSHIFT180,
  input CH0_RXPHSHIFT180DONE_M,
  input CH0_RXPMARESETDONE_M,
  input [6:0] CH0_RXPMARESETMASK,
  input CH0_RXPOLARITY,
  input CH0_RXPRBSCNTRESET,
  input CH0_RXPRBSERR_M,
  input CH0_RXPRBSLOCKED_M,
  input [3:0] CH0_RXPRBSSEL,
  input CH0_RXPROGDIVRESET,
  input CH0_RXPROGDIVRESETDONE_M,
  input [7:0] CH0_RXRATE,
  input CH0_RXRESETDONE_M,
  input [1:0] CH0_RXRESETMODE,
  input CH0_RXSLIDE,
  input CH0_RXSLIDERDY_M,
  input [1:0] CH0_RXSTARTOFSEQ_M,
  input [2:0] CH0_RXSTATUS_M,
  input CH0_RXSYNCALLIN,
  input CH0_RXSYNCDONE_M,
  input CH0_RXTERMINATION,
  input CH0_RXUSERRDY,
  input CH0_RXUSRCLK,
  input CH0_RXVALID_M,
  input CH0_TSTCLK0,
  input CH0_TSTCLK1,
  input [19:0] CH0_TSTIN,
  input CH0_TX10GSTAT_M,
  input [1:0] CH0_TXBUFSTATUS_M,
  input CH0_TXCOMFINISH_M,
  input CH0_TXCOMINIT,
  input CH0_TXCOMSAS,
  input CH0_TXCOMWAKE,
  input [15:0] CH0_TXCTRL0,
  input [15:0] CH0_TXCTRL1,
  input [7:0] CH0_TXCTRL2,
  input CH0_TXDAPICODEOVRDEN,
  input CH0_TXDAPICODERESET,
  input [127:0] CH0_TXDATA,
  input [7:0] CH0_TXDATAEXTENDRSVD,
  input CH0_TXDCCDONE_M,
  input [1:0] CH0_TXDEEMPH,
  input CH0_TXDETECTRX,
  input [4:0] CH0_TXDIFFCTRL,
  input CH0_TXDLYALIGNERR_M,
  input CH0_TXDLYALIGNPROG_M,
  input CH0_TXDLYALIGNREQ,
  input CH0_TXELECIDLE,
  input [5:0] CH0_TXHEADER,
  input CH0_TXINHIBIT,
  input CH0_TXLATCLK,
  input [6:0] CH0_TXMAINCURSOR,
  input [2:0] CH0_TXMARGIN,
  input CH0_TXMLDCHAINDONE,
  input CH0_TXMLDCHAINREQ,
  input CH0_TXONESZEROS,
  input CH0_TXOUTCLK_M,
  input CH0_TXPAUSEDELAYALIGN,
  input CH0_TXPCSRESETMASK,
  input [1:0] CH0_TXPD,
  input CH0_TXPHALIGNDONE_M,
  input CH0_TXPHALIGNERR_M,
  input CH0_TXPHALIGNOUTRSVD_M,
  input CH0_TXPHALIGNREQ,
  input [1:0] CH0_TXPHALIGNRESETMASK,
  input CH0_TXPHDLYPD,
  input CH0_TXPHDLYRESET,
  input CH0_TXPHDLYRESETDONE_M,
  input CH0_TXPHDLYTSTCLK,
  input CH0_TXPHSETINITDONE_M,
  input CH0_TXPHSETINITREQ,
  input CH0_TXPHSHIFT180,
  input CH0_TXPHSHIFT180DONE_M,
  input CH0_TXPICODEOVRDEN,
  input CH0_TXPICODERESET,
  input CH0_TXPIPPMEN,
  input [4:0] CH0_TXPIPPMSTEPSIZE,
  input CH0_TXPISOPD,
  input CH0_TXPMARESETDONE_M,
  input [2:0] CH0_TXPMARESETMASK,
  input CH0_TXPOLARITY,
  input [4:0] CH0_TXPOSTCURSOR,
  input CH0_TXPRBSFORCEERR,
  input [3:0] CH0_TXPRBSSEL,
  input [4:0] CH0_TXPRECURSOR,
  input CH0_TXPROGDIVRESET,
  input CH0_TXPROGDIVRESETDONE_M,
  input [7:0] CH0_TXRATE,
  input CH0_TXRESETDONE_M,
  input [1:0] CH0_TXRESETMODE,
  input [6:0] CH0_TXSEQUENCE,
  input CH0_TXSWING,
  input CH0_TXSYNCALLIN,
  input CH0_TXSYNCDONE_M,
  input CH0_TXUSERRDY,
  input CH0_TXUSRCLK,
  input [3:0] CH1_BUFGTCEMASK_M,
  input CH1_BUFGTCE_M,
  input [11:0] CH1_BUFGTDIV_M,
  input [3:0] CH1_BUFGTRSTMASK_M,
  input CH1_BUFGTRST_M,
  input CH1_CDRBMCDRREQ,
  input CH1_CDRFREQOS,
  input CH1_CDRINCPCTRL,
  input CH1_CDRSTEPDIR,
  input CH1_CDRSTEPSQ,
  input CH1_CDRSTEPSX,
  input CH1_CFOKOVRDFINISH,
  input CH1_CFOKOVRDPULSE,
  input CH1_CFOKOVRDRDY0_M,
  input CH1_CFOKOVRDRDY1_M,
  input CH1_CFOKOVRDSTART,
  input CH1_CLKRSVD0,
  input CH1_CLKRSVD1,
  input CH1_DMONFIFORESET,
  input CH1_DMONITORCLK,
  input [31:0] CH1_DMONITOROUT_M,
  input CH1_EYESCANDATAERROR_M,
  input CH1_EYESCANRESET,
  input CH1_EYESCANTRIGGER,
  input [15:0] CH1_GTRSVD,
  input CH1_GTRXRESET,
  input CH1_GTTXRESET,
  input CH1_HSDPPCSRESET,
  input CH1_ILORESET,
  input CH1_ILORESETDONE_M,
  input CH1_ILORESETMASK,
  input [2:0] CH1_LOOPBACK,
  input CH1_PCIERSTB,
  input [15:0] CH1_PCSRSVDIN,
  input [15:0] CH1_PCSRSVDOUT_M,
  input CH1_PHYESMADAPTSAVE,
  input CH1_PHYREADY_M,
  input CH1_PHYSTATUS_M,
  input [15:0] CH1_PINRSVDAS_M,
  input CH1_RESETEXCEPTION_M,
  input [7:0] CH1_RX10GSTAT_M,
  input [2:0] CH1_RXBUFSTATUS_M,
  input CH1_RXBYTEISALIGNED_M,
  input CH1_RXBYTEREALIGN_M,
  input CH1_RXCDRHOLD,
  input CH1_RXCDRLOCK_M,
  input CH1_RXCDROVRDEN,
  input CH1_RXCDRPHDONE_M,
  input CH1_RXCDRRESET,
  input CH1_RXCHANBONDSEQ_M,
  input CH1_RXCHANISALIGNED_M,
  input CH1_RXCHANREALIGN_M,
  input [4:0] CH1_RXCHBONDI,
  input [4:0] CH1_RXCHBONDO_M,
  input [1:0] CH1_RXCLKCORCNT_M,
  input CH1_RXCOMINITDET_M,
  input CH1_RXCOMMADET_M,
  input CH1_RXCOMSASDET_M,
  input CH1_RXCOMWAKEDET_M,
  input [15:0] CH1_RXCTRL0_M,
  input [15:0] CH1_RXCTRL1_M,
  input [7:0] CH1_RXCTRL2_M,
  input [7:0] CH1_RXCTRL3_M,
  input CH1_RXDAPICODEOVRDEN,
  input CH1_RXDAPICODERESET,
  input [7:0] CH1_RXDATAEXTENDRSVD_M,
  input [1:0] CH1_RXDATAVALID_M,
  input [127:0] CH1_RXDATA_M,
  input CH1_RXDCCDONE_M,
  input CH1_RXDLYALIGNERR_M,
  input CH1_RXDLYALIGNPROG_M,
  input CH1_RXDLYALIGNREQ,
  input CH1_RXELECIDLE_M,
  input CH1_RXEQTRAINING,
  input CH1_RXFINEALIGNDONE_M,
  input CH1_RXGEARBOXSLIP,
  input [1:0] CH1_RXHEADERVALID_M,
  input [5:0] CH1_RXHEADER_M,
  input CH1_RXLATCLK,
  input CH1_RXLPMEN,
  input CH1_RXMLDCHAINDONE,
  input CH1_RXMLDCHAINREQ,
  input CH1_RXMLFINEALIGNREQ,
  input CH1_RXOOBRESET,
  input CH1_RXOSINTDONE_M,
  input CH1_RXOSINTSTARTED_M,
  input CH1_RXOSINTSTROBEDONE_M,
  input CH1_RXOSINTSTROBESTARTED_M,
  input [4:0] CH1_RXPCSRESETMASK,
  input [1:0] CH1_RXPD,
  input CH1_RXPHALIGNDONE_M,
  input CH1_RXPHALIGNERR_M,
  input CH1_RXPHALIGNREQ,
  input [1:0] CH1_RXPHALIGNRESETMASK,
  input CH1_RXPHDLYPD,
  input CH1_RXPHDLYRESET,
  input CH1_RXPHDLYRESETDONE_M,
  input CH1_RXPHSETINITDONE_M,
  input CH1_RXPHSETINITREQ,
  input CH1_RXPHSHIFT180,
  input CH1_RXPHSHIFT180DONE_M,
  input CH1_RXPMARESETDONE_M,
  input [6:0] CH1_RXPMARESETMASK,
  input CH1_RXPOLARITY,
  input CH1_RXPRBSCNTRESET,
  input CH1_RXPRBSERR_M,
  input CH1_RXPRBSLOCKED_M,
  input [3:0] CH1_RXPRBSSEL,
  input CH1_RXPROGDIVRESET,
  input CH1_RXPROGDIVRESETDONE_M,
  input [7:0] CH1_RXRATE,
  input CH1_RXRESETDONE_M,
  input [1:0] CH1_RXRESETMODE,
  input CH1_RXSLIDE,
  input CH1_RXSLIDERDY_M,
  input [1:0] CH1_RXSTARTOFSEQ_M,
  input [2:0] CH1_RXSTATUS_M,
  input CH1_RXSYNCALLIN,
  input CH1_RXSYNCDONE_M,
  input CH1_RXTERMINATION,
  input CH1_RXUSERRDY,
  input CH1_RXUSRCLK,
  input CH1_RXVALID_M,
  input CH1_TSTCLK0,
  input CH1_TSTCLK1,
  input [19:0] CH1_TSTIN,
  input CH1_TX10GSTAT_M,
  input [1:0] CH1_TXBUFSTATUS_M,
  input CH1_TXCOMFINISH_M,
  input CH1_TXCOMINIT,
  input CH1_TXCOMSAS,
  input CH1_TXCOMWAKE,
  input [15:0] CH1_TXCTRL0,
  input [15:0] CH1_TXCTRL1,
  input [7:0] CH1_TXCTRL2,
  input CH1_TXDAPICODEOVRDEN,
  input CH1_TXDAPICODERESET,
  input [127:0] CH1_TXDATA,
  input [7:0] CH1_TXDATAEXTENDRSVD,
  input CH1_TXDCCDONE_M,
  input [1:0] CH1_TXDEEMPH,
  input CH1_TXDETECTRX,
  input [4:0] CH1_TXDIFFCTRL,
  input CH1_TXDLYALIGNERR_M,
  input CH1_TXDLYALIGNPROG_M,
  input CH1_TXDLYALIGNREQ,
  input CH1_TXELECIDLE,
  input [5:0] CH1_TXHEADER,
  input CH1_TXINHIBIT,
  input CH1_TXLATCLK,
  input [6:0] CH1_TXMAINCURSOR,
  input [2:0] CH1_TXMARGIN,
  input CH1_TXMLDCHAINDONE,
  input CH1_TXMLDCHAINREQ,
  input CH1_TXONESZEROS,
  input CH1_TXPAUSEDELAYALIGN,
  input CH1_TXPCSRESETMASK,
  input [1:0] CH1_TXPD,
  input CH1_TXPHALIGNDONE_M,
  input CH1_TXPHALIGNERR_M,
  input CH1_TXPHALIGNOUTRSVD_M,
  input CH1_TXPHALIGNREQ,
  input [1:0] CH1_TXPHALIGNRESETMASK,
  input CH1_TXPHDLYPD,
  input CH1_TXPHDLYRESET,
  input CH1_TXPHDLYRESETDONE_M,
  input CH1_TXPHDLYTSTCLK,
  input CH1_TXPHSETINITDONE_M,
  input CH1_TXPHSETINITREQ,
  input CH1_TXPHSHIFT180,
  input CH1_TXPHSHIFT180DONE_M,
  input CH1_TXPICODEOVRDEN,
  input CH1_TXPICODERESET,
  input CH1_TXPIPPMEN,
  input [4:0] CH1_TXPIPPMSTEPSIZE,
  input CH1_TXPISOPD,
  input CH1_TXPMARESETDONE_M,
  input [2:0] CH1_TXPMARESETMASK,
  input CH1_TXPOLARITY,
  input [4:0] CH1_TXPOSTCURSOR,
  input CH1_TXPRBSFORCEERR,
  input [3:0] CH1_TXPRBSSEL,
  input [4:0] CH1_TXPRECURSOR,
  input CH1_TXPROGDIVRESET,
  input CH1_TXPROGDIVRESETDONE_M,
  input [7:0] CH1_TXRATE,
  input CH1_TXRESETDONE_M,
  input [1:0] CH1_TXRESETMODE,
  input [6:0] CH1_TXSEQUENCE,
  input CH1_TXSWING,
  input CH1_TXSYNCALLIN,
  input CH1_TXSYNCDONE_M,
  input CH1_TXUSERRDY,
  input CH1_TXUSRCLK,
  input [3:0] CH2_BUFGTCEMASK_M,
  input CH2_BUFGTCE_M,
  input [11:0] CH2_BUFGTDIV_M,
  input [3:0] CH2_BUFGTRSTMASK_M,
  input CH2_BUFGTRST_M,
  input CH2_CDRBMCDRREQ,
  input CH2_CDRFREQOS,
  input CH2_CDRINCPCTRL,
  input CH2_CDRSTEPDIR,
  input CH2_CDRSTEPSQ,
  input CH2_CDRSTEPSX,
  input CH2_CFOKOVRDFINISH,
  input CH2_CFOKOVRDPULSE,
  input CH2_CFOKOVRDRDY0_M,
  input CH2_CFOKOVRDRDY1_M,
  input CH2_CFOKOVRDSTART,
  input CH2_CLKRSVD0,
  input CH2_CLKRSVD1,
  input CH2_DMONFIFORESET,
  input CH2_DMONITORCLK,
  input [31:0] CH2_DMONITOROUT_M,
  input CH2_EYESCANDATAERROR_M,
  input CH2_EYESCANRESET,
  input CH2_EYESCANTRIGGER,
  input [15:0] CH2_GTRSVD,
  input CH2_GTRXRESET,
  input CH2_GTTXRESET,
  input CH2_HSDPPCSRESET,
  input CH2_ILORESET,
  input CH2_ILORESETDONE_M,
  input CH2_ILORESETMASK,
  input [2:0] CH2_LOOPBACK,
  input CH2_PCIERSTB,
  input [15:0] CH2_PCSRSVDIN,
  input [15:0] CH2_PCSRSVDOUT_M,
  input CH2_PHYESMADAPTSAVE,
  input CH2_PHYREADY_M,
  input CH2_PHYSTATUS_M,
  input [15:0] CH2_PINRSVDAS_M,
  input CH2_RESETEXCEPTION_M,
  input [7:0] CH2_RX10GSTAT_M,
  input [2:0] CH2_RXBUFSTATUS_M,
  input CH2_RXBYTEISALIGNED_M,
  input CH2_RXBYTEREALIGN_M,
  input CH2_RXCDRHOLD,
  input CH2_RXCDRLOCK_M,
  input CH2_RXCDROVRDEN,
  input CH2_RXCDRPHDONE_M,
  input CH2_RXCDRRESET,
  input CH2_RXCHANBONDSEQ_M,
  input CH2_RXCHANISALIGNED_M,
  input CH2_RXCHANREALIGN_M,
  input [4:0] CH2_RXCHBONDI,
  input [4:0] CH2_RXCHBONDO_M,
  input [1:0] CH2_RXCLKCORCNT_M,
  input CH2_RXCOMINITDET_M,
  input CH2_RXCOMMADET_M,
  input CH2_RXCOMSASDET_M,
  input CH2_RXCOMWAKEDET_M,
  input [15:0] CH2_RXCTRL0_M,
  input [15:0] CH2_RXCTRL1_M,
  input [7:0] CH2_RXCTRL2_M,
  input [7:0] CH2_RXCTRL3_M,
  input CH2_RXDAPICODEOVRDEN,
  input CH2_RXDAPICODERESET,
  input [7:0] CH2_RXDATAEXTENDRSVD_M,
  input [1:0] CH2_RXDATAVALID_M,
  input [127:0] CH2_RXDATA_M,
  input CH2_RXDCCDONE_M,
  input CH2_RXDLYALIGNERR_M,
  input CH2_RXDLYALIGNPROG_M,
  input CH2_RXDLYALIGNREQ,
  input CH2_RXELECIDLE_M,
  input CH2_RXEQTRAINING,
  input CH2_RXFINEALIGNDONE_M,
  input CH2_RXGEARBOXSLIP,
  input [1:0] CH2_RXHEADERVALID_M,
  input [5:0] CH2_RXHEADER_M,
  input CH2_RXLATCLK,
  input CH2_RXLPMEN,
  input CH2_RXMLDCHAINDONE,
  input CH2_RXMLDCHAINREQ,
  input CH2_RXMLFINEALIGNREQ,
  input CH2_RXOOBRESET,
  input CH2_RXOSINTDONE_M,
  input CH2_RXOSINTSTARTED_M,
  input CH2_RXOSINTSTROBEDONE_M,
  input CH2_RXOSINTSTROBESTARTED_M,
  input [4:0] CH2_RXPCSRESETMASK,
  input [1:0] CH2_RXPD,
  input CH2_RXPHALIGNDONE_M,
  input CH2_RXPHALIGNERR_M,
  input CH2_RXPHALIGNREQ,
  input [1:0] CH2_RXPHALIGNRESETMASK,
  input CH2_RXPHDLYPD,
  input CH2_RXPHDLYRESET,
  input CH2_RXPHDLYRESETDONE_M,
  input CH2_RXPHSETINITDONE_M,
  input CH2_RXPHSETINITREQ,
  input CH2_RXPHSHIFT180,
  input CH2_RXPHSHIFT180DONE_M,
  input CH2_RXPMARESETDONE_M,
  input [6:0] CH2_RXPMARESETMASK,
  input CH2_RXPOLARITY,
  input CH2_RXPRBSCNTRESET,
  input CH2_RXPRBSERR_M,
  input CH2_RXPRBSLOCKED_M,
  input [3:0] CH2_RXPRBSSEL,
  input CH2_RXPROGDIVRESET,
  input CH2_RXPROGDIVRESETDONE_M,
  input [7:0] CH2_RXRATE,
  input CH2_RXRESETDONE_M,
  input [1:0] CH2_RXRESETMODE,
  input CH2_RXSLIDE,
  input CH2_RXSLIDERDY_M,
  input [1:0] CH2_RXSTARTOFSEQ_M,
  input [2:0] CH2_RXSTATUS_M,
  input CH2_RXSYNCALLIN,
  input CH2_RXSYNCDONE_M,
  input CH2_RXTERMINATION,
  input CH2_RXUSERRDY,
  input CH2_RXUSRCLK,
  input CH2_RXVALID_M,
  input CH2_TSTCLK0,
  input CH2_TSTCLK1,
  input [19:0] CH2_TSTIN,
  input CH2_TX10GSTAT_M,
  input [1:0] CH2_TXBUFSTATUS_M,
  input CH2_TXCOMFINISH_M,
  input CH2_TXCOMINIT,
  input CH2_TXCOMSAS,
  input CH2_TXCOMWAKE,
  input [15:0] CH2_TXCTRL0,
  input [15:0] CH2_TXCTRL1,
  input [7:0] CH2_TXCTRL2,
  input CH2_TXDAPICODEOVRDEN,
  input CH2_TXDAPICODERESET,
  input [127:0] CH2_TXDATA,
  input [7:0] CH2_TXDATAEXTENDRSVD,
  input CH2_TXDCCDONE_M,
  input [1:0] CH2_TXDEEMPH,
  input CH2_TXDETECTRX,
  input [4:0] CH2_TXDIFFCTRL,
  input CH2_TXDLYALIGNERR_M,
  input CH2_TXDLYALIGNPROG_M,
  input CH2_TXDLYALIGNREQ,
  input CH2_TXELECIDLE,
  input [5:0] CH2_TXHEADER,
  input CH2_TXINHIBIT,
  input CH2_TXLATCLK,
  input [6:0] CH2_TXMAINCURSOR,
  input [2:0] CH2_TXMARGIN,
  input CH2_TXMLDCHAINDONE,
  input CH2_TXMLDCHAINREQ,
  input CH2_TXONESZEROS,
  input CH2_TXPAUSEDELAYALIGN,
  input CH2_TXPCSRESETMASK,
  input [1:0] CH2_TXPD,
  input CH2_TXPHALIGNDONE_M,
  input CH2_TXPHALIGNERR_M,
  input CH2_TXPHALIGNOUTRSVD_M,
  input CH2_TXPHALIGNREQ,
  input [1:0] CH2_TXPHALIGNRESETMASK,
  input CH2_TXPHDLYPD,
  input CH2_TXPHDLYRESET,
  input CH2_TXPHDLYRESETDONE_M,
  input CH2_TXPHDLYTSTCLK,
  input CH2_TXPHSETINITDONE_M,
  input CH2_TXPHSETINITREQ,
  input CH2_TXPHSHIFT180,
  input CH2_TXPHSHIFT180DONE_M,
  input CH2_TXPICODEOVRDEN,
  input CH2_TXPICODERESET,
  input CH2_TXPIPPMEN,
  input [4:0] CH2_TXPIPPMSTEPSIZE,
  input CH2_TXPISOPD,
  input CH2_TXPMARESETDONE_M,
  input [2:0] CH2_TXPMARESETMASK,
  input CH2_TXPOLARITY,
  input [4:0] CH2_TXPOSTCURSOR,
  input CH2_TXPRBSFORCEERR,
  input [3:0] CH2_TXPRBSSEL,
  input [4:0] CH2_TXPRECURSOR,
  input CH2_TXPROGDIVRESET,
  input CH2_TXPROGDIVRESETDONE_M,
  input [7:0] CH2_TXRATE,
  input CH2_TXRESETDONE_M,
  input [1:0] CH2_TXRESETMODE,
  input [6:0] CH2_TXSEQUENCE,
  input CH2_TXSWING,
  input CH2_TXSYNCALLIN,
  input CH2_TXSYNCDONE_M,
  input CH2_TXUSERRDY,
  input CH2_TXUSRCLK,
  input [3:0] CH3_BUFGTCEMASK_M,
  input CH3_BUFGTCE_M,
  input [11:0] CH3_BUFGTDIV_M,
  input [3:0] CH3_BUFGTRSTMASK_M,
  input CH3_BUFGTRST_M,
  input CH3_CDRBMCDRREQ,
  input CH3_CDRFREQOS,
  input CH3_CDRINCPCTRL,
  input CH3_CDRSTEPDIR,
  input CH3_CDRSTEPSQ,
  input CH3_CDRSTEPSX,
  input CH3_CFOKOVRDFINISH,
  input CH3_CFOKOVRDPULSE,
  input CH3_CFOKOVRDRDY0_M,
  input CH3_CFOKOVRDRDY1_M,
  input CH3_CFOKOVRDSTART,
  input CH3_CLKRSVD0,
  input CH3_CLKRSVD1,
  input CH3_DMONFIFORESET,
  input CH3_DMONITORCLK,
  input [31:0] CH3_DMONITOROUT_M,
  input CH3_EYESCANDATAERROR_M,
  input CH3_EYESCANRESET,
  input CH3_EYESCANTRIGGER,
  input [15:0] CH3_GTRSVD,
  input CH3_GTRXRESET,
  input CH3_GTTXRESET,
  input CH3_HSDPPCSRESET,
  input CH3_ILORESET,
  input CH3_ILORESETDONE_M,
  input CH3_ILORESETMASK,
  input [2:0] CH3_LOOPBACK,
  input CH3_PCIERSTB,
  input [15:0] CH3_PCSRSVDIN,
  input [15:0] CH3_PCSRSVDOUT_M,
  input CH3_PHYESMADAPTSAVE,
  input CH3_PHYREADY_M,
  input CH3_PHYSTATUS_M,
  input [15:0] CH3_PINRSVDAS_M,
  input CH3_RESETEXCEPTION_M,
  input [7:0] CH3_RX10GSTAT_M,
  input [2:0] CH3_RXBUFSTATUS_M,
  input CH3_RXBYTEISALIGNED_M,
  input CH3_RXBYTEREALIGN_M,
  input CH3_RXCDRHOLD,
  input CH3_RXCDRLOCK_M,
  input CH3_RXCDROVRDEN,
  input CH3_RXCDRPHDONE_M,
  input CH3_RXCDRRESET,
  input CH3_RXCHANBONDSEQ_M,
  input CH3_RXCHANISALIGNED_M,
  input CH3_RXCHANREALIGN_M,
  input [4:0] CH3_RXCHBONDI,
  input [4:0] CH3_RXCHBONDO_M,
  input [1:0] CH3_RXCLKCORCNT_M,
  input CH3_RXCOMINITDET_M,
  input CH3_RXCOMMADET_M,
  input CH3_RXCOMSASDET_M,
  input CH3_RXCOMWAKEDET_M,
  input [15:0] CH3_RXCTRL0_M,
  input [15:0] CH3_RXCTRL1_M,
  input [7:0] CH3_RXCTRL2_M,
  input [7:0] CH3_RXCTRL3_M,
  input CH3_RXDAPICODEOVRDEN,
  input CH3_RXDAPICODERESET,
  input [7:0] CH3_RXDATAEXTENDRSVD_M,
  input [1:0] CH3_RXDATAVALID_M,
  input [127:0] CH3_RXDATA_M,
  input CH3_RXDCCDONE_M,
  input CH3_RXDLYALIGNERR_M,
  input CH3_RXDLYALIGNPROG_M,
  input CH3_RXDLYALIGNREQ,
  input CH3_RXELECIDLE_M,
  input CH3_RXEQTRAINING,
  input CH3_RXFINEALIGNDONE_M,
  input CH3_RXGEARBOXSLIP,
  input [1:0] CH3_RXHEADERVALID_M,
  input [5:0] CH3_RXHEADER_M,
  input CH3_RXLATCLK,
  input CH3_RXLPMEN,
  input CH3_RXMLDCHAINDONE,
  input CH3_RXMLDCHAINREQ,
  input CH3_RXMLFINEALIGNREQ,
  input CH3_RXOOBRESET,
  input CH3_RXOSINTDONE_M,
  input CH3_RXOSINTSTARTED_M,
  input CH3_RXOSINTSTROBEDONE_M,
  input CH3_RXOSINTSTROBESTARTED_M,
  input [4:0] CH3_RXPCSRESETMASK,
  input [1:0] CH3_RXPD,
  input CH3_RXPHALIGNDONE_M,
  input CH3_RXPHALIGNERR_M,
  input CH3_RXPHALIGNREQ,
  input [1:0] CH3_RXPHALIGNRESETMASK,
  input CH3_RXPHDLYPD,
  input CH3_RXPHDLYRESET,
  input CH3_RXPHDLYRESETDONE_M,
  input CH3_RXPHSETINITDONE_M,
  input CH3_RXPHSETINITREQ,
  input CH3_RXPHSHIFT180,
  input CH3_RXPHSHIFT180DONE_M,
  input CH3_RXPMARESETDONE_M,
  input [6:0] CH3_RXPMARESETMASK,
  input CH3_RXPOLARITY,
  input CH3_RXPRBSCNTRESET,
  input CH3_RXPRBSERR_M,
  input CH3_RXPRBSLOCKED_M,
  input [3:0] CH3_RXPRBSSEL,
  input CH3_RXPROGDIVRESET,
  input CH3_RXPROGDIVRESETDONE_M,
  input [7:0] CH3_RXRATE,
  input CH3_RXRESETDONE_M,
  input [1:0] CH3_RXRESETMODE,
  input CH3_RXSLIDE,
  input CH3_RXSLIDERDY_M,
  input [1:0] CH3_RXSTARTOFSEQ_M,
  input [2:0] CH3_RXSTATUS_M,
  input CH3_RXSYNCALLIN,
  input CH3_RXSYNCDONE_M,
  input CH3_RXTERMINATION,
  input CH3_RXUSERRDY,
  input CH3_RXUSRCLK,
  input CH3_RXVALID_M,
  input CH3_TSTCLK0,
  input CH3_TSTCLK1,
  input [19:0] CH3_TSTIN,
  input CH3_TX10GSTAT_M,
  input [1:0] CH3_TXBUFSTATUS_M,
  input CH3_TXCOMFINISH_M,
  input CH3_TXCOMINIT,
  input CH3_TXCOMSAS,
  input CH3_TXCOMWAKE,
  input [15:0] CH3_TXCTRL0,
  input [15:0] CH3_TXCTRL1,
  input [7:0] CH3_TXCTRL2,
  input CH3_TXDAPICODEOVRDEN,
  input CH3_TXDAPICODERESET,
  input [127:0] CH3_TXDATA,
  input [7:0] CH3_TXDATAEXTENDRSVD,
  input CH3_TXDCCDONE_M,
  input [1:0] CH3_TXDEEMPH,
  input CH3_TXDETECTRX,
  input [4:0] CH3_TXDIFFCTRL,
  input CH3_TXDLYALIGNERR_M,
  input CH3_TXDLYALIGNPROG_M,
  input CH3_TXDLYALIGNREQ,
  input CH3_TXELECIDLE,
  input [5:0] CH3_TXHEADER,
  input CH3_TXINHIBIT,
  input CH3_TXLATCLK,
  input [6:0] CH3_TXMAINCURSOR,
  input [2:0] CH3_TXMARGIN,
  input CH3_TXMLDCHAINDONE,
  input CH3_TXMLDCHAINREQ,
  input CH3_TXONESZEROS,
  input CH3_TXPAUSEDELAYALIGN,
  input CH3_TXPCSRESETMASK,
  input [1:0] CH3_TXPD,
  input CH3_TXPHALIGNDONE_M,
  input CH3_TXPHALIGNERR_M,
  input CH3_TXPHALIGNOUTRSVD_M,
  input CH3_TXPHALIGNREQ,
  input [1:0] CH3_TXPHALIGNRESETMASK,
  input CH3_TXPHDLYPD,
  input CH3_TXPHDLYRESET,
  input CH3_TXPHDLYRESETDONE_M,
  input CH3_TXPHDLYTSTCLK,
  input CH3_TXPHSETINITDONE_M,
  input CH3_TXPHSETINITREQ,
  input CH3_TXPHSHIFT180,
  input CH3_TXPHSHIFT180DONE_M,
  input CH3_TXPICODEOVRDEN,
  input CH3_TXPICODERESET,
  input CH3_TXPIPPMEN,
  input [4:0] CH3_TXPIPPMSTEPSIZE,
  input CH3_TXPISOPD,
  input CH3_TXPMARESETDONE_M,
  input [2:0] CH3_TXPMARESETMASK,
  input CH3_TXPOLARITY,
  input [4:0] CH3_TXPOSTCURSOR,
  input CH3_TXPRBSFORCEERR,
  input [3:0] CH3_TXPRBSSEL,
  input [4:0] CH3_TXPRECURSOR,
  input CH3_TXPROGDIVRESET,
  input CH3_TXPROGDIVRESETDONE_M,
  input [7:0] CH3_TXRATE,
  input CH3_TXRESETDONE_M,
  input [1:0] CH3_TXRESETMODE,
  input [6:0] CH3_TXSEQUENCE,
  input CH3_TXSWING,
  input CH3_TXSYNCALLIN,
  input CH3_TXSYNCDONE_M,
  input CH3_TXUSERRDY,
  input CH3_TXUSRCLK,
  input CORRECTERR_M,
  input [15:0] CTRLRSVDIN0,
  input [13:0] CTRLRSVDIN1,
  input [31:0] CTRLRSVDOUT_M,
  input DEBUGTRACECLK,
  input DEBUGTRACEREADY,
  input [15:0] DEBUGTRACETDATA_M,
  input DEBUGTRACETVALID_M,
  input [15:0] GPI,
  input [15:0] GPO_M,
  input GTPOWERGOOD_M,
  input HSCLK0_LCPLLCLKRSVD0,
  input HSCLK0_LCPLLCLKRSVD1,
  input HSCLK0_LCPLLFBCLKLOST_M,
  input [7:0] HSCLK0_LCPLLFBDIV,
  input HSCLK0_LCPLLGTGREFCLK,
  input HSCLK0_LCPLLLOCK_M,
  input HSCLK0_LCPLLPD,
  input HSCLK0_LCPLLREFCLKLOST_M,
  input HSCLK0_LCPLLREFCLKMONITOR_M,
  input [2:0] HSCLK0_LCPLLREFCLKSEL,
  input HSCLK0_LCPLLRESET,
  input HSCLK0_LCPLLRESETBYPASSMODE,
  input [1:0] HSCLK0_LCPLLRESETMASK,
  input [7:0] HSCLK0_LCPLLRSVD0,
  input [7:0] HSCLK0_LCPLLRSVD1,
  input [7:0] HSCLK0_LCPLLRSVDOUT_M,
  input [25:0] HSCLK0_LCPLLSDMDATA,
  input HSCLK0_LCPLLSDMTOGGLE,
  input HSCLK0_RPLLCLKRSVD0,
  input HSCLK0_RPLLCLKRSVD1,
  input HSCLK0_RPLLFBCLKLOST_M,
  input [7:0] HSCLK0_RPLLFBDIV,
  input HSCLK0_RPLLGTGREFCLK,
  input HSCLK0_RPLLLOCK_M,
  input HSCLK0_RPLLPD,
  input HSCLK0_RPLLREFCLKLOST_M,
  input HSCLK0_RPLLREFCLKMONITOR_M,
  input [2:0] HSCLK0_RPLLREFCLKSEL,
  input HSCLK0_RPLLRESET,
  input HSCLK0_RPLLRESETBYPASSMODE,
  input [1:0] HSCLK0_RPLLRESETMASK,
  input [7:0] HSCLK0_RPLLRSVD0,
  input [7:0] HSCLK0_RPLLRSVD1,
  input [7:0] HSCLK0_RPLLRSVDOUT_M,
  input [25:0] HSCLK0_RPLLSDMDATA,
  input HSCLK0_RPLLSDMTOGGLE,
  input HSCLK1_LCPLLCLKRSVD0,
  input HSCLK1_LCPLLCLKRSVD1,
  input HSCLK1_LCPLLFBCLKLOST_M,
  input [7:0] HSCLK1_LCPLLFBDIV,
  input HSCLK1_LCPLLGTGREFCLK,
  input HSCLK1_LCPLLLOCK_M,
  input HSCLK1_LCPLLPD,
  input HSCLK1_LCPLLREFCLKLOST_M,
  input HSCLK1_LCPLLREFCLKMONITOR_M,
  input [2:0] HSCLK1_LCPLLREFCLKSEL,
  input HSCLK1_LCPLLRESET,
  input HSCLK1_LCPLLRESETBYPASSMODE,
  input [1:0] HSCLK1_LCPLLRESETMASK,
  input [7:0] HSCLK1_LCPLLRSVD0,
  input [7:0] HSCLK1_LCPLLRSVD1,
  input [7:0] HSCLK1_LCPLLRSVDOUT_M,
  input [25:0] HSCLK1_LCPLLSDMDATA,
  input HSCLK1_LCPLLSDMTOGGLE,
  input HSCLK1_RPLLCLKRSVD0,
  input HSCLK1_RPLLCLKRSVD1,
  input HSCLK1_RPLLFBCLKLOST_M,
  input [7:0] HSCLK1_RPLLFBDIV,
  input HSCLK1_RPLLGTGREFCLK,
  input HSCLK1_RPLLLOCK_M,
  input HSCLK1_RPLLPD,
  input HSCLK1_RPLLREFCLKLOST_M,
  input HSCLK1_RPLLREFCLKMONITOR_M,
  input [2:0] HSCLK1_RPLLREFCLKSEL,
  input HSCLK1_RPLLRESET,
  input HSCLK1_RPLLRESETBYPASSMODE,
  input [1:0] HSCLK1_RPLLRESETMASK,
  input [7:0] HSCLK1_RPLLRSVD0,
  input [7:0] HSCLK1_RPLLRSVD1,
  input [7:0] HSCLK1_RPLLRSVDOUT_M,
  input [25:0] HSCLK1_RPLLSDMDATA,
  input HSCLK1_RPLLSDMTOGGLE,
  input [31:0] M0_AXIS_TDATA_M,
  input M0_AXIS_TLAST_M,
  input M0_AXIS_TREADY,
  input M0_AXIS_TVALID_M,
  input [31:0] M1_AXIS_TDATA_M,
  input M1_AXIS_TLAST_M,
  input M1_AXIS_TREADY,
  input M1_AXIS_TVALID_M,
  input [31:0] M2_AXIS_TDATA_M,
  input M2_AXIS_TLAST_M,
  input M2_AXIS_TREADY,
  input M2_AXIS_TVALID_M,
  input [3:0] MSTRXRESET,
  input [3:0] MSTRXRESETDONE_M,
  input [3:0] MSTTXRESET,
  input [3:0] MSTTXRESETDONE_M,
  input PCIELINKREACHTARGET,
  input [5:0] PCIELTSSM,
  input RCALENB,
  input REFCLK0_CLKTESTSIG,
  input REFCLK0_GTREFCLKPD,
  input REFCLK1_CLKTESTSIG,
  input REFCLK1_GTREFCLKPD,
  input RXMARGINCLK,
  input RXMARGINREQACK_M,
  input [3:0] RXMARGINREQCMD,
  input [1:0] RXMARGINREQLANENUM,
  input [7:0] RXMARGINREQPAYLD,
  input RXMARGINREQREQ,
  input RXMARGINRESACK,
  input [3:0] RXMARGINRESCMD_M,
  input [1:0] RXMARGINRESLANENUM_M,
  input [7:0] RXMARGINRESPAYLD_M,
  input RXMARGINRESREQ_M,
  input [31:0] S0_AXIS_TDATA,
  input S0_AXIS_TLAST,
  input S0_AXIS_TREADY_M,
  input S0_AXIS_TVALID,
  input [31:0] S1_AXIS_TDATA,
  input S1_AXIS_TLAST,
  input S1_AXIS_TREADY_M,
  input S1_AXIS_TVALID,
  input [31:0] S2_AXIS_TDATA,
  input S2_AXIS_TLAST,
  input S2_AXIS_TREADY_M,
  input S2_AXIS_TVALID,
  input TRIGACKIN0_M,
  input TRIGACKOUT0,
  input TRIGIN0,
  input TRIGOUT0_M,
  input UBENABLE,
  input UBINTERRUPT_M,
  input [11:0] UBINTR,
  input UBIOLMBRST,
  input UBMBRST,
  input UBRXUART,
  input UBTXUART_M,
  input UNCORRECTERR_M,
  input XPIPE_BUFGTCE_M,
  input [3:0] XPIPE_BUFGTCE_MASK_M,
  input [3:0] XPIPE_BUFGTCE_MASK_M_1,
  input XPIPE_BUFGTCE_M_1,
  input [11:0] XPIPE_BUFGTDIV_M,
  input [11:0] XPIPE_BUFGTDIV_M_1,
  input XPIPE_BUFGTRST_M,
  input [3:0] XPIPE_BUFGTRST_MASK_M,
  input [3:0] XPIPE_BUFGTRST_MASK_M_1,
  input XPIPE_BUFGTRST_M_1,
  input XPIPE_GT_OUTCLK_M,
  input XPIPE_GT_OUTCLK_M_1,
  input XPIPE_GT_PIPECLK,
  input XPIPE_GT_PIPECLK_1,
  input XPIPE_GT_RXOUTCLK_M,
  input XPIPE_GT_RXUSRCLK,
  input XPIPE_HSDP_RXDATAVALID_M,
  input XPIPE_HSDP_RXDATAVALID_M_1,
  input XPIPE_HSDP_RXDATAVALID_M_2,
  input XPIPE_HSDP_RXGEARBOXSLIP,
  input XPIPE_HSDP_RXGEARBOXSLIP_1,
  input XPIPE_HSDP_RXGEARBOXSLIP_2,
  input XPIPE_HSDP_RXHEADERVALID_M,
  input XPIPE_HSDP_RXHEADERVALID_M_1,
  input XPIPE_HSDP_RXHEADERVALID_M_2,
  input [1:0] XPIPE_HSDP_RXHEADER_M,
  input [1:0] XPIPE_HSDP_RXHEADER_M_1,
  input [1:0] XPIPE_HSDP_RXHEADER_M_2,
  input XPIPE_HSDP_RXPCSRESET,
  input XPIPE_HSDP_RXPCSRESET_1,
  input XPIPE_HSDP_RXPCSRESET_2,
  input XPIPE_HSDP_RXRESETDONE_M,
  input XPIPE_HSDP_RXRESETDONE_M_1,
  input XPIPE_HSDP_RXRESETDONE_M_2,
  input [1:0] XPIPE_HSDP_TXHEADER,
  input [1:0] XPIPE_HSDP_TXHEADER_1,
  input [1:0] XPIPE_HSDP_TXHEADER_2,
  input XPIPE_HSDP_TXRESETDONE_M,
  input XPIPE_HSDP_TXRESETDONE_M_1,
  input XPIPE_HSDP_TXRESETDONE_M_2,
  input [6:0] XPIPE_HSDP_TXSEQUENCE,
  input [6:0] XPIPE_HSDP_TXSEQUENCE_1,
  input [6:0] XPIPE_HSDP_TXSEQUENCE_2,
  input XPIPE_PCIELINKREACHTARGET,
  input XPIPE_PCIELINKREACHTARGET_1,
  input [5:0] XPIPE_PCIELTSSMSTATE,
  input [5:0] XPIPE_PCIELTSSMSTATE_1,
  input XPIPE_PCIE_PERST_N,
  input XPIPE_PCIE_PERST_N_1,
  input [2:0] XPIPE_PCIE_RATE,
  input [2:0] XPIPE_PCIE_RATE_1,
  input XPIPE_PHYESMADAPTSAVE,
  input XPIPE_PHYESMADAPTSAVE_1,
  input XPIPE_PHYREADY_FR_BOT,
  input XPIPE_PHYREADY_TO_BOT_M,
  input XPIPE_PHY_READY_M,
  input XPIPE_PHY_READY_M_1,
  input XPIPE_PIPE_CH0_PHYSTATUS_M,
  input [1:0] XPIPE_PIPE_CH0_POWERDOWN,
  input [1:0] XPIPE_PIPE_CH0_RXCHARISK_M,
  input XPIPE_PIPE_CH0_RXDATAVALID_M,
  input [31:0] XPIPE_PIPE_CH0_RXDATA_M,
  input XPIPE_PIPE_CH0_RXELECIDLE_M,
  input XPIPE_PIPE_CH0_RXPOLARITY,
  input XPIPE_PIPE_CH0_RXSTARTBLOCK_M,
  input [2:0] XPIPE_PIPE_CH0_RXSTATUS_M,
  input [1:0] XPIPE_PIPE_CH0_RXSYNCHEADER_M,
  input XPIPE_PIPE_CH0_RXTERMINATION,
  input XPIPE_PIPE_CH0_RXVALID_M,
  input [1:0] XPIPE_PIPE_CH0_TXCHARISK,
  input XPIPE_PIPE_CH0_TXCOMPLIANCE,
  input [31:0] XPIPE_PIPE_CH0_TXDATA,
  input XPIPE_PIPE_CH0_TXDATAVALID,
  input XPIPE_PIPE_CH0_TXDEEMPH,
  input XPIPE_PIPE_CH0_TXDETECTRXLOOPBACK,
  input XPIPE_PIPE_CH0_TXELECIDLE,
  input [6:0] XPIPE_PIPE_CH0_TXMAINCURSOR,
  input [2:0] XPIPE_PIPE_CH0_TXMARGIN,
  input [4:0] XPIPE_PIPE_CH0_TXPOSTCURSOR,
  input [4:0] XPIPE_PIPE_CH0_TXPRECURSOR,
  input XPIPE_PIPE_CH0_TXSTARTBLOCK,
  input XPIPE_PIPE_CH0_TXSWING,
  input [1:0] XPIPE_PIPE_CH0_TXSYNCHEADER,
  input XPIPE_PIPE_CH10_PHYSTATUS_M,
  input [1:0] XPIPE_PIPE_CH10_POWERDOWN,
  input [1:0] XPIPE_PIPE_CH10_RXCHARISK_M,
  input XPIPE_PIPE_CH10_RXDATAVALID_M,
  input [31:0] XPIPE_PIPE_CH10_RXDATA_M,
  input XPIPE_PIPE_CH10_RXELECIDLE_M,
  input XPIPE_PIPE_CH10_RXPOLARITY,
  input XPIPE_PIPE_CH10_RXSTARTBLOCK_M,
  input [2:0] XPIPE_PIPE_CH10_RXSTATUS_M,
  input [1:0] XPIPE_PIPE_CH10_RXSYNCHEADER_M,
  input XPIPE_PIPE_CH10_RXTERMINATION,
  input XPIPE_PIPE_CH10_RXVALID_M,
  input [1:0] XPIPE_PIPE_CH10_TXCHARISK,
  input XPIPE_PIPE_CH10_TXCOMPLIANCE,
  input [31:0] XPIPE_PIPE_CH10_TXDATA,
  input XPIPE_PIPE_CH10_TXDATAVALID,
  input XPIPE_PIPE_CH10_TXDEEMPH,
  input XPIPE_PIPE_CH10_TXDETECTRXLOOPBACK,
  input XPIPE_PIPE_CH10_TXELECIDLE,
  input [6:0] XPIPE_PIPE_CH10_TXMAINCURSOR,
  input [2:0] XPIPE_PIPE_CH10_TXMARGIN,
  input [4:0] XPIPE_PIPE_CH10_TXPOSTCURSOR,
  input [4:0] XPIPE_PIPE_CH10_TXPRECURSOR,
  input XPIPE_PIPE_CH10_TXSTARTBLOCK,
  input XPIPE_PIPE_CH10_TXSWING,
  input [1:0] XPIPE_PIPE_CH10_TXSYNCHEADER,
  input XPIPE_PIPE_CH11_PHYSTATUS_M,
  input [1:0] XPIPE_PIPE_CH11_POWERDOWN,
  input [1:0] XPIPE_PIPE_CH11_RXCHARISK_M,
  input XPIPE_PIPE_CH11_RXDATAVALID_M,
  input [31:0] XPIPE_PIPE_CH11_RXDATA_M,
  input XPIPE_PIPE_CH11_RXELECIDLE_M,
  input XPIPE_PIPE_CH11_RXPOLARITY,
  input XPIPE_PIPE_CH11_RXSTARTBLOCK_M,
  input [2:0] XPIPE_PIPE_CH11_RXSTATUS_M,
  input [1:0] XPIPE_PIPE_CH11_RXSYNCHEADER_M,
  input XPIPE_PIPE_CH11_RXTERMINATION,
  input XPIPE_PIPE_CH11_RXVALID_M,
  input [1:0] XPIPE_PIPE_CH11_TXCHARISK,
  input XPIPE_PIPE_CH11_TXCOMPLIANCE,
  input [31:0] XPIPE_PIPE_CH11_TXDATA,
  input XPIPE_PIPE_CH11_TXDATAVALID,
  input XPIPE_PIPE_CH11_TXDEEMPH,
  input XPIPE_PIPE_CH11_TXDETECTRXLOOPBACK,
  input XPIPE_PIPE_CH11_TXELECIDLE,
  input [6:0] XPIPE_PIPE_CH11_TXMAINCURSOR,
  input [2:0] XPIPE_PIPE_CH11_TXMARGIN,
  input [4:0] XPIPE_PIPE_CH11_TXPOSTCURSOR,
  input [4:0] XPIPE_PIPE_CH11_TXPRECURSOR,
  input XPIPE_PIPE_CH11_TXSTARTBLOCK,
  input XPIPE_PIPE_CH11_TXSWING,
  input [1:0] XPIPE_PIPE_CH11_TXSYNCHEADER,
  input XPIPE_PIPE_CH12_PHYSTATUS_M,
  input [1:0] XPIPE_PIPE_CH12_POWERDOWN,
  input [1:0] XPIPE_PIPE_CH12_RXCHARISK_M,
  input XPIPE_PIPE_CH12_RXDATAVALID_M,
  input [31:0] XPIPE_PIPE_CH12_RXDATA_M,
  input XPIPE_PIPE_CH12_RXELECIDLE_M,
  input XPIPE_PIPE_CH12_RXPOLARITY,
  input XPIPE_PIPE_CH12_RXSTARTBLOCK_M,
  input [2:0] XPIPE_PIPE_CH12_RXSTATUS_M,
  input [1:0] XPIPE_PIPE_CH12_RXSYNCHEADER_M,
  input XPIPE_PIPE_CH12_RXTERMINATION,
  input XPIPE_PIPE_CH12_RXVALID_M,
  input [1:0] XPIPE_PIPE_CH12_TXCHARISK,
  input XPIPE_PIPE_CH12_TXCOMPLIANCE,
  input [31:0] XPIPE_PIPE_CH12_TXDATA,
  input XPIPE_PIPE_CH12_TXDATAVALID,
  input XPIPE_PIPE_CH12_TXDEEMPH,
  input XPIPE_PIPE_CH12_TXDETECTRXLOOPBACK,
  input XPIPE_PIPE_CH12_TXELECIDLE,
  input [6:0] XPIPE_PIPE_CH12_TXMAINCURSOR,
  input [2:0] XPIPE_PIPE_CH12_TXMARGIN,
  input [4:0] XPIPE_PIPE_CH12_TXPOSTCURSOR,
  input [4:0] XPIPE_PIPE_CH12_TXPRECURSOR,
  input XPIPE_PIPE_CH12_TXSTARTBLOCK,
  input XPIPE_PIPE_CH12_TXSWING,
  input [1:0] XPIPE_PIPE_CH12_TXSYNCHEADER,
  input XPIPE_PIPE_CH13_PHYSTATUS_M,
  input [1:0] XPIPE_PIPE_CH13_POWERDOWN,
  input [1:0] XPIPE_PIPE_CH13_RXCHARISK_M,
  input XPIPE_PIPE_CH13_RXDATAVALID_M,
  input [31:0] XPIPE_PIPE_CH13_RXDATA_M,
  input XPIPE_PIPE_CH13_RXELECIDLE_M,
  input XPIPE_PIPE_CH13_RXPOLARITY,
  input XPIPE_PIPE_CH13_RXSTARTBLOCK_M,
  input [2:0] XPIPE_PIPE_CH13_RXSTATUS_M,
  input [1:0] XPIPE_PIPE_CH13_RXSYNCHEADER_M,
  input XPIPE_PIPE_CH13_RXTERMINATION,
  input XPIPE_PIPE_CH13_RXVALID_M,
  input [1:0] XPIPE_PIPE_CH13_TXCHARISK,
  input XPIPE_PIPE_CH13_TXCOMPLIANCE,
  input [31:0] XPIPE_PIPE_CH13_TXDATA,
  input XPIPE_PIPE_CH13_TXDATAVALID,
  input XPIPE_PIPE_CH13_TXDEEMPH,
  input XPIPE_PIPE_CH13_TXDETECTRXLOOPBACK,
  input XPIPE_PIPE_CH13_TXELECIDLE,
  input [6:0] XPIPE_PIPE_CH13_TXMAINCURSOR,
  input [2:0] XPIPE_PIPE_CH13_TXMARGIN,
  input [4:0] XPIPE_PIPE_CH13_TXPOSTCURSOR,
  input [4:0] XPIPE_PIPE_CH13_TXPRECURSOR,
  input XPIPE_PIPE_CH13_TXSTARTBLOCK,
  input XPIPE_PIPE_CH13_TXSWING,
  input [1:0] XPIPE_PIPE_CH13_TXSYNCHEADER,
  input XPIPE_PIPE_CH14_PHYSTATUS_M,
  input [1:0] XPIPE_PIPE_CH14_POWERDOWN,
  input [1:0] XPIPE_PIPE_CH14_RXCHARISK_M,
  input XPIPE_PIPE_CH14_RXDATAVALID_M,
  input [31:0] XPIPE_PIPE_CH14_RXDATA_M,
  input XPIPE_PIPE_CH14_RXELECIDLE_M,
  input XPIPE_PIPE_CH14_RXPOLARITY,
  input XPIPE_PIPE_CH14_RXSTARTBLOCK_M,
  input [2:0] XPIPE_PIPE_CH14_RXSTATUS_M,
  input [1:0] XPIPE_PIPE_CH14_RXSYNCHEADER_M,
  input XPIPE_PIPE_CH14_RXTERMINATION,
  input XPIPE_PIPE_CH14_RXVALID_M,
  input [1:0] XPIPE_PIPE_CH14_TXCHARISK,
  input XPIPE_PIPE_CH14_TXCOMPLIANCE,
  input [31:0] XPIPE_PIPE_CH14_TXDATA,
  input XPIPE_PIPE_CH14_TXDATAVALID,
  input XPIPE_PIPE_CH14_TXDEEMPH,
  input XPIPE_PIPE_CH14_TXDETECTRXLOOPBACK,
  input XPIPE_PIPE_CH14_TXELECIDLE,
  input [6:0] XPIPE_PIPE_CH14_TXMAINCURSOR,
  input [2:0] XPIPE_PIPE_CH14_TXMARGIN,
  input [4:0] XPIPE_PIPE_CH14_TXPOSTCURSOR,
  input [4:0] XPIPE_PIPE_CH14_TXPRECURSOR,
  input XPIPE_PIPE_CH14_TXSTARTBLOCK,
  input XPIPE_PIPE_CH14_TXSWING,
  input [1:0] XPIPE_PIPE_CH14_TXSYNCHEADER,
  input XPIPE_PIPE_CH15_PHYSTATUS_M,
  input [1:0] XPIPE_PIPE_CH15_POWERDOWN,
  input [1:0] XPIPE_PIPE_CH15_RXCHARISK_M,
  input XPIPE_PIPE_CH15_RXDATAVALID_M,
  input [31:0] XPIPE_PIPE_CH15_RXDATA_M,
  input XPIPE_PIPE_CH15_RXELECIDLE_M,
  input XPIPE_PIPE_CH15_RXPOLARITY,
  input XPIPE_PIPE_CH15_RXSTARTBLOCK_M,
  input [2:0] XPIPE_PIPE_CH15_RXSTATUS_M,
  input [1:0] XPIPE_PIPE_CH15_RXSYNCHEADER_M,
  input XPIPE_PIPE_CH15_RXTERMINATION,
  input XPIPE_PIPE_CH15_RXVALID_M,
  input [1:0] XPIPE_PIPE_CH15_TXCHARISK,
  input XPIPE_PIPE_CH15_TXCOMPLIANCE,
  input [31:0] XPIPE_PIPE_CH15_TXDATA,
  input XPIPE_PIPE_CH15_TXDATAVALID,
  input XPIPE_PIPE_CH15_TXDEEMPH,
  input XPIPE_PIPE_CH15_TXDETECTRXLOOPBACK,
  input XPIPE_PIPE_CH15_TXELECIDLE,
  input [6:0] XPIPE_PIPE_CH15_TXMAINCURSOR,
  input [2:0] XPIPE_PIPE_CH15_TXMARGIN,
  input [4:0] XPIPE_PIPE_CH15_TXPOSTCURSOR,
  input [4:0] XPIPE_PIPE_CH15_TXPRECURSOR,
  input XPIPE_PIPE_CH15_TXSTARTBLOCK,
  input XPIPE_PIPE_CH15_TXSWING,
  input [1:0] XPIPE_PIPE_CH15_TXSYNCHEADER,
  input XPIPE_PIPE_CH1_PHYSTATUS_M,
  input [1:0] XPIPE_PIPE_CH1_POWERDOWN,
  input [1:0] XPIPE_PIPE_CH1_RXCHARISK_M,
  input XPIPE_PIPE_CH1_RXDATAVALID_M,
  input [31:0] XPIPE_PIPE_CH1_RXDATA_M,
  input XPIPE_PIPE_CH1_RXELECIDLE_M,
  input XPIPE_PIPE_CH1_RXPOLARITY,
  input XPIPE_PIPE_CH1_RXSTARTBLOCK_M,
  input [2:0] XPIPE_PIPE_CH1_RXSTATUS_M,
  input [1:0] XPIPE_PIPE_CH1_RXSYNCHEADER_M,
  input XPIPE_PIPE_CH1_RXTERMINATION,
  input XPIPE_PIPE_CH1_RXVALID_M,
  input [1:0] XPIPE_PIPE_CH1_TXCHARISK,
  input XPIPE_PIPE_CH1_TXCOMPLIANCE,
  input [31:0] XPIPE_PIPE_CH1_TXDATA,
  input XPIPE_PIPE_CH1_TXDATAVALID,
  input XPIPE_PIPE_CH1_TXDEEMPH,
  input XPIPE_PIPE_CH1_TXDETECTRXLOOPBACK,
  input XPIPE_PIPE_CH1_TXELECIDLE,
  input [6:0] XPIPE_PIPE_CH1_TXMAINCURSOR,
  input [2:0] XPIPE_PIPE_CH1_TXMARGIN,
  input [4:0] XPIPE_PIPE_CH1_TXPOSTCURSOR,
  input [4:0] XPIPE_PIPE_CH1_TXPRECURSOR,
  input XPIPE_PIPE_CH1_TXSTARTBLOCK,
  input XPIPE_PIPE_CH1_TXSWING,
  input [1:0] XPIPE_PIPE_CH1_TXSYNCHEADER,
  input XPIPE_PIPE_CH2_PHYSTATUS_M,
  input [1:0] XPIPE_PIPE_CH2_POWERDOWN,
  input [1:0] XPIPE_PIPE_CH2_RXCHARISK_M,
  input XPIPE_PIPE_CH2_RXDATAVALID_M,
  input [31:0] XPIPE_PIPE_CH2_RXDATA_M,
  input XPIPE_PIPE_CH2_RXELECIDLE_M,
  input XPIPE_PIPE_CH2_RXPOLARITY,
  input XPIPE_PIPE_CH2_RXSTARTBLOCK_M,
  input [2:0] XPIPE_PIPE_CH2_RXSTATUS_M,
  input [1:0] XPIPE_PIPE_CH2_RXSYNCHEADER_M,
  input XPIPE_PIPE_CH2_RXTERMINATION,
  input XPIPE_PIPE_CH2_RXVALID_M,
  input [1:0] XPIPE_PIPE_CH2_TXCHARISK,
  input XPIPE_PIPE_CH2_TXCOMPLIANCE,
  input [31:0] XPIPE_PIPE_CH2_TXDATA,
  input XPIPE_PIPE_CH2_TXDATAVALID,
  input XPIPE_PIPE_CH2_TXDEEMPH,
  input XPIPE_PIPE_CH2_TXDETECTRXLOOPBACK,
  input XPIPE_PIPE_CH2_TXELECIDLE,
  input [6:0] XPIPE_PIPE_CH2_TXMAINCURSOR,
  input [2:0] XPIPE_PIPE_CH2_TXMARGIN,
  input [4:0] XPIPE_PIPE_CH2_TXPOSTCURSOR,
  input [4:0] XPIPE_PIPE_CH2_TXPRECURSOR,
  input XPIPE_PIPE_CH2_TXSTARTBLOCK,
  input XPIPE_PIPE_CH2_TXSWING,
  input [1:0] XPIPE_PIPE_CH2_TXSYNCHEADER,
  input XPIPE_PIPE_CH3_PHYSTATUS_M,
  input [1:0] XPIPE_PIPE_CH3_POWERDOWN,
  input [1:0] XPIPE_PIPE_CH3_RXCHARISK_M,
  input XPIPE_PIPE_CH3_RXDATAVALID_M,
  input [31:0] XPIPE_PIPE_CH3_RXDATA_M,
  input XPIPE_PIPE_CH3_RXELECIDLE_M,
  input XPIPE_PIPE_CH3_RXPOLARITY,
  input XPIPE_PIPE_CH3_RXSTARTBLOCK_M,
  input [2:0] XPIPE_PIPE_CH3_RXSTATUS_M,
  input [1:0] XPIPE_PIPE_CH3_RXSYNCHEADER_M,
  input XPIPE_PIPE_CH3_RXTERMINATION,
  input XPIPE_PIPE_CH3_RXVALID_M,
  input [1:0] XPIPE_PIPE_CH3_TXCHARISK,
  input XPIPE_PIPE_CH3_TXCOMPLIANCE,
  input [31:0] XPIPE_PIPE_CH3_TXDATA,
  input XPIPE_PIPE_CH3_TXDATAVALID,
  input XPIPE_PIPE_CH3_TXDEEMPH,
  input XPIPE_PIPE_CH3_TXDETECTRXLOOPBACK,
  input XPIPE_PIPE_CH3_TXELECIDLE,
  input [6:0] XPIPE_PIPE_CH3_TXMAINCURSOR,
  input [2:0] XPIPE_PIPE_CH3_TXMARGIN,
  input [4:0] XPIPE_PIPE_CH3_TXPOSTCURSOR,
  input [4:0] XPIPE_PIPE_CH3_TXPRECURSOR,
  input XPIPE_PIPE_CH3_TXSTARTBLOCK,
  input XPIPE_PIPE_CH3_TXSWING,
  input [1:0] XPIPE_PIPE_CH3_TXSYNCHEADER,
  input XPIPE_PIPE_CH4_PHYSTATUS_M,
  input [1:0] XPIPE_PIPE_CH4_POWERDOWN,
  input [1:0] XPIPE_PIPE_CH4_RXCHARISK_M,
  input XPIPE_PIPE_CH4_RXDATAVALID_M,
  input [31:0] XPIPE_PIPE_CH4_RXDATA_M,
  input XPIPE_PIPE_CH4_RXELECIDLE_M,
  input XPIPE_PIPE_CH4_RXPOLARITY,
  input XPIPE_PIPE_CH4_RXSTARTBLOCK_M,
  input [2:0] XPIPE_PIPE_CH4_RXSTATUS_M,
  input [1:0] XPIPE_PIPE_CH4_RXSYNCHEADER_M,
  input XPIPE_PIPE_CH4_RXTERMINATION,
  input XPIPE_PIPE_CH4_RXVALID_M,
  input [1:0] XPIPE_PIPE_CH4_TXCHARISK,
  input XPIPE_PIPE_CH4_TXCOMPLIANCE,
  input [31:0] XPIPE_PIPE_CH4_TXDATA,
  input XPIPE_PIPE_CH4_TXDATAVALID,
  input XPIPE_PIPE_CH4_TXDEEMPH,
  input XPIPE_PIPE_CH4_TXDETECTRXLOOPBACK,
  input XPIPE_PIPE_CH4_TXELECIDLE,
  input [6:0] XPIPE_PIPE_CH4_TXMAINCURSOR,
  input [2:0] XPIPE_PIPE_CH4_TXMARGIN,
  input [4:0] XPIPE_PIPE_CH4_TXPOSTCURSOR,
  input [4:0] XPIPE_PIPE_CH4_TXPRECURSOR,
  input XPIPE_PIPE_CH4_TXSTARTBLOCK,
  input XPIPE_PIPE_CH4_TXSWING,
  input [1:0] XPIPE_PIPE_CH4_TXSYNCHEADER,
  input XPIPE_PIPE_CH5_PHYSTATUS_M,
  input [1:0] XPIPE_PIPE_CH5_POWERDOWN,
  input [1:0] XPIPE_PIPE_CH5_RXCHARISK_M,
  input XPIPE_PIPE_CH5_RXDATAVALID_M,
  input [31:0] XPIPE_PIPE_CH5_RXDATA_M,
  input XPIPE_PIPE_CH5_RXELECIDLE_M,
  input XPIPE_PIPE_CH5_RXPOLARITY,
  input XPIPE_PIPE_CH5_RXSTARTBLOCK_M,
  input [2:0] XPIPE_PIPE_CH5_RXSTATUS_M,
  input [1:0] XPIPE_PIPE_CH5_RXSYNCHEADER_M,
  input XPIPE_PIPE_CH5_RXTERMINATION,
  input XPIPE_PIPE_CH5_RXVALID_M,
  input [1:0] XPIPE_PIPE_CH5_TXCHARISK,
  input XPIPE_PIPE_CH5_TXCOMPLIANCE,
  input [31:0] XPIPE_PIPE_CH5_TXDATA,
  input XPIPE_PIPE_CH5_TXDATAVALID,
  input XPIPE_PIPE_CH5_TXDEEMPH,
  input XPIPE_PIPE_CH5_TXDETECTRXLOOPBACK,
  input XPIPE_PIPE_CH5_TXELECIDLE,
  input [6:0] XPIPE_PIPE_CH5_TXMAINCURSOR,
  input [2:0] XPIPE_PIPE_CH5_TXMARGIN,
  input [4:0] XPIPE_PIPE_CH5_TXPOSTCURSOR,
  input [4:0] XPIPE_PIPE_CH5_TXPRECURSOR,
  input XPIPE_PIPE_CH5_TXSTARTBLOCK,
  input XPIPE_PIPE_CH5_TXSWING,
  input [1:0] XPIPE_PIPE_CH5_TXSYNCHEADER,
  input XPIPE_PIPE_CH6_PHYSTATUS_M,
  input [1:0] XPIPE_PIPE_CH6_POWERDOWN,
  input [1:0] XPIPE_PIPE_CH6_RXCHARISK_M,
  input XPIPE_PIPE_CH6_RXDATAVALID_M,
  input [31:0] XPIPE_PIPE_CH6_RXDATA_M,
  input XPIPE_PIPE_CH6_RXELECIDLE_M,
  input XPIPE_PIPE_CH6_RXPOLARITY,
  input XPIPE_PIPE_CH6_RXSTARTBLOCK_M,
  input [2:0] XPIPE_PIPE_CH6_RXSTATUS_M,
  input [1:0] XPIPE_PIPE_CH6_RXSYNCHEADER_M,
  input XPIPE_PIPE_CH6_RXTERMINATION,
  input XPIPE_PIPE_CH6_RXVALID_M,
  input [1:0] XPIPE_PIPE_CH6_TXCHARISK,
  input XPIPE_PIPE_CH6_TXCOMPLIANCE,
  input [31:0] XPIPE_PIPE_CH6_TXDATA,
  input XPIPE_PIPE_CH6_TXDATAVALID,
  input XPIPE_PIPE_CH6_TXDEEMPH,
  input XPIPE_PIPE_CH6_TXDETECTRXLOOPBACK,
  input XPIPE_PIPE_CH6_TXELECIDLE,
  input [6:0] XPIPE_PIPE_CH6_TXMAINCURSOR,
  input [2:0] XPIPE_PIPE_CH6_TXMARGIN,
  input [4:0] XPIPE_PIPE_CH6_TXPOSTCURSOR,
  input [4:0] XPIPE_PIPE_CH6_TXPRECURSOR,
  input XPIPE_PIPE_CH6_TXSTARTBLOCK,
  input XPIPE_PIPE_CH6_TXSWING,
  input [1:0] XPIPE_PIPE_CH6_TXSYNCHEADER,
  input XPIPE_PIPE_CH7_PHYSTATUS_M,
  input [1:0] XPIPE_PIPE_CH7_POWERDOWN,
  input [1:0] XPIPE_PIPE_CH7_RXCHARISK_M,
  input XPIPE_PIPE_CH7_RXDATAVALID_M,
  input [31:0] XPIPE_PIPE_CH7_RXDATA_M,
  input XPIPE_PIPE_CH7_RXELECIDLE_M,
  input XPIPE_PIPE_CH7_RXPOLARITY,
  input XPIPE_PIPE_CH7_RXSTARTBLOCK_M,
  input [2:0] XPIPE_PIPE_CH7_RXSTATUS_M,
  input [1:0] XPIPE_PIPE_CH7_RXSYNCHEADER_M,
  input XPIPE_PIPE_CH7_RXTERMINATION,
  input XPIPE_PIPE_CH7_RXVALID_M,
  input [1:0] XPIPE_PIPE_CH7_TXCHARISK,
  input XPIPE_PIPE_CH7_TXCOMPLIANCE,
  input [31:0] XPIPE_PIPE_CH7_TXDATA,
  input XPIPE_PIPE_CH7_TXDATAVALID,
  input XPIPE_PIPE_CH7_TXDEEMPH,
  input XPIPE_PIPE_CH7_TXDETECTRXLOOPBACK,
  input XPIPE_PIPE_CH7_TXELECIDLE,
  input [6:0] XPIPE_PIPE_CH7_TXMAINCURSOR,
  input [2:0] XPIPE_PIPE_CH7_TXMARGIN,
  input [4:0] XPIPE_PIPE_CH7_TXPOSTCURSOR,
  input [4:0] XPIPE_PIPE_CH7_TXPRECURSOR,
  input XPIPE_PIPE_CH7_TXSTARTBLOCK,
  input XPIPE_PIPE_CH7_TXSWING,
  input [1:0] XPIPE_PIPE_CH7_TXSYNCHEADER,
  input XPIPE_PIPE_CH8_PHYSTATUS_M,
  input [1:0] XPIPE_PIPE_CH8_POWERDOWN,
  input [1:0] XPIPE_PIPE_CH8_RXCHARISK_M,
  input XPIPE_PIPE_CH8_RXDATAVALID_M,
  input [31:0] XPIPE_PIPE_CH8_RXDATA_M,
  input XPIPE_PIPE_CH8_RXELECIDLE_M,
  input XPIPE_PIPE_CH8_RXPOLARITY,
  input XPIPE_PIPE_CH8_RXSTARTBLOCK_M,
  input [2:0] XPIPE_PIPE_CH8_RXSTATUS_M,
  input [1:0] XPIPE_PIPE_CH8_RXSYNCHEADER_M,
  input XPIPE_PIPE_CH8_RXTERMINATION,
  input XPIPE_PIPE_CH8_RXVALID_M,
  input [1:0] XPIPE_PIPE_CH8_TXCHARISK,
  input XPIPE_PIPE_CH8_TXCOMPLIANCE,
  input [31:0] XPIPE_PIPE_CH8_TXDATA,
  input XPIPE_PIPE_CH8_TXDATAVALID,
  input XPIPE_PIPE_CH8_TXDEEMPH,
  input XPIPE_PIPE_CH8_TXDETECTRXLOOPBACK,
  input XPIPE_PIPE_CH8_TXELECIDLE,
  input [6:0] XPIPE_PIPE_CH8_TXMAINCURSOR,
  input [2:0] XPIPE_PIPE_CH8_TXMARGIN,
  input [4:0] XPIPE_PIPE_CH8_TXPOSTCURSOR,
  input [4:0] XPIPE_PIPE_CH8_TXPRECURSOR,
  input XPIPE_PIPE_CH8_TXSTARTBLOCK,
  input XPIPE_PIPE_CH8_TXSWING,
  input [1:0] XPIPE_PIPE_CH8_TXSYNCHEADER,
  input XPIPE_PIPE_CH9_PHYSTATUS_M,
  input [1:0] XPIPE_PIPE_CH9_POWERDOWN,
  input [1:0] XPIPE_PIPE_CH9_RXCHARISK_M,
  input XPIPE_PIPE_CH9_RXDATAVALID_M,
  input [31:0] XPIPE_PIPE_CH9_RXDATA_M,
  input XPIPE_PIPE_CH9_RXELECIDLE_M,
  input XPIPE_PIPE_CH9_RXPOLARITY,
  input XPIPE_PIPE_CH9_RXSTARTBLOCK_M,
  input [2:0] XPIPE_PIPE_CH9_RXSTATUS_M,
  input [1:0] XPIPE_PIPE_CH9_RXSYNCHEADER_M,
  input XPIPE_PIPE_CH9_RXTERMINATION,
  input XPIPE_PIPE_CH9_RXVALID_M,
  input [1:0] XPIPE_PIPE_CH9_TXCHARISK,
  input XPIPE_PIPE_CH9_TXCOMPLIANCE,
  input [31:0] XPIPE_PIPE_CH9_TXDATA,
  input XPIPE_PIPE_CH9_TXDATAVALID,
  input XPIPE_PIPE_CH9_TXDEEMPH,
  input XPIPE_PIPE_CH9_TXDETECTRXLOOPBACK,
  input XPIPE_PIPE_CH9_TXELECIDLE,
  input [6:0] XPIPE_PIPE_CH9_TXMAINCURSOR,
  input [2:0] XPIPE_PIPE_CH9_TXMARGIN,
  input [4:0] XPIPE_PIPE_CH9_TXPOSTCURSOR,
  input [4:0] XPIPE_PIPE_CH9_TXPRECURSOR,
  input XPIPE_PIPE_CH9_TXSTARTBLOCK,
  input XPIPE_PIPE_CH9_TXSWING,
  input [1:0] XPIPE_PIPE_CH9_TXSYNCHEADER,
  input XPIPE_RXMARGINREQACK_M,
  input XPIPE_RXMARGINREQACK_M_1,
  input XPIPE_RXMARGINREQACK_M_2,
  input XPIPE_RXMARGINREQACK_M_3,
  input [3:0] XPIPE_RXMARGINREQCMD,
  input [3:0] XPIPE_RXMARGINREQCMD_1,
  input [3:0] XPIPE_RXMARGINREQCMD_2,
  input [3:0] XPIPE_RXMARGINREQCMD_3,
  input [1:0] XPIPE_RXMARGINREQLANENUM,
  input [1:0] XPIPE_RXMARGINREQLANENUM_1,
  input [1:0] XPIPE_RXMARGINREQLANENUM_2,
  input [1:0] XPIPE_RXMARGINREQLANENUM_3,
  input [7:0] XPIPE_RXMARGINREQPAYLOAD,
  input [7:0] XPIPE_RXMARGINREQPAYLOAD_1,
  input [7:0] XPIPE_RXMARGINREQPAYLOAD_2,
  input [7:0] XPIPE_RXMARGINREQPAYLOAD_3,
  input XPIPE_RXMARGINREQREQ,
  input XPIPE_RXMARGINREQREQ_1,
  input XPIPE_RXMARGINREQREQ_2,
  input XPIPE_RXMARGINREQREQ_3,
  input XPIPE_RXMARGINRESACK,
  input XPIPE_RXMARGINRESACK_1,
  input XPIPE_RXMARGINRESACK_2,
  input XPIPE_RXMARGINRESACK_3,
  input [3:0] XPIPE_RXMARGINRESCMD_M,
  input [3:0] XPIPE_RXMARGINRESCMD_M_1,
  input [3:0] XPIPE_RXMARGINRESCMD_M_2,
  input [3:0] XPIPE_RXMARGINRESCMD_M_3,
  input [1:0] XPIPE_RXMARGINRESLANENUM_M,
  input [1:0] XPIPE_RXMARGINRESLANENUM_M_1,
  input [1:0] XPIPE_RXMARGINRESLANENUM_M_2,
  input [1:0] XPIPE_RXMARGINRESLANENUM_M_3,
  input [7:0] XPIPE_RXMARGINRESPAYLOAD_M,
  input [7:0] XPIPE_RXMARGINRESPAYLOAD_M_1,
  input [7:0] XPIPE_RXMARGINRESPAYLOAD_M_2,
  input [7:0] XPIPE_RXMARGINRESPAYLOAD_M_3,
  input XPIPE_RXMARGINRESREQ_M,
  input XPIPE_RXMARGINRESREQ_M_1,
  input XPIPE_RXMARGINRESREQ_M_2,
  input XPIPE_RXMARGINRESREQ_M_3
);

// define constants
  localparam MODULE_NAME = "XPIPE_QUAD";
  
  reg trig_attr;
// include dynamic registers - XILINX test only
`ifdef XIL_DR
  `include "XPIPE_QUAD_dr.v"
`else
  real DATA_RATE_REG = DATA_RATE;
  reg [4:0] GT_CHANNELS_REG = GT_CHANNELS;
  reg [144:1] SIM_DEVICE_REG = SIM_DEVICE;
  reg [31:0] XPIPE_CLKDLY_CFG_REG = XPIPE_CLKDLY_CFG;
  reg [31:0] XPIPE_CLK_CFG_REG = XPIPE_CLK_CFG;
  reg [0:0] XPIPE_INSTANTIATED_REG = XPIPE_INSTANTIATED;
  reg [56:1] XPIPE_LINK0_CFG_REG = XPIPE_LINK0_CFG;
  reg [56:1] XPIPE_LINK1_CFG_REG = XPIPE_LINK1_CFG;
  reg [40:1] XPIPE_LOC_REG = XPIPE_LOC;
  reg [1:0] XPIPE_MODE_REG = XPIPE_MODE;
  reg [15:0] XPIPE_REG_CFG_REG = XPIPE_REG_CFG;
  reg [31:0] XPIPE_RSVD_REG = XPIPE_RSVD;
`endif

`ifdef XIL_XECLIB
  wire [63:0] DATA_RATE_BIN;
`else
  reg [63:0] DATA_RATE_BIN;
`endif

  wire [144:1] SIM_DEVICE_MAP;
  assign SIM_DEVICE_MAP =
      (SIM_DEVICE_REG == "VERSAL_AI_CORE") ? "VERSAL" :
      (SIM_DEVICE_REG == "VERSAL_AI_CORE_ES1") ? "VERSAL_ES1" :
      (SIM_DEVICE_REG == "VERSAL_AI_CORE_ES2") ? "VERSAL_ES2" :
      (SIM_DEVICE_REG == "VERSAL_PRIME") ? "VERSAL" :
      (SIM_DEVICE_REG == "VERSAL_PRIME_ES1") ? "VERSAL_ES1" :
      (SIM_DEVICE_REG == "VERSAL_PRIME_ES2") ? "VERSAL_ES2" :
       "VERSAL";

  wire ALTCLK_M_out;
  wire APB3CLK_M_out;
  wire APB3PENABLE_M_out;
  wire APB3PREADY_out;
  wire APB3PRESETN_M_out;
  wire APB3PSEL_M_out;
  wire APB3PSLVERR_out;
  wire APB3PWRITE_M_out;
  wire AXISCLK_M_out;
  wire BGBYPASSB_M_out;
  wire BGMONITORENB_M_out;
  wire BGPDB_M_out;
  wire BGRCALOVRDENB_M_out;
  wire CH0_BSR_SERIAL_M_out;
  wire CH0_BUFGTCE_out;
  wire CH0_BUFGTRST_out;
  wire CH0_CDRBMCDRREQ_M_out;
  wire CH0_CDRFREQOS_M_out;
  wire CH0_CDRINCPCTRL_M_out;
  wire CH0_CDRSTEPDIR_M_out;
  wire CH0_CDRSTEPSQ_M_out;
  wire CH0_CDRSTEPSX_M_out;
  wire CH0_CFOKOVRDFINISH_M_out;
  wire CH0_CFOKOVRDPULSE_M_out;
  wire CH0_CFOKOVRDRDY0_out;
  wire CH0_CFOKOVRDRDY1_out;
  wire CH0_CFOKOVRDSTART_M_out;
  wire CH0_CLKRSVD0_M_out;
  wire CH0_CLKRSVD1_M_out;
  wire CH0_CSSDRSTB_M_out;
  wire CH0_CSSDSTOPCLKDONE_out;
  wire CH0_CSSDSTOPCLK_M_out;
  wire CH0_DMONFIFORESET_M_out;
  wire CH0_DMONITORCLK_M_out;
  wire CH0_EDTUPDATEB_M_out;
  wire CH0_EYESCANDATAERROR_out;
  wire CH0_EYESCANRESET_M_out;
  wire CH0_EYESCANTRIGGER_M_out;
  wire CH0_GTRXRESET_M_out;
  wire CH0_GTTXRESET_M_out;
  wire CH0_HSDPPCSRESET_M_out;
  wire CH0_ILORESETDONE_out;
  wire CH0_ILORESETMASK_M_out;
  wire CH0_ILORESET_M_out;
  wire CH0_PCIERSTB_M_out;
  wire CH0_PHYESMADAPTSAVE_M_out;
  wire CH0_PHYREADY_out;
  wire CH0_PHYSTATUS_out;
  wire CH0_RESETEXCEPTION_out;
  wire CH0_RXBYTEISALIGNED_out;
  wire CH0_RXBYTEREALIGN_out;
  wire CH0_RXCDRHOLD_M_out;
  wire CH0_RXCDRLOCK_out;
  wire CH0_RXCDROVRDEN_M_out;
  wire CH0_RXCDRPHDONE_out;
  wire CH0_RXCDRRESET_M_out;
  wire CH0_RXCHANBONDSEQ_out;
  wire CH0_RXCHANISALIGNED_out;
  wire CH0_RXCHANREALIGN_out;
  wire CH0_RXCOMINITDET_out;
  wire CH0_RXCOMMADET_out;
  wire CH0_RXCOMSASDET_out;
  wire CH0_RXCOMWAKEDET_out;
  wire CH0_RXDAPICODEOVRDEN_M_out;
  wire CH0_RXDAPICODERESET_M_out;
  wire CH0_RXDCCDONE_out;
  wire CH0_RXDLYALIGNERR_out;
  wire CH0_RXDLYALIGNPROG_out;
  wire CH0_RXDLYALIGNREQ_M_out;
  wire CH0_RXELECIDLE_out;
  wire CH0_RXEQTRAINING_M_out;
  wire CH0_RXFINEALIGNDONE_out;
  wire CH0_RXGEARBOXSLIP_M_out;
  wire CH0_RXLATCLK_M_out;
  wire CH0_RXLPMEN_M_out;
  wire CH0_RXMLDCHAINDONE_M_out;
  wire CH0_RXMLDCHAINREQ_M_out;
  wire CH0_RXMLFINEALIGNREQ_M_out;
  wire CH0_RXOOBRESET_M_out;
  wire CH0_RXOSINTDONE_out;
  wire CH0_RXOSINTSTARTED_out;
  wire CH0_RXOSINTSTROBEDONE_out;
  wire CH0_RXOSINTSTROBESTARTED_out;
  wire CH0_RXPHALIGNDONE_out;
  wire CH0_RXPHALIGNERR_out;
  wire CH0_RXPHALIGNREQ_M_out;
  wire CH0_RXPHDLYPD_M_out;
  wire CH0_RXPHDLYRESETDONE_out;
  wire CH0_RXPHDLYRESET_M_out;
  wire CH0_RXPHSETINITDONE_out;
  wire CH0_RXPHSETINITREQ_M_out;
  wire CH0_RXPHSHIFT180DONE_out;
  wire CH0_RXPHSHIFT180_M_out;
  wire CH0_RXPMARESETDONE_out;
  wire CH0_RXPOLARITY_M_out;
  wire CH0_RXPRBSCNTRESET_M_out;
  wire CH0_RXPRBSERR_out;
  wire CH0_RXPRBSLOCKED_out;
  wire CH0_RXPROGDIVRESETDONE_out;
  wire CH0_RXPROGDIVRESET_M_out;
  wire CH0_RXRESETDONE_out;
  wire CH0_RXSLIDERDY_out;
  wire CH0_RXSLIDE_M_out;
  wire CH0_RXSYNCALLIN_M_out;
  wire CH0_RXSYNCDONE_out;
  wire CH0_RXTERMINATION_M_out;
  wire CH0_RXUSERRDY_M_out;
  wire CH0_RXUSRCLK_M_out;
  wire CH0_RXVALID_out;
  wire CH0_SCANCLKB_M_out;
  wire CH0_SCANCNTRLIN_M_out;
  wire CH0_SCANCNTRLOUT_out;
  wire CH0_SCANENB_M_out;
  wire CH0_SCANRSTB_M_out;
  wire CH0_TSTCLK0_M_out;
  wire CH0_TSTCLK1_M_out;
  wire CH0_TX10GSTAT_out;
  wire CH0_TXCOMFINISH_out;
  wire CH0_TXCOMINIT_M_out;
  wire CH0_TXCOMSAS_M_out;
  wire CH0_TXCOMWAKE_M_out;
  wire CH0_TXDAPICODEOVRDEN_M_out;
  wire CH0_TXDAPICODERESET_M_out;
  wire CH0_TXDCCDONE_out;
  wire CH0_TXDETECTRX_M_out;
  wire CH0_TXDLYALIGNERR_out;
  wire CH0_TXDLYALIGNPROG_out;
  wire CH0_TXDLYALIGNREQ_M_out;
  wire CH0_TXELECIDLE_M_out;
  wire CH0_TXINHIBIT_M_out;
  wire CH0_TXLATCLK_M_out;
  wire CH0_TXMLDCHAINDONE_M_out;
  wire CH0_TXMLDCHAINREQ_M_out;
  wire CH0_TXONESZEROS_M_out;
  wire CH0_TXPAUSEDELAYALIGN_M_out;
  wire CH0_TXPCSRESETMASK_M_out;
  wire CH0_TXPHALIGNDONE_out;
  wire CH0_TXPHALIGNERR_out;
  wire CH0_TXPHALIGNOUTRSVD_out;
  wire CH0_TXPHALIGNREQ_M_out;
  wire CH0_TXPHDLYPD_M_out;
  wire CH0_TXPHDLYRESETDONE_out;
  wire CH0_TXPHDLYRESET_M_out;
  wire CH0_TXPHDLYTSTCLK_M_out;
  wire CH0_TXPHSETINITDONE_out;
  wire CH0_TXPHSETINITREQ_M_out;
  wire CH0_TXPHSHIFT180DONE_out;
  wire CH0_TXPHSHIFT180_M_out;
  wire CH0_TXPICODEOVRDEN_M_out;
  wire CH0_TXPICODERESET_M_out;
  wire CH0_TXPIPPMEN_M_out;
  wire CH0_TXPISOPD_M_out;
  wire CH0_TXPMARESETDONE_out;
  wire CH0_TXPOLARITY_M_out;
  wire CH0_TXPRBSFORCEERR_M_out;
  wire CH0_TXPROGDIVRESETDONE_out;
  wire CH0_TXPROGDIVRESET_M_out;
  wire CH0_TXRESETDONE_out;
  wire CH0_TXSWING_M_out;
  wire CH0_TXSYNCALLIN_M_out;
  wire CH0_TXSYNCDONE_out;
  wire CH0_TXUSERRDY_M_out;
  wire CH0_TXUSRCLK_M_out;
  wire CH1_BSR_SERIAL_M_out;
  wire CH1_BUFGTCE_out;
  wire CH1_BUFGTRST_out;
  wire CH1_CDRBMCDRREQ_M_out;
  wire CH1_CDRFREQOS_M_out;
  wire CH1_CDRINCPCTRL_M_out;
  wire CH1_CDRSTEPDIR_M_out;
  wire CH1_CDRSTEPSQ_M_out;
  wire CH1_CDRSTEPSX_M_out;
  wire CH1_CFOKOVRDFINISH_M_out;
  wire CH1_CFOKOVRDPULSE_M_out;
  wire CH1_CFOKOVRDRDY0_out;
  wire CH1_CFOKOVRDRDY1_out;
  wire CH1_CFOKOVRDSTART_M_out;
  wire CH1_CLKRSVD0_M_out;
  wire CH1_CLKRSVD1_M_out;
  wire CH1_CSSDRSTB_M_out;
  wire CH1_CSSDSTOPCLKDONE_out;
  wire CH1_CSSDSTOPCLK_M_out;
  wire CH1_DMONFIFORESET_M_out;
  wire CH1_DMONITORCLK_M_out;
  wire CH1_EDTUPDATEB_M_out;
  wire CH1_EYESCANDATAERROR_out;
  wire CH1_EYESCANRESET_M_out;
  wire CH1_EYESCANTRIGGER_M_out;
  wire CH1_GTRXRESET_M_out;
  wire CH1_GTTXRESET_M_out;
  wire CH1_HSDPPCSRESET_M_out;
  wire CH1_ILORESETDONE_out;
  wire CH1_ILORESETMASK_M_out;
  wire CH1_ILORESET_M_out;
  wire CH1_PCIERSTB_M_out;
  wire CH1_PHYESMADAPTSAVE_M_out;
  wire CH1_PHYREADY_out;
  wire CH1_PHYSTATUS_out;
  wire CH1_RESETEXCEPTION_out;
  wire CH1_RXBYTEISALIGNED_out;
  wire CH1_RXBYTEREALIGN_out;
  wire CH1_RXCDRHOLD_M_out;
  wire CH1_RXCDRLOCK_out;
  wire CH1_RXCDROVRDEN_M_out;
  wire CH1_RXCDRPHDONE_out;
  wire CH1_RXCDRRESET_M_out;
  wire CH1_RXCHANBONDSEQ_out;
  wire CH1_RXCHANISALIGNED_out;
  wire CH1_RXCHANREALIGN_out;
  wire CH1_RXCOMINITDET_out;
  wire CH1_RXCOMMADET_out;
  wire CH1_RXCOMSASDET_out;
  wire CH1_RXCOMWAKEDET_out;
  wire CH1_RXDAPICODEOVRDEN_M_out;
  wire CH1_RXDAPICODERESET_M_out;
  wire CH1_RXDCCDONE_out;
  wire CH1_RXDLYALIGNERR_out;
  wire CH1_RXDLYALIGNPROG_out;
  wire CH1_RXDLYALIGNREQ_M_out;
  wire CH1_RXELECIDLE_out;
  wire CH1_RXEQTRAINING_M_out;
  wire CH1_RXFINEALIGNDONE_out;
  wire CH1_RXGEARBOXSLIP_M_out;
  wire CH1_RXLATCLK_M_out;
  wire CH1_RXLPMEN_M_out;
  wire CH1_RXMLDCHAINDONE_M_out;
  wire CH1_RXMLDCHAINREQ_M_out;
  wire CH1_RXMLFINEALIGNREQ_M_out;
  wire CH1_RXOOBRESET_M_out;
  wire CH1_RXOSINTDONE_out;
  wire CH1_RXOSINTSTARTED_out;
  wire CH1_RXOSINTSTROBEDONE_out;
  wire CH1_RXOSINTSTROBESTARTED_out;
  wire CH1_RXPHALIGNDONE_out;
  wire CH1_RXPHALIGNERR_out;
  wire CH1_RXPHALIGNREQ_M_out;
  wire CH1_RXPHDLYPD_M_out;
  wire CH1_RXPHDLYRESETDONE_out;
  wire CH1_RXPHDLYRESET_M_out;
  wire CH1_RXPHSETINITDONE_out;
  wire CH1_RXPHSETINITREQ_M_out;
  wire CH1_RXPHSHIFT180DONE_out;
  wire CH1_RXPHSHIFT180_M_out;
  wire CH1_RXPMARESETDONE_out;
  wire CH1_RXPOLARITY_M_out;
  wire CH1_RXPRBSCNTRESET_M_out;
  wire CH1_RXPRBSERR_out;
  wire CH1_RXPRBSLOCKED_out;
  wire CH1_RXPROGDIVRESETDONE_out;
  wire CH1_RXPROGDIVRESET_M_out;
  wire CH1_RXRESETDONE_out;
  wire CH1_RXSLIDERDY_out;
  wire CH1_RXSLIDE_M_out;
  wire CH1_RXSYNCALLIN_M_out;
  wire CH1_RXSYNCDONE_out;
  wire CH1_RXTERMINATION_M_out;
  wire CH1_RXUSERRDY_M_out;
  wire CH1_RXUSRCLK_M_out;
  wire CH1_RXVALID_out;
  wire CH1_SCANCLKB_M_out;
  wire CH1_SCANCNTRLIN_M_out;
  wire CH1_SCANCNTRLOUT_out;
  wire CH1_SCANENB_M_out;
  wire CH1_SCANRSTB_M_out;
  wire CH1_TSTCLK0_M_out;
  wire CH1_TSTCLK1_M_out;
  wire CH1_TX10GSTAT_out;
  wire CH1_TXCOMFINISH_out;
  wire CH1_TXCOMINIT_M_out;
  wire CH1_TXCOMSAS_M_out;
  wire CH1_TXCOMWAKE_M_out;
  wire CH1_TXDAPICODEOVRDEN_M_out;
  wire CH1_TXDAPICODERESET_M_out;
  wire CH1_TXDCCDONE_out;
  wire CH1_TXDETECTRX_M_out;
  wire CH1_TXDLYALIGNERR_out;
  wire CH1_TXDLYALIGNPROG_out;
  wire CH1_TXDLYALIGNREQ_M_out;
  wire CH1_TXELECIDLE_M_out;
  wire CH1_TXINHIBIT_M_out;
  wire CH1_TXLATCLK_M_out;
  wire CH1_TXMLDCHAINDONE_M_out;
  wire CH1_TXMLDCHAINREQ_M_out;
  wire CH1_TXONESZEROS_M_out;
  wire CH1_TXPAUSEDELAYALIGN_M_out;
  wire CH1_TXPCSRESETMASK_M_out;
  wire CH1_TXPHALIGNDONE_out;
  wire CH1_TXPHALIGNERR_out;
  wire CH1_TXPHALIGNOUTRSVD_out;
  wire CH1_TXPHALIGNREQ_M_out;
  wire CH1_TXPHDLYPD_M_out;
  wire CH1_TXPHDLYRESETDONE_out;
  wire CH1_TXPHDLYRESET_M_out;
  wire CH1_TXPHDLYTSTCLK_M_out;
  wire CH1_TXPHSETINITDONE_out;
  wire CH1_TXPHSETINITREQ_M_out;
  wire CH1_TXPHSHIFT180DONE_out;
  wire CH1_TXPHSHIFT180_M_out;
  wire CH1_TXPICODEOVRDEN_M_out;
  wire CH1_TXPICODERESET_M_out;
  wire CH1_TXPIPPMEN_M_out;
  wire CH1_TXPISOPD_M_out;
  wire CH1_TXPMARESETDONE_out;
  wire CH1_TXPOLARITY_M_out;
  wire CH1_TXPRBSFORCEERR_M_out;
  wire CH1_TXPROGDIVRESETDONE_out;
  wire CH1_TXPROGDIVRESET_M_out;
  wire CH1_TXRESETDONE_out;
  wire CH1_TXSWING_M_out;
  wire CH1_TXSYNCALLIN_M_out;
  wire CH1_TXSYNCDONE_out;
  wire CH1_TXUSERRDY_M_out;
  wire CH1_TXUSRCLK_M_out;
  wire CH2_BSR_SERIAL_M_out;
  wire CH2_BUFGTCE_out;
  wire CH2_BUFGTRST_out;
  wire CH2_CDRBMCDRREQ_M_out;
  wire CH2_CDRFREQOS_M_out;
  wire CH2_CDRINCPCTRL_M_out;
  wire CH2_CDRSTEPDIR_M_out;
  wire CH2_CDRSTEPSQ_M_out;
  wire CH2_CDRSTEPSX_M_out;
  wire CH2_CFOKOVRDFINISH_M_out;
  wire CH2_CFOKOVRDPULSE_M_out;
  wire CH2_CFOKOVRDRDY0_out;
  wire CH2_CFOKOVRDRDY1_out;
  wire CH2_CFOKOVRDSTART_M_out;
  wire CH2_CLKRSVD0_M_out;
  wire CH2_CLKRSVD1_M_out;
  wire CH2_CSSDRSTB_M_out;
  wire CH2_CSSDSTOPCLKDONE_out;
  wire CH2_CSSDSTOPCLK_M_out;
  wire CH2_DMONFIFORESET_M_out;
  wire CH2_DMONITORCLK_M_out;
  wire CH2_EDTUPDATEB_M_out;
  wire CH2_EYESCANDATAERROR_out;
  wire CH2_EYESCANRESET_M_out;
  wire CH2_EYESCANTRIGGER_M_out;
  wire CH2_GTRXRESET_M_out;
  wire CH2_GTTXRESET_M_out;
  wire CH2_HSDPPCSRESET_M_out;
  wire CH2_ILORESETDONE_out;
  wire CH2_ILORESETMASK_M_out;
  wire CH2_ILORESET_M_out;
  wire CH2_PCIERSTB_M_out;
  wire CH2_PHYESMADAPTSAVE_M_out;
  wire CH2_PHYREADY_out;
  wire CH2_PHYSTATUS_out;
  wire CH2_RESETEXCEPTION_out;
  wire CH2_RXBYTEISALIGNED_out;
  wire CH2_RXBYTEREALIGN_out;
  wire CH2_RXCDRHOLD_M_out;
  wire CH2_RXCDRLOCK_out;
  wire CH2_RXCDROVRDEN_M_out;
  wire CH2_RXCDRPHDONE_out;
  wire CH2_RXCDRRESET_M_out;
  wire CH2_RXCHANBONDSEQ_out;
  wire CH2_RXCHANISALIGNED_out;
  wire CH2_RXCHANREALIGN_out;
  wire CH2_RXCOMINITDET_out;
  wire CH2_RXCOMMADET_out;
  wire CH2_RXCOMSASDET_out;
  wire CH2_RXCOMWAKEDET_out;
  wire CH2_RXDAPICODEOVRDEN_M_out;
  wire CH2_RXDAPICODERESET_M_out;
  wire CH2_RXDCCDONE_out;
  wire CH2_RXDLYALIGNERR_out;
  wire CH2_RXDLYALIGNPROG_out;
  wire CH2_RXDLYALIGNREQ_M_out;
  wire CH2_RXELECIDLE_out;
  wire CH2_RXEQTRAINING_M_out;
  wire CH2_RXFINEALIGNDONE_out;
  wire CH2_RXGEARBOXSLIP_M_out;
  wire CH2_RXLATCLK_M_out;
  wire CH2_RXLPMEN_M_out;
  wire CH2_RXMLDCHAINDONE_M_out;
  wire CH2_RXMLDCHAINREQ_M_out;
  wire CH2_RXMLFINEALIGNREQ_M_out;
  wire CH2_RXOOBRESET_M_out;
  wire CH2_RXOSINTDONE_out;
  wire CH2_RXOSINTSTARTED_out;
  wire CH2_RXOSINTSTROBEDONE_out;
  wire CH2_RXOSINTSTROBESTARTED_out;
  wire CH2_RXPHALIGNDONE_out;
  wire CH2_RXPHALIGNERR_out;
  wire CH2_RXPHALIGNREQ_M_out;
  wire CH2_RXPHDLYPD_M_out;
  wire CH2_RXPHDLYRESETDONE_out;
  wire CH2_RXPHDLYRESET_M_out;
  wire CH2_RXPHSETINITDONE_out;
  wire CH2_RXPHSETINITREQ_M_out;
  wire CH2_RXPHSHIFT180DONE_out;
  wire CH2_RXPHSHIFT180_M_out;
  wire CH2_RXPMARESETDONE_out;
  wire CH2_RXPOLARITY_M_out;
  wire CH2_RXPRBSCNTRESET_M_out;
  wire CH2_RXPRBSERR_out;
  wire CH2_RXPRBSLOCKED_out;
  wire CH2_RXPROGDIVRESETDONE_out;
  wire CH2_RXPROGDIVRESET_M_out;
  wire CH2_RXRESETDONE_out;
  wire CH2_RXSLIDERDY_out;
  wire CH2_RXSLIDE_M_out;
  wire CH2_RXSYNCALLIN_M_out;
  wire CH2_RXSYNCDONE_out;
  wire CH2_RXTERMINATION_M_out;
  wire CH2_RXUSERRDY_M_out;
  wire CH2_RXUSRCLK_M_out;
  wire CH2_RXVALID_out;
  wire CH2_SCANCLKB_M_out;
  wire CH2_SCANCNTRLIN_M_out;
  wire CH2_SCANCNTRLOUT_out;
  wire CH2_SCANENB_M_out;
  wire CH2_SCANRSTB_M_out;
  wire CH2_TSTCLK0_M_out;
  wire CH2_TSTCLK1_M_out;
  wire CH2_TX10GSTAT_out;
  wire CH2_TXCOMFINISH_out;
  wire CH2_TXCOMINIT_M_out;
  wire CH2_TXCOMSAS_M_out;
  wire CH2_TXCOMWAKE_M_out;
  wire CH2_TXDAPICODEOVRDEN_M_out;
  wire CH2_TXDAPICODERESET_M_out;
  wire CH2_TXDCCDONE_out;
  wire CH2_TXDETECTRX_M_out;
  wire CH2_TXDLYALIGNERR_out;
  wire CH2_TXDLYALIGNPROG_out;
  wire CH2_TXDLYALIGNREQ_M_out;
  wire CH2_TXELECIDLE_M_out;
  wire CH2_TXINHIBIT_M_out;
  wire CH2_TXLATCLK_M_out;
  wire CH2_TXMLDCHAINDONE_M_out;
  wire CH2_TXMLDCHAINREQ_M_out;
  wire CH2_TXONESZEROS_M_out;
  wire CH2_TXPAUSEDELAYALIGN_M_out;
  wire CH2_TXPCSRESETMASK_M_out;
  wire CH2_TXPHALIGNDONE_out;
  wire CH2_TXPHALIGNERR_out;
  wire CH2_TXPHALIGNOUTRSVD_out;
  wire CH2_TXPHALIGNREQ_M_out;
  wire CH2_TXPHDLYPD_M_out;
  wire CH2_TXPHDLYRESETDONE_out;
  wire CH2_TXPHDLYRESET_M_out;
  wire CH2_TXPHDLYTSTCLK_M_out;
  wire CH2_TXPHSETINITDONE_out;
  wire CH2_TXPHSETINITREQ_M_out;
  wire CH2_TXPHSHIFT180DONE_out;
  wire CH2_TXPHSHIFT180_M_out;
  wire CH2_TXPICODEOVRDEN_M_out;
  wire CH2_TXPICODERESET_M_out;
  wire CH2_TXPIPPMEN_M_out;
  wire CH2_TXPISOPD_M_out;
  wire CH2_TXPMARESETDONE_out;
  wire CH2_TXPOLARITY_M_out;
  wire CH2_TXPRBSFORCEERR_M_out;
  wire CH2_TXPROGDIVRESETDONE_out;
  wire CH2_TXPROGDIVRESET_M_out;
  wire CH2_TXRESETDONE_out;
  wire CH2_TXSWING_M_out;
  wire CH2_TXSYNCALLIN_M_out;
  wire CH2_TXSYNCDONE_out;
  wire CH2_TXUSERRDY_M_out;
  wire CH2_TXUSRCLK_M_out;
  wire CH3_BSR_SERIAL_M_out;
  wire CH3_BUFGTCE_out;
  wire CH3_BUFGTRST_out;
  wire CH3_CDRBMCDRREQ_M_out;
  wire CH3_CDRFREQOS_M_out;
  wire CH3_CDRINCPCTRL_M_out;
  wire CH3_CDRSTEPDIR_M_out;
  wire CH3_CDRSTEPSQ_M_out;
  wire CH3_CDRSTEPSX_M_out;
  wire CH3_CFOKOVRDFINISH_M_out;
  wire CH3_CFOKOVRDPULSE_M_out;
  wire CH3_CFOKOVRDRDY0_out;
  wire CH3_CFOKOVRDRDY1_out;
  wire CH3_CFOKOVRDSTART_M_out;
  wire CH3_CLKRSVD0_M_out;
  wire CH3_CLKRSVD1_M_out;
  wire CH3_CSSDRSTB_M_out;
  wire CH3_CSSDSTOPCLKDONE_out;
  wire CH3_CSSDSTOPCLK_M_out;
  wire CH3_DMONFIFORESET_M_out;
  wire CH3_DMONITORCLK_M_out;
  wire CH3_EDTUPDATEB_M_out;
  wire CH3_EYESCANDATAERROR_out;
  wire CH3_EYESCANRESET_M_out;
  wire CH3_EYESCANTRIGGER_M_out;
  wire CH3_GTRXRESET_M_out;
  wire CH3_GTTXRESET_M_out;
  wire CH3_HSDPPCSRESET_M_out;
  wire CH3_ILORESETDONE_out;
  wire CH3_ILORESETMASK_M_out;
  wire CH3_ILORESET_M_out;
  wire CH3_PCIERSTB_M_out;
  wire CH3_PHYESMADAPTSAVE_M_out;
  wire CH3_PHYREADY_out;
  wire CH3_PHYSTATUS_out;
  wire CH3_RESETEXCEPTION_out;
  wire CH3_RXBYTEISALIGNED_out;
  wire CH3_RXBYTEREALIGN_out;
  wire CH3_RXCDRHOLD_M_out;
  wire CH3_RXCDRLOCK_out;
  wire CH3_RXCDROVRDEN_M_out;
  wire CH3_RXCDRPHDONE_out;
  wire CH3_RXCDRRESET_M_out;
  wire CH3_RXCHANBONDSEQ_out;
  wire CH3_RXCHANISALIGNED_out;
  wire CH3_RXCHANREALIGN_out;
  wire CH3_RXCOMINITDET_out;
  wire CH3_RXCOMMADET_out;
  wire CH3_RXCOMSASDET_out;
  wire CH3_RXCOMWAKEDET_out;
  wire CH3_RXDAPICODEOVRDEN_M_out;
  wire CH3_RXDAPICODERESET_M_out;
  wire CH3_RXDCCDONE_out;
  wire CH3_RXDLYALIGNERR_out;
  wire CH3_RXDLYALIGNPROG_out;
  wire CH3_RXDLYALIGNREQ_M_out;
  wire CH3_RXELECIDLE_out;
  wire CH3_RXEQTRAINING_M_out;
  wire CH3_RXFINEALIGNDONE_out;
  wire CH3_RXGEARBOXSLIP_M_out;
  wire CH3_RXLATCLK_M_out;
  wire CH3_RXLPMEN_M_out;
  wire CH3_RXMLDCHAINDONE_M_out;
  wire CH3_RXMLDCHAINREQ_M_out;
  wire CH3_RXMLFINEALIGNREQ_M_out;
  wire CH3_RXOOBRESET_M_out;
  wire CH3_RXOSINTDONE_out;
  wire CH3_RXOSINTSTARTED_out;
  wire CH3_RXOSINTSTROBEDONE_out;
  wire CH3_RXOSINTSTROBESTARTED_out;
  wire CH3_RXPHALIGNDONE_out;
  wire CH3_RXPHALIGNERR_out;
  wire CH3_RXPHALIGNREQ_M_out;
  wire CH3_RXPHDLYPD_M_out;
  wire CH3_RXPHDLYRESETDONE_out;
  wire CH3_RXPHDLYRESET_M_out;
  wire CH3_RXPHSETINITDONE_out;
  wire CH3_RXPHSETINITREQ_M_out;
  wire CH3_RXPHSHIFT180DONE_out;
  wire CH3_RXPHSHIFT180_M_out;
  wire CH3_RXPMARESETDONE_out;
  wire CH3_RXPOLARITY_M_out;
  wire CH3_RXPRBSCNTRESET_M_out;
  wire CH3_RXPRBSERR_out;
  wire CH3_RXPRBSLOCKED_out;
  wire CH3_RXPROGDIVRESETDONE_out;
  wire CH3_RXPROGDIVRESET_M_out;
  wire CH3_RXRESETDONE_out;
  wire CH3_RXSLIDERDY_out;
  wire CH3_RXSLIDE_M_out;
  wire CH3_RXSYNCALLIN_M_out;
  wire CH3_RXSYNCDONE_out;
  wire CH3_RXTERMINATION_M_out;
  wire CH3_RXUSERRDY_M_out;
  wire CH3_RXUSRCLK_M_out;
  wire CH3_RXVALID_out;
  wire CH3_SCANCLKB_M_out;
  wire CH3_SCANCNTRLIN_M_out;
  wire CH3_SCANCNTRLOUT_out;
  wire CH3_SCANENB_M_out;
  wire CH3_SCANRSTB_M_out;
  wire CH3_TSTCLK0_M_out;
  wire CH3_TSTCLK1_M_out;
  wire CH3_TX10GSTAT_out;
  wire CH3_TXCOMFINISH_out;
  wire CH3_TXCOMINIT_M_out;
  wire CH3_TXCOMSAS_M_out;
  wire CH3_TXCOMWAKE_M_out;
  wire CH3_TXDAPICODEOVRDEN_M_out;
  wire CH3_TXDAPICODERESET_M_out;
  wire CH3_TXDCCDONE_out;
  wire CH3_TXDETECTRX_M_out;
  wire CH3_TXDLYALIGNERR_out;
  wire CH3_TXDLYALIGNPROG_out;
  wire CH3_TXDLYALIGNREQ_M_out;
  wire CH3_TXELECIDLE_M_out;
  wire CH3_TXINHIBIT_M_out;
  wire CH3_TXLATCLK_M_out;
  wire CH3_TXMLDCHAINDONE_M_out;
  wire CH3_TXMLDCHAINREQ_M_out;
  wire CH3_TXONESZEROS_M_out;
  wire CH3_TXPAUSEDELAYALIGN_M_out;
  wire CH3_TXPCSRESETMASK_M_out;
  wire CH3_TXPHALIGNDONE_out;
  wire CH3_TXPHALIGNERR_out;
  wire CH3_TXPHALIGNOUTRSVD_out;
  wire CH3_TXPHALIGNREQ_M_out;
  wire CH3_TXPHDLYPD_M_out;
  wire CH3_TXPHDLYRESETDONE_out;
  wire CH3_TXPHDLYRESET_M_out;
  wire CH3_TXPHDLYTSTCLK_M_out;
  wire CH3_TXPHSETINITDONE_out;
  wire CH3_TXPHSETINITREQ_M_out;
  wire CH3_TXPHSHIFT180DONE_out;
  wire CH3_TXPHSHIFT180_M_out;
  wire CH3_TXPICODEOVRDEN_M_out;
  wire CH3_TXPICODERESET_M_out;
  wire CH3_TXPIPPMEN_M_out;
  wire CH3_TXPISOPD_M_out;
  wire CH3_TXPMARESETDONE_out;
  wire CH3_TXPOLARITY_M_out;
  wire CH3_TXPRBSFORCEERR_M_out;
  wire CH3_TXPROGDIVRESETDONE_out;
  wire CH3_TXPROGDIVRESET_M_out;
  wire CH3_TXRESETDONE_out;
  wire CH3_TXSWING_M_out;
  wire CH3_TXSYNCALLIN_M_out;
  wire CH3_TXSYNCDONE_out;
  wire CH3_TXUSERRDY_M_out;
  wire CH3_TXUSRCLK_M_out;
  wire CORRECTERR_out;
  wire CSSDRSTB_M_out;
  wire CSSDSTOPCLKDONE_out;
  wire CSSDSTOPCLK_M_out;
  wire DEBUGTRACECLK_M_out;
  wire DEBUGTRACEREADY_M_out;
  wire DEBUGTRACETVALID_out;
  wire EDTUPDATEB_M_out;
  wire GTPOWERGOOD_out;
  wire HSCLK0_LCPLLCLKRSVD0_M_out;
  wire HSCLK0_LCPLLCLKRSVD1_M_out;
  wire HSCLK0_LCPLLFBCLKLOST_out;
  wire HSCLK0_LCPLLGTGREFCLK_M_out;
  wire HSCLK0_LCPLLLOCK_out;
  wire HSCLK0_LCPLLPD_M_out;
  wire HSCLK0_LCPLLREFCLKLOST_out;
  wire HSCLK0_LCPLLREFCLKMONITOR_out;
  wire HSCLK0_LCPLLRESETBYPASSMODE_M_out;
  wire HSCLK0_LCPLLRESET_M_out;
  wire HSCLK0_LCPLLSDMTOGGLE_M_out;
  wire HSCLK0_RPLLCLKRSVD0_M_out;
  wire HSCLK0_RPLLCLKRSVD1_M_out;
  wire HSCLK0_RPLLFBCLKLOST_out;
  wire HSCLK0_RPLLGTGREFCLK_M_out;
  wire HSCLK0_RPLLLOCK_out;
  wire HSCLK0_RPLLPD_M_out;
  wire HSCLK0_RPLLREFCLKLOST_out;
  wire HSCLK0_RPLLREFCLKMONITOR_out;
  wire HSCLK0_RPLLRESETBYPASSMODE_M_out;
  wire HSCLK0_RPLLRESET_M_out;
  wire HSCLK0_RPLLSDMTOGGLE_M_out;
  wire HSCLK1_LCPLLCLKRSVD0_M_out;
  wire HSCLK1_LCPLLCLKRSVD1_M_out;
  wire HSCLK1_LCPLLFBCLKLOST_out;
  wire HSCLK1_LCPLLGTGREFCLK_M_out;
  wire HSCLK1_LCPLLLOCK_out;
  wire HSCLK1_LCPLLPD_M_out;
  wire HSCLK1_LCPLLREFCLKLOST_out;
  wire HSCLK1_LCPLLREFCLKMONITOR_out;
  wire HSCLK1_LCPLLRESETBYPASSMODE_M_out;
  wire HSCLK1_LCPLLRESET_M_out;
  wire HSCLK1_LCPLLSDMTOGGLE_M_out;
  wire HSCLK1_RPLLCLKRSVD0_M_out;
  wire HSCLK1_RPLLCLKRSVD1_M_out;
  wire HSCLK1_RPLLFBCLKLOST_out;
  wire HSCLK1_RPLLGTGREFCLK_M_out;
  wire HSCLK1_RPLLLOCK_out;
  wire HSCLK1_RPLLPD_M_out;
  wire HSCLK1_RPLLREFCLKLOST_out;
  wire HSCLK1_RPLLREFCLKMONITOR_out;
  wire HSCLK1_RPLLRESETBYPASSMODE_M_out;
  wire HSCLK1_RPLLRESET_M_out;
  wire HSCLK1_RPLLSDMTOGGLE_M_out;
  wire M0_AXIS_TLAST_out;
  wire M0_AXIS_TREADY_M_out;
  wire M0_AXIS_TVALID_out;
  wire M1_AXIS_TLAST_out;
  wire M1_AXIS_TREADY_M_out;
  wire M1_AXIS_TVALID_out;
  wire M2_AXIS_TLAST_out;
  wire M2_AXIS_TREADY_M_out;
  wire M2_AXIS_TVALID_out;
  wire PCIELINKREACHTARGET_M_out;
  wire RCALCMP_out;
  wire RCALENB_M_out;
  wire REFCLK0_CLKTESTSIG_M_out;
  wire REFCLK0_GTREFCLKPD_M_out;
  wire REFCLK1_CLKTESTSIG_M_out;
  wire REFCLK1_GTREFCLKPD_M_out;
  wire RXMARGINCLK_M_out;
  wire RXMARGINREQACK_out;
  wire RXMARGINREQREQ_M_out;
  wire RXMARGINRESACK_M_out;
  wire RXMARGINRESREQ_out;
  wire S0_AXIS_TLAST_M_out;
  wire S0_AXIS_TREADY_out;
  wire S0_AXIS_TVALID_M_out;
  wire S1_AXIS_TLAST_M_out;
  wire S1_AXIS_TREADY_out;
  wire S1_AXIS_TVALID_M_out;
  wire S2_AXIS_TLAST_M_out;
  wire S2_AXIS_TREADY_out;
  wire S2_AXIS_TVALID_M_out;
  wire SCANCLKB_M_out;
  wire SCANCNTRLIN_M_out;
  wire SCANCNTRLOUT_out;
  wire SCANENB_M_out;
  wire SCANRSTB_M_out;
  wire TRIGACKIN0_out;
  wire TRIGACKOUT0_M_out;
  wire TRIGIN0_M_out;
  wire TRIGOUT0_out;
  wire TXOUTCLKDBG_NORTH_out;
  wire TXOUTCLKDBG_SOUTH_out;
  wire UBENABLE_M_out;
  wire UBINTERRUPT_out;
  wire UBIOLMBRST_M_out;
  wire UBMBRST_M_out;
  wire UBRXUART_M_out;
  wire UBTXUART_out;
  wire UNCORRECTERR_out;
  wire XPIPE_BUFGTCE_1_out;
  wire XPIPE_BUFGTCE_out;
  wire XPIPE_BUFGTRST_1_out;
  wire XPIPE_BUFGTRST_out;
  wire XPIPE_GT_OUTCLK_1_out;
  wire XPIPE_GT_OUTCLK_out;
  wire XPIPE_GT_PIPECLK_M_1_out;
  wire XPIPE_GT_PIPECLK_M_out;
  wire XPIPE_GT_RXOUTCLK_out;
  wire XPIPE_GT_RXUSRCLK_M_out;
  wire XPIPE_HSDP_RXDATAVALID_1_out;
  wire XPIPE_HSDP_RXDATAVALID_2_out;
  wire XPIPE_HSDP_RXDATAVALID_out;
  wire XPIPE_HSDP_RXGEARBOXSLIP_M_1_out;
  wire XPIPE_HSDP_RXGEARBOXSLIP_M_2_out;
  wire XPIPE_HSDP_RXGEARBOXSLIP_M_out;
  wire XPIPE_HSDP_RXHEADERVALID_1_out;
  wire XPIPE_HSDP_RXHEADERVALID_2_out;
  wire XPIPE_HSDP_RXHEADERVALID_out;
  wire XPIPE_HSDP_RXPCSRESET_M_1_out;
  wire XPIPE_HSDP_RXPCSRESET_M_2_out;
  wire XPIPE_HSDP_RXPCSRESET_M_out;
  wire XPIPE_HSDP_RXRESETDONE_1_out;
  wire XPIPE_HSDP_RXRESETDONE_2_out;
  wire XPIPE_HSDP_RXRESETDONE_out;
  wire XPIPE_HSDP_TXRESETDONE_1_out;
  wire XPIPE_HSDP_TXRESETDONE_2_out;
  wire XPIPE_HSDP_TXRESETDONE_out;
  wire XPIPE_PCIELINKREACHTARGET_M_1_out;
  wire XPIPE_PCIELINKREACHTARGET_M_out;
  wire XPIPE_PCIE_PERST_N_M_1_out;
  wire XPIPE_PCIE_PERST_N_M_out;
  wire XPIPE_PHYESMADAPTSAVE_M_1_out;
  wire XPIPE_PHYESMADAPTSAVE_M_out;
  wire XPIPE_PHYREADY_FR_BOT_M_out;
  wire XPIPE_PHYREADY_TO_BOT_out;
  wire XPIPE_PHY_READY_1_out;
  wire XPIPE_PHY_READY_out;
  wire XPIPE_PIPE_CH0_PHYSTATUS_out;
  wire XPIPE_PIPE_CH0_RXDATAVALID_out;
  wire XPIPE_PIPE_CH0_RXELECIDLE_out;
  wire XPIPE_PIPE_CH0_RXPOLARITY_M_out;
  wire XPIPE_PIPE_CH0_RXSTARTBLOCK_out;
  wire XPIPE_PIPE_CH0_RXTERMINATION_M_out;
  wire XPIPE_PIPE_CH0_RXVALID_out;
  wire XPIPE_PIPE_CH0_TXCOMPLIANCE_M_out;
  wire XPIPE_PIPE_CH0_TXDATAVALID_M_out;
  wire XPIPE_PIPE_CH0_TXDEEMPH_M_out;
  wire XPIPE_PIPE_CH0_TXDETECTRXLOOPBACK_M_out;
  wire XPIPE_PIPE_CH0_TXELECIDLE_M_out;
  wire XPIPE_PIPE_CH0_TXSTARTBLOCK_M_out;
  wire XPIPE_PIPE_CH0_TXSWING_M_out;
  wire XPIPE_PIPE_CH10_PHYSTATUS_out;
  wire XPIPE_PIPE_CH10_RXDATAVALID_out;
  wire XPIPE_PIPE_CH10_RXELECIDLE_out;
  wire XPIPE_PIPE_CH10_RXPOLARITY_M_out;
  wire XPIPE_PIPE_CH10_RXSTARTBLOCK_out;
  wire XPIPE_PIPE_CH10_RXTERMINATION_M_out;
  wire XPIPE_PIPE_CH10_RXVALID_out;
  wire XPIPE_PIPE_CH10_TXCOMPLIANCE_M_out;
  wire XPIPE_PIPE_CH10_TXDATAVALID_M_out;
  wire XPIPE_PIPE_CH10_TXDEEMPH_M_out;
  wire XPIPE_PIPE_CH10_TXDETECTRXLOOPBACK_M_out;
  wire XPIPE_PIPE_CH10_TXELECIDLE_M_out;
  wire XPIPE_PIPE_CH10_TXSTARTBLOCK_M_out;
  wire XPIPE_PIPE_CH10_TXSWING_M_out;
  wire XPIPE_PIPE_CH11_PHYSTATUS_out;
  wire XPIPE_PIPE_CH11_RXDATAVALID_out;
  wire XPIPE_PIPE_CH11_RXELECIDLE_out;
  wire XPIPE_PIPE_CH11_RXPOLARITY_M_out;
  wire XPIPE_PIPE_CH11_RXSTARTBLOCK_out;
  wire XPIPE_PIPE_CH11_RXTERMINATION_M_out;
  wire XPIPE_PIPE_CH11_RXVALID_out;
  wire XPIPE_PIPE_CH11_TXCOMPLIANCE_M_out;
  wire XPIPE_PIPE_CH11_TXDATAVALID_M_out;
  wire XPIPE_PIPE_CH11_TXDEEMPH_M_out;
  wire XPIPE_PIPE_CH11_TXDETECTRXLOOPBACK_M_out;
  wire XPIPE_PIPE_CH11_TXELECIDLE_M_out;
  wire XPIPE_PIPE_CH11_TXSTARTBLOCK_M_out;
  wire XPIPE_PIPE_CH11_TXSWING_M_out;
  wire XPIPE_PIPE_CH12_PHYSTATUS_out;
  wire XPIPE_PIPE_CH12_RXDATAVALID_out;
  wire XPIPE_PIPE_CH12_RXELECIDLE_out;
  wire XPIPE_PIPE_CH12_RXPOLARITY_M_out;
  wire XPIPE_PIPE_CH12_RXSTARTBLOCK_out;
  wire XPIPE_PIPE_CH12_RXTERMINATION_M_out;
  wire XPIPE_PIPE_CH12_RXVALID_out;
  wire XPIPE_PIPE_CH12_TXCOMPLIANCE_M_out;
  wire XPIPE_PIPE_CH12_TXDATAVALID_M_out;
  wire XPIPE_PIPE_CH12_TXDEEMPH_M_out;
  wire XPIPE_PIPE_CH12_TXDETECTRXLOOPBACK_M_out;
  wire XPIPE_PIPE_CH12_TXELECIDLE_M_out;
  wire XPIPE_PIPE_CH12_TXSTARTBLOCK_M_out;
  wire XPIPE_PIPE_CH12_TXSWING_M_out;
  wire XPIPE_PIPE_CH13_PHYSTATUS_out;
  wire XPIPE_PIPE_CH13_RXDATAVALID_out;
  wire XPIPE_PIPE_CH13_RXELECIDLE_out;
  wire XPIPE_PIPE_CH13_RXPOLARITY_M_out;
  wire XPIPE_PIPE_CH13_RXSTARTBLOCK_out;
  wire XPIPE_PIPE_CH13_RXTERMINATION_M_out;
  wire XPIPE_PIPE_CH13_RXVALID_out;
  wire XPIPE_PIPE_CH13_TXCOMPLIANCE_M_out;
  wire XPIPE_PIPE_CH13_TXDATAVALID_M_out;
  wire XPIPE_PIPE_CH13_TXDEEMPH_M_out;
  wire XPIPE_PIPE_CH13_TXDETECTRXLOOPBACK_M_out;
  wire XPIPE_PIPE_CH13_TXELECIDLE_M_out;
  wire XPIPE_PIPE_CH13_TXSTARTBLOCK_M_out;
  wire XPIPE_PIPE_CH13_TXSWING_M_out;
  wire XPIPE_PIPE_CH14_PHYSTATUS_out;
  wire XPIPE_PIPE_CH14_RXDATAVALID_out;
  wire XPIPE_PIPE_CH14_RXELECIDLE_out;
  wire XPIPE_PIPE_CH14_RXPOLARITY_M_out;
  wire XPIPE_PIPE_CH14_RXSTARTBLOCK_out;
  wire XPIPE_PIPE_CH14_RXTERMINATION_M_out;
  wire XPIPE_PIPE_CH14_RXVALID_out;
  wire XPIPE_PIPE_CH14_TXCOMPLIANCE_M_out;
  wire XPIPE_PIPE_CH14_TXDATAVALID_M_out;
  wire XPIPE_PIPE_CH14_TXDEEMPH_M_out;
  wire XPIPE_PIPE_CH14_TXDETECTRXLOOPBACK_M_out;
  wire XPIPE_PIPE_CH14_TXELECIDLE_M_out;
  wire XPIPE_PIPE_CH14_TXSTARTBLOCK_M_out;
  wire XPIPE_PIPE_CH14_TXSWING_M_out;
  wire XPIPE_PIPE_CH15_PHYSTATUS_out;
  wire XPIPE_PIPE_CH15_RXDATAVALID_out;
  wire XPIPE_PIPE_CH15_RXELECIDLE_out;
  wire XPIPE_PIPE_CH15_RXPOLARITY_M_out;
  wire XPIPE_PIPE_CH15_RXSTARTBLOCK_out;
  wire XPIPE_PIPE_CH15_RXTERMINATION_M_out;
  wire XPIPE_PIPE_CH15_RXVALID_out;
  wire XPIPE_PIPE_CH15_TXCOMPLIANCE_M_out;
  wire XPIPE_PIPE_CH15_TXDATAVALID_M_out;
  wire XPIPE_PIPE_CH15_TXDEEMPH_M_out;
  wire XPIPE_PIPE_CH15_TXDETECTRXLOOPBACK_M_out;
  wire XPIPE_PIPE_CH15_TXELECIDLE_M_out;
  wire XPIPE_PIPE_CH15_TXSTARTBLOCK_M_out;
  wire XPIPE_PIPE_CH15_TXSWING_M_out;
  wire XPIPE_PIPE_CH1_PHYSTATUS_out;
  wire XPIPE_PIPE_CH1_RXDATAVALID_out;
  wire XPIPE_PIPE_CH1_RXELECIDLE_out;
  wire XPIPE_PIPE_CH1_RXPOLARITY_M_out;
  wire XPIPE_PIPE_CH1_RXSTARTBLOCK_out;
  wire XPIPE_PIPE_CH1_RXTERMINATION_M_out;
  wire XPIPE_PIPE_CH1_RXVALID_out;
  wire XPIPE_PIPE_CH1_TXCOMPLIANCE_M_out;
  wire XPIPE_PIPE_CH1_TXDATAVALID_M_out;
  wire XPIPE_PIPE_CH1_TXDEEMPH_M_out;
  wire XPIPE_PIPE_CH1_TXDETECTRXLOOPBACK_M_out;
  wire XPIPE_PIPE_CH1_TXELECIDLE_M_out;
  wire XPIPE_PIPE_CH1_TXSTARTBLOCK_M_out;
  wire XPIPE_PIPE_CH1_TXSWING_M_out;
  wire XPIPE_PIPE_CH2_PHYSTATUS_out;
  wire XPIPE_PIPE_CH2_RXDATAVALID_out;
  wire XPIPE_PIPE_CH2_RXELECIDLE_out;
  wire XPIPE_PIPE_CH2_RXPOLARITY_M_out;
  wire XPIPE_PIPE_CH2_RXSTARTBLOCK_out;
  wire XPIPE_PIPE_CH2_RXTERMINATION_M_out;
  wire XPIPE_PIPE_CH2_RXVALID_out;
  wire XPIPE_PIPE_CH2_TXCOMPLIANCE_M_out;
  wire XPIPE_PIPE_CH2_TXDATAVALID_M_out;
  wire XPIPE_PIPE_CH2_TXDEEMPH_M_out;
  wire XPIPE_PIPE_CH2_TXDETECTRXLOOPBACK_M_out;
  wire XPIPE_PIPE_CH2_TXELECIDLE_M_out;
  wire XPIPE_PIPE_CH2_TXSTARTBLOCK_M_out;
  wire XPIPE_PIPE_CH2_TXSWING_M_out;
  wire XPIPE_PIPE_CH3_PHYSTATUS_out;
  wire XPIPE_PIPE_CH3_RXDATAVALID_out;
  wire XPIPE_PIPE_CH3_RXELECIDLE_out;
  wire XPIPE_PIPE_CH3_RXPOLARITY_M_out;
  wire XPIPE_PIPE_CH3_RXSTARTBLOCK_out;
  wire XPIPE_PIPE_CH3_RXTERMINATION_M_out;
  wire XPIPE_PIPE_CH3_RXVALID_out;
  wire XPIPE_PIPE_CH3_TXCOMPLIANCE_M_out;
  wire XPIPE_PIPE_CH3_TXDATAVALID_M_out;
  wire XPIPE_PIPE_CH3_TXDEEMPH_M_out;
  wire XPIPE_PIPE_CH3_TXDETECTRXLOOPBACK_M_out;
  wire XPIPE_PIPE_CH3_TXELECIDLE_M_out;
  wire XPIPE_PIPE_CH3_TXSTARTBLOCK_M_out;
  wire XPIPE_PIPE_CH3_TXSWING_M_out;
  wire XPIPE_PIPE_CH4_PHYSTATUS_out;
  wire XPIPE_PIPE_CH4_RXDATAVALID_out;
  wire XPIPE_PIPE_CH4_RXELECIDLE_out;
  wire XPIPE_PIPE_CH4_RXPOLARITY_M_out;
  wire XPIPE_PIPE_CH4_RXSTARTBLOCK_out;
  wire XPIPE_PIPE_CH4_RXTERMINATION_M_out;
  wire XPIPE_PIPE_CH4_RXVALID_out;
  wire XPIPE_PIPE_CH4_TXCOMPLIANCE_M_out;
  wire XPIPE_PIPE_CH4_TXDATAVALID_M_out;
  wire XPIPE_PIPE_CH4_TXDEEMPH_M_out;
  wire XPIPE_PIPE_CH4_TXDETECTRXLOOPBACK_M_out;
  wire XPIPE_PIPE_CH4_TXELECIDLE_M_out;
  wire XPIPE_PIPE_CH4_TXSTARTBLOCK_M_out;
  wire XPIPE_PIPE_CH4_TXSWING_M_out;
  wire XPIPE_PIPE_CH5_PHYSTATUS_out;
  wire XPIPE_PIPE_CH5_RXDATAVALID_out;
  wire XPIPE_PIPE_CH5_RXELECIDLE_out;
  wire XPIPE_PIPE_CH5_RXPOLARITY_M_out;
  wire XPIPE_PIPE_CH5_RXSTARTBLOCK_out;
  wire XPIPE_PIPE_CH5_RXTERMINATION_M_out;
  wire XPIPE_PIPE_CH5_RXVALID_out;
  wire XPIPE_PIPE_CH5_TXCOMPLIANCE_M_out;
  wire XPIPE_PIPE_CH5_TXDATAVALID_M_out;
  wire XPIPE_PIPE_CH5_TXDEEMPH_M_out;
  wire XPIPE_PIPE_CH5_TXDETECTRXLOOPBACK_M_out;
  wire XPIPE_PIPE_CH5_TXELECIDLE_M_out;
  wire XPIPE_PIPE_CH5_TXSTARTBLOCK_M_out;
  wire XPIPE_PIPE_CH5_TXSWING_M_out;
  wire XPIPE_PIPE_CH6_PHYSTATUS_out;
  wire XPIPE_PIPE_CH6_RXDATAVALID_out;
  wire XPIPE_PIPE_CH6_RXELECIDLE_out;
  wire XPIPE_PIPE_CH6_RXPOLARITY_M_out;
  wire XPIPE_PIPE_CH6_RXSTARTBLOCK_out;
  wire XPIPE_PIPE_CH6_RXTERMINATION_M_out;
  wire XPIPE_PIPE_CH6_RXVALID_out;
  wire XPIPE_PIPE_CH6_TXCOMPLIANCE_M_out;
  wire XPIPE_PIPE_CH6_TXDATAVALID_M_out;
  wire XPIPE_PIPE_CH6_TXDEEMPH_M_out;
  wire XPIPE_PIPE_CH6_TXDETECTRXLOOPBACK_M_out;
  wire XPIPE_PIPE_CH6_TXELECIDLE_M_out;
  wire XPIPE_PIPE_CH6_TXSTARTBLOCK_M_out;
  wire XPIPE_PIPE_CH6_TXSWING_M_out;
  wire XPIPE_PIPE_CH7_PHYSTATUS_out;
  wire XPIPE_PIPE_CH7_RXDATAVALID_out;
  wire XPIPE_PIPE_CH7_RXELECIDLE_out;
  wire XPIPE_PIPE_CH7_RXPOLARITY_M_out;
  wire XPIPE_PIPE_CH7_RXSTARTBLOCK_out;
  wire XPIPE_PIPE_CH7_RXTERMINATION_M_out;
  wire XPIPE_PIPE_CH7_RXVALID_out;
  wire XPIPE_PIPE_CH7_TXCOMPLIANCE_M_out;
  wire XPIPE_PIPE_CH7_TXDATAVALID_M_out;
  wire XPIPE_PIPE_CH7_TXDEEMPH_M_out;
  wire XPIPE_PIPE_CH7_TXDETECTRXLOOPBACK_M_out;
  wire XPIPE_PIPE_CH7_TXELECIDLE_M_out;
  wire XPIPE_PIPE_CH7_TXSTARTBLOCK_M_out;
  wire XPIPE_PIPE_CH7_TXSWING_M_out;
  wire XPIPE_PIPE_CH8_PHYSTATUS_out;
  wire XPIPE_PIPE_CH8_RXDATAVALID_out;
  wire XPIPE_PIPE_CH8_RXELECIDLE_out;
  wire XPIPE_PIPE_CH8_RXPOLARITY_M_out;
  wire XPIPE_PIPE_CH8_RXSTARTBLOCK_out;
  wire XPIPE_PIPE_CH8_RXTERMINATION_M_out;
  wire XPIPE_PIPE_CH8_RXVALID_out;
  wire XPIPE_PIPE_CH8_TXCOMPLIANCE_M_out;
  wire XPIPE_PIPE_CH8_TXDATAVALID_M_out;
  wire XPIPE_PIPE_CH8_TXDEEMPH_M_out;
  wire XPIPE_PIPE_CH8_TXDETECTRXLOOPBACK_M_out;
  wire XPIPE_PIPE_CH8_TXELECIDLE_M_out;
  wire XPIPE_PIPE_CH8_TXSTARTBLOCK_M_out;
  wire XPIPE_PIPE_CH8_TXSWING_M_out;
  wire XPIPE_PIPE_CH9_PHYSTATUS_out;
  wire XPIPE_PIPE_CH9_RXDATAVALID_out;
  wire XPIPE_PIPE_CH9_RXELECIDLE_out;
  wire XPIPE_PIPE_CH9_RXPOLARITY_M_out;
  wire XPIPE_PIPE_CH9_RXSTARTBLOCK_out;
  wire XPIPE_PIPE_CH9_RXTERMINATION_M_out;
  wire XPIPE_PIPE_CH9_RXVALID_out;
  wire XPIPE_PIPE_CH9_TXCOMPLIANCE_M_out;
  wire XPIPE_PIPE_CH9_TXDATAVALID_M_out;
  wire XPIPE_PIPE_CH9_TXDEEMPH_M_out;
  wire XPIPE_PIPE_CH9_TXDETECTRXLOOPBACK_M_out;
  wire XPIPE_PIPE_CH9_TXELECIDLE_M_out;
  wire XPIPE_PIPE_CH9_TXSTARTBLOCK_M_out;
  wire XPIPE_PIPE_CH9_TXSWING_M_out;
  wire XPIPE_RXMARGINREQACK_1_out;
  wire XPIPE_RXMARGINREQACK_2_out;
  wire XPIPE_RXMARGINREQACK_3_out;
  wire XPIPE_RXMARGINREQACK_out;
  wire XPIPE_RXMARGINREQREQ_M_1_out;
  wire XPIPE_RXMARGINREQREQ_M_2_out;
  wire XPIPE_RXMARGINREQREQ_M_3_out;
  wire XPIPE_RXMARGINREQREQ_M_out;
  wire XPIPE_RXMARGINRESACK_M_1_out;
  wire XPIPE_RXMARGINRESACK_M_2_out;
  wire XPIPE_RXMARGINRESACK_M_3_out;
  wire XPIPE_RXMARGINRESACK_M_out;
  wire XPIPE_RXMARGINRESREQ_1_out;
  wire XPIPE_RXMARGINRESREQ_2_out;
  wire XPIPE_RXMARGINRESREQ_3_out;
  wire XPIPE_RXMARGINRESREQ_out;
  wire XPSCANCLK_M_out;
  wire XPSCANENB_M_out;
  wire XPSCANMODEB_M_out;
  wire XPSCANRSTB_M_out;
  wire [11:0] CH0_BUFGTDIV_out;
  wire [11:0] CH1_BUFGTDIV_out;
  wire [11:0] CH2_BUFGTDIV_out;
  wire [11:0] CH3_BUFGTDIV_out;
  wire [11:0] UBINTR_M_out;
  wire [11:0] XPIPE_BUFGTDIV_1_out;
  wire [11:0] XPIPE_BUFGTDIV_out;
  wire [127:0] CH0_RXDATA_out;
  wire [127:0] CH0_TXDATA_M_out;
  wire [127:0] CH1_RXDATA_out;
  wire [127:0] CH1_TXDATA_M_out;
  wire [127:0] CH2_RXDATA_out;
  wire [127:0] CH2_TXDATA_M_out;
  wire [127:0] CH3_RXDATA_out;
  wire [127:0] CH3_TXDATA_M_out;
  wire [13:0] CTRLRSVDIN1_M_out;
  wire [15:0] APB3PADDR_M_out;
  wire [15:0] CH0_GTRSVD_M_out;
  wire [15:0] CH0_PCSRSVDIN_M_out;
  wire [15:0] CH0_PCSRSVDOUT_out;
  wire [15:0] CH0_PINRSVDAS_out;
  wire [15:0] CH0_RXCTRL0_out;
  wire [15:0] CH0_RXCTRL1_out;
  wire [15:0] CH0_TXCTRL0_M_out;
  wire [15:0] CH0_TXCTRL1_M_out;
  wire [15:0] CH1_GTRSVD_M_out;
  wire [15:0] CH1_PCSRSVDIN_M_out;
  wire [15:0] CH1_PCSRSVDOUT_out;
  wire [15:0] CH1_PINRSVDAS_out;
  wire [15:0] CH1_RXCTRL0_out;
  wire [15:0] CH1_RXCTRL1_out;
  wire [15:0] CH1_TXCTRL0_M_out;
  wire [15:0] CH1_TXCTRL1_M_out;
  wire [15:0] CH2_GTRSVD_M_out;
  wire [15:0] CH2_PCSRSVDIN_M_out;
  wire [15:0] CH2_PCSRSVDOUT_out;
  wire [15:0] CH2_PINRSVDAS_out;
  wire [15:0] CH2_RXCTRL0_out;
  wire [15:0] CH2_RXCTRL1_out;
  wire [15:0] CH2_TXCTRL0_M_out;
  wire [15:0] CH2_TXCTRL1_M_out;
  wire [15:0] CH3_GTRSVD_M_out;
  wire [15:0] CH3_PCSRSVDIN_M_out;
  wire [15:0] CH3_PCSRSVDOUT_out;
  wire [15:0] CH3_PINRSVDAS_out;
  wire [15:0] CH3_RXCTRL0_out;
  wire [15:0] CH3_RXCTRL1_out;
  wire [15:0] CH3_TXCTRL0_M_out;
  wire [15:0] CH3_TXCTRL1_M_out;
  wire [15:0] CTRLRSVDIN0_M_out;
  wire [15:0] DEBUGTRACETDATA_out;
  wire [15:0] GPI_M_out;
  wire [15:0] GPO_out;
  wire [15:0] XPSCANIN_M_out;
  wire [15:0] XPSCANOUT_out;
  wire [19:0] CH0_TSTIN_M_out;
  wire [19:0] CH1_TSTIN_M_out;
  wire [19:0] CH2_TSTIN_M_out;
  wire [19:0] CH3_TSTIN_M_out;
  wire [1:0] CH0_RXCLKCORCNT_out;
  wire [1:0] CH0_RXDATAVALID_out;
  wire [1:0] CH0_RXHEADERVALID_out;
  wire [1:0] CH0_RXPD_M_out;
  wire [1:0] CH0_RXPHALIGNRESETMASK_M_out;
  wire [1:0] CH0_RXRESETMODE_M_out;
  wire [1:0] CH0_RXSTARTOFSEQ_out;
  wire [1:0] CH0_TXBUFSTATUS_out;
  wire [1:0] CH0_TXDEEMPH_M_out;
  wire [1:0] CH0_TXPD_M_out;
  wire [1:0] CH0_TXPHALIGNRESETMASK_M_out;
  wire [1:0] CH0_TXRESETMODE_M_out;
  wire [1:0] CH1_RXCLKCORCNT_out;
  wire [1:0] CH1_RXDATAVALID_out;
  wire [1:0] CH1_RXHEADERVALID_out;
  wire [1:0] CH1_RXPD_M_out;
  wire [1:0] CH1_RXPHALIGNRESETMASK_M_out;
  wire [1:0] CH1_RXRESETMODE_M_out;
  wire [1:0] CH1_RXSTARTOFSEQ_out;
  wire [1:0] CH1_TXBUFSTATUS_out;
  wire [1:0] CH1_TXDEEMPH_M_out;
  wire [1:0] CH1_TXPD_M_out;
  wire [1:0] CH1_TXPHALIGNRESETMASK_M_out;
  wire [1:0] CH1_TXRESETMODE_M_out;
  wire [1:0] CH2_RXCLKCORCNT_out;
  wire [1:0] CH2_RXDATAVALID_out;
  wire [1:0] CH2_RXHEADERVALID_out;
  wire [1:0] CH2_RXPD_M_out;
  wire [1:0] CH2_RXPHALIGNRESETMASK_M_out;
  wire [1:0] CH2_RXRESETMODE_M_out;
  wire [1:0] CH2_RXSTARTOFSEQ_out;
  wire [1:0] CH2_TXBUFSTATUS_out;
  wire [1:0] CH2_TXDEEMPH_M_out;
  wire [1:0] CH2_TXPD_M_out;
  wire [1:0] CH2_TXPHALIGNRESETMASK_M_out;
  wire [1:0] CH2_TXRESETMODE_M_out;
  wire [1:0] CH3_RXCLKCORCNT_out;
  wire [1:0] CH3_RXDATAVALID_out;
  wire [1:0] CH3_RXHEADERVALID_out;
  wire [1:0] CH3_RXPD_M_out;
  wire [1:0] CH3_RXPHALIGNRESETMASK_M_out;
  wire [1:0] CH3_RXRESETMODE_M_out;
  wire [1:0] CH3_RXSTARTOFSEQ_out;
  wire [1:0] CH3_TXBUFSTATUS_out;
  wire [1:0] CH3_TXDEEMPH_M_out;
  wire [1:0] CH3_TXPD_M_out;
  wire [1:0] CH3_TXPHALIGNRESETMASK_M_out;
  wire [1:0] CH3_TXRESETMODE_M_out;
  wire [1:0] HSCLK0_LCPLLRESETMASK_M_out;
  wire [1:0] HSCLK0_RPLLRESETMASK_M_out;
  wire [1:0] HSCLK1_LCPLLRESETMASK_M_out;
  wire [1:0] HSCLK1_RPLLRESETMASK_M_out;
  wire [1:0] RXMARGINREQLANENUM_M_out;
  wire [1:0] RXMARGINRESLANENUM_out;
  wire [1:0] XPIPE_HSDP_RXHEADER_1_out;
  wire [1:0] XPIPE_HSDP_RXHEADER_2_out;
  wire [1:0] XPIPE_HSDP_RXHEADER_out;
  wire [1:0] XPIPE_HSDP_TXHEADER_M_1_out;
  wire [1:0] XPIPE_HSDP_TXHEADER_M_2_out;
  wire [1:0] XPIPE_HSDP_TXHEADER_M_out;
  wire [1:0] XPIPE_PIPE_CH0_POWERDOWN_M_out;
  wire [1:0] XPIPE_PIPE_CH0_RXCHARISK_out;
  wire [1:0] XPIPE_PIPE_CH0_RXSYNCHEADER_out;
  wire [1:0] XPIPE_PIPE_CH0_TXCHARISK_M_out;
  wire [1:0] XPIPE_PIPE_CH0_TXSYNCHEADER_M_out;
  wire [1:0] XPIPE_PIPE_CH10_POWERDOWN_M_out;
  wire [1:0] XPIPE_PIPE_CH10_RXCHARISK_out;
  wire [1:0] XPIPE_PIPE_CH10_RXSYNCHEADER_out;
  wire [1:0] XPIPE_PIPE_CH10_TXCHARISK_M_out;
  wire [1:0] XPIPE_PIPE_CH10_TXSYNCHEADER_M_out;
  wire [1:0] XPIPE_PIPE_CH11_POWERDOWN_M_out;
  wire [1:0] XPIPE_PIPE_CH11_RXCHARISK_out;
  wire [1:0] XPIPE_PIPE_CH11_RXSYNCHEADER_out;
  wire [1:0] XPIPE_PIPE_CH11_TXCHARISK_M_out;
  wire [1:0] XPIPE_PIPE_CH11_TXSYNCHEADER_M_out;
  wire [1:0] XPIPE_PIPE_CH12_POWERDOWN_M_out;
  wire [1:0] XPIPE_PIPE_CH12_RXCHARISK_out;
  wire [1:0] XPIPE_PIPE_CH12_RXSYNCHEADER_out;
  wire [1:0] XPIPE_PIPE_CH12_TXCHARISK_M_out;
  wire [1:0] XPIPE_PIPE_CH12_TXSYNCHEADER_M_out;
  wire [1:0] XPIPE_PIPE_CH13_POWERDOWN_M_out;
  wire [1:0] XPIPE_PIPE_CH13_RXCHARISK_out;
  wire [1:0] XPIPE_PIPE_CH13_RXSYNCHEADER_out;
  wire [1:0] XPIPE_PIPE_CH13_TXCHARISK_M_out;
  wire [1:0] XPIPE_PIPE_CH13_TXSYNCHEADER_M_out;
  wire [1:0] XPIPE_PIPE_CH14_POWERDOWN_M_out;
  wire [1:0] XPIPE_PIPE_CH14_RXCHARISK_out;
  wire [1:0] XPIPE_PIPE_CH14_RXSYNCHEADER_out;
  wire [1:0] XPIPE_PIPE_CH14_TXCHARISK_M_out;
  wire [1:0] XPIPE_PIPE_CH14_TXSYNCHEADER_M_out;
  wire [1:0] XPIPE_PIPE_CH15_POWERDOWN_M_out;
  wire [1:0] XPIPE_PIPE_CH15_RXCHARISK_out;
  wire [1:0] XPIPE_PIPE_CH15_RXSYNCHEADER_out;
  wire [1:0] XPIPE_PIPE_CH15_TXCHARISK_M_out;
  wire [1:0] XPIPE_PIPE_CH15_TXSYNCHEADER_M_out;
  wire [1:0] XPIPE_PIPE_CH1_POWERDOWN_M_out;
  wire [1:0] XPIPE_PIPE_CH1_RXCHARISK_out;
  wire [1:0] XPIPE_PIPE_CH1_RXSYNCHEADER_out;
  wire [1:0] XPIPE_PIPE_CH1_TXCHARISK_M_out;
  wire [1:0] XPIPE_PIPE_CH1_TXSYNCHEADER_M_out;
  wire [1:0] XPIPE_PIPE_CH2_POWERDOWN_M_out;
  wire [1:0] XPIPE_PIPE_CH2_RXCHARISK_out;
  wire [1:0] XPIPE_PIPE_CH2_RXSYNCHEADER_out;
  wire [1:0] XPIPE_PIPE_CH2_TXCHARISK_M_out;
  wire [1:0] XPIPE_PIPE_CH2_TXSYNCHEADER_M_out;
  wire [1:0] XPIPE_PIPE_CH3_POWERDOWN_M_out;
  wire [1:0] XPIPE_PIPE_CH3_RXCHARISK_out;
  wire [1:0] XPIPE_PIPE_CH3_RXSYNCHEADER_out;
  wire [1:0] XPIPE_PIPE_CH3_TXCHARISK_M_out;
  wire [1:0] XPIPE_PIPE_CH3_TXSYNCHEADER_M_out;
  wire [1:0] XPIPE_PIPE_CH4_POWERDOWN_M_out;
  wire [1:0] XPIPE_PIPE_CH4_RXCHARISK_out;
  wire [1:0] XPIPE_PIPE_CH4_RXSYNCHEADER_out;
  wire [1:0] XPIPE_PIPE_CH4_TXCHARISK_M_out;
  wire [1:0] XPIPE_PIPE_CH4_TXSYNCHEADER_M_out;
  wire [1:0] XPIPE_PIPE_CH5_POWERDOWN_M_out;
  wire [1:0] XPIPE_PIPE_CH5_RXCHARISK_out;
  wire [1:0] XPIPE_PIPE_CH5_RXSYNCHEADER_out;
  wire [1:0] XPIPE_PIPE_CH5_TXCHARISK_M_out;
  wire [1:0] XPIPE_PIPE_CH5_TXSYNCHEADER_M_out;
  wire [1:0] XPIPE_PIPE_CH6_POWERDOWN_M_out;
  wire [1:0] XPIPE_PIPE_CH6_RXCHARISK_out;
  wire [1:0] XPIPE_PIPE_CH6_RXSYNCHEADER_out;
  wire [1:0] XPIPE_PIPE_CH6_TXCHARISK_M_out;
  wire [1:0] XPIPE_PIPE_CH6_TXSYNCHEADER_M_out;
  wire [1:0] XPIPE_PIPE_CH7_POWERDOWN_M_out;
  wire [1:0] XPIPE_PIPE_CH7_RXCHARISK_out;
  wire [1:0] XPIPE_PIPE_CH7_RXSYNCHEADER_out;
  wire [1:0] XPIPE_PIPE_CH7_TXCHARISK_M_out;
  wire [1:0] XPIPE_PIPE_CH7_TXSYNCHEADER_M_out;
  wire [1:0] XPIPE_PIPE_CH8_POWERDOWN_M_out;
  wire [1:0] XPIPE_PIPE_CH8_RXCHARISK_out;
  wire [1:0] XPIPE_PIPE_CH8_RXSYNCHEADER_out;
  wire [1:0] XPIPE_PIPE_CH8_TXCHARISK_M_out;
  wire [1:0] XPIPE_PIPE_CH8_TXSYNCHEADER_M_out;
  wire [1:0] XPIPE_PIPE_CH9_POWERDOWN_M_out;
  wire [1:0] XPIPE_PIPE_CH9_RXCHARISK_out;
  wire [1:0] XPIPE_PIPE_CH9_RXSYNCHEADER_out;
  wire [1:0] XPIPE_PIPE_CH9_TXCHARISK_M_out;
  wire [1:0] XPIPE_PIPE_CH9_TXSYNCHEADER_M_out;
  wire [1:0] XPIPE_RXMARGINREQLANENUM_M_1_out;
  wire [1:0] XPIPE_RXMARGINREQLANENUM_M_2_out;
  wire [1:0] XPIPE_RXMARGINREQLANENUM_M_3_out;
  wire [1:0] XPIPE_RXMARGINREQLANENUM_M_out;
  wire [1:0] XPIPE_RXMARGINRESLANENUM_1_out;
  wire [1:0] XPIPE_RXMARGINRESLANENUM_2_out;
  wire [1:0] XPIPE_RXMARGINRESLANENUM_3_out;
  wire [1:0] XPIPE_RXMARGINRESLANENUM_out;
  wire [25:0] HSCLK0_LCPLLSDMDATA_M_out;
  wire [25:0] HSCLK0_RPLLSDMDATA_M_out;
  wire [25:0] HSCLK1_LCPLLSDMDATA_M_out;
  wire [25:0] HSCLK1_RPLLSDMDATA_M_out;
  wire [2:0] CH0_LOOPBACK_M_out;
  wire [2:0] CH0_RXBUFSTATUS_out;
  wire [2:0] CH0_RXSTATUS_out;
  wire [2:0] CH0_TXMARGIN_M_out;
  wire [2:0] CH0_TXPMARESETMASK_M_out;
  wire [2:0] CH1_LOOPBACK_M_out;
  wire [2:0] CH1_RXBUFSTATUS_out;
  wire [2:0] CH1_RXSTATUS_out;
  wire [2:0] CH1_TXMARGIN_M_out;
  wire [2:0] CH1_TXPMARESETMASK_M_out;
  wire [2:0] CH2_LOOPBACK_M_out;
  wire [2:0] CH2_RXBUFSTATUS_out;
  wire [2:0] CH2_RXSTATUS_out;
  wire [2:0] CH2_TXMARGIN_M_out;
  wire [2:0] CH2_TXPMARESETMASK_M_out;
  wire [2:0] CH3_LOOPBACK_M_out;
  wire [2:0] CH3_RXBUFSTATUS_out;
  wire [2:0] CH3_RXSTATUS_out;
  wire [2:0] CH3_TXMARGIN_M_out;
  wire [2:0] CH3_TXPMARESETMASK_M_out;
  wire [2:0] HSCLK0_LCPLLREFCLKSEL_M_out;
  wire [2:0] HSCLK0_RPLLREFCLKSEL_M_out;
  wire [2:0] HSCLK1_LCPLLREFCLKSEL_M_out;
  wire [2:0] HSCLK1_RPLLREFCLKSEL_M_out;
  wire [2:0] XPIPE_PCIE_RATE_M_1_out;
  wire [2:0] XPIPE_PCIE_RATE_M_out;
  wire [2:0] XPIPE_PIPE_CH0_RXSTATUS_out;
  wire [2:0] XPIPE_PIPE_CH0_TXMARGIN_M_out;
  wire [2:0] XPIPE_PIPE_CH10_RXSTATUS_out;
  wire [2:0] XPIPE_PIPE_CH10_TXMARGIN_M_out;
  wire [2:0] XPIPE_PIPE_CH11_RXSTATUS_out;
  wire [2:0] XPIPE_PIPE_CH11_TXMARGIN_M_out;
  wire [2:0] XPIPE_PIPE_CH12_RXSTATUS_out;
  wire [2:0] XPIPE_PIPE_CH12_TXMARGIN_M_out;
  wire [2:0] XPIPE_PIPE_CH13_RXSTATUS_out;
  wire [2:0] XPIPE_PIPE_CH13_TXMARGIN_M_out;
  wire [2:0] XPIPE_PIPE_CH14_RXSTATUS_out;
  wire [2:0] XPIPE_PIPE_CH14_TXMARGIN_M_out;
  wire [2:0] XPIPE_PIPE_CH15_RXSTATUS_out;
  wire [2:0] XPIPE_PIPE_CH15_TXMARGIN_M_out;
  wire [2:0] XPIPE_PIPE_CH1_RXSTATUS_out;
  wire [2:0] XPIPE_PIPE_CH1_TXMARGIN_M_out;
  wire [2:0] XPIPE_PIPE_CH2_RXSTATUS_out;
  wire [2:0] XPIPE_PIPE_CH2_TXMARGIN_M_out;
  wire [2:0] XPIPE_PIPE_CH3_RXSTATUS_out;
  wire [2:0] XPIPE_PIPE_CH3_TXMARGIN_M_out;
  wire [2:0] XPIPE_PIPE_CH4_RXSTATUS_out;
  wire [2:0] XPIPE_PIPE_CH4_TXMARGIN_M_out;
  wire [2:0] XPIPE_PIPE_CH5_RXSTATUS_out;
  wire [2:0] XPIPE_PIPE_CH5_TXMARGIN_M_out;
  wire [2:0] XPIPE_PIPE_CH6_RXSTATUS_out;
  wire [2:0] XPIPE_PIPE_CH6_TXMARGIN_M_out;
  wire [2:0] XPIPE_PIPE_CH7_RXSTATUS_out;
  wire [2:0] XPIPE_PIPE_CH7_TXMARGIN_M_out;
  wire [2:0] XPIPE_PIPE_CH8_RXSTATUS_out;
  wire [2:0] XPIPE_PIPE_CH8_TXMARGIN_M_out;
  wire [2:0] XPIPE_PIPE_CH9_RXSTATUS_out;
  wire [2:0] XPIPE_PIPE_CH9_TXMARGIN_M_out;
  wire [31:0] APB3PRDATA_out;
  wire [31:0] APB3PWDATA_M_out;
  wire [31:0] CH0_DMONITOROUT_out;
  wire [31:0] CH1_DMONITOROUT_out;
  wire [31:0] CH2_DMONITOROUT_out;
  wire [31:0] CH3_DMONITOROUT_out;
  wire [31:0] CTRLRSVDOUT_out;
  wire [31:0] M0_AXIS_TDATA_out;
  wire [31:0] M1_AXIS_TDATA_out;
  wire [31:0] M2_AXIS_TDATA_out;
  wire [31:0] S0_AXIS_TDATA_M_out;
  wire [31:0] S1_AXIS_TDATA_M_out;
  wire [31:0] S2_AXIS_TDATA_M_out;
  wire [31:0] XPIPE_PIPE_CH0_RXDATA_out;
  wire [31:0] XPIPE_PIPE_CH0_TXDATA_M_out;
  wire [31:0] XPIPE_PIPE_CH10_RXDATA_out;
  wire [31:0] XPIPE_PIPE_CH10_TXDATA_M_out;
  wire [31:0] XPIPE_PIPE_CH11_RXDATA_out;
  wire [31:0] XPIPE_PIPE_CH11_TXDATA_M_out;
  wire [31:0] XPIPE_PIPE_CH12_RXDATA_out;
  wire [31:0] XPIPE_PIPE_CH12_TXDATA_M_out;
  wire [31:0] XPIPE_PIPE_CH13_RXDATA_out;
  wire [31:0] XPIPE_PIPE_CH13_TXDATA_M_out;
  wire [31:0] XPIPE_PIPE_CH14_RXDATA_out;
  wire [31:0] XPIPE_PIPE_CH14_TXDATA_M_out;
  wire [31:0] XPIPE_PIPE_CH15_RXDATA_out;
  wire [31:0] XPIPE_PIPE_CH15_TXDATA_M_out;
  wire [31:0] XPIPE_PIPE_CH1_RXDATA_out;
  wire [31:0] XPIPE_PIPE_CH1_TXDATA_M_out;
  wire [31:0] XPIPE_PIPE_CH2_RXDATA_out;
  wire [31:0] XPIPE_PIPE_CH2_TXDATA_M_out;
  wire [31:0] XPIPE_PIPE_CH3_RXDATA_out;
  wire [31:0] XPIPE_PIPE_CH3_TXDATA_M_out;
  wire [31:0] XPIPE_PIPE_CH4_RXDATA_out;
  wire [31:0] XPIPE_PIPE_CH4_TXDATA_M_out;
  wire [31:0] XPIPE_PIPE_CH5_RXDATA_out;
  wire [31:0] XPIPE_PIPE_CH5_TXDATA_M_out;
  wire [31:0] XPIPE_PIPE_CH6_RXDATA_out;
  wire [31:0] XPIPE_PIPE_CH6_TXDATA_M_out;
  wire [31:0] XPIPE_PIPE_CH7_RXDATA_out;
  wire [31:0] XPIPE_PIPE_CH7_TXDATA_M_out;
  wire [31:0] XPIPE_PIPE_CH8_RXDATA_out;
  wire [31:0] XPIPE_PIPE_CH8_TXDATA_M_out;
  wire [31:0] XPIPE_PIPE_CH9_RXDATA_out;
  wire [31:0] XPIPE_PIPE_CH9_TXDATA_M_out;
  wire [3:0] CH0_BUFGTCEMASK_out;
  wire [3:0] CH0_BUFGTRSTMASK_out;
  wire [3:0] CH0_RXPRBSSEL_M_out;
  wire [3:0] CH0_SCANIN_M_out;
  wire [3:0] CH0_SCANOUT_out;
  wire [3:0] CH0_TXPRBSSEL_M_out;
  wire [3:0] CH1_BUFGTCEMASK_out;
  wire [3:0] CH1_BUFGTRSTMASK_out;
  wire [3:0] CH1_RXPRBSSEL_M_out;
  wire [3:0] CH1_SCANIN_M_out;
  wire [3:0] CH1_SCANOUT_out;
  wire [3:0] CH1_TXPRBSSEL_M_out;
  wire [3:0] CH2_BUFGTCEMASK_out;
  wire [3:0] CH2_BUFGTRSTMASK_out;
  wire [3:0] CH2_RXPRBSSEL_M_out;
  wire [3:0] CH2_SCANIN_M_out;
  wire [3:0] CH2_SCANOUT_out;
  wire [3:0] CH2_TXPRBSSEL_M_out;
  wire [3:0] CH3_BUFGTCEMASK_out;
  wire [3:0] CH3_BUFGTRSTMASK_out;
  wire [3:0] CH3_RXPRBSSEL_M_out;
  wire [3:0] CH3_SCANIN_M_out;
  wire [3:0] CH3_SCANOUT_out;
  wire [3:0] CH3_TXPRBSSEL_M_out;
  wire [3:0] MSTRXRESETDONE_out;
  wire [3:0] MSTRXRESET_M_out;
  wire [3:0] MSTTXRESETDONE_out;
  wire [3:0] MSTTXRESET_M_out;
  wire [3:0] RXMARGINREQCMD_M_out;
  wire [3:0] RXMARGINRESCMD_out;
  wire [3:0] SCANIN_M_out;
  wire [3:0] SCANOUT_out;
  wire [3:0] XPIPE_BUFGTCE_MASK_1_out;
  wire [3:0] XPIPE_BUFGTCE_MASK_out;
  wire [3:0] XPIPE_BUFGTRST_MASK_1_out;
  wire [3:0] XPIPE_BUFGTRST_MASK_out;
  wire [3:0] XPIPE_RXMARGINREQCMD_M_1_out;
  wire [3:0] XPIPE_RXMARGINREQCMD_M_2_out;
  wire [3:0] XPIPE_RXMARGINREQCMD_M_3_out;
  wire [3:0] XPIPE_RXMARGINREQCMD_M_out;
  wire [3:0] XPIPE_RXMARGINRESCMD_1_out;
  wire [3:0] XPIPE_RXMARGINRESCMD_2_out;
  wire [3:0] XPIPE_RXMARGINRESCMD_3_out;
  wire [3:0] XPIPE_RXMARGINRESCMD_out;
  wire [4:0] BGRCALOVRD_M_out;
  wire [4:0] CH0_RXCHBONDI_M_out;
  wire [4:0] CH0_RXCHBONDO_out;
  wire [4:0] CH0_RXPCSRESETMASK_M_out;
  wire [4:0] CH0_TXDIFFCTRL_M_out;
  wire [4:0] CH0_TXPIPPMSTEPSIZE_M_out;
  wire [4:0] CH0_TXPOSTCURSOR_M_out;
  wire [4:0] CH0_TXPRECURSOR_M_out;
  wire [4:0] CH1_RXCHBONDI_M_out;
  wire [4:0] CH1_RXCHBONDO_out;
  wire [4:0] CH1_RXPCSRESETMASK_M_out;
  wire [4:0] CH1_TXDIFFCTRL_M_out;
  wire [4:0] CH1_TXPIPPMSTEPSIZE_M_out;
  wire [4:0] CH1_TXPOSTCURSOR_M_out;
  wire [4:0] CH1_TXPRECURSOR_M_out;
  wire [4:0] CH2_RXCHBONDI_M_out;
  wire [4:0] CH2_RXCHBONDO_out;
  wire [4:0] CH2_RXPCSRESETMASK_M_out;
  wire [4:0] CH2_TXDIFFCTRL_M_out;
  wire [4:0] CH2_TXPIPPMSTEPSIZE_M_out;
  wire [4:0] CH2_TXPOSTCURSOR_M_out;
  wire [4:0] CH2_TXPRECURSOR_M_out;
  wire [4:0] CH3_RXCHBONDI_M_out;
  wire [4:0] CH3_RXCHBONDO_out;
  wire [4:0] CH3_RXPCSRESETMASK_M_out;
  wire [4:0] CH3_TXDIFFCTRL_M_out;
  wire [4:0] CH3_TXPIPPMSTEPSIZE_M_out;
  wire [4:0] CH3_TXPOSTCURSOR_M_out;
  wire [4:0] CH3_TXPRECURSOR_M_out;
  wire [4:0] RCALOUT_out;
  wire [4:0] XPIPE_PIPE_CH0_TXPOSTCURSOR_M_out;
  wire [4:0] XPIPE_PIPE_CH0_TXPRECURSOR_M_out;
  wire [4:0] XPIPE_PIPE_CH10_TXPOSTCURSOR_M_out;
  wire [4:0] XPIPE_PIPE_CH10_TXPRECURSOR_M_out;
  wire [4:0] XPIPE_PIPE_CH11_TXPOSTCURSOR_M_out;
  wire [4:0] XPIPE_PIPE_CH11_TXPRECURSOR_M_out;
  wire [4:0] XPIPE_PIPE_CH12_TXPOSTCURSOR_M_out;
  wire [4:0] XPIPE_PIPE_CH12_TXPRECURSOR_M_out;
  wire [4:0] XPIPE_PIPE_CH13_TXPOSTCURSOR_M_out;
  wire [4:0] XPIPE_PIPE_CH13_TXPRECURSOR_M_out;
  wire [4:0] XPIPE_PIPE_CH14_TXPOSTCURSOR_M_out;
  wire [4:0] XPIPE_PIPE_CH14_TXPRECURSOR_M_out;
  wire [4:0] XPIPE_PIPE_CH15_TXPOSTCURSOR_M_out;
  wire [4:0] XPIPE_PIPE_CH15_TXPRECURSOR_M_out;
  wire [4:0] XPIPE_PIPE_CH1_TXPOSTCURSOR_M_out;
  wire [4:0] XPIPE_PIPE_CH1_TXPRECURSOR_M_out;
  wire [4:0] XPIPE_PIPE_CH2_TXPOSTCURSOR_M_out;
  wire [4:0] XPIPE_PIPE_CH2_TXPRECURSOR_M_out;
  wire [4:0] XPIPE_PIPE_CH3_TXPOSTCURSOR_M_out;
  wire [4:0] XPIPE_PIPE_CH3_TXPRECURSOR_M_out;
  wire [4:0] XPIPE_PIPE_CH4_TXPOSTCURSOR_M_out;
  wire [4:0] XPIPE_PIPE_CH4_TXPRECURSOR_M_out;
  wire [4:0] XPIPE_PIPE_CH5_TXPOSTCURSOR_M_out;
  wire [4:0] XPIPE_PIPE_CH5_TXPRECURSOR_M_out;
  wire [4:0] XPIPE_PIPE_CH6_TXPOSTCURSOR_M_out;
  wire [4:0] XPIPE_PIPE_CH6_TXPRECURSOR_M_out;
  wire [4:0] XPIPE_PIPE_CH7_TXPOSTCURSOR_M_out;
  wire [4:0] XPIPE_PIPE_CH7_TXPRECURSOR_M_out;
  wire [4:0] XPIPE_PIPE_CH8_TXPOSTCURSOR_M_out;
  wire [4:0] XPIPE_PIPE_CH8_TXPRECURSOR_M_out;
  wire [4:0] XPIPE_PIPE_CH9_TXPOSTCURSOR_M_out;
  wire [4:0] XPIPE_PIPE_CH9_TXPRECURSOR_M_out;
  wire [5:0] CH0_RXHEADER_out;
  wire [5:0] CH0_TXHEADER_M_out;
  wire [5:0] CH1_RXHEADER_out;
  wire [5:0] CH1_TXHEADER_M_out;
  wire [5:0] CH2_RXHEADER_out;
  wire [5:0] CH2_TXHEADER_M_out;
  wire [5:0] CH3_RXHEADER_out;
  wire [5:0] CH3_TXHEADER_M_out;
  wire [5:0] PCIELTSSM_M_out;
  wire [5:0] XPIPE_PCIELTSSMSTATE_M_1_out;
  wire [5:0] XPIPE_PCIELTSSMSTATE_M_out;
  wire [6:0] CH0_RXPMARESETMASK_M_out;
  wire [6:0] CH0_TXMAINCURSOR_M_out;
  wire [6:0] CH0_TXSEQUENCE_M_out;
  wire [6:0] CH1_RXPMARESETMASK_M_out;
  wire [6:0] CH1_TXMAINCURSOR_M_out;
  wire [6:0] CH1_TXSEQUENCE_M_out;
  wire [6:0] CH2_RXPMARESETMASK_M_out;
  wire [6:0] CH2_TXMAINCURSOR_M_out;
  wire [6:0] CH2_TXSEQUENCE_M_out;
  wire [6:0] CH3_RXPMARESETMASK_M_out;
  wire [6:0] CH3_TXMAINCURSOR_M_out;
  wire [6:0] CH3_TXSEQUENCE_M_out;
  wire [6:0] XPIPE_HSDP_TXSEQUENCE_M_1_out;
  wire [6:0] XPIPE_HSDP_TXSEQUENCE_M_2_out;
  wire [6:0] XPIPE_HSDP_TXSEQUENCE_M_out;
  wire [6:0] XPIPE_PIPE_CH0_TXMAINCURSOR_M_out;
  wire [6:0] XPIPE_PIPE_CH10_TXMAINCURSOR_M_out;
  wire [6:0] XPIPE_PIPE_CH11_TXMAINCURSOR_M_out;
  wire [6:0] XPIPE_PIPE_CH12_TXMAINCURSOR_M_out;
  wire [6:0] XPIPE_PIPE_CH13_TXMAINCURSOR_M_out;
  wire [6:0] XPIPE_PIPE_CH14_TXMAINCURSOR_M_out;
  wire [6:0] XPIPE_PIPE_CH15_TXMAINCURSOR_M_out;
  wire [6:0] XPIPE_PIPE_CH1_TXMAINCURSOR_M_out;
  wire [6:0] XPIPE_PIPE_CH2_TXMAINCURSOR_M_out;
  wire [6:0] XPIPE_PIPE_CH3_TXMAINCURSOR_M_out;
  wire [6:0] XPIPE_PIPE_CH4_TXMAINCURSOR_M_out;
  wire [6:0] XPIPE_PIPE_CH5_TXMAINCURSOR_M_out;
  wire [6:0] XPIPE_PIPE_CH6_TXMAINCURSOR_M_out;
  wire [6:0] XPIPE_PIPE_CH7_TXMAINCURSOR_M_out;
  wire [6:0] XPIPE_PIPE_CH8_TXMAINCURSOR_M_out;
  wire [6:0] XPIPE_PIPE_CH9_TXMAINCURSOR_M_out;
  wire [7:0] CH0_RX10GSTAT_out;
  wire [7:0] CH0_RXCTRL2_out;
  wire [7:0] CH0_RXCTRL3_out;
  wire [7:0] CH0_RXDATAEXTENDRSVD_out;
  wire [7:0] CH0_RXRATE_M_out;
  wire [7:0] CH0_TXCTRL2_M_out;
  wire [7:0] CH0_TXDATAEXTENDRSVD_M_out;
  wire [7:0] CH0_TXRATE_M_out;
  wire [7:0] CH1_RX10GSTAT_out;
  wire [7:0] CH1_RXCTRL2_out;
  wire [7:0] CH1_RXCTRL3_out;
  wire [7:0] CH1_RXDATAEXTENDRSVD_out;
  wire [7:0] CH1_RXRATE_M_out;
  wire [7:0] CH1_TXCTRL2_M_out;
  wire [7:0] CH1_TXDATAEXTENDRSVD_M_out;
  wire [7:0] CH1_TXRATE_M_out;
  wire [7:0] CH2_RX10GSTAT_out;
  wire [7:0] CH2_RXCTRL2_out;
  wire [7:0] CH2_RXCTRL3_out;
  wire [7:0] CH2_RXDATAEXTENDRSVD_out;
  wire [7:0] CH2_RXRATE_M_out;
  wire [7:0] CH2_TXCTRL2_M_out;
  wire [7:0] CH2_TXDATAEXTENDRSVD_M_out;
  wire [7:0] CH2_TXRATE_M_out;
  wire [7:0] CH3_RX10GSTAT_out;
  wire [7:0] CH3_RXCTRL2_out;
  wire [7:0] CH3_RXCTRL3_out;
  wire [7:0] CH3_RXDATAEXTENDRSVD_out;
  wire [7:0] CH3_RXRATE_M_out;
  wire [7:0] CH3_TXCTRL2_M_out;
  wire [7:0] CH3_TXDATAEXTENDRSVD_M_out;
  wire [7:0] CH3_TXRATE_M_out;
  wire [7:0] HSCLK0_LCPLLFBDIV_M_out;
  wire [7:0] HSCLK0_LCPLLRSVD0_M_out;
  wire [7:0] HSCLK0_LCPLLRSVD1_M_out;
  wire [7:0] HSCLK0_LCPLLRSVDOUT_out;
  wire [7:0] HSCLK0_RPLLFBDIV_M_out;
  wire [7:0] HSCLK0_RPLLRSVD0_M_out;
  wire [7:0] HSCLK0_RPLLRSVD1_M_out;
  wire [7:0] HSCLK0_RPLLRSVDOUT_out;
  wire [7:0] HSCLK1_LCPLLFBDIV_M_out;
  wire [7:0] HSCLK1_LCPLLRSVD0_M_out;
  wire [7:0] HSCLK1_LCPLLRSVD1_M_out;
  wire [7:0] HSCLK1_LCPLLRSVDOUT_out;
  wire [7:0] HSCLK1_RPLLFBDIV_M_out;
  wire [7:0] HSCLK1_RPLLRSVD0_M_out;
  wire [7:0] HSCLK1_RPLLRSVD1_M_out;
  wire [7:0] HSCLK1_RPLLRSVDOUT_out;
  wire [7:0] RXMARGINREQPAYLD_M_out;
  wire [7:0] RXMARGINRESPAYLD_out;
  wire [7:0] XPIPE_RXMARGINREQPAYLOAD_M_1_out;
  wire [7:0] XPIPE_RXMARGINREQPAYLOAD_M_2_out;
  wire [7:0] XPIPE_RXMARGINREQPAYLOAD_M_3_out;
  wire [7:0] XPIPE_RXMARGINREQPAYLOAD_M_out;
  wire [7:0] XPIPE_RXMARGINRESPAYLOAD_1_out;
  wire [7:0] XPIPE_RXMARGINRESPAYLOAD_2_out;
  wire [7:0] XPIPE_RXMARGINRESPAYLOAD_3_out;
  wire [7:0] XPIPE_RXMARGINRESPAYLOAD_out;

  wire ALTCLK_in;
  wire APB3CLK_in;
  wire APB3PENABLE_in;
  wire APB3PREADY_M_in;
  wire APB3PRESETN_in;
  wire APB3PSEL_in;
  wire APB3PSLVERR_M_in;
  wire APB3PWRITE_in;
  wire AXISCLK_in;
  wire BGBYPASSB_in;
  wire BGMONITORENB_in;
  wire BGPDB_in;
  wire BGRCALOVRDENB_in;
  wire CH0_BSR_SERIAL_in;
  wire CH0_BUFGTCE_M_in;
  wire CH0_BUFGTRST_M_in;
  wire CH0_CDRBMCDRREQ_in;
  wire CH0_CDRFREQOS_in;
  wire CH0_CDRINCPCTRL_in;
  wire CH0_CDRSTEPDIR_in;
  wire CH0_CDRSTEPSQ_in;
  wire CH0_CDRSTEPSX_in;
  wire CH0_CFOKOVRDFINISH_in;
  wire CH0_CFOKOVRDPULSE_in;
  wire CH0_CFOKOVRDRDY0_M_in;
  wire CH0_CFOKOVRDRDY1_M_in;
  wire CH0_CFOKOVRDSTART_in;
  wire CH0_CLKRSVD0_in;
  wire CH0_CLKRSVD1_in;
  wire CH0_CSSDRSTB_in;
  wire CH0_CSSDSTOPCLKDONE_M_in;
  wire CH0_CSSDSTOPCLK_in;
  wire CH0_DMONFIFORESET_in;
  wire CH0_DMONITORCLK_in;
  wire CH0_EDTUPDATEB_in;
  wire CH0_EYESCANDATAERROR_M_in;
  wire CH0_EYESCANRESET_in;
  wire CH0_EYESCANTRIGGER_in;
  wire CH0_GTRXRESET_in;
  wire CH0_GTTXRESET_in;
  wire CH0_HSDPPCSRESET_in;
  wire CH0_ILORESETDONE_M_in;
  wire CH0_ILORESETMASK_in;
  wire CH0_ILORESET_in;
  wire CH0_PCIERSTB_in;
  wire CH0_PHYESMADAPTSAVE_in;
  wire CH0_PHYREADY_M_in;
  wire CH0_PHYSTATUS_M_in;
  wire CH0_RESETEXCEPTION_M_in;
  wire CH0_RXBYTEISALIGNED_M_in;
  wire CH0_RXBYTEREALIGN_M_in;
  wire CH0_RXCDRHOLD_in;
  wire CH0_RXCDRLOCK_M_in;
  wire CH0_RXCDROVRDEN_in;
  wire CH0_RXCDRPHDONE_M_in;
  wire CH0_RXCDRRESET_in;
  wire CH0_RXCHANBONDSEQ_M_in;
  wire CH0_RXCHANISALIGNED_M_in;
  wire CH0_RXCHANREALIGN_M_in;
  wire CH0_RXCOMINITDET_M_in;
  wire CH0_RXCOMMADET_M_in;
  wire CH0_RXCOMSASDET_M_in;
  wire CH0_RXCOMWAKEDET_M_in;
  wire CH0_RXDAPICODEOVRDEN_in;
  wire CH0_RXDAPICODERESET_in;
  wire CH0_RXDCCDONE_M_in;
  wire CH0_RXDLYALIGNERR_M_in;
  wire CH0_RXDLYALIGNPROG_M_in;
  wire CH0_RXDLYALIGNREQ_in;
  wire CH0_RXELECIDLE_M_in;
  wire CH0_RXEQTRAINING_in;
  wire CH0_RXFINEALIGNDONE_M_in;
  wire CH0_RXGEARBOXSLIP_in;
  wire CH0_RXLATCLK_in;
  wire CH0_RXLPMEN_in;
  wire CH0_RXMLDCHAINDONE_in;
  wire CH0_RXMLDCHAINREQ_in;
  wire CH0_RXMLFINEALIGNREQ_in;
  wire CH0_RXOOBRESET_in;
  wire CH0_RXOSINTDONE_M_in;
  wire CH0_RXOSINTSTARTED_M_in;
  wire CH0_RXOSINTSTROBEDONE_M_in;
  wire CH0_RXOSINTSTROBESTARTED_M_in;
  wire CH0_RXOUTCLK_M_in;
  wire CH0_RXPHALIGNDONE_M_in;
  wire CH0_RXPHALIGNERR_M_in;
  wire CH0_RXPHALIGNREQ_in;
  wire CH0_RXPHDLYPD_in;
  wire CH0_RXPHDLYRESETDONE_M_in;
  wire CH0_RXPHDLYRESET_in;
  wire CH0_RXPHSETINITDONE_M_in;
  wire CH0_RXPHSETINITREQ_in;
  wire CH0_RXPHSHIFT180DONE_M_in;
  wire CH0_RXPHSHIFT180_in;
  wire CH0_RXPMARESETDONE_M_in;
  wire CH0_RXPOLARITY_in;
  wire CH0_RXPRBSCNTRESET_in;
  wire CH0_RXPRBSERR_M_in;
  wire CH0_RXPRBSLOCKED_M_in;
  wire CH0_RXPROGDIVRESETDONE_M_in;
  wire CH0_RXPROGDIVRESET_in;
  wire CH0_RXRESETDONE_M_in;
  wire CH0_RXSLIDERDY_M_in;
  wire CH0_RXSLIDE_in;
  wire CH0_RXSYNCALLIN_in;
  wire CH0_RXSYNCDONE_M_in;
  wire CH0_RXTERMINATION_in;
  wire CH0_RXUSERRDY_in;
  wire CH0_RXUSRCLK_in;
  wire CH0_RXVALID_M_in;
  wire CH0_SCANCLKB_in;
  wire CH0_SCANCNTRLIN_in;
  wire CH0_SCANCNTRLOUT_M_in;
  wire CH0_SCANENB_in;
  wire CH0_SCANRSTB_in;
  wire CH0_TSTCLK0_in;
  wire CH0_TSTCLK1_in;
  wire CH0_TX10GSTAT_M_in;
  wire CH0_TXCOMFINISH_M_in;
  wire CH0_TXCOMINIT_in;
  wire CH0_TXCOMSAS_in;
  wire CH0_TXCOMWAKE_in;
  wire CH0_TXDAPICODEOVRDEN_in;
  wire CH0_TXDAPICODERESET_in;
  wire CH0_TXDCCDONE_M_in;
  wire CH0_TXDETECTRX_in;
  wire CH0_TXDLYALIGNERR_M_in;
  wire CH0_TXDLYALIGNPROG_M_in;
  wire CH0_TXDLYALIGNREQ_in;
  wire CH0_TXELECIDLE_in;
  wire CH0_TXINHIBIT_in;
  wire CH0_TXLATCLK_in;
  wire CH0_TXMLDCHAINDONE_in;
  wire CH0_TXMLDCHAINREQ_in;
  wire CH0_TXONESZEROS_in;
  wire CH0_TXOUTCLK_M_in;
  wire CH0_TXPAUSEDELAYALIGN_in;
  wire CH0_TXPCSRESETMASK_in;
  wire CH0_TXPHALIGNDONE_M_in;
  wire CH0_TXPHALIGNERR_M_in;
  wire CH0_TXPHALIGNOUTRSVD_M_in;
  wire CH0_TXPHALIGNREQ_in;
  wire CH0_TXPHDLYPD_in;
  wire CH0_TXPHDLYRESETDONE_M_in;
  wire CH0_TXPHDLYRESET_in;
  wire CH0_TXPHDLYTSTCLK_in;
  wire CH0_TXPHSETINITDONE_M_in;
  wire CH0_TXPHSETINITREQ_in;
  wire CH0_TXPHSHIFT180DONE_M_in;
  wire CH0_TXPHSHIFT180_in;
  wire CH0_TXPICODEOVRDEN_in;
  wire CH0_TXPICODERESET_in;
  wire CH0_TXPIPPMEN_in;
  wire CH0_TXPISOPD_in;
  wire CH0_TXPMARESETDONE_M_in;
  wire CH0_TXPOLARITY_in;
  wire CH0_TXPRBSFORCEERR_in;
  wire CH0_TXPROGDIVRESETDONE_M_in;
  wire CH0_TXPROGDIVRESET_in;
  wire CH0_TXRESETDONE_M_in;
  wire CH0_TXSWING_in;
  wire CH0_TXSYNCALLIN_in;
  wire CH0_TXSYNCDONE_M_in;
  wire CH0_TXUSERRDY_in;
  wire CH0_TXUSRCLK_in;
  wire CH1_BSR_SERIAL_in;
  wire CH1_BUFGTCE_M_in;
  wire CH1_BUFGTRST_M_in;
  wire CH1_CDRBMCDRREQ_in;
  wire CH1_CDRFREQOS_in;
  wire CH1_CDRINCPCTRL_in;
  wire CH1_CDRSTEPDIR_in;
  wire CH1_CDRSTEPSQ_in;
  wire CH1_CDRSTEPSX_in;
  wire CH1_CFOKOVRDFINISH_in;
  wire CH1_CFOKOVRDPULSE_in;
  wire CH1_CFOKOVRDRDY0_M_in;
  wire CH1_CFOKOVRDRDY1_M_in;
  wire CH1_CFOKOVRDSTART_in;
  wire CH1_CLKRSVD0_in;
  wire CH1_CLKRSVD1_in;
  wire CH1_CSSDRSTB_in;
  wire CH1_CSSDSTOPCLKDONE_M_in;
  wire CH1_CSSDSTOPCLK_in;
  wire CH1_DMONFIFORESET_in;
  wire CH1_DMONITORCLK_in;
  wire CH1_EDTUPDATEB_in;
  wire CH1_EYESCANDATAERROR_M_in;
  wire CH1_EYESCANRESET_in;
  wire CH1_EYESCANTRIGGER_in;
  wire CH1_GTRXRESET_in;
  wire CH1_GTTXRESET_in;
  wire CH1_HSDPPCSRESET_in;
  wire CH1_ILORESETDONE_M_in;
  wire CH1_ILORESETMASK_in;
  wire CH1_ILORESET_in;
  wire CH1_PCIERSTB_in;
  wire CH1_PHYESMADAPTSAVE_in;
  wire CH1_PHYREADY_M_in;
  wire CH1_PHYSTATUS_M_in;
  wire CH1_RESETEXCEPTION_M_in;
  wire CH1_RXBYTEISALIGNED_M_in;
  wire CH1_RXBYTEREALIGN_M_in;
  wire CH1_RXCDRHOLD_in;
  wire CH1_RXCDRLOCK_M_in;
  wire CH1_RXCDROVRDEN_in;
  wire CH1_RXCDRPHDONE_M_in;
  wire CH1_RXCDRRESET_in;
  wire CH1_RXCHANBONDSEQ_M_in;
  wire CH1_RXCHANISALIGNED_M_in;
  wire CH1_RXCHANREALIGN_M_in;
  wire CH1_RXCOMINITDET_M_in;
  wire CH1_RXCOMMADET_M_in;
  wire CH1_RXCOMSASDET_M_in;
  wire CH1_RXCOMWAKEDET_M_in;
  wire CH1_RXDAPICODEOVRDEN_in;
  wire CH1_RXDAPICODERESET_in;
  wire CH1_RXDCCDONE_M_in;
  wire CH1_RXDLYALIGNERR_M_in;
  wire CH1_RXDLYALIGNPROG_M_in;
  wire CH1_RXDLYALIGNREQ_in;
  wire CH1_RXELECIDLE_M_in;
  wire CH1_RXEQTRAINING_in;
  wire CH1_RXFINEALIGNDONE_M_in;
  wire CH1_RXGEARBOXSLIP_in;
  wire CH1_RXLATCLK_in;
  wire CH1_RXLPMEN_in;
  wire CH1_RXMLDCHAINDONE_in;
  wire CH1_RXMLDCHAINREQ_in;
  wire CH1_RXMLFINEALIGNREQ_in;
  wire CH1_RXOOBRESET_in;
  wire CH1_RXOSINTDONE_M_in;
  wire CH1_RXOSINTSTARTED_M_in;
  wire CH1_RXOSINTSTROBEDONE_M_in;
  wire CH1_RXOSINTSTROBESTARTED_M_in;
  wire CH1_RXPHALIGNDONE_M_in;
  wire CH1_RXPHALIGNERR_M_in;
  wire CH1_RXPHALIGNREQ_in;
  wire CH1_RXPHDLYPD_in;
  wire CH1_RXPHDLYRESETDONE_M_in;
  wire CH1_RXPHDLYRESET_in;
  wire CH1_RXPHSETINITDONE_M_in;
  wire CH1_RXPHSETINITREQ_in;
  wire CH1_RXPHSHIFT180DONE_M_in;
  wire CH1_RXPHSHIFT180_in;
  wire CH1_RXPMARESETDONE_M_in;
  wire CH1_RXPOLARITY_in;
  wire CH1_RXPRBSCNTRESET_in;
  wire CH1_RXPRBSERR_M_in;
  wire CH1_RXPRBSLOCKED_M_in;
  wire CH1_RXPROGDIVRESETDONE_M_in;
  wire CH1_RXPROGDIVRESET_in;
  wire CH1_RXRESETDONE_M_in;
  wire CH1_RXSLIDERDY_M_in;
  wire CH1_RXSLIDE_in;
  wire CH1_RXSYNCALLIN_in;
  wire CH1_RXSYNCDONE_M_in;
  wire CH1_RXTERMINATION_in;
  wire CH1_RXUSERRDY_in;
  wire CH1_RXUSRCLK_in;
  wire CH1_RXVALID_M_in;
  wire CH1_SCANCLKB_in;
  wire CH1_SCANCNTRLIN_in;
  wire CH1_SCANCNTRLOUT_M_in;
  wire CH1_SCANENB_in;
  wire CH1_SCANRSTB_in;
  wire CH1_TSTCLK0_in;
  wire CH1_TSTCLK1_in;
  wire CH1_TX10GSTAT_M_in;
  wire CH1_TXCOMFINISH_M_in;
  wire CH1_TXCOMINIT_in;
  wire CH1_TXCOMSAS_in;
  wire CH1_TXCOMWAKE_in;
  wire CH1_TXDAPICODEOVRDEN_in;
  wire CH1_TXDAPICODERESET_in;
  wire CH1_TXDCCDONE_M_in;
  wire CH1_TXDETECTRX_in;
  wire CH1_TXDLYALIGNERR_M_in;
  wire CH1_TXDLYALIGNPROG_M_in;
  wire CH1_TXDLYALIGNREQ_in;
  wire CH1_TXELECIDLE_in;
  wire CH1_TXINHIBIT_in;
  wire CH1_TXLATCLK_in;
  wire CH1_TXMLDCHAINDONE_in;
  wire CH1_TXMLDCHAINREQ_in;
  wire CH1_TXONESZEROS_in;
  wire CH1_TXPAUSEDELAYALIGN_in;
  wire CH1_TXPCSRESETMASK_in;
  wire CH1_TXPHALIGNDONE_M_in;
  wire CH1_TXPHALIGNERR_M_in;
  wire CH1_TXPHALIGNOUTRSVD_M_in;
  wire CH1_TXPHALIGNREQ_in;
  wire CH1_TXPHDLYPD_in;
  wire CH1_TXPHDLYRESETDONE_M_in;
  wire CH1_TXPHDLYRESET_in;
  wire CH1_TXPHDLYTSTCLK_in;
  wire CH1_TXPHSETINITDONE_M_in;
  wire CH1_TXPHSETINITREQ_in;
  wire CH1_TXPHSHIFT180DONE_M_in;
  wire CH1_TXPHSHIFT180_in;
  wire CH1_TXPICODEOVRDEN_in;
  wire CH1_TXPICODERESET_in;
  wire CH1_TXPIPPMEN_in;
  wire CH1_TXPISOPD_in;
  wire CH1_TXPMARESETDONE_M_in;
  wire CH1_TXPOLARITY_in;
  wire CH1_TXPRBSFORCEERR_in;
  wire CH1_TXPROGDIVRESETDONE_M_in;
  wire CH1_TXPROGDIVRESET_in;
  wire CH1_TXRESETDONE_M_in;
  wire CH1_TXSWING_in;
  wire CH1_TXSYNCALLIN_in;
  wire CH1_TXSYNCDONE_M_in;
  wire CH1_TXUSERRDY_in;
  wire CH1_TXUSRCLK_in;
  wire CH2_BSR_SERIAL_in;
  wire CH2_BUFGTCE_M_in;
  wire CH2_BUFGTRST_M_in;
  wire CH2_CDRBMCDRREQ_in;
  wire CH2_CDRFREQOS_in;
  wire CH2_CDRINCPCTRL_in;
  wire CH2_CDRSTEPDIR_in;
  wire CH2_CDRSTEPSQ_in;
  wire CH2_CDRSTEPSX_in;
  wire CH2_CFOKOVRDFINISH_in;
  wire CH2_CFOKOVRDPULSE_in;
  wire CH2_CFOKOVRDRDY0_M_in;
  wire CH2_CFOKOVRDRDY1_M_in;
  wire CH2_CFOKOVRDSTART_in;
  wire CH2_CLKRSVD0_in;
  wire CH2_CLKRSVD1_in;
  wire CH2_CSSDRSTB_in;
  wire CH2_CSSDSTOPCLKDONE_M_in;
  wire CH2_CSSDSTOPCLK_in;
  wire CH2_DMONFIFORESET_in;
  wire CH2_DMONITORCLK_in;
  wire CH2_EDTUPDATEB_in;
  wire CH2_EYESCANDATAERROR_M_in;
  wire CH2_EYESCANRESET_in;
  wire CH2_EYESCANTRIGGER_in;
  wire CH2_GTRXRESET_in;
  wire CH2_GTTXRESET_in;
  wire CH2_HSDPPCSRESET_in;
  wire CH2_ILORESETDONE_M_in;
  wire CH2_ILORESETMASK_in;
  wire CH2_ILORESET_in;
  wire CH2_PCIERSTB_in;
  wire CH2_PHYESMADAPTSAVE_in;
  wire CH2_PHYREADY_M_in;
  wire CH2_PHYSTATUS_M_in;
  wire CH2_RESETEXCEPTION_M_in;
  wire CH2_RXBYTEISALIGNED_M_in;
  wire CH2_RXBYTEREALIGN_M_in;
  wire CH2_RXCDRHOLD_in;
  wire CH2_RXCDRLOCK_M_in;
  wire CH2_RXCDROVRDEN_in;
  wire CH2_RXCDRPHDONE_M_in;
  wire CH2_RXCDRRESET_in;
  wire CH2_RXCHANBONDSEQ_M_in;
  wire CH2_RXCHANISALIGNED_M_in;
  wire CH2_RXCHANREALIGN_M_in;
  wire CH2_RXCOMINITDET_M_in;
  wire CH2_RXCOMMADET_M_in;
  wire CH2_RXCOMSASDET_M_in;
  wire CH2_RXCOMWAKEDET_M_in;
  wire CH2_RXDAPICODEOVRDEN_in;
  wire CH2_RXDAPICODERESET_in;
  wire CH2_RXDCCDONE_M_in;
  wire CH2_RXDLYALIGNERR_M_in;
  wire CH2_RXDLYALIGNPROG_M_in;
  wire CH2_RXDLYALIGNREQ_in;
  wire CH2_RXELECIDLE_M_in;
  wire CH2_RXEQTRAINING_in;
  wire CH2_RXFINEALIGNDONE_M_in;
  wire CH2_RXGEARBOXSLIP_in;
  wire CH2_RXLATCLK_in;
  wire CH2_RXLPMEN_in;
  wire CH2_RXMLDCHAINDONE_in;
  wire CH2_RXMLDCHAINREQ_in;
  wire CH2_RXMLFINEALIGNREQ_in;
  wire CH2_RXOOBRESET_in;
  wire CH2_RXOSINTDONE_M_in;
  wire CH2_RXOSINTSTARTED_M_in;
  wire CH2_RXOSINTSTROBEDONE_M_in;
  wire CH2_RXOSINTSTROBESTARTED_M_in;
  wire CH2_RXPHALIGNDONE_M_in;
  wire CH2_RXPHALIGNERR_M_in;
  wire CH2_RXPHALIGNREQ_in;
  wire CH2_RXPHDLYPD_in;
  wire CH2_RXPHDLYRESETDONE_M_in;
  wire CH2_RXPHDLYRESET_in;
  wire CH2_RXPHSETINITDONE_M_in;
  wire CH2_RXPHSETINITREQ_in;
  wire CH2_RXPHSHIFT180DONE_M_in;
  wire CH2_RXPHSHIFT180_in;
  wire CH2_RXPMARESETDONE_M_in;
  wire CH2_RXPOLARITY_in;
  wire CH2_RXPRBSCNTRESET_in;
  wire CH2_RXPRBSERR_M_in;
  wire CH2_RXPRBSLOCKED_M_in;
  wire CH2_RXPROGDIVRESETDONE_M_in;
  wire CH2_RXPROGDIVRESET_in;
  wire CH2_RXRESETDONE_M_in;
  wire CH2_RXSLIDERDY_M_in;
  wire CH2_RXSLIDE_in;
  wire CH2_RXSYNCALLIN_in;
  wire CH2_RXSYNCDONE_M_in;
  wire CH2_RXTERMINATION_in;
  wire CH2_RXUSERRDY_in;
  wire CH2_RXUSRCLK_in;
  wire CH2_RXVALID_M_in;
  wire CH2_SCANCLKB_in;
  wire CH2_SCANCNTRLIN_in;
  wire CH2_SCANCNTRLOUT_M_in;
  wire CH2_SCANENB_in;
  wire CH2_SCANRSTB_in;
  wire CH2_TSTCLK0_in;
  wire CH2_TSTCLK1_in;
  wire CH2_TX10GSTAT_M_in;
  wire CH2_TXCOMFINISH_M_in;
  wire CH2_TXCOMINIT_in;
  wire CH2_TXCOMSAS_in;
  wire CH2_TXCOMWAKE_in;
  wire CH2_TXDAPICODEOVRDEN_in;
  wire CH2_TXDAPICODERESET_in;
  wire CH2_TXDCCDONE_M_in;
  wire CH2_TXDETECTRX_in;
  wire CH2_TXDLYALIGNERR_M_in;
  wire CH2_TXDLYALIGNPROG_M_in;
  wire CH2_TXDLYALIGNREQ_in;
  wire CH2_TXELECIDLE_in;
  wire CH2_TXINHIBIT_in;
  wire CH2_TXLATCLK_in;
  wire CH2_TXMLDCHAINDONE_in;
  wire CH2_TXMLDCHAINREQ_in;
  wire CH2_TXONESZEROS_in;
  wire CH2_TXPAUSEDELAYALIGN_in;
  wire CH2_TXPCSRESETMASK_in;
  wire CH2_TXPHALIGNDONE_M_in;
  wire CH2_TXPHALIGNERR_M_in;
  wire CH2_TXPHALIGNOUTRSVD_M_in;
  wire CH2_TXPHALIGNREQ_in;
  wire CH2_TXPHDLYPD_in;
  wire CH2_TXPHDLYRESETDONE_M_in;
  wire CH2_TXPHDLYRESET_in;
  wire CH2_TXPHDLYTSTCLK_in;
  wire CH2_TXPHSETINITDONE_M_in;
  wire CH2_TXPHSETINITREQ_in;
  wire CH2_TXPHSHIFT180DONE_M_in;
  wire CH2_TXPHSHIFT180_in;
  wire CH2_TXPICODEOVRDEN_in;
  wire CH2_TXPICODERESET_in;
  wire CH2_TXPIPPMEN_in;
  wire CH2_TXPISOPD_in;
  wire CH2_TXPMARESETDONE_M_in;
  wire CH2_TXPOLARITY_in;
  wire CH2_TXPRBSFORCEERR_in;
  wire CH2_TXPROGDIVRESETDONE_M_in;
  wire CH2_TXPROGDIVRESET_in;
  wire CH2_TXRESETDONE_M_in;
  wire CH2_TXSWING_in;
  wire CH2_TXSYNCALLIN_in;
  wire CH2_TXSYNCDONE_M_in;
  wire CH2_TXUSERRDY_in;
  wire CH2_TXUSRCLK_in;
  wire CH3_BSR_SERIAL_in;
  wire CH3_BUFGTCE_M_in;
  wire CH3_BUFGTRST_M_in;
  wire CH3_CDRBMCDRREQ_in;
  wire CH3_CDRFREQOS_in;
  wire CH3_CDRINCPCTRL_in;
  wire CH3_CDRSTEPDIR_in;
  wire CH3_CDRSTEPSQ_in;
  wire CH3_CDRSTEPSX_in;
  wire CH3_CFOKOVRDFINISH_in;
  wire CH3_CFOKOVRDPULSE_in;
  wire CH3_CFOKOVRDRDY0_M_in;
  wire CH3_CFOKOVRDRDY1_M_in;
  wire CH3_CFOKOVRDSTART_in;
  wire CH3_CLKRSVD0_in;
  wire CH3_CLKRSVD1_in;
  wire CH3_CSSDRSTB_in;
  wire CH3_CSSDSTOPCLKDONE_M_in;
  wire CH3_CSSDSTOPCLK_in;
  wire CH3_DMONFIFORESET_in;
  wire CH3_DMONITORCLK_in;
  wire CH3_EDTUPDATEB_in;
  wire CH3_EYESCANDATAERROR_M_in;
  wire CH3_EYESCANRESET_in;
  wire CH3_EYESCANTRIGGER_in;
  wire CH3_GTRXRESET_in;
  wire CH3_GTTXRESET_in;
  wire CH3_HSDPPCSRESET_in;
  wire CH3_ILORESETDONE_M_in;
  wire CH3_ILORESETMASK_in;
  wire CH3_ILORESET_in;
  wire CH3_PCIERSTB_in;
  wire CH3_PHYESMADAPTSAVE_in;
  wire CH3_PHYREADY_M_in;
  wire CH3_PHYSTATUS_M_in;
  wire CH3_RESETEXCEPTION_M_in;
  wire CH3_RXBYTEISALIGNED_M_in;
  wire CH3_RXBYTEREALIGN_M_in;
  wire CH3_RXCDRHOLD_in;
  wire CH3_RXCDRLOCK_M_in;
  wire CH3_RXCDROVRDEN_in;
  wire CH3_RXCDRPHDONE_M_in;
  wire CH3_RXCDRRESET_in;
  wire CH3_RXCHANBONDSEQ_M_in;
  wire CH3_RXCHANISALIGNED_M_in;
  wire CH3_RXCHANREALIGN_M_in;
  wire CH3_RXCOMINITDET_M_in;
  wire CH3_RXCOMMADET_M_in;
  wire CH3_RXCOMSASDET_M_in;
  wire CH3_RXCOMWAKEDET_M_in;
  wire CH3_RXDAPICODEOVRDEN_in;
  wire CH3_RXDAPICODERESET_in;
  wire CH3_RXDCCDONE_M_in;
  wire CH3_RXDLYALIGNERR_M_in;
  wire CH3_RXDLYALIGNPROG_M_in;
  wire CH3_RXDLYALIGNREQ_in;
  wire CH3_RXELECIDLE_M_in;
  wire CH3_RXEQTRAINING_in;
  wire CH3_RXFINEALIGNDONE_M_in;
  wire CH3_RXGEARBOXSLIP_in;
  wire CH3_RXLATCLK_in;
  wire CH3_RXLPMEN_in;
  wire CH3_RXMLDCHAINDONE_in;
  wire CH3_RXMLDCHAINREQ_in;
  wire CH3_RXMLFINEALIGNREQ_in;
  wire CH3_RXOOBRESET_in;
  wire CH3_RXOSINTDONE_M_in;
  wire CH3_RXOSINTSTARTED_M_in;
  wire CH3_RXOSINTSTROBEDONE_M_in;
  wire CH3_RXOSINTSTROBESTARTED_M_in;
  wire CH3_RXPHALIGNDONE_M_in;
  wire CH3_RXPHALIGNERR_M_in;
  wire CH3_RXPHALIGNREQ_in;
  wire CH3_RXPHDLYPD_in;
  wire CH3_RXPHDLYRESETDONE_M_in;
  wire CH3_RXPHDLYRESET_in;
  wire CH3_RXPHSETINITDONE_M_in;
  wire CH3_RXPHSETINITREQ_in;
  wire CH3_RXPHSHIFT180DONE_M_in;
  wire CH3_RXPHSHIFT180_in;
  wire CH3_RXPMARESETDONE_M_in;
  wire CH3_RXPOLARITY_in;
  wire CH3_RXPRBSCNTRESET_in;
  wire CH3_RXPRBSERR_M_in;
  wire CH3_RXPRBSLOCKED_M_in;
  wire CH3_RXPROGDIVRESETDONE_M_in;
  wire CH3_RXPROGDIVRESET_in;
  wire CH3_RXRESETDONE_M_in;
  wire CH3_RXSLIDERDY_M_in;
  wire CH3_RXSLIDE_in;
  wire CH3_RXSYNCALLIN_in;
  wire CH3_RXSYNCDONE_M_in;
  wire CH3_RXTERMINATION_in;
  wire CH3_RXUSERRDY_in;
  wire CH3_RXUSRCLK_in;
  wire CH3_RXVALID_M_in;
  wire CH3_SCANCLKB_in;
  wire CH3_SCANCNTRLIN_in;
  wire CH3_SCANCNTRLOUT_M_in;
  wire CH3_SCANENB_in;
  wire CH3_SCANRSTB_in;
  wire CH3_TSTCLK0_in;
  wire CH3_TSTCLK1_in;
  wire CH3_TX10GSTAT_M_in;
  wire CH3_TXCOMFINISH_M_in;
  wire CH3_TXCOMINIT_in;
  wire CH3_TXCOMSAS_in;
  wire CH3_TXCOMWAKE_in;
  wire CH3_TXDAPICODEOVRDEN_in;
  wire CH3_TXDAPICODERESET_in;
  wire CH3_TXDCCDONE_M_in;
  wire CH3_TXDETECTRX_in;
  wire CH3_TXDLYALIGNERR_M_in;
  wire CH3_TXDLYALIGNPROG_M_in;
  wire CH3_TXDLYALIGNREQ_in;
  wire CH3_TXELECIDLE_in;
  wire CH3_TXINHIBIT_in;
  wire CH3_TXLATCLK_in;
  wire CH3_TXMLDCHAINDONE_in;
  wire CH3_TXMLDCHAINREQ_in;
  wire CH3_TXONESZEROS_in;
  wire CH3_TXPAUSEDELAYALIGN_in;
  wire CH3_TXPCSRESETMASK_in;
  wire CH3_TXPHALIGNDONE_M_in;
  wire CH3_TXPHALIGNERR_M_in;
  wire CH3_TXPHALIGNOUTRSVD_M_in;
  wire CH3_TXPHALIGNREQ_in;
  wire CH3_TXPHDLYPD_in;
  wire CH3_TXPHDLYRESETDONE_M_in;
  wire CH3_TXPHDLYRESET_in;
  wire CH3_TXPHDLYTSTCLK_in;
  wire CH3_TXPHSETINITDONE_M_in;
  wire CH3_TXPHSETINITREQ_in;
  wire CH3_TXPHSHIFT180DONE_M_in;
  wire CH3_TXPHSHIFT180_in;
  wire CH3_TXPICODEOVRDEN_in;
  wire CH3_TXPICODERESET_in;
  wire CH3_TXPIPPMEN_in;
  wire CH3_TXPISOPD_in;
  wire CH3_TXPMARESETDONE_M_in;
  wire CH3_TXPOLARITY_in;
  wire CH3_TXPRBSFORCEERR_in;
  wire CH3_TXPROGDIVRESETDONE_M_in;
  wire CH3_TXPROGDIVRESET_in;
  wire CH3_TXRESETDONE_M_in;
  wire CH3_TXSWING_in;
  wire CH3_TXSYNCALLIN_in;
  wire CH3_TXSYNCDONE_M_in;
  wire CH3_TXUSERRDY_in;
  wire CH3_TXUSRCLK_in;
  wire CORRECTERR_M_in;
  wire CSSDRSTB_in;
  wire CSSDSTOPCLKDONE_M_in;
  wire CSSDSTOPCLK_in;
  wire DEBUGTRACECLK_in;
  wire DEBUGTRACEREADY_in;
  wire DEBUGTRACETVALID_M_in;
  wire EDTUPDATEB_in;
  wire GTPOWERGOOD_M_in;
  wire HSCLK0_LCPLLCLKRSVD0_in;
  wire HSCLK0_LCPLLCLKRSVD1_in;
  wire HSCLK0_LCPLLFBCLKLOST_M_in;
  wire HSCLK0_LCPLLGTGREFCLK_in;
  wire HSCLK0_LCPLLLOCK_M_in;
  wire HSCLK0_LCPLLPD_in;
  wire HSCLK0_LCPLLREFCLKLOST_M_in;
  wire HSCLK0_LCPLLREFCLKMONITOR_M_in;
  wire HSCLK0_LCPLLRESETBYPASSMODE_in;
  wire HSCLK0_LCPLLRESET_in;
  wire HSCLK0_LCPLLSDMTOGGLE_in;
  wire HSCLK0_RPLLCLKRSVD0_in;
  wire HSCLK0_RPLLCLKRSVD1_in;
  wire HSCLK0_RPLLFBCLKLOST_M_in;
  wire HSCLK0_RPLLGTGREFCLK_in;
  wire HSCLK0_RPLLLOCK_M_in;
  wire HSCLK0_RPLLPD_in;
  wire HSCLK0_RPLLREFCLKLOST_M_in;
  wire HSCLK0_RPLLREFCLKMONITOR_M_in;
  wire HSCLK0_RPLLRESETBYPASSMODE_in;
  wire HSCLK0_RPLLRESET_in;
  wire HSCLK0_RPLLSDMTOGGLE_in;
  wire HSCLK1_LCPLLCLKRSVD0_in;
  wire HSCLK1_LCPLLCLKRSVD1_in;
  wire HSCLK1_LCPLLFBCLKLOST_M_in;
  wire HSCLK1_LCPLLGTGREFCLK_in;
  wire HSCLK1_LCPLLLOCK_M_in;
  wire HSCLK1_LCPLLPD_in;
  wire HSCLK1_LCPLLREFCLKLOST_M_in;
  wire HSCLK1_LCPLLREFCLKMONITOR_M_in;
  wire HSCLK1_LCPLLRESETBYPASSMODE_in;
  wire HSCLK1_LCPLLRESET_in;
  wire HSCLK1_LCPLLSDMTOGGLE_in;
  wire HSCLK1_RPLLCLKRSVD0_in;
  wire HSCLK1_RPLLCLKRSVD1_in;
  wire HSCLK1_RPLLFBCLKLOST_M_in;
  wire HSCLK1_RPLLGTGREFCLK_in;
  wire HSCLK1_RPLLLOCK_M_in;
  wire HSCLK1_RPLLPD_in;
  wire HSCLK1_RPLLREFCLKLOST_M_in;
  wire HSCLK1_RPLLREFCLKMONITOR_M_in;
  wire HSCLK1_RPLLRESETBYPASSMODE_in;
  wire HSCLK1_RPLLRESET_in;
  wire HSCLK1_RPLLSDMTOGGLE_in;
  wire M0_AXIS_TLAST_M_in;
  wire M0_AXIS_TREADY_in;
  wire M0_AXIS_TVALID_M_in;
  wire M1_AXIS_TLAST_M_in;
  wire M1_AXIS_TREADY_in;
  wire M1_AXIS_TVALID_M_in;
  wire M2_AXIS_TLAST_M_in;
  wire M2_AXIS_TREADY_in;
  wire M2_AXIS_TVALID_M_in;
  wire PCIELINKREACHTARGET_in;
  wire RCALCMP_M_in;
  wire RCALENB_in;
  wire REFCLK0_CLKTESTSIG_in;
  wire REFCLK0_GTREFCLKPD_in;
  wire REFCLK1_CLKTESTSIG_in;
  wire REFCLK1_GTREFCLKPD_in;
  wire RXMARGINCLK_in;
  wire RXMARGINREQACK_M_in;
  wire RXMARGINREQREQ_in;
  wire RXMARGINRESACK_in;
  wire RXMARGINRESREQ_M_in;
  wire S0_AXIS_TLAST_in;
  wire S0_AXIS_TREADY_M_in;
  wire S0_AXIS_TVALID_in;
  wire S1_AXIS_TLAST_in;
  wire S1_AXIS_TREADY_M_in;
  wire S1_AXIS_TVALID_in;
  wire S2_AXIS_TLAST_in;
  wire S2_AXIS_TREADY_M_in;
  wire S2_AXIS_TVALID_in;
  wire SCANCLKB_in;
  wire SCANCNTRLIN_in;
  wire SCANCNTRLOUT_M_in;
  wire SCANENB_in;
  wire SCANRSTB_in;
  wire TRIGACKIN0_M_in;
  wire TRIGACKOUT0_in;
  wire TRIGIN0_in;
  wire TRIGOUT0_M_in;
  wire UBENABLE_in;
  wire UBINTERRUPT_M_in;
  wire UBIOLMBRST_in;
  wire UBMBRST_in;
  wire UBRXUART_in;
  wire UBTXUART_M_in;
  wire UNCORRECTERR_M_in;
  wire XPIPE_BUFGTCE_M_1_in;
  wire XPIPE_BUFGTCE_M_in;
  wire XPIPE_BUFGTRST_M_1_in;
  wire XPIPE_BUFGTRST_M_in;
  wire XPIPE_GT_OUTCLK_M_1_in;
  wire XPIPE_GT_OUTCLK_M_in;
  wire XPIPE_GT_PIPECLK_1_in;
  wire XPIPE_GT_PIPECLK_in;
  wire XPIPE_GT_RXOUTCLK_M_in;
  wire XPIPE_GT_RXUSRCLK_in;
  wire XPIPE_HSDP_RXDATAVALID_M_1_in;
  wire XPIPE_HSDP_RXDATAVALID_M_2_in;
  wire XPIPE_HSDP_RXDATAVALID_M_in;
  wire XPIPE_HSDP_RXGEARBOXSLIP_1_in;
  wire XPIPE_HSDP_RXGEARBOXSLIP_2_in;
  wire XPIPE_HSDP_RXGEARBOXSLIP_in;
  wire XPIPE_HSDP_RXHEADERVALID_M_1_in;
  wire XPIPE_HSDP_RXHEADERVALID_M_2_in;
  wire XPIPE_HSDP_RXHEADERVALID_M_in;
  wire XPIPE_HSDP_RXPCSRESET_1_in;
  wire XPIPE_HSDP_RXPCSRESET_2_in;
  wire XPIPE_HSDP_RXPCSRESET_in;
  wire XPIPE_HSDP_RXRESETDONE_M_1_in;
  wire XPIPE_HSDP_RXRESETDONE_M_2_in;
  wire XPIPE_HSDP_RXRESETDONE_M_in;
  wire XPIPE_HSDP_TXRESETDONE_M_1_in;
  wire XPIPE_HSDP_TXRESETDONE_M_2_in;
  wire XPIPE_HSDP_TXRESETDONE_M_in;
  wire XPIPE_PCIELINKREACHTARGET_1_in;
  wire XPIPE_PCIELINKREACHTARGET_in;
  wire XPIPE_PCIE_PERST_N_1_in;
  wire XPIPE_PCIE_PERST_N_in;
  wire XPIPE_PHYESMADAPTSAVE_1_in;
  wire XPIPE_PHYESMADAPTSAVE_in;
  wire XPIPE_PHYREADY_FR_BOT_in;
  wire XPIPE_PHYREADY_TO_BOT_M_in;
  wire XPIPE_PHY_READY_M_1_in;
  wire XPIPE_PHY_READY_M_in;
  wire XPIPE_PIPE_CH0_PHYSTATUS_M_in;
  wire XPIPE_PIPE_CH0_RXDATAVALID_M_in;
  wire XPIPE_PIPE_CH0_RXELECIDLE_M_in;
  wire XPIPE_PIPE_CH0_RXPOLARITY_in;
  wire XPIPE_PIPE_CH0_RXSTARTBLOCK_M_in;
  wire XPIPE_PIPE_CH0_RXTERMINATION_in;
  wire XPIPE_PIPE_CH0_RXVALID_M_in;
  wire XPIPE_PIPE_CH0_TXCOMPLIANCE_in;
  wire XPIPE_PIPE_CH0_TXDATAVALID_in;
  wire XPIPE_PIPE_CH0_TXDEEMPH_in;
  wire XPIPE_PIPE_CH0_TXDETECTRXLOOPBACK_in;
  wire XPIPE_PIPE_CH0_TXELECIDLE_in;
  wire XPIPE_PIPE_CH0_TXSTARTBLOCK_in;
  wire XPIPE_PIPE_CH0_TXSWING_in;
  wire XPIPE_PIPE_CH10_PHYSTATUS_M_in;
  wire XPIPE_PIPE_CH10_RXDATAVALID_M_in;
  wire XPIPE_PIPE_CH10_RXELECIDLE_M_in;
  wire XPIPE_PIPE_CH10_RXPOLARITY_in;
  wire XPIPE_PIPE_CH10_RXSTARTBLOCK_M_in;
  wire XPIPE_PIPE_CH10_RXTERMINATION_in;
  wire XPIPE_PIPE_CH10_RXVALID_M_in;
  wire XPIPE_PIPE_CH10_TXCOMPLIANCE_in;
  wire XPIPE_PIPE_CH10_TXDATAVALID_in;
  wire XPIPE_PIPE_CH10_TXDEEMPH_in;
  wire XPIPE_PIPE_CH10_TXDETECTRXLOOPBACK_in;
  wire XPIPE_PIPE_CH10_TXELECIDLE_in;
  wire XPIPE_PIPE_CH10_TXSTARTBLOCK_in;
  wire XPIPE_PIPE_CH10_TXSWING_in;
  wire XPIPE_PIPE_CH11_PHYSTATUS_M_in;
  wire XPIPE_PIPE_CH11_RXDATAVALID_M_in;
  wire XPIPE_PIPE_CH11_RXELECIDLE_M_in;
  wire XPIPE_PIPE_CH11_RXPOLARITY_in;
  wire XPIPE_PIPE_CH11_RXSTARTBLOCK_M_in;
  wire XPIPE_PIPE_CH11_RXTERMINATION_in;
  wire XPIPE_PIPE_CH11_RXVALID_M_in;
  wire XPIPE_PIPE_CH11_TXCOMPLIANCE_in;
  wire XPIPE_PIPE_CH11_TXDATAVALID_in;
  wire XPIPE_PIPE_CH11_TXDEEMPH_in;
  wire XPIPE_PIPE_CH11_TXDETECTRXLOOPBACK_in;
  wire XPIPE_PIPE_CH11_TXELECIDLE_in;
  wire XPIPE_PIPE_CH11_TXSTARTBLOCK_in;
  wire XPIPE_PIPE_CH11_TXSWING_in;
  wire XPIPE_PIPE_CH12_PHYSTATUS_M_in;
  wire XPIPE_PIPE_CH12_RXDATAVALID_M_in;
  wire XPIPE_PIPE_CH12_RXELECIDLE_M_in;
  wire XPIPE_PIPE_CH12_RXPOLARITY_in;
  wire XPIPE_PIPE_CH12_RXSTARTBLOCK_M_in;
  wire XPIPE_PIPE_CH12_RXTERMINATION_in;
  wire XPIPE_PIPE_CH12_RXVALID_M_in;
  wire XPIPE_PIPE_CH12_TXCOMPLIANCE_in;
  wire XPIPE_PIPE_CH12_TXDATAVALID_in;
  wire XPIPE_PIPE_CH12_TXDEEMPH_in;
  wire XPIPE_PIPE_CH12_TXDETECTRXLOOPBACK_in;
  wire XPIPE_PIPE_CH12_TXELECIDLE_in;
  wire XPIPE_PIPE_CH12_TXSTARTBLOCK_in;
  wire XPIPE_PIPE_CH12_TXSWING_in;
  wire XPIPE_PIPE_CH13_PHYSTATUS_M_in;
  wire XPIPE_PIPE_CH13_RXDATAVALID_M_in;
  wire XPIPE_PIPE_CH13_RXELECIDLE_M_in;
  wire XPIPE_PIPE_CH13_RXPOLARITY_in;
  wire XPIPE_PIPE_CH13_RXSTARTBLOCK_M_in;
  wire XPIPE_PIPE_CH13_RXTERMINATION_in;
  wire XPIPE_PIPE_CH13_RXVALID_M_in;
  wire XPIPE_PIPE_CH13_TXCOMPLIANCE_in;
  wire XPIPE_PIPE_CH13_TXDATAVALID_in;
  wire XPIPE_PIPE_CH13_TXDEEMPH_in;
  wire XPIPE_PIPE_CH13_TXDETECTRXLOOPBACK_in;
  wire XPIPE_PIPE_CH13_TXELECIDLE_in;
  wire XPIPE_PIPE_CH13_TXSTARTBLOCK_in;
  wire XPIPE_PIPE_CH13_TXSWING_in;
  wire XPIPE_PIPE_CH14_PHYSTATUS_M_in;
  wire XPIPE_PIPE_CH14_RXDATAVALID_M_in;
  wire XPIPE_PIPE_CH14_RXELECIDLE_M_in;
  wire XPIPE_PIPE_CH14_RXPOLARITY_in;
  wire XPIPE_PIPE_CH14_RXSTARTBLOCK_M_in;
  wire XPIPE_PIPE_CH14_RXTERMINATION_in;
  wire XPIPE_PIPE_CH14_RXVALID_M_in;
  wire XPIPE_PIPE_CH14_TXCOMPLIANCE_in;
  wire XPIPE_PIPE_CH14_TXDATAVALID_in;
  wire XPIPE_PIPE_CH14_TXDEEMPH_in;
  wire XPIPE_PIPE_CH14_TXDETECTRXLOOPBACK_in;
  wire XPIPE_PIPE_CH14_TXELECIDLE_in;
  wire XPIPE_PIPE_CH14_TXSTARTBLOCK_in;
  wire XPIPE_PIPE_CH14_TXSWING_in;
  wire XPIPE_PIPE_CH15_PHYSTATUS_M_in;
  wire XPIPE_PIPE_CH15_RXDATAVALID_M_in;
  wire XPIPE_PIPE_CH15_RXELECIDLE_M_in;
  wire XPIPE_PIPE_CH15_RXPOLARITY_in;
  wire XPIPE_PIPE_CH15_RXSTARTBLOCK_M_in;
  wire XPIPE_PIPE_CH15_RXTERMINATION_in;
  wire XPIPE_PIPE_CH15_RXVALID_M_in;
  wire XPIPE_PIPE_CH15_TXCOMPLIANCE_in;
  wire XPIPE_PIPE_CH15_TXDATAVALID_in;
  wire XPIPE_PIPE_CH15_TXDEEMPH_in;
  wire XPIPE_PIPE_CH15_TXDETECTRXLOOPBACK_in;
  wire XPIPE_PIPE_CH15_TXELECIDLE_in;
  wire XPIPE_PIPE_CH15_TXSTARTBLOCK_in;
  wire XPIPE_PIPE_CH15_TXSWING_in;
  wire XPIPE_PIPE_CH1_PHYSTATUS_M_in;
  wire XPIPE_PIPE_CH1_RXDATAVALID_M_in;
  wire XPIPE_PIPE_CH1_RXELECIDLE_M_in;
  wire XPIPE_PIPE_CH1_RXPOLARITY_in;
  wire XPIPE_PIPE_CH1_RXSTARTBLOCK_M_in;
  wire XPIPE_PIPE_CH1_RXTERMINATION_in;
  wire XPIPE_PIPE_CH1_RXVALID_M_in;
  wire XPIPE_PIPE_CH1_TXCOMPLIANCE_in;
  wire XPIPE_PIPE_CH1_TXDATAVALID_in;
  wire XPIPE_PIPE_CH1_TXDEEMPH_in;
  wire XPIPE_PIPE_CH1_TXDETECTRXLOOPBACK_in;
  wire XPIPE_PIPE_CH1_TXELECIDLE_in;
  wire XPIPE_PIPE_CH1_TXSTARTBLOCK_in;
  wire XPIPE_PIPE_CH1_TXSWING_in;
  wire XPIPE_PIPE_CH2_PHYSTATUS_M_in;
  wire XPIPE_PIPE_CH2_RXDATAVALID_M_in;
  wire XPIPE_PIPE_CH2_RXELECIDLE_M_in;
  wire XPIPE_PIPE_CH2_RXPOLARITY_in;
  wire XPIPE_PIPE_CH2_RXSTARTBLOCK_M_in;
  wire XPIPE_PIPE_CH2_RXTERMINATION_in;
  wire XPIPE_PIPE_CH2_RXVALID_M_in;
  wire XPIPE_PIPE_CH2_TXCOMPLIANCE_in;
  wire XPIPE_PIPE_CH2_TXDATAVALID_in;
  wire XPIPE_PIPE_CH2_TXDEEMPH_in;
  wire XPIPE_PIPE_CH2_TXDETECTRXLOOPBACK_in;
  wire XPIPE_PIPE_CH2_TXELECIDLE_in;
  wire XPIPE_PIPE_CH2_TXSTARTBLOCK_in;
  wire XPIPE_PIPE_CH2_TXSWING_in;
  wire XPIPE_PIPE_CH3_PHYSTATUS_M_in;
  wire XPIPE_PIPE_CH3_RXDATAVALID_M_in;
  wire XPIPE_PIPE_CH3_RXELECIDLE_M_in;
  wire XPIPE_PIPE_CH3_RXPOLARITY_in;
  wire XPIPE_PIPE_CH3_RXSTARTBLOCK_M_in;
  wire XPIPE_PIPE_CH3_RXTERMINATION_in;
  wire XPIPE_PIPE_CH3_RXVALID_M_in;
  wire XPIPE_PIPE_CH3_TXCOMPLIANCE_in;
  wire XPIPE_PIPE_CH3_TXDATAVALID_in;
  wire XPIPE_PIPE_CH3_TXDEEMPH_in;
  wire XPIPE_PIPE_CH3_TXDETECTRXLOOPBACK_in;
  wire XPIPE_PIPE_CH3_TXELECIDLE_in;
  wire XPIPE_PIPE_CH3_TXSTARTBLOCK_in;
  wire XPIPE_PIPE_CH3_TXSWING_in;
  wire XPIPE_PIPE_CH4_PHYSTATUS_M_in;
  wire XPIPE_PIPE_CH4_RXDATAVALID_M_in;
  wire XPIPE_PIPE_CH4_RXELECIDLE_M_in;
  wire XPIPE_PIPE_CH4_RXPOLARITY_in;
  wire XPIPE_PIPE_CH4_RXSTARTBLOCK_M_in;
  wire XPIPE_PIPE_CH4_RXTERMINATION_in;
  wire XPIPE_PIPE_CH4_RXVALID_M_in;
  wire XPIPE_PIPE_CH4_TXCOMPLIANCE_in;
  wire XPIPE_PIPE_CH4_TXDATAVALID_in;
  wire XPIPE_PIPE_CH4_TXDEEMPH_in;
  wire XPIPE_PIPE_CH4_TXDETECTRXLOOPBACK_in;
  wire XPIPE_PIPE_CH4_TXELECIDLE_in;
  wire XPIPE_PIPE_CH4_TXSTARTBLOCK_in;
  wire XPIPE_PIPE_CH4_TXSWING_in;
  wire XPIPE_PIPE_CH5_PHYSTATUS_M_in;
  wire XPIPE_PIPE_CH5_RXDATAVALID_M_in;
  wire XPIPE_PIPE_CH5_RXELECIDLE_M_in;
  wire XPIPE_PIPE_CH5_RXPOLARITY_in;
  wire XPIPE_PIPE_CH5_RXSTARTBLOCK_M_in;
  wire XPIPE_PIPE_CH5_RXTERMINATION_in;
  wire XPIPE_PIPE_CH5_RXVALID_M_in;
  wire XPIPE_PIPE_CH5_TXCOMPLIANCE_in;
  wire XPIPE_PIPE_CH5_TXDATAVALID_in;
  wire XPIPE_PIPE_CH5_TXDEEMPH_in;
  wire XPIPE_PIPE_CH5_TXDETECTRXLOOPBACK_in;
  wire XPIPE_PIPE_CH5_TXELECIDLE_in;
  wire XPIPE_PIPE_CH5_TXSTARTBLOCK_in;
  wire XPIPE_PIPE_CH5_TXSWING_in;
  wire XPIPE_PIPE_CH6_PHYSTATUS_M_in;
  wire XPIPE_PIPE_CH6_RXDATAVALID_M_in;
  wire XPIPE_PIPE_CH6_RXELECIDLE_M_in;
  wire XPIPE_PIPE_CH6_RXPOLARITY_in;
  wire XPIPE_PIPE_CH6_RXSTARTBLOCK_M_in;
  wire XPIPE_PIPE_CH6_RXTERMINATION_in;
  wire XPIPE_PIPE_CH6_RXVALID_M_in;
  wire XPIPE_PIPE_CH6_TXCOMPLIANCE_in;
  wire XPIPE_PIPE_CH6_TXDATAVALID_in;
  wire XPIPE_PIPE_CH6_TXDEEMPH_in;
  wire XPIPE_PIPE_CH6_TXDETECTRXLOOPBACK_in;
  wire XPIPE_PIPE_CH6_TXELECIDLE_in;
  wire XPIPE_PIPE_CH6_TXSTARTBLOCK_in;
  wire XPIPE_PIPE_CH6_TXSWING_in;
  wire XPIPE_PIPE_CH7_PHYSTATUS_M_in;
  wire XPIPE_PIPE_CH7_RXDATAVALID_M_in;
  wire XPIPE_PIPE_CH7_RXELECIDLE_M_in;
  wire XPIPE_PIPE_CH7_RXPOLARITY_in;
  wire XPIPE_PIPE_CH7_RXSTARTBLOCK_M_in;
  wire XPIPE_PIPE_CH7_RXTERMINATION_in;
  wire XPIPE_PIPE_CH7_RXVALID_M_in;
  wire XPIPE_PIPE_CH7_TXCOMPLIANCE_in;
  wire XPIPE_PIPE_CH7_TXDATAVALID_in;
  wire XPIPE_PIPE_CH7_TXDEEMPH_in;
  wire XPIPE_PIPE_CH7_TXDETECTRXLOOPBACK_in;
  wire XPIPE_PIPE_CH7_TXELECIDLE_in;
  wire XPIPE_PIPE_CH7_TXSTARTBLOCK_in;
  wire XPIPE_PIPE_CH7_TXSWING_in;
  wire XPIPE_PIPE_CH8_PHYSTATUS_M_in;
  wire XPIPE_PIPE_CH8_RXDATAVALID_M_in;
  wire XPIPE_PIPE_CH8_RXELECIDLE_M_in;
  wire XPIPE_PIPE_CH8_RXPOLARITY_in;
  wire XPIPE_PIPE_CH8_RXSTARTBLOCK_M_in;
  wire XPIPE_PIPE_CH8_RXTERMINATION_in;
  wire XPIPE_PIPE_CH8_RXVALID_M_in;
  wire XPIPE_PIPE_CH8_TXCOMPLIANCE_in;
  wire XPIPE_PIPE_CH8_TXDATAVALID_in;
  wire XPIPE_PIPE_CH8_TXDEEMPH_in;
  wire XPIPE_PIPE_CH8_TXDETECTRXLOOPBACK_in;
  wire XPIPE_PIPE_CH8_TXELECIDLE_in;
  wire XPIPE_PIPE_CH8_TXSTARTBLOCK_in;
  wire XPIPE_PIPE_CH8_TXSWING_in;
  wire XPIPE_PIPE_CH9_PHYSTATUS_M_in;
  wire XPIPE_PIPE_CH9_RXDATAVALID_M_in;
  wire XPIPE_PIPE_CH9_RXELECIDLE_M_in;
  wire XPIPE_PIPE_CH9_RXPOLARITY_in;
  wire XPIPE_PIPE_CH9_RXSTARTBLOCK_M_in;
  wire XPIPE_PIPE_CH9_RXTERMINATION_in;
  wire XPIPE_PIPE_CH9_RXVALID_M_in;
  wire XPIPE_PIPE_CH9_TXCOMPLIANCE_in;
  wire XPIPE_PIPE_CH9_TXDATAVALID_in;
  wire XPIPE_PIPE_CH9_TXDEEMPH_in;
  wire XPIPE_PIPE_CH9_TXDETECTRXLOOPBACK_in;
  wire XPIPE_PIPE_CH9_TXELECIDLE_in;
  wire XPIPE_PIPE_CH9_TXSTARTBLOCK_in;
  wire XPIPE_PIPE_CH9_TXSWING_in;
  wire XPIPE_RXMARGINREQACK_M_1_in;
  wire XPIPE_RXMARGINREQACK_M_2_in;
  wire XPIPE_RXMARGINREQACK_M_3_in;
  wire XPIPE_RXMARGINREQACK_M_in;
  wire XPIPE_RXMARGINREQREQ_1_in;
  wire XPIPE_RXMARGINREQREQ_2_in;
  wire XPIPE_RXMARGINREQREQ_3_in;
  wire XPIPE_RXMARGINREQREQ_in;
  wire XPIPE_RXMARGINRESACK_1_in;
  wire XPIPE_RXMARGINRESACK_2_in;
  wire XPIPE_RXMARGINRESACK_3_in;
  wire XPIPE_RXMARGINRESACK_in;
  wire XPIPE_RXMARGINRESREQ_M_1_in;
  wire XPIPE_RXMARGINRESREQ_M_2_in;
  wire XPIPE_RXMARGINRESREQ_M_3_in;
  wire XPIPE_RXMARGINRESREQ_M_in;
  wire XPSCANCLK_in;
  wire XPSCANENB_in;
  wire XPSCANMODEB_in;
  wire XPSCANRSTB_in;
  wire [11:0] CH0_BUFGTDIV_M_in;
  wire [11:0] CH1_BUFGTDIV_M_in;
  wire [11:0] CH2_BUFGTDIV_M_in;
  wire [11:0] CH3_BUFGTDIV_M_in;
  wire [11:0] UBINTR_in;
  wire [11:0] XPIPE_BUFGTDIV_M_1_in;
  wire [11:0] XPIPE_BUFGTDIV_M_in;
  wire [127:0] CH0_RXDATA_M_in;
  wire [127:0] CH0_TXDATA_in;
  wire [127:0] CH1_RXDATA_M_in;
  wire [127:0] CH1_TXDATA_in;
  wire [127:0] CH2_RXDATA_M_in;
  wire [127:0] CH2_TXDATA_in;
  wire [127:0] CH3_RXDATA_M_in;
  wire [127:0] CH3_TXDATA_in;
  wire [13:0] CTRLRSVDIN1_in;
  wire [15:0] APB3PADDR_in;
  wire [15:0] CH0_GTRSVD_in;
  wire [15:0] CH0_PCSRSVDIN_in;
  wire [15:0] CH0_PCSRSVDOUT_M_in;
  wire [15:0] CH0_PINRSVDAS_M_in;
  wire [15:0] CH0_RXCTRL0_M_in;
  wire [15:0] CH0_RXCTRL1_M_in;
  wire [15:0] CH0_TXCTRL0_in;
  wire [15:0] CH0_TXCTRL1_in;
  wire [15:0] CH1_GTRSVD_in;
  wire [15:0] CH1_PCSRSVDIN_in;
  wire [15:0] CH1_PCSRSVDOUT_M_in;
  wire [15:0] CH1_PINRSVDAS_M_in;
  wire [15:0] CH1_RXCTRL0_M_in;
  wire [15:0] CH1_RXCTRL1_M_in;
  wire [15:0] CH1_TXCTRL0_in;
  wire [15:0] CH1_TXCTRL1_in;
  wire [15:0] CH2_GTRSVD_in;
  wire [15:0] CH2_PCSRSVDIN_in;
  wire [15:0] CH2_PCSRSVDOUT_M_in;
  wire [15:0] CH2_PINRSVDAS_M_in;
  wire [15:0] CH2_RXCTRL0_M_in;
  wire [15:0] CH2_RXCTRL1_M_in;
  wire [15:0] CH2_TXCTRL0_in;
  wire [15:0] CH2_TXCTRL1_in;
  wire [15:0] CH3_GTRSVD_in;
  wire [15:0] CH3_PCSRSVDIN_in;
  wire [15:0] CH3_PCSRSVDOUT_M_in;
  wire [15:0] CH3_PINRSVDAS_M_in;
  wire [15:0] CH3_RXCTRL0_M_in;
  wire [15:0] CH3_RXCTRL1_M_in;
  wire [15:0] CH3_TXCTRL0_in;
  wire [15:0] CH3_TXCTRL1_in;
  wire [15:0] CTRLRSVDIN0_in;
  wire [15:0] DEBUGTRACETDATA_M_in;
  wire [15:0] GPI_in;
  wire [15:0] GPO_M_in;
  wire [15:0] XPSCANIN_in;
  wire [15:0] XPSCANOUT_M_in;
  wire [19:0] CH0_TSTIN_in;
  wire [19:0] CH1_TSTIN_in;
  wire [19:0] CH2_TSTIN_in;
  wire [19:0] CH3_TSTIN_in;
  wire [1:0] CH0_RXCLKCORCNT_M_in;
  wire [1:0] CH0_RXDATAVALID_M_in;
  wire [1:0] CH0_RXHEADERVALID_M_in;
  wire [1:0] CH0_RXPD_in;
  wire [1:0] CH0_RXPHALIGNRESETMASK_in;
  wire [1:0] CH0_RXRESETMODE_in;
  wire [1:0] CH0_RXSTARTOFSEQ_M_in;
  wire [1:0] CH0_TXBUFSTATUS_M_in;
  wire [1:0] CH0_TXDEEMPH_in;
  wire [1:0] CH0_TXPD_in;
  wire [1:0] CH0_TXPHALIGNRESETMASK_in;
  wire [1:0] CH0_TXRESETMODE_in;
  wire [1:0] CH1_RXCLKCORCNT_M_in;
  wire [1:0] CH1_RXDATAVALID_M_in;
  wire [1:0] CH1_RXHEADERVALID_M_in;
  wire [1:0] CH1_RXPD_in;
  wire [1:0] CH1_RXPHALIGNRESETMASK_in;
  wire [1:0] CH1_RXRESETMODE_in;
  wire [1:0] CH1_RXSTARTOFSEQ_M_in;
  wire [1:0] CH1_TXBUFSTATUS_M_in;
  wire [1:0] CH1_TXDEEMPH_in;
  wire [1:0] CH1_TXPD_in;
  wire [1:0] CH1_TXPHALIGNRESETMASK_in;
  wire [1:0] CH1_TXRESETMODE_in;
  wire [1:0] CH2_RXCLKCORCNT_M_in;
  wire [1:0] CH2_RXDATAVALID_M_in;
  wire [1:0] CH2_RXHEADERVALID_M_in;
  wire [1:0] CH2_RXPD_in;
  wire [1:0] CH2_RXPHALIGNRESETMASK_in;
  wire [1:0] CH2_RXRESETMODE_in;
  wire [1:0] CH2_RXSTARTOFSEQ_M_in;
  wire [1:0] CH2_TXBUFSTATUS_M_in;
  wire [1:0] CH2_TXDEEMPH_in;
  wire [1:0] CH2_TXPD_in;
  wire [1:0] CH2_TXPHALIGNRESETMASK_in;
  wire [1:0] CH2_TXRESETMODE_in;
  wire [1:0] CH3_RXCLKCORCNT_M_in;
  wire [1:0] CH3_RXDATAVALID_M_in;
  wire [1:0] CH3_RXHEADERVALID_M_in;
  wire [1:0] CH3_RXPD_in;
  wire [1:0] CH3_RXPHALIGNRESETMASK_in;
  wire [1:0] CH3_RXRESETMODE_in;
  wire [1:0] CH3_RXSTARTOFSEQ_M_in;
  wire [1:0] CH3_TXBUFSTATUS_M_in;
  wire [1:0] CH3_TXDEEMPH_in;
  wire [1:0] CH3_TXPD_in;
  wire [1:0] CH3_TXPHALIGNRESETMASK_in;
  wire [1:0] CH3_TXRESETMODE_in;
  wire [1:0] HSCLK0_LCPLLRESETMASK_in;
  wire [1:0] HSCLK0_RPLLRESETMASK_in;
  wire [1:0] HSCLK1_LCPLLRESETMASK_in;
  wire [1:0] HSCLK1_RPLLRESETMASK_in;
  wire [1:0] RXMARGINREQLANENUM_in;
  wire [1:0] RXMARGINRESLANENUM_M_in;
  wire [1:0] XPIPE_HSDP_RXHEADER_M_1_in;
  wire [1:0] XPIPE_HSDP_RXHEADER_M_2_in;
  wire [1:0] XPIPE_HSDP_RXHEADER_M_in;
  wire [1:0] XPIPE_HSDP_TXHEADER_1_in;
  wire [1:0] XPIPE_HSDP_TXHEADER_2_in;
  wire [1:0] XPIPE_HSDP_TXHEADER_in;
  wire [1:0] XPIPE_PIPE_CH0_POWERDOWN_in;
  wire [1:0] XPIPE_PIPE_CH0_RXCHARISK_M_in;
  wire [1:0] XPIPE_PIPE_CH0_RXSYNCHEADER_M_in;
  wire [1:0] XPIPE_PIPE_CH0_TXCHARISK_in;
  wire [1:0] XPIPE_PIPE_CH0_TXSYNCHEADER_in;
  wire [1:0] XPIPE_PIPE_CH10_POWERDOWN_in;
  wire [1:0] XPIPE_PIPE_CH10_RXCHARISK_M_in;
  wire [1:0] XPIPE_PIPE_CH10_RXSYNCHEADER_M_in;
  wire [1:0] XPIPE_PIPE_CH10_TXCHARISK_in;
  wire [1:0] XPIPE_PIPE_CH10_TXSYNCHEADER_in;
  wire [1:0] XPIPE_PIPE_CH11_POWERDOWN_in;
  wire [1:0] XPIPE_PIPE_CH11_RXCHARISK_M_in;
  wire [1:0] XPIPE_PIPE_CH11_RXSYNCHEADER_M_in;
  wire [1:0] XPIPE_PIPE_CH11_TXCHARISK_in;
  wire [1:0] XPIPE_PIPE_CH11_TXSYNCHEADER_in;
  wire [1:0] XPIPE_PIPE_CH12_POWERDOWN_in;
  wire [1:0] XPIPE_PIPE_CH12_RXCHARISK_M_in;
  wire [1:0] XPIPE_PIPE_CH12_RXSYNCHEADER_M_in;
  wire [1:0] XPIPE_PIPE_CH12_TXCHARISK_in;
  wire [1:0] XPIPE_PIPE_CH12_TXSYNCHEADER_in;
  wire [1:0] XPIPE_PIPE_CH13_POWERDOWN_in;
  wire [1:0] XPIPE_PIPE_CH13_RXCHARISK_M_in;
  wire [1:0] XPIPE_PIPE_CH13_RXSYNCHEADER_M_in;
  wire [1:0] XPIPE_PIPE_CH13_TXCHARISK_in;
  wire [1:0] XPIPE_PIPE_CH13_TXSYNCHEADER_in;
  wire [1:0] XPIPE_PIPE_CH14_POWERDOWN_in;
  wire [1:0] XPIPE_PIPE_CH14_RXCHARISK_M_in;
  wire [1:0] XPIPE_PIPE_CH14_RXSYNCHEADER_M_in;
  wire [1:0] XPIPE_PIPE_CH14_TXCHARISK_in;
  wire [1:0] XPIPE_PIPE_CH14_TXSYNCHEADER_in;
  wire [1:0] XPIPE_PIPE_CH15_POWERDOWN_in;
  wire [1:0] XPIPE_PIPE_CH15_RXCHARISK_M_in;
  wire [1:0] XPIPE_PIPE_CH15_RXSYNCHEADER_M_in;
  wire [1:0] XPIPE_PIPE_CH15_TXCHARISK_in;
  wire [1:0] XPIPE_PIPE_CH15_TXSYNCHEADER_in;
  wire [1:0] XPIPE_PIPE_CH1_POWERDOWN_in;
  wire [1:0] XPIPE_PIPE_CH1_RXCHARISK_M_in;
  wire [1:0] XPIPE_PIPE_CH1_RXSYNCHEADER_M_in;
  wire [1:0] XPIPE_PIPE_CH1_TXCHARISK_in;
  wire [1:0] XPIPE_PIPE_CH1_TXSYNCHEADER_in;
  wire [1:0] XPIPE_PIPE_CH2_POWERDOWN_in;
  wire [1:0] XPIPE_PIPE_CH2_RXCHARISK_M_in;
  wire [1:0] XPIPE_PIPE_CH2_RXSYNCHEADER_M_in;
  wire [1:0] XPIPE_PIPE_CH2_TXCHARISK_in;
  wire [1:0] XPIPE_PIPE_CH2_TXSYNCHEADER_in;
  wire [1:0] XPIPE_PIPE_CH3_POWERDOWN_in;
  wire [1:0] XPIPE_PIPE_CH3_RXCHARISK_M_in;
  wire [1:0] XPIPE_PIPE_CH3_RXSYNCHEADER_M_in;
  wire [1:0] XPIPE_PIPE_CH3_TXCHARISK_in;
  wire [1:0] XPIPE_PIPE_CH3_TXSYNCHEADER_in;
  wire [1:0] XPIPE_PIPE_CH4_POWERDOWN_in;
  wire [1:0] XPIPE_PIPE_CH4_RXCHARISK_M_in;
  wire [1:0] XPIPE_PIPE_CH4_RXSYNCHEADER_M_in;
  wire [1:0] XPIPE_PIPE_CH4_TXCHARISK_in;
  wire [1:0] XPIPE_PIPE_CH4_TXSYNCHEADER_in;
  wire [1:0] XPIPE_PIPE_CH5_POWERDOWN_in;
  wire [1:0] XPIPE_PIPE_CH5_RXCHARISK_M_in;
  wire [1:0] XPIPE_PIPE_CH5_RXSYNCHEADER_M_in;
  wire [1:0] XPIPE_PIPE_CH5_TXCHARISK_in;
  wire [1:0] XPIPE_PIPE_CH5_TXSYNCHEADER_in;
  wire [1:0] XPIPE_PIPE_CH6_POWERDOWN_in;
  wire [1:0] XPIPE_PIPE_CH6_RXCHARISK_M_in;
  wire [1:0] XPIPE_PIPE_CH6_RXSYNCHEADER_M_in;
  wire [1:0] XPIPE_PIPE_CH6_TXCHARISK_in;
  wire [1:0] XPIPE_PIPE_CH6_TXSYNCHEADER_in;
  wire [1:0] XPIPE_PIPE_CH7_POWERDOWN_in;
  wire [1:0] XPIPE_PIPE_CH7_RXCHARISK_M_in;
  wire [1:0] XPIPE_PIPE_CH7_RXSYNCHEADER_M_in;
  wire [1:0] XPIPE_PIPE_CH7_TXCHARISK_in;
  wire [1:0] XPIPE_PIPE_CH7_TXSYNCHEADER_in;
  wire [1:0] XPIPE_PIPE_CH8_POWERDOWN_in;
  wire [1:0] XPIPE_PIPE_CH8_RXCHARISK_M_in;
  wire [1:0] XPIPE_PIPE_CH8_RXSYNCHEADER_M_in;
  wire [1:0] XPIPE_PIPE_CH8_TXCHARISK_in;
  wire [1:0] XPIPE_PIPE_CH8_TXSYNCHEADER_in;
  wire [1:0] XPIPE_PIPE_CH9_POWERDOWN_in;
  wire [1:0] XPIPE_PIPE_CH9_RXCHARISK_M_in;
  wire [1:0] XPIPE_PIPE_CH9_RXSYNCHEADER_M_in;
  wire [1:0] XPIPE_PIPE_CH9_TXCHARISK_in;
  wire [1:0] XPIPE_PIPE_CH9_TXSYNCHEADER_in;
  wire [1:0] XPIPE_RXMARGINREQLANENUM_1_in;
  wire [1:0] XPIPE_RXMARGINREQLANENUM_2_in;
  wire [1:0] XPIPE_RXMARGINREQLANENUM_3_in;
  wire [1:0] XPIPE_RXMARGINREQLANENUM_in;
  wire [1:0] XPIPE_RXMARGINRESLANENUM_M_1_in;
  wire [1:0] XPIPE_RXMARGINRESLANENUM_M_2_in;
  wire [1:0] XPIPE_RXMARGINRESLANENUM_M_3_in;
  wire [1:0] XPIPE_RXMARGINRESLANENUM_M_in;
  wire [25:0] HSCLK0_LCPLLSDMDATA_in;
  wire [25:0] HSCLK0_RPLLSDMDATA_in;
  wire [25:0] HSCLK1_LCPLLSDMDATA_in;
  wire [25:0] HSCLK1_RPLLSDMDATA_in;
  wire [2:0] CH0_LOOPBACK_in;
  wire [2:0] CH0_RXBUFSTATUS_M_in;
  wire [2:0] CH0_RXSTATUS_M_in;
  wire [2:0] CH0_TXMARGIN_in;
  wire [2:0] CH0_TXPMARESETMASK_in;
  wire [2:0] CH1_LOOPBACK_in;
  wire [2:0] CH1_RXBUFSTATUS_M_in;
  wire [2:0] CH1_RXSTATUS_M_in;
  wire [2:0] CH1_TXMARGIN_in;
  wire [2:0] CH1_TXPMARESETMASK_in;
  wire [2:0] CH2_LOOPBACK_in;
  wire [2:0] CH2_RXBUFSTATUS_M_in;
  wire [2:0] CH2_RXSTATUS_M_in;
  wire [2:0] CH2_TXMARGIN_in;
  wire [2:0] CH2_TXPMARESETMASK_in;
  wire [2:0] CH3_LOOPBACK_in;
  wire [2:0] CH3_RXBUFSTATUS_M_in;
  wire [2:0] CH3_RXSTATUS_M_in;
  wire [2:0] CH3_TXMARGIN_in;
  wire [2:0] CH3_TXPMARESETMASK_in;
  wire [2:0] HSCLK0_LCPLLREFCLKSEL_in;
  wire [2:0] HSCLK0_RPLLREFCLKSEL_in;
  wire [2:0] HSCLK1_LCPLLREFCLKSEL_in;
  wire [2:0] HSCLK1_RPLLREFCLKSEL_in;
  wire [2:0] XPIPE_PCIE_RATE_1_in;
  wire [2:0] XPIPE_PCIE_RATE_in;
  wire [2:0] XPIPE_PIPE_CH0_RXSTATUS_M_in;
  wire [2:0] XPIPE_PIPE_CH0_TXMARGIN_in;
  wire [2:0] XPIPE_PIPE_CH10_RXSTATUS_M_in;
  wire [2:0] XPIPE_PIPE_CH10_TXMARGIN_in;
  wire [2:0] XPIPE_PIPE_CH11_RXSTATUS_M_in;
  wire [2:0] XPIPE_PIPE_CH11_TXMARGIN_in;
  wire [2:0] XPIPE_PIPE_CH12_RXSTATUS_M_in;
  wire [2:0] XPIPE_PIPE_CH12_TXMARGIN_in;
  wire [2:0] XPIPE_PIPE_CH13_RXSTATUS_M_in;
  wire [2:0] XPIPE_PIPE_CH13_TXMARGIN_in;
  wire [2:0] XPIPE_PIPE_CH14_RXSTATUS_M_in;
  wire [2:0] XPIPE_PIPE_CH14_TXMARGIN_in;
  wire [2:0] XPIPE_PIPE_CH15_RXSTATUS_M_in;
  wire [2:0] XPIPE_PIPE_CH15_TXMARGIN_in;
  wire [2:0] XPIPE_PIPE_CH1_RXSTATUS_M_in;
  wire [2:0] XPIPE_PIPE_CH1_TXMARGIN_in;
  wire [2:0] XPIPE_PIPE_CH2_RXSTATUS_M_in;
  wire [2:0] XPIPE_PIPE_CH2_TXMARGIN_in;
  wire [2:0] XPIPE_PIPE_CH3_RXSTATUS_M_in;
  wire [2:0] XPIPE_PIPE_CH3_TXMARGIN_in;
  wire [2:0] XPIPE_PIPE_CH4_RXSTATUS_M_in;
  wire [2:0] XPIPE_PIPE_CH4_TXMARGIN_in;
  wire [2:0] XPIPE_PIPE_CH5_RXSTATUS_M_in;
  wire [2:0] XPIPE_PIPE_CH5_TXMARGIN_in;
  wire [2:0] XPIPE_PIPE_CH6_RXSTATUS_M_in;
  wire [2:0] XPIPE_PIPE_CH6_TXMARGIN_in;
  wire [2:0] XPIPE_PIPE_CH7_RXSTATUS_M_in;
  wire [2:0] XPIPE_PIPE_CH7_TXMARGIN_in;
  wire [2:0] XPIPE_PIPE_CH8_RXSTATUS_M_in;
  wire [2:0] XPIPE_PIPE_CH8_TXMARGIN_in;
  wire [2:0] XPIPE_PIPE_CH9_RXSTATUS_M_in;
  wire [2:0] XPIPE_PIPE_CH9_TXMARGIN_in;
  wire [31:0] APB3PRDATA_M_in;
  wire [31:0] APB3PWDATA_in;
  wire [31:0] CH0_DMONITOROUT_M_in;
  wire [31:0] CH1_DMONITOROUT_M_in;
  wire [31:0] CH2_DMONITOROUT_M_in;
  wire [31:0] CH3_DMONITOROUT_M_in;
  wire [31:0] CTRLRSVDOUT_M_in;
  wire [31:0] M0_AXIS_TDATA_M_in;
  wire [31:0] M1_AXIS_TDATA_M_in;
  wire [31:0] M2_AXIS_TDATA_M_in;
  wire [31:0] S0_AXIS_TDATA_in;
  wire [31:0] S1_AXIS_TDATA_in;
  wire [31:0] S2_AXIS_TDATA_in;
  wire [31:0] XPIPE_PIPE_CH0_RXDATA_M_in;
  wire [31:0] XPIPE_PIPE_CH0_TXDATA_in;
  wire [31:0] XPIPE_PIPE_CH10_RXDATA_M_in;
  wire [31:0] XPIPE_PIPE_CH10_TXDATA_in;
  wire [31:0] XPIPE_PIPE_CH11_RXDATA_M_in;
  wire [31:0] XPIPE_PIPE_CH11_TXDATA_in;
  wire [31:0] XPIPE_PIPE_CH12_RXDATA_M_in;
  wire [31:0] XPIPE_PIPE_CH12_TXDATA_in;
  wire [31:0] XPIPE_PIPE_CH13_RXDATA_M_in;
  wire [31:0] XPIPE_PIPE_CH13_TXDATA_in;
  wire [31:0] XPIPE_PIPE_CH14_RXDATA_M_in;
  wire [31:0] XPIPE_PIPE_CH14_TXDATA_in;
  wire [31:0] XPIPE_PIPE_CH15_RXDATA_M_in;
  wire [31:0] XPIPE_PIPE_CH15_TXDATA_in;
  wire [31:0] XPIPE_PIPE_CH1_RXDATA_M_in;
  wire [31:0] XPIPE_PIPE_CH1_TXDATA_in;
  wire [31:0] XPIPE_PIPE_CH2_RXDATA_M_in;
  wire [31:0] XPIPE_PIPE_CH2_TXDATA_in;
  wire [31:0] XPIPE_PIPE_CH3_RXDATA_M_in;
  wire [31:0] XPIPE_PIPE_CH3_TXDATA_in;
  wire [31:0] XPIPE_PIPE_CH4_RXDATA_M_in;
  wire [31:0] XPIPE_PIPE_CH4_TXDATA_in;
  wire [31:0] XPIPE_PIPE_CH5_RXDATA_M_in;
  wire [31:0] XPIPE_PIPE_CH5_TXDATA_in;
  wire [31:0] XPIPE_PIPE_CH6_RXDATA_M_in;
  wire [31:0] XPIPE_PIPE_CH6_TXDATA_in;
  wire [31:0] XPIPE_PIPE_CH7_RXDATA_M_in;
  wire [31:0] XPIPE_PIPE_CH7_TXDATA_in;
  wire [31:0] XPIPE_PIPE_CH8_RXDATA_M_in;
  wire [31:0] XPIPE_PIPE_CH8_TXDATA_in;
  wire [31:0] XPIPE_PIPE_CH9_RXDATA_M_in;
  wire [31:0] XPIPE_PIPE_CH9_TXDATA_in;
  wire [3:0] CH0_BUFGTCEMASK_M_in;
  wire [3:0] CH0_BUFGTRSTMASK_M_in;
  wire [3:0] CH0_RXPRBSSEL_in;
  wire [3:0] CH0_SCANIN_in;
  wire [3:0] CH0_SCANOUT_M_in;
  wire [3:0] CH0_TXPRBSSEL_in;
  wire [3:0] CH1_BUFGTCEMASK_M_in;
  wire [3:0] CH1_BUFGTRSTMASK_M_in;
  wire [3:0] CH1_RXPRBSSEL_in;
  wire [3:0] CH1_SCANIN_in;
  wire [3:0] CH1_SCANOUT_M_in;
  wire [3:0] CH1_TXPRBSSEL_in;
  wire [3:0] CH2_BUFGTCEMASK_M_in;
  wire [3:0] CH2_BUFGTRSTMASK_M_in;
  wire [3:0] CH2_RXPRBSSEL_in;
  wire [3:0] CH2_SCANIN_in;
  wire [3:0] CH2_SCANOUT_M_in;
  wire [3:0] CH2_TXPRBSSEL_in;
  wire [3:0] CH3_BUFGTCEMASK_M_in;
  wire [3:0] CH3_BUFGTRSTMASK_M_in;
  wire [3:0] CH3_RXPRBSSEL_in;
  wire [3:0] CH3_SCANIN_in;
  wire [3:0] CH3_SCANOUT_M_in;
  wire [3:0] CH3_TXPRBSSEL_in;
  wire [3:0] MSTRXRESETDONE_M_in;
  wire [3:0] MSTRXRESET_in;
  wire [3:0] MSTTXRESETDONE_M_in;
  wire [3:0] MSTTXRESET_in;
  wire [3:0] RXMARGINREQCMD_in;
  wire [3:0] RXMARGINRESCMD_M_in;
  wire [3:0] SCANIN_in;
  wire [3:0] SCANOUT_M_in;
  wire [3:0] XPIPE_BUFGTCE_MASK_M_1_in;
  wire [3:0] XPIPE_BUFGTCE_MASK_M_in;
  wire [3:0] XPIPE_BUFGTRST_MASK_M_1_in;
  wire [3:0] XPIPE_BUFGTRST_MASK_M_in;
  wire [3:0] XPIPE_RXMARGINREQCMD_1_in;
  wire [3:0] XPIPE_RXMARGINREQCMD_2_in;
  wire [3:0] XPIPE_RXMARGINREQCMD_3_in;
  wire [3:0] XPIPE_RXMARGINREQCMD_in;
  wire [3:0] XPIPE_RXMARGINRESCMD_M_1_in;
  wire [3:0] XPIPE_RXMARGINRESCMD_M_2_in;
  wire [3:0] XPIPE_RXMARGINRESCMD_M_3_in;
  wire [3:0] XPIPE_RXMARGINRESCMD_M_in;
  wire [4:0] BGRCALOVRD_in;
  wire [4:0] CH0_RXCHBONDI_in;
  wire [4:0] CH0_RXCHBONDO_M_in;
  wire [4:0] CH0_RXPCSRESETMASK_in;
  wire [4:0] CH0_TXDIFFCTRL_in;
  wire [4:0] CH0_TXPIPPMSTEPSIZE_in;
  wire [4:0] CH0_TXPOSTCURSOR_in;
  wire [4:0] CH0_TXPRECURSOR_in;
  wire [4:0] CH1_RXCHBONDI_in;
  wire [4:0] CH1_RXCHBONDO_M_in;
  wire [4:0] CH1_RXPCSRESETMASK_in;
  wire [4:0] CH1_TXDIFFCTRL_in;
  wire [4:0] CH1_TXPIPPMSTEPSIZE_in;
  wire [4:0] CH1_TXPOSTCURSOR_in;
  wire [4:0] CH1_TXPRECURSOR_in;
  wire [4:0] CH2_RXCHBONDI_in;
  wire [4:0] CH2_RXCHBONDO_M_in;
  wire [4:0] CH2_RXPCSRESETMASK_in;
  wire [4:0] CH2_TXDIFFCTRL_in;
  wire [4:0] CH2_TXPIPPMSTEPSIZE_in;
  wire [4:0] CH2_TXPOSTCURSOR_in;
  wire [4:0] CH2_TXPRECURSOR_in;
  wire [4:0] CH3_RXCHBONDI_in;
  wire [4:0] CH3_RXCHBONDO_M_in;
  wire [4:0] CH3_RXPCSRESETMASK_in;
  wire [4:0] CH3_TXDIFFCTRL_in;
  wire [4:0] CH3_TXPIPPMSTEPSIZE_in;
  wire [4:0] CH3_TXPOSTCURSOR_in;
  wire [4:0] CH3_TXPRECURSOR_in;
  wire [4:0] RCALOUT_M_in;
  wire [4:0] XPIPE_PIPE_CH0_TXPOSTCURSOR_in;
  wire [4:0] XPIPE_PIPE_CH0_TXPRECURSOR_in;
  wire [4:0] XPIPE_PIPE_CH10_TXPOSTCURSOR_in;
  wire [4:0] XPIPE_PIPE_CH10_TXPRECURSOR_in;
  wire [4:0] XPIPE_PIPE_CH11_TXPOSTCURSOR_in;
  wire [4:0] XPIPE_PIPE_CH11_TXPRECURSOR_in;
  wire [4:0] XPIPE_PIPE_CH12_TXPOSTCURSOR_in;
  wire [4:0] XPIPE_PIPE_CH12_TXPRECURSOR_in;
  wire [4:0] XPIPE_PIPE_CH13_TXPOSTCURSOR_in;
  wire [4:0] XPIPE_PIPE_CH13_TXPRECURSOR_in;
  wire [4:0] XPIPE_PIPE_CH14_TXPOSTCURSOR_in;
  wire [4:0] XPIPE_PIPE_CH14_TXPRECURSOR_in;
  wire [4:0] XPIPE_PIPE_CH15_TXPOSTCURSOR_in;
  wire [4:0] XPIPE_PIPE_CH15_TXPRECURSOR_in;
  wire [4:0] XPIPE_PIPE_CH1_TXPOSTCURSOR_in;
  wire [4:0] XPIPE_PIPE_CH1_TXPRECURSOR_in;
  wire [4:0] XPIPE_PIPE_CH2_TXPOSTCURSOR_in;
  wire [4:0] XPIPE_PIPE_CH2_TXPRECURSOR_in;
  wire [4:0] XPIPE_PIPE_CH3_TXPOSTCURSOR_in;
  wire [4:0] XPIPE_PIPE_CH3_TXPRECURSOR_in;
  wire [4:0] XPIPE_PIPE_CH4_TXPOSTCURSOR_in;
  wire [4:0] XPIPE_PIPE_CH4_TXPRECURSOR_in;
  wire [4:0] XPIPE_PIPE_CH5_TXPOSTCURSOR_in;
  wire [4:0] XPIPE_PIPE_CH5_TXPRECURSOR_in;
  wire [4:0] XPIPE_PIPE_CH6_TXPOSTCURSOR_in;
  wire [4:0] XPIPE_PIPE_CH6_TXPRECURSOR_in;
  wire [4:0] XPIPE_PIPE_CH7_TXPOSTCURSOR_in;
  wire [4:0] XPIPE_PIPE_CH7_TXPRECURSOR_in;
  wire [4:0] XPIPE_PIPE_CH8_TXPOSTCURSOR_in;
  wire [4:0] XPIPE_PIPE_CH8_TXPRECURSOR_in;
  wire [4:0] XPIPE_PIPE_CH9_TXPOSTCURSOR_in;
  wire [4:0] XPIPE_PIPE_CH9_TXPRECURSOR_in;
  wire [5:0] CH0_RXHEADER_M_in;
  wire [5:0] CH0_TXHEADER_in;
  wire [5:0] CH1_RXHEADER_M_in;
  wire [5:0] CH1_TXHEADER_in;
  wire [5:0] CH2_RXHEADER_M_in;
  wire [5:0] CH2_TXHEADER_in;
  wire [5:0] CH3_RXHEADER_M_in;
  wire [5:0] CH3_TXHEADER_in;
  wire [5:0] PCIELTSSM_in;
  wire [5:0] XPIPE_PCIELTSSMSTATE_1_in;
  wire [5:0] XPIPE_PCIELTSSMSTATE_in;
  wire [6:0] CH0_RXPMARESETMASK_in;
  wire [6:0] CH0_TXMAINCURSOR_in;
  wire [6:0] CH0_TXSEQUENCE_in;
  wire [6:0] CH1_RXPMARESETMASK_in;
  wire [6:0] CH1_TXMAINCURSOR_in;
  wire [6:0] CH1_TXSEQUENCE_in;
  wire [6:0] CH2_RXPMARESETMASK_in;
  wire [6:0] CH2_TXMAINCURSOR_in;
  wire [6:0] CH2_TXSEQUENCE_in;
  wire [6:0] CH3_RXPMARESETMASK_in;
  wire [6:0] CH3_TXMAINCURSOR_in;
  wire [6:0] CH3_TXSEQUENCE_in;
  wire [6:0] XPIPE_HSDP_TXSEQUENCE_1_in;
  wire [6:0] XPIPE_HSDP_TXSEQUENCE_2_in;
  wire [6:0] XPIPE_HSDP_TXSEQUENCE_in;
  wire [6:0] XPIPE_PIPE_CH0_TXMAINCURSOR_in;
  wire [6:0] XPIPE_PIPE_CH10_TXMAINCURSOR_in;
  wire [6:0] XPIPE_PIPE_CH11_TXMAINCURSOR_in;
  wire [6:0] XPIPE_PIPE_CH12_TXMAINCURSOR_in;
  wire [6:0] XPIPE_PIPE_CH13_TXMAINCURSOR_in;
  wire [6:0] XPIPE_PIPE_CH14_TXMAINCURSOR_in;
  wire [6:0] XPIPE_PIPE_CH15_TXMAINCURSOR_in;
  wire [6:0] XPIPE_PIPE_CH1_TXMAINCURSOR_in;
  wire [6:0] XPIPE_PIPE_CH2_TXMAINCURSOR_in;
  wire [6:0] XPIPE_PIPE_CH3_TXMAINCURSOR_in;
  wire [6:0] XPIPE_PIPE_CH4_TXMAINCURSOR_in;
  wire [6:0] XPIPE_PIPE_CH5_TXMAINCURSOR_in;
  wire [6:0] XPIPE_PIPE_CH6_TXMAINCURSOR_in;
  wire [6:0] XPIPE_PIPE_CH7_TXMAINCURSOR_in;
  wire [6:0] XPIPE_PIPE_CH8_TXMAINCURSOR_in;
  wire [6:0] XPIPE_PIPE_CH9_TXMAINCURSOR_in;
  wire [7:0] CH0_RX10GSTAT_M_in;
  wire [7:0] CH0_RXCTRL2_M_in;
  wire [7:0] CH0_RXCTRL3_M_in;
  wire [7:0] CH0_RXDATAEXTENDRSVD_M_in;
  wire [7:0] CH0_RXRATE_in;
  wire [7:0] CH0_TXCTRL2_in;
  wire [7:0] CH0_TXDATAEXTENDRSVD_in;
  wire [7:0] CH0_TXRATE_in;
  wire [7:0] CH1_RX10GSTAT_M_in;
  wire [7:0] CH1_RXCTRL2_M_in;
  wire [7:0] CH1_RXCTRL3_M_in;
  wire [7:0] CH1_RXDATAEXTENDRSVD_M_in;
  wire [7:0] CH1_RXRATE_in;
  wire [7:0] CH1_TXCTRL2_in;
  wire [7:0] CH1_TXDATAEXTENDRSVD_in;
  wire [7:0] CH1_TXRATE_in;
  wire [7:0] CH2_RX10GSTAT_M_in;
  wire [7:0] CH2_RXCTRL2_M_in;
  wire [7:0] CH2_RXCTRL3_M_in;
  wire [7:0] CH2_RXDATAEXTENDRSVD_M_in;
  wire [7:0] CH2_RXRATE_in;
  wire [7:0] CH2_TXCTRL2_in;
  wire [7:0] CH2_TXDATAEXTENDRSVD_in;
  wire [7:0] CH2_TXRATE_in;
  wire [7:0] CH3_RX10GSTAT_M_in;
  wire [7:0] CH3_RXCTRL2_M_in;
  wire [7:0] CH3_RXCTRL3_M_in;
  wire [7:0] CH3_RXDATAEXTENDRSVD_M_in;
  wire [7:0] CH3_RXRATE_in;
  wire [7:0] CH3_TXCTRL2_in;
  wire [7:0] CH3_TXDATAEXTENDRSVD_in;
  wire [7:0] CH3_TXRATE_in;
  wire [7:0] HSCLK0_LCPLLFBDIV_in;
  wire [7:0] HSCLK0_LCPLLRSVD0_in;
  wire [7:0] HSCLK0_LCPLLRSVD1_in;
  wire [7:0] HSCLK0_LCPLLRSVDOUT_M_in;
  wire [7:0] HSCLK0_RPLLFBDIV_in;
  wire [7:0] HSCLK0_RPLLRSVD0_in;
  wire [7:0] HSCLK0_RPLLRSVD1_in;
  wire [7:0] HSCLK0_RPLLRSVDOUT_M_in;
  wire [7:0] HSCLK1_LCPLLFBDIV_in;
  wire [7:0] HSCLK1_LCPLLRSVD0_in;
  wire [7:0] HSCLK1_LCPLLRSVD1_in;
  wire [7:0] HSCLK1_LCPLLRSVDOUT_M_in;
  wire [7:0] HSCLK1_RPLLFBDIV_in;
  wire [7:0] HSCLK1_RPLLRSVD0_in;
  wire [7:0] HSCLK1_RPLLRSVD1_in;
  wire [7:0] HSCLK1_RPLLRSVDOUT_M_in;
  wire [7:0] RXMARGINREQPAYLD_in;
  wire [7:0] RXMARGINRESPAYLD_M_in;
  wire [7:0] XPIPE_RXMARGINREQPAYLOAD_1_in;
  wire [7:0] XPIPE_RXMARGINREQPAYLOAD_2_in;
  wire [7:0] XPIPE_RXMARGINREQPAYLOAD_3_in;
  wire [7:0] XPIPE_RXMARGINREQPAYLOAD_in;
  wire [7:0] XPIPE_RXMARGINRESPAYLOAD_M_1_in;
  wire [7:0] XPIPE_RXMARGINRESPAYLOAD_M_2_in;
  wire [7:0] XPIPE_RXMARGINRESPAYLOAD_M_3_in;
  wire [7:0] XPIPE_RXMARGINRESPAYLOAD_M_in;

`ifdef XIL_TIMING
  wire XPIPE_GT_PIPECLK_1_delay;
  wire XPIPE_GT_PIPECLK_delay;
  wire [127:0] CH0_TXDATA_delay;
  wire [127:0] CH1_TXDATA_delay;
  wire [127:0] CH2_TXDATA_delay;
  wire [127:0] CH3_TXDATA_delay;
  wire [15:0] CTRLRSVDIN0_delay;
`endif

  assign ALTCLK_M = ALTCLK_M_out;
  assign APB3CLK_M = APB3CLK_M_out;
  assign APB3PADDR_M = APB3PADDR_M_out;
  assign APB3PENABLE_M = APB3PENABLE_M_out;
  assign APB3PRDATA = APB3PRDATA_out;
  assign APB3PREADY = APB3PREADY_out;
  assign APB3PRESETN_M = APB3PRESETN_M_out;
  assign APB3PSEL_M = APB3PSEL_M_out;
  assign APB3PSLVERR = APB3PSLVERR_out;
  assign APB3PWDATA_M = APB3PWDATA_M_out;
  assign APB3PWRITE_M = APB3PWRITE_M_out;
  assign AXISCLK_M = AXISCLK_M_out;
  assign BGBYPASSB_M = BGBYPASSB_M_out;
  assign BGMONITORENB_M = BGMONITORENB_M_out;
  assign BGPDB_M = BGPDB_M_out;
  assign BGRCALOVRDENB_M = BGRCALOVRDENB_M_out;
  assign BGRCALOVRD_M = BGRCALOVRD_M_out;
  assign CH0_BUFGTCE = CH0_BUFGTCE_out;
  assign CH0_BUFGTCEMASK = CH0_BUFGTCEMASK_out;
  assign CH0_BUFGTDIV = CH0_BUFGTDIV_out;
  assign CH0_BUFGTRST = CH0_BUFGTRST_out;
  assign CH0_BUFGTRSTMASK = CH0_BUFGTRSTMASK_out;
  assign CH0_CDRBMCDRREQ_M = CH0_CDRBMCDRREQ_M_out;
  assign CH0_CDRFREQOS_M = CH0_CDRFREQOS_M_out;
  assign CH0_CDRINCPCTRL_M = CH0_CDRINCPCTRL_M_out;
  assign CH0_CDRSTEPDIR_M = CH0_CDRSTEPDIR_M_out;
  assign CH0_CDRSTEPSQ_M = CH0_CDRSTEPSQ_M_out;
  assign CH0_CDRSTEPSX_M = CH0_CDRSTEPSX_M_out;
  assign CH0_CFOKOVRDFINISH_M = CH0_CFOKOVRDFINISH_M_out;
  assign CH0_CFOKOVRDPULSE_M = CH0_CFOKOVRDPULSE_M_out;
  assign CH0_CFOKOVRDRDY0 = CH0_CFOKOVRDRDY0_out;
  assign CH0_CFOKOVRDRDY1 = CH0_CFOKOVRDRDY1_out;
  assign CH0_CFOKOVRDSTART_M = CH0_CFOKOVRDSTART_M_out;
  assign CH0_CLKRSVD0_M = CH0_CLKRSVD0_M_out;
  assign CH0_CLKRSVD1_M = CH0_CLKRSVD1_M_out;
  assign CH0_DMONFIFORESET_M = CH0_DMONFIFORESET_M_out;
  assign CH0_DMONITORCLK_M = CH0_DMONITORCLK_M_out;
  assign CH0_DMONITOROUT = CH0_DMONITOROUT_out;
  assign CH0_EYESCANDATAERROR = CH0_EYESCANDATAERROR_out;
  assign CH0_EYESCANRESET_M = CH0_EYESCANRESET_M_out;
  assign CH0_EYESCANTRIGGER_M = CH0_EYESCANTRIGGER_M_out;
  assign CH0_GTRSVD_M = CH0_GTRSVD_M_out;
  assign CH0_GTRXRESET_M = CH0_GTRXRESET_M_out;
  assign CH0_GTTXRESET_M = CH0_GTTXRESET_M_out;
  assign CH0_HSDPPCSRESET_M = CH0_HSDPPCSRESET_M_out;
  assign CH0_ILORESETDONE = CH0_ILORESETDONE_out;
  assign CH0_ILORESETMASK_M = CH0_ILORESETMASK_M_out;
  assign CH0_ILORESET_M = CH0_ILORESET_M_out;
  assign CH0_LOOPBACK_M = CH0_LOOPBACK_M_out;
  assign CH0_PCIERSTB_M = CH0_PCIERSTB_M_out;
  assign CH0_PCSRSVDIN_M = CH0_PCSRSVDIN_M_out;
  assign CH0_PCSRSVDOUT = CH0_PCSRSVDOUT_out;
  assign CH0_PHYESMADAPTSAVE_M = CH0_PHYESMADAPTSAVE_M_out;
  assign CH0_PHYREADY = CH0_PHYREADY_out;
  assign CH0_PHYSTATUS = CH0_PHYSTATUS_out;
  assign CH0_PINRSVDAS = CH0_PINRSVDAS_out;
  assign CH0_RESETEXCEPTION = CH0_RESETEXCEPTION_out;
  assign CH0_RX10GSTAT = CH0_RX10GSTAT_out;
  assign CH0_RXBUFSTATUS = CH0_RXBUFSTATUS_out;
  assign CH0_RXBYTEISALIGNED = CH0_RXBYTEISALIGNED_out;
  assign CH0_RXBYTEREALIGN = CH0_RXBYTEREALIGN_out;
  assign CH0_RXCDRHOLD_M = CH0_RXCDRHOLD_M_out;
  assign CH0_RXCDRLOCK = CH0_RXCDRLOCK_out;
  assign CH0_RXCDROVRDEN_M = CH0_RXCDROVRDEN_M_out;
  assign CH0_RXCDRPHDONE = CH0_RXCDRPHDONE_out;
  assign CH0_RXCDRRESET_M = CH0_RXCDRRESET_M_out;
  assign CH0_RXCHANBONDSEQ = CH0_RXCHANBONDSEQ_out;
  assign CH0_RXCHANISALIGNED = CH0_RXCHANISALIGNED_out;
  assign CH0_RXCHANREALIGN = CH0_RXCHANREALIGN_out;
  assign CH0_RXCHBONDI_M = CH0_RXCHBONDI_M_out;
  assign CH0_RXCHBONDO = CH0_RXCHBONDO_out;
  assign CH0_RXCLKCORCNT = CH0_RXCLKCORCNT_out;
  assign CH0_RXCOMINITDET = CH0_RXCOMINITDET_out;
  assign CH0_RXCOMMADET = CH0_RXCOMMADET_out;
  assign CH0_RXCOMSASDET = CH0_RXCOMSASDET_out;
  assign CH0_RXCOMWAKEDET = CH0_RXCOMWAKEDET_out;
  assign CH0_RXCTRL0 = CH0_RXCTRL0_out;
  assign CH0_RXCTRL1 = CH0_RXCTRL1_out;
  assign CH0_RXCTRL2 = CH0_RXCTRL2_out;
  assign CH0_RXCTRL3 = CH0_RXCTRL3_out;
  assign CH0_RXDAPICODEOVRDEN_M = CH0_RXDAPICODEOVRDEN_M_out;
  assign CH0_RXDAPICODERESET_M = CH0_RXDAPICODERESET_M_out;
  assign CH0_RXDATA = CH0_RXDATA_out;
  assign CH0_RXDATAEXTENDRSVD = CH0_RXDATAEXTENDRSVD_out;
  assign CH0_RXDATAVALID = CH0_RXDATAVALID_out;
  assign CH0_RXDCCDONE = CH0_RXDCCDONE_out;
  assign CH0_RXDLYALIGNERR = CH0_RXDLYALIGNERR_out;
  assign CH0_RXDLYALIGNPROG = CH0_RXDLYALIGNPROG_out;
  assign CH0_RXDLYALIGNREQ_M = CH0_RXDLYALIGNREQ_M_out;
  assign CH0_RXELECIDLE = CH0_RXELECIDLE_out;
  assign CH0_RXEQTRAINING_M = CH0_RXEQTRAINING_M_out;
  assign CH0_RXFINEALIGNDONE = CH0_RXFINEALIGNDONE_out;
  assign CH0_RXGEARBOXSLIP_M = CH0_RXGEARBOXSLIP_M_out;
  assign CH0_RXHEADER = CH0_RXHEADER_out;
  assign CH0_RXHEADERVALID = CH0_RXHEADERVALID_out;
  assign CH0_RXLATCLK_M = CH0_RXLATCLK_M_out;
  assign CH0_RXLPMEN_M = CH0_RXLPMEN_M_out;
  assign CH0_RXMLDCHAINDONE_M = CH0_RXMLDCHAINDONE_M_out;
  assign CH0_RXMLDCHAINREQ_M = CH0_RXMLDCHAINREQ_M_out;
  assign CH0_RXMLFINEALIGNREQ_M = CH0_RXMLFINEALIGNREQ_M_out;
  assign CH0_RXOOBRESET_M = CH0_RXOOBRESET_M_out;
  assign CH0_RXOSINTDONE = CH0_RXOSINTDONE_out;
  assign CH0_RXOSINTSTARTED = CH0_RXOSINTSTARTED_out;
  assign CH0_RXOSINTSTROBEDONE = CH0_RXOSINTSTROBEDONE_out;
  assign CH0_RXOSINTSTROBESTARTED = CH0_RXOSINTSTROBESTARTED_out;
  assign CH0_RXPCSRESETMASK_M = CH0_RXPCSRESETMASK_M_out;
  assign CH0_RXPD_M = CH0_RXPD_M_out;
  assign CH0_RXPHALIGNDONE = CH0_RXPHALIGNDONE_out;
  assign CH0_RXPHALIGNERR = CH0_RXPHALIGNERR_out;
  assign CH0_RXPHALIGNREQ_M = CH0_RXPHALIGNREQ_M_out;
  assign CH0_RXPHALIGNRESETMASK_M = CH0_RXPHALIGNRESETMASK_M_out;
  assign CH0_RXPHDLYPD_M = CH0_RXPHDLYPD_M_out;
  assign CH0_RXPHDLYRESETDONE = CH0_RXPHDLYRESETDONE_out;
  assign CH0_RXPHDLYRESET_M = CH0_RXPHDLYRESET_M_out;
  assign CH0_RXPHSETINITDONE = CH0_RXPHSETINITDONE_out;
  assign CH0_RXPHSETINITREQ_M = CH0_RXPHSETINITREQ_M_out;
  assign CH0_RXPHSHIFT180DONE = CH0_RXPHSHIFT180DONE_out;
  assign CH0_RXPHSHIFT180_M = CH0_RXPHSHIFT180_M_out;
  assign CH0_RXPMARESETDONE = CH0_RXPMARESETDONE_out;
  assign CH0_RXPMARESETMASK_M = CH0_RXPMARESETMASK_M_out;
  assign CH0_RXPOLARITY_M = CH0_RXPOLARITY_M_out;
  assign CH0_RXPRBSCNTRESET_M = CH0_RXPRBSCNTRESET_M_out;
  assign CH0_RXPRBSERR = CH0_RXPRBSERR_out;
  assign CH0_RXPRBSLOCKED = CH0_RXPRBSLOCKED_out;
  assign CH0_RXPRBSSEL_M = CH0_RXPRBSSEL_M_out;
  assign CH0_RXPROGDIVRESETDONE = CH0_RXPROGDIVRESETDONE_out;
  assign CH0_RXPROGDIVRESET_M = CH0_RXPROGDIVRESET_M_out;
  assign CH0_RXRATE_M = CH0_RXRATE_M_out;
  assign CH0_RXRESETDONE = CH0_RXRESETDONE_out;
  assign CH0_RXRESETMODE_M = CH0_RXRESETMODE_M_out;
  assign CH0_RXSLIDERDY = CH0_RXSLIDERDY_out;
  assign CH0_RXSLIDE_M = CH0_RXSLIDE_M_out;
  assign CH0_RXSTARTOFSEQ = CH0_RXSTARTOFSEQ_out;
  assign CH0_RXSTATUS = CH0_RXSTATUS_out;
  assign CH0_RXSYNCALLIN_M = CH0_RXSYNCALLIN_M_out;
  assign CH0_RXSYNCDONE = CH0_RXSYNCDONE_out;
  assign CH0_RXTERMINATION_M = CH0_RXTERMINATION_M_out;
  assign CH0_RXUSERRDY_M = CH0_RXUSERRDY_M_out;
  assign CH0_RXUSRCLK_M = CH0_RXUSRCLK_M_out;
  assign CH0_RXVALID = CH0_RXVALID_out;
  assign CH0_TSTCLK0_M = CH0_TSTCLK0_M_out;
  assign CH0_TSTCLK1_M = CH0_TSTCLK1_M_out;
  assign CH0_TSTIN_M = CH0_TSTIN_M_out;
  assign CH0_TX10GSTAT = CH0_TX10GSTAT_out;
  assign CH0_TXBUFSTATUS = CH0_TXBUFSTATUS_out;
  assign CH0_TXCOMFINISH = CH0_TXCOMFINISH_out;
  assign CH0_TXCOMINIT_M = CH0_TXCOMINIT_M_out;
  assign CH0_TXCOMSAS_M = CH0_TXCOMSAS_M_out;
  assign CH0_TXCOMWAKE_M = CH0_TXCOMWAKE_M_out;
  assign CH0_TXCTRL0_M = CH0_TXCTRL0_M_out;
  assign CH0_TXCTRL1_M = CH0_TXCTRL1_M_out;
  assign CH0_TXCTRL2_M = CH0_TXCTRL2_M_out;
  assign CH0_TXDAPICODEOVRDEN_M = CH0_TXDAPICODEOVRDEN_M_out;
  assign CH0_TXDAPICODERESET_M = CH0_TXDAPICODERESET_M_out;
  assign CH0_TXDATAEXTENDRSVD_M = CH0_TXDATAEXTENDRSVD_M_out;
  assign CH0_TXDATA_M = CH0_TXDATA_M_out;
  assign CH0_TXDCCDONE = CH0_TXDCCDONE_out;
  assign CH0_TXDEEMPH_M = CH0_TXDEEMPH_M_out;
  assign CH0_TXDETECTRX_M = CH0_TXDETECTRX_M_out;
  assign CH0_TXDIFFCTRL_M = CH0_TXDIFFCTRL_M_out;
  assign CH0_TXDLYALIGNERR = CH0_TXDLYALIGNERR_out;
  assign CH0_TXDLYALIGNPROG = CH0_TXDLYALIGNPROG_out;
  assign CH0_TXDLYALIGNREQ_M = CH0_TXDLYALIGNREQ_M_out;
  assign CH0_TXELECIDLE_M = CH0_TXELECIDLE_M_out;
  assign CH0_TXHEADER_M = CH0_TXHEADER_M_out;
  assign CH0_TXINHIBIT_M = CH0_TXINHIBIT_M_out;
  assign CH0_TXLATCLK_M = CH0_TXLATCLK_M_out;
  assign CH0_TXMAINCURSOR_M = CH0_TXMAINCURSOR_M_out;
  assign CH0_TXMARGIN_M = CH0_TXMARGIN_M_out;
  assign CH0_TXMLDCHAINDONE_M = CH0_TXMLDCHAINDONE_M_out;
  assign CH0_TXMLDCHAINREQ_M = CH0_TXMLDCHAINREQ_M_out;
  assign CH0_TXONESZEROS_M = CH0_TXONESZEROS_M_out;
  assign CH0_TXPAUSEDELAYALIGN_M = CH0_TXPAUSEDELAYALIGN_M_out;
  assign CH0_TXPCSRESETMASK_M = CH0_TXPCSRESETMASK_M_out;
  assign CH0_TXPD_M = CH0_TXPD_M_out;
  assign CH0_TXPHALIGNDONE = CH0_TXPHALIGNDONE_out;
  assign CH0_TXPHALIGNERR = CH0_TXPHALIGNERR_out;
  assign CH0_TXPHALIGNOUTRSVD = CH0_TXPHALIGNOUTRSVD_out;
  assign CH0_TXPHALIGNREQ_M = CH0_TXPHALIGNREQ_M_out;
  assign CH0_TXPHALIGNRESETMASK_M = CH0_TXPHALIGNRESETMASK_M_out;
  assign CH0_TXPHDLYPD_M = CH0_TXPHDLYPD_M_out;
  assign CH0_TXPHDLYRESETDONE = CH0_TXPHDLYRESETDONE_out;
  assign CH0_TXPHDLYRESET_M = CH0_TXPHDLYRESET_M_out;
  assign CH0_TXPHDLYTSTCLK_M = CH0_TXPHDLYTSTCLK_M_out;
  assign CH0_TXPHSETINITDONE = CH0_TXPHSETINITDONE_out;
  assign CH0_TXPHSETINITREQ_M = CH0_TXPHSETINITREQ_M_out;
  assign CH0_TXPHSHIFT180DONE = CH0_TXPHSHIFT180DONE_out;
  assign CH0_TXPHSHIFT180_M = CH0_TXPHSHIFT180_M_out;
  assign CH0_TXPICODEOVRDEN_M = CH0_TXPICODEOVRDEN_M_out;
  assign CH0_TXPICODERESET_M = CH0_TXPICODERESET_M_out;
  assign CH0_TXPIPPMEN_M = CH0_TXPIPPMEN_M_out;
  assign CH0_TXPIPPMSTEPSIZE_M = CH0_TXPIPPMSTEPSIZE_M_out;
  assign CH0_TXPISOPD_M = CH0_TXPISOPD_M_out;
  assign CH0_TXPMARESETDONE = CH0_TXPMARESETDONE_out;
  assign CH0_TXPMARESETMASK_M = CH0_TXPMARESETMASK_M_out;
  assign CH0_TXPOLARITY_M = CH0_TXPOLARITY_M_out;
  assign CH0_TXPOSTCURSOR_M = CH0_TXPOSTCURSOR_M_out;
  assign CH0_TXPRBSFORCEERR_M = CH0_TXPRBSFORCEERR_M_out;
  assign CH0_TXPRBSSEL_M = CH0_TXPRBSSEL_M_out;
  assign CH0_TXPRECURSOR_M = CH0_TXPRECURSOR_M_out;
  assign CH0_TXPROGDIVRESETDONE = CH0_TXPROGDIVRESETDONE_out;
  assign CH0_TXPROGDIVRESET_M = CH0_TXPROGDIVRESET_M_out;
  assign CH0_TXRATE_M = CH0_TXRATE_M_out;
  assign CH0_TXRESETDONE = CH0_TXRESETDONE_out;
  assign CH0_TXRESETMODE_M = CH0_TXRESETMODE_M_out;
  assign CH0_TXSEQUENCE_M = CH0_TXSEQUENCE_M_out;
  assign CH0_TXSWING_M = CH0_TXSWING_M_out;
  assign CH0_TXSYNCALLIN_M = CH0_TXSYNCALLIN_M_out;
  assign CH0_TXSYNCDONE = CH0_TXSYNCDONE_out;
  assign CH0_TXUSERRDY_M = CH0_TXUSERRDY_M_out;
  assign CH0_TXUSRCLK_M = CH0_TXUSRCLK_M_out;
  assign CH1_BUFGTCE = CH1_BUFGTCE_out;
  assign CH1_BUFGTCEMASK = CH1_BUFGTCEMASK_out;
  assign CH1_BUFGTDIV = CH1_BUFGTDIV_out;
  assign CH1_BUFGTRST = CH1_BUFGTRST_out;
  assign CH1_BUFGTRSTMASK = CH1_BUFGTRSTMASK_out;
  assign CH1_CDRBMCDRREQ_M = CH1_CDRBMCDRREQ_M_out;
  assign CH1_CDRFREQOS_M = CH1_CDRFREQOS_M_out;
  assign CH1_CDRINCPCTRL_M = CH1_CDRINCPCTRL_M_out;
  assign CH1_CDRSTEPDIR_M = CH1_CDRSTEPDIR_M_out;
  assign CH1_CDRSTEPSQ_M = CH1_CDRSTEPSQ_M_out;
  assign CH1_CDRSTEPSX_M = CH1_CDRSTEPSX_M_out;
  assign CH1_CFOKOVRDFINISH_M = CH1_CFOKOVRDFINISH_M_out;
  assign CH1_CFOKOVRDPULSE_M = CH1_CFOKOVRDPULSE_M_out;
  assign CH1_CFOKOVRDRDY0 = CH1_CFOKOVRDRDY0_out;
  assign CH1_CFOKOVRDRDY1 = CH1_CFOKOVRDRDY1_out;
  assign CH1_CFOKOVRDSTART_M = CH1_CFOKOVRDSTART_M_out;
  assign CH1_CLKRSVD0_M = CH1_CLKRSVD0_M_out;
  assign CH1_CLKRSVD1_M = CH1_CLKRSVD1_M_out;
  assign CH1_DMONFIFORESET_M = CH1_DMONFIFORESET_M_out;
  assign CH1_DMONITORCLK_M = CH1_DMONITORCLK_M_out;
  assign CH1_DMONITOROUT = CH1_DMONITOROUT_out;
  assign CH1_EYESCANDATAERROR = CH1_EYESCANDATAERROR_out;
  assign CH1_EYESCANRESET_M = CH1_EYESCANRESET_M_out;
  assign CH1_EYESCANTRIGGER_M = CH1_EYESCANTRIGGER_M_out;
  assign CH1_GTRSVD_M = CH1_GTRSVD_M_out;
  assign CH1_GTRXRESET_M = CH1_GTRXRESET_M_out;
  assign CH1_GTTXRESET_M = CH1_GTTXRESET_M_out;
  assign CH1_HSDPPCSRESET_M = CH1_HSDPPCSRESET_M_out;
  assign CH1_ILORESETDONE = CH1_ILORESETDONE_out;
  assign CH1_ILORESETMASK_M = CH1_ILORESETMASK_M_out;
  assign CH1_ILORESET_M = CH1_ILORESET_M_out;
  assign CH1_LOOPBACK_M = CH1_LOOPBACK_M_out;
  assign CH1_PCIERSTB_M = CH1_PCIERSTB_M_out;
  assign CH1_PCSRSVDIN_M = CH1_PCSRSVDIN_M_out;
  assign CH1_PCSRSVDOUT = CH1_PCSRSVDOUT_out;
  assign CH1_PHYESMADAPTSAVE_M = CH1_PHYESMADAPTSAVE_M_out;
  assign CH1_PHYREADY = CH1_PHYREADY_out;
  assign CH1_PHYSTATUS = CH1_PHYSTATUS_out;
  assign CH1_PINRSVDAS = CH1_PINRSVDAS_out;
  assign CH1_RESETEXCEPTION = CH1_RESETEXCEPTION_out;
  assign CH1_RX10GSTAT = CH1_RX10GSTAT_out;
  assign CH1_RXBUFSTATUS = CH1_RXBUFSTATUS_out;
  assign CH1_RXBYTEISALIGNED = CH1_RXBYTEISALIGNED_out;
  assign CH1_RXBYTEREALIGN = CH1_RXBYTEREALIGN_out;
  assign CH1_RXCDRHOLD_M = CH1_RXCDRHOLD_M_out;
  assign CH1_RXCDRLOCK = CH1_RXCDRLOCK_out;
  assign CH1_RXCDROVRDEN_M = CH1_RXCDROVRDEN_M_out;
  assign CH1_RXCDRPHDONE = CH1_RXCDRPHDONE_out;
  assign CH1_RXCDRRESET_M = CH1_RXCDRRESET_M_out;
  assign CH1_RXCHANBONDSEQ = CH1_RXCHANBONDSEQ_out;
  assign CH1_RXCHANISALIGNED = CH1_RXCHANISALIGNED_out;
  assign CH1_RXCHANREALIGN = CH1_RXCHANREALIGN_out;
  assign CH1_RXCHBONDI_M = CH1_RXCHBONDI_M_out;
  assign CH1_RXCHBONDO = CH1_RXCHBONDO_out;
  assign CH1_RXCLKCORCNT = CH1_RXCLKCORCNT_out;
  assign CH1_RXCOMINITDET = CH1_RXCOMINITDET_out;
  assign CH1_RXCOMMADET = CH1_RXCOMMADET_out;
  assign CH1_RXCOMSASDET = CH1_RXCOMSASDET_out;
  assign CH1_RXCOMWAKEDET = CH1_RXCOMWAKEDET_out;
  assign CH1_RXCTRL0 = CH1_RXCTRL0_out;
  assign CH1_RXCTRL1 = CH1_RXCTRL1_out;
  assign CH1_RXCTRL2 = CH1_RXCTRL2_out;
  assign CH1_RXCTRL3 = CH1_RXCTRL3_out;
  assign CH1_RXDAPICODEOVRDEN_M = CH1_RXDAPICODEOVRDEN_M_out;
  assign CH1_RXDAPICODERESET_M = CH1_RXDAPICODERESET_M_out;
  assign CH1_RXDATA = CH1_RXDATA_out;
  assign CH1_RXDATAEXTENDRSVD = CH1_RXDATAEXTENDRSVD_out;
  assign CH1_RXDATAVALID = CH1_RXDATAVALID_out;
  assign CH1_RXDCCDONE = CH1_RXDCCDONE_out;
  assign CH1_RXDLYALIGNERR = CH1_RXDLYALIGNERR_out;
  assign CH1_RXDLYALIGNPROG = CH1_RXDLYALIGNPROG_out;
  assign CH1_RXDLYALIGNREQ_M = CH1_RXDLYALIGNREQ_M_out;
  assign CH1_RXELECIDLE = CH1_RXELECIDLE_out;
  assign CH1_RXEQTRAINING_M = CH1_RXEQTRAINING_M_out;
  assign CH1_RXFINEALIGNDONE = CH1_RXFINEALIGNDONE_out;
  assign CH1_RXGEARBOXSLIP_M = CH1_RXGEARBOXSLIP_M_out;
  assign CH1_RXHEADER = CH1_RXHEADER_out;
  assign CH1_RXHEADERVALID = CH1_RXHEADERVALID_out;
  assign CH1_RXLATCLK_M = CH1_RXLATCLK_M_out;
  assign CH1_RXLPMEN_M = CH1_RXLPMEN_M_out;
  assign CH1_RXMLDCHAINDONE_M = CH1_RXMLDCHAINDONE_M_out;
  assign CH1_RXMLDCHAINREQ_M = CH1_RXMLDCHAINREQ_M_out;
  assign CH1_RXMLFINEALIGNREQ_M = CH1_RXMLFINEALIGNREQ_M_out;
  assign CH1_RXOOBRESET_M = CH1_RXOOBRESET_M_out;
  assign CH1_RXOSINTDONE = CH1_RXOSINTDONE_out;
  assign CH1_RXOSINTSTARTED = CH1_RXOSINTSTARTED_out;
  assign CH1_RXOSINTSTROBEDONE = CH1_RXOSINTSTROBEDONE_out;
  assign CH1_RXOSINTSTROBESTARTED = CH1_RXOSINTSTROBESTARTED_out;
  assign CH1_RXPCSRESETMASK_M = CH1_RXPCSRESETMASK_M_out;
  assign CH1_RXPD_M = CH1_RXPD_M_out;
  assign CH1_RXPHALIGNDONE = CH1_RXPHALIGNDONE_out;
  assign CH1_RXPHALIGNERR = CH1_RXPHALIGNERR_out;
  assign CH1_RXPHALIGNREQ_M = CH1_RXPHALIGNREQ_M_out;
  assign CH1_RXPHALIGNRESETMASK_M = CH1_RXPHALIGNRESETMASK_M_out;
  assign CH1_RXPHDLYPD_M = CH1_RXPHDLYPD_M_out;
  assign CH1_RXPHDLYRESETDONE = CH1_RXPHDLYRESETDONE_out;
  assign CH1_RXPHDLYRESET_M = CH1_RXPHDLYRESET_M_out;
  assign CH1_RXPHSETINITDONE = CH1_RXPHSETINITDONE_out;
  assign CH1_RXPHSETINITREQ_M = CH1_RXPHSETINITREQ_M_out;
  assign CH1_RXPHSHIFT180DONE = CH1_RXPHSHIFT180DONE_out;
  assign CH1_RXPHSHIFT180_M = CH1_RXPHSHIFT180_M_out;
  assign CH1_RXPMARESETDONE = CH1_RXPMARESETDONE_out;
  assign CH1_RXPMARESETMASK_M = CH1_RXPMARESETMASK_M_out;
  assign CH1_RXPOLARITY_M = CH1_RXPOLARITY_M_out;
  assign CH1_RXPRBSCNTRESET_M = CH1_RXPRBSCNTRESET_M_out;
  assign CH1_RXPRBSERR = CH1_RXPRBSERR_out;
  assign CH1_RXPRBSLOCKED = CH1_RXPRBSLOCKED_out;
  assign CH1_RXPRBSSEL_M = CH1_RXPRBSSEL_M_out;
  assign CH1_RXPROGDIVRESETDONE = CH1_RXPROGDIVRESETDONE_out;
  assign CH1_RXPROGDIVRESET_M = CH1_RXPROGDIVRESET_M_out;
  assign CH1_RXRATE_M = CH1_RXRATE_M_out;
  assign CH1_RXRESETDONE = CH1_RXRESETDONE_out;
  assign CH1_RXRESETMODE_M = CH1_RXRESETMODE_M_out;
  assign CH1_RXSLIDERDY = CH1_RXSLIDERDY_out;
  assign CH1_RXSLIDE_M = CH1_RXSLIDE_M_out;
  assign CH1_RXSTARTOFSEQ = CH1_RXSTARTOFSEQ_out;
  assign CH1_RXSTATUS = CH1_RXSTATUS_out;
  assign CH1_RXSYNCALLIN_M = CH1_RXSYNCALLIN_M_out;
  assign CH1_RXSYNCDONE = CH1_RXSYNCDONE_out;
  assign CH1_RXTERMINATION_M = CH1_RXTERMINATION_M_out;
  assign CH1_RXUSERRDY_M = CH1_RXUSERRDY_M_out;
  assign CH1_RXUSRCLK_M = CH1_RXUSRCLK_M_out;
  assign CH1_RXVALID = CH1_RXVALID_out;
  assign CH1_TSTCLK0_M = CH1_TSTCLK0_M_out;
  assign CH1_TSTCLK1_M = CH1_TSTCLK1_M_out;
  assign CH1_TSTIN_M = CH1_TSTIN_M_out;
  assign CH1_TX10GSTAT = CH1_TX10GSTAT_out;
  assign CH1_TXBUFSTATUS = CH1_TXBUFSTATUS_out;
  assign CH1_TXCOMFINISH = CH1_TXCOMFINISH_out;
  assign CH1_TXCOMINIT_M = CH1_TXCOMINIT_M_out;
  assign CH1_TXCOMSAS_M = CH1_TXCOMSAS_M_out;
  assign CH1_TXCOMWAKE_M = CH1_TXCOMWAKE_M_out;
  assign CH1_TXCTRL0_M = CH1_TXCTRL0_M_out;
  assign CH1_TXCTRL1_M = CH1_TXCTRL1_M_out;
  assign CH1_TXCTRL2_M = CH1_TXCTRL2_M_out;
  assign CH1_TXDAPICODEOVRDEN_M = CH1_TXDAPICODEOVRDEN_M_out;
  assign CH1_TXDAPICODERESET_M = CH1_TXDAPICODERESET_M_out;
  assign CH1_TXDATAEXTENDRSVD_M = CH1_TXDATAEXTENDRSVD_M_out;
  assign CH1_TXDATA_M = CH1_TXDATA_M_out;
  assign CH1_TXDCCDONE = CH1_TXDCCDONE_out;
  assign CH1_TXDEEMPH_M = CH1_TXDEEMPH_M_out;
  assign CH1_TXDETECTRX_M = CH1_TXDETECTRX_M_out;
  assign CH1_TXDIFFCTRL_M = CH1_TXDIFFCTRL_M_out;
  assign CH1_TXDLYALIGNERR = CH1_TXDLYALIGNERR_out;
  assign CH1_TXDLYALIGNPROG = CH1_TXDLYALIGNPROG_out;
  assign CH1_TXDLYALIGNREQ_M = CH1_TXDLYALIGNREQ_M_out;
  assign CH1_TXELECIDLE_M = CH1_TXELECIDLE_M_out;
  assign CH1_TXHEADER_M = CH1_TXHEADER_M_out;
  assign CH1_TXINHIBIT_M = CH1_TXINHIBIT_M_out;
  assign CH1_TXLATCLK_M = CH1_TXLATCLK_M_out;
  assign CH1_TXMAINCURSOR_M = CH1_TXMAINCURSOR_M_out;
  assign CH1_TXMARGIN_M = CH1_TXMARGIN_M_out;
  assign CH1_TXMLDCHAINDONE_M = CH1_TXMLDCHAINDONE_M_out;
  assign CH1_TXMLDCHAINREQ_M = CH1_TXMLDCHAINREQ_M_out;
  assign CH1_TXONESZEROS_M = CH1_TXONESZEROS_M_out;
  assign CH1_TXPAUSEDELAYALIGN_M = CH1_TXPAUSEDELAYALIGN_M_out;
  assign CH1_TXPCSRESETMASK_M = CH1_TXPCSRESETMASK_M_out;
  assign CH1_TXPD_M = CH1_TXPD_M_out;
  assign CH1_TXPHALIGNDONE = CH1_TXPHALIGNDONE_out;
  assign CH1_TXPHALIGNERR = CH1_TXPHALIGNERR_out;
  assign CH1_TXPHALIGNOUTRSVD = CH1_TXPHALIGNOUTRSVD_out;
  assign CH1_TXPHALIGNREQ_M = CH1_TXPHALIGNREQ_M_out;
  assign CH1_TXPHALIGNRESETMASK_M = CH1_TXPHALIGNRESETMASK_M_out;
  assign CH1_TXPHDLYPD_M = CH1_TXPHDLYPD_M_out;
  assign CH1_TXPHDLYRESETDONE = CH1_TXPHDLYRESETDONE_out;
  assign CH1_TXPHDLYRESET_M = CH1_TXPHDLYRESET_M_out;
  assign CH1_TXPHDLYTSTCLK_M = CH1_TXPHDLYTSTCLK_M_out;
  assign CH1_TXPHSETINITDONE = CH1_TXPHSETINITDONE_out;
  assign CH1_TXPHSETINITREQ_M = CH1_TXPHSETINITREQ_M_out;
  assign CH1_TXPHSHIFT180DONE = CH1_TXPHSHIFT180DONE_out;
  assign CH1_TXPHSHIFT180_M = CH1_TXPHSHIFT180_M_out;
  assign CH1_TXPICODEOVRDEN_M = CH1_TXPICODEOVRDEN_M_out;
  assign CH1_TXPICODERESET_M = CH1_TXPICODERESET_M_out;
  assign CH1_TXPIPPMEN_M = CH1_TXPIPPMEN_M_out;
  assign CH1_TXPIPPMSTEPSIZE_M = CH1_TXPIPPMSTEPSIZE_M_out;
  assign CH1_TXPISOPD_M = CH1_TXPISOPD_M_out;
  assign CH1_TXPMARESETDONE = CH1_TXPMARESETDONE_out;
  assign CH1_TXPMARESETMASK_M = CH1_TXPMARESETMASK_M_out;
  assign CH1_TXPOLARITY_M = CH1_TXPOLARITY_M_out;
  assign CH1_TXPOSTCURSOR_M = CH1_TXPOSTCURSOR_M_out;
  assign CH1_TXPRBSFORCEERR_M = CH1_TXPRBSFORCEERR_M_out;
  assign CH1_TXPRBSSEL_M = CH1_TXPRBSSEL_M_out;
  assign CH1_TXPRECURSOR_M = CH1_TXPRECURSOR_M_out;
  assign CH1_TXPROGDIVRESETDONE = CH1_TXPROGDIVRESETDONE_out;
  assign CH1_TXPROGDIVRESET_M = CH1_TXPROGDIVRESET_M_out;
  assign CH1_TXRATE_M = CH1_TXRATE_M_out;
  assign CH1_TXRESETDONE = CH1_TXRESETDONE_out;
  assign CH1_TXRESETMODE_M = CH1_TXRESETMODE_M_out;
  assign CH1_TXSEQUENCE_M = CH1_TXSEQUENCE_M_out;
  assign CH1_TXSWING_M = CH1_TXSWING_M_out;
  assign CH1_TXSYNCALLIN_M = CH1_TXSYNCALLIN_M_out;
  assign CH1_TXSYNCDONE = CH1_TXSYNCDONE_out;
  assign CH1_TXUSERRDY_M = CH1_TXUSERRDY_M_out;
  assign CH1_TXUSRCLK_M = CH1_TXUSRCLK_M_out;
  assign CH2_BUFGTCE = CH2_BUFGTCE_out;
  assign CH2_BUFGTCEMASK = CH2_BUFGTCEMASK_out;
  assign CH2_BUFGTDIV = CH2_BUFGTDIV_out;
  assign CH2_BUFGTRST = CH2_BUFGTRST_out;
  assign CH2_BUFGTRSTMASK = CH2_BUFGTRSTMASK_out;
  assign CH2_CDRBMCDRREQ_M = CH2_CDRBMCDRREQ_M_out;
  assign CH2_CDRFREQOS_M = CH2_CDRFREQOS_M_out;
  assign CH2_CDRINCPCTRL_M = CH2_CDRINCPCTRL_M_out;
  assign CH2_CDRSTEPDIR_M = CH2_CDRSTEPDIR_M_out;
  assign CH2_CDRSTEPSQ_M = CH2_CDRSTEPSQ_M_out;
  assign CH2_CDRSTEPSX_M = CH2_CDRSTEPSX_M_out;
  assign CH2_CFOKOVRDFINISH_M = CH2_CFOKOVRDFINISH_M_out;
  assign CH2_CFOKOVRDPULSE_M = CH2_CFOKOVRDPULSE_M_out;
  assign CH2_CFOKOVRDRDY0 = CH2_CFOKOVRDRDY0_out;
  assign CH2_CFOKOVRDRDY1 = CH2_CFOKOVRDRDY1_out;
  assign CH2_CFOKOVRDSTART_M = CH2_CFOKOVRDSTART_M_out;
  assign CH2_CLKRSVD0_M = CH2_CLKRSVD0_M_out;
  assign CH2_CLKRSVD1_M = CH2_CLKRSVD1_M_out;
  assign CH2_DMONFIFORESET_M = CH2_DMONFIFORESET_M_out;
  assign CH2_DMONITORCLK_M = CH2_DMONITORCLK_M_out;
  assign CH2_DMONITOROUT = CH2_DMONITOROUT_out;
  assign CH2_EYESCANDATAERROR = CH2_EYESCANDATAERROR_out;
  assign CH2_EYESCANRESET_M = CH2_EYESCANRESET_M_out;
  assign CH2_EYESCANTRIGGER_M = CH2_EYESCANTRIGGER_M_out;
  assign CH2_GTRSVD_M = CH2_GTRSVD_M_out;
  assign CH2_GTRXRESET_M = CH2_GTRXRESET_M_out;
  assign CH2_GTTXRESET_M = CH2_GTTXRESET_M_out;
  assign CH2_HSDPPCSRESET_M = CH2_HSDPPCSRESET_M_out;
  assign CH2_ILORESETDONE = CH2_ILORESETDONE_out;
  assign CH2_ILORESETMASK_M = CH2_ILORESETMASK_M_out;
  assign CH2_ILORESET_M = CH2_ILORESET_M_out;
  assign CH2_LOOPBACK_M = CH2_LOOPBACK_M_out;
  assign CH2_PCIERSTB_M = CH2_PCIERSTB_M_out;
  assign CH2_PCSRSVDIN_M = CH2_PCSRSVDIN_M_out;
  assign CH2_PCSRSVDOUT = CH2_PCSRSVDOUT_out;
  assign CH2_PHYESMADAPTSAVE_M = CH2_PHYESMADAPTSAVE_M_out;
  assign CH2_PHYREADY = CH2_PHYREADY_out;
  assign CH2_PHYSTATUS = CH2_PHYSTATUS_out;
  assign CH2_PINRSVDAS = CH2_PINRSVDAS_out;
  assign CH2_RESETEXCEPTION = CH2_RESETEXCEPTION_out;
  assign CH2_RX10GSTAT = CH2_RX10GSTAT_out;
  assign CH2_RXBUFSTATUS = CH2_RXBUFSTATUS_out;
  assign CH2_RXBYTEISALIGNED = CH2_RXBYTEISALIGNED_out;
  assign CH2_RXBYTEREALIGN = CH2_RXBYTEREALIGN_out;
  assign CH2_RXCDRHOLD_M = CH2_RXCDRHOLD_M_out;
  assign CH2_RXCDRLOCK = CH2_RXCDRLOCK_out;
  assign CH2_RXCDROVRDEN_M = CH2_RXCDROVRDEN_M_out;
  assign CH2_RXCDRPHDONE = CH2_RXCDRPHDONE_out;
  assign CH2_RXCDRRESET_M = CH2_RXCDRRESET_M_out;
  assign CH2_RXCHANBONDSEQ = CH2_RXCHANBONDSEQ_out;
  assign CH2_RXCHANISALIGNED = CH2_RXCHANISALIGNED_out;
  assign CH2_RXCHANREALIGN = CH2_RXCHANREALIGN_out;
  assign CH2_RXCHBONDI_M = CH2_RXCHBONDI_M_out;
  assign CH2_RXCHBONDO = CH2_RXCHBONDO_out;
  assign CH2_RXCLKCORCNT = CH2_RXCLKCORCNT_out;
  assign CH2_RXCOMINITDET = CH2_RXCOMINITDET_out;
  assign CH2_RXCOMMADET = CH2_RXCOMMADET_out;
  assign CH2_RXCOMSASDET = CH2_RXCOMSASDET_out;
  assign CH2_RXCOMWAKEDET = CH2_RXCOMWAKEDET_out;
  assign CH2_RXCTRL0 = CH2_RXCTRL0_out;
  assign CH2_RXCTRL1 = CH2_RXCTRL1_out;
  assign CH2_RXCTRL2 = CH2_RXCTRL2_out;
  assign CH2_RXCTRL3 = CH2_RXCTRL3_out;
  assign CH2_RXDAPICODEOVRDEN_M = CH2_RXDAPICODEOVRDEN_M_out;
  assign CH2_RXDAPICODERESET_M = CH2_RXDAPICODERESET_M_out;
  assign CH2_RXDATA = CH2_RXDATA_out;
  assign CH2_RXDATAEXTENDRSVD = CH2_RXDATAEXTENDRSVD_out;
  assign CH2_RXDATAVALID = CH2_RXDATAVALID_out;
  assign CH2_RXDCCDONE = CH2_RXDCCDONE_out;
  assign CH2_RXDLYALIGNERR = CH2_RXDLYALIGNERR_out;
  assign CH2_RXDLYALIGNPROG = CH2_RXDLYALIGNPROG_out;
  assign CH2_RXDLYALIGNREQ_M = CH2_RXDLYALIGNREQ_M_out;
  assign CH2_RXELECIDLE = CH2_RXELECIDLE_out;
  assign CH2_RXEQTRAINING_M = CH2_RXEQTRAINING_M_out;
  assign CH2_RXFINEALIGNDONE = CH2_RXFINEALIGNDONE_out;
  assign CH2_RXGEARBOXSLIP_M = CH2_RXGEARBOXSLIP_M_out;
  assign CH2_RXHEADER = CH2_RXHEADER_out;
  assign CH2_RXHEADERVALID = CH2_RXHEADERVALID_out;
  assign CH2_RXLATCLK_M = CH2_RXLATCLK_M_out;
  assign CH2_RXLPMEN_M = CH2_RXLPMEN_M_out;
  assign CH2_RXMLDCHAINDONE_M = CH2_RXMLDCHAINDONE_M_out;
  assign CH2_RXMLDCHAINREQ_M = CH2_RXMLDCHAINREQ_M_out;
  assign CH2_RXMLFINEALIGNREQ_M = CH2_RXMLFINEALIGNREQ_M_out;
  assign CH2_RXOOBRESET_M = CH2_RXOOBRESET_M_out;
  assign CH2_RXOSINTDONE = CH2_RXOSINTDONE_out;
  assign CH2_RXOSINTSTARTED = CH2_RXOSINTSTARTED_out;
  assign CH2_RXOSINTSTROBEDONE = CH2_RXOSINTSTROBEDONE_out;
  assign CH2_RXOSINTSTROBESTARTED = CH2_RXOSINTSTROBESTARTED_out;
  assign CH2_RXPCSRESETMASK_M = CH2_RXPCSRESETMASK_M_out;
  assign CH2_RXPD_M = CH2_RXPD_M_out;
  assign CH2_RXPHALIGNDONE = CH2_RXPHALIGNDONE_out;
  assign CH2_RXPHALIGNERR = CH2_RXPHALIGNERR_out;
  assign CH2_RXPHALIGNREQ_M = CH2_RXPHALIGNREQ_M_out;
  assign CH2_RXPHALIGNRESETMASK_M = CH2_RXPHALIGNRESETMASK_M_out;
  assign CH2_RXPHDLYPD_M = CH2_RXPHDLYPD_M_out;
  assign CH2_RXPHDLYRESETDONE = CH2_RXPHDLYRESETDONE_out;
  assign CH2_RXPHDLYRESET_M = CH2_RXPHDLYRESET_M_out;
  assign CH2_RXPHSETINITDONE = CH2_RXPHSETINITDONE_out;
  assign CH2_RXPHSETINITREQ_M = CH2_RXPHSETINITREQ_M_out;
  assign CH2_RXPHSHIFT180DONE = CH2_RXPHSHIFT180DONE_out;
  assign CH2_RXPHSHIFT180_M = CH2_RXPHSHIFT180_M_out;
  assign CH2_RXPMARESETDONE = CH2_RXPMARESETDONE_out;
  assign CH2_RXPMARESETMASK_M = CH2_RXPMARESETMASK_M_out;
  assign CH2_RXPOLARITY_M = CH2_RXPOLARITY_M_out;
  assign CH2_RXPRBSCNTRESET_M = CH2_RXPRBSCNTRESET_M_out;
  assign CH2_RXPRBSERR = CH2_RXPRBSERR_out;
  assign CH2_RXPRBSLOCKED = CH2_RXPRBSLOCKED_out;
  assign CH2_RXPRBSSEL_M = CH2_RXPRBSSEL_M_out;
  assign CH2_RXPROGDIVRESETDONE = CH2_RXPROGDIVRESETDONE_out;
  assign CH2_RXPROGDIVRESET_M = CH2_RXPROGDIVRESET_M_out;
  assign CH2_RXRATE_M = CH2_RXRATE_M_out;
  assign CH2_RXRESETDONE = CH2_RXRESETDONE_out;
  assign CH2_RXRESETMODE_M = CH2_RXRESETMODE_M_out;
  assign CH2_RXSLIDERDY = CH2_RXSLIDERDY_out;
  assign CH2_RXSLIDE_M = CH2_RXSLIDE_M_out;
  assign CH2_RXSTARTOFSEQ = CH2_RXSTARTOFSEQ_out;
  assign CH2_RXSTATUS = CH2_RXSTATUS_out;
  assign CH2_RXSYNCALLIN_M = CH2_RXSYNCALLIN_M_out;
  assign CH2_RXSYNCDONE = CH2_RXSYNCDONE_out;
  assign CH2_RXTERMINATION_M = CH2_RXTERMINATION_M_out;
  assign CH2_RXUSERRDY_M = CH2_RXUSERRDY_M_out;
  assign CH2_RXUSRCLK_M = CH2_RXUSRCLK_M_out;
  assign CH2_RXVALID = CH2_RXVALID_out;
  assign CH2_TSTCLK0_M = CH2_TSTCLK0_M_out;
  assign CH2_TSTCLK1_M = CH2_TSTCLK1_M_out;
  assign CH2_TSTIN_M = CH2_TSTIN_M_out;
  assign CH2_TX10GSTAT = CH2_TX10GSTAT_out;
  assign CH2_TXBUFSTATUS = CH2_TXBUFSTATUS_out;
  assign CH2_TXCOMFINISH = CH2_TXCOMFINISH_out;
  assign CH2_TXCOMINIT_M = CH2_TXCOMINIT_M_out;
  assign CH2_TXCOMSAS_M = CH2_TXCOMSAS_M_out;
  assign CH2_TXCOMWAKE_M = CH2_TXCOMWAKE_M_out;
  assign CH2_TXCTRL0_M = CH2_TXCTRL0_M_out;
  assign CH2_TXCTRL1_M = CH2_TXCTRL1_M_out;
  assign CH2_TXCTRL2_M = CH2_TXCTRL2_M_out;
  assign CH2_TXDAPICODEOVRDEN_M = CH2_TXDAPICODEOVRDEN_M_out;
  assign CH2_TXDAPICODERESET_M = CH2_TXDAPICODERESET_M_out;
  assign CH2_TXDATAEXTENDRSVD_M = CH2_TXDATAEXTENDRSVD_M_out;
  assign CH2_TXDATA_M = CH2_TXDATA_M_out;
  assign CH2_TXDCCDONE = CH2_TXDCCDONE_out;
  assign CH2_TXDEEMPH_M = CH2_TXDEEMPH_M_out;
  assign CH2_TXDETECTRX_M = CH2_TXDETECTRX_M_out;
  assign CH2_TXDIFFCTRL_M = CH2_TXDIFFCTRL_M_out;
  assign CH2_TXDLYALIGNERR = CH2_TXDLYALIGNERR_out;
  assign CH2_TXDLYALIGNPROG = CH2_TXDLYALIGNPROG_out;
  assign CH2_TXDLYALIGNREQ_M = CH2_TXDLYALIGNREQ_M_out;
  assign CH2_TXELECIDLE_M = CH2_TXELECIDLE_M_out;
  assign CH2_TXHEADER_M = CH2_TXHEADER_M_out;
  assign CH2_TXINHIBIT_M = CH2_TXINHIBIT_M_out;
  assign CH2_TXLATCLK_M = CH2_TXLATCLK_M_out;
  assign CH2_TXMAINCURSOR_M = CH2_TXMAINCURSOR_M_out;
  assign CH2_TXMARGIN_M = CH2_TXMARGIN_M_out;
  assign CH2_TXMLDCHAINDONE_M = CH2_TXMLDCHAINDONE_M_out;
  assign CH2_TXMLDCHAINREQ_M = CH2_TXMLDCHAINREQ_M_out;
  assign CH2_TXONESZEROS_M = CH2_TXONESZEROS_M_out;
  assign CH2_TXPAUSEDELAYALIGN_M = CH2_TXPAUSEDELAYALIGN_M_out;
  assign CH2_TXPCSRESETMASK_M = CH2_TXPCSRESETMASK_M_out;
  assign CH2_TXPD_M = CH2_TXPD_M_out;
  assign CH2_TXPHALIGNDONE = CH2_TXPHALIGNDONE_out;
  assign CH2_TXPHALIGNERR = CH2_TXPHALIGNERR_out;
  assign CH2_TXPHALIGNOUTRSVD = CH2_TXPHALIGNOUTRSVD_out;
  assign CH2_TXPHALIGNREQ_M = CH2_TXPHALIGNREQ_M_out;
  assign CH2_TXPHALIGNRESETMASK_M = CH2_TXPHALIGNRESETMASK_M_out;
  assign CH2_TXPHDLYPD_M = CH2_TXPHDLYPD_M_out;
  assign CH2_TXPHDLYRESETDONE = CH2_TXPHDLYRESETDONE_out;
  assign CH2_TXPHDLYRESET_M = CH2_TXPHDLYRESET_M_out;
  assign CH2_TXPHDLYTSTCLK_M = CH2_TXPHDLYTSTCLK_M_out;
  assign CH2_TXPHSETINITDONE = CH2_TXPHSETINITDONE_out;
  assign CH2_TXPHSETINITREQ_M = CH2_TXPHSETINITREQ_M_out;
  assign CH2_TXPHSHIFT180DONE = CH2_TXPHSHIFT180DONE_out;
  assign CH2_TXPHSHIFT180_M = CH2_TXPHSHIFT180_M_out;
  assign CH2_TXPICODEOVRDEN_M = CH2_TXPICODEOVRDEN_M_out;
  assign CH2_TXPICODERESET_M = CH2_TXPICODERESET_M_out;
  assign CH2_TXPIPPMEN_M = CH2_TXPIPPMEN_M_out;
  assign CH2_TXPIPPMSTEPSIZE_M = CH2_TXPIPPMSTEPSIZE_M_out;
  assign CH2_TXPISOPD_M = CH2_TXPISOPD_M_out;
  assign CH2_TXPMARESETDONE = CH2_TXPMARESETDONE_out;
  assign CH2_TXPMARESETMASK_M = CH2_TXPMARESETMASK_M_out;
  assign CH2_TXPOLARITY_M = CH2_TXPOLARITY_M_out;
  assign CH2_TXPOSTCURSOR_M = CH2_TXPOSTCURSOR_M_out;
  assign CH2_TXPRBSFORCEERR_M = CH2_TXPRBSFORCEERR_M_out;
  assign CH2_TXPRBSSEL_M = CH2_TXPRBSSEL_M_out;
  assign CH2_TXPRECURSOR_M = CH2_TXPRECURSOR_M_out;
  assign CH2_TXPROGDIVRESETDONE = CH2_TXPROGDIVRESETDONE_out;
  assign CH2_TXPROGDIVRESET_M = CH2_TXPROGDIVRESET_M_out;
  assign CH2_TXRATE_M = CH2_TXRATE_M_out;
  assign CH2_TXRESETDONE = CH2_TXRESETDONE_out;
  assign CH2_TXRESETMODE_M = CH2_TXRESETMODE_M_out;
  assign CH2_TXSEQUENCE_M = CH2_TXSEQUENCE_M_out;
  assign CH2_TXSWING_M = CH2_TXSWING_M_out;
  assign CH2_TXSYNCALLIN_M = CH2_TXSYNCALLIN_M_out;
  assign CH2_TXSYNCDONE = CH2_TXSYNCDONE_out;
  assign CH2_TXUSERRDY_M = CH2_TXUSERRDY_M_out;
  assign CH2_TXUSRCLK_M = CH2_TXUSRCLK_M_out;
  assign CH3_BUFGTCE = CH3_BUFGTCE_out;
  assign CH3_BUFGTCEMASK = CH3_BUFGTCEMASK_out;
  assign CH3_BUFGTDIV = CH3_BUFGTDIV_out;
  assign CH3_BUFGTRST = CH3_BUFGTRST_out;
  assign CH3_BUFGTRSTMASK = CH3_BUFGTRSTMASK_out;
  assign CH3_CDRBMCDRREQ_M = CH3_CDRBMCDRREQ_M_out;
  assign CH3_CDRFREQOS_M = CH3_CDRFREQOS_M_out;
  assign CH3_CDRINCPCTRL_M = CH3_CDRINCPCTRL_M_out;
  assign CH3_CDRSTEPDIR_M = CH3_CDRSTEPDIR_M_out;
  assign CH3_CDRSTEPSQ_M = CH3_CDRSTEPSQ_M_out;
  assign CH3_CDRSTEPSX_M = CH3_CDRSTEPSX_M_out;
  assign CH3_CFOKOVRDFINISH_M = CH3_CFOKOVRDFINISH_M_out;
  assign CH3_CFOKOVRDPULSE_M = CH3_CFOKOVRDPULSE_M_out;
  assign CH3_CFOKOVRDRDY0 = CH3_CFOKOVRDRDY0_out;
  assign CH3_CFOKOVRDRDY1 = CH3_CFOKOVRDRDY1_out;
  assign CH3_CFOKOVRDSTART_M = CH3_CFOKOVRDSTART_M_out;
  assign CH3_CLKRSVD0_M = CH3_CLKRSVD0_M_out;
  assign CH3_CLKRSVD1_M = CH3_CLKRSVD1_M_out;
  assign CH3_DMONFIFORESET_M = CH3_DMONFIFORESET_M_out;
  assign CH3_DMONITORCLK_M = CH3_DMONITORCLK_M_out;
  assign CH3_DMONITOROUT = CH3_DMONITOROUT_out;
  assign CH3_EYESCANDATAERROR = CH3_EYESCANDATAERROR_out;
  assign CH3_EYESCANRESET_M = CH3_EYESCANRESET_M_out;
  assign CH3_EYESCANTRIGGER_M = CH3_EYESCANTRIGGER_M_out;
  assign CH3_GTRSVD_M = CH3_GTRSVD_M_out;
  assign CH3_GTRXRESET_M = CH3_GTRXRESET_M_out;
  assign CH3_GTTXRESET_M = CH3_GTTXRESET_M_out;
  assign CH3_HSDPPCSRESET_M = CH3_HSDPPCSRESET_M_out;
  assign CH3_ILORESETDONE = CH3_ILORESETDONE_out;
  assign CH3_ILORESETMASK_M = CH3_ILORESETMASK_M_out;
  assign CH3_ILORESET_M = CH3_ILORESET_M_out;
  assign CH3_LOOPBACK_M = CH3_LOOPBACK_M_out;
  assign CH3_PCIERSTB_M = CH3_PCIERSTB_M_out;
  assign CH3_PCSRSVDIN_M = CH3_PCSRSVDIN_M_out;
  assign CH3_PCSRSVDOUT = CH3_PCSRSVDOUT_out;
  assign CH3_PHYESMADAPTSAVE_M = CH3_PHYESMADAPTSAVE_M_out;
  assign CH3_PHYREADY = CH3_PHYREADY_out;
  assign CH3_PHYSTATUS = CH3_PHYSTATUS_out;
  assign CH3_PINRSVDAS = CH3_PINRSVDAS_out;
  assign CH3_RESETEXCEPTION = CH3_RESETEXCEPTION_out;
  assign CH3_RX10GSTAT = CH3_RX10GSTAT_out;
  assign CH3_RXBUFSTATUS = CH3_RXBUFSTATUS_out;
  assign CH3_RXBYTEISALIGNED = CH3_RXBYTEISALIGNED_out;
  assign CH3_RXBYTEREALIGN = CH3_RXBYTEREALIGN_out;
  assign CH3_RXCDRHOLD_M = CH3_RXCDRHOLD_M_out;
  assign CH3_RXCDRLOCK = CH3_RXCDRLOCK_out;
  assign CH3_RXCDROVRDEN_M = CH3_RXCDROVRDEN_M_out;
  assign CH3_RXCDRPHDONE = CH3_RXCDRPHDONE_out;
  assign CH3_RXCDRRESET_M = CH3_RXCDRRESET_M_out;
  assign CH3_RXCHANBONDSEQ = CH3_RXCHANBONDSEQ_out;
  assign CH3_RXCHANISALIGNED = CH3_RXCHANISALIGNED_out;
  assign CH3_RXCHANREALIGN = CH3_RXCHANREALIGN_out;
  assign CH3_RXCHBONDI_M = CH3_RXCHBONDI_M_out;
  assign CH3_RXCHBONDO = CH3_RXCHBONDO_out;
  assign CH3_RXCLKCORCNT = CH3_RXCLKCORCNT_out;
  assign CH3_RXCOMINITDET = CH3_RXCOMINITDET_out;
  assign CH3_RXCOMMADET = CH3_RXCOMMADET_out;
  assign CH3_RXCOMSASDET = CH3_RXCOMSASDET_out;
  assign CH3_RXCOMWAKEDET = CH3_RXCOMWAKEDET_out;
  assign CH3_RXCTRL0 = CH3_RXCTRL0_out;
  assign CH3_RXCTRL1 = CH3_RXCTRL1_out;
  assign CH3_RXCTRL2 = CH3_RXCTRL2_out;
  assign CH3_RXCTRL3 = CH3_RXCTRL3_out;
  assign CH3_RXDAPICODEOVRDEN_M = CH3_RXDAPICODEOVRDEN_M_out;
  assign CH3_RXDAPICODERESET_M = CH3_RXDAPICODERESET_M_out;
  assign CH3_RXDATA = CH3_RXDATA_out;
  assign CH3_RXDATAEXTENDRSVD = CH3_RXDATAEXTENDRSVD_out;
  assign CH3_RXDATAVALID = CH3_RXDATAVALID_out;
  assign CH3_RXDCCDONE = CH3_RXDCCDONE_out;
  assign CH3_RXDLYALIGNERR = CH3_RXDLYALIGNERR_out;
  assign CH3_RXDLYALIGNPROG = CH3_RXDLYALIGNPROG_out;
  assign CH3_RXDLYALIGNREQ_M = CH3_RXDLYALIGNREQ_M_out;
  assign CH3_RXELECIDLE = CH3_RXELECIDLE_out;
  assign CH3_RXEQTRAINING_M = CH3_RXEQTRAINING_M_out;
  assign CH3_RXFINEALIGNDONE = CH3_RXFINEALIGNDONE_out;
  assign CH3_RXGEARBOXSLIP_M = CH3_RXGEARBOXSLIP_M_out;
  assign CH3_RXHEADER = CH3_RXHEADER_out;
  assign CH3_RXHEADERVALID = CH3_RXHEADERVALID_out;
  assign CH3_RXLATCLK_M = CH3_RXLATCLK_M_out;
  assign CH3_RXLPMEN_M = CH3_RXLPMEN_M_out;
  assign CH3_RXMLDCHAINDONE_M = CH3_RXMLDCHAINDONE_M_out;
  assign CH3_RXMLDCHAINREQ_M = CH3_RXMLDCHAINREQ_M_out;
  assign CH3_RXMLFINEALIGNREQ_M = CH3_RXMLFINEALIGNREQ_M_out;
  assign CH3_RXOOBRESET_M = CH3_RXOOBRESET_M_out;
  assign CH3_RXOSINTDONE = CH3_RXOSINTDONE_out;
  assign CH3_RXOSINTSTARTED = CH3_RXOSINTSTARTED_out;
  assign CH3_RXOSINTSTROBEDONE = CH3_RXOSINTSTROBEDONE_out;
  assign CH3_RXOSINTSTROBESTARTED = CH3_RXOSINTSTROBESTARTED_out;
  assign CH3_RXPCSRESETMASK_M = CH3_RXPCSRESETMASK_M_out;
  assign CH3_RXPD_M = CH3_RXPD_M_out;
  assign CH3_RXPHALIGNDONE = CH3_RXPHALIGNDONE_out;
  assign CH3_RXPHALIGNERR = CH3_RXPHALIGNERR_out;
  assign CH3_RXPHALIGNREQ_M = CH3_RXPHALIGNREQ_M_out;
  assign CH3_RXPHALIGNRESETMASK_M = CH3_RXPHALIGNRESETMASK_M_out;
  assign CH3_RXPHDLYPD_M = CH3_RXPHDLYPD_M_out;
  assign CH3_RXPHDLYRESETDONE = CH3_RXPHDLYRESETDONE_out;
  assign CH3_RXPHDLYRESET_M = CH3_RXPHDLYRESET_M_out;
  assign CH3_RXPHSETINITDONE = CH3_RXPHSETINITDONE_out;
  assign CH3_RXPHSETINITREQ_M = CH3_RXPHSETINITREQ_M_out;
  assign CH3_RXPHSHIFT180DONE = CH3_RXPHSHIFT180DONE_out;
  assign CH3_RXPHSHIFT180_M = CH3_RXPHSHIFT180_M_out;
  assign CH3_RXPMARESETDONE = CH3_RXPMARESETDONE_out;
  assign CH3_RXPMARESETMASK_M = CH3_RXPMARESETMASK_M_out;
  assign CH3_RXPOLARITY_M = CH3_RXPOLARITY_M_out;
  assign CH3_RXPRBSCNTRESET_M = CH3_RXPRBSCNTRESET_M_out;
  assign CH3_RXPRBSERR = CH3_RXPRBSERR_out;
  assign CH3_RXPRBSLOCKED = CH3_RXPRBSLOCKED_out;
  assign CH3_RXPRBSSEL_M = CH3_RXPRBSSEL_M_out;
  assign CH3_RXPROGDIVRESETDONE = CH3_RXPROGDIVRESETDONE_out;
  assign CH3_RXPROGDIVRESET_M = CH3_RXPROGDIVRESET_M_out;
  assign CH3_RXRATE_M = CH3_RXRATE_M_out;
  assign CH3_RXRESETDONE = CH3_RXRESETDONE_out;
  assign CH3_RXRESETMODE_M = CH3_RXRESETMODE_M_out;
  assign CH3_RXSLIDERDY = CH3_RXSLIDERDY_out;
  assign CH3_RXSLIDE_M = CH3_RXSLIDE_M_out;
  assign CH3_RXSTARTOFSEQ = CH3_RXSTARTOFSEQ_out;
  assign CH3_RXSTATUS = CH3_RXSTATUS_out;
  assign CH3_RXSYNCALLIN_M = CH3_RXSYNCALLIN_M_out;
  assign CH3_RXSYNCDONE = CH3_RXSYNCDONE_out;
  assign CH3_RXTERMINATION_M = CH3_RXTERMINATION_M_out;
  assign CH3_RXUSERRDY_M = CH3_RXUSERRDY_M_out;
  assign CH3_RXUSRCLK_M = CH3_RXUSRCLK_M_out;
  assign CH3_RXVALID = CH3_RXVALID_out;
  assign CH3_TSTCLK0_M = CH3_TSTCLK0_M_out;
  assign CH3_TSTCLK1_M = CH3_TSTCLK1_M_out;
  assign CH3_TSTIN_M = CH3_TSTIN_M_out;
  assign CH3_TX10GSTAT = CH3_TX10GSTAT_out;
  assign CH3_TXBUFSTATUS = CH3_TXBUFSTATUS_out;
  assign CH3_TXCOMFINISH = CH3_TXCOMFINISH_out;
  assign CH3_TXCOMINIT_M = CH3_TXCOMINIT_M_out;
  assign CH3_TXCOMSAS_M = CH3_TXCOMSAS_M_out;
  assign CH3_TXCOMWAKE_M = CH3_TXCOMWAKE_M_out;
  assign CH3_TXCTRL0_M = CH3_TXCTRL0_M_out;
  assign CH3_TXCTRL1_M = CH3_TXCTRL1_M_out;
  assign CH3_TXCTRL2_M = CH3_TXCTRL2_M_out;
  assign CH3_TXDAPICODEOVRDEN_M = CH3_TXDAPICODEOVRDEN_M_out;
  assign CH3_TXDAPICODERESET_M = CH3_TXDAPICODERESET_M_out;
  assign CH3_TXDATAEXTENDRSVD_M = CH3_TXDATAEXTENDRSVD_M_out;
  assign CH3_TXDATA_M = CH3_TXDATA_M_out;
  assign CH3_TXDCCDONE = CH3_TXDCCDONE_out;
  assign CH3_TXDEEMPH_M = CH3_TXDEEMPH_M_out;
  assign CH3_TXDETECTRX_M = CH3_TXDETECTRX_M_out;
  assign CH3_TXDIFFCTRL_M = CH3_TXDIFFCTRL_M_out;
  assign CH3_TXDLYALIGNERR = CH3_TXDLYALIGNERR_out;
  assign CH3_TXDLYALIGNPROG = CH3_TXDLYALIGNPROG_out;
  assign CH3_TXDLYALIGNREQ_M = CH3_TXDLYALIGNREQ_M_out;
  assign CH3_TXELECIDLE_M = CH3_TXELECIDLE_M_out;
  assign CH3_TXHEADER_M = CH3_TXHEADER_M_out;
  assign CH3_TXINHIBIT_M = CH3_TXINHIBIT_M_out;
  assign CH3_TXLATCLK_M = CH3_TXLATCLK_M_out;
  assign CH3_TXMAINCURSOR_M = CH3_TXMAINCURSOR_M_out;
  assign CH3_TXMARGIN_M = CH3_TXMARGIN_M_out;
  assign CH3_TXMLDCHAINDONE_M = CH3_TXMLDCHAINDONE_M_out;
  assign CH3_TXMLDCHAINREQ_M = CH3_TXMLDCHAINREQ_M_out;
  assign CH3_TXONESZEROS_M = CH3_TXONESZEROS_M_out;
  assign CH3_TXPAUSEDELAYALIGN_M = CH3_TXPAUSEDELAYALIGN_M_out;
  assign CH3_TXPCSRESETMASK_M = CH3_TXPCSRESETMASK_M_out;
  assign CH3_TXPD_M = CH3_TXPD_M_out;
  assign CH3_TXPHALIGNDONE = CH3_TXPHALIGNDONE_out;
  assign CH3_TXPHALIGNERR = CH3_TXPHALIGNERR_out;
  assign CH3_TXPHALIGNOUTRSVD = CH3_TXPHALIGNOUTRSVD_out;
  assign CH3_TXPHALIGNREQ_M = CH3_TXPHALIGNREQ_M_out;
  assign CH3_TXPHALIGNRESETMASK_M = CH3_TXPHALIGNRESETMASK_M_out;
  assign CH3_TXPHDLYPD_M = CH3_TXPHDLYPD_M_out;
  assign CH3_TXPHDLYRESETDONE = CH3_TXPHDLYRESETDONE_out;
  assign CH3_TXPHDLYRESET_M = CH3_TXPHDLYRESET_M_out;
  assign CH3_TXPHDLYTSTCLK_M = CH3_TXPHDLYTSTCLK_M_out;
  assign CH3_TXPHSETINITDONE = CH3_TXPHSETINITDONE_out;
  assign CH3_TXPHSETINITREQ_M = CH3_TXPHSETINITREQ_M_out;
  assign CH3_TXPHSHIFT180DONE = CH3_TXPHSHIFT180DONE_out;
  assign CH3_TXPHSHIFT180_M = CH3_TXPHSHIFT180_M_out;
  assign CH3_TXPICODEOVRDEN_M = CH3_TXPICODEOVRDEN_M_out;
  assign CH3_TXPICODERESET_M = CH3_TXPICODERESET_M_out;
  assign CH3_TXPIPPMEN_M = CH3_TXPIPPMEN_M_out;
  assign CH3_TXPIPPMSTEPSIZE_M = CH3_TXPIPPMSTEPSIZE_M_out;
  assign CH3_TXPISOPD_M = CH3_TXPISOPD_M_out;
  assign CH3_TXPMARESETDONE = CH3_TXPMARESETDONE_out;
  assign CH3_TXPMARESETMASK_M = CH3_TXPMARESETMASK_M_out;
  assign CH3_TXPOLARITY_M = CH3_TXPOLARITY_M_out;
  assign CH3_TXPOSTCURSOR_M = CH3_TXPOSTCURSOR_M_out;
  assign CH3_TXPRBSFORCEERR_M = CH3_TXPRBSFORCEERR_M_out;
  assign CH3_TXPRBSSEL_M = CH3_TXPRBSSEL_M_out;
  assign CH3_TXPRECURSOR_M = CH3_TXPRECURSOR_M_out;
  assign CH3_TXPROGDIVRESETDONE = CH3_TXPROGDIVRESETDONE_out;
  assign CH3_TXPROGDIVRESET_M = CH3_TXPROGDIVRESET_M_out;
  assign CH3_TXRATE_M = CH3_TXRATE_M_out;
  assign CH3_TXRESETDONE = CH3_TXRESETDONE_out;
  assign CH3_TXRESETMODE_M = CH3_TXRESETMODE_M_out;
  assign CH3_TXSEQUENCE_M = CH3_TXSEQUENCE_M_out;
  assign CH3_TXSWING_M = CH3_TXSWING_M_out;
  assign CH3_TXSYNCALLIN_M = CH3_TXSYNCALLIN_M_out;
  assign CH3_TXSYNCDONE = CH3_TXSYNCDONE_out;
  assign CH3_TXUSERRDY_M = CH3_TXUSERRDY_M_out;
  assign CH3_TXUSRCLK_M = CH3_TXUSRCLK_M_out;
  assign CORRECTERR = CORRECTERR_out;
  assign CTRLRSVDIN0_M = CTRLRSVDIN0_M_out;
  assign CTRLRSVDIN1_M = CTRLRSVDIN1_M_out;
  assign CTRLRSVDOUT = CTRLRSVDOUT_out;
  assign DEBUGTRACECLK_M = DEBUGTRACECLK_M_out;
  assign DEBUGTRACEREADY_M = DEBUGTRACEREADY_M_out;
  assign DEBUGTRACETDATA = DEBUGTRACETDATA_out;
  assign DEBUGTRACETVALID = DEBUGTRACETVALID_out;
  assign GPI_M = GPI_M_out;
  assign GPO = GPO_out;
  assign GTPOWERGOOD = GTPOWERGOOD_out;
  assign HSCLK0_LCPLLCLKRSVD0_M = HSCLK0_LCPLLCLKRSVD0_M_out;
  assign HSCLK0_LCPLLCLKRSVD1_M = HSCLK0_LCPLLCLKRSVD1_M_out;
  assign HSCLK0_LCPLLFBCLKLOST = HSCLK0_LCPLLFBCLKLOST_out;
  assign HSCLK0_LCPLLFBDIV_M = HSCLK0_LCPLLFBDIV_M_out;
  assign HSCLK0_LCPLLGTGREFCLK_M = HSCLK0_LCPLLGTGREFCLK_M_out;
  assign HSCLK0_LCPLLLOCK = HSCLK0_LCPLLLOCK_out;
  assign HSCLK0_LCPLLPD_M = HSCLK0_LCPLLPD_M_out;
  assign HSCLK0_LCPLLREFCLKLOST = HSCLK0_LCPLLREFCLKLOST_out;
  assign HSCLK0_LCPLLREFCLKMONITOR = HSCLK0_LCPLLREFCLKMONITOR_out;
  assign HSCLK0_LCPLLREFCLKSEL_M = HSCLK0_LCPLLREFCLKSEL_M_out;
  assign HSCLK0_LCPLLRESETBYPASSMODE_M = HSCLK0_LCPLLRESETBYPASSMODE_M_out;
  assign HSCLK0_LCPLLRESETMASK_M = HSCLK0_LCPLLRESETMASK_M_out;
  assign HSCLK0_LCPLLRESET_M = HSCLK0_LCPLLRESET_M_out;
  assign HSCLK0_LCPLLRSVD0_M = HSCLK0_LCPLLRSVD0_M_out;
  assign HSCLK0_LCPLLRSVD1_M = HSCLK0_LCPLLRSVD1_M_out;
  assign HSCLK0_LCPLLRSVDOUT = HSCLK0_LCPLLRSVDOUT_out;
  assign HSCLK0_LCPLLSDMDATA_M = HSCLK0_LCPLLSDMDATA_M_out;
  assign HSCLK0_LCPLLSDMTOGGLE_M = HSCLK0_LCPLLSDMTOGGLE_M_out;
  assign HSCLK0_RPLLCLKRSVD0_M = HSCLK0_RPLLCLKRSVD0_M_out;
  assign HSCLK0_RPLLCLKRSVD1_M = HSCLK0_RPLLCLKRSVD1_M_out;
  assign HSCLK0_RPLLFBCLKLOST = HSCLK0_RPLLFBCLKLOST_out;
  assign HSCLK0_RPLLFBDIV_M = HSCLK0_RPLLFBDIV_M_out;
  assign HSCLK0_RPLLGTGREFCLK_M = HSCLK0_RPLLGTGREFCLK_M_out;
  assign HSCLK0_RPLLLOCK = HSCLK0_RPLLLOCK_out;
  assign HSCLK0_RPLLPD_M = HSCLK0_RPLLPD_M_out;
  assign HSCLK0_RPLLREFCLKLOST = HSCLK0_RPLLREFCLKLOST_out;
  assign HSCLK0_RPLLREFCLKMONITOR = HSCLK0_RPLLREFCLKMONITOR_out;
  assign HSCLK0_RPLLREFCLKSEL_M = HSCLK0_RPLLREFCLKSEL_M_out;
  assign HSCLK0_RPLLRESETBYPASSMODE_M = HSCLK0_RPLLRESETBYPASSMODE_M_out;
  assign HSCLK0_RPLLRESETMASK_M = HSCLK0_RPLLRESETMASK_M_out;
  assign HSCLK0_RPLLRESET_M = HSCLK0_RPLLRESET_M_out;
  assign HSCLK0_RPLLRSVD0_M = HSCLK0_RPLLRSVD0_M_out;
  assign HSCLK0_RPLLRSVD1_M = HSCLK0_RPLLRSVD1_M_out;
  assign HSCLK0_RPLLRSVDOUT = HSCLK0_RPLLRSVDOUT_out;
  assign HSCLK0_RPLLSDMDATA_M = HSCLK0_RPLLSDMDATA_M_out;
  assign HSCLK0_RPLLSDMTOGGLE_M = HSCLK0_RPLLSDMTOGGLE_M_out;
  assign HSCLK1_LCPLLCLKRSVD0_M = HSCLK1_LCPLLCLKRSVD0_M_out;
  assign HSCLK1_LCPLLCLKRSVD1_M = HSCLK1_LCPLLCLKRSVD1_M_out;
  assign HSCLK1_LCPLLFBCLKLOST = HSCLK1_LCPLLFBCLKLOST_out;
  assign HSCLK1_LCPLLFBDIV_M = HSCLK1_LCPLLFBDIV_M_out;
  assign HSCLK1_LCPLLGTGREFCLK_M = HSCLK1_LCPLLGTGREFCLK_M_out;
  assign HSCLK1_LCPLLLOCK = HSCLK1_LCPLLLOCK_out;
  assign HSCLK1_LCPLLPD_M = HSCLK1_LCPLLPD_M_out;
  assign HSCLK1_LCPLLREFCLKLOST = HSCLK1_LCPLLREFCLKLOST_out;
  assign HSCLK1_LCPLLREFCLKMONITOR = HSCLK1_LCPLLREFCLKMONITOR_out;
  assign HSCLK1_LCPLLREFCLKSEL_M = HSCLK1_LCPLLREFCLKSEL_M_out;
  assign HSCLK1_LCPLLRESETBYPASSMODE_M = HSCLK1_LCPLLRESETBYPASSMODE_M_out;
  assign HSCLK1_LCPLLRESETMASK_M = HSCLK1_LCPLLRESETMASK_M_out;
  assign HSCLK1_LCPLLRESET_M = HSCLK1_LCPLLRESET_M_out;
  assign HSCLK1_LCPLLRSVD0_M = HSCLK1_LCPLLRSVD0_M_out;
  assign HSCLK1_LCPLLRSVD1_M = HSCLK1_LCPLLRSVD1_M_out;
  assign HSCLK1_LCPLLRSVDOUT = HSCLK1_LCPLLRSVDOUT_out;
  assign HSCLK1_LCPLLSDMDATA_M = HSCLK1_LCPLLSDMDATA_M_out;
  assign HSCLK1_LCPLLSDMTOGGLE_M = HSCLK1_LCPLLSDMTOGGLE_M_out;
  assign HSCLK1_RPLLCLKRSVD0_M = HSCLK1_RPLLCLKRSVD0_M_out;
  assign HSCLK1_RPLLCLKRSVD1_M = HSCLK1_RPLLCLKRSVD1_M_out;
  assign HSCLK1_RPLLFBCLKLOST = HSCLK1_RPLLFBCLKLOST_out;
  assign HSCLK1_RPLLFBDIV_M = HSCLK1_RPLLFBDIV_M_out;
  assign HSCLK1_RPLLGTGREFCLK_M = HSCLK1_RPLLGTGREFCLK_M_out;
  assign HSCLK1_RPLLLOCK = HSCLK1_RPLLLOCK_out;
  assign HSCLK1_RPLLPD_M = HSCLK1_RPLLPD_M_out;
  assign HSCLK1_RPLLREFCLKLOST = HSCLK1_RPLLREFCLKLOST_out;
  assign HSCLK1_RPLLREFCLKMONITOR = HSCLK1_RPLLREFCLKMONITOR_out;
  assign HSCLK1_RPLLREFCLKSEL_M = HSCLK1_RPLLREFCLKSEL_M_out;
  assign HSCLK1_RPLLRESETBYPASSMODE_M = HSCLK1_RPLLRESETBYPASSMODE_M_out;
  assign HSCLK1_RPLLRESETMASK_M = HSCLK1_RPLLRESETMASK_M_out;
  assign HSCLK1_RPLLRESET_M = HSCLK1_RPLLRESET_M_out;
  assign HSCLK1_RPLLRSVD0_M = HSCLK1_RPLLRSVD0_M_out;
  assign HSCLK1_RPLLRSVD1_M = HSCLK1_RPLLRSVD1_M_out;
  assign HSCLK1_RPLLRSVDOUT = HSCLK1_RPLLRSVDOUT_out;
  assign HSCLK1_RPLLSDMDATA_M = HSCLK1_RPLLSDMDATA_M_out;
  assign HSCLK1_RPLLSDMTOGGLE_M = HSCLK1_RPLLSDMTOGGLE_M_out;
  assign M0_AXIS_TDATA = M0_AXIS_TDATA_out;
  assign M0_AXIS_TLAST = M0_AXIS_TLAST_out;
  assign M0_AXIS_TREADY_M = M0_AXIS_TREADY_M_out;
  assign M0_AXIS_TVALID = M0_AXIS_TVALID_out;
  assign M1_AXIS_TDATA = M1_AXIS_TDATA_out;
  assign M1_AXIS_TLAST = M1_AXIS_TLAST_out;
  assign M1_AXIS_TREADY_M = M1_AXIS_TREADY_M_out;
  assign M1_AXIS_TVALID = M1_AXIS_TVALID_out;
  assign M2_AXIS_TDATA = M2_AXIS_TDATA_out;
  assign M2_AXIS_TLAST = M2_AXIS_TLAST_out;
  assign M2_AXIS_TREADY_M = M2_AXIS_TREADY_M_out;
  assign M2_AXIS_TVALID = M2_AXIS_TVALID_out;
  assign MSTRXRESETDONE = MSTRXRESETDONE_out;
  assign MSTRXRESET_M = MSTRXRESET_M_out;
  assign MSTTXRESETDONE = MSTTXRESETDONE_out;
  assign MSTTXRESET_M = MSTTXRESET_M_out;
  assign PCIELINKREACHTARGET_M = PCIELINKREACHTARGET_M_out;
  assign PCIELTSSM_M = PCIELTSSM_M_out;
  assign RCALENB_M = RCALENB_M_out;
  assign REFCLK0_CLKTESTSIG_M = REFCLK0_CLKTESTSIG_M_out;
  assign REFCLK0_GTREFCLKPD_M = REFCLK0_GTREFCLKPD_M_out;
  assign REFCLK1_CLKTESTSIG_M = REFCLK1_CLKTESTSIG_M_out;
  assign REFCLK1_GTREFCLKPD_M = REFCLK1_GTREFCLKPD_M_out;
  assign RXMARGINCLK_M = RXMARGINCLK_M_out;
  assign RXMARGINREQACK = RXMARGINREQACK_out;
  assign RXMARGINREQCMD_M = RXMARGINREQCMD_M_out;
  assign RXMARGINREQLANENUM_M = RXMARGINREQLANENUM_M_out;
  assign RXMARGINREQPAYLD_M = RXMARGINREQPAYLD_M_out;
  assign RXMARGINREQREQ_M = RXMARGINREQREQ_M_out;
  assign RXMARGINRESACK_M = RXMARGINRESACK_M_out;
  assign RXMARGINRESCMD = RXMARGINRESCMD_out;
  assign RXMARGINRESLANENUM = RXMARGINRESLANENUM_out;
  assign RXMARGINRESPAYLD = RXMARGINRESPAYLD_out;
  assign RXMARGINRESREQ = RXMARGINRESREQ_out;
  assign S0_AXIS_TDATA_M = S0_AXIS_TDATA_M_out;
  assign S0_AXIS_TLAST_M = S0_AXIS_TLAST_M_out;
  assign S0_AXIS_TREADY = S0_AXIS_TREADY_out;
  assign S0_AXIS_TVALID_M = S0_AXIS_TVALID_M_out;
  assign S1_AXIS_TDATA_M = S1_AXIS_TDATA_M_out;
  assign S1_AXIS_TLAST_M = S1_AXIS_TLAST_M_out;
  assign S1_AXIS_TREADY = S1_AXIS_TREADY_out;
  assign S1_AXIS_TVALID_M = S1_AXIS_TVALID_M_out;
  assign S2_AXIS_TDATA_M = S2_AXIS_TDATA_M_out;
  assign S2_AXIS_TLAST_M = S2_AXIS_TLAST_M_out;
  assign S2_AXIS_TREADY = S2_AXIS_TREADY_out;
  assign S2_AXIS_TVALID_M = S2_AXIS_TVALID_M_out;
  assign TRIGACKIN0 = TRIGACKIN0_out;
  assign TRIGACKOUT0_M = TRIGACKOUT0_M_out;
  assign TRIGIN0_M = TRIGIN0_M_out;
  assign TRIGOUT0 = TRIGOUT0_out;
  assign TXOUTCLKDBG_NORTH = TXOUTCLKDBG_NORTH_out;
  assign TXOUTCLKDBG_SOUTH = TXOUTCLKDBG_SOUTH_out;
  assign UBENABLE_M = UBENABLE_M_out;
  assign UBINTERRUPT = UBINTERRUPT_out;
  assign UBINTR_M = UBINTR_M_out;
  assign UBIOLMBRST_M = UBIOLMBRST_M_out;
  assign UBMBRST_M = UBMBRST_M_out;
  assign UBRXUART_M = UBRXUART_M_out;
  assign UBTXUART = UBTXUART_out;
  assign UNCORRECTERR = UNCORRECTERR_out;
  assign XPIPE_BUFGTCE = XPIPE_BUFGTCE_out;
  assign XPIPE_BUFGTCE_1 = XPIPE_BUFGTCE_1_out;
  assign XPIPE_BUFGTCE_MASK = XPIPE_BUFGTCE_MASK_out;
  assign XPIPE_BUFGTCE_MASK_1 = XPIPE_BUFGTCE_MASK_1_out;
  assign XPIPE_BUFGTDIV = XPIPE_BUFGTDIV_out;
  assign XPIPE_BUFGTDIV_1 = XPIPE_BUFGTDIV_1_out;
  assign XPIPE_BUFGTRST = XPIPE_BUFGTRST_out;
  assign XPIPE_BUFGTRST_1 = XPIPE_BUFGTRST_1_out;
  assign XPIPE_BUFGTRST_MASK = XPIPE_BUFGTRST_MASK_out;
  assign XPIPE_BUFGTRST_MASK_1 = XPIPE_BUFGTRST_MASK_1_out;
  assign XPIPE_GT_OUTCLK = XPIPE_GT_OUTCLK_out;
  assign XPIPE_GT_OUTCLK_1 = XPIPE_GT_OUTCLK_1_out;
  assign XPIPE_GT_PIPECLK_M = XPIPE_GT_PIPECLK_M_out;
  assign XPIPE_GT_PIPECLK_M_1 = XPIPE_GT_PIPECLK_M_1_out;
  assign XPIPE_GT_RXOUTCLK = XPIPE_GT_RXOUTCLK_out;
  assign XPIPE_GT_RXUSRCLK_M = XPIPE_GT_RXUSRCLK_M_out;
  assign XPIPE_HSDP_RXDATAVALID = XPIPE_HSDP_RXDATAVALID_out;
  assign XPIPE_HSDP_RXDATAVALID_1 = XPIPE_HSDP_RXDATAVALID_1_out;
  assign XPIPE_HSDP_RXDATAVALID_2 = XPIPE_HSDP_RXDATAVALID_2_out;
  assign XPIPE_HSDP_RXGEARBOXSLIP_M = XPIPE_HSDP_RXGEARBOXSLIP_M_out;
  assign XPIPE_HSDP_RXGEARBOXSLIP_M_1 = XPIPE_HSDP_RXGEARBOXSLIP_M_1_out;
  assign XPIPE_HSDP_RXGEARBOXSLIP_M_2 = XPIPE_HSDP_RXGEARBOXSLIP_M_2_out;
  assign XPIPE_HSDP_RXHEADER = XPIPE_HSDP_RXHEADER_out;
  assign XPIPE_HSDP_RXHEADERVALID = XPIPE_HSDP_RXHEADERVALID_out;
  assign XPIPE_HSDP_RXHEADERVALID_1 = XPIPE_HSDP_RXHEADERVALID_1_out;
  assign XPIPE_HSDP_RXHEADERVALID_2 = XPIPE_HSDP_RXHEADERVALID_2_out;
  assign XPIPE_HSDP_RXHEADER_1 = XPIPE_HSDP_RXHEADER_1_out;
  assign XPIPE_HSDP_RXHEADER_2 = XPIPE_HSDP_RXHEADER_2_out;
  assign XPIPE_HSDP_RXPCSRESET_M = XPIPE_HSDP_RXPCSRESET_M_out;
  assign XPIPE_HSDP_RXPCSRESET_M_1 = XPIPE_HSDP_RXPCSRESET_M_1_out;
  assign XPIPE_HSDP_RXPCSRESET_M_2 = XPIPE_HSDP_RXPCSRESET_M_2_out;
  assign XPIPE_HSDP_RXRESETDONE = XPIPE_HSDP_RXRESETDONE_out;
  assign XPIPE_HSDP_RXRESETDONE_1 = XPIPE_HSDP_RXRESETDONE_1_out;
  assign XPIPE_HSDP_RXRESETDONE_2 = XPIPE_HSDP_RXRESETDONE_2_out;
  assign XPIPE_HSDP_TXHEADER_M = XPIPE_HSDP_TXHEADER_M_out;
  assign XPIPE_HSDP_TXHEADER_M_1 = XPIPE_HSDP_TXHEADER_M_1_out;
  assign XPIPE_HSDP_TXHEADER_M_2 = XPIPE_HSDP_TXHEADER_M_2_out;
  assign XPIPE_HSDP_TXRESETDONE = XPIPE_HSDP_TXRESETDONE_out;
  assign XPIPE_HSDP_TXRESETDONE_1 = XPIPE_HSDP_TXRESETDONE_1_out;
  assign XPIPE_HSDP_TXRESETDONE_2 = XPIPE_HSDP_TXRESETDONE_2_out;
  assign XPIPE_HSDP_TXSEQUENCE_M = XPIPE_HSDP_TXSEQUENCE_M_out;
  assign XPIPE_HSDP_TXSEQUENCE_M_1 = XPIPE_HSDP_TXSEQUENCE_M_1_out;
  assign XPIPE_HSDP_TXSEQUENCE_M_2 = XPIPE_HSDP_TXSEQUENCE_M_2_out;
  assign XPIPE_PCIELINKREACHTARGET_M = XPIPE_PCIELINKREACHTARGET_M_out;
  assign XPIPE_PCIELINKREACHTARGET_M_1 = XPIPE_PCIELINKREACHTARGET_M_1_out;
  assign XPIPE_PCIELTSSMSTATE_M = XPIPE_PCIELTSSMSTATE_M_out;
  assign XPIPE_PCIELTSSMSTATE_M_1 = XPIPE_PCIELTSSMSTATE_M_1_out;
  assign XPIPE_PCIE_PERST_N_M = XPIPE_PCIE_PERST_N_M_out;
  assign XPIPE_PCIE_PERST_N_M_1 = XPIPE_PCIE_PERST_N_M_1_out;
  assign XPIPE_PCIE_RATE_M = XPIPE_PCIE_RATE_M_out;
  assign XPIPE_PCIE_RATE_M_1 = XPIPE_PCIE_RATE_M_1_out;
  assign XPIPE_PHYESMADAPTSAVE_M = XPIPE_PHYESMADAPTSAVE_M_out;
  assign XPIPE_PHYESMADAPTSAVE_M_1 = XPIPE_PHYESMADAPTSAVE_M_1_out;
  assign XPIPE_PHYREADY_FR_BOT_M = XPIPE_PHYREADY_FR_BOT_M_out;
  assign XPIPE_PHYREADY_TO_BOT = XPIPE_PHYREADY_TO_BOT_out;
  assign XPIPE_PHY_READY = XPIPE_PHY_READY_out;
  assign XPIPE_PHY_READY_1 = XPIPE_PHY_READY_1_out;
  assign XPIPE_PIPE_CH0_PHYSTATUS = XPIPE_PIPE_CH0_PHYSTATUS_out;
  assign XPIPE_PIPE_CH0_POWERDOWN_M = XPIPE_PIPE_CH0_POWERDOWN_M_out;
  assign XPIPE_PIPE_CH0_RXCHARISK = XPIPE_PIPE_CH0_RXCHARISK_out;
  assign XPIPE_PIPE_CH0_RXDATA = XPIPE_PIPE_CH0_RXDATA_out;
  assign XPIPE_PIPE_CH0_RXDATAVALID = XPIPE_PIPE_CH0_RXDATAVALID_out;
  assign XPIPE_PIPE_CH0_RXELECIDLE = XPIPE_PIPE_CH0_RXELECIDLE_out;
  assign XPIPE_PIPE_CH0_RXPOLARITY_M = XPIPE_PIPE_CH0_RXPOLARITY_M_out;
  assign XPIPE_PIPE_CH0_RXSTARTBLOCK = XPIPE_PIPE_CH0_RXSTARTBLOCK_out;
  assign XPIPE_PIPE_CH0_RXSTATUS = XPIPE_PIPE_CH0_RXSTATUS_out;
  assign XPIPE_PIPE_CH0_RXSYNCHEADER = XPIPE_PIPE_CH0_RXSYNCHEADER_out;
  assign XPIPE_PIPE_CH0_RXTERMINATION_M = XPIPE_PIPE_CH0_RXTERMINATION_M_out;
  assign XPIPE_PIPE_CH0_RXVALID = XPIPE_PIPE_CH0_RXVALID_out;
  assign XPIPE_PIPE_CH0_TXCHARISK_M = XPIPE_PIPE_CH0_TXCHARISK_M_out;
  assign XPIPE_PIPE_CH0_TXCOMPLIANCE_M = XPIPE_PIPE_CH0_TXCOMPLIANCE_M_out;
  assign XPIPE_PIPE_CH0_TXDATAVALID_M = XPIPE_PIPE_CH0_TXDATAVALID_M_out;
  assign XPIPE_PIPE_CH0_TXDATA_M = XPIPE_PIPE_CH0_TXDATA_M_out;
  assign XPIPE_PIPE_CH0_TXDEEMPH_M = XPIPE_PIPE_CH0_TXDEEMPH_M_out;
  assign XPIPE_PIPE_CH0_TXDETECTRXLOOPBACK_M = XPIPE_PIPE_CH0_TXDETECTRXLOOPBACK_M_out;
  assign XPIPE_PIPE_CH0_TXELECIDLE_M = XPIPE_PIPE_CH0_TXELECIDLE_M_out;
  assign XPIPE_PIPE_CH0_TXMAINCURSOR_M = XPIPE_PIPE_CH0_TXMAINCURSOR_M_out;
  assign XPIPE_PIPE_CH0_TXMARGIN_M = XPIPE_PIPE_CH0_TXMARGIN_M_out;
  assign XPIPE_PIPE_CH0_TXPOSTCURSOR_M = XPIPE_PIPE_CH0_TXPOSTCURSOR_M_out;
  assign XPIPE_PIPE_CH0_TXPRECURSOR_M = XPIPE_PIPE_CH0_TXPRECURSOR_M_out;
  assign XPIPE_PIPE_CH0_TXSTARTBLOCK_M = XPIPE_PIPE_CH0_TXSTARTBLOCK_M_out;
  assign XPIPE_PIPE_CH0_TXSWING_M = XPIPE_PIPE_CH0_TXSWING_M_out;
  assign XPIPE_PIPE_CH0_TXSYNCHEADER_M = XPIPE_PIPE_CH0_TXSYNCHEADER_M_out;
  assign XPIPE_PIPE_CH10_PHYSTATUS = XPIPE_PIPE_CH10_PHYSTATUS_out;
  assign XPIPE_PIPE_CH10_POWERDOWN_M = XPIPE_PIPE_CH10_POWERDOWN_M_out;
  assign XPIPE_PIPE_CH10_RXCHARISK = XPIPE_PIPE_CH10_RXCHARISK_out;
  assign XPIPE_PIPE_CH10_RXDATA = XPIPE_PIPE_CH10_RXDATA_out;
  assign XPIPE_PIPE_CH10_RXDATAVALID = XPIPE_PIPE_CH10_RXDATAVALID_out;
  assign XPIPE_PIPE_CH10_RXELECIDLE = XPIPE_PIPE_CH10_RXELECIDLE_out;
  assign XPIPE_PIPE_CH10_RXPOLARITY_M = XPIPE_PIPE_CH10_RXPOLARITY_M_out;
  assign XPIPE_PIPE_CH10_RXSTARTBLOCK = XPIPE_PIPE_CH10_RXSTARTBLOCK_out;
  assign XPIPE_PIPE_CH10_RXSTATUS = XPIPE_PIPE_CH10_RXSTATUS_out;
  assign XPIPE_PIPE_CH10_RXSYNCHEADER = XPIPE_PIPE_CH10_RXSYNCHEADER_out;
  assign XPIPE_PIPE_CH10_RXTERMINATION_M = XPIPE_PIPE_CH10_RXTERMINATION_M_out;
  assign XPIPE_PIPE_CH10_RXVALID = XPIPE_PIPE_CH10_RXVALID_out;
  assign XPIPE_PIPE_CH10_TXCHARISK_M = XPIPE_PIPE_CH10_TXCHARISK_M_out;
  assign XPIPE_PIPE_CH10_TXCOMPLIANCE_M = XPIPE_PIPE_CH10_TXCOMPLIANCE_M_out;
  assign XPIPE_PIPE_CH10_TXDATAVALID_M = XPIPE_PIPE_CH10_TXDATAVALID_M_out;
  assign XPIPE_PIPE_CH10_TXDATA_M = XPIPE_PIPE_CH10_TXDATA_M_out;
  assign XPIPE_PIPE_CH10_TXDEEMPH_M = XPIPE_PIPE_CH10_TXDEEMPH_M_out;
  assign XPIPE_PIPE_CH10_TXDETECTRXLOOPBACK_M = XPIPE_PIPE_CH10_TXDETECTRXLOOPBACK_M_out;
  assign XPIPE_PIPE_CH10_TXELECIDLE_M = XPIPE_PIPE_CH10_TXELECIDLE_M_out;
  assign XPIPE_PIPE_CH10_TXMAINCURSOR_M = XPIPE_PIPE_CH10_TXMAINCURSOR_M_out;
  assign XPIPE_PIPE_CH10_TXMARGIN_M = XPIPE_PIPE_CH10_TXMARGIN_M_out;
  assign XPIPE_PIPE_CH10_TXPOSTCURSOR_M = XPIPE_PIPE_CH10_TXPOSTCURSOR_M_out;
  assign XPIPE_PIPE_CH10_TXPRECURSOR_M = XPIPE_PIPE_CH10_TXPRECURSOR_M_out;
  assign XPIPE_PIPE_CH10_TXSTARTBLOCK_M = XPIPE_PIPE_CH10_TXSTARTBLOCK_M_out;
  assign XPIPE_PIPE_CH10_TXSWING_M = XPIPE_PIPE_CH10_TXSWING_M_out;
  assign XPIPE_PIPE_CH10_TXSYNCHEADER_M = XPIPE_PIPE_CH10_TXSYNCHEADER_M_out;
  assign XPIPE_PIPE_CH11_PHYSTATUS = XPIPE_PIPE_CH11_PHYSTATUS_out;
  assign XPIPE_PIPE_CH11_POWERDOWN_M = XPIPE_PIPE_CH11_POWERDOWN_M_out;
  assign XPIPE_PIPE_CH11_RXCHARISK = XPIPE_PIPE_CH11_RXCHARISK_out;
  assign XPIPE_PIPE_CH11_RXDATA = XPIPE_PIPE_CH11_RXDATA_out;
  assign XPIPE_PIPE_CH11_RXDATAVALID = XPIPE_PIPE_CH11_RXDATAVALID_out;
  assign XPIPE_PIPE_CH11_RXELECIDLE = XPIPE_PIPE_CH11_RXELECIDLE_out;
  assign XPIPE_PIPE_CH11_RXPOLARITY_M = XPIPE_PIPE_CH11_RXPOLARITY_M_out;
  assign XPIPE_PIPE_CH11_RXSTARTBLOCK = XPIPE_PIPE_CH11_RXSTARTBLOCK_out;
  assign XPIPE_PIPE_CH11_RXSTATUS = XPIPE_PIPE_CH11_RXSTATUS_out;
  assign XPIPE_PIPE_CH11_RXSYNCHEADER = XPIPE_PIPE_CH11_RXSYNCHEADER_out;
  assign XPIPE_PIPE_CH11_RXTERMINATION_M = XPIPE_PIPE_CH11_RXTERMINATION_M_out;
  assign XPIPE_PIPE_CH11_RXVALID = XPIPE_PIPE_CH11_RXVALID_out;
  assign XPIPE_PIPE_CH11_TXCHARISK_M = XPIPE_PIPE_CH11_TXCHARISK_M_out;
  assign XPIPE_PIPE_CH11_TXCOMPLIANCE_M = XPIPE_PIPE_CH11_TXCOMPLIANCE_M_out;
  assign XPIPE_PIPE_CH11_TXDATAVALID_M = XPIPE_PIPE_CH11_TXDATAVALID_M_out;
  assign XPIPE_PIPE_CH11_TXDATA_M = XPIPE_PIPE_CH11_TXDATA_M_out;
  assign XPIPE_PIPE_CH11_TXDEEMPH_M = XPIPE_PIPE_CH11_TXDEEMPH_M_out;
  assign XPIPE_PIPE_CH11_TXDETECTRXLOOPBACK_M = XPIPE_PIPE_CH11_TXDETECTRXLOOPBACK_M_out;
  assign XPIPE_PIPE_CH11_TXELECIDLE_M = XPIPE_PIPE_CH11_TXELECIDLE_M_out;
  assign XPIPE_PIPE_CH11_TXMAINCURSOR_M = XPIPE_PIPE_CH11_TXMAINCURSOR_M_out;
  assign XPIPE_PIPE_CH11_TXMARGIN_M = XPIPE_PIPE_CH11_TXMARGIN_M_out;
  assign XPIPE_PIPE_CH11_TXPOSTCURSOR_M = XPIPE_PIPE_CH11_TXPOSTCURSOR_M_out;
  assign XPIPE_PIPE_CH11_TXPRECURSOR_M = XPIPE_PIPE_CH11_TXPRECURSOR_M_out;
  assign XPIPE_PIPE_CH11_TXSTARTBLOCK_M = XPIPE_PIPE_CH11_TXSTARTBLOCK_M_out;
  assign XPIPE_PIPE_CH11_TXSWING_M = XPIPE_PIPE_CH11_TXSWING_M_out;
  assign XPIPE_PIPE_CH11_TXSYNCHEADER_M = XPIPE_PIPE_CH11_TXSYNCHEADER_M_out;
  assign XPIPE_PIPE_CH12_PHYSTATUS = XPIPE_PIPE_CH12_PHYSTATUS_out;
  assign XPIPE_PIPE_CH12_POWERDOWN_M = XPIPE_PIPE_CH12_POWERDOWN_M_out;
  assign XPIPE_PIPE_CH12_RXCHARISK = XPIPE_PIPE_CH12_RXCHARISK_out;
  assign XPIPE_PIPE_CH12_RXDATA = XPIPE_PIPE_CH12_RXDATA_out;
  assign XPIPE_PIPE_CH12_RXDATAVALID = XPIPE_PIPE_CH12_RXDATAVALID_out;
  assign XPIPE_PIPE_CH12_RXELECIDLE = XPIPE_PIPE_CH12_RXELECIDLE_out;
  assign XPIPE_PIPE_CH12_RXPOLARITY_M = XPIPE_PIPE_CH12_RXPOLARITY_M_out;
  assign XPIPE_PIPE_CH12_RXSTARTBLOCK = XPIPE_PIPE_CH12_RXSTARTBLOCK_out;
  assign XPIPE_PIPE_CH12_RXSTATUS = XPIPE_PIPE_CH12_RXSTATUS_out;
  assign XPIPE_PIPE_CH12_RXSYNCHEADER = XPIPE_PIPE_CH12_RXSYNCHEADER_out;
  assign XPIPE_PIPE_CH12_RXTERMINATION_M = XPIPE_PIPE_CH12_RXTERMINATION_M_out;
  assign XPIPE_PIPE_CH12_RXVALID = XPIPE_PIPE_CH12_RXVALID_out;
  assign XPIPE_PIPE_CH12_TXCHARISK_M = XPIPE_PIPE_CH12_TXCHARISK_M_out;
  assign XPIPE_PIPE_CH12_TXCOMPLIANCE_M = XPIPE_PIPE_CH12_TXCOMPLIANCE_M_out;
  assign XPIPE_PIPE_CH12_TXDATAVALID_M = XPIPE_PIPE_CH12_TXDATAVALID_M_out;
  assign XPIPE_PIPE_CH12_TXDATA_M = XPIPE_PIPE_CH12_TXDATA_M_out;
  assign XPIPE_PIPE_CH12_TXDEEMPH_M = XPIPE_PIPE_CH12_TXDEEMPH_M_out;
  assign XPIPE_PIPE_CH12_TXDETECTRXLOOPBACK_M = XPIPE_PIPE_CH12_TXDETECTRXLOOPBACK_M_out;
  assign XPIPE_PIPE_CH12_TXELECIDLE_M = XPIPE_PIPE_CH12_TXELECIDLE_M_out;
  assign XPIPE_PIPE_CH12_TXMAINCURSOR_M = XPIPE_PIPE_CH12_TXMAINCURSOR_M_out;
  assign XPIPE_PIPE_CH12_TXMARGIN_M = XPIPE_PIPE_CH12_TXMARGIN_M_out;
  assign XPIPE_PIPE_CH12_TXPOSTCURSOR_M = XPIPE_PIPE_CH12_TXPOSTCURSOR_M_out;
  assign XPIPE_PIPE_CH12_TXPRECURSOR_M = XPIPE_PIPE_CH12_TXPRECURSOR_M_out;
  assign XPIPE_PIPE_CH12_TXSTARTBLOCK_M = XPIPE_PIPE_CH12_TXSTARTBLOCK_M_out;
  assign XPIPE_PIPE_CH12_TXSWING_M = XPIPE_PIPE_CH12_TXSWING_M_out;
  assign XPIPE_PIPE_CH12_TXSYNCHEADER_M = XPIPE_PIPE_CH12_TXSYNCHEADER_M_out;
  assign XPIPE_PIPE_CH13_PHYSTATUS = XPIPE_PIPE_CH13_PHYSTATUS_out;
  assign XPIPE_PIPE_CH13_POWERDOWN_M = XPIPE_PIPE_CH13_POWERDOWN_M_out;
  assign XPIPE_PIPE_CH13_RXCHARISK = XPIPE_PIPE_CH13_RXCHARISK_out;
  assign XPIPE_PIPE_CH13_RXDATA = XPIPE_PIPE_CH13_RXDATA_out;
  assign XPIPE_PIPE_CH13_RXDATAVALID = XPIPE_PIPE_CH13_RXDATAVALID_out;
  assign XPIPE_PIPE_CH13_RXELECIDLE = XPIPE_PIPE_CH13_RXELECIDLE_out;
  assign XPIPE_PIPE_CH13_RXPOLARITY_M = XPIPE_PIPE_CH13_RXPOLARITY_M_out;
  assign XPIPE_PIPE_CH13_RXSTARTBLOCK = XPIPE_PIPE_CH13_RXSTARTBLOCK_out;
  assign XPIPE_PIPE_CH13_RXSTATUS = XPIPE_PIPE_CH13_RXSTATUS_out;
  assign XPIPE_PIPE_CH13_RXSYNCHEADER = XPIPE_PIPE_CH13_RXSYNCHEADER_out;
  assign XPIPE_PIPE_CH13_RXTERMINATION_M = XPIPE_PIPE_CH13_RXTERMINATION_M_out;
  assign XPIPE_PIPE_CH13_RXVALID = XPIPE_PIPE_CH13_RXVALID_out;
  assign XPIPE_PIPE_CH13_TXCHARISK_M = XPIPE_PIPE_CH13_TXCHARISK_M_out;
  assign XPIPE_PIPE_CH13_TXCOMPLIANCE_M = XPIPE_PIPE_CH13_TXCOMPLIANCE_M_out;
  assign XPIPE_PIPE_CH13_TXDATAVALID_M = XPIPE_PIPE_CH13_TXDATAVALID_M_out;
  assign XPIPE_PIPE_CH13_TXDATA_M = XPIPE_PIPE_CH13_TXDATA_M_out;
  assign XPIPE_PIPE_CH13_TXDEEMPH_M = XPIPE_PIPE_CH13_TXDEEMPH_M_out;
  assign XPIPE_PIPE_CH13_TXDETECTRXLOOPBACK_M = XPIPE_PIPE_CH13_TXDETECTRXLOOPBACK_M_out;
  assign XPIPE_PIPE_CH13_TXELECIDLE_M = XPIPE_PIPE_CH13_TXELECIDLE_M_out;
  assign XPIPE_PIPE_CH13_TXMAINCURSOR_M = XPIPE_PIPE_CH13_TXMAINCURSOR_M_out;
  assign XPIPE_PIPE_CH13_TXMARGIN_M = XPIPE_PIPE_CH13_TXMARGIN_M_out;
  assign XPIPE_PIPE_CH13_TXPOSTCURSOR_M = XPIPE_PIPE_CH13_TXPOSTCURSOR_M_out;
  assign XPIPE_PIPE_CH13_TXPRECURSOR_M = XPIPE_PIPE_CH13_TXPRECURSOR_M_out;
  assign XPIPE_PIPE_CH13_TXSTARTBLOCK_M = XPIPE_PIPE_CH13_TXSTARTBLOCK_M_out;
  assign XPIPE_PIPE_CH13_TXSWING_M = XPIPE_PIPE_CH13_TXSWING_M_out;
  assign XPIPE_PIPE_CH13_TXSYNCHEADER_M = XPIPE_PIPE_CH13_TXSYNCHEADER_M_out;
  assign XPIPE_PIPE_CH14_PHYSTATUS = XPIPE_PIPE_CH14_PHYSTATUS_out;
  assign XPIPE_PIPE_CH14_POWERDOWN_M = XPIPE_PIPE_CH14_POWERDOWN_M_out;
  assign XPIPE_PIPE_CH14_RXCHARISK = XPIPE_PIPE_CH14_RXCHARISK_out;
  assign XPIPE_PIPE_CH14_RXDATA = XPIPE_PIPE_CH14_RXDATA_out;
  assign XPIPE_PIPE_CH14_RXDATAVALID = XPIPE_PIPE_CH14_RXDATAVALID_out;
  assign XPIPE_PIPE_CH14_RXELECIDLE = XPIPE_PIPE_CH14_RXELECIDLE_out;
  assign XPIPE_PIPE_CH14_RXPOLARITY_M = XPIPE_PIPE_CH14_RXPOLARITY_M_out;
  assign XPIPE_PIPE_CH14_RXSTARTBLOCK = XPIPE_PIPE_CH14_RXSTARTBLOCK_out;
  assign XPIPE_PIPE_CH14_RXSTATUS = XPIPE_PIPE_CH14_RXSTATUS_out;
  assign XPIPE_PIPE_CH14_RXSYNCHEADER = XPIPE_PIPE_CH14_RXSYNCHEADER_out;
  assign XPIPE_PIPE_CH14_RXTERMINATION_M = XPIPE_PIPE_CH14_RXTERMINATION_M_out;
  assign XPIPE_PIPE_CH14_RXVALID = XPIPE_PIPE_CH14_RXVALID_out;
  assign XPIPE_PIPE_CH14_TXCHARISK_M = XPIPE_PIPE_CH14_TXCHARISK_M_out;
  assign XPIPE_PIPE_CH14_TXCOMPLIANCE_M = XPIPE_PIPE_CH14_TXCOMPLIANCE_M_out;
  assign XPIPE_PIPE_CH14_TXDATAVALID_M = XPIPE_PIPE_CH14_TXDATAVALID_M_out;
  assign XPIPE_PIPE_CH14_TXDATA_M = XPIPE_PIPE_CH14_TXDATA_M_out;
  assign XPIPE_PIPE_CH14_TXDEEMPH_M = XPIPE_PIPE_CH14_TXDEEMPH_M_out;
  assign XPIPE_PIPE_CH14_TXDETECTRXLOOPBACK_M = XPIPE_PIPE_CH14_TXDETECTRXLOOPBACK_M_out;
  assign XPIPE_PIPE_CH14_TXELECIDLE_M = XPIPE_PIPE_CH14_TXELECIDLE_M_out;
  assign XPIPE_PIPE_CH14_TXMAINCURSOR_M = XPIPE_PIPE_CH14_TXMAINCURSOR_M_out;
  assign XPIPE_PIPE_CH14_TXMARGIN_M = XPIPE_PIPE_CH14_TXMARGIN_M_out;
  assign XPIPE_PIPE_CH14_TXPOSTCURSOR_M = XPIPE_PIPE_CH14_TXPOSTCURSOR_M_out;
  assign XPIPE_PIPE_CH14_TXPRECURSOR_M = XPIPE_PIPE_CH14_TXPRECURSOR_M_out;
  assign XPIPE_PIPE_CH14_TXSTARTBLOCK_M = XPIPE_PIPE_CH14_TXSTARTBLOCK_M_out;
  assign XPIPE_PIPE_CH14_TXSWING_M = XPIPE_PIPE_CH14_TXSWING_M_out;
  assign XPIPE_PIPE_CH14_TXSYNCHEADER_M = XPIPE_PIPE_CH14_TXSYNCHEADER_M_out;
  assign XPIPE_PIPE_CH15_PHYSTATUS = XPIPE_PIPE_CH15_PHYSTATUS_out;
  assign XPIPE_PIPE_CH15_POWERDOWN_M = XPIPE_PIPE_CH15_POWERDOWN_M_out;
  assign XPIPE_PIPE_CH15_RXCHARISK = XPIPE_PIPE_CH15_RXCHARISK_out;
  assign XPIPE_PIPE_CH15_RXDATA = XPIPE_PIPE_CH15_RXDATA_out;
  assign XPIPE_PIPE_CH15_RXDATAVALID = XPIPE_PIPE_CH15_RXDATAVALID_out;
  assign XPIPE_PIPE_CH15_RXELECIDLE = XPIPE_PIPE_CH15_RXELECIDLE_out;
  assign XPIPE_PIPE_CH15_RXPOLARITY_M = XPIPE_PIPE_CH15_RXPOLARITY_M_out;
  assign XPIPE_PIPE_CH15_RXSTARTBLOCK = XPIPE_PIPE_CH15_RXSTARTBLOCK_out;
  assign XPIPE_PIPE_CH15_RXSTATUS = XPIPE_PIPE_CH15_RXSTATUS_out;
  assign XPIPE_PIPE_CH15_RXSYNCHEADER = XPIPE_PIPE_CH15_RXSYNCHEADER_out;
  assign XPIPE_PIPE_CH15_RXTERMINATION_M = XPIPE_PIPE_CH15_RXTERMINATION_M_out;
  assign XPIPE_PIPE_CH15_RXVALID = XPIPE_PIPE_CH15_RXVALID_out;
  assign XPIPE_PIPE_CH15_TXCHARISK_M = XPIPE_PIPE_CH15_TXCHARISK_M_out;
  assign XPIPE_PIPE_CH15_TXCOMPLIANCE_M = XPIPE_PIPE_CH15_TXCOMPLIANCE_M_out;
  assign XPIPE_PIPE_CH15_TXDATAVALID_M = XPIPE_PIPE_CH15_TXDATAVALID_M_out;
  assign XPIPE_PIPE_CH15_TXDATA_M = XPIPE_PIPE_CH15_TXDATA_M_out;
  assign XPIPE_PIPE_CH15_TXDEEMPH_M = XPIPE_PIPE_CH15_TXDEEMPH_M_out;
  assign XPIPE_PIPE_CH15_TXDETECTRXLOOPBACK_M = XPIPE_PIPE_CH15_TXDETECTRXLOOPBACK_M_out;
  assign XPIPE_PIPE_CH15_TXELECIDLE_M = XPIPE_PIPE_CH15_TXELECIDLE_M_out;
  assign XPIPE_PIPE_CH15_TXMAINCURSOR_M = XPIPE_PIPE_CH15_TXMAINCURSOR_M_out;
  assign XPIPE_PIPE_CH15_TXMARGIN_M = XPIPE_PIPE_CH15_TXMARGIN_M_out;
  assign XPIPE_PIPE_CH15_TXPOSTCURSOR_M = XPIPE_PIPE_CH15_TXPOSTCURSOR_M_out;
  assign XPIPE_PIPE_CH15_TXPRECURSOR_M = XPIPE_PIPE_CH15_TXPRECURSOR_M_out;
  assign XPIPE_PIPE_CH15_TXSTARTBLOCK_M = XPIPE_PIPE_CH15_TXSTARTBLOCK_M_out;
  assign XPIPE_PIPE_CH15_TXSWING_M = XPIPE_PIPE_CH15_TXSWING_M_out;
  assign XPIPE_PIPE_CH15_TXSYNCHEADER_M = XPIPE_PIPE_CH15_TXSYNCHEADER_M_out;
  assign XPIPE_PIPE_CH1_PHYSTATUS = XPIPE_PIPE_CH1_PHYSTATUS_out;
  assign XPIPE_PIPE_CH1_POWERDOWN_M = XPIPE_PIPE_CH1_POWERDOWN_M_out;
  assign XPIPE_PIPE_CH1_RXCHARISK = XPIPE_PIPE_CH1_RXCHARISK_out;
  assign XPIPE_PIPE_CH1_RXDATA = XPIPE_PIPE_CH1_RXDATA_out;
  assign XPIPE_PIPE_CH1_RXDATAVALID = XPIPE_PIPE_CH1_RXDATAVALID_out;
  assign XPIPE_PIPE_CH1_RXELECIDLE = XPIPE_PIPE_CH1_RXELECIDLE_out;
  assign XPIPE_PIPE_CH1_RXPOLARITY_M = XPIPE_PIPE_CH1_RXPOLARITY_M_out;
  assign XPIPE_PIPE_CH1_RXSTARTBLOCK = XPIPE_PIPE_CH1_RXSTARTBLOCK_out;
  assign XPIPE_PIPE_CH1_RXSTATUS = XPIPE_PIPE_CH1_RXSTATUS_out;
  assign XPIPE_PIPE_CH1_RXSYNCHEADER = XPIPE_PIPE_CH1_RXSYNCHEADER_out;
  assign XPIPE_PIPE_CH1_RXTERMINATION_M = XPIPE_PIPE_CH1_RXTERMINATION_M_out;
  assign XPIPE_PIPE_CH1_RXVALID = XPIPE_PIPE_CH1_RXVALID_out;
  assign XPIPE_PIPE_CH1_TXCHARISK_M = XPIPE_PIPE_CH1_TXCHARISK_M_out;
  assign XPIPE_PIPE_CH1_TXCOMPLIANCE_M = XPIPE_PIPE_CH1_TXCOMPLIANCE_M_out;
  assign XPIPE_PIPE_CH1_TXDATAVALID_M = XPIPE_PIPE_CH1_TXDATAVALID_M_out;
  assign XPIPE_PIPE_CH1_TXDATA_M = XPIPE_PIPE_CH1_TXDATA_M_out;
  assign XPIPE_PIPE_CH1_TXDEEMPH_M = XPIPE_PIPE_CH1_TXDEEMPH_M_out;
  assign XPIPE_PIPE_CH1_TXDETECTRXLOOPBACK_M = XPIPE_PIPE_CH1_TXDETECTRXLOOPBACK_M_out;
  assign XPIPE_PIPE_CH1_TXELECIDLE_M = XPIPE_PIPE_CH1_TXELECIDLE_M_out;
  assign XPIPE_PIPE_CH1_TXMAINCURSOR_M = XPIPE_PIPE_CH1_TXMAINCURSOR_M_out;
  assign XPIPE_PIPE_CH1_TXMARGIN_M = XPIPE_PIPE_CH1_TXMARGIN_M_out;
  assign XPIPE_PIPE_CH1_TXPOSTCURSOR_M = XPIPE_PIPE_CH1_TXPOSTCURSOR_M_out;
  assign XPIPE_PIPE_CH1_TXPRECURSOR_M = XPIPE_PIPE_CH1_TXPRECURSOR_M_out;
  assign XPIPE_PIPE_CH1_TXSTARTBLOCK_M = XPIPE_PIPE_CH1_TXSTARTBLOCK_M_out;
  assign XPIPE_PIPE_CH1_TXSWING_M = XPIPE_PIPE_CH1_TXSWING_M_out;
  assign XPIPE_PIPE_CH1_TXSYNCHEADER_M = XPIPE_PIPE_CH1_TXSYNCHEADER_M_out;
  assign XPIPE_PIPE_CH2_PHYSTATUS = XPIPE_PIPE_CH2_PHYSTATUS_out;
  assign XPIPE_PIPE_CH2_POWERDOWN_M = XPIPE_PIPE_CH2_POWERDOWN_M_out;
  assign XPIPE_PIPE_CH2_RXCHARISK = XPIPE_PIPE_CH2_RXCHARISK_out;
  assign XPIPE_PIPE_CH2_RXDATA = XPIPE_PIPE_CH2_RXDATA_out;
  assign XPIPE_PIPE_CH2_RXDATAVALID = XPIPE_PIPE_CH2_RXDATAVALID_out;
  assign XPIPE_PIPE_CH2_RXELECIDLE = XPIPE_PIPE_CH2_RXELECIDLE_out;
  assign XPIPE_PIPE_CH2_RXPOLARITY_M = XPIPE_PIPE_CH2_RXPOLARITY_M_out;
  assign XPIPE_PIPE_CH2_RXSTARTBLOCK = XPIPE_PIPE_CH2_RXSTARTBLOCK_out;
  assign XPIPE_PIPE_CH2_RXSTATUS = XPIPE_PIPE_CH2_RXSTATUS_out;
  assign XPIPE_PIPE_CH2_RXSYNCHEADER = XPIPE_PIPE_CH2_RXSYNCHEADER_out;
  assign XPIPE_PIPE_CH2_RXTERMINATION_M = XPIPE_PIPE_CH2_RXTERMINATION_M_out;
  assign XPIPE_PIPE_CH2_RXVALID = XPIPE_PIPE_CH2_RXVALID_out;
  assign XPIPE_PIPE_CH2_TXCHARISK_M = XPIPE_PIPE_CH2_TXCHARISK_M_out;
  assign XPIPE_PIPE_CH2_TXCOMPLIANCE_M = XPIPE_PIPE_CH2_TXCOMPLIANCE_M_out;
  assign XPIPE_PIPE_CH2_TXDATAVALID_M = XPIPE_PIPE_CH2_TXDATAVALID_M_out;
  assign XPIPE_PIPE_CH2_TXDATA_M = XPIPE_PIPE_CH2_TXDATA_M_out;
  assign XPIPE_PIPE_CH2_TXDEEMPH_M = XPIPE_PIPE_CH2_TXDEEMPH_M_out;
  assign XPIPE_PIPE_CH2_TXDETECTRXLOOPBACK_M = XPIPE_PIPE_CH2_TXDETECTRXLOOPBACK_M_out;
  assign XPIPE_PIPE_CH2_TXELECIDLE_M = XPIPE_PIPE_CH2_TXELECIDLE_M_out;
  assign XPIPE_PIPE_CH2_TXMAINCURSOR_M = XPIPE_PIPE_CH2_TXMAINCURSOR_M_out;
  assign XPIPE_PIPE_CH2_TXMARGIN_M = XPIPE_PIPE_CH2_TXMARGIN_M_out;
  assign XPIPE_PIPE_CH2_TXPOSTCURSOR_M = XPIPE_PIPE_CH2_TXPOSTCURSOR_M_out;
  assign XPIPE_PIPE_CH2_TXPRECURSOR_M = XPIPE_PIPE_CH2_TXPRECURSOR_M_out;
  assign XPIPE_PIPE_CH2_TXSTARTBLOCK_M = XPIPE_PIPE_CH2_TXSTARTBLOCK_M_out;
  assign XPIPE_PIPE_CH2_TXSWING_M = XPIPE_PIPE_CH2_TXSWING_M_out;
  assign XPIPE_PIPE_CH2_TXSYNCHEADER_M = XPIPE_PIPE_CH2_TXSYNCHEADER_M_out;
  assign XPIPE_PIPE_CH3_PHYSTATUS = XPIPE_PIPE_CH3_PHYSTATUS_out;
  assign XPIPE_PIPE_CH3_POWERDOWN_M = XPIPE_PIPE_CH3_POWERDOWN_M_out;
  assign XPIPE_PIPE_CH3_RXCHARISK = XPIPE_PIPE_CH3_RXCHARISK_out;
  assign XPIPE_PIPE_CH3_RXDATA = XPIPE_PIPE_CH3_RXDATA_out;
  assign XPIPE_PIPE_CH3_RXDATAVALID = XPIPE_PIPE_CH3_RXDATAVALID_out;
  assign XPIPE_PIPE_CH3_RXELECIDLE = XPIPE_PIPE_CH3_RXELECIDLE_out;
  assign XPIPE_PIPE_CH3_RXPOLARITY_M = XPIPE_PIPE_CH3_RXPOLARITY_M_out;
  assign XPIPE_PIPE_CH3_RXSTARTBLOCK = XPIPE_PIPE_CH3_RXSTARTBLOCK_out;
  assign XPIPE_PIPE_CH3_RXSTATUS = XPIPE_PIPE_CH3_RXSTATUS_out;
  assign XPIPE_PIPE_CH3_RXSYNCHEADER = XPIPE_PIPE_CH3_RXSYNCHEADER_out;
  assign XPIPE_PIPE_CH3_RXTERMINATION_M = XPIPE_PIPE_CH3_RXTERMINATION_M_out;
  assign XPIPE_PIPE_CH3_RXVALID = XPIPE_PIPE_CH3_RXVALID_out;
  assign XPIPE_PIPE_CH3_TXCHARISK_M = XPIPE_PIPE_CH3_TXCHARISK_M_out;
  assign XPIPE_PIPE_CH3_TXCOMPLIANCE_M = XPIPE_PIPE_CH3_TXCOMPLIANCE_M_out;
  assign XPIPE_PIPE_CH3_TXDATAVALID_M = XPIPE_PIPE_CH3_TXDATAVALID_M_out;
  assign XPIPE_PIPE_CH3_TXDATA_M = XPIPE_PIPE_CH3_TXDATA_M_out;
  assign XPIPE_PIPE_CH3_TXDEEMPH_M = XPIPE_PIPE_CH3_TXDEEMPH_M_out;
  assign XPIPE_PIPE_CH3_TXDETECTRXLOOPBACK_M = XPIPE_PIPE_CH3_TXDETECTRXLOOPBACK_M_out;
  assign XPIPE_PIPE_CH3_TXELECIDLE_M = XPIPE_PIPE_CH3_TXELECIDLE_M_out;
  assign XPIPE_PIPE_CH3_TXMAINCURSOR_M = XPIPE_PIPE_CH3_TXMAINCURSOR_M_out;
  assign XPIPE_PIPE_CH3_TXMARGIN_M = XPIPE_PIPE_CH3_TXMARGIN_M_out;
  assign XPIPE_PIPE_CH3_TXPOSTCURSOR_M = XPIPE_PIPE_CH3_TXPOSTCURSOR_M_out;
  assign XPIPE_PIPE_CH3_TXPRECURSOR_M = XPIPE_PIPE_CH3_TXPRECURSOR_M_out;
  assign XPIPE_PIPE_CH3_TXSTARTBLOCK_M = XPIPE_PIPE_CH3_TXSTARTBLOCK_M_out;
  assign XPIPE_PIPE_CH3_TXSWING_M = XPIPE_PIPE_CH3_TXSWING_M_out;
  assign XPIPE_PIPE_CH3_TXSYNCHEADER_M = XPIPE_PIPE_CH3_TXSYNCHEADER_M_out;
  assign XPIPE_PIPE_CH4_PHYSTATUS = XPIPE_PIPE_CH4_PHYSTATUS_out;
  assign XPIPE_PIPE_CH4_POWERDOWN_M = XPIPE_PIPE_CH4_POWERDOWN_M_out;
  assign XPIPE_PIPE_CH4_RXCHARISK = XPIPE_PIPE_CH4_RXCHARISK_out;
  assign XPIPE_PIPE_CH4_RXDATA = XPIPE_PIPE_CH4_RXDATA_out;
  assign XPIPE_PIPE_CH4_RXDATAVALID = XPIPE_PIPE_CH4_RXDATAVALID_out;
  assign XPIPE_PIPE_CH4_RXELECIDLE = XPIPE_PIPE_CH4_RXELECIDLE_out;
  assign XPIPE_PIPE_CH4_RXPOLARITY_M = XPIPE_PIPE_CH4_RXPOLARITY_M_out;
  assign XPIPE_PIPE_CH4_RXSTARTBLOCK = XPIPE_PIPE_CH4_RXSTARTBLOCK_out;
  assign XPIPE_PIPE_CH4_RXSTATUS = XPIPE_PIPE_CH4_RXSTATUS_out;
  assign XPIPE_PIPE_CH4_RXSYNCHEADER = XPIPE_PIPE_CH4_RXSYNCHEADER_out;
  assign XPIPE_PIPE_CH4_RXTERMINATION_M = XPIPE_PIPE_CH4_RXTERMINATION_M_out;
  assign XPIPE_PIPE_CH4_RXVALID = XPIPE_PIPE_CH4_RXVALID_out;
  assign XPIPE_PIPE_CH4_TXCHARISK_M = XPIPE_PIPE_CH4_TXCHARISK_M_out;
  assign XPIPE_PIPE_CH4_TXCOMPLIANCE_M = XPIPE_PIPE_CH4_TXCOMPLIANCE_M_out;
  assign XPIPE_PIPE_CH4_TXDATAVALID_M = XPIPE_PIPE_CH4_TXDATAVALID_M_out;
  assign XPIPE_PIPE_CH4_TXDATA_M = XPIPE_PIPE_CH4_TXDATA_M_out;
  assign XPIPE_PIPE_CH4_TXDEEMPH_M = XPIPE_PIPE_CH4_TXDEEMPH_M_out;
  assign XPIPE_PIPE_CH4_TXDETECTRXLOOPBACK_M = XPIPE_PIPE_CH4_TXDETECTRXLOOPBACK_M_out;
  assign XPIPE_PIPE_CH4_TXELECIDLE_M = XPIPE_PIPE_CH4_TXELECIDLE_M_out;
  assign XPIPE_PIPE_CH4_TXMAINCURSOR_M = XPIPE_PIPE_CH4_TXMAINCURSOR_M_out;
  assign XPIPE_PIPE_CH4_TXMARGIN_M = XPIPE_PIPE_CH4_TXMARGIN_M_out;
  assign XPIPE_PIPE_CH4_TXPOSTCURSOR_M = XPIPE_PIPE_CH4_TXPOSTCURSOR_M_out;
  assign XPIPE_PIPE_CH4_TXPRECURSOR_M = XPIPE_PIPE_CH4_TXPRECURSOR_M_out;
  assign XPIPE_PIPE_CH4_TXSTARTBLOCK_M = XPIPE_PIPE_CH4_TXSTARTBLOCK_M_out;
  assign XPIPE_PIPE_CH4_TXSWING_M = XPIPE_PIPE_CH4_TXSWING_M_out;
  assign XPIPE_PIPE_CH4_TXSYNCHEADER_M = XPIPE_PIPE_CH4_TXSYNCHEADER_M_out;
  assign XPIPE_PIPE_CH5_PHYSTATUS = XPIPE_PIPE_CH5_PHYSTATUS_out;
  assign XPIPE_PIPE_CH5_POWERDOWN_M = XPIPE_PIPE_CH5_POWERDOWN_M_out;
  assign XPIPE_PIPE_CH5_RXCHARISK = XPIPE_PIPE_CH5_RXCHARISK_out;
  assign XPIPE_PIPE_CH5_RXDATA = XPIPE_PIPE_CH5_RXDATA_out;
  assign XPIPE_PIPE_CH5_RXDATAVALID = XPIPE_PIPE_CH5_RXDATAVALID_out;
  assign XPIPE_PIPE_CH5_RXELECIDLE = XPIPE_PIPE_CH5_RXELECIDLE_out;
  assign XPIPE_PIPE_CH5_RXPOLARITY_M = XPIPE_PIPE_CH5_RXPOLARITY_M_out;
  assign XPIPE_PIPE_CH5_RXSTARTBLOCK = XPIPE_PIPE_CH5_RXSTARTBLOCK_out;
  assign XPIPE_PIPE_CH5_RXSTATUS = XPIPE_PIPE_CH5_RXSTATUS_out;
  assign XPIPE_PIPE_CH5_RXSYNCHEADER = XPIPE_PIPE_CH5_RXSYNCHEADER_out;
  assign XPIPE_PIPE_CH5_RXTERMINATION_M = XPIPE_PIPE_CH5_RXTERMINATION_M_out;
  assign XPIPE_PIPE_CH5_RXVALID = XPIPE_PIPE_CH5_RXVALID_out;
  assign XPIPE_PIPE_CH5_TXCHARISK_M = XPIPE_PIPE_CH5_TXCHARISK_M_out;
  assign XPIPE_PIPE_CH5_TXCOMPLIANCE_M = XPIPE_PIPE_CH5_TXCOMPLIANCE_M_out;
  assign XPIPE_PIPE_CH5_TXDATAVALID_M = XPIPE_PIPE_CH5_TXDATAVALID_M_out;
  assign XPIPE_PIPE_CH5_TXDATA_M = XPIPE_PIPE_CH5_TXDATA_M_out;
  assign XPIPE_PIPE_CH5_TXDEEMPH_M = XPIPE_PIPE_CH5_TXDEEMPH_M_out;
  assign XPIPE_PIPE_CH5_TXDETECTRXLOOPBACK_M = XPIPE_PIPE_CH5_TXDETECTRXLOOPBACK_M_out;
  assign XPIPE_PIPE_CH5_TXELECIDLE_M = XPIPE_PIPE_CH5_TXELECIDLE_M_out;
  assign XPIPE_PIPE_CH5_TXMAINCURSOR_M = XPIPE_PIPE_CH5_TXMAINCURSOR_M_out;
  assign XPIPE_PIPE_CH5_TXMARGIN_M = XPIPE_PIPE_CH5_TXMARGIN_M_out;
  assign XPIPE_PIPE_CH5_TXPOSTCURSOR_M = XPIPE_PIPE_CH5_TXPOSTCURSOR_M_out;
  assign XPIPE_PIPE_CH5_TXPRECURSOR_M = XPIPE_PIPE_CH5_TXPRECURSOR_M_out;
  assign XPIPE_PIPE_CH5_TXSTARTBLOCK_M = XPIPE_PIPE_CH5_TXSTARTBLOCK_M_out;
  assign XPIPE_PIPE_CH5_TXSWING_M = XPIPE_PIPE_CH5_TXSWING_M_out;
  assign XPIPE_PIPE_CH5_TXSYNCHEADER_M = XPIPE_PIPE_CH5_TXSYNCHEADER_M_out;
  assign XPIPE_PIPE_CH6_PHYSTATUS = XPIPE_PIPE_CH6_PHYSTATUS_out;
  assign XPIPE_PIPE_CH6_POWERDOWN_M = XPIPE_PIPE_CH6_POWERDOWN_M_out;
  assign XPIPE_PIPE_CH6_RXCHARISK = XPIPE_PIPE_CH6_RXCHARISK_out;
  assign XPIPE_PIPE_CH6_RXDATA = XPIPE_PIPE_CH6_RXDATA_out;
  assign XPIPE_PIPE_CH6_RXDATAVALID = XPIPE_PIPE_CH6_RXDATAVALID_out;
  assign XPIPE_PIPE_CH6_RXELECIDLE = XPIPE_PIPE_CH6_RXELECIDLE_out;
  assign XPIPE_PIPE_CH6_RXPOLARITY_M = XPIPE_PIPE_CH6_RXPOLARITY_M_out;
  assign XPIPE_PIPE_CH6_RXSTARTBLOCK = XPIPE_PIPE_CH6_RXSTARTBLOCK_out;
  assign XPIPE_PIPE_CH6_RXSTATUS = XPIPE_PIPE_CH6_RXSTATUS_out;
  assign XPIPE_PIPE_CH6_RXSYNCHEADER = XPIPE_PIPE_CH6_RXSYNCHEADER_out;
  assign XPIPE_PIPE_CH6_RXTERMINATION_M = XPIPE_PIPE_CH6_RXTERMINATION_M_out;
  assign XPIPE_PIPE_CH6_RXVALID = XPIPE_PIPE_CH6_RXVALID_out;
  assign XPIPE_PIPE_CH6_TXCHARISK_M = XPIPE_PIPE_CH6_TXCHARISK_M_out;
  assign XPIPE_PIPE_CH6_TXCOMPLIANCE_M = XPIPE_PIPE_CH6_TXCOMPLIANCE_M_out;
  assign XPIPE_PIPE_CH6_TXDATAVALID_M = XPIPE_PIPE_CH6_TXDATAVALID_M_out;
  assign XPIPE_PIPE_CH6_TXDATA_M = XPIPE_PIPE_CH6_TXDATA_M_out;
  assign XPIPE_PIPE_CH6_TXDEEMPH_M = XPIPE_PIPE_CH6_TXDEEMPH_M_out;
  assign XPIPE_PIPE_CH6_TXDETECTRXLOOPBACK_M = XPIPE_PIPE_CH6_TXDETECTRXLOOPBACK_M_out;
  assign XPIPE_PIPE_CH6_TXELECIDLE_M = XPIPE_PIPE_CH6_TXELECIDLE_M_out;
  assign XPIPE_PIPE_CH6_TXMAINCURSOR_M = XPIPE_PIPE_CH6_TXMAINCURSOR_M_out;
  assign XPIPE_PIPE_CH6_TXMARGIN_M = XPIPE_PIPE_CH6_TXMARGIN_M_out;
  assign XPIPE_PIPE_CH6_TXPOSTCURSOR_M = XPIPE_PIPE_CH6_TXPOSTCURSOR_M_out;
  assign XPIPE_PIPE_CH6_TXPRECURSOR_M = XPIPE_PIPE_CH6_TXPRECURSOR_M_out;
  assign XPIPE_PIPE_CH6_TXSTARTBLOCK_M = XPIPE_PIPE_CH6_TXSTARTBLOCK_M_out;
  assign XPIPE_PIPE_CH6_TXSWING_M = XPIPE_PIPE_CH6_TXSWING_M_out;
  assign XPIPE_PIPE_CH6_TXSYNCHEADER_M = XPIPE_PIPE_CH6_TXSYNCHEADER_M_out;
  assign XPIPE_PIPE_CH7_PHYSTATUS = XPIPE_PIPE_CH7_PHYSTATUS_out;
  assign XPIPE_PIPE_CH7_POWERDOWN_M = XPIPE_PIPE_CH7_POWERDOWN_M_out;
  assign XPIPE_PIPE_CH7_RXCHARISK = XPIPE_PIPE_CH7_RXCHARISK_out;
  assign XPIPE_PIPE_CH7_RXDATA = XPIPE_PIPE_CH7_RXDATA_out;
  assign XPIPE_PIPE_CH7_RXDATAVALID = XPIPE_PIPE_CH7_RXDATAVALID_out;
  assign XPIPE_PIPE_CH7_RXELECIDLE = XPIPE_PIPE_CH7_RXELECIDLE_out;
  assign XPIPE_PIPE_CH7_RXPOLARITY_M = XPIPE_PIPE_CH7_RXPOLARITY_M_out;
  assign XPIPE_PIPE_CH7_RXSTARTBLOCK = XPIPE_PIPE_CH7_RXSTARTBLOCK_out;
  assign XPIPE_PIPE_CH7_RXSTATUS = XPIPE_PIPE_CH7_RXSTATUS_out;
  assign XPIPE_PIPE_CH7_RXSYNCHEADER = XPIPE_PIPE_CH7_RXSYNCHEADER_out;
  assign XPIPE_PIPE_CH7_RXTERMINATION_M = XPIPE_PIPE_CH7_RXTERMINATION_M_out;
  assign XPIPE_PIPE_CH7_RXVALID = XPIPE_PIPE_CH7_RXVALID_out;
  assign XPIPE_PIPE_CH7_TXCHARISK_M = XPIPE_PIPE_CH7_TXCHARISK_M_out;
  assign XPIPE_PIPE_CH7_TXCOMPLIANCE_M = XPIPE_PIPE_CH7_TXCOMPLIANCE_M_out;
  assign XPIPE_PIPE_CH7_TXDATAVALID_M = XPIPE_PIPE_CH7_TXDATAVALID_M_out;
  assign XPIPE_PIPE_CH7_TXDATA_M = XPIPE_PIPE_CH7_TXDATA_M_out;
  assign XPIPE_PIPE_CH7_TXDEEMPH_M = XPIPE_PIPE_CH7_TXDEEMPH_M_out;
  assign XPIPE_PIPE_CH7_TXDETECTRXLOOPBACK_M = XPIPE_PIPE_CH7_TXDETECTRXLOOPBACK_M_out;
  assign XPIPE_PIPE_CH7_TXELECIDLE_M = XPIPE_PIPE_CH7_TXELECIDLE_M_out;
  assign XPIPE_PIPE_CH7_TXMAINCURSOR_M = XPIPE_PIPE_CH7_TXMAINCURSOR_M_out;
  assign XPIPE_PIPE_CH7_TXMARGIN_M = XPIPE_PIPE_CH7_TXMARGIN_M_out;
  assign XPIPE_PIPE_CH7_TXPOSTCURSOR_M = XPIPE_PIPE_CH7_TXPOSTCURSOR_M_out;
  assign XPIPE_PIPE_CH7_TXPRECURSOR_M = XPIPE_PIPE_CH7_TXPRECURSOR_M_out;
  assign XPIPE_PIPE_CH7_TXSTARTBLOCK_M = XPIPE_PIPE_CH7_TXSTARTBLOCK_M_out;
  assign XPIPE_PIPE_CH7_TXSWING_M = XPIPE_PIPE_CH7_TXSWING_M_out;
  assign XPIPE_PIPE_CH7_TXSYNCHEADER_M = XPIPE_PIPE_CH7_TXSYNCHEADER_M_out;
  assign XPIPE_PIPE_CH8_PHYSTATUS = XPIPE_PIPE_CH8_PHYSTATUS_out;
  assign XPIPE_PIPE_CH8_POWERDOWN_M = XPIPE_PIPE_CH8_POWERDOWN_M_out;
  assign XPIPE_PIPE_CH8_RXCHARISK = XPIPE_PIPE_CH8_RXCHARISK_out;
  assign XPIPE_PIPE_CH8_RXDATA = XPIPE_PIPE_CH8_RXDATA_out;
  assign XPIPE_PIPE_CH8_RXDATAVALID = XPIPE_PIPE_CH8_RXDATAVALID_out;
  assign XPIPE_PIPE_CH8_RXELECIDLE = XPIPE_PIPE_CH8_RXELECIDLE_out;
  assign XPIPE_PIPE_CH8_RXPOLARITY_M = XPIPE_PIPE_CH8_RXPOLARITY_M_out;
  assign XPIPE_PIPE_CH8_RXSTARTBLOCK = XPIPE_PIPE_CH8_RXSTARTBLOCK_out;
  assign XPIPE_PIPE_CH8_RXSTATUS = XPIPE_PIPE_CH8_RXSTATUS_out;
  assign XPIPE_PIPE_CH8_RXSYNCHEADER = XPIPE_PIPE_CH8_RXSYNCHEADER_out;
  assign XPIPE_PIPE_CH8_RXTERMINATION_M = XPIPE_PIPE_CH8_RXTERMINATION_M_out;
  assign XPIPE_PIPE_CH8_RXVALID = XPIPE_PIPE_CH8_RXVALID_out;
  assign XPIPE_PIPE_CH8_TXCHARISK_M = XPIPE_PIPE_CH8_TXCHARISK_M_out;
  assign XPIPE_PIPE_CH8_TXCOMPLIANCE_M = XPIPE_PIPE_CH8_TXCOMPLIANCE_M_out;
  assign XPIPE_PIPE_CH8_TXDATAVALID_M = XPIPE_PIPE_CH8_TXDATAVALID_M_out;
  assign XPIPE_PIPE_CH8_TXDATA_M = XPIPE_PIPE_CH8_TXDATA_M_out;
  assign XPIPE_PIPE_CH8_TXDEEMPH_M = XPIPE_PIPE_CH8_TXDEEMPH_M_out;
  assign XPIPE_PIPE_CH8_TXDETECTRXLOOPBACK_M = XPIPE_PIPE_CH8_TXDETECTRXLOOPBACK_M_out;
  assign XPIPE_PIPE_CH8_TXELECIDLE_M = XPIPE_PIPE_CH8_TXELECIDLE_M_out;
  assign XPIPE_PIPE_CH8_TXMAINCURSOR_M = XPIPE_PIPE_CH8_TXMAINCURSOR_M_out;
  assign XPIPE_PIPE_CH8_TXMARGIN_M = XPIPE_PIPE_CH8_TXMARGIN_M_out;
  assign XPIPE_PIPE_CH8_TXPOSTCURSOR_M = XPIPE_PIPE_CH8_TXPOSTCURSOR_M_out;
  assign XPIPE_PIPE_CH8_TXPRECURSOR_M = XPIPE_PIPE_CH8_TXPRECURSOR_M_out;
  assign XPIPE_PIPE_CH8_TXSTARTBLOCK_M = XPIPE_PIPE_CH8_TXSTARTBLOCK_M_out;
  assign XPIPE_PIPE_CH8_TXSWING_M = XPIPE_PIPE_CH8_TXSWING_M_out;
  assign XPIPE_PIPE_CH8_TXSYNCHEADER_M = XPIPE_PIPE_CH8_TXSYNCHEADER_M_out;
  assign XPIPE_PIPE_CH9_PHYSTATUS = XPIPE_PIPE_CH9_PHYSTATUS_out;
  assign XPIPE_PIPE_CH9_POWERDOWN_M = XPIPE_PIPE_CH9_POWERDOWN_M_out;
  assign XPIPE_PIPE_CH9_RXCHARISK = XPIPE_PIPE_CH9_RXCHARISK_out;
  assign XPIPE_PIPE_CH9_RXDATA = XPIPE_PIPE_CH9_RXDATA_out;
  assign XPIPE_PIPE_CH9_RXDATAVALID = XPIPE_PIPE_CH9_RXDATAVALID_out;
  assign XPIPE_PIPE_CH9_RXELECIDLE = XPIPE_PIPE_CH9_RXELECIDLE_out;
  assign XPIPE_PIPE_CH9_RXPOLARITY_M = XPIPE_PIPE_CH9_RXPOLARITY_M_out;
  assign XPIPE_PIPE_CH9_RXSTARTBLOCK = XPIPE_PIPE_CH9_RXSTARTBLOCK_out;
  assign XPIPE_PIPE_CH9_RXSTATUS = XPIPE_PIPE_CH9_RXSTATUS_out;
  assign XPIPE_PIPE_CH9_RXSYNCHEADER = XPIPE_PIPE_CH9_RXSYNCHEADER_out;
  assign XPIPE_PIPE_CH9_RXTERMINATION_M = XPIPE_PIPE_CH9_RXTERMINATION_M_out;
  assign XPIPE_PIPE_CH9_RXVALID = XPIPE_PIPE_CH9_RXVALID_out;
  assign XPIPE_PIPE_CH9_TXCHARISK_M = XPIPE_PIPE_CH9_TXCHARISK_M_out;
  assign XPIPE_PIPE_CH9_TXCOMPLIANCE_M = XPIPE_PIPE_CH9_TXCOMPLIANCE_M_out;
  assign XPIPE_PIPE_CH9_TXDATAVALID_M = XPIPE_PIPE_CH9_TXDATAVALID_M_out;
  assign XPIPE_PIPE_CH9_TXDATA_M = XPIPE_PIPE_CH9_TXDATA_M_out;
  assign XPIPE_PIPE_CH9_TXDEEMPH_M = XPIPE_PIPE_CH9_TXDEEMPH_M_out;
  assign XPIPE_PIPE_CH9_TXDETECTRXLOOPBACK_M = XPIPE_PIPE_CH9_TXDETECTRXLOOPBACK_M_out;
  assign XPIPE_PIPE_CH9_TXELECIDLE_M = XPIPE_PIPE_CH9_TXELECIDLE_M_out;
  assign XPIPE_PIPE_CH9_TXMAINCURSOR_M = XPIPE_PIPE_CH9_TXMAINCURSOR_M_out;
  assign XPIPE_PIPE_CH9_TXMARGIN_M = XPIPE_PIPE_CH9_TXMARGIN_M_out;
  assign XPIPE_PIPE_CH9_TXPOSTCURSOR_M = XPIPE_PIPE_CH9_TXPOSTCURSOR_M_out;
  assign XPIPE_PIPE_CH9_TXPRECURSOR_M = XPIPE_PIPE_CH9_TXPRECURSOR_M_out;
  assign XPIPE_PIPE_CH9_TXSTARTBLOCK_M = XPIPE_PIPE_CH9_TXSTARTBLOCK_M_out;
  assign XPIPE_PIPE_CH9_TXSWING_M = XPIPE_PIPE_CH9_TXSWING_M_out;
  assign XPIPE_PIPE_CH9_TXSYNCHEADER_M = XPIPE_PIPE_CH9_TXSYNCHEADER_M_out;
  assign XPIPE_RXMARGINREQACK = XPIPE_RXMARGINREQACK_out;
  assign XPIPE_RXMARGINREQACK_1 = XPIPE_RXMARGINREQACK_1_out;
  assign XPIPE_RXMARGINREQACK_2 = XPIPE_RXMARGINREQACK_2_out;
  assign XPIPE_RXMARGINREQACK_3 = XPIPE_RXMARGINREQACK_3_out;
  assign XPIPE_RXMARGINREQCMD_M = XPIPE_RXMARGINREQCMD_M_out;
  assign XPIPE_RXMARGINREQCMD_M_1 = XPIPE_RXMARGINREQCMD_M_1_out;
  assign XPIPE_RXMARGINREQCMD_M_2 = XPIPE_RXMARGINREQCMD_M_2_out;
  assign XPIPE_RXMARGINREQCMD_M_3 = XPIPE_RXMARGINREQCMD_M_3_out;
  assign XPIPE_RXMARGINREQLANENUM_M = XPIPE_RXMARGINREQLANENUM_M_out;
  assign XPIPE_RXMARGINREQLANENUM_M_1 = XPIPE_RXMARGINREQLANENUM_M_1_out;
  assign XPIPE_RXMARGINREQLANENUM_M_2 = XPIPE_RXMARGINREQLANENUM_M_2_out;
  assign XPIPE_RXMARGINREQLANENUM_M_3 = XPIPE_RXMARGINREQLANENUM_M_3_out;
  assign XPIPE_RXMARGINREQPAYLOAD_M = XPIPE_RXMARGINREQPAYLOAD_M_out;
  assign XPIPE_RXMARGINREQPAYLOAD_M_1 = XPIPE_RXMARGINREQPAYLOAD_M_1_out;
  assign XPIPE_RXMARGINREQPAYLOAD_M_2 = XPIPE_RXMARGINREQPAYLOAD_M_2_out;
  assign XPIPE_RXMARGINREQPAYLOAD_M_3 = XPIPE_RXMARGINREQPAYLOAD_M_3_out;
  assign XPIPE_RXMARGINREQREQ_M = XPIPE_RXMARGINREQREQ_M_out;
  assign XPIPE_RXMARGINREQREQ_M_1 = XPIPE_RXMARGINREQREQ_M_1_out;
  assign XPIPE_RXMARGINREQREQ_M_2 = XPIPE_RXMARGINREQREQ_M_2_out;
  assign XPIPE_RXMARGINREQREQ_M_3 = XPIPE_RXMARGINREQREQ_M_3_out;
  assign XPIPE_RXMARGINRESACK_M = XPIPE_RXMARGINRESACK_M_out;
  assign XPIPE_RXMARGINRESACK_M_1 = XPIPE_RXMARGINRESACK_M_1_out;
  assign XPIPE_RXMARGINRESACK_M_2 = XPIPE_RXMARGINRESACK_M_2_out;
  assign XPIPE_RXMARGINRESACK_M_3 = XPIPE_RXMARGINRESACK_M_3_out;
  assign XPIPE_RXMARGINRESCMD = XPIPE_RXMARGINRESCMD_out;
  assign XPIPE_RXMARGINRESCMD_1 = XPIPE_RXMARGINRESCMD_1_out;
  assign XPIPE_RXMARGINRESCMD_2 = XPIPE_RXMARGINRESCMD_2_out;
  assign XPIPE_RXMARGINRESCMD_3 = XPIPE_RXMARGINRESCMD_3_out;
  assign XPIPE_RXMARGINRESLANENUM = XPIPE_RXMARGINRESLANENUM_out;
  assign XPIPE_RXMARGINRESLANENUM_1 = XPIPE_RXMARGINRESLANENUM_1_out;
  assign XPIPE_RXMARGINRESLANENUM_2 = XPIPE_RXMARGINRESLANENUM_2_out;
  assign XPIPE_RXMARGINRESLANENUM_3 = XPIPE_RXMARGINRESLANENUM_3_out;
  assign XPIPE_RXMARGINRESPAYLOAD = XPIPE_RXMARGINRESPAYLOAD_out;
  assign XPIPE_RXMARGINRESPAYLOAD_1 = XPIPE_RXMARGINRESPAYLOAD_1_out;
  assign XPIPE_RXMARGINRESPAYLOAD_2 = XPIPE_RXMARGINRESPAYLOAD_2_out;
  assign XPIPE_RXMARGINRESPAYLOAD_3 = XPIPE_RXMARGINRESPAYLOAD_3_out;
  assign XPIPE_RXMARGINRESREQ = XPIPE_RXMARGINRESREQ_out;
  assign XPIPE_RXMARGINRESREQ_1 = XPIPE_RXMARGINRESREQ_1_out;
  assign XPIPE_RXMARGINRESREQ_2 = XPIPE_RXMARGINRESREQ_2_out;
  assign XPIPE_RXMARGINRESREQ_3 = XPIPE_RXMARGINRESREQ_3_out;

`ifdef XIL_TIMING
  assign CH0_TXDATA_in[0] = (CH0_TXDATA[0] === 1'bz) || CH0_TXDATA_delay[0]; // rv 1
  assign CH0_TXDATA_in[100] = (CH0_TXDATA[100] === 1'bz) || CH0_TXDATA_delay[100]; // rv 1
  assign CH0_TXDATA_in[101] = (CH0_TXDATA[101] === 1'bz) || CH0_TXDATA_delay[101]; // rv 1
  assign CH0_TXDATA_in[102] = (CH0_TXDATA[102] === 1'bz) || CH0_TXDATA_delay[102]; // rv 1
  assign CH0_TXDATA_in[103] = (CH0_TXDATA[103] === 1'bz) || CH0_TXDATA_delay[103]; // rv 1
  assign CH0_TXDATA_in[104] = (CH0_TXDATA[104] === 1'bz) || CH0_TXDATA_delay[104]; // rv 1
  assign CH0_TXDATA_in[105] = (CH0_TXDATA[105] === 1'bz) || CH0_TXDATA_delay[105]; // rv 1
  assign CH0_TXDATA_in[106] = (CH0_TXDATA[106] === 1'bz) || CH0_TXDATA_delay[106]; // rv 1
  assign CH0_TXDATA_in[107] = (CH0_TXDATA[107] === 1'bz) || CH0_TXDATA_delay[107]; // rv 1
  assign CH0_TXDATA_in[108] = (CH0_TXDATA[108] === 1'bz) || CH0_TXDATA_delay[108]; // rv 1
  assign CH0_TXDATA_in[109] = (CH0_TXDATA[109] === 1'bz) || CH0_TXDATA_delay[109]; // rv 1
  assign CH0_TXDATA_in[10] = (CH0_TXDATA[10] === 1'bz) || CH0_TXDATA_delay[10]; // rv 1
  assign CH0_TXDATA_in[110] = (CH0_TXDATA[110] === 1'bz) || CH0_TXDATA_delay[110]; // rv 1
  assign CH0_TXDATA_in[111] = (CH0_TXDATA[111] === 1'bz) || CH0_TXDATA_delay[111]; // rv 1
  assign CH0_TXDATA_in[112] = (CH0_TXDATA[112] === 1'bz) || CH0_TXDATA_delay[112]; // rv 1
  assign CH0_TXDATA_in[113] = (CH0_TXDATA[113] === 1'bz) || CH0_TXDATA_delay[113]; // rv 1
  assign CH0_TXDATA_in[114] = (CH0_TXDATA[114] === 1'bz) || CH0_TXDATA_delay[114]; // rv 1
  assign CH0_TXDATA_in[115] = (CH0_TXDATA[115] === 1'bz) || CH0_TXDATA_delay[115]; // rv 1
  assign CH0_TXDATA_in[116] = (CH0_TXDATA[116] === 1'bz) || CH0_TXDATA_delay[116]; // rv 1
  assign CH0_TXDATA_in[117] = (CH0_TXDATA[117] === 1'bz) || CH0_TXDATA_delay[117]; // rv 1
  assign CH0_TXDATA_in[118] = (CH0_TXDATA[118] === 1'bz) || CH0_TXDATA_delay[118]; // rv 1
  assign CH0_TXDATA_in[119] = (CH0_TXDATA[119] === 1'bz) || CH0_TXDATA_delay[119]; // rv 1
  assign CH0_TXDATA_in[11] = (CH0_TXDATA[11] === 1'bz) || CH0_TXDATA_delay[11]; // rv 1
  assign CH0_TXDATA_in[120] = (CH0_TXDATA[120] === 1'bz) || CH0_TXDATA_delay[120]; // rv 1
  assign CH0_TXDATA_in[121] = (CH0_TXDATA[121] === 1'bz) || CH0_TXDATA_delay[121]; // rv 1
  assign CH0_TXDATA_in[122] = (CH0_TXDATA[122] === 1'bz) || CH0_TXDATA_delay[122]; // rv 1
  assign CH0_TXDATA_in[123] = (CH0_TXDATA[123] === 1'bz) || CH0_TXDATA_delay[123]; // rv 1
  assign CH0_TXDATA_in[124] = (CH0_TXDATA[124] === 1'bz) || CH0_TXDATA_delay[124]; // rv 1
  assign CH0_TXDATA_in[125] = (CH0_TXDATA[125] === 1'bz) || CH0_TXDATA_delay[125]; // rv 1
  assign CH0_TXDATA_in[126] = (CH0_TXDATA[126] === 1'bz) || CH0_TXDATA_delay[126]; // rv 1
  assign CH0_TXDATA_in[127] = (CH0_TXDATA[127] === 1'bz) || CH0_TXDATA_delay[127]; // rv 1
  assign CH0_TXDATA_in[12] = (CH0_TXDATA[12] === 1'bz) || CH0_TXDATA_delay[12]; // rv 1
  assign CH0_TXDATA_in[13] = (CH0_TXDATA[13] === 1'bz) || CH0_TXDATA_delay[13]; // rv 1
  assign CH0_TXDATA_in[14] = (CH0_TXDATA[14] === 1'bz) || CH0_TXDATA_delay[14]; // rv 1
  assign CH0_TXDATA_in[15] = (CH0_TXDATA[15] === 1'bz) || CH0_TXDATA_delay[15]; // rv 1
  assign CH0_TXDATA_in[16] = (CH0_TXDATA[16] === 1'bz) || CH0_TXDATA_delay[16]; // rv 1
  assign CH0_TXDATA_in[17] = (CH0_TXDATA[17] === 1'bz) || CH0_TXDATA_delay[17]; // rv 1
  assign CH0_TXDATA_in[18] = (CH0_TXDATA[18] === 1'bz) || CH0_TXDATA_delay[18]; // rv 1
  assign CH0_TXDATA_in[19] = (CH0_TXDATA[19] === 1'bz) || CH0_TXDATA_delay[19]; // rv 1
  assign CH0_TXDATA_in[1] = (CH0_TXDATA[1] === 1'bz) || CH0_TXDATA_delay[1]; // rv 1
  assign CH0_TXDATA_in[20] = (CH0_TXDATA[20] === 1'bz) || CH0_TXDATA_delay[20]; // rv 1
  assign CH0_TXDATA_in[21] = (CH0_TXDATA[21] === 1'bz) || CH0_TXDATA_delay[21]; // rv 1
  assign CH0_TXDATA_in[22] = (CH0_TXDATA[22] === 1'bz) || CH0_TXDATA_delay[22]; // rv 1
  assign CH0_TXDATA_in[23] = (CH0_TXDATA[23] === 1'bz) || CH0_TXDATA_delay[23]; // rv 1
  assign CH0_TXDATA_in[24] = (CH0_TXDATA[24] === 1'bz) || CH0_TXDATA_delay[24]; // rv 1
  assign CH0_TXDATA_in[25] = (CH0_TXDATA[25] === 1'bz) || CH0_TXDATA_delay[25]; // rv 1
  assign CH0_TXDATA_in[26] = (CH0_TXDATA[26] === 1'bz) || CH0_TXDATA_delay[26]; // rv 1
  assign CH0_TXDATA_in[27] = (CH0_TXDATA[27] === 1'bz) || CH0_TXDATA_delay[27]; // rv 1
  assign CH0_TXDATA_in[28] = (CH0_TXDATA[28] === 1'bz) || CH0_TXDATA_delay[28]; // rv 1
  assign CH0_TXDATA_in[29] = (CH0_TXDATA[29] === 1'bz) || CH0_TXDATA_delay[29]; // rv 1
  assign CH0_TXDATA_in[2] = (CH0_TXDATA[2] === 1'bz) || CH0_TXDATA_delay[2]; // rv 1
  assign CH0_TXDATA_in[30] = (CH0_TXDATA[30] === 1'bz) || CH0_TXDATA_delay[30]; // rv 1
  assign CH0_TXDATA_in[31] = (CH0_TXDATA[31] === 1'bz) || CH0_TXDATA_delay[31]; // rv 1
  assign CH0_TXDATA_in[32] = (CH0_TXDATA[32] === 1'bz) || CH0_TXDATA_delay[32]; // rv 1
  assign CH0_TXDATA_in[33] = (CH0_TXDATA[33] === 1'bz) || CH0_TXDATA_delay[33]; // rv 1
  assign CH0_TXDATA_in[34] = (CH0_TXDATA[34] === 1'bz) || CH0_TXDATA_delay[34]; // rv 1
  assign CH0_TXDATA_in[35] = (CH0_TXDATA[35] === 1'bz) || CH0_TXDATA_delay[35]; // rv 1
  assign CH0_TXDATA_in[36] = (CH0_TXDATA[36] === 1'bz) || CH0_TXDATA_delay[36]; // rv 1
  assign CH0_TXDATA_in[37] = (CH0_TXDATA[37] === 1'bz) || CH0_TXDATA_delay[37]; // rv 1
  assign CH0_TXDATA_in[38] = (CH0_TXDATA[38] === 1'bz) || CH0_TXDATA_delay[38]; // rv 1
  assign CH0_TXDATA_in[39] = (CH0_TXDATA[39] === 1'bz) || CH0_TXDATA_delay[39]; // rv 1
  assign CH0_TXDATA_in[3] = (CH0_TXDATA[3] === 1'bz) || CH0_TXDATA_delay[3]; // rv 1
  assign CH0_TXDATA_in[40] = (CH0_TXDATA[40] === 1'bz) || CH0_TXDATA_delay[40]; // rv 1
  assign CH0_TXDATA_in[41] = (CH0_TXDATA[41] === 1'bz) || CH0_TXDATA_delay[41]; // rv 1
  assign CH0_TXDATA_in[42] = (CH0_TXDATA[42] === 1'bz) || CH0_TXDATA_delay[42]; // rv 1
  assign CH0_TXDATA_in[43] = (CH0_TXDATA[43] === 1'bz) || CH0_TXDATA_delay[43]; // rv 1
  assign CH0_TXDATA_in[44] = (CH0_TXDATA[44] === 1'bz) || CH0_TXDATA_delay[44]; // rv 1
  assign CH0_TXDATA_in[45] = (CH0_TXDATA[45] === 1'bz) || CH0_TXDATA_delay[45]; // rv 1
  assign CH0_TXDATA_in[46] = (CH0_TXDATA[46] === 1'bz) || CH0_TXDATA_delay[46]; // rv 1
  assign CH0_TXDATA_in[47] = (CH0_TXDATA[47] === 1'bz) || CH0_TXDATA_delay[47]; // rv 1
  assign CH0_TXDATA_in[48] = (CH0_TXDATA[48] === 1'bz) || CH0_TXDATA_delay[48]; // rv 1
  assign CH0_TXDATA_in[49] = (CH0_TXDATA[49] === 1'bz) || CH0_TXDATA_delay[49]; // rv 1
  assign CH0_TXDATA_in[4] = (CH0_TXDATA[4] === 1'bz) || CH0_TXDATA_delay[4]; // rv 1
  assign CH0_TXDATA_in[50] = (CH0_TXDATA[50] === 1'bz) || CH0_TXDATA_delay[50]; // rv 1
  assign CH0_TXDATA_in[51] = (CH0_TXDATA[51] === 1'bz) || CH0_TXDATA_delay[51]; // rv 1
  assign CH0_TXDATA_in[52] = (CH0_TXDATA[52] === 1'bz) || CH0_TXDATA_delay[52]; // rv 1
  assign CH0_TXDATA_in[53] = (CH0_TXDATA[53] === 1'bz) || CH0_TXDATA_delay[53]; // rv 1
  assign CH0_TXDATA_in[54] = (CH0_TXDATA[54] === 1'bz) || CH0_TXDATA_delay[54]; // rv 1
  assign CH0_TXDATA_in[55] = (CH0_TXDATA[55] === 1'bz) || CH0_TXDATA_delay[55]; // rv 1
  assign CH0_TXDATA_in[56] = (CH0_TXDATA[56] === 1'bz) || CH0_TXDATA_delay[56]; // rv 1
  assign CH0_TXDATA_in[57] = (CH0_TXDATA[57] === 1'bz) || CH0_TXDATA_delay[57]; // rv 1
  assign CH0_TXDATA_in[58] = (CH0_TXDATA[58] === 1'bz) || CH0_TXDATA_delay[58]; // rv 1
  assign CH0_TXDATA_in[59] = (CH0_TXDATA[59] === 1'bz) || CH0_TXDATA_delay[59]; // rv 1
  assign CH0_TXDATA_in[5] = (CH0_TXDATA[5] === 1'bz) || CH0_TXDATA_delay[5]; // rv 1
  assign CH0_TXDATA_in[60] = (CH0_TXDATA[60] === 1'bz) || CH0_TXDATA_delay[60]; // rv 1
  assign CH0_TXDATA_in[61] = (CH0_TXDATA[61] === 1'bz) || CH0_TXDATA_delay[61]; // rv 1
  assign CH0_TXDATA_in[62] = (CH0_TXDATA[62] === 1'bz) || CH0_TXDATA_delay[62]; // rv 1
  assign CH0_TXDATA_in[63] = (CH0_TXDATA[63] === 1'bz) || CH0_TXDATA_delay[63]; // rv 1
  assign CH0_TXDATA_in[64] = (CH0_TXDATA[64] === 1'bz) || CH0_TXDATA_delay[64]; // rv 1
  assign CH0_TXDATA_in[65] = (CH0_TXDATA[65] === 1'bz) || CH0_TXDATA_delay[65]; // rv 1
  assign CH0_TXDATA_in[66] = (CH0_TXDATA[66] === 1'bz) || CH0_TXDATA_delay[66]; // rv 1
  assign CH0_TXDATA_in[67] = (CH0_TXDATA[67] === 1'bz) || CH0_TXDATA_delay[67]; // rv 1
  assign CH0_TXDATA_in[68] = (CH0_TXDATA[68] === 1'bz) || CH0_TXDATA_delay[68]; // rv 1
  assign CH0_TXDATA_in[69] = (CH0_TXDATA[69] === 1'bz) || CH0_TXDATA_delay[69]; // rv 1
  assign CH0_TXDATA_in[6] = (CH0_TXDATA[6] === 1'bz) || CH0_TXDATA_delay[6]; // rv 1
  assign CH0_TXDATA_in[70] = (CH0_TXDATA[70] === 1'bz) || CH0_TXDATA_delay[70]; // rv 1
  assign CH0_TXDATA_in[71] = (CH0_TXDATA[71] === 1'bz) || CH0_TXDATA_delay[71]; // rv 1
  assign CH0_TXDATA_in[72] = (CH0_TXDATA[72] === 1'bz) || CH0_TXDATA_delay[72]; // rv 1
  assign CH0_TXDATA_in[73] = (CH0_TXDATA[73] === 1'bz) || CH0_TXDATA_delay[73]; // rv 1
  assign CH0_TXDATA_in[74] = (CH0_TXDATA[74] === 1'bz) || CH0_TXDATA_delay[74]; // rv 1
  assign CH0_TXDATA_in[75] = (CH0_TXDATA[75] === 1'bz) || CH0_TXDATA_delay[75]; // rv 1
  assign CH0_TXDATA_in[76] = (CH0_TXDATA[76] === 1'bz) || CH0_TXDATA_delay[76]; // rv 1
  assign CH0_TXDATA_in[77] = (CH0_TXDATA[77] === 1'bz) || CH0_TXDATA_delay[77]; // rv 1
  assign CH0_TXDATA_in[78] = (CH0_TXDATA[78] === 1'bz) || CH0_TXDATA_delay[78]; // rv 1
  assign CH0_TXDATA_in[79] = (CH0_TXDATA[79] === 1'bz) || CH0_TXDATA_delay[79]; // rv 1
  assign CH0_TXDATA_in[7] = (CH0_TXDATA[7] === 1'bz) || CH0_TXDATA_delay[7]; // rv 1
  assign CH0_TXDATA_in[80] = (CH0_TXDATA[80] === 1'bz) || CH0_TXDATA_delay[80]; // rv 1
  assign CH0_TXDATA_in[81] = (CH0_TXDATA[81] === 1'bz) || CH0_TXDATA_delay[81]; // rv 1
  assign CH0_TXDATA_in[82] = (CH0_TXDATA[82] === 1'bz) || CH0_TXDATA_delay[82]; // rv 1
  assign CH0_TXDATA_in[83] = (CH0_TXDATA[83] === 1'bz) || CH0_TXDATA_delay[83]; // rv 1
  assign CH0_TXDATA_in[84] = (CH0_TXDATA[84] === 1'bz) || CH0_TXDATA_delay[84]; // rv 1
  assign CH0_TXDATA_in[85] = (CH0_TXDATA[85] === 1'bz) || CH0_TXDATA_delay[85]; // rv 1
  assign CH0_TXDATA_in[86] = (CH0_TXDATA[86] === 1'bz) || CH0_TXDATA_delay[86]; // rv 1
  assign CH0_TXDATA_in[87] = (CH0_TXDATA[87] === 1'bz) || CH0_TXDATA_delay[87]; // rv 1
  assign CH0_TXDATA_in[88] = (CH0_TXDATA[88] === 1'bz) || CH0_TXDATA_delay[88]; // rv 1
  assign CH0_TXDATA_in[89] = (CH0_TXDATA[89] === 1'bz) || CH0_TXDATA_delay[89]; // rv 1
  assign CH0_TXDATA_in[8] = (CH0_TXDATA[8] === 1'bz) || CH0_TXDATA_delay[8]; // rv 1
  assign CH0_TXDATA_in[90] = (CH0_TXDATA[90] === 1'bz) || CH0_TXDATA_delay[90]; // rv 1
  assign CH0_TXDATA_in[91] = (CH0_TXDATA[91] === 1'bz) || CH0_TXDATA_delay[91]; // rv 1
  assign CH0_TXDATA_in[92] = (CH0_TXDATA[92] === 1'bz) || CH0_TXDATA_delay[92]; // rv 1
  assign CH0_TXDATA_in[93] = (CH0_TXDATA[93] === 1'bz) || CH0_TXDATA_delay[93]; // rv 1
  assign CH0_TXDATA_in[94] = (CH0_TXDATA[94] === 1'bz) || CH0_TXDATA_delay[94]; // rv 1
  assign CH0_TXDATA_in[95] = (CH0_TXDATA[95] === 1'bz) || CH0_TXDATA_delay[95]; // rv 1
  assign CH0_TXDATA_in[96] = (CH0_TXDATA[96] === 1'bz) || CH0_TXDATA_delay[96]; // rv 1
  assign CH0_TXDATA_in[97] = (CH0_TXDATA[97] === 1'bz) || CH0_TXDATA_delay[97]; // rv 1
  assign CH0_TXDATA_in[98] = (CH0_TXDATA[98] === 1'bz) || CH0_TXDATA_delay[98]; // rv 1
  assign CH0_TXDATA_in[99] = (CH0_TXDATA[99] === 1'bz) || CH0_TXDATA_delay[99]; // rv 1
  assign CH0_TXDATA_in[9] = (CH0_TXDATA[9] === 1'bz) || CH0_TXDATA_delay[9]; // rv 1
  assign CH1_TXDATA_in[0] = (CH1_TXDATA[0] === 1'bz) || CH1_TXDATA_delay[0]; // rv 1
  assign CH1_TXDATA_in[100] = (CH1_TXDATA[100] === 1'bz) || CH1_TXDATA_delay[100]; // rv 1
  assign CH1_TXDATA_in[101] = (CH1_TXDATA[101] === 1'bz) || CH1_TXDATA_delay[101]; // rv 1
  assign CH1_TXDATA_in[102] = (CH1_TXDATA[102] === 1'bz) || CH1_TXDATA_delay[102]; // rv 1
  assign CH1_TXDATA_in[103] = (CH1_TXDATA[103] === 1'bz) || CH1_TXDATA_delay[103]; // rv 1
  assign CH1_TXDATA_in[104] = (CH1_TXDATA[104] === 1'bz) || CH1_TXDATA_delay[104]; // rv 1
  assign CH1_TXDATA_in[105] = (CH1_TXDATA[105] === 1'bz) || CH1_TXDATA_delay[105]; // rv 1
  assign CH1_TXDATA_in[106] = (CH1_TXDATA[106] === 1'bz) || CH1_TXDATA_delay[106]; // rv 1
  assign CH1_TXDATA_in[107] = (CH1_TXDATA[107] === 1'bz) || CH1_TXDATA_delay[107]; // rv 1
  assign CH1_TXDATA_in[108] = (CH1_TXDATA[108] === 1'bz) || CH1_TXDATA_delay[108]; // rv 1
  assign CH1_TXDATA_in[109] = (CH1_TXDATA[109] === 1'bz) || CH1_TXDATA_delay[109]; // rv 1
  assign CH1_TXDATA_in[10] = (CH1_TXDATA[10] === 1'bz) || CH1_TXDATA_delay[10]; // rv 1
  assign CH1_TXDATA_in[110] = (CH1_TXDATA[110] === 1'bz) || CH1_TXDATA_delay[110]; // rv 1
  assign CH1_TXDATA_in[111] = (CH1_TXDATA[111] === 1'bz) || CH1_TXDATA_delay[111]; // rv 1
  assign CH1_TXDATA_in[112] = (CH1_TXDATA[112] === 1'bz) || CH1_TXDATA_delay[112]; // rv 1
  assign CH1_TXDATA_in[113] = (CH1_TXDATA[113] === 1'bz) || CH1_TXDATA_delay[113]; // rv 1
  assign CH1_TXDATA_in[114] = (CH1_TXDATA[114] === 1'bz) || CH1_TXDATA_delay[114]; // rv 1
  assign CH1_TXDATA_in[115] = (CH1_TXDATA[115] === 1'bz) || CH1_TXDATA_delay[115]; // rv 1
  assign CH1_TXDATA_in[116] = (CH1_TXDATA[116] === 1'bz) || CH1_TXDATA_delay[116]; // rv 1
  assign CH1_TXDATA_in[117] = (CH1_TXDATA[117] === 1'bz) || CH1_TXDATA_delay[117]; // rv 1
  assign CH1_TXDATA_in[118] = (CH1_TXDATA[118] === 1'bz) || CH1_TXDATA_delay[118]; // rv 1
  assign CH1_TXDATA_in[119] = (CH1_TXDATA[119] === 1'bz) || CH1_TXDATA_delay[119]; // rv 1
  assign CH1_TXDATA_in[11] = (CH1_TXDATA[11] === 1'bz) || CH1_TXDATA_delay[11]; // rv 1
  assign CH1_TXDATA_in[120] = (CH1_TXDATA[120] === 1'bz) || CH1_TXDATA_delay[120]; // rv 1
  assign CH1_TXDATA_in[121] = (CH1_TXDATA[121] === 1'bz) || CH1_TXDATA_delay[121]; // rv 1
  assign CH1_TXDATA_in[122] = (CH1_TXDATA[122] === 1'bz) || CH1_TXDATA_delay[122]; // rv 1
  assign CH1_TXDATA_in[123] = (CH1_TXDATA[123] === 1'bz) || CH1_TXDATA_delay[123]; // rv 1
  assign CH1_TXDATA_in[124] = (CH1_TXDATA[124] === 1'bz) || CH1_TXDATA_delay[124]; // rv 1
  assign CH1_TXDATA_in[125] = (CH1_TXDATA[125] === 1'bz) || CH1_TXDATA_delay[125]; // rv 1
  assign CH1_TXDATA_in[126] = (CH1_TXDATA[126] === 1'bz) || CH1_TXDATA_delay[126]; // rv 1
  assign CH1_TXDATA_in[127] = (CH1_TXDATA[127] === 1'bz) || CH1_TXDATA_delay[127]; // rv 1
  assign CH1_TXDATA_in[12] = (CH1_TXDATA[12] === 1'bz) || CH1_TXDATA_delay[12]; // rv 1
  assign CH1_TXDATA_in[13] = (CH1_TXDATA[13] === 1'bz) || CH1_TXDATA_delay[13]; // rv 1
  assign CH1_TXDATA_in[14] = (CH1_TXDATA[14] === 1'bz) || CH1_TXDATA_delay[14]; // rv 1
  assign CH1_TXDATA_in[15] = (CH1_TXDATA[15] === 1'bz) || CH1_TXDATA_delay[15]; // rv 1
  assign CH1_TXDATA_in[16] = (CH1_TXDATA[16] === 1'bz) || CH1_TXDATA_delay[16]; // rv 1
  assign CH1_TXDATA_in[17] = (CH1_TXDATA[17] === 1'bz) || CH1_TXDATA_delay[17]; // rv 1
  assign CH1_TXDATA_in[18] = (CH1_TXDATA[18] === 1'bz) || CH1_TXDATA_delay[18]; // rv 1
  assign CH1_TXDATA_in[19] = (CH1_TXDATA[19] === 1'bz) || CH1_TXDATA_delay[19]; // rv 1
  assign CH1_TXDATA_in[1] = (CH1_TXDATA[1] === 1'bz) || CH1_TXDATA_delay[1]; // rv 1
  assign CH1_TXDATA_in[20] = (CH1_TXDATA[20] === 1'bz) || CH1_TXDATA_delay[20]; // rv 1
  assign CH1_TXDATA_in[21] = (CH1_TXDATA[21] === 1'bz) || CH1_TXDATA_delay[21]; // rv 1
  assign CH1_TXDATA_in[22] = (CH1_TXDATA[22] === 1'bz) || CH1_TXDATA_delay[22]; // rv 1
  assign CH1_TXDATA_in[23] = (CH1_TXDATA[23] === 1'bz) || CH1_TXDATA_delay[23]; // rv 1
  assign CH1_TXDATA_in[24] = (CH1_TXDATA[24] === 1'bz) || CH1_TXDATA_delay[24]; // rv 1
  assign CH1_TXDATA_in[25] = (CH1_TXDATA[25] === 1'bz) || CH1_TXDATA_delay[25]; // rv 1
  assign CH1_TXDATA_in[26] = (CH1_TXDATA[26] === 1'bz) || CH1_TXDATA_delay[26]; // rv 1
  assign CH1_TXDATA_in[27] = (CH1_TXDATA[27] === 1'bz) || CH1_TXDATA_delay[27]; // rv 1
  assign CH1_TXDATA_in[28] = (CH1_TXDATA[28] === 1'bz) || CH1_TXDATA_delay[28]; // rv 1
  assign CH1_TXDATA_in[29] = (CH1_TXDATA[29] === 1'bz) || CH1_TXDATA_delay[29]; // rv 1
  assign CH1_TXDATA_in[2] = (CH1_TXDATA[2] === 1'bz) || CH1_TXDATA_delay[2]; // rv 1
  assign CH1_TXDATA_in[30] = (CH1_TXDATA[30] === 1'bz) || CH1_TXDATA_delay[30]; // rv 1
  assign CH1_TXDATA_in[31] = (CH1_TXDATA[31] === 1'bz) || CH1_TXDATA_delay[31]; // rv 1
  assign CH1_TXDATA_in[32] = (CH1_TXDATA[32] === 1'bz) || CH1_TXDATA_delay[32]; // rv 1
  assign CH1_TXDATA_in[33] = (CH1_TXDATA[33] === 1'bz) || CH1_TXDATA_delay[33]; // rv 1
  assign CH1_TXDATA_in[34] = (CH1_TXDATA[34] === 1'bz) || CH1_TXDATA_delay[34]; // rv 1
  assign CH1_TXDATA_in[35] = (CH1_TXDATA[35] === 1'bz) || CH1_TXDATA_delay[35]; // rv 1
  assign CH1_TXDATA_in[36] = (CH1_TXDATA[36] === 1'bz) || CH1_TXDATA_delay[36]; // rv 1
  assign CH1_TXDATA_in[37] = (CH1_TXDATA[37] === 1'bz) || CH1_TXDATA_delay[37]; // rv 1
  assign CH1_TXDATA_in[38] = (CH1_TXDATA[38] === 1'bz) || CH1_TXDATA_delay[38]; // rv 1
  assign CH1_TXDATA_in[39] = (CH1_TXDATA[39] === 1'bz) || CH1_TXDATA_delay[39]; // rv 1
  assign CH1_TXDATA_in[3] = (CH1_TXDATA[3] === 1'bz) || CH1_TXDATA_delay[3]; // rv 1
  assign CH1_TXDATA_in[40] = (CH1_TXDATA[40] === 1'bz) || CH1_TXDATA_delay[40]; // rv 1
  assign CH1_TXDATA_in[41] = (CH1_TXDATA[41] === 1'bz) || CH1_TXDATA_delay[41]; // rv 1
  assign CH1_TXDATA_in[42] = (CH1_TXDATA[42] === 1'bz) || CH1_TXDATA_delay[42]; // rv 1
  assign CH1_TXDATA_in[43] = (CH1_TXDATA[43] === 1'bz) || CH1_TXDATA_delay[43]; // rv 1
  assign CH1_TXDATA_in[44] = (CH1_TXDATA[44] === 1'bz) || CH1_TXDATA_delay[44]; // rv 1
  assign CH1_TXDATA_in[45] = (CH1_TXDATA[45] === 1'bz) || CH1_TXDATA_delay[45]; // rv 1
  assign CH1_TXDATA_in[46] = (CH1_TXDATA[46] === 1'bz) || CH1_TXDATA_delay[46]; // rv 1
  assign CH1_TXDATA_in[47] = (CH1_TXDATA[47] === 1'bz) || CH1_TXDATA_delay[47]; // rv 1
  assign CH1_TXDATA_in[48] = (CH1_TXDATA[48] === 1'bz) || CH1_TXDATA_delay[48]; // rv 1
  assign CH1_TXDATA_in[49] = (CH1_TXDATA[49] === 1'bz) || CH1_TXDATA_delay[49]; // rv 1
  assign CH1_TXDATA_in[4] = (CH1_TXDATA[4] === 1'bz) || CH1_TXDATA_delay[4]; // rv 1
  assign CH1_TXDATA_in[50] = (CH1_TXDATA[50] === 1'bz) || CH1_TXDATA_delay[50]; // rv 1
  assign CH1_TXDATA_in[51] = (CH1_TXDATA[51] === 1'bz) || CH1_TXDATA_delay[51]; // rv 1
  assign CH1_TXDATA_in[52] = (CH1_TXDATA[52] === 1'bz) || CH1_TXDATA_delay[52]; // rv 1
  assign CH1_TXDATA_in[53] = (CH1_TXDATA[53] === 1'bz) || CH1_TXDATA_delay[53]; // rv 1
  assign CH1_TXDATA_in[54] = (CH1_TXDATA[54] === 1'bz) || CH1_TXDATA_delay[54]; // rv 1
  assign CH1_TXDATA_in[55] = (CH1_TXDATA[55] === 1'bz) || CH1_TXDATA_delay[55]; // rv 1
  assign CH1_TXDATA_in[56] = (CH1_TXDATA[56] === 1'bz) || CH1_TXDATA_delay[56]; // rv 1
  assign CH1_TXDATA_in[57] = (CH1_TXDATA[57] === 1'bz) || CH1_TXDATA_delay[57]; // rv 1
  assign CH1_TXDATA_in[58] = (CH1_TXDATA[58] === 1'bz) || CH1_TXDATA_delay[58]; // rv 1
  assign CH1_TXDATA_in[59] = (CH1_TXDATA[59] === 1'bz) || CH1_TXDATA_delay[59]; // rv 1
  assign CH1_TXDATA_in[5] = (CH1_TXDATA[5] === 1'bz) || CH1_TXDATA_delay[5]; // rv 1
  assign CH1_TXDATA_in[60] = (CH1_TXDATA[60] === 1'bz) || CH1_TXDATA_delay[60]; // rv 1
  assign CH1_TXDATA_in[61] = (CH1_TXDATA[61] === 1'bz) || CH1_TXDATA_delay[61]; // rv 1
  assign CH1_TXDATA_in[62] = (CH1_TXDATA[62] === 1'bz) || CH1_TXDATA_delay[62]; // rv 1
  assign CH1_TXDATA_in[63] = (CH1_TXDATA[63] === 1'bz) || CH1_TXDATA_delay[63]; // rv 1
  assign CH1_TXDATA_in[64] = (CH1_TXDATA[64] === 1'bz) || CH1_TXDATA_delay[64]; // rv 1
  assign CH1_TXDATA_in[65] = (CH1_TXDATA[65] === 1'bz) || CH1_TXDATA_delay[65]; // rv 1
  assign CH1_TXDATA_in[66] = (CH1_TXDATA[66] === 1'bz) || CH1_TXDATA_delay[66]; // rv 1
  assign CH1_TXDATA_in[67] = (CH1_TXDATA[67] === 1'bz) || CH1_TXDATA_delay[67]; // rv 1
  assign CH1_TXDATA_in[68] = (CH1_TXDATA[68] === 1'bz) || CH1_TXDATA_delay[68]; // rv 1
  assign CH1_TXDATA_in[69] = (CH1_TXDATA[69] === 1'bz) || CH1_TXDATA_delay[69]; // rv 1
  assign CH1_TXDATA_in[6] = (CH1_TXDATA[6] === 1'bz) || CH1_TXDATA_delay[6]; // rv 1
  assign CH1_TXDATA_in[70] = (CH1_TXDATA[70] === 1'bz) || CH1_TXDATA_delay[70]; // rv 1
  assign CH1_TXDATA_in[71] = (CH1_TXDATA[71] === 1'bz) || CH1_TXDATA_delay[71]; // rv 1
  assign CH1_TXDATA_in[72] = (CH1_TXDATA[72] === 1'bz) || CH1_TXDATA_delay[72]; // rv 1
  assign CH1_TXDATA_in[73] = (CH1_TXDATA[73] === 1'bz) || CH1_TXDATA_delay[73]; // rv 1
  assign CH1_TXDATA_in[74] = (CH1_TXDATA[74] === 1'bz) || CH1_TXDATA_delay[74]; // rv 1
  assign CH1_TXDATA_in[75] = (CH1_TXDATA[75] === 1'bz) || CH1_TXDATA_delay[75]; // rv 1
  assign CH1_TXDATA_in[76] = (CH1_TXDATA[76] === 1'bz) || CH1_TXDATA_delay[76]; // rv 1
  assign CH1_TXDATA_in[77] = (CH1_TXDATA[77] === 1'bz) || CH1_TXDATA_delay[77]; // rv 1
  assign CH1_TXDATA_in[78] = (CH1_TXDATA[78] === 1'bz) || CH1_TXDATA_delay[78]; // rv 1
  assign CH1_TXDATA_in[79] = (CH1_TXDATA[79] === 1'bz) || CH1_TXDATA_delay[79]; // rv 1
  assign CH1_TXDATA_in[7] = (CH1_TXDATA[7] === 1'bz) || CH1_TXDATA_delay[7]; // rv 1
  assign CH1_TXDATA_in[80] = (CH1_TXDATA[80] === 1'bz) || CH1_TXDATA_delay[80]; // rv 1
  assign CH1_TXDATA_in[81] = (CH1_TXDATA[81] === 1'bz) || CH1_TXDATA_delay[81]; // rv 1
  assign CH1_TXDATA_in[82] = (CH1_TXDATA[82] === 1'bz) || CH1_TXDATA_delay[82]; // rv 1
  assign CH1_TXDATA_in[83] = (CH1_TXDATA[83] === 1'bz) || CH1_TXDATA_delay[83]; // rv 1
  assign CH1_TXDATA_in[84] = (CH1_TXDATA[84] === 1'bz) || CH1_TXDATA_delay[84]; // rv 1
  assign CH1_TXDATA_in[85] = (CH1_TXDATA[85] === 1'bz) || CH1_TXDATA_delay[85]; // rv 1
  assign CH1_TXDATA_in[86] = (CH1_TXDATA[86] === 1'bz) || CH1_TXDATA_delay[86]; // rv 1
  assign CH1_TXDATA_in[87] = (CH1_TXDATA[87] === 1'bz) || CH1_TXDATA_delay[87]; // rv 1
  assign CH1_TXDATA_in[88] = (CH1_TXDATA[88] === 1'bz) || CH1_TXDATA_delay[88]; // rv 1
  assign CH1_TXDATA_in[89] = (CH1_TXDATA[89] === 1'bz) || CH1_TXDATA_delay[89]; // rv 1
  assign CH1_TXDATA_in[8] = (CH1_TXDATA[8] === 1'bz) || CH1_TXDATA_delay[8]; // rv 1
  assign CH1_TXDATA_in[90] = (CH1_TXDATA[90] === 1'bz) || CH1_TXDATA_delay[90]; // rv 1
  assign CH1_TXDATA_in[91] = (CH1_TXDATA[91] === 1'bz) || CH1_TXDATA_delay[91]; // rv 1
  assign CH1_TXDATA_in[92] = (CH1_TXDATA[92] === 1'bz) || CH1_TXDATA_delay[92]; // rv 1
  assign CH1_TXDATA_in[93] = (CH1_TXDATA[93] === 1'bz) || CH1_TXDATA_delay[93]; // rv 1
  assign CH1_TXDATA_in[94] = (CH1_TXDATA[94] === 1'bz) || CH1_TXDATA_delay[94]; // rv 1
  assign CH1_TXDATA_in[95] = (CH1_TXDATA[95] === 1'bz) || CH1_TXDATA_delay[95]; // rv 1
  assign CH1_TXDATA_in[96] = (CH1_TXDATA[96] === 1'bz) || CH1_TXDATA_delay[96]; // rv 1
  assign CH1_TXDATA_in[97] = (CH1_TXDATA[97] === 1'bz) || CH1_TXDATA_delay[97]; // rv 1
  assign CH1_TXDATA_in[98] = (CH1_TXDATA[98] === 1'bz) || CH1_TXDATA_delay[98]; // rv 1
  assign CH1_TXDATA_in[99] = (CH1_TXDATA[99] === 1'bz) || CH1_TXDATA_delay[99]; // rv 1
  assign CH1_TXDATA_in[9] = (CH1_TXDATA[9] === 1'bz) || CH1_TXDATA_delay[9]; // rv 1
  assign CH2_TXDATA_in[0] = (CH2_TXDATA[0] === 1'bz) || CH2_TXDATA_delay[0]; // rv 1
  assign CH2_TXDATA_in[100] = (CH2_TXDATA[100] === 1'bz) || CH2_TXDATA_delay[100]; // rv 1
  assign CH2_TXDATA_in[101] = (CH2_TXDATA[101] === 1'bz) || CH2_TXDATA_delay[101]; // rv 1
  assign CH2_TXDATA_in[102] = (CH2_TXDATA[102] === 1'bz) || CH2_TXDATA_delay[102]; // rv 1
  assign CH2_TXDATA_in[103] = (CH2_TXDATA[103] === 1'bz) || CH2_TXDATA_delay[103]; // rv 1
  assign CH2_TXDATA_in[104] = (CH2_TXDATA[104] === 1'bz) || CH2_TXDATA_delay[104]; // rv 1
  assign CH2_TXDATA_in[105] = (CH2_TXDATA[105] === 1'bz) || CH2_TXDATA_delay[105]; // rv 1
  assign CH2_TXDATA_in[106] = (CH2_TXDATA[106] === 1'bz) || CH2_TXDATA_delay[106]; // rv 1
  assign CH2_TXDATA_in[107] = (CH2_TXDATA[107] === 1'bz) || CH2_TXDATA_delay[107]; // rv 1
  assign CH2_TXDATA_in[108] = (CH2_TXDATA[108] === 1'bz) || CH2_TXDATA_delay[108]; // rv 1
  assign CH2_TXDATA_in[109] = (CH2_TXDATA[109] === 1'bz) || CH2_TXDATA_delay[109]; // rv 1
  assign CH2_TXDATA_in[10] = (CH2_TXDATA[10] === 1'bz) || CH2_TXDATA_delay[10]; // rv 1
  assign CH2_TXDATA_in[110] = (CH2_TXDATA[110] === 1'bz) || CH2_TXDATA_delay[110]; // rv 1
  assign CH2_TXDATA_in[111] = (CH2_TXDATA[111] === 1'bz) || CH2_TXDATA_delay[111]; // rv 1
  assign CH2_TXDATA_in[112] = (CH2_TXDATA[112] === 1'bz) || CH2_TXDATA_delay[112]; // rv 1
  assign CH2_TXDATA_in[113] = (CH2_TXDATA[113] === 1'bz) || CH2_TXDATA_delay[113]; // rv 1
  assign CH2_TXDATA_in[114] = (CH2_TXDATA[114] === 1'bz) || CH2_TXDATA_delay[114]; // rv 1
  assign CH2_TXDATA_in[115] = (CH2_TXDATA[115] === 1'bz) || CH2_TXDATA_delay[115]; // rv 1
  assign CH2_TXDATA_in[116] = (CH2_TXDATA[116] === 1'bz) || CH2_TXDATA_delay[116]; // rv 1
  assign CH2_TXDATA_in[117] = (CH2_TXDATA[117] === 1'bz) || CH2_TXDATA_delay[117]; // rv 1
  assign CH2_TXDATA_in[118] = (CH2_TXDATA[118] === 1'bz) || CH2_TXDATA_delay[118]; // rv 1
  assign CH2_TXDATA_in[119] = (CH2_TXDATA[119] === 1'bz) || CH2_TXDATA_delay[119]; // rv 1
  assign CH2_TXDATA_in[11] = (CH2_TXDATA[11] === 1'bz) || CH2_TXDATA_delay[11]; // rv 1
  assign CH2_TXDATA_in[120] = (CH2_TXDATA[120] === 1'bz) || CH2_TXDATA_delay[120]; // rv 1
  assign CH2_TXDATA_in[121] = (CH2_TXDATA[121] === 1'bz) || CH2_TXDATA_delay[121]; // rv 1
  assign CH2_TXDATA_in[122] = (CH2_TXDATA[122] === 1'bz) || CH2_TXDATA_delay[122]; // rv 1
  assign CH2_TXDATA_in[123] = (CH2_TXDATA[123] === 1'bz) || CH2_TXDATA_delay[123]; // rv 1
  assign CH2_TXDATA_in[124] = (CH2_TXDATA[124] === 1'bz) || CH2_TXDATA_delay[124]; // rv 1
  assign CH2_TXDATA_in[125] = (CH2_TXDATA[125] === 1'bz) || CH2_TXDATA_delay[125]; // rv 1
  assign CH2_TXDATA_in[126] = (CH2_TXDATA[126] === 1'bz) || CH2_TXDATA_delay[126]; // rv 1
  assign CH2_TXDATA_in[127] = (CH2_TXDATA[127] === 1'bz) || CH2_TXDATA_delay[127]; // rv 1
  assign CH2_TXDATA_in[12] = (CH2_TXDATA[12] === 1'bz) || CH2_TXDATA_delay[12]; // rv 1
  assign CH2_TXDATA_in[13] = (CH2_TXDATA[13] === 1'bz) || CH2_TXDATA_delay[13]; // rv 1
  assign CH2_TXDATA_in[14] = (CH2_TXDATA[14] === 1'bz) || CH2_TXDATA_delay[14]; // rv 1
  assign CH2_TXDATA_in[15] = (CH2_TXDATA[15] === 1'bz) || CH2_TXDATA_delay[15]; // rv 1
  assign CH2_TXDATA_in[16] = (CH2_TXDATA[16] === 1'bz) || CH2_TXDATA_delay[16]; // rv 1
  assign CH2_TXDATA_in[17] = (CH2_TXDATA[17] === 1'bz) || CH2_TXDATA_delay[17]; // rv 1
  assign CH2_TXDATA_in[18] = (CH2_TXDATA[18] === 1'bz) || CH2_TXDATA_delay[18]; // rv 1
  assign CH2_TXDATA_in[19] = (CH2_TXDATA[19] === 1'bz) || CH2_TXDATA_delay[19]; // rv 1
  assign CH2_TXDATA_in[1] = (CH2_TXDATA[1] === 1'bz) || CH2_TXDATA_delay[1]; // rv 1
  assign CH2_TXDATA_in[20] = (CH2_TXDATA[20] === 1'bz) || CH2_TXDATA_delay[20]; // rv 1
  assign CH2_TXDATA_in[21] = (CH2_TXDATA[21] === 1'bz) || CH2_TXDATA_delay[21]; // rv 1
  assign CH2_TXDATA_in[22] = (CH2_TXDATA[22] === 1'bz) || CH2_TXDATA_delay[22]; // rv 1
  assign CH2_TXDATA_in[23] = (CH2_TXDATA[23] === 1'bz) || CH2_TXDATA_delay[23]; // rv 1
  assign CH2_TXDATA_in[24] = (CH2_TXDATA[24] === 1'bz) || CH2_TXDATA_delay[24]; // rv 1
  assign CH2_TXDATA_in[25] = (CH2_TXDATA[25] === 1'bz) || CH2_TXDATA_delay[25]; // rv 1
  assign CH2_TXDATA_in[26] = (CH2_TXDATA[26] === 1'bz) || CH2_TXDATA_delay[26]; // rv 1
  assign CH2_TXDATA_in[27] = (CH2_TXDATA[27] === 1'bz) || CH2_TXDATA_delay[27]; // rv 1
  assign CH2_TXDATA_in[28] = (CH2_TXDATA[28] === 1'bz) || CH2_TXDATA_delay[28]; // rv 1
  assign CH2_TXDATA_in[29] = (CH2_TXDATA[29] === 1'bz) || CH2_TXDATA_delay[29]; // rv 1
  assign CH2_TXDATA_in[2] = (CH2_TXDATA[2] === 1'bz) || CH2_TXDATA_delay[2]; // rv 1
  assign CH2_TXDATA_in[30] = (CH2_TXDATA[30] === 1'bz) || CH2_TXDATA_delay[30]; // rv 1
  assign CH2_TXDATA_in[31] = (CH2_TXDATA[31] === 1'bz) || CH2_TXDATA_delay[31]; // rv 1
  assign CH2_TXDATA_in[32] = (CH2_TXDATA[32] === 1'bz) || CH2_TXDATA_delay[32]; // rv 1
  assign CH2_TXDATA_in[33] = (CH2_TXDATA[33] === 1'bz) || CH2_TXDATA_delay[33]; // rv 1
  assign CH2_TXDATA_in[34] = (CH2_TXDATA[34] === 1'bz) || CH2_TXDATA_delay[34]; // rv 1
  assign CH2_TXDATA_in[35] = (CH2_TXDATA[35] === 1'bz) || CH2_TXDATA_delay[35]; // rv 1
  assign CH2_TXDATA_in[36] = (CH2_TXDATA[36] === 1'bz) || CH2_TXDATA_delay[36]; // rv 1
  assign CH2_TXDATA_in[37] = (CH2_TXDATA[37] === 1'bz) || CH2_TXDATA_delay[37]; // rv 1
  assign CH2_TXDATA_in[38] = (CH2_TXDATA[38] === 1'bz) || CH2_TXDATA_delay[38]; // rv 1
  assign CH2_TXDATA_in[39] = (CH2_TXDATA[39] === 1'bz) || CH2_TXDATA_delay[39]; // rv 1
  assign CH2_TXDATA_in[3] = (CH2_TXDATA[3] === 1'bz) || CH2_TXDATA_delay[3]; // rv 1
  assign CH2_TXDATA_in[40] = (CH2_TXDATA[40] === 1'bz) || CH2_TXDATA_delay[40]; // rv 1
  assign CH2_TXDATA_in[41] = (CH2_TXDATA[41] === 1'bz) || CH2_TXDATA_delay[41]; // rv 1
  assign CH2_TXDATA_in[42] = (CH2_TXDATA[42] === 1'bz) || CH2_TXDATA_delay[42]; // rv 1
  assign CH2_TXDATA_in[43] = (CH2_TXDATA[43] === 1'bz) || CH2_TXDATA_delay[43]; // rv 1
  assign CH2_TXDATA_in[44] = (CH2_TXDATA[44] === 1'bz) || CH2_TXDATA_delay[44]; // rv 1
  assign CH2_TXDATA_in[45] = (CH2_TXDATA[45] === 1'bz) || CH2_TXDATA_delay[45]; // rv 1
  assign CH2_TXDATA_in[46] = (CH2_TXDATA[46] === 1'bz) || CH2_TXDATA_delay[46]; // rv 1
  assign CH2_TXDATA_in[47] = (CH2_TXDATA[47] === 1'bz) || CH2_TXDATA_delay[47]; // rv 1
  assign CH2_TXDATA_in[48] = (CH2_TXDATA[48] === 1'bz) || CH2_TXDATA_delay[48]; // rv 1
  assign CH2_TXDATA_in[49] = (CH2_TXDATA[49] === 1'bz) || CH2_TXDATA_delay[49]; // rv 1
  assign CH2_TXDATA_in[4] = (CH2_TXDATA[4] === 1'bz) || CH2_TXDATA_delay[4]; // rv 1
  assign CH2_TXDATA_in[50] = (CH2_TXDATA[50] === 1'bz) || CH2_TXDATA_delay[50]; // rv 1
  assign CH2_TXDATA_in[51] = (CH2_TXDATA[51] === 1'bz) || CH2_TXDATA_delay[51]; // rv 1
  assign CH2_TXDATA_in[52] = (CH2_TXDATA[52] === 1'bz) || CH2_TXDATA_delay[52]; // rv 1
  assign CH2_TXDATA_in[53] = (CH2_TXDATA[53] === 1'bz) || CH2_TXDATA_delay[53]; // rv 1
  assign CH2_TXDATA_in[54] = (CH2_TXDATA[54] === 1'bz) || CH2_TXDATA_delay[54]; // rv 1
  assign CH2_TXDATA_in[55] = (CH2_TXDATA[55] === 1'bz) || CH2_TXDATA_delay[55]; // rv 1
  assign CH2_TXDATA_in[56] = (CH2_TXDATA[56] === 1'bz) || CH2_TXDATA_delay[56]; // rv 1
  assign CH2_TXDATA_in[57] = (CH2_TXDATA[57] === 1'bz) || CH2_TXDATA_delay[57]; // rv 1
  assign CH2_TXDATA_in[58] = (CH2_TXDATA[58] === 1'bz) || CH2_TXDATA_delay[58]; // rv 1
  assign CH2_TXDATA_in[59] = (CH2_TXDATA[59] === 1'bz) || CH2_TXDATA_delay[59]; // rv 1
  assign CH2_TXDATA_in[5] = (CH2_TXDATA[5] === 1'bz) || CH2_TXDATA_delay[5]; // rv 1
  assign CH2_TXDATA_in[60] = (CH2_TXDATA[60] === 1'bz) || CH2_TXDATA_delay[60]; // rv 1
  assign CH2_TXDATA_in[61] = (CH2_TXDATA[61] === 1'bz) || CH2_TXDATA_delay[61]; // rv 1
  assign CH2_TXDATA_in[62] = (CH2_TXDATA[62] === 1'bz) || CH2_TXDATA_delay[62]; // rv 1
  assign CH2_TXDATA_in[63] = (CH2_TXDATA[63] === 1'bz) || CH2_TXDATA_delay[63]; // rv 1
  assign CH2_TXDATA_in[64] = (CH2_TXDATA[64] === 1'bz) || CH2_TXDATA_delay[64]; // rv 1
  assign CH2_TXDATA_in[65] = (CH2_TXDATA[65] === 1'bz) || CH2_TXDATA_delay[65]; // rv 1
  assign CH2_TXDATA_in[66] = (CH2_TXDATA[66] === 1'bz) || CH2_TXDATA_delay[66]; // rv 1
  assign CH2_TXDATA_in[67] = (CH2_TXDATA[67] === 1'bz) || CH2_TXDATA_delay[67]; // rv 1
  assign CH2_TXDATA_in[68] = (CH2_TXDATA[68] === 1'bz) || CH2_TXDATA_delay[68]; // rv 1
  assign CH2_TXDATA_in[69] = (CH2_TXDATA[69] === 1'bz) || CH2_TXDATA_delay[69]; // rv 1
  assign CH2_TXDATA_in[6] = (CH2_TXDATA[6] === 1'bz) || CH2_TXDATA_delay[6]; // rv 1
  assign CH2_TXDATA_in[70] = (CH2_TXDATA[70] === 1'bz) || CH2_TXDATA_delay[70]; // rv 1
  assign CH2_TXDATA_in[71] = (CH2_TXDATA[71] === 1'bz) || CH2_TXDATA_delay[71]; // rv 1
  assign CH2_TXDATA_in[72] = (CH2_TXDATA[72] === 1'bz) || CH2_TXDATA_delay[72]; // rv 1
  assign CH2_TXDATA_in[73] = (CH2_TXDATA[73] === 1'bz) || CH2_TXDATA_delay[73]; // rv 1
  assign CH2_TXDATA_in[74] = (CH2_TXDATA[74] === 1'bz) || CH2_TXDATA_delay[74]; // rv 1
  assign CH2_TXDATA_in[75] = (CH2_TXDATA[75] === 1'bz) || CH2_TXDATA_delay[75]; // rv 1
  assign CH2_TXDATA_in[76] = (CH2_TXDATA[76] === 1'bz) || CH2_TXDATA_delay[76]; // rv 1
  assign CH2_TXDATA_in[77] = (CH2_TXDATA[77] === 1'bz) || CH2_TXDATA_delay[77]; // rv 1
  assign CH2_TXDATA_in[78] = (CH2_TXDATA[78] === 1'bz) || CH2_TXDATA_delay[78]; // rv 1
  assign CH2_TXDATA_in[79] = (CH2_TXDATA[79] === 1'bz) || CH2_TXDATA_delay[79]; // rv 1
  assign CH2_TXDATA_in[7] = (CH2_TXDATA[7] === 1'bz) || CH2_TXDATA_delay[7]; // rv 1
  assign CH2_TXDATA_in[80] = (CH2_TXDATA[80] === 1'bz) || CH2_TXDATA_delay[80]; // rv 1
  assign CH2_TXDATA_in[81] = (CH2_TXDATA[81] === 1'bz) || CH2_TXDATA_delay[81]; // rv 1
  assign CH2_TXDATA_in[82] = (CH2_TXDATA[82] === 1'bz) || CH2_TXDATA_delay[82]; // rv 1
  assign CH2_TXDATA_in[83] = (CH2_TXDATA[83] === 1'bz) || CH2_TXDATA_delay[83]; // rv 1
  assign CH2_TXDATA_in[84] = (CH2_TXDATA[84] === 1'bz) || CH2_TXDATA_delay[84]; // rv 1
  assign CH2_TXDATA_in[85] = (CH2_TXDATA[85] === 1'bz) || CH2_TXDATA_delay[85]; // rv 1
  assign CH2_TXDATA_in[86] = (CH2_TXDATA[86] === 1'bz) || CH2_TXDATA_delay[86]; // rv 1
  assign CH2_TXDATA_in[87] = (CH2_TXDATA[87] === 1'bz) || CH2_TXDATA_delay[87]; // rv 1
  assign CH2_TXDATA_in[88] = (CH2_TXDATA[88] === 1'bz) || CH2_TXDATA_delay[88]; // rv 1
  assign CH2_TXDATA_in[89] = (CH2_TXDATA[89] === 1'bz) || CH2_TXDATA_delay[89]; // rv 1
  assign CH2_TXDATA_in[8] = (CH2_TXDATA[8] === 1'bz) || CH2_TXDATA_delay[8]; // rv 1
  assign CH2_TXDATA_in[90] = (CH2_TXDATA[90] === 1'bz) || CH2_TXDATA_delay[90]; // rv 1
  assign CH2_TXDATA_in[91] = (CH2_TXDATA[91] === 1'bz) || CH2_TXDATA_delay[91]; // rv 1
  assign CH2_TXDATA_in[92] = (CH2_TXDATA[92] === 1'bz) || CH2_TXDATA_delay[92]; // rv 1
  assign CH2_TXDATA_in[93] = (CH2_TXDATA[93] === 1'bz) || CH2_TXDATA_delay[93]; // rv 1
  assign CH2_TXDATA_in[94] = (CH2_TXDATA[94] === 1'bz) || CH2_TXDATA_delay[94]; // rv 1
  assign CH2_TXDATA_in[95] = (CH2_TXDATA[95] === 1'bz) || CH2_TXDATA_delay[95]; // rv 1
  assign CH2_TXDATA_in[96] = (CH2_TXDATA[96] === 1'bz) || CH2_TXDATA_delay[96]; // rv 1
  assign CH2_TXDATA_in[97] = (CH2_TXDATA[97] === 1'bz) || CH2_TXDATA_delay[97]; // rv 1
  assign CH2_TXDATA_in[98] = (CH2_TXDATA[98] === 1'bz) || CH2_TXDATA_delay[98]; // rv 1
  assign CH2_TXDATA_in[99] = (CH2_TXDATA[99] === 1'bz) || CH2_TXDATA_delay[99]; // rv 1
  assign CH2_TXDATA_in[9] = (CH2_TXDATA[9] === 1'bz) || CH2_TXDATA_delay[9]; // rv 1
  assign CH3_TXDATA_in[0] = (CH3_TXDATA[0] === 1'bz) || CH3_TXDATA_delay[0]; // rv 1
  assign CH3_TXDATA_in[100] = (CH3_TXDATA[100] === 1'bz) || CH3_TXDATA_delay[100]; // rv 1
  assign CH3_TXDATA_in[101] = (CH3_TXDATA[101] === 1'bz) || CH3_TXDATA_delay[101]; // rv 1
  assign CH3_TXDATA_in[102] = (CH3_TXDATA[102] === 1'bz) || CH3_TXDATA_delay[102]; // rv 1
  assign CH3_TXDATA_in[103] = (CH3_TXDATA[103] === 1'bz) || CH3_TXDATA_delay[103]; // rv 1
  assign CH3_TXDATA_in[104] = (CH3_TXDATA[104] === 1'bz) || CH3_TXDATA_delay[104]; // rv 1
  assign CH3_TXDATA_in[105] = (CH3_TXDATA[105] === 1'bz) || CH3_TXDATA_delay[105]; // rv 1
  assign CH3_TXDATA_in[106] = (CH3_TXDATA[106] === 1'bz) || CH3_TXDATA_delay[106]; // rv 1
  assign CH3_TXDATA_in[107] = (CH3_TXDATA[107] === 1'bz) || CH3_TXDATA_delay[107]; // rv 1
  assign CH3_TXDATA_in[108] = (CH3_TXDATA[108] === 1'bz) || CH3_TXDATA_delay[108]; // rv 1
  assign CH3_TXDATA_in[109] = (CH3_TXDATA[109] === 1'bz) || CH3_TXDATA_delay[109]; // rv 1
  assign CH3_TXDATA_in[10] = (CH3_TXDATA[10] === 1'bz) || CH3_TXDATA_delay[10]; // rv 1
  assign CH3_TXDATA_in[110] = (CH3_TXDATA[110] === 1'bz) || CH3_TXDATA_delay[110]; // rv 1
  assign CH3_TXDATA_in[111] = (CH3_TXDATA[111] === 1'bz) || CH3_TXDATA_delay[111]; // rv 1
  assign CH3_TXDATA_in[112] = (CH3_TXDATA[112] === 1'bz) || CH3_TXDATA_delay[112]; // rv 1
  assign CH3_TXDATA_in[113] = (CH3_TXDATA[113] === 1'bz) || CH3_TXDATA_delay[113]; // rv 1
  assign CH3_TXDATA_in[114] = (CH3_TXDATA[114] === 1'bz) || CH3_TXDATA_delay[114]; // rv 1
  assign CH3_TXDATA_in[115] = (CH3_TXDATA[115] === 1'bz) || CH3_TXDATA_delay[115]; // rv 1
  assign CH3_TXDATA_in[116] = (CH3_TXDATA[116] === 1'bz) || CH3_TXDATA_delay[116]; // rv 1
  assign CH3_TXDATA_in[117] = (CH3_TXDATA[117] === 1'bz) || CH3_TXDATA_delay[117]; // rv 1
  assign CH3_TXDATA_in[118] = (CH3_TXDATA[118] === 1'bz) || CH3_TXDATA_delay[118]; // rv 1
  assign CH3_TXDATA_in[119] = (CH3_TXDATA[119] === 1'bz) || CH3_TXDATA_delay[119]; // rv 1
  assign CH3_TXDATA_in[11] = (CH3_TXDATA[11] === 1'bz) || CH3_TXDATA_delay[11]; // rv 1
  assign CH3_TXDATA_in[120] = (CH3_TXDATA[120] === 1'bz) || CH3_TXDATA_delay[120]; // rv 1
  assign CH3_TXDATA_in[121] = (CH3_TXDATA[121] === 1'bz) || CH3_TXDATA_delay[121]; // rv 1
  assign CH3_TXDATA_in[122] = (CH3_TXDATA[122] === 1'bz) || CH3_TXDATA_delay[122]; // rv 1
  assign CH3_TXDATA_in[123] = (CH3_TXDATA[123] === 1'bz) || CH3_TXDATA_delay[123]; // rv 1
  assign CH3_TXDATA_in[124] = (CH3_TXDATA[124] === 1'bz) || CH3_TXDATA_delay[124]; // rv 1
  assign CH3_TXDATA_in[125] = (CH3_TXDATA[125] === 1'bz) || CH3_TXDATA_delay[125]; // rv 1
  assign CH3_TXDATA_in[126] = (CH3_TXDATA[126] === 1'bz) || CH3_TXDATA_delay[126]; // rv 1
  assign CH3_TXDATA_in[127] = (CH3_TXDATA[127] === 1'bz) || CH3_TXDATA_delay[127]; // rv 1
  assign CH3_TXDATA_in[12] = (CH3_TXDATA[12] === 1'bz) || CH3_TXDATA_delay[12]; // rv 1
  assign CH3_TXDATA_in[13] = (CH3_TXDATA[13] === 1'bz) || CH3_TXDATA_delay[13]; // rv 1
  assign CH3_TXDATA_in[14] = (CH3_TXDATA[14] === 1'bz) || CH3_TXDATA_delay[14]; // rv 1
  assign CH3_TXDATA_in[15] = (CH3_TXDATA[15] === 1'bz) || CH3_TXDATA_delay[15]; // rv 1
  assign CH3_TXDATA_in[16] = (CH3_TXDATA[16] === 1'bz) || CH3_TXDATA_delay[16]; // rv 1
  assign CH3_TXDATA_in[17] = (CH3_TXDATA[17] === 1'bz) || CH3_TXDATA_delay[17]; // rv 1
  assign CH3_TXDATA_in[18] = (CH3_TXDATA[18] === 1'bz) || CH3_TXDATA_delay[18]; // rv 1
  assign CH3_TXDATA_in[19] = (CH3_TXDATA[19] === 1'bz) || CH3_TXDATA_delay[19]; // rv 1
  assign CH3_TXDATA_in[1] = (CH3_TXDATA[1] === 1'bz) || CH3_TXDATA_delay[1]; // rv 1
  assign CH3_TXDATA_in[20] = (CH3_TXDATA[20] === 1'bz) || CH3_TXDATA_delay[20]; // rv 1
  assign CH3_TXDATA_in[21] = (CH3_TXDATA[21] === 1'bz) || CH3_TXDATA_delay[21]; // rv 1
  assign CH3_TXDATA_in[22] = (CH3_TXDATA[22] === 1'bz) || CH3_TXDATA_delay[22]; // rv 1
  assign CH3_TXDATA_in[23] = (CH3_TXDATA[23] === 1'bz) || CH3_TXDATA_delay[23]; // rv 1
  assign CH3_TXDATA_in[24] = (CH3_TXDATA[24] === 1'bz) || CH3_TXDATA_delay[24]; // rv 1
  assign CH3_TXDATA_in[25] = (CH3_TXDATA[25] === 1'bz) || CH3_TXDATA_delay[25]; // rv 1
  assign CH3_TXDATA_in[26] = (CH3_TXDATA[26] === 1'bz) || CH3_TXDATA_delay[26]; // rv 1
  assign CH3_TXDATA_in[27] = (CH3_TXDATA[27] === 1'bz) || CH3_TXDATA_delay[27]; // rv 1
  assign CH3_TXDATA_in[28] = (CH3_TXDATA[28] === 1'bz) || CH3_TXDATA_delay[28]; // rv 1
  assign CH3_TXDATA_in[29] = (CH3_TXDATA[29] === 1'bz) || CH3_TXDATA_delay[29]; // rv 1
  assign CH3_TXDATA_in[2] = (CH3_TXDATA[2] === 1'bz) || CH3_TXDATA_delay[2]; // rv 1
  assign CH3_TXDATA_in[30] = (CH3_TXDATA[30] === 1'bz) || CH3_TXDATA_delay[30]; // rv 1
  assign CH3_TXDATA_in[31] = (CH3_TXDATA[31] === 1'bz) || CH3_TXDATA_delay[31]; // rv 1
  assign CH3_TXDATA_in[32] = (CH3_TXDATA[32] === 1'bz) || CH3_TXDATA_delay[32]; // rv 1
  assign CH3_TXDATA_in[33] = (CH3_TXDATA[33] === 1'bz) || CH3_TXDATA_delay[33]; // rv 1
  assign CH3_TXDATA_in[34] = (CH3_TXDATA[34] === 1'bz) || CH3_TXDATA_delay[34]; // rv 1
  assign CH3_TXDATA_in[35] = (CH3_TXDATA[35] === 1'bz) || CH3_TXDATA_delay[35]; // rv 1
  assign CH3_TXDATA_in[36] = (CH3_TXDATA[36] === 1'bz) || CH3_TXDATA_delay[36]; // rv 1
  assign CH3_TXDATA_in[37] = (CH3_TXDATA[37] === 1'bz) || CH3_TXDATA_delay[37]; // rv 1
  assign CH3_TXDATA_in[38] = (CH3_TXDATA[38] === 1'bz) || CH3_TXDATA_delay[38]; // rv 1
  assign CH3_TXDATA_in[39] = (CH3_TXDATA[39] === 1'bz) || CH3_TXDATA_delay[39]; // rv 1
  assign CH3_TXDATA_in[3] = (CH3_TXDATA[3] === 1'bz) || CH3_TXDATA_delay[3]; // rv 1
  assign CH3_TXDATA_in[40] = (CH3_TXDATA[40] === 1'bz) || CH3_TXDATA_delay[40]; // rv 1
  assign CH3_TXDATA_in[41] = (CH3_TXDATA[41] === 1'bz) || CH3_TXDATA_delay[41]; // rv 1
  assign CH3_TXDATA_in[42] = (CH3_TXDATA[42] === 1'bz) || CH3_TXDATA_delay[42]; // rv 1
  assign CH3_TXDATA_in[43] = (CH3_TXDATA[43] === 1'bz) || CH3_TXDATA_delay[43]; // rv 1
  assign CH3_TXDATA_in[44] = (CH3_TXDATA[44] === 1'bz) || CH3_TXDATA_delay[44]; // rv 1
  assign CH3_TXDATA_in[45] = (CH3_TXDATA[45] === 1'bz) || CH3_TXDATA_delay[45]; // rv 1
  assign CH3_TXDATA_in[46] = (CH3_TXDATA[46] === 1'bz) || CH3_TXDATA_delay[46]; // rv 1
  assign CH3_TXDATA_in[47] = (CH3_TXDATA[47] === 1'bz) || CH3_TXDATA_delay[47]; // rv 1
  assign CH3_TXDATA_in[48] = (CH3_TXDATA[48] === 1'bz) || CH3_TXDATA_delay[48]; // rv 1
  assign CH3_TXDATA_in[49] = (CH3_TXDATA[49] === 1'bz) || CH3_TXDATA_delay[49]; // rv 1
  assign CH3_TXDATA_in[4] = (CH3_TXDATA[4] === 1'bz) || CH3_TXDATA_delay[4]; // rv 1
  assign CH3_TXDATA_in[50] = (CH3_TXDATA[50] === 1'bz) || CH3_TXDATA_delay[50]; // rv 1
  assign CH3_TXDATA_in[51] = (CH3_TXDATA[51] === 1'bz) || CH3_TXDATA_delay[51]; // rv 1
  assign CH3_TXDATA_in[52] = (CH3_TXDATA[52] === 1'bz) || CH3_TXDATA_delay[52]; // rv 1
  assign CH3_TXDATA_in[53] = (CH3_TXDATA[53] === 1'bz) || CH3_TXDATA_delay[53]; // rv 1
  assign CH3_TXDATA_in[54] = (CH3_TXDATA[54] === 1'bz) || CH3_TXDATA_delay[54]; // rv 1
  assign CH3_TXDATA_in[55] = (CH3_TXDATA[55] === 1'bz) || CH3_TXDATA_delay[55]; // rv 1
  assign CH3_TXDATA_in[56] = (CH3_TXDATA[56] === 1'bz) || CH3_TXDATA_delay[56]; // rv 1
  assign CH3_TXDATA_in[57] = (CH3_TXDATA[57] === 1'bz) || CH3_TXDATA_delay[57]; // rv 1
  assign CH3_TXDATA_in[58] = (CH3_TXDATA[58] === 1'bz) || CH3_TXDATA_delay[58]; // rv 1
  assign CH3_TXDATA_in[59] = (CH3_TXDATA[59] === 1'bz) || CH3_TXDATA_delay[59]; // rv 1
  assign CH3_TXDATA_in[5] = (CH3_TXDATA[5] === 1'bz) || CH3_TXDATA_delay[5]; // rv 1
  assign CH3_TXDATA_in[60] = (CH3_TXDATA[60] === 1'bz) || CH3_TXDATA_delay[60]; // rv 1
  assign CH3_TXDATA_in[61] = (CH3_TXDATA[61] === 1'bz) || CH3_TXDATA_delay[61]; // rv 1
  assign CH3_TXDATA_in[62] = (CH3_TXDATA[62] === 1'bz) || CH3_TXDATA_delay[62]; // rv 1
  assign CH3_TXDATA_in[63] = (CH3_TXDATA[63] === 1'bz) || CH3_TXDATA_delay[63]; // rv 1
  assign CH3_TXDATA_in[64] = (CH3_TXDATA[64] === 1'bz) || CH3_TXDATA_delay[64]; // rv 1
  assign CH3_TXDATA_in[65] = (CH3_TXDATA[65] === 1'bz) || CH3_TXDATA_delay[65]; // rv 1
  assign CH3_TXDATA_in[66] = (CH3_TXDATA[66] === 1'bz) || CH3_TXDATA_delay[66]; // rv 1
  assign CH3_TXDATA_in[67] = (CH3_TXDATA[67] === 1'bz) || CH3_TXDATA_delay[67]; // rv 1
  assign CH3_TXDATA_in[68] = (CH3_TXDATA[68] === 1'bz) || CH3_TXDATA_delay[68]; // rv 1
  assign CH3_TXDATA_in[69] = (CH3_TXDATA[69] === 1'bz) || CH3_TXDATA_delay[69]; // rv 1
  assign CH3_TXDATA_in[6] = (CH3_TXDATA[6] === 1'bz) || CH3_TXDATA_delay[6]; // rv 1
  assign CH3_TXDATA_in[70] = (CH3_TXDATA[70] === 1'bz) || CH3_TXDATA_delay[70]; // rv 1
  assign CH3_TXDATA_in[71] = (CH3_TXDATA[71] === 1'bz) || CH3_TXDATA_delay[71]; // rv 1
  assign CH3_TXDATA_in[72] = (CH3_TXDATA[72] === 1'bz) || CH3_TXDATA_delay[72]; // rv 1
  assign CH3_TXDATA_in[73] = (CH3_TXDATA[73] === 1'bz) || CH3_TXDATA_delay[73]; // rv 1
  assign CH3_TXDATA_in[74] = (CH3_TXDATA[74] === 1'bz) || CH3_TXDATA_delay[74]; // rv 1
  assign CH3_TXDATA_in[75] = (CH3_TXDATA[75] === 1'bz) || CH3_TXDATA_delay[75]; // rv 1
  assign CH3_TXDATA_in[76] = (CH3_TXDATA[76] === 1'bz) || CH3_TXDATA_delay[76]; // rv 1
  assign CH3_TXDATA_in[77] = (CH3_TXDATA[77] === 1'bz) || CH3_TXDATA_delay[77]; // rv 1
  assign CH3_TXDATA_in[78] = (CH3_TXDATA[78] === 1'bz) || CH3_TXDATA_delay[78]; // rv 1
  assign CH3_TXDATA_in[79] = (CH3_TXDATA[79] === 1'bz) || CH3_TXDATA_delay[79]; // rv 1
  assign CH3_TXDATA_in[7] = (CH3_TXDATA[7] === 1'bz) || CH3_TXDATA_delay[7]; // rv 1
  assign CH3_TXDATA_in[80] = (CH3_TXDATA[80] === 1'bz) || CH3_TXDATA_delay[80]; // rv 1
  assign CH3_TXDATA_in[81] = (CH3_TXDATA[81] === 1'bz) || CH3_TXDATA_delay[81]; // rv 1
  assign CH3_TXDATA_in[82] = (CH3_TXDATA[82] === 1'bz) || CH3_TXDATA_delay[82]; // rv 1
  assign CH3_TXDATA_in[83] = (CH3_TXDATA[83] === 1'bz) || CH3_TXDATA_delay[83]; // rv 1
  assign CH3_TXDATA_in[84] = (CH3_TXDATA[84] === 1'bz) || CH3_TXDATA_delay[84]; // rv 1
  assign CH3_TXDATA_in[85] = (CH3_TXDATA[85] === 1'bz) || CH3_TXDATA_delay[85]; // rv 1
  assign CH3_TXDATA_in[86] = (CH3_TXDATA[86] === 1'bz) || CH3_TXDATA_delay[86]; // rv 1
  assign CH3_TXDATA_in[87] = (CH3_TXDATA[87] === 1'bz) || CH3_TXDATA_delay[87]; // rv 1
  assign CH3_TXDATA_in[88] = (CH3_TXDATA[88] === 1'bz) || CH3_TXDATA_delay[88]; // rv 1
  assign CH3_TXDATA_in[89] = (CH3_TXDATA[89] === 1'bz) || CH3_TXDATA_delay[89]; // rv 1
  assign CH3_TXDATA_in[8] = (CH3_TXDATA[8] === 1'bz) || CH3_TXDATA_delay[8]; // rv 1
  assign CH3_TXDATA_in[90] = (CH3_TXDATA[90] === 1'bz) || CH3_TXDATA_delay[90]; // rv 1
  assign CH3_TXDATA_in[91] = (CH3_TXDATA[91] === 1'bz) || CH3_TXDATA_delay[91]; // rv 1
  assign CH3_TXDATA_in[92] = (CH3_TXDATA[92] === 1'bz) || CH3_TXDATA_delay[92]; // rv 1
  assign CH3_TXDATA_in[93] = (CH3_TXDATA[93] === 1'bz) || CH3_TXDATA_delay[93]; // rv 1
  assign CH3_TXDATA_in[94] = (CH3_TXDATA[94] === 1'bz) || CH3_TXDATA_delay[94]; // rv 1
  assign CH3_TXDATA_in[95] = (CH3_TXDATA[95] === 1'bz) || CH3_TXDATA_delay[95]; // rv 1
  assign CH3_TXDATA_in[96] = (CH3_TXDATA[96] === 1'bz) || CH3_TXDATA_delay[96]; // rv 1
  assign CH3_TXDATA_in[97] = (CH3_TXDATA[97] === 1'bz) || CH3_TXDATA_delay[97]; // rv 1
  assign CH3_TXDATA_in[98] = (CH3_TXDATA[98] === 1'bz) || CH3_TXDATA_delay[98]; // rv 1
  assign CH3_TXDATA_in[99] = (CH3_TXDATA[99] === 1'bz) || CH3_TXDATA_delay[99]; // rv 1
  assign CH3_TXDATA_in[9] = (CH3_TXDATA[9] === 1'bz) || CH3_TXDATA_delay[9]; // rv 1
  assign CTRLRSVDIN0_in[0] = (CTRLRSVDIN0[0] === 1'bz) || CTRLRSVDIN0_delay[0]; // rv 1
  assign CTRLRSVDIN0_in[10] = (CTRLRSVDIN0[10] === 1'bz) || CTRLRSVDIN0_delay[10]; // rv 1
  assign CTRLRSVDIN0_in[11] = (CTRLRSVDIN0[11] === 1'bz) || CTRLRSVDIN0_delay[11]; // rv 1
  assign CTRLRSVDIN0_in[12] = (CTRLRSVDIN0[12] === 1'bz) || CTRLRSVDIN0_delay[12]; // rv 1
  assign CTRLRSVDIN0_in[13] = (CTRLRSVDIN0[13] === 1'bz) || CTRLRSVDIN0_delay[13]; // rv 1
  assign CTRLRSVDIN0_in[14] = (CTRLRSVDIN0[14] === 1'bz) || CTRLRSVDIN0_delay[14]; // rv 1
  assign CTRLRSVDIN0_in[15] = (CTRLRSVDIN0[15] === 1'bz) || CTRLRSVDIN0_delay[15]; // rv 1
  assign CTRLRSVDIN0_in[1] = (CTRLRSVDIN0[1] === 1'bz) || CTRLRSVDIN0_delay[1]; // rv 1
  assign CTRLRSVDIN0_in[2] = (CTRLRSVDIN0[2] === 1'bz) || CTRLRSVDIN0_delay[2]; // rv 1
  assign CTRLRSVDIN0_in[3] = (CTRLRSVDIN0[3] === 1'bz) || CTRLRSVDIN0_delay[3]; // rv 1
  assign CTRLRSVDIN0_in[4] = (CTRLRSVDIN0[4] === 1'bz) || CTRLRSVDIN0_delay[4]; // rv 1
  assign CTRLRSVDIN0_in[5] = (CTRLRSVDIN0[5] === 1'bz) || CTRLRSVDIN0_delay[5]; // rv 1
  assign CTRLRSVDIN0_in[6] = (CTRLRSVDIN0[6] === 1'bz) || CTRLRSVDIN0_delay[6]; // rv 1
  assign CTRLRSVDIN0_in[7] = (CTRLRSVDIN0[7] === 1'bz) || CTRLRSVDIN0_delay[7]; // rv 1
  assign CTRLRSVDIN0_in[8] = (CTRLRSVDIN0[8] === 1'bz) || CTRLRSVDIN0_delay[8]; // rv 1
  assign CTRLRSVDIN0_in[9] = (CTRLRSVDIN0[9] === 1'bz) || CTRLRSVDIN0_delay[9]; // rv 1
  assign XPIPE_GT_PIPECLK_1_in = XPIPE_GT_PIPECLK_1_delay;
  assign XPIPE_GT_PIPECLK_in = XPIPE_GT_PIPECLK_delay;
`else
  assign CH0_TXDATA_in[0] = (CH0_TXDATA[0] === 1'bz) || CH0_TXDATA[0]; // rv 1
  assign CH0_TXDATA_in[100] = (CH0_TXDATA[100] === 1'bz) || CH0_TXDATA[100]; // rv 1
  assign CH0_TXDATA_in[101] = (CH0_TXDATA[101] === 1'bz) || CH0_TXDATA[101]; // rv 1
  assign CH0_TXDATA_in[102] = (CH0_TXDATA[102] === 1'bz) || CH0_TXDATA[102]; // rv 1
  assign CH0_TXDATA_in[103] = (CH0_TXDATA[103] === 1'bz) || CH0_TXDATA[103]; // rv 1
  assign CH0_TXDATA_in[104] = (CH0_TXDATA[104] === 1'bz) || CH0_TXDATA[104]; // rv 1
  assign CH0_TXDATA_in[105] = (CH0_TXDATA[105] === 1'bz) || CH0_TXDATA[105]; // rv 1
  assign CH0_TXDATA_in[106] = (CH0_TXDATA[106] === 1'bz) || CH0_TXDATA[106]; // rv 1
  assign CH0_TXDATA_in[107] = (CH0_TXDATA[107] === 1'bz) || CH0_TXDATA[107]; // rv 1
  assign CH0_TXDATA_in[108] = (CH0_TXDATA[108] === 1'bz) || CH0_TXDATA[108]; // rv 1
  assign CH0_TXDATA_in[109] = (CH0_TXDATA[109] === 1'bz) || CH0_TXDATA[109]; // rv 1
  assign CH0_TXDATA_in[10] = (CH0_TXDATA[10] === 1'bz) || CH0_TXDATA[10]; // rv 1
  assign CH0_TXDATA_in[110] = (CH0_TXDATA[110] === 1'bz) || CH0_TXDATA[110]; // rv 1
  assign CH0_TXDATA_in[111] = (CH0_TXDATA[111] === 1'bz) || CH0_TXDATA[111]; // rv 1
  assign CH0_TXDATA_in[112] = (CH0_TXDATA[112] === 1'bz) || CH0_TXDATA[112]; // rv 1
  assign CH0_TXDATA_in[113] = (CH0_TXDATA[113] === 1'bz) || CH0_TXDATA[113]; // rv 1
  assign CH0_TXDATA_in[114] = (CH0_TXDATA[114] === 1'bz) || CH0_TXDATA[114]; // rv 1
  assign CH0_TXDATA_in[115] = (CH0_TXDATA[115] === 1'bz) || CH0_TXDATA[115]; // rv 1
  assign CH0_TXDATA_in[116] = (CH0_TXDATA[116] === 1'bz) || CH0_TXDATA[116]; // rv 1
  assign CH0_TXDATA_in[117] = (CH0_TXDATA[117] === 1'bz) || CH0_TXDATA[117]; // rv 1
  assign CH0_TXDATA_in[118] = (CH0_TXDATA[118] === 1'bz) || CH0_TXDATA[118]; // rv 1
  assign CH0_TXDATA_in[119] = (CH0_TXDATA[119] === 1'bz) || CH0_TXDATA[119]; // rv 1
  assign CH0_TXDATA_in[11] = (CH0_TXDATA[11] === 1'bz) || CH0_TXDATA[11]; // rv 1
  assign CH0_TXDATA_in[120] = (CH0_TXDATA[120] === 1'bz) || CH0_TXDATA[120]; // rv 1
  assign CH0_TXDATA_in[121] = (CH0_TXDATA[121] === 1'bz) || CH0_TXDATA[121]; // rv 1
  assign CH0_TXDATA_in[122] = (CH0_TXDATA[122] === 1'bz) || CH0_TXDATA[122]; // rv 1
  assign CH0_TXDATA_in[123] = (CH0_TXDATA[123] === 1'bz) || CH0_TXDATA[123]; // rv 1
  assign CH0_TXDATA_in[124] = (CH0_TXDATA[124] === 1'bz) || CH0_TXDATA[124]; // rv 1
  assign CH0_TXDATA_in[125] = (CH0_TXDATA[125] === 1'bz) || CH0_TXDATA[125]; // rv 1
  assign CH0_TXDATA_in[126] = (CH0_TXDATA[126] === 1'bz) || CH0_TXDATA[126]; // rv 1
  assign CH0_TXDATA_in[127] = (CH0_TXDATA[127] === 1'bz) || CH0_TXDATA[127]; // rv 1
  assign CH0_TXDATA_in[12] = (CH0_TXDATA[12] === 1'bz) || CH0_TXDATA[12]; // rv 1
  assign CH0_TXDATA_in[13] = (CH0_TXDATA[13] === 1'bz) || CH0_TXDATA[13]; // rv 1
  assign CH0_TXDATA_in[14] = (CH0_TXDATA[14] === 1'bz) || CH0_TXDATA[14]; // rv 1
  assign CH0_TXDATA_in[15] = (CH0_TXDATA[15] === 1'bz) || CH0_TXDATA[15]; // rv 1
  assign CH0_TXDATA_in[16] = (CH0_TXDATA[16] === 1'bz) || CH0_TXDATA[16]; // rv 1
  assign CH0_TXDATA_in[17] = (CH0_TXDATA[17] === 1'bz) || CH0_TXDATA[17]; // rv 1
  assign CH0_TXDATA_in[18] = (CH0_TXDATA[18] === 1'bz) || CH0_TXDATA[18]; // rv 1
  assign CH0_TXDATA_in[19] = (CH0_TXDATA[19] === 1'bz) || CH0_TXDATA[19]; // rv 1
  assign CH0_TXDATA_in[1] = (CH0_TXDATA[1] === 1'bz) || CH0_TXDATA[1]; // rv 1
  assign CH0_TXDATA_in[20] = (CH0_TXDATA[20] === 1'bz) || CH0_TXDATA[20]; // rv 1
  assign CH0_TXDATA_in[21] = (CH0_TXDATA[21] === 1'bz) || CH0_TXDATA[21]; // rv 1
  assign CH0_TXDATA_in[22] = (CH0_TXDATA[22] === 1'bz) || CH0_TXDATA[22]; // rv 1
  assign CH0_TXDATA_in[23] = (CH0_TXDATA[23] === 1'bz) || CH0_TXDATA[23]; // rv 1
  assign CH0_TXDATA_in[24] = (CH0_TXDATA[24] === 1'bz) || CH0_TXDATA[24]; // rv 1
  assign CH0_TXDATA_in[25] = (CH0_TXDATA[25] === 1'bz) || CH0_TXDATA[25]; // rv 1
  assign CH0_TXDATA_in[26] = (CH0_TXDATA[26] === 1'bz) || CH0_TXDATA[26]; // rv 1
  assign CH0_TXDATA_in[27] = (CH0_TXDATA[27] === 1'bz) || CH0_TXDATA[27]; // rv 1
  assign CH0_TXDATA_in[28] = (CH0_TXDATA[28] === 1'bz) || CH0_TXDATA[28]; // rv 1
  assign CH0_TXDATA_in[29] = (CH0_TXDATA[29] === 1'bz) || CH0_TXDATA[29]; // rv 1
  assign CH0_TXDATA_in[2] = (CH0_TXDATA[2] === 1'bz) || CH0_TXDATA[2]; // rv 1
  assign CH0_TXDATA_in[30] = (CH0_TXDATA[30] === 1'bz) || CH0_TXDATA[30]; // rv 1
  assign CH0_TXDATA_in[31] = (CH0_TXDATA[31] === 1'bz) || CH0_TXDATA[31]; // rv 1
  assign CH0_TXDATA_in[32] = (CH0_TXDATA[32] === 1'bz) || CH0_TXDATA[32]; // rv 1
  assign CH0_TXDATA_in[33] = (CH0_TXDATA[33] === 1'bz) || CH0_TXDATA[33]; // rv 1
  assign CH0_TXDATA_in[34] = (CH0_TXDATA[34] === 1'bz) || CH0_TXDATA[34]; // rv 1
  assign CH0_TXDATA_in[35] = (CH0_TXDATA[35] === 1'bz) || CH0_TXDATA[35]; // rv 1
  assign CH0_TXDATA_in[36] = (CH0_TXDATA[36] === 1'bz) || CH0_TXDATA[36]; // rv 1
  assign CH0_TXDATA_in[37] = (CH0_TXDATA[37] === 1'bz) || CH0_TXDATA[37]; // rv 1
  assign CH0_TXDATA_in[38] = (CH0_TXDATA[38] === 1'bz) || CH0_TXDATA[38]; // rv 1
  assign CH0_TXDATA_in[39] = (CH0_TXDATA[39] === 1'bz) || CH0_TXDATA[39]; // rv 1
  assign CH0_TXDATA_in[3] = (CH0_TXDATA[3] === 1'bz) || CH0_TXDATA[3]; // rv 1
  assign CH0_TXDATA_in[40] = (CH0_TXDATA[40] === 1'bz) || CH0_TXDATA[40]; // rv 1
  assign CH0_TXDATA_in[41] = (CH0_TXDATA[41] === 1'bz) || CH0_TXDATA[41]; // rv 1
  assign CH0_TXDATA_in[42] = (CH0_TXDATA[42] === 1'bz) || CH0_TXDATA[42]; // rv 1
  assign CH0_TXDATA_in[43] = (CH0_TXDATA[43] === 1'bz) || CH0_TXDATA[43]; // rv 1
  assign CH0_TXDATA_in[44] = (CH0_TXDATA[44] === 1'bz) || CH0_TXDATA[44]; // rv 1
  assign CH0_TXDATA_in[45] = (CH0_TXDATA[45] === 1'bz) || CH0_TXDATA[45]; // rv 1
  assign CH0_TXDATA_in[46] = (CH0_TXDATA[46] === 1'bz) || CH0_TXDATA[46]; // rv 1
  assign CH0_TXDATA_in[47] = (CH0_TXDATA[47] === 1'bz) || CH0_TXDATA[47]; // rv 1
  assign CH0_TXDATA_in[48] = (CH0_TXDATA[48] === 1'bz) || CH0_TXDATA[48]; // rv 1
  assign CH0_TXDATA_in[49] = (CH0_TXDATA[49] === 1'bz) || CH0_TXDATA[49]; // rv 1
  assign CH0_TXDATA_in[4] = (CH0_TXDATA[4] === 1'bz) || CH0_TXDATA[4]; // rv 1
  assign CH0_TXDATA_in[50] = (CH0_TXDATA[50] === 1'bz) || CH0_TXDATA[50]; // rv 1
  assign CH0_TXDATA_in[51] = (CH0_TXDATA[51] === 1'bz) || CH0_TXDATA[51]; // rv 1
  assign CH0_TXDATA_in[52] = (CH0_TXDATA[52] === 1'bz) || CH0_TXDATA[52]; // rv 1
  assign CH0_TXDATA_in[53] = (CH0_TXDATA[53] === 1'bz) || CH0_TXDATA[53]; // rv 1
  assign CH0_TXDATA_in[54] = (CH0_TXDATA[54] === 1'bz) || CH0_TXDATA[54]; // rv 1
  assign CH0_TXDATA_in[55] = (CH0_TXDATA[55] === 1'bz) || CH0_TXDATA[55]; // rv 1
  assign CH0_TXDATA_in[56] = (CH0_TXDATA[56] === 1'bz) || CH0_TXDATA[56]; // rv 1
  assign CH0_TXDATA_in[57] = (CH0_TXDATA[57] === 1'bz) || CH0_TXDATA[57]; // rv 1
  assign CH0_TXDATA_in[58] = (CH0_TXDATA[58] === 1'bz) || CH0_TXDATA[58]; // rv 1
  assign CH0_TXDATA_in[59] = (CH0_TXDATA[59] === 1'bz) || CH0_TXDATA[59]; // rv 1
  assign CH0_TXDATA_in[5] = (CH0_TXDATA[5] === 1'bz) || CH0_TXDATA[5]; // rv 1
  assign CH0_TXDATA_in[60] = (CH0_TXDATA[60] === 1'bz) || CH0_TXDATA[60]; // rv 1
  assign CH0_TXDATA_in[61] = (CH0_TXDATA[61] === 1'bz) || CH0_TXDATA[61]; // rv 1
  assign CH0_TXDATA_in[62] = (CH0_TXDATA[62] === 1'bz) || CH0_TXDATA[62]; // rv 1
  assign CH0_TXDATA_in[63] = (CH0_TXDATA[63] === 1'bz) || CH0_TXDATA[63]; // rv 1
  assign CH0_TXDATA_in[64] = (CH0_TXDATA[64] === 1'bz) || CH0_TXDATA[64]; // rv 1
  assign CH0_TXDATA_in[65] = (CH0_TXDATA[65] === 1'bz) || CH0_TXDATA[65]; // rv 1
  assign CH0_TXDATA_in[66] = (CH0_TXDATA[66] === 1'bz) || CH0_TXDATA[66]; // rv 1
  assign CH0_TXDATA_in[67] = (CH0_TXDATA[67] === 1'bz) || CH0_TXDATA[67]; // rv 1
  assign CH0_TXDATA_in[68] = (CH0_TXDATA[68] === 1'bz) || CH0_TXDATA[68]; // rv 1
  assign CH0_TXDATA_in[69] = (CH0_TXDATA[69] === 1'bz) || CH0_TXDATA[69]; // rv 1
  assign CH0_TXDATA_in[6] = (CH0_TXDATA[6] === 1'bz) || CH0_TXDATA[6]; // rv 1
  assign CH0_TXDATA_in[70] = (CH0_TXDATA[70] === 1'bz) || CH0_TXDATA[70]; // rv 1
  assign CH0_TXDATA_in[71] = (CH0_TXDATA[71] === 1'bz) || CH0_TXDATA[71]; // rv 1
  assign CH0_TXDATA_in[72] = (CH0_TXDATA[72] === 1'bz) || CH0_TXDATA[72]; // rv 1
  assign CH0_TXDATA_in[73] = (CH0_TXDATA[73] === 1'bz) || CH0_TXDATA[73]; // rv 1
  assign CH0_TXDATA_in[74] = (CH0_TXDATA[74] === 1'bz) || CH0_TXDATA[74]; // rv 1
  assign CH0_TXDATA_in[75] = (CH0_TXDATA[75] === 1'bz) || CH0_TXDATA[75]; // rv 1
  assign CH0_TXDATA_in[76] = (CH0_TXDATA[76] === 1'bz) || CH0_TXDATA[76]; // rv 1
  assign CH0_TXDATA_in[77] = (CH0_TXDATA[77] === 1'bz) || CH0_TXDATA[77]; // rv 1
  assign CH0_TXDATA_in[78] = (CH0_TXDATA[78] === 1'bz) || CH0_TXDATA[78]; // rv 1
  assign CH0_TXDATA_in[79] = (CH0_TXDATA[79] === 1'bz) || CH0_TXDATA[79]; // rv 1
  assign CH0_TXDATA_in[7] = (CH0_TXDATA[7] === 1'bz) || CH0_TXDATA[7]; // rv 1
  assign CH0_TXDATA_in[80] = (CH0_TXDATA[80] === 1'bz) || CH0_TXDATA[80]; // rv 1
  assign CH0_TXDATA_in[81] = (CH0_TXDATA[81] === 1'bz) || CH0_TXDATA[81]; // rv 1
  assign CH0_TXDATA_in[82] = (CH0_TXDATA[82] === 1'bz) || CH0_TXDATA[82]; // rv 1
  assign CH0_TXDATA_in[83] = (CH0_TXDATA[83] === 1'bz) || CH0_TXDATA[83]; // rv 1
  assign CH0_TXDATA_in[84] = (CH0_TXDATA[84] === 1'bz) || CH0_TXDATA[84]; // rv 1
  assign CH0_TXDATA_in[85] = (CH0_TXDATA[85] === 1'bz) || CH0_TXDATA[85]; // rv 1
  assign CH0_TXDATA_in[86] = (CH0_TXDATA[86] === 1'bz) || CH0_TXDATA[86]; // rv 1
  assign CH0_TXDATA_in[87] = (CH0_TXDATA[87] === 1'bz) || CH0_TXDATA[87]; // rv 1
  assign CH0_TXDATA_in[88] = (CH0_TXDATA[88] === 1'bz) || CH0_TXDATA[88]; // rv 1
  assign CH0_TXDATA_in[89] = (CH0_TXDATA[89] === 1'bz) || CH0_TXDATA[89]; // rv 1
  assign CH0_TXDATA_in[8] = (CH0_TXDATA[8] === 1'bz) || CH0_TXDATA[8]; // rv 1
  assign CH0_TXDATA_in[90] = (CH0_TXDATA[90] === 1'bz) || CH0_TXDATA[90]; // rv 1
  assign CH0_TXDATA_in[91] = (CH0_TXDATA[91] === 1'bz) || CH0_TXDATA[91]; // rv 1
  assign CH0_TXDATA_in[92] = (CH0_TXDATA[92] === 1'bz) || CH0_TXDATA[92]; // rv 1
  assign CH0_TXDATA_in[93] = (CH0_TXDATA[93] === 1'bz) || CH0_TXDATA[93]; // rv 1
  assign CH0_TXDATA_in[94] = (CH0_TXDATA[94] === 1'bz) || CH0_TXDATA[94]; // rv 1
  assign CH0_TXDATA_in[95] = (CH0_TXDATA[95] === 1'bz) || CH0_TXDATA[95]; // rv 1
  assign CH0_TXDATA_in[96] = (CH0_TXDATA[96] === 1'bz) || CH0_TXDATA[96]; // rv 1
  assign CH0_TXDATA_in[97] = (CH0_TXDATA[97] === 1'bz) || CH0_TXDATA[97]; // rv 1
  assign CH0_TXDATA_in[98] = (CH0_TXDATA[98] === 1'bz) || CH0_TXDATA[98]; // rv 1
  assign CH0_TXDATA_in[99] = (CH0_TXDATA[99] === 1'bz) || CH0_TXDATA[99]; // rv 1
  assign CH0_TXDATA_in[9] = (CH0_TXDATA[9] === 1'bz) || CH0_TXDATA[9]; // rv 1
  assign CH1_TXDATA_in[0] = (CH1_TXDATA[0] === 1'bz) || CH1_TXDATA[0]; // rv 1
  assign CH1_TXDATA_in[100] = (CH1_TXDATA[100] === 1'bz) || CH1_TXDATA[100]; // rv 1
  assign CH1_TXDATA_in[101] = (CH1_TXDATA[101] === 1'bz) || CH1_TXDATA[101]; // rv 1
  assign CH1_TXDATA_in[102] = (CH1_TXDATA[102] === 1'bz) || CH1_TXDATA[102]; // rv 1
  assign CH1_TXDATA_in[103] = (CH1_TXDATA[103] === 1'bz) || CH1_TXDATA[103]; // rv 1
  assign CH1_TXDATA_in[104] = (CH1_TXDATA[104] === 1'bz) || CH1_TXDATA[104]; // rv 1
  assign CH1_TXDATA_in[105] = (CH1_TXDATA[105] === 1'bz) || CH1_TXDATA[105]; // rv 1
  assign CH1_TXDATA_in[106] = (CH1_TXDATA[106] === 1'bz) || CH1_TXDATA[106]; // rv 1
  assign CH1_TXDATA_in[107] = (CH1_TXDATA[107] === 1'bz) || CH1_TXDATA[107]; // rv 1
  assign CH1_TXDATA_in[108] = (CH1_TXDATA[108] === 1'bz) || CH1_TXDATA[108]; // rv 1
  assign CH1_TXDATA_in[109] = (CH1_TXDATA[109] === 1'bz) || CH1_TXDATA[109]; // rv 1
  assign CH1_TXDATA_in[10] = (CH1_TXDATA[10] === 1'bz) || CH1_TXDATA[10]; // rv 1
  assign CH1_TXDATA_in[110] = (CH1_TXDATA[110] === 1'bz) || CH1_TXDATA[110]; // rv 1
  assign CH1_TXDATA_in[111] = (CH1_TXDATA[111] === 1'bz) || CH1_TXDATA[111]; // rv 1
  assign CH1_TXDATA_in[112] = (CH1_TXDATA[112] === 1'bz) || CH1_TXDATA[112]; // rv 1
  assign CH1_TXDATA_in[113] = (CH1_TXDATA[113] === 1'bz) || CH1_TXDATA[113]; // rv 1
  assign CH1_TXDATA_in[114] = (CH1_TXDATA[114] === 1'bz) || CH1_TXDATA[114]; // rv 1
  assign CH1_TXDATA_in[115] = (CH1_TXDATA[115] === 1'bz) || CH1_TXDATA[115]; // rv 1
  assign CH1_TXDATA_in[116] = (CH1_TXDATA[116] === 1'bz) || CH1_TXDATA[116]; // rv 1
  assign CH1_TXDATA_in[117] = (CH1_TXDATA[117] === 1'bz) || CH1_TXDATA[117]; // rv 1
  assign CH1_TXDATA_in[118] = (CH1_TXDATA[118] === 1'bz) || CH1_TXDATA[118]; // rv 1
  assign CH1_TXDATA_in[119] = (CH1_TXDATA[119] === 1'bz) || CH1_TXDATA[119]; // rv 1
  assign CH1_TXDATA_in[11] = (CH1_TXDATA[11] === 1'bz) || CH1_TXDATA[11]; // rv 1
  assign CH1_TXDATA_in[120] = (CH1_TXDATA[120] === 1'bz) || CH1_TXDATA[120]; // rv 1
  assign CH1_TXDATA_in[121] = (CH1_TXDATA[121] === 1'bz) || CH1_TXDATA[121]; // rv 1
  assign CH1_TXDATA_in[122] = (CH1_TXDATA[122] === 1'bz) || CH1_TXDATA[122]; // rv 1
  assign CH1_TXDATA_in[123] = (CH1_TXDATA[123] === 1'bz) || CH1_TXDATA[123]; // rv 1
  assign CH1_TXDATA_in[124] = (CH1_TXDATA[124] === 1'bz) || CH1_TXDATA[124]; // rv 1
  assign CH1_TXDATA_in[125] = (CH1_TXDATA[125] === 1'bz) || CH1_TXDATA[125]; // rv 1
  assign CH1_TXDATA_in[126] = (CH1_TXDATA[126] === 1'bz) || CH1_TXDATA[126]; // rv 1
  assign CH1_TXDATA_in[127] = (CH1_TXDATA[127] === 1'bz) || CH1_TXDATA[127]; // rv 1
  assign CH1_TXDATA_in[12] = (CH1_TXDATA[12] === 1'bz) || CH1_TXDATA[12]; // rv 1
  assign CH1_TXDATA_in[13] = (CH1_TXDATA[13] === 1'bz) || CH1_TXDATA[13]; // rv 1
  assign CH1_TXDATA_in[14] = (CH1_TXDATA[14] === 1'bz) || CH1_TXDATA[14]; // rv 1
  assign CH1_TXDATA_in[15] = (CH1_TXDATA[15] === 1'bz) || CH1_TXDATA[15]; // rv 1
  assign CH1_TXDATA_in[16] = (CH1_TXDATA[16] === 1'bz) || CH1_TXDATA[16]; // rv 1
  assign CH1_TXDATA_in[17] = (CH1_TXDATA[17] === 1'bz) || CH1_TXDATA[17]; // rv 1
  assign CH1_TXDATA_in[18] = (CH1_TXDATA[18] === 1'bz) || CH1_TXDATA[18]; // rv 1
  assign CH1_TXDATA_in[19] = (CH1_TXDATA[19] === 1'bz) || CH1_TXDATA[19]; // rv 1
  assign CH1_TXDATA_in[1] = (CH1_TXDATA[1] === 1'bz) || CH1_TXDATA[1]; // rv 1
  assign CH1_TXDATA_in[20] = (CH1_TXDATA[20] === 1'bz) || CH1_TXDATA[20]; // rv 1
  assign CH1_TXDATA_in[21] = (CH1_TXDATA[21] === 1'bz) || CH1_TXDATA[21]; // rv 1
  assign CH1_TXDATA_in[22] = (CH1_TXDATA[22] === 1'bz) || CH1_TXDATA[22]; // rv 1
  assign CH1_TXDATA_in[23] = (CH1_TXDATA[23] === 1'bz) || CH1_TXDATA[23]; // rv 1
  assign CH1_TXDATA_in[24] = (CH1_TXDATA[24] === 1'bz) || CH1_TXDATA[24]; // rv 1
  assign CH1_TXDATA_in[25] = (CH1_TXDATA[25] === 1'bz) || CH1_TXDATA[25]; // rv 1
  assign CH1_TXDATA_in[26] = (CH1_TXDATA[26] === 1'bz) || CH1_TXDATA[26]; // rv 1
  assign CH1_TXDATA_in[27] = (CH1_TXDATA[27] === 1'bz) || CH1_TXDATA[27]; // rv 1
  assign CH1_TXDATA_in[28] = (CH1_TXDATA[28] === 1'bz) || CH1_TXDATA[28]; // rv 1
  assign CH1_TXDATA_in[29] = (CH1_TXDATA[29] === 1'bz) || CH1_TXDATA[29]; // rv 1
  assign CH1_TXDATA_in[2] = (CH1_TXDATA[2] === 1'bz) || CH1_TXDATA[2]; // rv 1
  assign CH1_TXDATA_in[30] = (CH1_TXDATA[30] === 1'bz) || CH1_TXDATA[30]; // rv 1
  assign CH1_TXDATA_in[31] = (CH1_TXDATA[31] === 1'bz) || CH1_TXDATA[31]; // rv 1
  assign CH1_TXDATA_in[32] = (CH1_TXDATA[32] === 1'bz) || CH1_TXDATA[32]; // rv 1
  assign CH1_TXDATA_in[33] = (CH1_TXDATA[33] === 1'bz) || CH1_TXDATA[33]; // rv 1
  assign CH1_TXDATA_in[34] = (CH1_TXDATA[34] === 1'bz) || CH1_TXDATA[34]; // rv 1
  assign CH1_TXDATA_in[35] = (CH1_TXDATA[35] === 1'bz) || CH1_TXDATA[35]; // rv 1
  assign CH1_TXDATA_in[36] = (CH1_TXDATA[36] === 1'bz) || CH1_TXDATA[36]; // rv 1
  assign CH1_TXDATA_in[37] = (CH1_TXDATA[37] === 1'bz) || CH1_TXDATA[37]; // rv 1
  assign CH1_TXDATA_in[38] = (CH1_TXDATA[38] === 1'bz) || CH1_TXDATA[38]; // rv 1
  assign CH1_TXDATA_in[39] = (CH1_TXDATA[39] === 1'bz) || CH1_TXDATA[39]; // rv 1
  assign CH1_TXDATA_in[3] = (CH1_TXDATA[3] === 1'bz) || CH1_TXDATA[3]; // rv 1
  assign CH1_TXDATA_in[40] = (CH1_TXDATA[40] === 1'bz) || CH1_TXDATA[40]; // rv 1
  assign CH1_TXDATA_in[41] = (CH1_TXDATA[41] === 1'bz) || CH1_TXDATA[41]; // rv 1
  assign CH1_TXDATA_in[42] = (CH1_TXDATA[42] === 1'bz) || CH1_TXDATA[42]; // rv 1
  assign CH1_TXDATA_in[43] = (CH1_TXDATA[43] === 1'bz) || CH1_TXDATA[43]; // rv 1
  assign CH1_TXDATA_in[44] = (CH1_TXDATA[44] === 1'bz) || CH1_TXDATA[44]; // rv 1
  assign CH1_TXDATA_in[45] = (CH1_TXDATA[45] === 1'bz) || CH1_TXDATA[45]; // rv 1
  assign CH1_TXDATA_in[46] = (CH1_TXDATA[46] === 1'bz) || CH1_TXDATA[46]; // rv 1
  assign CH1_TXDATA_in[47] = (CH1_TXDATA[47] === 1'bz) || CH1_TXDATA[47]; // rv 1
  assign CH1_TXDATA_in[48] = (CH1_TXDATA[48] === 1'bz) || CH1_TXDATA[48]; // rv 1
  assign CH1_TXDATA_in[49] = (CH1_TXDATA[49] === 1'bz) || CH1_TXDATA[49]; // rv 1
  assign CH1_TXDATA_in[4] = (CH1_TXDATA[4] === 1'bz) || CH1_TXDATA[4]; // rv 1
  assign CH1_TXDATA_in[50] = (CH1_TXDATA[50] === 1'bz) || CH1_TXDATA[50]; // rv 1
  assign CH1_TXDATA_in[51] = (CH1_TXDATA[51] === 1'bz) || CH1_TXDATA[51]; // rv 1
  assign CH1_TXDATA_in[52] = (CH1_TXDATA[52] === 1'bz) || CH1_TXDATA[52]; // rv 1
  assign CH1_TXDATA_in[53] = (CH1_TXDATA[53] === 1'bz) || CH1_TXDATA[53]; // rv 1
  assign CH1_TXDATA_in[54] = (CH1_TXDATA[54] === 1'bz) || CH1_TXDATA[54]; // rv 1
  assign CH1_TXDATA_in[55] = (CH1_TXDATA[55] === 1'bz) || CH1_TXDATA[55]; // rv 1
  assign CH1_TXDATA_in[56] = (CH1_TXDATA[56] === 1'bz) || CH1_TXDATA[56]; // rv 1
  assign CH1_TXDATA_in[57] = (CH1_TXDATA[57] === 1'bz) || CH1_TXDATA[57]; // rv 1
  assign CH1_TXDATA_in[58] = (CH1_TXDATA[58] === 1'bz) || CH1_TXDATA[58]; // rv 1
  assign CH1_TXDATA_in[59] = (CH1_TXDATA[59] === 1'bz) || CH1_TXDATA[59]; // rv 1
  assign CH1_TXDATA_in[5] = (CH1_TXDATA[5] === 1'bz) || CH1_TXDATA[5]; // rv 1
  assign CH1_TXDATA_in[60] = (CH1_TXDATA[60] === 1'bz) || CH1_TXDATA[60]; // rv 1
  assign CH1_TXDATA_in[61] = (CH1_TXDATA[61] === 1'bz) || CH1_TXDATA[61]; // rv 1
  assign CH1_TXDATA_in[62] = (CH1_TXDATA[62] === 1'bz) || CH1_TXDATA[62]; // rv 1
  assign CH1_TXDATA_in[63] = (CH1_TXDATA[63] === 1'bz) || CH1_TXDATA[63]; // rv 1
  assign CH1_TXDATA_in[64] = (CH1_TXDATA[64] === 1'bz) || CH1_TXDATA[64]; // rv 1
  assign CH1_TXDATA_in[65] = (CH1_TXDATA[65] === 1'bz) || CH1_TXDATA[65]; // rv 1
  assign CH1_TXDATA_in[66] = (CH1_TXDATA[66] === 1'bz) || CH1_TXDATA[66]; // rv 1
  assign CH1_TXDATA_in[67] = (CH1_TXDATA[67] === 1'bz) || CH1_TXDATA[67]; // rv 1
  assign CH1_TXDATA_in[68] = (CH1_TXDATA[68] === 1'bz) || CH1_TXDATA[68]; // rv 1
  assign CH1_TXDATA_in[69] = (CH1_TXDATA[69] === 1'bz) || CH1_TXDATA[69]; // rv 1
  assign CH1_TXDATA_in[6] = (CH1_TXDATA[6] === 1'bz) || CH1_TXDATA[6]; // rv 1
  assign CH1_TXDATA_in[70] = (CH1_TXDATA[70] === 1'bz) || CH1_TXDATA[70]; // rv 1
  assign CH1_TXDATA_in[71] = (CH1_TXDATA[71] === 1'bz) || CH1_TXDATA[71]; // rv 1
  assign CH1_TXDATA_in[72] = (CH1_TXDATA[72] === 1'bz) || CH1_TXDATA[72]; // rv 1
  assign CH1_TXDATA_in[73] = (CH1_TXDATA[73] === 1'bz) || CH1_TXDATA[73]; // rv 1
  assign CH1_TXDATA_in[74] = (CH1_TXDATA[74] === 1'bz) || CH1_TXDATA[74]; // rv 1
  assign CH1_TXDATA_in[75] = (CH1_TXDATA[75] === 1'bz) || CH1_TXDATA[75]; // rv 1
  assign CH1_TXDATA_in[76] = (CH1_TXDATA[76] === 1'bz) || CH1_TXDATA[76]; // rv 1
  assign CH1_TXDATA_in[77] = (CH1_TXDATA[77] === 1'bz) || CH1_TXDATA[77]; // rv 1
  assign CH1_TXDATA_in[78] = (CH1_TXDATA[78] === 1'bz) || CH1_TXDATA[78]; // rv 1
  assign CH1_TXDATA_in[79] = (CH1_TXDATA[79] === 1'bz) || CH1_TXDATA[79]; // rv 1
  assign CH1_TXDATA_in[7] = (CH1_TXDATA[7] === 1'bz) || CH1_TXDATA[7]; // rv 1
  assign CH1_TXDATA_in[80] = (CH1_TXDATA[80] === 1'bz) || CH1_TXDATA[80]; // rv 1
  assign CH1_TXDATA_in[81] = (CH1_TXDATA[81] === 1'bz) || CH1_TXDATA[81]; // rv 1
  assign CH1_TXDATA_in[82] = (CH1_TXDATA[82] === 1'bz) || CH1_TXDATA[82]; // rv 1
  assign CH1_TXDATA_in[83] = (CH1_TXDATA[83] === 1'bz) || CH1_TXDATA[83]; // rv 1
  assign CH1_TXDATA_in[84] = (CH1_TXDATA[84] === 1'bz) || CH1_TXDATA[84]; // rv 1
  assign CH1_TXDATA_in[85] = (CH1_TXDATA[85] === 1'bz) || CH1_TXDATA[85]; // rv 1
  assign CH1_TXDATA_in[86] = (CH1_TXDATA[86] === 1'bz) || CH1_TXDATA[86]; // rv 1
  assign CH1_TXDATA_in[87] = (CH1_TXDATA[87] === 1'bz) || CH1_TXDATA[87]; // rv 1
  assign CH1_TXDATA_in[88] = (CH1_TXDATA[88] === 1'bz) || CH1_TXDATA[88]; // rv 1
  assign CH1_TXDATA_in[89] = (CH1_TXDATA[89] === 1'bz) || CH1_TXDATA[89]; // rv 1
  assign CH1_TXDATA_in[8] = (CH1_TXDATA[8] === 1'bz) || CH1_TXDATA[8]; // rv 1
  assign CH1_TXDATA_in[90] = (CH1_TXDATA[90] === 1'bz) || CH1_TXDATA[90]; // rv 1
  assign CH1_TXDATA_in[91] = (CH1_TXDATA[91] === 1'bz) || CH1_TXDATA[91]; // rv 1
  assign CH1_TXDATA_in[92] = (CH1_TXDATA[92] === 1'bz) || CH1_TXDATA[92]; // rv 1
  assign CH1_TXDATA_in[93] = (CH1_TXDATA[93] === 1'bz) || CH1_TXDATA[93]; // rv 1
  assign CH1_TXDATA_in[94] = (CH1_TXDATA[94] === 1'bz) || CH1_TXDATA[94]; // rv 1
  assign CH1_TXDATA_in[95] = (CH1_TXDATA[95] === 1'bz) || CH1_TXDATA[95]; // rv 1
  assign CH1_TXDATA_in[96] = (CH1_TXDATA[96] === 1'bz) || CH1_TXDATA[96]; // rv 1
  assign CH1_TXDATA_in[97] = (CH1_TXDATA[97] === 1'bz) || CH1_TXDATA[97]; // rv 1
  assign CH1_TXDATA_in[98] = (CH1_TXDATA[98] === 1'bz) || CH1_TXDATA[98]; // rv 1
  assign CH1_TXDATA_in[99] = (CH1_TXDATA[99] === 1'bz) || CH1_TXDATA[99]; // rv 1
  assign CH1_TXDATA_in[9] = (CH1_TXDATA[9] === 1'bz) || CH1_TXDATA[9]; // rv 1
  assign CH2_TXDATA_in[0] = (CH2_TXDATA[0] === 1'bz) || CH2_TXDATA[0]; // rv 1
  assign CH2_TXDATA_in[100] = (CH2_TXDATA[100] === 1'bz) || CH2_TXDATA[100]; // rv 1
  assign CH2_TXDATA_in[101] = (CH2_TXDATA[101] === 1'bz) || CH2_TXDATA[101]; // rv 1
  assign CH2_TXDATA_in[102] = (CH2_TXDATA[102] === 1'bz) || CH2_TXDATA[102]; // rv 1
  assign CH2_TXDATA_in[103] = (CH2_TXDATA[103] === 1'bz) || CH2_TXDATA[103]; // rv 1
  assign CH2_TXDATA_in[104] = (CH2_TXDATA[104] === 1'bz) || CH2_TXDATA[104]; // rv 1
  assign CH2_TXDATA_in[105] = (CH2_TXDATA[105] === 1'bz) || CH2_TXDATA[105]; // rv 1
  assign CH2_TXDATA_in[106] = (CH2_TXDATA[106] === 1'bz) || CH2_TXDATA[106]; // rv 1
  assign CH2_TXDATA_in[107] = (CH2_TXDATA[107] === 1'bz) || CH2_TXDATA[107]; // rv 1
  assign CH2_TXDATA_in[108] = (CH2_TXDATA[108] === 1'bz) || CH2_TXDATA[108]; // rv 1
  assign CH2_TXDATA_in[109] = (CH2_TXDATA[109] === 1'bz) || CH2_TXDATA[109]; // rv 1
  assign CH2_TXDATA_in[10] = (CH2_TXDATA[10] === 1'bz) || CH2_TXDATA[10]; // rv 1
  assign CH2_TXDATA_in[110] = (CH2_TXDATA[110] === 1'bz) || CH2_TXDATA[110]; // rv 1
  assign CH2_TXDATA_in[111] = (CH2_TXDATA[111] === 1'bz) || CH2_TXDATA[111]; // rv 1
  assign CH2_TXDATA_in[112] = (CH2_TXDATA[112] === 1'bz) || CH2_TXDATA[112]; // rv 1
  assign CH2_TXDATA_in[113] = (CH2_TXDATA[113] === 1'bz) || CH2_TXDATA[113]; // rv 1
  assign CH2_TXDATA_in[114] = (CH2_TXDATA[114] === 1'bz) || CH2_TXDATA[114]; // rv 1
  assign CH2_TXDATA_in[115] = (CH2_TXDATA[115] === 1'bz) || CH2_TXDATA[115]; // rv 1
  assign CH2_TXDATA_in[116] = (CH2_TXDATA[116] === 1'bz) || CH2_TXDATA[116]; // rv 1
  assign CH2_TXDATA_in[117] = (CH2_TXDATA[117] === 1'bz) || CH2_TXDATA[117]; // rv 1
  assign CH2_TXDATA_in[118] = (CH2_TXDATA[118] === 1'bz) || CH2_TXDATA[118]; // rv 1
  assign CH2_TXDATA_in[119] = (CH2_TXDATA[119] === 1'bz) || CH2_TXDATA[119]; // rv 1
  assign CH2_TXDATA_in[11] = (CH2_TXDATA[11] === 1'bz) || CH2_TXDATA[11]; // rv 1
  assign CH2_TXDATA_in[120] = (CH2_TXDATA[120] === 1'bz) || CH2_TXDATA[120]; // rv 1
  assign CH2_TXDATA_in[121] = (CH2_TXDATA[121] === 1'bz) || CH2_TXDATA[121]; // rv 1
  assign CH2_TXDATA_in[122] = (CH2_TXDATA[122] === 1'bz) || CH2_TXDATA[122]; // rv 1
  assign CH2_TXDATA_in[123] = (CH2_TXDATA[123] === 1'bz) || CH2_TXDATA[123]; // rv 1
  assign CH2_TXDATA_in[124] = (CH2_TXDATA[124] === 1'bz) || CH2_TXDATA[124]; // rv 1
  assign CH2_TXDATA_in[125] = (CH2_TXDATA[125] === 1'bz) || CH2_TXDATA[125]; // rv 1
  assign CH2_TXDATA_in[126] = (CH2_TXDATA[126] === 1'bz) || CH2_TXDATA[126]; // rv 1
  assign CH2_TXDATA_in[127] = (CH2_TXDATA[127] === 1'bz) || CH2_TXDATA[127]; // rv 1
  assign CH2_TXDATA_in[12] = (CH2_TXDATA[12] === 1'bz) || CH2_TXDATA[12]; // rv 1
  assign CH2_TXDATA_in[13] = (CH2_TXDATA[13] === 1'bz) || CH2_TXDATA[13]; // rv 1
  assign CH2_TXDATA_in[14] = (CH2_TXDATA[14] === 1'bz) || CH2_TXDATA[14]; // rv 1
  assign CH2_TXDATA_in[15] = (CH2_TXDATA[15] === 1'bz) || CH2_TXDATA[15]; // rv 1
  assign CH2_TXDATA_in[16] = (CH2_TXDATA[16] === 1'bz) || CH2_TXDATA[16]; // rv 1
  assign CH2_TXDATA_in[17] = (CH2_TXDATA[17] === 1'bz) || CH2_TXDATA[17]; // rv 1
  assign CH2_TXDATA_in[18] = (CH2_TXDATA[18] === 1'bz) || CH2_TXDATA[18]; // rv 1
  assign CH2_TXDATA_in[19] = (CH2_TXDATA[19] === 1'bz) || CH2_TXDATA[19]; // rv 1
  assign CH2_TXDATA_in[1] = (CH2_TXDATA[1] === 1'bz) || CH2_TXDATA[1]; // rv 1
  assign CH2_TXDATA_in[20] = (CH2_TXDATA[20] === 1'bz) || CH2_TXDATA[20]; // rv 1
  assign CH2_TXDATA_in[21] = (CH2_TXDATA[21] === 1'bz) || CH2_TXDATA[21]; // rv 1
  assign CH2_TXDATA_in[22] = (CH2_TXDATA[22] === 1'bz) || CH2_TXDATA[22]; // rv 1
  assign CH2_TXDATA_in[23] = (CH2_TXDATA[23] === 1'bz) || CH2_TXDATA[23]; // rv 1
  assign CH2_TXDATA_in[24] = (CH2_TXDATA[24] === 1'bz) || CH2_TXDATA[24]; // rv 1
  assign CH2_TXDATA_in[25] = (CH2_TXDATA[25] === 1'bz) || CH2_TXDATA[25]; // rv 1
  assign CH2_TXDATA_in[26] = (CH2_TXDATA[26] === 1'bz) || CH2_TXDATA[26]; // rv 1
  assign CH2_TXDATA_in[27] = (CH2_TXDATA[27] === 1'bz) || CH2_TXDATA[27]; // rv 1
  assign CH2_TXDATA_in[28] = (CH2_TXDATA[28] === 1'bz) || CH2_TXDATA[28]; // rv 1
  assign CH2_TXDATA_in[29] = (CH2_TXDATA[29] === 1'bz) || CH2_TXDATA[29]; // rv 1
  assign CH2_TXDATA_in[2] = (CH2_TXDATA[2] === 1'bz) || CH2_TXDATA[2]; // rv 1
  assign CH2_TXDATA_in[30] = (CH2_TXDATA[30] === 1'bz) || CH2_TXDATA[30]; // rv 1
  assign CH2_TXDATA_in[31] = (CH2_TXDATA[31] === 1'bz) || CH2_TXDATA[31]; // rv 1
  assign CH2_TXDATA_in[32] = (CH2_TXDATA[32] === 1'bz) || CH2_TXDATA[32]; // rv 1
  assign CH2_TXDATA_in[33] = (CH2_TXDATA[33] === 1'bz) || CH2_TXDATA[33]; // rv 1
  assign CH2_TXDATA_in[34] = (CH2_TXDATA[34] === 1'bz) || CH2_TXDATA[34]; // rv 1
  assign CH2_TXDATA_in[35] = (CH2_TXDATA[35] === 1'bz) || CH2_TXDATA[35]; // rv 1
  assign CH2_TXDATA_in[36] = (CH2_TXDATA[36] === 1'bz) || CH2_TXDATA[36]; // rv 1
  assign CH2_TXDATA_in[37] = (CH2_TXDATA[37] === 1'bz) || CH2_TXDATA[37]; // rv 1
  assign CH2_TXDATA_in[38] = (CH2_TXDATA[38] === 1'bz) || CH2_TXDATA[38]; // rv 1
  assign CH2_TXDATA_in[39] = (CH2_TXDATA[39] === 1'bz) || CH2_TXDATA[39]; // rv 1
  assign CH2_TXDATA_in[3] = (CH2_TXDATA[3] === 1'bz) || CH2_TXDATA[3]; // rv 1
  assign CH2_TXDATA_in[40] = (CH2_TXDATA[40] === 1'bz) || CH2_TXDATA[40]; // rv 1
  assign CH2_TXDATA_in[41] = (CH2_TXDATA[41] === 1'bz) || CH2_TXDATA[41]; // rv 1
  assign CH2_TXDATA_in[42] = (CH2_TXDATA[42] === 1'bz) || CH2_TXDATA[42]; // rv 1
  assign CH2_TXDATA_in[43] = (CH2_TXDATA[43] === 1'bz) || CH2_TXDATA[43]; // rv 1
  assign CH2_TXDATA_in[44] = (CH2_TXDATA[44] === 1'bz) || CH2_TXDATA[44]; // rv 1
  assign CH2_TXDATA_in[45] = (CH2_TXDATA[45] === 1'bz) || CH2_TXDATA[45]; // rv 1
  assign CH2_TXDATA_in[46] = (CH2_TXDATA[46] === 1'bz) || CH2_TXDATA[46]; // rv 1
  assign CH2_TXDATA_in[47] = (CH2_TXDATA[47] === 1'bz) || CH2_TXDATA[47]; // rv 1
  assign CH2_TXDATA_in[48] = (CH2_TXDATA[48] === 1'bz) || CH2_TXDATA[48]; // rv 1
  assign CH2_TXDATA_in[49] = (CH2_TXDATA[49] === 1'bz) || CH2_TXDATA[49]; // rv 1
  assign CH2_TXDATA_in[4] = (CH2_TXDATA[4] === 1'bz) || CH2_TXDATA[4]; // rv 1
  assign CH2_TXDATA_in[50] = (CH2_TXDATA[50] === 1'bz) || CH2_TXDATA[50]; // rv 1
  assign CH2_TXDATA_in[51] = (CH2_TXDATA[51] === 1'bz) || CH2_TXDATA[51]; // rv 1
  assign CH2_TXDATA_in[52] = (CH2_TXDATA[52] === 1'bz) || CH2_TXDATA[52]; // rv 1
  assign CH2_TXDATA_in[53] = (CH2_TXDATA[53] === 1'bz) || CH2_TXDATA[53]; // rv 1
  assign CH2_TXDATA_in[54] = (CH2_TXDATA[54] === 1'bz) || CH2_TXDATA[54]; // rv 1
  assign CH2_TXDATA_in[55] = (CH2_TXDATA[55] === 1'bz) || CH2_TXDATA[55]; // rv 1
  assign CH2_TXDATA_in[56] = (CH2_TXDATA[56] === 1'bz) || CH2_TXDATA[56]; // rv 1
  assign CH2_TXDATA_in[57] = (CH2_TXDATA[57] === 1'bz) || CH2_TXDATA[57]; // rv 1
  assign CH2_TXDATA_in[58] = (CH2_TXDATA[58] === 1'bz) || CH2_TXDATA[58]; // rv 1
  assign CH2_TXDATA_in[59] = (CH2_TXDATA[59] === 1'bz) || CH2_TXDATA[59]; // rv 1
  assign CH2_TXDATA_in[5] = (CH2_TXDATA[5] === 1'bz) || CH2_TXDATA[5]; // rv 1
  assign CH2_TXDATA_in[60] = (CH2_TXDATA[60] === 1'bz) || CH2_TXDATA[60]; // rv 1
  assign CH2_TXDATA_in[61] = (CH2_TXDATA[61] === 1'bz) || CH2_TXDATA[61]; // rv 1
  assign CH2_TXDATA_in[62] = (CH2_TXDATA[62] === 1'bz) || CH2_TXDATA[62]; // rv 1
  assign CH2_TXDATA_in[63] = (CH2_TXDATA[63] === 1'bz) || CH2_TXDATA[63]; // rv 1
  assign CH2_TXDATA_in[64] = (CH2_TXDATA[64] === 1'bz) || CH2_TXDATA[64]; // rv 1
  assign CH2_TXDATA_in[65] = (CH2_TXDATA[65] === 1'bz) || CH2_TXDATA[65]; // rv 1
  assign CH2_TXDATA_in[66] = (CH2_TXDATA[66] === 1'bz) || CH2_TXDATA[66]; // rv 1
  assign CH2_TXDATA_in[67] = (CH2_TXDATA[67] === 1'bz) || CH2_TXDATA[67]; // rv 1
  assign CH2_TXDATA_in[68] = (CH2_TXDATA[68] === 1'bz) || CH2_TXDATA[68]; // rv 1
  assign CH2_TXDATA_in[69] = (CH2_TXDATA[69] === 1'bz) || CH2_TXDATA[69]; // rv 1
  assign CH2_TXDATA_in[6] = (CH2_TXDATA[6] === 1'bz) || CH2_TXDATA[6]; // rv 1
  assign CH2_TXDATA_in[70] = (CH2_TXDATA[70] === 1'bz) || CH2_TXDATA[70]; // rv 1
  assign CH2_TXDATA_in[71] = (CH2_TXDATA[71] === 1'bz) || CH2_TXDATA[71]; // rv 1
  assign CH2_TXDATA_in[72] = (CH2_TXDATA[72] === 1'bz) || CH2_TXDATA[72]; // rv 1
  assign CH2_TXDATA_in[73] = (CH2_TXDATA[73] === 1'bz) || CH2_TXDATA[73]; // rv 1
  assign CH2_TXDATA_in[74] = (CH2_TXDATA[74] === 1'bz) || CH2_TXDATA[74]; // rv 1
  assign CH2_TXDATA_in[75] = (CH2_TXDATA[75] === 1'bz) || CH2_TXDATA[75]; // rv 1
  assign CH2_TXDATA_in[76] = (CH2_TXDATA[76] === 1'bz) || CH2_TXDATA[76]; // rv 1
  assign CH2_TXDATA_in[77] = (CH2_TXDATA[77] === 1'bz) || CH2_TXDATA[77]; // rv 1
  assign CH2_TXDATA_in[78] = (CH2_TXDATA[78] === 1'bz) || CH2_TXDATA[78]; // rv 1
  assign CH2_TXDATA_in[79] = (CH2_TXDATA[79] === 1'bz) || CH2_TXDATA[79]; // rv 1
  assign CH2_TXDATA_in[7] = (CH2_TXDATA[7] === 1'bz) || CH2_TXDATA[7]; // rv 1
  assign CH2_TXDATA_in[80] = (CH2_TXDATA[80] === 1'bz) || CH2_TXDATA[80]; // rv 1
  assign CH2_TXDATA_in[81] = (CH2_TXDATA[81] === 1'bz) || CH2_TXDATA[81]; // rv 1
  assign CH2_TXDATA_in[82] = (CH2_TXDATA[82] === 1'bz) || CH2_TXDATA[82]; // rv 1
  assign CH2_TXDATA_in[83] = (CH2_TXDATA[83] === 1'bz) || CH2_TXDATA[83]; // rv 1
  assign CH2_TXDATA_in[84] = (CH2_TXDATA[84] === 1'bz) || CH2_TXDATA[84]; // rv 1
  assign CH2_TXDATA_in[85] = (CH2_TXDATA[85] === 1'bz) || CH2_TXDATA[85]; // rv 1
  assign CH2_TXDATA_in[86] = (CH2_TXDATA[86] === 1'bz) || CH2_TXDATA[86]; // rv 1
  assign CH2_TXDATA_in[87] = (CH2_TXDATA[87] === 1'bz) || CH2_TXDATA[87]; // rv 1
  assign CH2_TXDATA_in[88] = (CH2_TXDATA[88] === 1'bz) || CH2_TXDATA[88]; // rv 1
  assign CH2_TXDATA_in[89] = (CH2_TXDATA[89] === 1'bz) || CH2_TXDATA[89]; // rv 1
  assign CH2_TXDATA_in[8] = (CH2_TXDATA[8] === 1'bz) || CH2_TXDATA[8]; // rv 1
  assign CH2_TXDATA_in[90] = (CH2_TXDATA[90] === 1'bz) || CH2_TXDATA[90]; // rv 1
  assign CH2_TXDATA_in[91] = (CH2_TXDATA[91] === 1'bz) || CH2_TXDATA[91]; // rv 1
  assign CH2_TXDATA_in[92] = (CH2_TXDATA[92] === 1'bz) || CH2_TXDATA[92]; // rv 1
  assign CH2_TXDATA_in[93] = (CH2_TXDATA[93] === 1'bz) || CH2_TXDATA[93]; // rv 1
  assign CH2_TXDATA_in[94] = (CH2_TXDATA[94] === 1'bz) || CH2_TXDATA[94]; // rv 1
  assign CH2_TXDATA_in[95] = (CH2_TXDATA[95] === 1'bz) || CH2_TXDATA[95]; // rv 1
  assign CH2_TXDATA_in[96] = (CH2_TXDATA[96] === 1'bz) || CH2_TXDATA[96]; // rv 1
  assign CH2_TXDATA_in[97] = (CH2_TXDATA[97] === 1'bz) || CH2_TXDATA[97]; // rv 1
  assign CH2_TXDATA_in[98] = (CH2_TXDATA[98] === 1'bz) || CH2_TXDATA[98]; // rv 1
  assign CH2_TXDATA_in[99] = (CH2_TXDATA[99] === 1'bz) || CH2_TXDATA[99]; // rv 1
  assign CH2_TXDATA_in[9] = (CH2_TXDATA[9] === 1'bz) || CH2_TXDATA[9]; // rv 1
  assign CH3_TXDATA_in[0] = (CH3_TXDATA[0] === 1'bz) || CH3_TXDATA[0]; // rv 1
  assign CH3_TXDATA_in[100] = (CH3_TXDATA[100] === 1'bz) || CH3_TXDATA[100]; // rv 1
  assign CH3_TXDATA_in[101] = (CH3_TXDATA[101] === 1'bz) || CH3_TXDATA[101]; // rv 1
  assign CH3_TXDATA_in[102] = (CH3_TXDATA[102] === 1'bz) || CH3_TXDATA[102]; // rv 1
  assign CH3_TXDATA_in[103] = (CH3_TXDATA[103] === 1'bz) || CH3_TXDATA[103]; // rv 1
  assign CH3_TXDATA_in[104] = (CH3_TXDATA[104] === 1'bz) || CH3_TXDATA[104]; // rv 1
  assign CH3_TXDATA_in[105] = (CH3_TXDATA[105] === 1'bz) || CH3_TXDATA[105]; // rv 1
  assign CH3_TXDATA_in[106] = (CH3_TXDATA[106] === 1'bz) || CH3_TXDATA[106]; // rv 1
  assign CH3_TXDATA_in[107] = (CH3_TXDATA[107] === 1'bz) || CH3_TXDATA[107]; // rv 1
  assign CH3_TXDATA_in[108] = (CH3_TXDATA[108] === 1'bz) || CH3_TXDATA[108]; // rv 1
  assign CH3_TXDATA_in[109] = (CH3_TXDATA[109] === 1'bz) || CH3_TXDATA[109]; // rv 1
  assign CH3_TXDATA_in[10] = (CH3_TXDATA[10] === 1'bz) || CH3_TXDATA[10]; // rv 1
  assign CH3_TXDATA_in[110] = (CH3_TXDATA[110] === 1'bz) || CH3_TXDATA[110]; // rv 1
  assign CH3_TXDATA_in[111] = (CH3_TXDATA[111] === 1'bz) || CH3_TXDATA[111]; // rv 1
  assign CH3_TXDATA_in[112] = (CH3_TXDATA[112] === 1'bz) || CH3_TXDATA[112]; // rv 1
  assign CH3_TXDATA_in[113] = (CH3_TXDATA[113] === 1'bz) || CH3_TXDATA[113]; // rv 1
  assign CH3_TXDATA_in[114] = (CH3_TXDATA[114] === 1'bz) || CH3_TXDATA[114]; // rv 1
  assign CH3_TXDATA_in[115] = (CH3_TXDATA[115] === 1'bz) || CH3_TXDATA[115]; // rv 1
  assign CH3_TXDATA_in[116] = (CH3_TXDATA[116] === 1'bz) || CH3_TXDATA[116]; // rv 1
  assign CH3_TXDATA_in[117] = (CH3_TXDATA[117] === 1'bz) || CH3_TXDATA[117]; // rv 1
  assign CH3_TXDATA_in[118] = (CH3_TXDATA[118] === 1'bz) || CH3_TXDATA[118]; // rv 1
  assign CH3_TXDATA_in[119] = (CH3_TXDATA[119] === 1'bz) || CH3_TXDATA[119]; // rv 1
  assign CH3_TXDATA_in[11] = (CH3_TXDATA[11] === 1'bz) || CH3_TXDATA[11]; // rv 1
  assign CH3_TXDATA_in[120] = (CH3_TXDATA[120] === 1'bz) || CH3_TXDATA[120]; // rv 1
  assign CH3_TXDATA_in[121] = (CH3_TXDATA[121] === 1'bz) || CH3_TXDATA[121]; // rv 1
  assign CH3_TXDATA_in[122] = (CH3_TXDATA[122] === 1'bz) || CH3_TXDATA[122]; // rv 1
  assign CH3_TXDATA_in[123] = (CH3_TXDATA[123] === 1'bz) || CH3_TXDATA[123]; // rv 1
  assign CH3_TXDATA_in[124] = (CH3_TXDATA[124] === 1'bz) || CH3_TXDATA[124]; // rv 1
  assign CH3_TXDATA_in[125] = (CH3_TXDATA[125] === 1'bz) || CH3_TXDATA[125]; // rv 1
  assign CH3_TXDATA_in[126] = (CH3_TXDATA[126] === 1'bz) || CH3_TXDATA[126]; // rv 1
  assign CH3_TXDATA_in[127] = (CH3_TXDATA[127] === 1'bz) || CH3_TXDATA[127]; // rv 1
  assign CH3_TXDATA_in[12] = (CH3_TXDATA[12] === 1'bz) || CH3_TXDATA[12]; // rv 1
  assign CH3_TXDATA_in[13] = (CH3_TXDATA[13] === 1'bz) || CH3_TXDATA[13]; // rv 1
  assign CH3_TXDATA_in[14] = (CH3_TXDATA[14] === 1'bz) || CH3_TXDATA[14]; // rv 1
  assign CH3_TXDATA_in[15] = (CH3_TXDATA[15] === 1'bz) || CH3_TXDATA[15]; // rv 1
  assign CH3_TXDATA_in[16] = (CH3_TXDATA[16] === 1'bz) || CH3_TXDATA[16]; // rv 1
  assign CH3_TXDATA_in[17] = (CH3_TXDATA[17] === 1'bz) || CH3_TXDATA[17]; // rv 1
  assign CH3_TXDATA_in[18] = (CH3_TXDATA[18] === 1'bz) || CH3_TXDATA[18]; // rv 1
  assign CH3_TXDATA_in[19] = (CH3_TXDATA[19] === 1'bz) || CH3_TXDATA[19]; // rv 1
  assign CH3_TXDATA_in[1] = (CH3_TXDATA[1] === 1'bz) || CH3_TXDATA[1]; // rv 1
  assign CH3_TXDATA_in[20] = (CH3_TXDATA[20] === 1'bz) || CH3_TXDATA[20]; // rv 1
  assign CH3_TXDATA_in[21] = (CH3_TXDATA[21] === 1'bz) || CH3_TXDATA[21]; // rv 1
  assign CH3_TXDATA_in[22] = (CH3_TXDATA[22] === 1'bz) || CH3_TXDATA[22]; // rv 1
  assign CH3_TXDATA_in[23] = (CH3_TXDATA[23] === 1'bz) || CH3_TXDATA[23]; // rv 1
  assign CH3_TXDATA_in[24] = (CH3_TXDATA[24] === 1'bz) || CH3_TXDATA[24]; // rv 1
  assign CH3_TXDATA_in[25] = (CH3_TXDATA[25] === 1'bz) || CH3_TXDATA[25]; // rv 1
  assign CH3_TXDATA_in[26] = (CH3_TXDATA[26] === 1'bz) || CH3_TXDATA[26]; // rv 1
  assign CH3_TXDATA_in[27] = (CH3_TXDATA[27] === 1'bz) || CH3_TXDATA[27]; // rv 1
  assign CH3_TXDATA_in[28] = (CH3_TXDATA[28] === 1'bz) || CH3_TXDATA[28]; // rv 1
  assign CH3_TXDATA_in[29] = (CH3_TXDATA[29] === 1'bz) || CH3_TXDATA[29]; // rv 1
  assign CH3_TXDATA_in[2] = (CH3_TXDATA[2] === 1'bz) || CH3_TXDATA[2]; // rv 1
  assign CH3_TXDATA_in[30] = (CH3_TXDATA[30] === 1'bz) || CH3_TXDATA[30]; // rv 1
  assign CH3_TXDATA_in[31] = (CH3_TXDATA[31] === 1'bz) || CH3_TXDATA[31]; // rv 1
  assign CH3_TXDATA_in[32] = (CH3_TXDATA[32] === 1'bz) || CH3_TXDATA[32]; // rv 1
  assign CH3_TXDATA_in[33] = (CH3_TXDATA[33] === 1'bz) || CH3_TXDATA[33]; // rv 1
  assign CH3_TXDATA_in[34] = (CH3_TXDATA[34] === 1'bz) || CH3_TXDATA[34]; // rv 1
  assign CH3_TXDATA_in[35] = (CH3_TXDATA[35] === 1'bz) || CH3_TXDATA[35]; // rv 1
  assign CH3_TXDATA_in[36] = (CH3_TXDATA[36] === 1'bz) || CH3_TXDATA[36]; // rv 1
  assign CH3_TXDATA_in[37] = (CH3_TXDATA[37] === 1'bz) || CH3_TXDATA[37]; // rv 1
  assign CH3_TXDATA_in[38] = (CH3_TXDATA[38] === 1'bz) || CH3_TXDATA[38]; // rv 1
  assign CH3_TXDATA_in[39] = (CH3_TXDATA[39] === 1'bz) || CH3_TXDATA[39]; // rv 1
  assign CH3_TXDATA_in[3] = (CH3_TXDATA[3] === 1'bz) || CH3_TXDATA[3]; // rv 1
  assign CH3_TXDATA_in[40] = (CH3_TXDATA[40] === 1'bz) || CH3_TXDATA[40]; // rv 1
  assign CH3_TXDATA_in[41] = (CH3_TXDATA[41] === 1'bz) || CH3_TXDATA[41]; // rv 1
  assign CH3_TXDATA_in[42] = (CH3_TXDATA[42] === 1'bz) || CH3_TXDATA[42]; // rv 1
  assign CH3_TXDATA_in[43] = (CH3_TXDATA[43] === 1'bz) || CH3_TXDATA[43]; // rv 1
  assign CH3_TXDATA_in[44] = (CH3_TXDATA[44] === 1'bz) || CH3_TXDATA[44]; // rv 1
  assign CH3_TXDATA_in[45] = (CH3_TXDATA[45] === 1'bz) || CH3_TXDATA[45]; // rv 1
  assign CH3_TXDATA_in[46] = (CH3_TXDATA[46] === 1'bz) || CH3_TXDATA[46]; // rv 1
  assign CH3_TXDATA_in[47] = (CH3_TXDATA[47] === 1'bz) || CH3_TXDATA[47]; // rv 1
  assign CH3_TXDATA_in[48] = (CH3_TXDATA[48] === 1'bz) || CH3_TXDATA[48]; // rv 1
  assign CH3_TXDATA_in[49] = (CH3_TXDATA[49] === 1'bz) || CH3_TXDATA[49]; // rv 1
  assign CH3_TXDATA_in[4] = (CH3_TXDATA[4] === 1'bz) || CH3_TXDATA[4]; // rv 1
  assign CH3_TXDATA_in[50] = (CH3_TXDATA[50] === 1'bz) || CH3_TXDATA[50]; // rv 1
  assign CH3_TXDATA_in[51] = (CH3_TXDATA[51] === 1'bz) || CH3_TXDATA[51]; // rv 1
  assign CH3_TXDATA_in[52] = (CH3_TXDATA[52] === 1'bz) || CH3_TXDATA[52]; // rv 1
  assign CH3_TXDATA_in[53] = (CH3_TXDATA[53] === 1'bz) || CH3_TXDATA[53]; // rv 1
  assign CH3_TXDATA_in[54] = (CH3_TXDATA[54] === 1'bz) || CH3_TXDATA[54]; // rv 1
  assign CH3_TXDATA_in[55] = (CH3_TXDATA[55] === 1'bz) || CH3_TXDATA[55]; // rv 1
  assign CH3_TXDATA_in[56] = (CH3_TXDATA[56] === 1'bz) || CH3_TXDATA[56]; // rv 1
  assign CH3_TXDATA_in[57] = (CH3_TXDATA[57] === 1'bz) || CH3_TXDATA[57]; // rv 1
  assign CH3_TXDATA_in[58] = (CH3_TXDATA[58] === 1'bz) || CH3_TXDATA[58]; // rv 1
  assign CH3_TXDATA_in[59] = (CH3_TXDATA[59] === 1'bz) || CH3_TXDATA[59]; // rv 1
  assign CH3_TXDATA_in[5] = (CH3_TXDATA[5] === 1'bz) || CH3_TXDATA[5]; // rv 1
  assign CH3_TXDATA_in[60] = (CH3_TXDATA[60] === 1'bz) || CH3_TXDATA[60]; // rv 1
  assign CH3_TXDATA_in[61] = (CH3_TXDATA[61] === 1'bz) || CH3_TXDATA[61]; // rv 1
  assign CH3_TXDATA_in[62] = (CH3_TXDATA[62] === 1'bz) || CH3_TXDATA[62]; // rv 1
  assign CH3_TXDATA_in[63] = (CH3_TXDATA[63] === 1'bz) || CH3_TXDATA[63]; // rv 1
  assign CH3_TXDATA_in[64] = (CH3_TXDATA[64] === 1'bz) || CH3_TXDATA[64]; // rv 1
  assign CH3_TXDATA_in[65] = (CH3_TXDATA[65] === 1'bz) || CH3_TXDATA[65]; // rv 1
  assign CH3_TXDATA_in[66] = (CH3_TXDATA[66] === 1'bz) || CH3_TXDATA[66]; // rv 1
  assign CH3_TXDATA_in[67] = (CH3_TXDATA[67] === 1'bz) || CH3_TXDATA[67]; // rv 1
  assign CH3_TXDATA_in[68] = (CH3_TXDATA[68] === 1'bz) || CH3_TXDATA[68]; // rv 1
  assign CH3_TXDATA_in[69] = (CH3_TXDATA[69] === 1'bz) || CH3_TXDATA[69]; // rv 1
  assign CH3_TXDATA_in[6] = (CH3_TXDATA[6] === 1'bz) || CH3_TXDATA[6]; // rv 1
  assign CH3_TXDATA_in[70] = (CH3_TXDATA[70] === 1'bz) || CH3_TXDATA[70]; // rv 1
  assign CH3_TXDATA_in[71] = (CH3_TXDATA[71] === 1'bz) || CH3_TXDATA[71]; // rv 1
  assign CH3_TXDATA_in[72] = (CH3_TXDATA[72] === 1'bz) || CH3_TXDATA[72]; // rv 1
  assign CH3_TXDATA_in[73] = (CH3_TXDATA[73] === 1'bz) || CH3_TXDATA[73]; // rv 1
  assign CH3_TXDATA_in[74] = (CH3_TXDATA[74] === 1'bz) || CH3_TXDATA[74]; // rv 1
  assign CH3_TXDATA_in[75] = (CH3_TXDATA[75] === 1'bz) || CH3_TXDATA[75]; // rv 1
  assign CH3_TXDATA_in[76] = (CH3_TXDATA[76] === 1'bz) || CH3_TXDATA[76]; // rv 1
  assign CH3_TXDATA_in[77] = (CH3_TXDATA[77] === 1'bz) || CH3_TXDATA[77]; // rv 1
  assign CH3_TXDATA_in[78] = (CH3_TXDATA[78] === 1'bz) || CH3_TXDATA[78]; // rv 1
  assign CH3_TXDATA_in[79] = (CH3_TXDATA[79] === 1'bz) || CH3_TXDATA[79]; // rv 1
  assign CH3_TXDATA_in[7] = (CH3_TXDATA[7] === 1'bz) || CH3_TXDATA[7]; // rv 1
  assign CH3_TXDATA_in[80] = (CH3_TXDATA[80] === 1'bz) || CH3_TXDATA[80]; // rv 1
  assign CH3_TXDATA_in[81] = (CH3_TXDATA[81] === 1'bz) || CH3_TXDATA[81]; // rv 1
  assign CH3_TXDATA_in[82] = (CH3_TXDATA[82] === 1'bz) || CH3_TXDATA[82]; // rv 1
  assign CH3_TXDATA_in[83] = (CH3_TXDATA[83] === 1'bz) || CH3_TXDATA[83]; // rv 1
  assign CH3_TXDATA_in[84] = (CH3_TXDATA[84] === 1'bz) || CH3_TXDATA[84]; // rv 1
  assign CH3_TXDATA_in[85] = (CH3_TXDATA[85] === 1'bz) || CH3_TXDATA[85]; // rv 1
  assign CH3_TXDATA_in[86] = (CH3_TXDATA[86] === 1'bz) || CH3_TXDATA[86]; // rv 1
  assign CH3_TXDATA_in[87] = (CH3_TXDATA[87] === 1'bz) || CH3_TXDATA[87]; // rv 1
  assign CH3_TXDATA_in[88] = (CH3_TXDATA[88] === 1'bz) || CH3_TXDATA[88]; // rv 1
  assign CH3_TXDATA_in[89] = (CH3_TXDATA[89] === 1'bz) || CH3_TXDATA[89]; // rv 1
  assign CH3_TXDATA_in[8] = (CH3_TXDATA[8] === 1'bz) || CH3_TXDATA[8]; // rv 1
  assign CH3_TXDATA_in[90] = (CH3_TXDATA[90] === 1'bz) || CH3_TXDATA[90]; // rv 1
  assign CH3_TXDATA_in[91] = (CH3_TXDATA[91] === 1'bz) || CH3_TXDATA[91]; // rv 1
  assign CH3_TXDATA_in[92] = (CH3_TXDATA[92] === 1'bz) || CH3_TXDATA[92]; // rv 1
  assign CH3_TXDATA_in[93] = (CH3_TXDATA[93] === 1'bz) || CH3_TXDATA[93]; // rv 1
  assign CH3_TXDATA_in[94] = (CH3_TXDATA[94] === 1'bz) || CH3_TXDATA[94]; // rv 1
  assign CH3_TXDATA_in[95] = (CH3_TXDATA[95] === 1'bz) || CH3_TXDATA[95]; // rv 1
  assign CH3_TXDATA_in[96] = (CH3_TXDATA[96] === 1'bz) || CH3_TXDATA[96]; // rv 1
  assign CH3_TXDATA_in[97] = (CH3_TXDATA[97] === 1'bz) || CH3_TXDATA[97]; // rv 1
  assign CH3_TXDATA_in[98] = (CH3_TXDATA[98] === 1'bz) || CH3_TXDATA[98]; // rv 1
  assign CH3_TXDATA_in[99] = (CH3_TXDATA[99] === 1'bz) || CH3_TXDATA[99]; // rv 1
  assign CH3_TXDATA_in[9] = (CH3_TXDATA[9] === 1'bz) || CH3_TXDATA[9]; // rv 1
  assign CTRLRSVDIN0_in[0] = (CTRLRSVDIN0[0] === 1'bz) || CTRLRSVDIN0[0]; // rv 1
  assign CTRLRSVDIN0_in[10] = (CTRLRSVDIN0[10] === 1'bz) || CTRLRSVDIN0[10]; // rv 1
  assign CTRLRSVDIN0_in[11] = (CTRLRSVDIN0[11] === 1'bz) || CTRLRSVDIN0[11]; // rv 1
  assign CTRLRSVDIN0_in[12] = (CTRLRSVDIN0[12] === 1'bz) || CTRLRSVDIN0[12]; // rv 1
  assign CTRLRSVDIN0_in[13] = (CTRLRSVDIN0[13] === 1'bz) || CTRLRSVDIN0[13]; // rv 1
  assign CTRLRSVDIN0_in[14] = (CTRLRSVDIN0[14] === 1'bz) || CTRLRSVDIN0[14]; // rv 1
  assign CTRLRSVDIN0_in[15] = (CTRLRSVDIN0[15] === 1'bz) || CTRLRSVDIN0[15]; // rv 1
  assign CTRLRSVDIN0_in[1] = (CTRLRSVDIN0[1] === 1'bz) || CTRLRSVDIN0[1]; // rv 1
  assign CTRLRSVDIN0_in[2] = (CTRLRSVDIN0[2] === 1'bz) || CTRLRSVDIN0[2]; // rv 1
  assign CTRLRSVDIN0_in[3] = (CTRLRSVDIN0[3] === 1'bz) || CTRLRSVDIN0[3]; // rv 1
  assign CTRLRSVDIN0_in[4] = (CTRLRSVDIN0[4] === 1'bz) || CTRLRSVDIN0[4]; // rv 1
  assign CTRLRSVDIN0_in[5] = (CTRLRSVDIN0[5] === 1'bz) || CTRLRSVDIN0[5]; // rv 1
  assign CTRLRSVDIN0_in[6] = (CTRLRSVDIN0[6] === 1'bz) || CTRLRSVDIN0[6]; // rv 1
  assign CTRLRSVDIN0_in[7] = (CTRLRSVDIN0[7] === 1'bz) || CTRLRSVDIN0[7]; // rv 1
  assign CTRLRSVDIN0_in[8] = (CTRLRSVDIN0[8] === 1'bz) || CTRLRSVDIN0[8]; // rv 1
  assign CTRLRSVDIN0_in[9] = (CTRLRSVDIN0[9] === 1'bz) || CTRLRSVDIN0[9]; // rv 1
  assign XPIPE_GT_PIPECLK_1_in = XPIPE_GT_PIPECLK_1;
  assign XPIPE_GT_PIPECLK_in = XPIPE_GT_PIPECLK;
`endif

  assign ALTCLK_in = (ALTCLK === 1'bz) || ALTCLK; // rv 1
  assign APB3CLK_in = (APB3CLK === 1'bz) || APB3CLK; // rv 1
  assign APB3PADDR_in[0] = (APB3PADDR[0] === 1'bz) || APB3PADDR[0]; // rv 1
  assign APB3PADDR_in[10] = (APB3PADDR[10] === 1'bz) || APB3PADDR[10]; // rv 1
  assign APB3PADDR_in[11] = (APB3PADDR[11] === 1'bz) || APB3PADDR[11]; // rv 1
  assign APB3PADDR_in[12] = (APB3PADDR[12] === 1'bz) || APB3PADDR[12]; // rv 1
  assign APB3PADDR_in[13] = (APB3PADDR[13] === 1'bz) || APB3PADDR[13]; // rv 1
  assign APB3PADDR_in[14] = (APB3PADDR[14] === 1'bz) || APB3PADDR[14]; // rv 1
  assign APB3PADDR_in[15] = (APB3PADDR[15] === 1'bz) || APB3PADDR[15]; // rv 1
  assign APB3PADDR_in[1] = (APB3PADDR[1] === 1'bz) || APB3PADDR[1]; // rv 1
  assign APB3PADDR_in[2] = (APB3PADDR[2] === 1'bz) || APB3PADDR[2]; // rv 1
  assign APB3PADDR_in[3] = (APB3PADDR[3] === 1'bz) || APB3PADDR[3]; // rv 1
  assign APB3PADDR_in[4] = (APB3PADDR[4] === 1'bz) || APB3PADDR[4]; // rv 1
  assign APB3PADDR_in[5] = (APB3PADDR[5] === 1'bz) || APB3PADDR[5]; // rv 1
  assign APB3PADDR_in[6] = (APB3PADDR[6] === 1'bz) || APB3PADDR[6]; // rv 1
  assign APB3PADDR_in[7] = (APB3PADDR[7] === 1'bz) || APB3PADDR[7]; // rv 1
  assign APB3PADDR_in[8] = (APB3PADDR[8] === 1'bz) || APB3PADDR[8]; // rv 1
  assign APB3PADDR_in[9] = (APB3PADDR[9] === 1'bz) || APB3PADDR[9]; // rv 1
  assign APB3PENABLE_in = (APB3PENABLE === 1'bz) || APB3PENABLE; // rv 1
  assign APB3PRDATA_M_in = APB3PRDATA_M;
  assign APB3PREADY_M_in = APB3PREADY_M;
  assign APB3PRESETN_in = (APB3PRESETN === 1'bz) || APB3PRESETN; // rv 1
  assign APB3PSEL_in = (APB3PSEL === 1'bz) || APB3PSEL; // rv 1
  assign APB3PSLVERR_M_in = APB3PSLVERR_M;
  assign APB3PWDATA_in[0] = (APB3PWDATA[0] === 1'bz) || APB3PWDATA[0]; // rv 1
  assign APB3PWDATA_in[10] = (APB3PWDATA[10] === 1'bz) || APB3PWDATA[10]; // rv 1
  assign APB3PWDATA_in[11] = (APB3PWDATA[11] === 1'bz) || APB3PWDATA[11]; // rv 1
  assign APB3PWDATA_in[12] = (APB3PWDATA[12] === 1'bz) || APB3PWDATA[12]; // rv 1
  assign APB3PWDATA_in[13] = (APB3PWDATA[13] === 1'bz) || APB3PWDATA[13]; // rv 1
  assign APB3PWDATA_in[14] = (APB3PWDATA[14] === 1'bz) || APB3PWDATA[14]; // rv 1
  assign APB3PWDATA_in[15] = (APB3PWDATA[15] === 1'bz) || APB3PWDATA[15]; // rv 1
  assign APB3PWDATA_in[16] = (APB3PWDATA[16] === 1'bz) || APB3PWDATA[16]; // rv 1
  assign APB3PWDATA_in[17] = (APB3PWDATA[17] === 1'bz) || APB3PWDATA[17]; // rv 1
  assign APB3PWDATA_in[18] = (APB3PWDATA[18] === 1'bz) || APB3PWDATA[18]; // rv 1
  assign APB3PWDATA_in[19] = (APB3PWDATA[19] === 1'bz) || APB3PWDATA[19]; // rv 1
  assign APB3PWDATA_in[1] = (APB3PWDATA[1] === 1'bz) || APB3PWDATA[1]; // rv 1
  assign APB3PWDATA_in[20] = (APB3PWDATA[20] === 1'bz) || APB3PWDATA[20]; // rv 1
  assign APB3PWDATA_in[21] = (APB3PWDATA[21] === 1'bz) || APB3PWDATA[21]; // rv 1
  assign APB3PWDATA_in[22] = (APB3PWDATA[22] === 1'bz) || APB3PWDATA[22]; // rv 1
  assign APB3PWDATA_in[23] = (APB3PWDATA[23] === 1'bz) || APB3PWDATA[23]; // rv 1
  assign APB3PWDATA_in[24] = (APB3PWDATA[24] === 1'bz) || APB3PWDATA[24]; // rv 1
  assign APB3PWDATA_in[25] = (APB3PWDATA[25] === 1'bz) || APB3PWDATA[25]; // rv 1
  assign APB3PWDATA_in[26] = (APB3PWDATA[26] === 1'bz) || APB3PWDATA[26]; // rv 1
  assign APB3PWDATA_in[27] = (APB3PWDATA[27] === 1'bz) || APB3PWDATA[27]; // rv 1
  assign APB3PWDATA_in[28] = (APB3PWDATA[28] === 1'bz) || APB3PWDATA[28]; // rv 1
  assign APB3PWDATA_in[29] = (APB3PWDATA[29] === 1'bz) || APB3PWDATA[29]; // rv 1
  assign APB3PWDATA_in[2] = (APB3PWDATA[2] === 1'bz) || APB3PWDATA[2]; // rv 1
  assign APB3PWDATA_in[30] = (APB3PWDATA[30] === 1'bz) || APB3PWDATA[30]; // rv 1
  assign APB3PWDATA_in[31] = (APB3PWDATA[31] === 1'bz) || APB3PWDATA[31]; // rv 1
  assign APB3PWDATA_in[3] = (APB3PWDATA[3] === 1'bz) || APB3PWDATA[3]; // rv 1
  assign APB3PWDATA_in[4] = (APB3PWDATA[4] === 1'bz) || APB3PWDATA[4]; // rv 1
  assign APB3PWDATA_in[5] = (APB3PWDATA[5] === 1'bz) || APB3PWDATA[5]; // rv 1
  assign APB3PWDATA_in[6] = (APB3PWDATA[6] === 1'bz) || APB3PWDATA[6]; // rv 1
  assign APB3PWDATA_in[7] = (APB3PWDATA[7] === 1'bz) || APB3PWDATA[7]; // rv 1
  assign APB3PWDATA_in[8] = (APB3PWDATA[8] === 1'bz) || APB3PWDATA[8]; // rv 1
  assign APB3PWDATA_in[9] = (APB3PWDATA[9] === 1'bz) || APB3PWDATA[9]; // rv 1
  assign APB3PWRITE_in = (APB3PWRITE === 1'bz) || APB3PWRITE; // rv 1
  assign AXISCLK_in = (AXISCLK === 1'bz) || AXISCLK; // rv 1
  assign BGBYPASSB_in = BGBYPASSB;
  assign BGMONITORENB_in = (BGMONITORENB === 1'bz) || BGMONITORENB; // rv 1
  assign BGPDB_in = BGPDB;
  assign BGRCALOVRDENB_in = BGRCALOVRDENB;
  assign BGRCALOVRD_in[0] = (BGRCALOVRD[0] === 1'bz) || BGRCALOVRD[0]; // rv 1
  assign BGRCALOVRD_in[1] = (BGRCALOVRD[1] === 1'bz) || BGRCALOVRD[1]; // rv 1
  assign BGRCALOVRD_in[2] = (BGRCALOVRD[2] === 1'bz) || BGRCALOVRD[2]; // rv 1
  assign BGRCALOVRD_in[3] = (BGRCALOVRD[3] === 1'bz) || BGRCALOVRD[3]; // rv 1
  assign BGRCALOVRD_in[4] = (BGRCALOVRD[4] === 1'bz) || BGRCALOVRD[4]; // rv 1
  assign CH0_BUFGTCEMASK_M_in = CH0_BUFGTCEMASK_M;
  assign CH0_BUFGTCE_M_in = CH0_BUFGTCE_M;
  assign CH0_BUFGTDIV_M_in = CH0_BUFGTDIV_M;
  assign CH0_BUFGTRSTMASK_M_in = CH0_BUFGTRSTMASK_M;
  assign CH0_BUFGTRST_M_in = CH0_BUFGTRST_M;
  assign CH0_CDRBMCDRREQ_in = (CH0_CDRBMCDRREQ === 1'bz) || CH0_CDRBMCDRREQ; // rv 1
  assign CH0_CDRFREQOS_in = (CH0_CDRFREQOS === 1'bz) || CH0_CDRFREQOS; // rv 1
  assign CH0_CDRINCPCTRL_in = (CH0_CDRINCPCTRL === 1'bz) || CH0_CDRINCPCTRL; // rv 1
  assign CH0_CDRSTEPDIR_in = (CH0_CDRSTEPDIR === 1'bz) || CH0_CDRSTEPDIR; // rv 1
  assign CH0_CDRSTEPSQ_in = (CH0_CDRSTEPSQ === 1'bz) || CH0_CDRSTEPSQ; // rv 1
  assign CH0_CDRSTEPSX_in = (CH0_CDRSTEPSX === 1'bz) || CH0_CDRSTEPSX; // rv 1
  assign CH0_CFOKOVRDFINISH_in = (CH0_CFOKOVRDFINISH === 1'bz) || CH0_CFOKOVRDFINISH; // rv 1
  assign CH0_CFOKOVRDPULSE_in = (CH0_CFOKOVRDPULSE === 1'bz) || CH0_CFOKOVRDPULSE; // rv 1
  assign CH0_CFOKOVRDRDY0_M_in = CH0_CFOKOVRDRDY0_M;
  assign CH0_CFOKOVRDRDY1_M_in = CH0_CFOKOVRDRDY1_M;
  assign CH0_CFOKOVRDSTART_in = (CH0_CFOKOVRDSTART === 1'bz) || CH0_CFOKOVRDSTART; // rv 1
  assign CH0_CLKRSVD0_in = (CH0_CLKRSVD0 === 1'bz) || CH0_CLKRSVD0; // rv 1
  assign CH0_CLKRSVD1_in = (CH0_CLKRSVD1 === 1'bz) || CH0_CLKRSVD1; // rv 1
  assign CH0_DMONFIFORESET_in = (CH0_DMONFIFORESET === 1'bz) || CH0_DMONFIFORESET; // rv 1
  assign CH0_DMONITORCLK_in = (CH0_DMONITORCLK === 1'bz) || CH0_DMONITORCLK; // rv 1
  assign CH0_DMONITOROUT_M_in = CH0_DMONITOROUT_M;
  assign CH0_EYESCANDATAERROR_M_in = CH0_EYESCANDATAERROR_M;
  assign CH0_EYESCANRESET_in = (CH0_EYESCANRESET === 1'bz) || CH0_EYESCANRESET; // rv 1
  assign CH0_EYESCANTRIGGER_in = (CH0_EYESCANTRIGGER === 1'bz) || CH0_EYESCANTRIGGER; // rv 1
  assign CH0_GTRSVD_in[0] = (CH0_GTRSVD[0] === 1'bz) || CH0_GTRSVD[0]; // rv 1
  assign CH0_GTRSVD_in[10] = (CH0_GTRSVD[10] === 1'bz) || CH0_GTRSVD[10]; // rv 1
  assign CH0_GTRSVD_in[11] = (CH0_GTRSVD[11] === 1'bz) || CH0_GTRSVD[11]; // rv 1
  assign CH0_GTRSVD_in[12] = (CH0_GTRSVD[12] === 1'bz) || CH0_GTRSVD[12]; // rv 1
  assign CH0_GTRSVD_in[13] = (CH0_GTRSVD[13] === 1'bz) || CH0_GTRSVD[13]; // rv 1
  assign CH0_GTRSVD_in[14] = (CH0_GTRSVD[14] === 1'bz) || CH0_GTRSVD[14]; // rv 1
  assign CH0_GTRSVD_in[15] = (CH0_GTRSVD[15] === 1'bz) || CH0_GTRSVD[15]; // rv 1
  assign CH0_GTRSVD_in[1] = (CH0_GTRSVD[1] === 1'bz) || CH0_GTRSVD[1]; // rv 1
  assign CH0_GTRSVD_in[2] = (CH0_GTRSVD[2] === 1'bz) || CH0_GTRSVD[2]; // rv 1
  assign CH0_GTRSVD_in[3] = (CH0_GTRSVD[3] === 1'bz) || CH0_GTRSVD[3]; // rv 1
  assign CH0_GTRSVD_in[4] = (CH0_GTRSVD[4] === 1'bz) || CH0_GTRSVD[4]; // rv 1
  assign CH0_GTRSVD_in[5] = (CH0_GTRSVD[5] === 1'bz) || CH0_GTRSVD[5]; // rv 1
  assign CH0_GTRSVD_in[6] = (CH0_GTRSVD[6] === 1'bz) || CH0_GTRSVD[6]; // rv 1
  assign CH0_GTRSVD_in[7] = (CH0_GTRSVD[7] === 1'bz) || CH0_GTRSVD[7]; // rv 1
  assign CH0_GTRSVD_in[8] = (CH0_GTRSVD[8] === 1'bz) || CH0_GTRSVD[8]; // rv 1
  assign CH0_GTRSVD_in[9] = (CH0_GTRSVD[9] === 1'bz) || CH0_GTRSVD[9]; // rv 1
  assign CH0_GTRXRESET_in = (CH0_GTRXRESET === 1'bz) || CH0_GTRXRESET; // rv 1
  assign CH0_GTTXRESET_in = (CH0_GTTXRESET === 1'bz) || CH0_GTTXRESET; // rv 1
  assign CH0_HSDPPCSRESET_in = (CH0_HSDPPCSRESET === 1'bz) || CH0_HSDPPCSRESET; // rv 1
  assign CH0_ILORESETDONE_M_in = CH0_ILORESETDONE_M;
  assign CH0_ILORESETMASK_in = (CH0_ILORESETMASK === 1'bz) || CH0_ILORESETMASK; // rv 1
  assign CH0_ILORESET_in = (CH0_ILORESET === 1'bz) || CH0_ILORESET; // rv 1
  assign CH0_LOOPBACK_in[0] = (CH0_LOOPBACK[0] === 1'bz) || CH0_LOOPBACK[0]; // rv 1
  assign CH0_LOOPBACK_in[1] = (CH0_LOOPBACK[1] === 1'bz) || CH0_LOOPBACK[1]; // rv 1
  assign CH0_LOOPBACK_in[2] = (CH0_LOOPBACK[2] === 1'bz) || CH0_LOOPBACK[2]; // rv 1
  assign CH0_PCIERSTB_in = (CH0_PCIERSTB === 1'bz) || CH0_PCIERSTB; // rv 1
  assign CH0_PCSRSVDIN_in[0] = (CH0_PCSRSVDIN[0] === 1'bz) || CH0_PCSRSVDIN[0]; // rv 1
  assign CH0_PCSRSVDIN_in[10] = (CH0_PCSRSVDIN[10] === 1'bz) || CH0_PCSRSVDIN[10]; // rv 1
  assign CH0_PCSRSVDIN_in[11] = (CH0_PCSRSVDIN[11] === 1'bz) || CH0_PCSRSVDIN[11]; // rv 1
  assign CH0_PCSRSVDIN_in[12] = (CH0_PCSRSVDIN[12] === 1'bz) || CH0_PCSRSVDIN[12]; // rv 1
  assign CH0_PCSRSVDIN_in[13] = (CH0_PCSRSVDIN[13] === 1'bz) || CH0_PCSRSVDIN[13]; // rv 1
  assign CH0_PCSRSVDIN_in[14] = (CH0_PCSRSVDIN[14] === 1'bz) || CH0_PCSRSVDIN[14]; // rv 1
  assign CH0_PCSRSVDIN_in[15] = (CH0_PCSRSVDIN[15] === 1'bz) || CH0_PCSRSVDIN[15]; // rv 1
  assign CH0_PCSRSVDIN_in[1] = (CH0_PCSRSVDIN[1] === 1'bz) || CH0_PCSRSVDIN[1]; // rv 1
  assign CH0_PCSRSVDIN_in[2] = (CH0_PCSRSVDIN[2] === 1'bz) || CH0_PCSRSVDIN[2]; // rv 1
  assign CH0_PCSRSVDIN_in[3] = (CH0_PCSRSVDIN[3] === 1'bz) || CH0_PCSRSVDIN[3]; // rv 1
  assign CH0_PCSRSVDIN_in[4] = (CH0_PCSRSVDIN[4] === 1'bz) || CH0_PCSRSVDIN[4]; // rv 1
  assign CH0_PCSRSVDIN_in[5] = (CH0_PCSRSVDIN[5] === 1'bz) || CH0_PCSRSVDIN[5]; // rv 1
  assign CH0_PCSRSVDIN_in[6] = (CH0_PCSRSVDIN[6] === 1'bz) || CH0_PCSRSVDIN[6]; // rv 1
  assign CH0_PCSRSVDIN_in[7] = (CH0_PCSRSVDIN[7] === 1'bz) || CH0_PCSRSVDIN[7]; // rv 1
  assign CH0_PCSRSVDIN_in[8] = (CH0_PCSRSVDIN[8] === 1'bz) || CH0_PCSRSVDIN[8]; // rv 1
  assign CH0_PCSRSVDIN_in[9] = (CH0_PCSRSVDIN[9] === 1'bz) || CH0_PCSRSVDIN[9]; // rv 1
  assign CH0_PCSRSVDOUT_M_in = CH0_PCSRSVDOUT_M;
  assign CH0_PHYESMADAPTSAVE_in = (CH0_PHYESMADAPTSAVE === 1'bz) || CH0_PHYESMADAPTSAVE; // rv 1
  assign CH0_PHYREADY_M_in = CH0_PHYREADY_M;
  assign CH0_PHYSTATUS_M_in = CH0_PHYSTATUS_M;
  assign CH0_PINRSVDAS_M_in = CH0_PINRSVDAS_M;
  assign CH0_RESETEXCEPTION_M_in = CH0_RESETEXCEPTION_M;
  assign CH0_RX10GSTAT_M_in = CH0_RX10GSTAT_M;
  assign CH0_RXBUFSTATUS_M_in = CH0_RXBUFSTATUS_M;
  assign CH0_RXBYTEISALIGNED_M_in = CH0_RXBYTEISALIGNED_M;
  assign CH0_RXBYTEREALIGN_M_in = CH0_RXBYTEREALIGN_M;
  assign CH0_RXCDRHOLD_in = (CH0_RXCDRHOLD === 1'bz) || CH0_RXCDRHOLD; // rv 1
  assign CH0_RXCDRLOCK_M_in = CH0_RXCDRLOCK_M;
  assign CH0_RXCDROVRDEN_in = (CH0_RXCDROVRDEN === 1'bz) || CH0_RXCDROVRDEN; // rv 1
  assign CH0_RXCDRPHDONE_M_in = CH0_RXCDRPHDONE_M;
  assign CH0_RXCDRRESET_in = (CH0_RXCDRRESET === 1'bz) || CH0_RXCDRRESET; // rv 1
  assign CH0_RXCHANBONDSEQ_M_in = CH0_RXCHANBONDSEQ_M;
  assign CH0_RXCHANISALIGNED_M_in = CH0_RXCHANISALIGNED_M;
  assign CH0_RXCHANREALIGN_M_in = CH0_RXCHANREALIGN_M;
  assign CH0_RXCHBONDI_in[0] = (CH0_RXCHBONDI[0] === 1'bz) || CH0_RXCHBONDI[0]; // rv 1
  assign CH0_RXCHBONDI_in[1] = (CH0_RXCHBONDI[1] === 1'bz) || CH0_RXCHBONDI[1]; // rv 1
  assign CH0_RXCHBONDI_in[2] = (CH0_RXCHBONDI[2] === 1'bz) || CH0_RXCHBONDI[2]; // rv 1
  assign CH0_RXCHBONDI_in[3] = (CH0_RXCHBONDI[3] === 1'bz) || CH0_RXCHBONDI[3]; // rv 1
  assign CH0_RXCHBONDI_in[4] = (CH0_RXCHBONDI[4] === 1'bz) || CH0_RXCHBONDI[4]; // rv 1
  assign CH0_RXCHBONDO_M_in = CH0_RXCHBONDO_M;
  assign CH0_RXCLKCORCNT_M_in = CH0_RXCLKCORCNT_M;
  assign CH0_RXCOMINITDET_M_in = CH0_RXCOMINITDET_M;
  assign CH0_RXCOMMADET_M_in = CH0_RXCOMMADET_M;
  assign CH0_RXCOMSASDET_M_in = CH0_RXCOMSASDET_M;
  assign CH0_RXCOMWAKEDET_M_in = CH0_RXCOMWAKEDET_M;
  assign CH0_RXCTRL0_M_in = CH0_RXCTRL0_M;
  assign CH0_RXCTRL1_M_in = CH0_RXCTRL1_M;
  assign CH0_RXCTRL2_M_in = CH0_RXCTRL2_M;
  assign CH0_RXCTRL3_M_in = CH0_RXCTRL3_M;
  assign CH0_RXDAPICODEOVRDEN_in = (CH0_RXDAPICODEOVRDEN === 1'bz) || CH0_RXDAPICODEOVRDEN; // rv 1
  assign CH0_RXDAPICODERESET_in = (CH0_RXDAPICODERESET === 1'bz) || CH0_RXDAPICODERESET; // rv 1
  assign CH0_RXDATAEXTENDRSVD_M_in = CH0_RXDATAEXTENDRSVD_M;
  assign CH0_RXDATAVALID_M_in = CH0_RXDATAVALID_M;
  assign CH0_RXDATA_M_in = CH0_RXDATA_M;
  assign CH0_RXDCCDONE_M_in = CH0_RXDCCDONE_M;
  assign CH0_RXDLYALIGNERR_M_in = CH0_RXDLYALIGNERR_M;
  assign CH0_RXDLYALIGNPROG_M_in = CH0_RXDLYALIGNPROG_M;
  assign CH0_RXDLYALIGNREQ_in = (CH0_RXDLYALIGNREQ === 1'bz) || CH0_RXDLYALIGNREQ; // rv 1
  assign CH0_RXELECIDLE_M_in = CH0_RXELECIDLE_M;
  assign CH0_RXEQTRAINING_in = (CH0_RXEQTRAINING === 1'bz) || CH0_RXEQTRAINING; // rv 1
  assign CH0_RXFINEALIGNDONE_M_in = CH0_RXFINEALIGNDONE_M;
  assign CH0_RXGEARBOXSLIP_in = (CH0_RXGEARBOXSLIP === 1'bz) || CH0_RXGEARBOXSLIP; // rv 1
  assign CH0_RXHEADERVALID_M_in = CH0_RXHEADERVALID_M;
  assign CH0_RXHEADER_M_in = CH0_RXHEADER_M;
  assign CH0_RXLATCLK_in = (CH0_RXLATCLK === 1'bz) || CH0_RXLATCLK; // rv 1
  assign CH0_RXLPMEN_in = (CH0_RXLPMEN === 1'bz) || CH0_RXLPMEN; // rv 1
  assign CH0_RXMLDCHAINDONE_in = (CH0_RXMLDCHAINDONE === 1'bz) || CH0_RXMLDCHAINDONE; // rv 1
  assign CH0_RXMLDCHAINREQ_in = (CH0_RXMLDCHAINREQ === 1'bz) || CH0_RXMLDCHAINREQ; // rv 1
  assign CH0_RXMLFINEALIGNREQ_in = (CH0_RXMLFINEALIGNREQ === 1'bz) || CH0_RXMLFINEALIGNREQ; // rv 1
  assign CH0_RXOOBRESET_in = (CH0_RXOOBRESET === 1'bz) || CH0_RXOOBRESET; // rv 1
  assign CH0_RXOSINTDONE_M_in = CH0_RXOSINTDONE_M;
  assign CH0_RXOSINTSTARTED_M_in = CH0_RXOSINTSTARTED_M;
  assign CH0_RXOSINTSTROBEDONE_M_in = CH0_RXOSINTSTROBEDONE_M;
  assign CH0_RXOSINTSTROBESTARTED_M_in = CH0_RXOSINTSTROBESTARTED_M;
  assign CH0_RXOUTCLK_M_in = CH0_RXOUTCLK_M;
  assign CH0_RXPCSRESETMASK_in[0] = (CH0_RXPCSRESETMASK[0] === 1'bz) || CH0_RXPCSRESETMASK[0]; // rv 1
  assign CH0_RXPCSRESETMASK_in[1] = (CH0_RXPCSRESETMASK[1] === 1'bz) || CH0_RXPCSRESETMASK[1]; // rv 1
  assign CH0_RXPCSRESETMASK_in[2] = (CH0_RXPCSRESETMASK[2] === 1'bz) || CH0_RXPCSRESETMASK[2]; // rv 1
  assign CH0_RXPCSRESETMASK_in[3] = (CH0_RXPCSRESETMASK[3] === 1'bz) || CH0_RXPCSRESETMASK[3]; // rv 1
  assign CH0_RXPCSRESETMASK_in[4] = (CH0_RXPCSRESETMASK[4] === 1'bz) || CH0_RXPCSRESETMASK[4]; // rv 1
  assign CH0_RXPD_in[0] = (CH0_RXPD[0] === 1'bz) || CH0_RXPD[0]; // rv 1
  assign CH0_RXPD_in[1] = (CH0_RXPD[1] === 1'bz) || CH0_RXPD[1]; // rv 1
  assign CH0_RXPHALIGNDONE_M_in = CH0_RXPHALIGNDONE_M;
  assign CH0_RXPHALIGNERR_M_in = CH0_RXPHALIGNERR_M;
  assign CH0_RXPHALIGNREQ_in = (CH0_RXPHALIGNREQ === 1'bz) || CH0_RXPHALIGNREQ; // rv 1
  assign CH0_RXPHALIGNRESETMASK_in[0] = (CH0_RXPHALIGNRESETMASK[0] === 1'bz) || CH0_RXPHALIGNRESETMASK[0]; // rv 1
  assign CH0_RXPHALIGNRESETMASK_in[1] = (CH0_RXPHALIGNRESETMASK[1] === 1'bz) || CH0_RXPHALIGNRESETMASK[1]; // rv 1
  assign CH0_RXPHDLYPD_in = (CH0_RXPHDLYPD === 1'bz) || CH0_RXPHDLYPD; // rv 1
  assign CH0_RXPHDLYRESETDONE_M_in = CH0_RXPHDLYRESETDONE_M;
  assign CH0_RXPHDLYRESET_in = (CH0_RXPHDLYRESET === 1'bz) || CH0_RXPHDLYRESET; // rv 1
  assign CH0_RXPHSETINITDONE_M_in = CH0_RXPHSETINITDONE_M;
  assign CH0_RXPHSETINITREQ_in = (CH0_RXPHSETINITREQ === 1'bz) || CH0_RXPHSETINITREQ; // rv 1
  assign CH0_RXPHSHIFT180DONE_M_in = CH0_RXPHSHIFT180DONE_M;
  assign CH0_RXPHSHIFT180_in = (CH0_RXPHSHIFT180 === 1'bz) || CH0_RXPHSHIFT180; // rv 1
  assign CH0_RXPMARESETDONE_M_in = CH0_RXPMARESETDONE_M;
  assign CH0_RXPMARESETMASK_in[0] = (CH0_RXPMARESETMASK[0] === 1'bz) || CH0_RXPMARESETMASK[0]; // rv 1
  assign CH0_RXPMARESETMASK_in[1] = (CH0_RXPMARESETMASK[1] === 1'bz) || CH0_RXPMARESETMASK[1]; // rv 1
  assign CH0_RXPMARESETMASK_in[2] = (CH0_RXPMARESETMASK[2] === 1'bz) || CH0_RXPMARESETMASK[2]; // rv 1
  assign CH0_RXPMARESETMASK_in[3] = (CH0_RXPMARESETMASK[3] === 1'bz) || CH0_RXPMARESETMASK[3]; // rv 1
  assign CH0_RXPMARESETMASK_in[4] = (CH0_RXPMARESETMASK[4] === 1'bz) || CH0_RXPMARESETMASK[4]; // rv 1
  assign CH0_RXPMARESETMASK_in[5] = (CH0_RXPMARESETMASK[5] === 1'bz) || CH0_RXPMARESETMASK[5]; // rv 1
  assign CH0_RXPMARESETMASK_in[6] = (CH0_RXPMARESETMASK[6] === 1'bz) || CH0_RXPMARESETMASK[6]; // rv 1
  assign CH0_RXPOLARITY_in = (CH0_RXPOLARITY === 1'bz) || CH0_RXPOLARITY; // rv 1
  assign CH0_RXPRBSCNTRESET_in = (CH0_RXPRBSCNTRESET === 1'bz) || CH0_RXPRBSCNTRESET; // rv 1
  assign CH0_RXPRBSERR_M_in = CH0_RXPRBSERR_M;
  assign CH0_RXPRBSLOCKED_M_in = CH0_RXPRBSLOCKED_M;
  assign CH0_RXPRBSSEL_in[0] = (CH0_RXPRBSSEL[0] === 1'bz) || CH0_RXPRBSSEL[0]; // rv 1
  assign CH0_RXPRBSSEL_in[1] = (CH0_RXPRBSSEL[1] === 1'bz) || CH0_RXPRBSSEL[1]; // rv 1
  assign CH0_RXPRBSSEL_in[2] = (CH0_RXPRBSSEL[2] === 1'bz) || CH0_RXPRBSSEL[2]; // rv 1
  assign CH0_RXPRBSSEL_in[3] = (CH0_RXPRBSSEL[3] === 1'bz) || CH0_RXPRBSSEL[3]; // rv 1
  assign CH0_RXPROGDIVRESETDONE_M_in = CH0_RXPROGDIVRESETDONE_M;
  assign CH0_RXPROGDIVRESET_in = (CH0_RXPROGDIVRESET === 1'bz) || CH0_RXPROGDIVRESET; // rv 1
  assign CH0_RXRATE_in[0] = (CH0_RXRATE[0] === 1'bz) || CH0_RXRATE[0]; // rv 1
  assign CH0_RXRATE_in[1] = (CH0_RXRATE[1] === 1'bz) || CH0_RXRATE[1]; // rv 1
  assign CH0_RXRATE_in[2] = (CH0_RXRATE[2] === 1'bz) || CH0_RXRATE[2]; // rv 1
  assign CH0_RXRATE_in[3] = (CH0_RXRATE[3] === 1'bz) || CH0_RXRATE[3]; // rv 1
  assign CH0_RXRATE_in[4] = (CH0_RXRATE[4] === 1'bz) || CH0_RXRATE[4]; // rv 1
  assign CH0_RXRATE_in[5] = (CH0_RXRATE[5] === 1'bz) || CH0_RXRATE[5]; // rv 1
  assign CH0_RXRATE_in[6] = (CH0_RXRATE[6] === 1'bz) || CH0_RXRATE[6]; // rv 1
  assign CH0_RXRATE_in[7] = (CH0_RXRATE[7] === 1'bz) || CH0_RXRATE[7]; // rv 1
  assign CH0_RXRESETDONE_M_in = CH0_RXRESETDONE_M;
  assign CH0_RXRESETMODE_in[0] = (CH0_RXRESETMODE[0] === 1'bz) || CH0_RXRESETMODE[0]; // rv 1
  assign CH0_RXRESETMODE_in[1] = (CH0_RXRESETMODE[1] === 1'bz) || CH0_RXRESETMODE[1]; // rv 1
  assign CH0_RXSLIDERDY_M_in = CH0_RXSLIDERDY_M;
  assign CH0_RXSLIDE_in = (CH0_RXSLIDE === 1'bz) || CH0_RXSLIDE; // rv 1
  assign CH0_RXSTARTOFSEQ_M_in = CH0_RXSTARTOFSEQ_M;
  assign CH0_RXSTATUS_M_in = CH0_RXSTATUS_M;
  assign CH0_RXSYNCALLIN_in = (CH0_RXSYNCALLIN === 1'bz) || CH0_RXSYNCALLIN; // rv 1
  assign CH0_RXSYNCDONE_M_in = CH0_RXSYNCDONE_M;
  assign CH0_RXTERMINATION_in = (CH0_RXTERMINATION === 1'bz) || CH0_RXTERMINATION; // rv 1
  assign CH0_RXUSERRDY_in = (CH0_RXUSERRDY === 1'bz) || CH0_RXUSERRDY; // rv 1
  assign CH0_RXUSRCLK_in = (CH0_RXUSRCLK === 1'bz) || CH0_RXUSRCLK; // rv 1
  assign CH0_RXVALID_M_in = CH0_RXVALID_M;
  assign CH0_TSTCLK0_in = (CH0_TSTCLK0 === 1'bz) || CH0_TSTCLK0; // rv 1
  assign CH0_TSTCLK1_in = (CH0_TSTCLK1 === 1'bz) || CH0_TSTCLK1; // rv 1
  assign CH0_TSTIN_in[0] = (CH0_TSTIN[0] === 1'bz) || CH0_TSTIN[0]; // rv 1
  assign CH0_TSTIN_in[10] = (CH0_TSTIN[10] === 1'bz) || CH0_TSTIN[10]; // rv 1
  assign CH0_TSTIN_in[11] = (CH0_TSTIN[11] === 1'bz) || CH0_TSTIN[11]; // rv 1
  assign CH0_TSTIN_in[12] = (CH0_TSTIN[12] === 1'bz) || CH0_TSTIN[12]; // rv 1
  assign CH0_TSTIN_in[13] = (CH0_TSTIN[13] === 1'bz) || CH0_TSTIN[13]; // rv 1
  assign CH0_TSTIN_in[14] = (CH0_TSTIN[14] === 1'bz) || CH0_TSTIN[14]; // rv 1
  assign CH0_TSTIN_in[15] = (CH0_TSTIN[15] === 1'bz) || CH0_TSTIN[15]; // rv 1
  assign CH0_TSTIN_in[16] = (CH0_TSTIN[16] === 1'bz) || CH0_TSTIN[16]; // rv 1
  assign CH0_TSTIN_in[17] = (CH0_TSTIN[17] === 1'bz) || CH0_TSTIN[17]; // rv 1
  assign CH0_TSTIN_in[18] = (CH0_TSTIN[18] === 1'bz) || CH0_TSTIN[18]; // rv 1
  assign CH0_TSTIN_in[19] = (CH0_TSTIN[19] === 1'bz) || CH0_TSTIN[19]; // rv 1
  assign CH0_TSTIN_in[1] = (CH0_TSTIN[1] === 1'bz) || CH0_TSTIN[1]; // rv 1
  assign CH0_TSTIN_in[2] = (CH0_TSTIN[2] === 1'bz) || CH0_TSTIN[2]; // rv 1
  assign CH0_TSTIN_in[3] = (CH0_TSTIN[3] === 1'bz) || CH0_TSTIN[3]; // rv 1
  assign CH0_TSTIN_in[4] = (CH0_TSTIN[4] === 1'bz) || CH0_TSTIN[4]; // rv 1
  assign CH0_TSTIN_in[5] = (CH0_TSTIN[5] === 1'bz) || CH0_TSTIN[5]; // rv 1
  assign CH0_TSTIN_in[6] = (CH0_TSTIN[6] === 1'bz) || CH0_TSTIN[6]; // rv 1
  assign CH0_TSTIN_in[7] = (CH0_TSTIN[7] === 1'bz) || CH0_TSTIN[7]; // rv 1
  assign CH0_TSTIN_in[8] = (CH0_TSTIN[8] === 1'bz) || CH0_TSTIN[8]; // rv 1
  assign CH0_TSTIN_in[9] = (CH0_TSTIN[9] === 1'bz) || CH0_TSTIN[9]; // rv 1
  assign CH0_TX10GSTAT_M_in = CH0_TX10GSTAT_M;
  assign CH0_TXBUFSTATUS_M_in = CH0_TXBUFSTATUS_M;
  assign CH0_TXCOMFINISH_M_in = CH0_TXCOMFINISH_M;
  assign CH0_TXCOMINIT_in = (CH0_TXCOMINIT === 1'bz) || CH0_TXCOMINIT; // rv 1
  assign CH0_TXCOMSAS_in = (CH0_TXCOMSAS === 1'bz) || CH0_TXCOMSAS; // rv 1
  assign CH0_TXCOMWAKE_in = (CH0_TXCOMWAKE === 1'bz) || CH0_TXCOMWAKE; // rv 1
  assign CH0_TXCTRL0_in[0] = (CH0_TXCTRL0[0] === 1'bz) || CH0_TXCTRL0[0]; // rv 1
  assign CH0_TXCTRL0_in[10] = (CH0_TXCTRL0[10] === 1'bz) || CH0_TXCTRL0[10]; // rv 1
  assign CH0_TXCTRL0_in[11] = (CH0_TXCTRL0[11] === 1'bz) || CH0_TXCTRL0[11]; // rv 1
  assign CH0_TXCTRL0_in[12] = (CH0_TXCTRL0[12] === 1'bz) || CH0_TXCTRL0[12]; // rv 1
  assign CH0_TXCTRL0_in[13] = (CH0_TXCTRL0[13] === 1'bz) || CH0_TXCTRL0[13]; // rv 1
  assign CH0_TXCTRL0_in[14] = (CH0_TXCTRL0[14] === 1'bz) || CH0_TXCTRL0[14]; // rv 1
  assign CH0_TXCTRL0_in[15] = (CH0_TXCTRL0[15] === 1'bz) || CH0_TXCTRL0[15]; // rv 1
  assign CH0_TXCTRL0_in[1] = (CH0_TXCTRL0[1] === 1'bz) || CH0_TXCTRL0[1]; // rv 1
  assign CH0_TXCTRL0_in[2] = (CH0_TXCTRL0[2] === 1'bz) || CH0_TXCTRL0[2]; // rv 1
  assign CH0_TXCTRL0_in[3] = (CH0_TXCTRL0[3] === 1'bz) || CH0_TXCTRL0[3]; // rv 1
  assign CH0_TXCTRL0_in[4] = (CH0_TXCTRL0[4] === 1'bz) || CH0_TXCTRL0[4]; // rv 1
  assign CH0_TXCTRL0_in[5] = (CH0_TXCTRL0[5] === 1'bz) || CH0_TXCTRL0[5]; // rv 1
  assign CH0_TXCTRL0_in[6] = (CH0_TXCTRL0[6] === 1'bz) || CH0_TXCTRL0[6]; // rv 1
  assign CH0_TXCTRL0_in[7] = (CH0_TXCTRL0[7] === 1'bz) || CH0_TXCTRL0[7]; // rv 1
  assign CH0_TXCTRL0_in[8] = (CH0_TXCTRL0[8] === 1'bz) || CH0_TXCTRL0[8]; // rv 1
  assign CH0_TXCTRL0_in[9] = (CH0_TXCTRL0[9] === 1'bz) || CH0_TXCTRL0[9]; // rv 1
  assign CH0_TXCTRL1_in[0] = (CH0_TXCTRL1[0] === 1'bz) || CH0_TXCTRL1[0]; // rv 1
  assign CH0_TXCTRL1_in[10] = (CH0_TXCTRL1[10] === 1'bz) || CH0_TXCTRL1[10]; // rv 1
  assign CH0_TXCTRL1_in[11] = (CH0_TXCTRL1[11] === 1'bz) || CH0_TXCTRL1[11]; // rv 1
  assign CH0_TXCTRL1_in[12] = (CH0_TXCTRL1[12] === 1'bz) || CH0_TXCTRL1[12]; // rv 1
  assign CH0_TXCTRL1_in[13] = (CH0_TXCTRL1[13] === 1'bz) || CH0_TXCTRL1[13]; // rv 1
  assign CH0_TXCTRL1_in[14] = (CH0_TXCTRL1[14] === 1'bz) || CH0_TXCTRL1[14]; // rv 1
  assign CH0_TXCTRL1_in[15] = (CH0_TXCTRL1[15] === 1'bz) || CH0_TXCTRL1[15]; // rv 1
  assign CH0_TXCTRL1_in[1] = (CH0_TXCTRL1[1] === 1'bz) || CH0_TXCTRL1[1]; // rv 1
  assign CH0_TXCTRL1_in[2] = (CH0_TXCTRL1[2] === 1'bz) || CH0_TXCTRL1[2]; // rv 1
  assign CH0_TXCTRL1_in[3] = (CH0_TXCTRL1[3] === 1'bz) || CH0_TXCTRL1[3]; // rv 1
  assign CH0_TXCTRL1_in[4] = (CH0_TXCTRL1[4] === 1'bz) || CH0_TXCTRL1[4]; // rv 1
  assign CH0_TXCTRL1_in[5] = (CH0_TXCTRL1[5] === 1'bz) || CH0_TXCTRL1[5]; // rv 1
  assign CH0_TXCTRL1_in[6] = (CH0_TXCTRL1[6] === 1'bz) || CH0_TXCTRL1[6]; // rv 1
  assign CH0_TXCTRL1_in[7] = (CH0_TXCTRL1[7] === 1'bz) || CH0_TXCTRL1[7]; // rv 1
  assign CH0_TXCTRL1_in[8] = (CH0_TXCTRL1[8] === 1'bz) || CH0_TXCTRL1[8]; // rv 1
  assign CH0_TXCTRL1_in[9] = (CH0_TXCTRL1[9] === 1'bz) || CH0_TXCTRL1[9]; // rv 1
  assign CH0_TXCTRL2_in[0] = (CH0_TXCTRL2[0] === 1'bz) || CH0_TXCTRL2[0]; // rv 1
  assign CH0_TXCTRL2_in[1] = (CH0_TXCTRL2[1] === 1'bz) || CH0_TXCTRL2[1]; // rv 1
  assign CH0_TXCTRL2_in[2] = (CH0_TXCTRL2[2] === 1'bz) || CH0_TXCTRL2[2]; // rv 1
  assign CH0_TXCTRL2_in[3] = (CH0_TXCTRL2[3] === 1'bz) || CH0_TXCTRL2[3]; // rv 1
  assign CH0_TXCTRL2_in[4] = (CH0_TXCTRL2[4] === 1'bz) || CH0_TXCTRL2[4]; // rv 1
  assign CH0_TXCTRL2_in[5] = (CH0_TXCTRL2[5] === 1'bz) || CH0_TXCTRL2[5]; // rv 1
  assign CH0_TXCTRL2_in[6] = (CH0_TXCTRL2[6] === 1'bz) || CH0_TXCTRL2[6]; // rv 1
  assign CH0_TXCTRL2_in[7] = (CH0_TXCTRL2[7] === 1'bz) || CH0_TXCTRL2[7]; // rv 1
  assign CH0_TXDAPICODEOVRDEN_in = (CH0_TXDAPICODEOVRDEN === 1'bz) || CH0_TXDAPICODEOVRDEN; // rv 1
  assign CH0_TXDAPICODERESET_in = (CH0_TXDAPICODERESET === 1'bz) || CH0_TXDAPICODERESET; // rv 1
  assign CH0_TXDATAEXTENDRSVD_in[0] = (CH0_TXDATAEXTENDRSVD[0] === 1'bz) || CH0_TXDATAEXTENDRSVD[0]; // rv 1
  assign CH0_TXDATAEXTENDRSVD_in[1] = (CH0_TXDATAEXTENDRSVD[1] === 1'bz) || CH0_TXDATAEXTENDRSVD[1]; // rv 1
  assign CH0_TXDATAEXTENDRSVD_in[2] = (CH0_TXDATAEXTENDRSVD[2] === 1'bz) || CH0_TXDATAEXTENDRSVD[2]; // rv 1
  assign CH0_TXDATAEXTENDRSVD_in[3] = (CH0_TXDATAEXTENDRSVD[3] === 1'bz) || CH0_TXDATAEXTENDRSVD[3]; // rv 1
  assign CH0_TXDATAEXTENDRSVD_in[4] = (CH0_TXDATAEXTENDRSVD[4] === 1'bz) || CH0_TXDATAEXTENDRSVD[4]; // rv 1
  assign CH0_TXDATAEXTENDRSVD_in[5] = (CH0_TXDATAEXTENDRSVD[5] === 1'bz) || CH0_TXDATAEXTENDRSVD[5]; // rv 1
  assign CH0_TXDATAEXTENDRSVD_in[6] = (CH0_TXDATAEXTENDRSVD[6] === 1'bz) || CH0_TXDATAEXTENDRSVD[6]; // rv 1
  assign CH0_TXDATAEXTENDRSVD_in[7] = (CH0_TXDATAEXTENDRSVD[7] === 1'bz) || CH0_TXDATAEXTENDRSVD[7]; // rv 1
  assign CH0_TXDCCDONE_M_in = CH0_TXDCCDONE_M;
  assign CH0_TXDEEMPH_in[0] = (CH0_TXDEEMPH[0] === 1'bz) || CH0_TXDEEMPH[0]; // rv 1
  assign CH0_TXDEEMPH_in[1] = (CH0_TXDEEMPH[1] === 1'bz) || CH0_TXDEEMPH[1]; // rv 1
  assign CH0_TXDETECTRX_in = (CH0_TXDETECTRX === 1'bz) || CH0_TXDETECTRX; // rv 1
  assign CH0_TXDIFFCTRL_in[0] = (CH0_TXDIFFCTRL[0] === 1'bz) || CH0_TXDIFFCTRL[0]; // rv 1
  assign CH0_TXDIFFCTRL_in[1] = (CH0_TXDIFFCTRL[1] === 1'bz) || CH0_TXDIFFCTRL[1]; // rv 1
  assign CH0_TXDIFFCTRL_in[2] = (CH0_TXDIFFCTRL[2] === 1'bz) || CH0_TXDIFFCTRL[2]; // rv 1
  assign CH0_TXDIFFCTRL_in[3] = (CH0_TXDIFFCTRL[3] === 1'bz) || CH0_TXDIFFCTRL[3]; // rv 1
  assign CH0_TXDIFFCTRL_in[4] = (CH0_TXDIFFCTRL[4] === 1'bz) || CH0_TXDIFFCTRL[4]; // rv 1
  assign CH0_TXDLYALIGNERR_M_in = CH0_TXDLYALIGNERR_M;
  assign CH0_TXDLYALIGNPROG_M_in = CH0_TXDLYALIGNPROG_M;
  assign CH0_TXDLYALIGNREQ_in = (CH0_TXDLYALIGNREQ === 1'bz) || CH0_TXDLYALIGNREQ; // rv 1
  assign CH0_TXELECIDLE_in = (CH0_TXELECIDLE === 1'bz) || CH0_TXELECIDLE; // rv 1
  assign CH0_TXHEADER_in[0] = (CH0_TXHEADER[0] === 1'bz) || CH0_TXHEADER[0]; // rv 1
  assign CH0_TXHEADER_in[1] = (CH0_TXHEADER[1] === 1'bz) || CH0_TXHEADER[1]; // rv 1
  assign CH0_TXHEADER_in[2] = (CH0_TXHEADER[2] === 1'bz) || CH0_TXHEADER[2]; // rv 1
  assign CH0_TXHEADER_in[3] = (CH0_TXHEADER[3] === 1'bz) || CH0_TXHEADER[3]; // rv 1
  assign CH0_TXHEADER_in[4] = (CH0_TXHEADER[4] === 1'bz) || CH0_TXHEADER[4]; // rv 1
  assign CH0_TXHEADER_in[5] = (CH0_TXHEADER[5] === 1'bz) || CH0_TXHEADER[5]; // rv 1
  assign CH0_TXINHIBIT_in = (CH0_TXINHIBIT === 1'bz) || CH0_TXINHIBIT; // rv 1
  assign CH0_TXLATCLK_in = (CH0_TXLATCLK === 1'bz) || CH0_TXLATCLK; // rv 1
  assign CH0_TXMAINCURSOR_in[0] = (CH0_TXMAINCURSOR[0] === 1'bz) || CH0_TXMAINCURSOR[0]; // rv 1
  assign CH0_TXMAINCURSOR_in[1] = (CH0_TXMAINCURSOR[1] === 1'bz) || CH0_TXMAINCURSOR[1]; // rv 1
  assign CH0_TXMAINCURSOR_in[2] = (CH0_TXMAINCURSOR[2] === 1'bz) || CH0_TXMAINCURSOR[2]; // rv 1
  assign CH0_TXMAINCURSOR_in[3] = (CH0_TXMAINCURSOR[3] === 1'bz) || CH0_TXMAINCURSOR[3]; // rv 1
  assign CH0_TXMAINCURSOR_in[4] = (CH0_TXMAINCURSOR[4] === 1'bz) || CH0_TXMAINCURSOR[4]; // rv 1
  assign CH0_TXMAINCURSOR_in[5] = (CH0_TXMAINCURSOR[5] === 1'bz) || CH0_TXMAINCURSOR[5]; // rv 1
  assign CH0_TXMAINCURSOR_in[6] = (CH0_TXMAINCURSOR[6] === 1'bz) || CH0_TXMAINCURSOR[6]; // rv 1
  assign CH0_TXMARGIN_in[0] = (CH0_TXMARGIN[0] === 1'bz) || CH0_TXMARGIN[0]; // rv 1
  assign CH0_TXMARGIN_in[1] = (CH0_TXMARGIN[1] === 1'bz) || CH0_TXMARGIN[1]; // rv 1
  assign CH0_TXMARGIN_in[2] = (CH0_TXMARGIN[2] === 1'bz) || CH0_TXMARGIN[2]; // rv 1
  assign CH0_TXMLDCHAINDONE_in = (CH0_TXMLDCHAINDONE === 1'bz) || CH0_TXMLDCHAINDONE; // rv 1
  assign CH0_TXMLDCHAINREQ_in = (CH0_TXMLDCHAINREQ === 1'bz) || CH0_TXMLDCHAINREQ; // rv 1
  assign CH0_TXONESZEROS_in = (CH0_TXONESZEROS === 1'bz) || CH0_TXONESZEROS; // rv 1
  assign CH0_TXOUTCLK_M_in = CH0_TXOUTCLK_M;
  assign CH0_TXPAUSEDELAYALIGN_in = (CH0_TXPAUSEDELAYALIGN === 1'bz) || CH0_TXPAUSEDELAYALIGN; // rv 1
  assign CH0_TXPCSRESETMASK_in = (CH0_TXPCSRESETMASK === 1'bz) || CH0_TXPCSRESETMASK; // rv 1
  assign CH0_TXPD_in[0] = (CH0_TXPD[0] === 1'bz) || CH0_TXPD[0]; // rv 1
  assign CH0_TXPD_in[1] = (CH0_TXPD[1] === 1'bz) || CH0_TXPD[1]; // rv 1
  assign CH0_TXPHALIGNDONE_M_in = CH0_TXPHALIGNDONE_M;
  assign CH0_TXPHALIGNERR_M_in = CH0_TXPHALIGNERR_M;
  assign CH0_TXPHALIGNOUTRSVD_M_in = CH0_TXPHALIGNOUTRSVD_M;
  assign CH0_TXPHALIGNREQ_in = (CH0_TXPHALIGNREQ === 1'bz) || CH0_TXPHALIGNREQ; // rv 1
  assign CH0_TXPHALIGNRESETMASK_in[0] = (CH0_TXPHALIGNRESETMASK[0] === 1'bz) || CH0_TXPHALIGNRESETMASK[0]; // rv 1
  assign CH0_TXPHALIGNRESETMASK_in[1] = (CH0_TXPHALIGNRESETMASK[1] === 1'bz) || CH0_TXPHALIGNRESETMASK[1]; // rv 1
  assign CH0_TXPHDLYPD_in = (CH0_TXPHDLYPD === 1'bz) || CH0_TXPHDLYPD; // rv 1
  assign CH0_TXPHDLYRESETDONE_M_in = CH0_TXPHDLYRESETDONE_M;
  assign CH0_TXPHDLYRESET_in = (CH0_TXPHDLYRESET === 1'bz) || CH0_TXPHDLYRESET; // rv 1
  assign CH0_TXPHDLYTSTCLK_in = (CH0_TXPHDLYTSTCLK === 1'bz) || CH0_TXPHDLYTSTCLK; // rv 1
  assign CH0_TXPHSETINITDONE_M_in = CH0_TXPHSETINITDONE_M;
  assign CH0_TXPHSETINITREQ_in = (CH0_TXPHSETINITREQ === 1'bz) || CH0_TXPHSETINITREQ; // rv 1
  assign CH0_TXPHSHIFT180DONE_M_in = CH0_TXPHSHIFT180DONE_M;
  assign CH0_TXPHSHIFT180_in = (CH0_TXPHSHIFT180 === 1'bz) || CH0_TXPHSHIFT180; // rv 1
  assign CH0_TXPICODEOVRDEN_in = (CH0_TXPICODEOVRDEN === 1'bz) || CH0_TXPICODEOVRDEN; // rv 1
  assign CH0_TXPICODERESET_in = (CH0_TXPICODERESET === 1'bz) || CH0_TXPICODERESET; // rv 1
  assign CH0_TXPIPPMEN_in = (CH0_TXPIPPMEN === 1'bz) || CH0_TXPIPPMEN; // rv 1
  assign CH0_TXPIPPMSTEPSIZE_in[0] = (CH0_TXPIPPMSTEPSIZE[0] === 1'bz) || CH0_TXPIPPMSTEPSIZE[0]; // rv 1
  assign CH0_TXPIPPMSTEPSIZE_in[1] = (CH0_TXPIPPMSTEPSIZE[1] === 1'bz) || CH0_TXPIPPMSTEPSIZE[1]; // rv 1
  assign CH0_TXPIPPMSTEPSIZE_in[2] = (CH0_TXPIPPMSTEPSIZE[2] === 1'bz) || CH0_TXPIPPMSTEPSIZE[2]; // rv 1
  assign CH0_TXPIPPMSTEPSIZE_in[3] = (CH0_TXPIPPMSTEPSIZE[3] === 1'bz) || CH0_TXPIPPMSTEPSIZE[3]; // rv 1
  assign CH0_TXPIPPMSTEPSIZE_in[4] = (CH0_TXPIPPMSTEPSIZE[4] === 1'bz) || CH0_TXPIPPMSTEPSIZE[4]; // rv 1
  assign CH0_TXPISOPD_in = (CH0_TXPISOPD === 1'bz) || CH0_TXPISOPD; // rv 1
  assign CH0_TXPMARESETDONE_M_in = CH0_TXPMARESETDONE_M;
  assign CH0_TXPMARESETMASK_in[0] = (CH0_TXPMARESETMASK[0] === 1'bz) || CH0_TXPMARESETMASK[0]; // rv 1
  assign CH0_TXPMARESETMASK_in[1] = (CH0_TXPMARESETMASK[1] === 1'bz) || CH0_TXPMARESETMASK[1]; // rv 1
  assign CH0_TXPMARESETMASK_in[2] = (CH0_TXPMARESETMASK[2] === 1'bz) || CH0_TXPMARESETMASK[2]; // rv 1
  assign CH0_TXPOLARITY_in = (CH0_TXPOLARITY === 1'bz) || CH0_TXPOLARITY; // rv 1
  assign CH0_TXPOSTCURSOR_in[0] = (CH0_TXPOSTCURSOR[0] === 1'bz) || CH0_TXPOSTCURSOR[0]; // rv 1
  assign CH0_TXPOSTCURSOR_in[1] = (CH0_TXPOSTCURSOR[1] === 1'bz) || CH0_TXPOSTCURSOR[1]; // rv 1
  assign CH0_TXPOSTCURSOR_in[2] = (CH0_TXPOSTCURSOR[2] === 1'bz) || CH0_TXPOSTCURSOR[2]; // rv 1
  assign CH0_TXPOSTCURSOR_in[3] = (CH0_TXPOSTCURSOR[3] === 1'bz) || CH0_TXPOSTCURSOR[3]; // rv 1
  assign CH0_TXPOSTCURSOR_in[4] = (CH0_TXPOSTCURSOR[4] === 1'bz) || CH0_TXPOSTCURSOR[4]; // rv 1
  assign CH0_TXPRBSFORCEERR_in = (CH0_TXPRBSFORCEERR === 1'bz) || CH0_TXPRBSFORCEERR; // rv 1
  assign CH0_TXPRBSSEL_in[0] = (CH0_TXPRBSSEL[0] === 1'bz) || CH0_TXPRBSSEL[0]; // rv 1
  assign CH0_TXPRBSSEL_in[1] = (CH0_TXPRBSSEL[1] === 1'bz) || CH0_TXPRBSSEL[1]; // rv 1
  assign CH0_TXPRBSSEL_in[2] = (CH0_TXPRBSSEL[2] === 1'bz) || CH0_TXPRBSSEL[2]; // rv 1
  assign CH0_TXPRBSSEL_in[3] = (CH0_TXPRBSSEL[3] === 1'bz) || CH0_TXPRBSSEL[3]; // rv 1
  assign CH0_TXPRECURSOR_in[0] = (CH0_TXPRECURSOR[0] === 1'bz) || CH0_TXPRECURSOR[0]; // rv 1
  assign CH0_TXPRECURSOR_in[1] = (CH0_TXPRECURSOR[1] === 1'bz) || CH0_TXPRECURSOR[1]; // rv 1
  assign CH0_TXPRECURSOR_in[2] = (CH0_TXPRECURSOR[2] === 1'bz) || CH0_TXPRECURSOR[2]; // rv 1
  assign CH0_TXPRECURSOR_in[3] = (CH0_TXPRECURSOR[3] === 1'bz) || CH0_TXPRECURSOR[3]; // rv 1
  assign CH0_TXPRECURSOR_in[4] = (CH0_TXPRECURSOR[4] === 1'bz) || CH0_TXPRECURSOR[4]; // rv 1
  assign CH0_TXPROGDIVRESETDONE_M_in = CH0_TXPROGDIVRESETDONE_M;
  assign CH0_TXPROGDIVRESET_in = (CH0_TXPROGDIVRESET === 1'bz) || CH0_TXPROGDIVRESET; // rv 1
  assign CH0_TXRATE_in[0] = (CH0_TXRATE[0] === 1'bz) || CH0_TXRATE[0]; // rv 1
  assign CH0_TXRATE_in[1] = (CH0_TXRATE[1] === 1'bz) || CH0_TXRATE[1]; // rv 1
  assign CH0_TXRATE_in[2] = (CH0_TXRATE[2] === 1'bz) || CH0_TXRATE[2]; // rv 1
  assign CH0_TXRATE_in[3] = (CH0_TXRATE[3] === 1'bz) || CH0_TXRATE[3]; // rv 1
  assign CH0_TXRATE_in[4] = (CH0_TXRATE[4] === 1'bz) || CH0_TXRATE[4]; // rv 1
  assign CH0_TXRATE_in[5] = (CH0_TXRATE[5] === 1'bz) || CH0_TXRATE[5]; // rv 1
  assign CH0_TXRATE_in[6] = (CH0_TXRATE[6] === 1'bz) || CH0_TXRATE[6]; // rv 1
  assign CH0_TXRATE_in[7] = (CH0_TXRATE[7] === 1'bz) || CH0_TXRATE[7]; // rv 1
  assign CH0_TXRESETDONE_M_in = CH0_TXRESETDONE_M;
  assign CH0_TXRESETMODE_in[0] = (CH0_TXRESETMODE[0] === 1'bz) || CH0_TXRESETMODE[0]; // rv 1
  assign CH0_TXRESETMODE_in[1] = (CH0_TXRESETMODE[1] === 1'bz) || CH0_TXRESETMODE[1]; // rv 1
  assign CH0_TXSEQUENCE_in[0] = (CH0_TXSEQUENCE[0] === 1'bz) || CH0_TXSEQUENCE[0]; // rv 1
  assign CH0_TXSEQUENCE_in[1] = (CH0_TXSEQUENCE[1] === 1'bz) || CH0_TXSEQUENCE[1]; // rv 1
  assign CH0_TXSEQUENCE_in[2] = (CH0_TXSEQUENCE[2] === 1'bz) || CH0_TXSEQUENCE[2]; // rv 1
  assign CH0_TXSEQUENCE_in[3] = (CH0_TXSEQUENCE[3] === 1'bz) || CH0_TXSEQUENCE[3]; // rv 1
  assign CH0_TXSEQUENCE_in[4] = (CH0_TXSEQUENCE[4] === 1'bz) || CH0_TXSEQUENCE[4]; // rv 1
  assign CH0_TXSEQUENCE_in[5] = (CH0_TXSEQUENCE[5] === 1'bz) || CH0_TXSEQUENCE[5]; // rv 1
  assign CH0_TXSEQUENCE_in[6] = (CH0_TXSEQUENCE[6] === 1'bz) || CH0_TXSEQUENCE[6]; // rv 1
  assign CH0_TXSWING_in = (CH0_TXSWING === 1'bz) || CH0_TXSWING; // rv 1
  assign CH0_TXSYNCALLIN_in = (CH0_TXSYNCALLIN === 1'bz) || CH0_TXSYNCALLIN; // rv 1
  assign CH0_TXSYNCDONE_M_in = CH0_TXSYNCDONE_M;
  assign CH0_TXUSERRDY_in = (CH0_TXUSERRDY === 1'bz) || CH0_TXUSERRDY; // rv 1
  assign CH0_TXUSRCLK_in = (CH0_TXUSRCLK === 1'bz) || CH0_TXUSRCLK; // rv 1
  assign CH1_BUFGTCEMASK_M_in = CH1_BUFGTCEMASK_M;
  assign CH1_BUFGTCE_M_in = CH1_BUFGTCE_M;
  assign CH1_BUFGTDIV_M_in = CH1_BUFGTDIV_M;
  assign CH1_BUFGTRSTMASK_M_in = CH1_BUFGTRSTMASK_M;
  assign CH1_BUFGTRST_M_in = CH1_BUFGTRST_M;
  assign CH1_CDRBMCDRREQ_in = (CH1_CDRBMCDRREQ === 1'bz) || CH1_CDRBMCDRREQ; // rv 1
  assign CH1_CDRFREQOS_in = (CH1_CDRFREQOS === 1'bz) || CH1_CDRFREQOS; // rv 1
  assign CH1_CDRINCPCTRL_in = (CH1_CDRINCPCTRL === 1'bz) || CH1_CDRINCPCTRL; // rv 1
  assign CH1_CDRSTEPDIR_in = (CH1_CDRSTEPDIR === 1'bz) || CH1_CDRSTEPDIR; // rv 1
  assign CH1_CDRSTEPSQ_in = (CH1_CDRSTEPSQ === 1'bz) || CH1_CDRSTEPSQ; // rv 1
  assign CH1_CDRSTEPSX_in = (CH1_CDRSTEPSX === 1'bz) || CH1_CDRSTEPSX; // rv 1
  assign CH1_CFOKOVRDFINISH_in = (CH1_CFOKOVRDFINISH === 1'bz) || CH1_CFOKOVRDFINISH; // rv 1
  assign CH1_CFOKOVRDPULSE_in = (CH1_CFOKOVRDPULSE === 1'bz) || CH1_CFOKOVRDPULSE; // rv 1
  assign CH1_CFOKOVRDRDY0_M_in = CH1_CFOKOVRDRDY0_M;
  assign CH1_CFOKOVRDRDY1_M_in = CH1_CFOKOVRDRDY1_M;
  assign CH1_CFOKOVRDSTART_in = (CH1_CFOKOVRDSTART === 1'bz) || CH1_CFOKOVRDSTART; // rv 1
  assign CH1_CLKRSVD0_in = (CH1_CLKRSVD0 === 1'bz) || CH1_CLKRSVD0; // rv 1
  assign CH1_CLKRSVD1_in = (CH1_CLKRSVD1 === 1'bz) || CH1_CLKRSVD1; // rv 1
  assign CH1_DMONFIFORESET_in = (CH1_DMONFIFORESET === 1'bz) || CH1_DMONFIFORESET; // rv 1
  assign CH1_DMONITORCLK_in = (CH1_DMONITORCLK === 1'bz) || CH1_DMONITORCLK; // rv 1
  assign CH1_DMONITOROUT_M_in = CH1_DMONITOROUT_M;
  assign CH1_EYESCANDATAERROR_M_in = CH1_EYESCANDATAERROR_M;
  assign CH1_EYESCANRESET_in = (CH1_EYESCANRESET === 1'bz) || CH1_EYESCANRESET; // rv 1
  assign CH1_EYESCANTRIGGER_in = (CH1_EYESCANTRIGGER === 1'bz) || CH1_EYESCANTRIGGER; // rv 1
  assign CH1_GTRSVD_in[0] = (CH1_GTRSVD[0] === 1'bz) || CH1_GTRSVD[0]; // rv 1
  assign CH1_GTRSVD_in[10] = (CH1_GTRSVD[10] === 1'bz) || CH1_GTRSVD[10]; // rv 1
  assign CH1_GTRSVD_in[11] = (CH1_GTRSVD[11] === 1'bz) || CH1_GTRSVD[11]; // rv 1
  assign CH1_GTRSVD_in[12] = (CH1_GTRSVD[12] === 1'bz) || CH1_GTRSVD[12]; // rv 1
  assign CH1_GTRSVD_in[13] = (CH1_GTRSVD[13] === 1'bz) || CH1_GTRSVD[13]; // rv 1
  assign CH1_GTRSVD_in[14] = (CH1_GTRSVD[14] === 1'bz) || CH1_GTRSVD[14]; // rv 1
  assign CH1_GTRSVD_in[15] = (CH1_GTRSVD[15] === 1'bz) || CH1_GTRSVD[15]; // rv 1
  assign CH1_GTRSVD_in[1] = (CH1_GTRSVD[1] === 1'bz) || CH1_GTRSVD[1]; // rv 1
  assign CH1_GTRSVD_in[2] = (CH1_GTRSVD[2] === 1'bz) || CH1_GTRSVD[2]; // rv 1
  assign CH1_GTRSVD_in[3] = (CH1_GTRSVD[3] === 1'bz) || CH1_GTRSVD[3]; // rv 1
  assign CH1_GTRSVD_in[4] = (CH1_GTRSVD[4] === 1'bz) || CH1_GTRSVD[4]; // rv 1
  assign CH1_GTRSVD_in[5] = (CH1_GTRSVD[5] === 1'bz) || CH1_GTRSVD[5]; // rv 1
  assign CH1_GTRSVD_in[6] = (CH1_GTRSVD[6] === 1'bz) || CH1_GTRSVD[6]; // rv 1
  assign CH1_GTRSVD_in[7] = (CH1_GTRSVD[7] === 1'bz) || CH1_GTRSVD[7]; // rv 1
  assign CH1_GTRSVD_in[8] = (CH1_GTRSVD[8] === 1'bz) || CH1_GTRSVD[8]; // rv 1
  assign CH1_GTRSVD_in[9] = (CH1_GTRSVD[9] === 1'bz) || CH1_GTRSVD[9]; // rv 1
  assign CH1_GTRXRESET_in = (CH1_GTRXRESET === 1'bz) || CH1_GTRXRESET; // rv 1
  assign CH1_GTTXRESET_in = (CH1_GTTXRESET === 1'bz) || CH1_GTTXRESET; // rv 1
  assign CH1_HSDPPCSRESET_in = (CH1_HSDPPCSRESET === 1'bz) || CH1_HSDPPCSRESET; // rv 1
  assign CH1_ILORESETDONE_M_in = CH1_ILORESETDONE_M;
  assign CH1_ILORESETMASK_in = (CH1_ILORESETMASK === 1'bz) || CH1_ILORESETMASK; // rv 1
  assign CH1_ILORESET_in = (CH1_ILORESET === 1'bz) || CH1_ILORESET; // rv 1
  assign CH1_LOOPBACK_in[0] = (CH1_LOOPBACK[0] === 1'bz) || CH1_LOOPBACK[0]; // rv 1
  assign CH1_LOOPBACK_in[1] = (CH1_LOOPBACK[1] === 1'bz) || CH1_LOOPBACK[1]; // rv 1
  assign CH1_LOOPBACK_in[2] = (CH1_LOOPBACK[2] === 1'bz) || CH1_LOOPBACK[2]; // rv 1
  assign CH1_PCIERSTB_in = (CH1_PCIERSTB === 1'bz) || CH1_PCIERSTB; // rv 1
  assign CH1_PCSRSVDIN_in[0] = (CH1_PCSRSVDIN[0] === 1'bz) || CH1_PCSRSVDIN[0]; // rv 1
  assign CH1_PCSRSVDIN_in[10] = (CH1_PCSRSVDIN[10] === 1'bz) || CH1_PCSRSVDIN[10]; // rv 1
  assign CH1_PCSRSVDIN_in[11] = (CH1_PCSRSVDIN[11] === 1'bz) || CH1_PCSRSVDIN[11]; // rv 1
  assign CH1_PCSRSVDIN_in[12] = (CH1_PCSRSVDIN[12] === 1'bz) || CH1_PCSRSVDIN[12]; // rv 1
  assign CH1_PCSRSVDIN_in[13] = (CH1_PCSRSVDIN[13] === 1'bz) || CH1_PCSRSVDIN[13]; // rv 1
  assign CH1_PCSRSVDIN_in[14] = (CH1_PCSRSVDIN[14] === 1'bz) || CH1_PCSRSVDIN[14]; // rv 1
  assign CH1_PCSRSVDIN_in[15] = (CH1_PCSRSVDIN[15] === 1'bz) || CH1_PCSRSVDIN[15]; // rv 1
  assign CH1_PCSRSVDIN_in[1] = (CH1_PCSRSVDIN[1] === 1'bz) || CH1_PCSRSVDIN[1]; // rv 1
  assign CH1_PCSRSVDIN_in[2] = (CH1_PCSRSVDIN[2] === 1'bz) || CH1_PCSRSVDIN[2]; // rv 1
  assign CH1_PCSRSVDIN_in[3] = (CH1_PCSRSVDIN[3] === 1'bz) || CH1_PCSRSVDIN[3]; // rv 1
  assign CH1_PCSRSVDIN_in[4] = (CH1_PCSRSVDIN[4] === 1'bz) || CH1_PCSRSVDIN[4]; // rv 1
  assign CH1_PCSRSVDIN_in[5] = (CH1_PCSRSVDIN[5] === 1'bz) || CH1_PCSRSVDIN[5]; // rv 1
  assign CH1_PCSRSVDIN_in[6] = (CH1_PCSRSVDIN[6] === 1'bz) || CH1_PCSRSVDIN[6]; // rv 1
  assign CH1_PCSRSVDIN_in[7] = (CH1_PCSRSVDIN[7] === 1'bz) || CH1_PCSRSVDIN[7]; // rv 1
  assign CH1_PCSRSVDIN_in[8] = (CH1_PCSRSVDIN[8] === 1'bz) || CH1_PCSRSVDIN[8]; // rv 1
  assign CH1_PCSRSVDIN_in[9] = (CH1_PCSRSVDIN[9] === 1'bz) || CH1_PCSRSVDIN[9]; // rv 1
  assign CH1_PCSRSVDOUT_M_in = CH1_PCSRSVDOUT_M;
  assign CH1_PHYESMADAPTSAVE_in = (CH1_PHYESMADAPTSAVE === 1'bz) || CH1_PHYESMADAPTSAVE; // rv 1
  assign CH1_PHYREADY_M_in = CH1_PHYREADY_M;
  assign CH1_PHYSTATUS_M_in = CH1_PHYSTATUS_M;
  assign CH1_PINRSVDAS_M_in = CH1_PINRSVDAS_M;
  assign CH1_RESETEXCEPTION_M_in = CH1_RESETEXCEPTION_M;
  assign CH1_RX10GSTAT_M_in = CH1_RX10GSTAT_M;
  assign CH1_RXBUFSTATUS_M_in = CH1_RXBUFSTATUS_M;
  assign CH1_RXBYTEISALIGNED_M_in = CH1_RXBYTEISALIGNED_M;
  assign CH1_RXBYTEREALIGN_M_in = CH1_RXBYTEREALIGN_M;
  assign CH1_RXCDRHOLD_in = (CH1_RXCDRHOLD === 1'bz) || CH1_RXCDRHOLD; // rv 1
  assign CH1_RXCDRLOCK_M_in = CH1_RXCDRLOCK_M;
  assign CH1_RXCDROVRDEN_in = (CH1_RXCDROVRDEN === 1'bz) || CH1_RXCDROVRDEN; // rv 1
  assign CH1_RXCDRPHDONE_M_in = CH1_RXCDRPHDONE_M;
  assign CH1_RXCDRRESET_in = (CH1_RXCDRRESET === 1'bz) || CH1_RXCDRRESET; // rv 1
  assign CH1_RXCHANBONDSEQ_M_in = CH1_RXCHANBONDSEQ_M;
  assign CH1_RXCHANISALIGNED_M_in = CH1_RXCHANISALIGNED_M;
  assign CH1_RXCHANREALIGN_M_in = CH1_RXCHANREALIGN_M;
  assign CH1_RXCHBONDI_in[0] = (CH1_RXCHBONDI[0] === 1'bz) || CH1_RXCHBONDI[0]; // rv 1
  assign CH1_RXCHBONDI_in[1] = (CH1_RXCHBONDI[1] === 1'bz) || CH1_RXCHBONDI[1]; // rv 1
  assign CH1_RXCHBONDI_in[2] = (CH1_RXCHBONDI[2] === 1'bz) || CH1_RXCHBONDI[2]; // rv 1
  assign CH1_RXCHBONDI_in[3] = (CH1_RXCHBONDI[3] === 1'bz) || CH1_RXCHBONDI[3]; // rv 1
  assign CH1_RXCHBONDI_in[4] = (CH1_RXCHBONDI[4] === 1'bz) || CH1_RXCHBONDI[4]; // rv 1
  assign CH1_RXCHBONDO_M_in = CH1_RXCHBONDO_M;
  assign CH1_RXCLKCORCNT_M_in = CH1_RXCLKCORCNT_M;
  assign CH1_RXCOMINITDET_M_in = CH1_RXCOMINITDET_M;
  assign CH1_RXCOMMADET_M_in = CH1_RXCOMMADET_M;
  assign CH1_RXCOMSASDET_M_in = CH1_RXCOMSASDET_M;
  assign CH1_RXCOMWAKEDET_M_in = CH1_RXCOMWAKEDET_M;
  assign CH1_RXCTRL0_M_in = CH1_RXCTRL0_M;
  assign CH1_RXCTRL1_M_in = CH1_RXCTRL1_M;
  assign CH1_RXCTRL2_M_in = CH1_RXCTRL2_M;
  assign CH1_RXCTRL3_M_in = CH1_RXCTRL3_M;
  assign CH1_RXDAPICODEOVRDEN_in = (CH1_RXDAPICODEOVRDEN === 1'bz) || CH1_RXDAPICODEOVRDEN; // rv 1
  assign CH1_RXDAPICODERESET_in = (CH1_RXDAPICODERESET === 1'bz) || CH1_RXDAPICODERESET; // rv 1
  assign CH1_RXDATAEXTENDRSVD_M_in = CH1_RXDATAEXTENDRSVD_M;
  assign CH1_RXDATAVALID_M_in = CH1_RXDATAVALID_M;
  assign CH1_RXDATA_M_in = CH1_RXDATA_M;
  assign CH1_RXDCCDONE_M_in = CH1_RXDCCDONE_M;
  assign CH1_RXDLYALIGNERR_M_in = CH1_RXDLYALIGNERR_M;
  assign CH1_RXDLYALIGNPROG_M_in = CH1_RXDLYALIGNPROG_M;
  assign CH1_RXDLYALIGNREQ_in = (CH1_RXDLYALIGNREQ === 1'bz) || CH1_RXDLYALIGNREQ; // rv 1
  assign CH1_RXELECIDLE_M_in = CH1_RXELECIDLE_M;
  assign CH1_RXEQTRAINING_in = (CH1_RXEQTRAINING === 1'bz) || CH1_RXEQTRAINING; // rv 1
  assign CH1_RXFINEALIGNDONE_M_in = CH1_RXFINEALIGNDONE_M;
  assign CH1_RXGEARBOXSLIP_in = (CH1_RXGEARBOXSLIP === 1'bz) || CH1_RXGEARBOXSLIP; // rv 1
  assign CH1_RXHEADERVALID_M_in = CH1_RXHEADERVALID_M;
  assign CH1_RXHEADER_M_in = CH1_RXHEADER_M;
  assign CH1_RXLATCLK_in = (CH1_RXLATCLK === 1'bz) || CH1_RXLATCLK; // rv 1
  assign CH1_RXLPMEN_in = (CH1_RXLPMEN === 1'bz) || CH1_RXLPMEN; // rv 1
  assign CH1_RXMLDCHAINDONE_in = (CH1_RXMLDCHAINDONE === 1'bz) || CH1_RXMLDCHAINDONE; // rv 1
  assign CH1_RXMLDCHAINREQ_in = (CH1_RXMLDCHAINREQ === 1'bz) || CH1_RXMLDCHAINREQ; // rv 1
  assign CH1_RXMLFINEALIGNREQ_in = (CH1_RXMLFINEALIGNREQ === 1'bz) || CH1_RXMLFINEALIGNREQ; // rv 1
  assign CH1_RXOOBRESET_in = (CH1_RXOOBRESET === 1'bz) || CH1_RXOOBRESET; // rv 1
  assign CH1_RXOSINTDONE_M_in = CH1_RXOSINTDONE_M;
  assign CH1_RXOSINTSTARTED_M_in = CH1_RXOSINTSTARTED_M;
  assign CH1_RXOSINTSTROBEDONE_M_in = CH1_RXOSINTSTROBEDONE_M;
  assign CH1_RXOSINTSTROBESTARTED_M_in = CH1_RXOSINTSTROBESTARTED_M;
  assign CH1_RXPCSRESETMASK_in[0] = (CH1_RXPCSRESETMASK[0] === 1'bz) || CH1_RXPCSRESETMASK[0]; // rv 1
  assign CH1_RXPCSRESETMASK_in[1] = (CH1_RXPCSRESETMASK[1] === 1'bz) || CH1_RXPCSRESETMASK[1]; // rv 1
  assign CH1_RXPCSRESETMASK_in[2] = (CH1_RXPCSRESETMASK[2] === 1'bz) || CH1_RXPCSRESETMASK[2]; // rv 1
  assign CH1_RXPCSRESETMASK_in[3] = (CH1_RXPCSRESETMASK[3] === 1'bz) || CH1_RXPCSRESETMASK[3]; // rv 1
  assign CH1_RXPCSRESETMASK_in[4] = (CH1_RXPCSRESETMASK[4] === 1'bz) || CH1_RXPCSRESETMASK[4]; // rv 1
  assign CH1_RXPD_in[0] = (CH1_RXPD[0] === 1'bz) || CH1_RXPD[0]; // rv 1
  assign CH1_RXPD_in[1] = (CH1_RXPD[1] === 1'bz) || CH1_RXPD[1]; // rv 1
  assign CH1_RXPHALIGNDONE_M_in = CH1_RXPHALIGNDONE_M;
  assign CH1_RXPHALIGNERR_M_in = CH1_RXPHALIGNERR_M;
  assign CH1_RXPHALIGNREQ_in = (CH1_RXPHALIGNREQ === 1'bz) || CH1_RXPHALIGNREQ; // rv 1
  assign CH1_RXPHALIGNRESETMASK_in[0] = (CH1_RXPHALIGNRESETMASK[0] === 1'bz) || CH1_RXPHALIGNRESETMASK[0]; // rv 1
  assign CH1_RXPHALIGNRESETMASK_in[1] = (CH1_RXPHALIGNRESETMASK[1] === 1'bz) || CH1_RXPHALIGNRESETMASK[1]; // rv 1
  assign CH1_RXPHDLYPD_in = (CH1_RXPHDLYPD === 1'bz) || CH1_RXPHDLYPD; // rv 1
  assign CH1_RXPHDLYRESETDONE_M_in = CH1_RXPHDLYRESETDONE_M;
  assign CH1_RXPHDLYRESET_in = (CH1_RXPHDLYRESET === 1'bz) || CH1_RXPHDLYRESET; // rv 1
  assign CH1_RXPHSETINITDONE_M_in = CH1_RXPHSETINITDONE_M;
  assign CH1_RXPHSETINITREQ_in = (CH1_RXPHSETINITREQ === 1'bz) || CH1_RXPHSETINITREQ; // rv 1
  assign CH1_RXPHSHIFT180DONE_M_in = CH1_RXPHSHIFT180DONE_M;
  assign CH1_RXPHSHIFT180_in = (CH1_RXPHSHIFT180 === 1'bz) || CH1_RXPHSHIFT180; // rv 1
  assign CH1_RXPMARESETDONE_M_in = CH1_RXPMARESETDONE_M;
  assign CH1_RXPMARESETMASK_in[0] = (CH1_RXPMARESETMASK[0] === 1'bz) || CH1_RXPMARESETMASK[0]; // rv 1
  assign CH1_RXPMARESETMASK_in[1] = (CH1_RXPMARESETMASK[1] === 1'bz) || CH1_RXPMARESETMASK[1]; // rv 1
  assign CH1_RXPMARESETMASK_in[2] = (CH1_RXPMARESETMASK[2] === 1'bz) || CH1_RXPMARESETMASK[2]; // rv 1
  assign CH1_RXPMARESETMASK_in[3] = (CH1_RXPMARESETMASK[3] === 1'bz) || CH1_RXPMARESETMASK[3]; // rv 1
  assign CH1_RXPMARESETMASK_in[4] = (CH1_RXPMARESETMASK[4] === 1'bz) || CH1_RXPMARESETMASK[4]; // rv 1
  assign CH1_RXPMARESETMASK_in[5] = (CH1_RXPMARESETMASK[5] === 1'bz) || CH1_RXPMARESETMASK[5]; // rv 1
  assign CH1_RXPMARESETMASK_in[6] = (CH1_RXPMARESETMASK[6] === 1'bz) || CH1_RXPMARESETMASK[6]; // rv 1
  assign CH1_RXPOLARITY_in = (CH1_RXPOLARITY === 1'bz) || CH1_RXPOLARITY; // rv 1
  assign CH1_RXPRBSCNTRESET_in = (CH1_RXPRBSCNTRESET === 1'bz) || CH1_RXPRBSCNTRESET; // rv 1
  assign CH1_RXPRBSERR_M_in = CH1_RXPRBSERR_M;
  assign CH1_RXPRBSLOCKED_M_in = CH1_RXPRBSLOCKED_M;
  assign CH1_RXPRBSSEL_in[0] = (CH1_RXPRBSSEL[0] === 1'bz) || CH1_RXPRBSSEL[0]; // rv 1
  assign CH1_RXPRBSSEL_in[1] = (CH1_RXPRBSSEL[1] === 1'bz) || CH1_RXPRBSSEL[1]; // rv 1
  assign CH1_RXPRBSSEL_in[2] = (CH1_RXPRBSSEL[2] === 1'bz) || CH1_RXPRBSSEL[2]; // rv 1
  assign CH1_RXPRBSSEL_in[3] = (CH1_RXPRBSSEL[3] === 1'bz) || CH1_RXPRBSSEL[3]; // rv 1
  assign CH1_RXPROGDIVRESETDONE_M_in = CH1_RXPROGDIVRESETDONE_M;
  assign CH1_RXPROGDIVRESET_in = (CH1_RXPROGDIVRESET === 1'bz) || CH1_RXPROGDIVRESET; // rv 1
  assign CH1_RXRATE_in[0] = (CH1_RXRATE[0] === 1'bz) || CH1_RXRATE[0]; // rv 1
  assign CH1_RXRATE_in[1] = (CH1_RXRATE[1] === 1'bz) || CH1_RXRATE[1]; // rv 1
  assign CH1_RXRATE_in[2] = (CH1_RXRATE[2] === 1'bz) || CH1_RXRATE[2]; // rv 1
  assign CH1_RXRATE_in[3] = (CH1_RXRATE[3] === 1'bz) || CH1_RXRATE[3]; // rv 1
  assign CH1_RXRATE_in[4] = (CH1_RXRATE[4] === 1'bz) || CH1_RXRATE[4]; // rv 1
  assign CH1_RXRATE_in[5] = (CH1_RXRATE[5] === 1'bz) || CH1_RXRATE[5]; // rv 1
  assign CH1_RXRATE_in[6] = (CH1_RXRATE[6] === 1'bz) || CH1_RXRATE[6]; // rv 1
  assign CH1_RXRATE_in[7] = (CH1_RXRATE[7] === 1'bz) || CH1_RXRATE[7]; // rv 1
  assign CH1_RXRESETDONE_M_in = CH1_RXRESETDONE_M;
  assign CH1_RXRESETMODE_in[0] = (CH1_RXRESETMODE[0] === 1'bz) || CH1_RXRESETMODE[0]; // rv 1
  assign CH1_RXRESETMODE_in[1] = (CH1_RXRESETMODE[1] === 1'bz) || CH1_RXRESETMODE[1]; // rv 1
  assign CH1_RXSLIDERDY_M_in = CH1_RXSLIDERDY_M;
  assign CH1_RXSLIDE_in = (CH1_RXSLIDE === 1'bz) || CH1_RXSLIDE; // rv 1
  assign CH1_RXSTARTOFSEQ_M_in = CH1_RXSTARTOFSEQ_M;
  assign CH1_RXSTATUS_M_in = CH1_RXSTATUS_M;
  assign CH1_RXSYNCALLIN_in = (CH1_RXSYNCALLIN === 1'bz) || CH1_RXSYNCALLIN; // rv 1
  assign CH1_RXSYNCDONE_M_in = CH1_RXSYNCDONE_M;
  assign CH1_RXTERMINATION_in = (CH1_RXTERMINATION === 1'bz) || CH1_RXTERMINATION; // rv 1
  assign CH1_RXUSERRDY_in = (CH1_RXUSERRDY === 1'bz) || CH1_RXUSERRDY; // rv 1
  assign CH1_RXUSRCLK_in = (CH1_RXUSRCLK === 1'bz) || CH1_RXUSRCLK; // rv 1
  assign CH1_RXVALID_M_in = CH1_RXVALID_M;
  assign CH1_TSTCLK0_in = (CH1_TSTCLK0 === 1'bz) || CH1_TSTCLK0; // rv 1
  assign CH1_TSTCLK1_in = (CH1_TSTCLK1 === 1'bz) || CH1_TSTCLK1; // rv 1
  assign CH1_TSTIN_in[0] = (CH1_TSTIN[0] === 1'bz) || CH1_TSTIN[0]; // rv 1
  assign CH1_TSTIN_in[10] = (CH1_TSTIN[10] === 1'bz) || CH1_TSTIN[10]; // rv 1
  assign CH1_TSTIN_in[11] = (CH1_TSTIN[11] === 1'bz) || CH1_TSTIN[11]; // rv 1
  assign CH1_TSTIN_in[12] = (CH1_TSTIN[12] === 1'bz) || CH1_TSTIN[12]; // rv 1
  assign CH1_TSTIN_in[13] = (CH1_TSTIN[13] === 1'bz) || CH1_TSTIN[13]; // rv 1
  assign CH1_TSTIN_in[14] = (CH1_TSTIN[14] === 1'bz) || CH1_TSTIN[14]; // rv 1
  assign CH1_TSTIN_in[15] = (CH1_TSTIN[15] === 1'bz) || CH1_TSTIN[15]; // rv 1
  assign CH1_TSTIN_in[16] = (CH1_TSTIN[16] === 1'bz) || CH1_TSTIN[16]; // rv 1
  assign CH1_TSTIN_in[17] = (CH1_TSTIN[17] === 1'bz) || CH1_TSTIN[17]; // rv 1
  assign CH1_TSTIN_in[18] = (CH1_TSTIN[18] === 1'bz) || CH1_TSTIN[18]; // rv 1
  assign CH1_TSTIN_in[19] = (CH1_TSTIN[19] === 1'bz) || CH1_TSTIN[19]; // rv 1
  assign CH1_TSTIN_in[1] = (CH1_TSTIN[1] === 1'bz) || CH1_TSTIN[1]; // rv 1
  assign CH1_TSTIN_in[2] = (CH1_TSTIN[2] === 1'bz) || CH1_TSTIN[2]; // rv 1
  assign CH1_TSTIN_in[3] = (CH1_TSTIN[3] === 1'bz) || CH1_TSTIN[3]; // rv 1
  assign CH1_TSTIN_in[4] = (CH1_TSTIN[4] === 1'bz) || CH1_TSTIN[4]; // rv 1
  assign CH1_TSTIN_in[5] = (CH1_TSTIN[5] === 1'bz) || CH1_TSTIN[5]; // rv 1
  assign CH1_TSTIN_in[6] = (CH1_TSTIN[6] === 1'bz) || CH1_TSTIN[6]; // rv 1
  assign CH1_TSTIN_in[7] = (CH1_TSTIN[7] === 1'bz) || CH1_TSTIN[7]; // rv 1
  assign CH1_TSTIN_in[8] = (CH1_TSTIN[8] === 1'bz) || CH1_TSTIN[8]; // rv 1
  assign CH1_TSTIN_in[9] = (CH1_TSTIN[9] === 1'bz) || CH1_TSTIN[9]; // rv 1
  assign CH1_TX10GSTAT_M_in = CH1_TX10GSTAT_M;
  assign CH1_TXBUFSTATUS_M_in = CH1_TXBUFSTATUS_M;
  assign CH1_TXCOMFINISH_M_in = CH1_TXCOMFINISH_M;
  assign CH1_TXCOMINIT_in = (CH1_TXCOMINIT === 1'bz) || CH1_TXCOMINIT; // rv 1
  assign CH1_TXCOMSAS_in = (CH1_TXCOMSAS === 1'bz) || CH1_TXCOMSAS; // rv 1
  assign CH1_TXCOMWAKE_in = (CH1_TXCOMWAKE === 1'bz) || CH1_TXCOMWAKE; // rv 1
  assign CH1_TXCTRL0_in[0] = (CH1_TXCTRL0[0] === 1'bz) || CH1_TXCTRL0[0]; // rv 1
  assign CH1_TXCTRL0_in[10] = (CH1_TXCTRL0[10] === 1'bz) || CH1_TXCTRL0[10]; // rv 1
  assign CH1_TXCTRL0_in[11] = (CH1_TXCTRL0[11] === 1'bz) || CH1_TXCTRL0[11]; // rv 1
  assign CH1_TXCTRL0_in[12] = (CH1_TXCTRL0[12] === 1'bz) || CH1_TXCTRL0[12]; // rv 1
  assign CH1_TXCTRL0_in[13] = (CH1_TXCTRL0[13] === 1'bz) || CH1_TXCTRL0[13]; // rv 1
  assign CH1_TXCTRL0_in[14] = (CH1_TXCTRL0[14] === 1'bz) || CH1_TXCTRL0[14]; // rv 1
  assign CH1_TXCTRL0_in[15] = (CH1_TXCTRL0[15] === 1'bz) || CH1_TXCTRL0[15]; // rv 1
  assign CH1_TXCTRL0_in[1] = (CH1_TXCTRL0[1] === 1'bz) || CH1_TXCTRL0[1]; // rv 1
  assign CH1_TXCTRL0_in[2] = (CH1_TXCTRL0[2] === 1'bz) || CH1_TXCTRL0[2]; // rv 1
  assign CH1_TXCTRL0_in[3] = (CH1_TXCTRL0[3] === 1'bz) || CH1_TXCTRL0[3]; // rv 1
  assign CH1_TXCTRL0_in[4] = (CH1_TXCTRL0[4] === 1'bz) || CH1_TXCTRL0[4]; // rv 1
  assign CH1_TXCTRL0_in[5] = (CH1_TXCTRL0[5] === 1'bz) || CH1_TXCTRL0[5]; // rv 1
  assign CH1_TXCTRL0_in[6] = (CH1_TXCTRL0[6] === 1'bz) || CH1_TXCTRL0[6]; // rv 1
  assign CH1_TXCTRL0_in[7] = (CH1_TXCTRL0[7] === 1'bz) || CH1_TXCTRL0[7]; // rv 1
  assign CH1_TXCTRL0_in[8] = (CH1_TXCTRL0[8] === 1'bz) || CH1_TXCTRL0[8]; // rv 1
  assign CH1_TXCTRL0_in[9] = (CH1_TXCTRL0[9] === 1'bz) || CH1_TXCTRL0[9]; // rv 1
  assign CH1_TXCTRL1_in[0] = (CH1_TXCTRL1[0] === 1'bz) || CH1_TXCTRL1[0]; // rv 1
  assign CH1_TXCTRL1_in[10] = (CH1_TXCTRL1[10] === 1'bz) || CH1_TXCTRL1[10]; // rv 1
  assign CH1_TXCTRL1_in[11] = (CH1_TXCTRL1[11] === 1'bz) || CH1_TXCTRL1[11]; // rv 1
  assign CH1_TXCTRL1_in[12] = (CH1_TXCTRL1[12] === 1'bz) || CH1_TXCTRL1[12]; // rv 1
  assign CH1_TXCTRL1_in[13] = (CH1_TXCTRL1[13] === 1'bz) || CH1_TXCTRL1[13]; // rv 1
  assign CH1_TXCTRL1_in[14] = (CH1_TXCTRL1[14] === 1'bz) || CH1_TXCTRL1[14]; // rv 1
  assign CH1_TXCTRL1_in[15] = (CH1_TXCTRL1[15] === 1'bz) || CH1_TXCTRL1[15]; // rv 1
  assign CH1_TXCTRL1_in[1] = (CH1_TXCTRL1[1] === 1'bz) || CH1_TXCTRL1[1]; // rv 1
  assign CH1_TXCTRL1_in[2] = (CH1_TXCTRL1[2] === 1'bz) || CH1_TXCTRL1[2]; // rv 1
  assign CH1_TXCTRL1_in[3] = (CH1_TXCTRL1[3] === 1'bz) || CH1_TXCTRL1[3]; // rv 1
  assign CH1_TXCTRL1_in[4] = (CH1_TXCTRL1[4] === 1'bz) || CH1_TXCTRL1[4]; // rv 1
  assign CH1_TXCTRL1_in[5] = (CH1_TXCTRL1[5] === 1'bz) || CH1_TXCTRL1[5]; // rv 1
  assign CH1_TXCTRL1_in[6] = (CH1_TXCTRL1[6] === 1'bz) || CH1_TXCTRL1[6]; // rv 1
  assign CH1_TXCTRL1_in[7] = (CH1_TXCTRL1[7] === 1'bz) || CH1_TXCTRL1[7]; // rv 1
  assign CH1_TXCTRL1_in[8] = (CH1_TXCTRL1[8] === 1'bz) || CH1_TXCTRL1[8]; // rv 1
  assign CH1_TXCTRL1_in[9] = (CH1_TXCTRL1[9] === 1'bz) || CH1_TXCTRL1[9]; // rv 1
  assign CH1_TXCTRL2_in[0] = (CH1_TXCTRL2[0] === 1'bz) || CH1_TXCTRL2[0]; // rv 1
  assign CH1_TXCTRL2_in[1] = (CH1_TXCTRL2[1] === 1'bz) || CH1_TXCTRL2[1]; // rv 1
  assign CH1_TXCTRL2_in[2] = (CH1_TXCTRL2[2] === 1'bz) || CH1_TXCTRL2[2]; // rv 1
  assign CH1_TXCTRL2_in[3] = (CH1_TXCTRL2[3] === 1'bz) || CH1_TXCTRL2[3]; // rv 1
  assign CH1_TXCTRL2_in[4] = (CH1_TXCTRL2[4] === 1'bz) || CH1_TXCTRL2[4]; // rv 1
  assign CH1_TXCTRL2_in[5] = (CH1_TXCTRL2[5] === 1'bz) || CH1_TXCTRL2[5]; // rv 1
  assign CH1_TXCTRL2_in[6] = (CH1_TXCTRL2[6] === 1'bz) || CH1_TXCTRL2[6]; // rv 1
  assign CH1_TXCTRL2_in[7] = (CH1_TXCTRL2[7] === 1'bz) || CH1_TXCTRL2[7]; // rv 1
  assign CH1_TXDAPICODEOVRDEN_in = (CH1_TXDAPICODEOVRDEN === 1'bz) || CH1_TXDAPICODEOVRDEN; // rv 1
  assign CH1_TXDAPICODERESET_in = (CH1_TXDAPICODERESET === 1'bz) || CH1_TXDAPICODERESET; // rv 1
  assign CH1_TXDATAEXTENDRSVD_in[0] = (CH1_TXDATAEXTENDRSVD[0] === 1'bz) || CH1_TXDATAEXTENDRSVD[0]; // rv 1
  assign CH1_TXDATAEXTENDRSVD_in[1] = (CH1_TXDATAEXTENDRSVD[1] === 1'bz) || CH1_TXDATAEXTENDRSVD[1]; // rv 1
  assign CH1_TXDATAEXTENDRSVD_in[2] = (CH1_TXDATAEXTENDRSVD[2] === 1'bz) || CH1_TXDATAEXTENDRSVD[2]; // rv 1
  assign CH1_TXDATAEXTENDRSVD_in[3] = (CH1_TXDATAEXTENDRSVD[3] === 1'bz) || CH1_TXDATAEXTENDRSVD[3]; // rv 1
  assign CH1_TXDATAEXTENDRSVD_in[4] = (CH1_TXDATAEXTENDRSVD[4] === 1'bz) || CH1_TXDATAEXTENDRSVD[4]; // rv 1
  assign CH1_TXDATAEXTENDRSVD_in[5] = (CH1_TXDATAEXTENDRSVD[5] === 1'bz) || CH1_TXDATAEXTENDRSVD[5]; // rv 1
  assign CH1_TXDATAEXTENDRSVD_in[6] = (CH1_TXDATAEXTENDRSVD[6] === 1'bz) || CH1_TXDATAEXTENDRSVD[6]; // rv 1
  assign CH1_TXDATAEXTENDRSVD_in[7] = (CH1_TXDATAEXTENDRSVD[7] === 1'bz) || CH1_TXDATAEXTENDRSVD[7]; // rv 1
  assign CH1_TXDCCDONE_M_in = CH1_TXDCCDONE_M;
  assign CH1_TXDEEMPH_in[0] = (CH1_TXDEEMPH[0] === 1'bz) || CH1_TXDEEMPH[0]; // rv 1
  assign CH1_TXDEEMPH_in[1] = (CH1_TXDEEMPH[1] === 1'bz) || CH1_TXDEEMPH[1]; // rv 1
  assign CH1_TXDETECTRX_in = (CH1_TXDETECTRX === 1'bz) || CH1_TXDETECTRX; // rv 1
  assign CH1_TXDIFFCTRL_in[0] = (CH1_TXDIFFCTRL[0] === 1'bz) || CH1_TXDIFFCTRL[0]; // rv 1
  assign CH1_TXDIFFCTRL_in[1] = (CH1_TXDIFFCTRL[1] === 1'bz) || CH1_TXDIFFCTRL[1]; // rv 1
  assign CH1_TXDIFFCTRL_in[2] = (CH1_TXDIFFCTRL[2] === 1'bz) || CH1_TXDIFFCTRL[2]; // rv 1
  assign CH1_TXDIFFCTRL_in[3] = (CH1_TXDIFFCTRL[3] === 1'bz) || CH1_TXDIFFCTRL[3]; // rv 1
  assign CH1_TXDIFFCTRL_in[4] = (CH1_TXDIFFCTRL[4] === 1'bz) || CH1_TXDIFFCTRL[4]; // rv 1
  assign CH1_TXDLYALIGNERR_M_in = CH1_TXDLYALIGNERR_M;
  assign CH1_TXDLYALIGNPROG_M_in = CH1_TXDLYALIGNPROG_M;
  assign CH1_TXDLYALIGNREQ_in = (CH1_TXDLYALIGNREQ === 1'bz) || CH1_TXDLYALIGNREQ; // rv 1
  assign CH1_TXELECIDLE_in = (CH1_TXELECIDLE === 1'bz) || CH1_TXELECIDLE; // rv 1
  assign CH1_TXHEADER_in[0] = (CH1_TXHEADER[0] === 1'bz) || CH1_TXHEADER[0]; // rv 1
  assign CH1_TXHEADER_in[1] = (CH1_TXHEADER[1] === 1'bz) || CH1_TXHEADER[1]; // rv 1
  assign CH1_TXHEADER_in[2] = (CH1_TXHEADER[2] === 1'bz) || CH1_TXHEADER[2]; // rv 1
  assign CH1_TXHEADER_in[3] = (CH1_TXHEADER[3] === 1'bz) || CH1_TXHEADER[3]; // rv 1
  assign CH1_TXHEADER_in[4] = (CH1_TXHEADER[4] === 1'bz) || CH1_TXHEADER[4]; // rv 1
  assign CH1_TXHEADER_in[5] = (CH1_TXHEADER[5] === 1'bz) || CH1_TXHEADER[5]; // rv 1
  assign CH1_TXINHIBIT_in = (CH1_TXINHIBIT === 1'bz) || CH1_TXINHIBIT; // rv 1
  assign CH1_TXLATCLK_in = (CH1_TXLATCLK === 1'bz) || CH1_TXLATCLK; // rv 1
  assign CH1_TXMAINCURSOR_in[0] = (CH1_TXMAINCURSOR[0] === 1'bz) || CH1_TXMAINCURSOR[0]; // rv 1
  assign CH1_TXMAINCURSOR_in[1] = (CH1_TXMAINCURSOR[1] === 1'bz) || CH1_TXMAINCURSOR[1]; // rv 1
  assign CH1_TXMAINCURSOR_in[2] = (CH1_TXMAINCURSOR[2] === 1'bz) || CH1_TXMAINCURSOR[2]; // rv 1
  assign CH1_TXMAINCURSOR_in[3] = (CH1_TXMAINCURSOR[3] === 1'bz) || CH1_TXMAINCURSOR[3]; // rv 1
  assign CH1_TXMAINCURSOR_in[4] = (CH1_TXMAINCURSOR[4] === 1'bz) || CH1_TXMAINCURSOR[4]; // rv 1
  assign CH1_TXMAINCURSOR_in[5] = (CH1_TXMAINCURSOR[5] === 1'bz) || CH1_TXMAINCURSOR[5]; // rv 1
  assign CH1_TXMAINCURSOR_in[6] = (CH1_TXMAINCURSOR[6] === 1'bz) || CH1_TXMAINCURSOR[6]; // rv 1
  assign CH1_TXMARGIN_in[0] = (CH1_TXMARGIN[0] === 1'bz) || CH1_TXMARGIN[0]; // rv 1
  assign CH1_TXMARGIN_in[1] = (CH1_TXMARGIN[1] === 1'bz) || CH1_TXMARGIN[1]; // rv 1
  assign CH1_TXMARGIN_in[2] = (CH1_TXMARGIN[2] === 1'bz) || CH1_TXMARGIN[2]; // rv 1
  assign CH1_TXMLDCHAINDONE_in = (CH1_TXMLDCHAINDONE === 1'bz) || CH1_TXMLDCHAINDONE; // rv 1
  assign CH1_TXMLDCHAINREQ_in = (CH1_TXMLDCHAINREQ === 1'bz) || CH1_TXMLDCHAINREQ; // rv 1
  assign CH1_TXONESZEROS_in = (CH1_TXONESZEROS === 1'bz) || CH1_TXONESZEROS; // rv 1
  assign CH1_TXPAUSEDELAYALIGN_in = (CH1_TXPAUSEDELAYALIGN === 1'bz) || CH1_TXPAUSEDELAYALIGN; // rv 1
  assign CH1_TXPCSRESETMASK_in = (CH1_TXPCSRESETMASK === 1'bz) || CH1_TXPCSRESETMASK; // rv 1
  assign CH1_TXPD_in[0] = (CH1_TXPD[0] === 1'bz) || CH1_TXPD[0]; // rv 1
  assign CH1_TXPD_in[1] = (CH1_TXPD[1] === 1'bz) || CH1_TXPD[1]; // rv 1
  assign CH1_TXPHALIGNDONE_M_in = CH1_TXPHALIGNDONE_M;
  assign CH1_TXPHALIGNERR_M_in = CH1_TXPHALIGNERR_M;
  assign CH1_TXPHALIGNOUTRSVD_M_in = CH1_TXPHALIGNOUTRSVD_M;
  assign CH1_TXPHALIGNREQ_in = (CH1_TXPHALIGNREQ === 1'bz) || CH1_TXPHALIGNREQ; // rv 1
  assign CH1_TXPHALIGNRESETMASK_in[0] = (CH1_TXPHALIGNRESETMASK[0] === 1'bz) || CH1_TXPHALIGNRESETMASK[0]; // rv 1
  assign CH1_TXPHALIGNRESETMASK_in[1] = (CH1_TXPHALIGNRESETMASK[1] === 1'bz) || CH1_TXPHALIGNRESETMASK[1]; // rv 1
  assign CH1_TXPHDLYPD_in = (CH1_TXPHDLYPD === 1'bz) || CH1_TXPHDLYPD; // rv 1
  assign CH1_TXPHDLYRESETDONE_M_in = CH1_TXPHDLYRESETDONE_M;
  assign CH1_TXPHDLYRESET_in = (CH1_TXPHDLYRESET === 1'bz) || CH1_TXPHDLYRESET; // rv 1
  assign CH1_TXPHDLYTSTCLK_in = (CH1_TXPHDLYTSTCLK === 1'bz) || CH1_TXPHDLYTSTCLK; // rv 1
  assign CH1_TXPHSETINITDONE_M_in = CH1_TXPHSETINITDONE_M;
  assign CH1_TXPHSETINITREQ_in = (CH1_TXPHSETINITREQ === 1'bz) || CH1_TXPHSETINITREQ; // rv 1
  assign CH1_TXPHSHIFT180DONE_M_in = CH1_TXPHSHIFT180DONE_M;
  assign CH1_TXPHSHIFT180_in = (CH1_TXPHSHIFT180 === 1'bz) || CH1_TXPHSHIFT180; // rv 1
  assign CH1_TXPICODEOVRDEN_in = (CH1_TXPICODEOVRDEN === 1'bz) || CH1_TXPICODEOVRDEN; // rv 1
  assign CH1_TXPICODERESET_in = (CH1_TXPICODERESET === 1'bz) || CH1_TXPICODERESET; // rv 1
  assign CH1_TXPIPPMEN_in = (CH1_TXPIPPMEN === 1'bz) || CH1_TXPIPPMEN; // rv 1
  assign CH1_TXPIPPMSTEPSIZE_in[0] = (CH1_TXPIPPMSTEPSIZE[0] === 1'bz) || CH1_TXPIPPMSTEPSIZE[0]; // rv 1
  assign CH1_TXPIPPMSTEPSIZE_in[1] = (CH1_TXPIPPMSTEPSIZE[1] === 1'bz) || CH1_TXPIPPMSTEPSIZE[1]; // rv 1
  assign CH1_TXPIPPMSTEPSIZE_in[2] = (CH1_TXPIPPMSTEPSIZE[2] === 1'bz) || CH1_TXPIPPMSTEPSIZE[2]; // rv 1
  assign CH1_TXPIPPMSTEPSIZE_in[3] = (CH1_TXPIPPMSTEPSIZE[3] === 1'bz) || CH1_TXPIPPMSTEPSIZE[3]; // rv 1
  assign CH1_TXPIPPMSTEPSIZE_in[4] = (CH1_TXPIPPMSTEPSIZE[4] === 1'bz) || CH1_TXPIPPMSTEPSIZE[4]; // rv 1
  assign CH1_TXPISOPD_in = (CH1_TXPISOPD === 1'bz) || CH1_TXPISOPD; // rv 1
  assign CH1_TXPMARESETDONE_M_in = CH1_TXPMARESETDONE_M;
  assign CH1_TXPMARESETMASK_in[0] = (CH1_TXPMARESETMASK[0] === 1'bz) || CH1_TXPMARESETMASK[0]; // rv 1
  assign CH1_TXPMARESETMASK_in[1] = (CH1_TXPMARESETMASK[1] === 1'bz) || CH1_TXPMARESETMASK[1]; // rv 1
  assign CH1_TXPMARESETMASK_in[2] = (CH1_TXPMARESETMASK[2] === 1'bz) || CH1_TXPMARESETMASK[2]; // rv 1
  assign CH1_TXPOLARITY_in = (CH1_TXPOLARITY === 1'bz) || CH1_TXPOLARITY; // rv 1
  assign CH1_TXPOSTCURSOR_in[0] = (CH1_TXPOSTCURSOR[0] === 1'bz) || CH1_TXPOSTCURSOR[0]; // rv 1
  assign CH1_TXPOSTCURSOR_in[1] = (CH1_TXPOSTCURSOR[1] === 1'bz) || CH1_TXPOSTCURSOR[1]; // rv 1
  assign CH1_TXPOSTCURSOR_in[2] = (CH1_TXPOSTCURSOR[2] === 1'bz) || CH1_TXPOSTCURSOR[2]; // rv 1
  assign CH1_TXPOSTCURSOR_in[3] = (CH1_TXPOSTCURSOR[3] === 1'bz) || CH1_TXPOSTCURSOR[3]; // rv 1
  assign CH1_TXPOSTCURSOR_in[4] = (CH1_TXPOSTCURSOR[4] === 1'bz) || CH1_TXPOSTCURSOR[4]; // rv 1
  assign CH1_TXPRBSFORCEERR_in = (CH1_TXPRBSFORCEERR === 1'bz) || CH1_TXPRBSFORCEERR; // rv 1
  assign CH1_TXPRBSSEL_in[0] = (CH1_TXPRBSSEL[0] === 1'bz) || CH1_TXPRBSSEL[0]; // rv 1
  assign CH1_TXPRBSSEL_in[1] = (CH1_TXPRBSSEL[1] === 1'bz) || CH1_TXPRBSSEL[1]; // rv 1
  assign CH1_TXPRBSSEL_in[2] = (CH1_TXPRBSSEL[2] === 1'bz) || CH1_TXPRBSSEL[2]; // rv 1
  assign CH1_TXPRBSSEL_in[3] = (CH1_TXPRBSSEL[3] === 1'bz) || CH1_TXPRBSSEL[3]; // rv 1
  assign CH1_TXPRECURSOR_in[0] = (CH1_TXPRECURSOR[0] === 1'bz) || CH1_TXPRECURSOR[0]; // rv 1
  assign CH1_TXPRECURSOR_in[1] = (CH1_TXPRECURSOR[1] === 1'bz) || CH1_TXPRECURSOR[1]; // rv 1
  assign CH1_TXPRECURSOR_in[2] = (CH1_TXPRECURSOR[2] === 1'bz) || CH1_TXPRECURSOR[2]; // rv 1
  assign CH1_TXPRECURSOR_in[3] = (CH1_TXPRECURSOR[3] === 1'bz) || CH1_TXPRECURSOR[3]; // rv 1
  assign CH1_TXPRECURSOR_in[4] = (CH1_TXPRECURSOR[4] === 1'bz) || CH1_TXPRECURSOR[4]; // rv 1
  assign CH1_TXPROGDIVRESETDONE_M_in = CH1_TXPROGDIVRESETDONE_M;
  assign CH1_TXPROGDIVRESET_in = (CH1_TXPROGDIVRESET === 1'bz) || CH1_TXPROGDIVRESET; // rv 1
  assign CH1_TXRATE_in[0] = (CH1_TXRATE[0] === 1'bz) || CH1_TXRATE[0]; // rv 1
  assign CH1_TXRATE_in[1] = (CH1_TXRATE[1] === 1'bz) || CH1_TXRATE[1]; // rv 1
  assign CH1_TXRATE_in[2] = (CH1_TXRATE[2] === 1'bz) || CH1_TXRATE[2]; // rv 1
  assign CH1_TXRATE_in[3] = (CH1_TXRATE[3] === 1'bz) || CH1_TXRATE[3]; // rv 1
  assign CH1_TXRATE_in[4] = (CH1_TXRATE[4] === 1'bz) || CH1_TXRATE[4]; // rv 1
  assign CH1_TXRATE_in[5] = (CH1_TXRATE[5] === 1'bz) || CH1_TXRATE[5]; // rv 1
  assign CH1_TXRATE_in[6] = (CH1_TXRATE[6] === 1'bz) || CH1_TXRATE[6]; // rv 1
  assign CH1_TXRATE_in[7] = (CH1_TXRATE[7] === 1'bz) || CH1_TXRATE[7]; // rv 1
  assign CH1_TXRESETDONE_M_in = CH1_TXRESETDONE_M;
  assign CH1_TXRESETMODE_in[0] = (CH1_TXRESETMODE[0] === 1'bz) || CH1_TXRESETMODE[0]; // rv 1
  assign CH1_TXRESETMODE_in[1] = (CH1_TXRESETMODE[1] === 1'bz) || CH1_TXRESETMODE[1]; // rv 1
  assign CH1_TXSEQUENCE_in[0] = (CH1_TXSEQUENCE[0] === 1'bz) || CH1_TXSEQUENCE[0]; // rv 1
  assign CH1_TXSEQUENCE_in[1] = (CH1_TXSEQUENCE[1] === 1'bz) || CH1_TXSEQUENCE[1]; // rv 1
  assign CH1_TXSEQUENCE_in[2] = (CH1_TXSEQUENCE[2] === 1'bz) || CH1_TXSEQUENCE[2]; // rv 1
  assign CH1_TXSEQUENCE_in[3] = (CH1_TXSEQUENCE[3] === 1'bz) || CH1_TXSEQUENCE[3]; // rv 1
  assign CH1_TXSEQUENCE_in[4] = (CH1_TXSEQUENCE[4] === 1'bz) || CH1_TXSEQUENCE[4]; // rv 1
  assign CH1_TXSEQUENCE_in[5] = (CH1_TXSEQUENCE[5] === 1'bz) || CH1_TXSEQUENCE[5]; // rv 1
  assign CH1_TXSEQUENCE_in[6] = (CH1_TXSEQUENCE[6] === 1'bz) || CH1_TXSEQUENCE[6]; // rv 1
  assign CH1_TXSWING_in = (CH1_TXSWING === 1'bz) || CH1_TXSWING; // rv 1
  assign CH1_TXSYNCALLIN_in = (CH1_TXSYNCALLIN === 1'bz) || CH1_TXSYNCALLIN; // rv 1
  assign CH1_TXSYNCDONE_M_in = CH1_TXSYNCDONE_M;
  assign CH1_TXUSERRDY_in = (CH1_TXUSERRDY === 1'bz) || CH1_TXUSERRDY; // rv 1
  assign CH1_TXUSRCLK_in = (CH1_TXUSRCLK === 1'bz) || CH1_TXUSRCLK; // rv 1
  assign CH2_BUFGTCEMASK_M_in = CH2_BUFGTCEMASK_M;
  assign CH2_BUFGTCE_M_in = CH2_BUFGTCE_M;
  assign CH2_BUFGTDIV_M_in = CH2_BUFGTDIV_M;
  assign CH2_BUFGTRSTMASK_M_in = CH2_BUFGTRSTMASK_M;
  assign CH2_BUFGTRST_M_in = CH2_BUFGTRST_M;
  assign CH2_CDRBMCDRREQ_in = (CH2_CDRBMCDRREQ === 1'bz) || CH2_CDRBMCDRREQ; // rv 1
  assign CH2_CDRFREQOS_in = (CH2_CDRFREQOS === 1'bz) || CH2_CDRFREQOS; // rv 1
  assign CH2_CDRINCPCTRL_in = (CH2_CDRINCPCTRL === 1'bz) || CH2_CDRINCPCTRL; // rv 1
  assign CH2_CDRSTEPDIR_in = (CH2_CDRSTEPDIR === 1'bz) || CH2_CDRSTEPDIR; // rv 1
  assign CH2_CDRSTEPSQ_in = (CH2_CDRSTEPSQ === 1'bz) || CH2_CDRSTEPSQ; // rv 1
  assign CH2_CDRSTEPSX_in = (CH2_CDRSTEPSX === 1'bz) || CH2_CDRSTEPSX; // rv 1
  assign CH2_CFOKOVRDFINISH_in = (CH2_CFOKOVRDFINISH === 1'bz) || CH2_CFOKOVRDFINISH; // rv 1
  assign CH2_CFOKOVRDPULSE_in = (CH2_CFOKOVRDPULSE === 1'bz) || CH2_CFOKOVRDPULSE; // rv 1
  assign CH2_CFOKOVRDRDY0_M_in = CH2_CFOKOVRDRDY0_M;
  assign CH2_CFOKOVRDRDY1_M_in = CH2_CFOKOVRDRDY1_M;
  assign CH2_CFOKOVRDSTART_in = (CH2_CFOKOVRDSTART === 1'bz) || CH2_CFOKOVRDSTART; // rv 1
  assign CH2_CLKRSVD0_in = (CH2_CLKRSVD0 === 1'bz) || CH2_CLKRSVD0; // rv 1
  assign CH2_CLKRSVD1_in = (CH2_CLKRSVD1 === 1'bz) || CH2_CLKRSVD1; // rv 1
  assign CH2_DMONFIFORESET_in = (CH2_DMONFIFORESET === 1'bz) || CH2_DMONFIFORESET; // rv 1
  assign CH2_DMONITORCLK_in = (CH2_DMONITORCLK === 1'bz) || CH2_DMONITORCLK; // rv 1
  assign CH2_DMONITOROUT_M_in = CH2_DMONITOROUT_M;
  assign CH2_EYESCANDATAERROR_M_in = CH2_EYESCANDATAERROR_M;
  assign CH2_EYESCANRESET_in = (CH2_EYESCANRESET === 1'bz) || CH2_EYESCANRESET; // rv 1
  assign CH2_EYESCANTRIGGER_in = (CH2_EYESCANTRIGGER === 1'bz) || CH2_EYESCANTRIGGER; // rv 1
  assign CH2_GTRSVD_in[0] = (CH2_GTRSVD[0] === 1'bz) || CH2_GTRSVD[0]; // rv 1
  assign CH2_GTRSVD_in[10] = (CH2_GTRSVD[10] === 1'bz) || CH2_GTRSVD[10]; // rv 1
  assign CH2_GTRSVD_in[11] = (CH2_GTRSVD[11] === 1'bz) || CH2_GTRSVD[11]; // rv 1
  assign CH2_GTRSVD_in[12] = (CH2_GTRSVD[12] === 1'bz) || CH2_GTRSVD[12]; // rv 1
  assign CH2_GTRSVD_in[13] = (CH2_GTRSVD[13] === 1'bz) || CH2_GTRSVD[13]; // rv 1
  assign CH2_GTRSVD_in[14] = (CH2_GTRSVD[14] === 1'bz) || CH2_GTRSVD[14]; // rv 1
  assign CH2_GTRSVD_in[15] = (CH2_GTRSVD[15] === 1'bz) || CH2_GTRSVD[15]; // rv 1
  assign CH2_GTRSVD_in[1] = (CH2_GTRSVD[1] === 1'bz) || CH2_GTRSVD[1]; // rv 1
  assign CH2_GTRSVD_in[2] = (CH2_GTRSVD[2] === 1'bz) || CH2_GTRSVD[2]; // rv 1
  assign CH2_GTRSVD_in[3] = (CH2_GTRSVD[3] === 1'bz) || CH2_GTRSVD[3]; // rv 1
  assign CH2_GTRSVD_in[4] = (CH2_GTRSVD[4] === 1'bz) || CH2_GTRSVD[4]; // rv 1
  assign CH2_GTRSVD_in[5] = (CH2_GTRSVD[5] === 1'bz) || CH2_GTRSVD[5]; // rv 1
  assign CH2_GTRSVD_in[6] = (CH2_GTRSVD[6] === 1'bz) || CH2_GTRSVD[6]; // rv 1
  assign CH2_GTRSVD_in[7] = (CH2_GTRSVD[7] === 1'bz) || CH2_GTRSVD[7]; // rv 1
  assign CH2_GTRSVD_in[8] = (CH2_GTRSVD[8] === 1'bz) || CH2_GTRSVD[8]; // rv 1
  assign CH2_GTRSVD_in[9] = (CH2_GTRSVD[9] === 1'bz) || CH2_GTRSVD[9]; // rv 1
  assign CH2_GTRXRESET_in = (CH2_GTRXRESET === 1'bz) || CH2_GTRXRESET; // rv 1
  assign CH2_GTTXRESET_in = (CH2_GTTXRESET === 1'bz) || CH2_GTTXRESET; // rv 1
  assign CH2_HSDPPCSRESET_in = (CH2_HSDPPCSRESET === 1'bz) || CH2_HSDPPCSRESET; // rv 1
  assign CH2_ILORESETDONE_M_in = CH2_ILORESETDONE_M;
  assign CH2_ILORESETMASK_in = (CH2_ILORESETMASK === 1'bz) || CH2_ILORESETMASK; // rv 1
  assign CH2_ILORESET_in = (CH2_ILORESET === 1'bz) || CH2_ILORESET; // rv 1
  assign CH2_LOOPBACK_in[0] = (CH2_LOOPBACK[0] === 1'bz) || CH2_LOOPBACK[0]; // rv 1
  assign CH2_LOOPBACK_in[1] = (CH2_LOOPBACK[1] === 1'bz) || CH2_LOOPBACK[1]; // rv 1
  assign CH2_LOOPBACK_in[2] = (CH2_LOOPBACK[2] === 1'bz) || CH2_LOOPBACK[2]; // rv 1
  assign CH2_PCIERSTB_in = (CH2_PCIERSTB === 1'bz) || CH2_PCIERSTB; // rv 1
  assign CH2_PCSRSVDIN_in[0] = (CH2_PCSRSVDIN[0] === 1'bz) || CH2_PCSRSVDIN[0]; // rv 1
  assign CH2_PCSRSVDIN_in[10] = (CH2_PCSRSVDIN[10] === 1'bz) || CH2_PCSRSVDIN[10]; // rv 1
  assign CH2_PCSRSVDIN_in[11] = (CH2_PCSRSVDIN[11] === 1'bz) || CH2_PCSRSVDIN[11]; // rv 1
  assign CH2_PCSRSVDIN_in[12] = (CH2_PCSRSVDIN[12] === 1'bz) || CH2_PCSRSVDIN[12]; // rv 1
  assign CH2_PCSRSVDIN_in[13] = (CH2_PCSRSVDIN[13] === 1'bz) || CH2_PCSRSVDIN[13]; // rv 1
  assign CH2_PCSRSVDIN_in[14] = (CH2_PCSRSVDIN[14] === 1'bz) || CH2_PCSRSVDIN[14]; // rv 1
  assign CH2_PCSRSVDIN_in[15] = (CH2_PCSRSVDIN[15] === 1'bz) || CH2_PCSRSVDIN[15]; // rv 1
  assign CH2_PCSRSVDIN_in[1] = (CH2_PCSRSVDIN[1] === 1'bz) || CH2_PCSRSVDIN[1]; // rv 1
  assign CH2_PCSRSVDIN_in[2] = (CH2_PCSRSVDIN[2] === 1'bz) || CH2_PCSRSVDIN[2]; // rv 1
  assign CH2_PCSRSVDIN_in[3] = (CH2_PCSRSVDIN[3] === 1'bz) || CH2_PCSRSVDIN[3]; // rv 1
  assign CH2_PCSRSVDIN_in[4] = (CH2_PCSRSVDIN[4] === 1'bz) || CH2_PCSRSVDIN[4]; // rv 1
  assign CH2_PCSRSVDIN_in[5] = (CH2_PCSRSVDIN[5] === 1'bz) || CH2_PCSRSVDIN[5]; // rv 1
  assign CH2_PCSRSVDIN_in[6] = (CH2_PCSRSVDIN[6] === 1'bz) || CH2_PCSRSVDIN[6]; // rv 1
  assign CH2_PCSRSVDIN_in[7] = (CH2_PCSRSVDIN[7] === 1'bz) || CH2_PCSRSVDIN[7]; // rv 1
  assign CH2_PCSRSVDIN_in[8] = (CH2_PCSRSVDIN[8] === 1'bz) || CH2_PCSRSVDIN[8]; // rv 1
  assign CH2_PCSRSVDIN_in[9] = (CH2_PCSRSVDIN[9] === 1'bz) || CH2_PCSRSVDIN[9]; // rv 1
  assign CH2_PCSRSVDOUT_M_in = CH2_PCSRSVDOUT_M;
  assign CH2_PHYESMADAPTSAVE_in = (CH2_PHYESMADAPTSAVE === 1'bz) || CH2_PHYESMADAPTSAVE; // rv 1
  assign CH2_PHYREADY_M_in = CH2_PHYREADY_M;
  assign CH2_PHYSTATUS_M_in = CH2_PHYSTATUS_M;
  assign CH2_PINRSVDAS_M_in = CH2_PINRSVDAS_M;
  assign CH2_RESETEXCEPTION_M_in = CH2_RESETEXCEPTION_M;
  assign CH2_RX10GSTAT_M_in = CH2_RX10GSTAT_M;
  assign CH2_RXBUFSTATUS_M_in = CH2_RXBUFSTATUS_M;
  assign CH2_RXBYTEISALIGNED_M_in = CH2_RXBYTEISALIGNED_M;
  assign CH2_RXBYTEREALIGN_M_in = CH2_RXBYTEREALIGN_M;
  assign CH2_RXCDRHOLD_in = (CH2_RXCDRHOLD === 1'bz) || CH2_RXCDRHOLD; // rv 1
  assign CH2_RXCDRLOCK_M_in = CH2_RXCDRLOCK_M;
  assign CH2_RXCDROVRDEN_in = (CH2_RXCDROVRDEN === 1'bz) || CH2_RXCDROVRDEN; // rv 1
  assign CH2_RXCDRPHDONE_M_in = CH2_RXCDRPHDONE_M;
  assign CH2_RXCDRRESET_in = (CH2_RXCDRRESET === 1'bz) || CH2_RXCDRRESET; // rv 1
  assign CH2_RXCHANBONDSEQ_M_in = CH2_RXCHANBONDSEQ_M;
  assign CH2_RXCHANISALIGNED_M_in = CH2_RXCHANISALIGNED_M;
  assign CH2_RXCHANREALIGN_M_in = CH2_RXCHANREALIGN_M;
  assign CH2_RXCHBONDI_in[0] = (CH2_RXCHBONDI[0] === 1'bz) || CH2_RXCHBONDI[0]; // rv 1
  assign CH2_RXCHBONDI_in[1] = (CH2_RXCHBONDI[1] === 1'bz) || CH2_RXCHBONDI[1]; // rv 1
  assign CH2_RXCHBONDI_in[2] = (CH2_RXCHBONDI[2] === 1'bz) || CH2_RXCHBONDI[2]; // rv 1
  assign CH2_RXCHBONDI_in[3] = (CH2_RXCHBONDI[3] === 1'bz) || CH2_RXCHBONDI[3]; // rv 1
  assign CH2_RXCHBONDI_in[4] = (CH2_RXCHBONDI[4] === 1'bz) || CH2_RXCHBONDI[4]; // rv 1
  assign CH2_RXCHBONDO_M_in = CH2_RXCHBONDO_M;
  assign CH2_RXCLKCORCNT_M_in = CH2_RXCLKCORCNT_M;
  assign CH2_RXCOMINITDET_M_in = CH2_RXCOMINITDET_M;
  assign CH2_RXCOMMADET_M_in = CH2_RXCOMMADET_M;
  assign CH2_RXCOMSASDET_M_in = CH2_RXCOMSASDET_M;
  assign CH2_RXCOMWAKEDET_M_in = CH2_RXCOMWAKEDET_M;
  assign CH2_RXCTRL0_M_in = CH2_RXCTRL0_M;
  assign CH2_RXCTRL1_M_in = CH2_RXCTRL1_M;
  assign CH2_RXCTRL2_M_in = CH2_RXCTRL2_M;
  assign CH2_RXCTRL3_M_in = CH2_RXCTRL3_M;
  assign CH2_RXDAPICODEOVRDEN_in = (CH2_RXDAPICODEOVRDEN === 1'bz) || CH2_RXDAPICODEOVRDEN; // rv 1
  assign CH2_RXDAPICODERESET_in = (CH2_RXDAPICODERESET === 1'bz) || CH2_RXDAPICODERESET; // rv 1
  assign CH2_RXDATAEXTENDRSVD_M_in = CH2_RXDATAEXTENDRSVD_M;
  assign CH2_RXDATAVALID_M_in = CH2_RXDATAVALID_M;
  assign CH2_RXDATA_M_in = CH2_RXDATA_M;
  assign CH2_RXDCCDONE_M_in = CH2_RXDCCDONE_M;
  assign CH2_RXDLYALIGNERR_M_in = CH2_RXDLYALIGNERR_M;
  assign CH2_RXDLYALIGNPROG_M_in = CH2_RXDLYALIGNPROG_M;
  assign CH2_RXDLYALIGNREQ_in = (CH2_RXDLYALIGNREQ === 1'bz) || CH2_RXDLYALIGNREQ; // rv 1
  assign CH2_RXELECIDLE_M_in = CH2_RXELECIDLE_M;
  assign CH2_RXEQTRAINING_in = (CH2_RXEQTRAINING === 1'bz) || CH2_RXEQTRAINING; // rv 1
  assign CH2_RXFINEALIGNDONE_M_in = CH2_RXFINEALIGNDONE_M;
  assign CH2_RXGEARBOXSLIP_in = (CH2_RXGEARBOXSLIP === 1'bz) || CH2_RXGEARBOXSLIP; // rv 1
  assign CH2_RXHEADERVALID_M_in = CH2_RXHEADERVALID_M;
  assign CH2_RXHEADER_M_in = CH2_RXHEADER_M;
  assign CH2_RXLATCLK_in = (CH2_RXLATCLK === 1'bz) || CH2_RXLATCLK; // rv 1
  assign CH2_RXLPMEN_in = (CH2_RXLPMEN === 1'bz) || CH2_RXLPMEN; // rv 1
  assign CH2_RXMLDCHAINDONE_in = (CH2_RXMLDCHAINDONE === 1'bz) || CH2_RXMLDCHAINDONE; // rv 1
  assign CH2_RXMLDCHAINREQ_in = (CH2_RXMLDCHAINREQ === 1'bz) || CH2_RXMLDCHAINREQ; // rv 1
  assign CH2_RXMLFINEALIGNREQ_in = (CH2_RXMLFINEALIGNREQ === 1'bz) || CH2_RXMLFINEALIGNREQ; // rv 1
  assign CH2_RXOOBRESET_in = (CH2_RXOOBRESET === 1'bz) || CH2_RXOOBRESET; // rv 1
  assign CH2_RXOSINTDONE_M_in = CH2_RXOSINTDONE_M;
  assign CH2_RXOSINTSTARTED_M_in = CH2_RXOSINTSTARTED_M;
  assign CH2_RXOSINTSTROBEDONE_M_in = CH2_RXOSINTSTROBEDONE_M;
  assign CH2_RXOSINTSTROBESTARTED_M_in = CH2_RXOSINTSTROBESTARTED_M;
  assign CH2_RXPCSRESETMASK_in[0] = (CH2_RXPCSRESETMASK[0] === 1'bz) || CH2_RXPCSRESETMASK[0]; // rv 1
  assign CH2_RXPCSRESETMASK_in[1] = (CH2_RXPCSRESETMASK[1] === 1'bz) || CH2_RXPCSRESETMASK[1]; // rv 1
  assign CH2_RXPCSRESETMASK_in[2] = (CH2_RXPCSRESETMASK[2] === 1'bz) || CH2_RXPCSRESETMASK[2]; // rv 1
  assign CH2_RXPCSRESETMASK_in[3] = (CH2_RXPCSRESETMASK[3] === 1'bz) || CH2_RXPCSRESETMASK[3]; // rv 1
  assign CH2_RXPCSRESETMASK_in[4] = (CH2_RXPCSRESETMASK[4] === 1'bz) || CH2_RXPCSRESETMASK[4]; // rv 1
  assign CH2_RXPD_in[0] = (CH2_RXPD[0] === 1'bz) || CH2_RXPD[0]; // rv 1
  assign CH2_RXPD_in[1] = (CH2_RXPD[1] === 1'bz) || CH2_RXPD[1]; // rv 1
  assign CH2_RXPHALIGNDONE_M_in = CH2_RXPHALIGNDONE_M;
  assign CH2_RXPHALIGNERR_M_in = CH2_RXPHALIGNERR_M;
  assign CH2_RXPHALIGNREQ_in = (CH2_RXPHALIGNREQ === 1'bz) || CH2_RXPHALIGNREQ; // rv 1
  assign CH2_RXPHALIGNRESETMASK_in[0] = (CH2_RXPHALIGNRESETMASK[0] === 1'bz) || CH2_RXPHALIGNRESETMASK[0]; // rv 1
  assign CH2_RXPHALIGNRESETMASK_in[1] = (CH2_RXPHALIGNRESETMASK[1] === 1'bz) || CH2_RXPHALIGNRESETMASK[1]; // rv 1
  assign CH2_RXPHDLYPD_in = (CH2_RXPHDLYPD === 1'bz) || CH2_RXPHDLYPD; // rv 1
  assign CH2_RXPHDLYRESETDONE_M_in = CH2_RXPHDLYRESETDONE_M;
  assign CH2_RXPHDLYRESET_in = (CH2_RXPHDLYRESET === 1'bz) || CH2_RXPHDLYRESET; // rv 1
  assign CH2_RXPHSETINITDONE_M_in = CH2_RXPHSETINITDONE_M;
  assign CH2_RXPHSETINITREQ_in = (CH2_RXPHSETINITREQ === 1'bz) || CH2_RXPHSETINITREQ; // rv 1
  assign CH2_RXPHSHIFT180DONE_M_in = CH2_RXPHSHIFT180DONE_M;
  assign CH2_RXPHSHIFT180_in = (CH2_RXPHSHIFT180 === 1'bz) || CH2_RXPHSHIFT180; // rv 1
  assign CH2_RXPMARESETDONE_M_in = CH2_RXPMARESETDONE_M;
  assign CH2_RXPMARESETMASK_in[0] = (CH2_RXPMARESETMASK[0] === 1'bz) || CH2_RXPMARESETMASK[0]; // rv 1
  assign CH2_RXPMARESETMASK_in[1] = (CH2_RXPMARESETMASK[1] === 1'bz) || CH2_RXPMARESETMASK[1]; // rv 1
  assign CH2_RXPMARESETMASK_in[2] = (CH2_RXPMARESETMASK[2] === 1'bz) || CH2_RXPMARESETMASK[2]; // rv 1
  assign CH2_RXPMARESETMASK_in[3] = (CH2_RXPMARESETMASK[3] === 1'bz) || CH2_RXPMARESETMASK[3]; // rv 1
  assign CH2_RXPMARESETMASK_in[4] = (CH2_RXPMARESETMASK[4] === 1'bz) || CH2_RXPMARESETMASK[4]; // rv 1
  assign CH2_RXPMARESETMASK_in[5] = (CH2_RXPMARESETMASK[5] === 1'bz) || CH2_RXPMARESETMASK[5]; // rv 1
  assign CH2_RXPMARESETMASK_in[6] = (CH2_RXPMARESETMASK[6] === 1'bz) || CH2_RXPMARESETMASK[6]; // rv 1
  assign CH2_RXPOLARITY_in = (CH2_RXPOLARITY === 1'bz) || CH2_RXPOLARITY; // rv 1
  assign CH2_RXPRBSCNTRESET_in = (CH2_RXPRBSCNTRESET === 1'bz) || CH2_RXPRBSCNTRESET; // rv 1
  assign CH2_RXPRBSERR_M_in = CH2_RXPRBSERR_M;
  assign CH2_RXPRBSLOCKED_M_in = CH2_RXPRBSLOCKED_M;
  assign CH2_RXPRBSSEL_in[0] = (CH2_RXPRBSSEL[0] === 1'bz) || CH2_RXPRBSSEL[0]; // rv 1
  assign CH2_RXPRBSSEL_in[1] = (CH2_RXPRBSSEL[1] === 1'bz) || CH2_RXPRBSSEL[1]; // rv 1
  assign CH2_RXPRBSSEL_in[2] = (CH2_RXPRBSSEL[2] === 1'bz) || CH2_RXPRBSSEL[2]; // rv 1
  assign CH2_RXPRBSSEL_in[3] = (CH2_RXPRBSSEL[3] === 1'bz) || CH2_RXPRBSSEL[3]; // rv 1
  assign CH2_RXPROGDIVRESETDONE_M_in = CH2_RXPROGDIVRESETDONE_M;
  assign CH2_RXPROGDIVRESET_in = (CH2_RXPROGDIVRESET === 1'bz) || CH2_RXPROGDIVRESET; // rv 1
  assign CH2_RXRATE_in[0] = (CH2_RXRATE[0] === 1'bz) || CH2_RXRATE[0]; // rv 1
  assign CH2_RXRATE_in[1] = (CH2_RXRATE[1] === 1'bz) || CH2_RXRATE[1]; // rv 1
  assign CH2_RXRATE_in[2] = (CH2_RXRATE[2] === 1'bz) || CH2_RXRATE[2]; // rv 1
  assign CH2_RXRATE_in[3] = (CH2_RXRATE[3] === 1'bz) || CH2_RXRATE[3]; // rv 1
  assign CH2_RXRATE_in[4] = (CH2_RXRATE[4] === 1'bz) || CH2_RXRATE[4]; // rv 1
  assign CH2_RXRATE_in[5] = (CH2_RXRATE[5] === 1'bz) || CH2_RXRATE[5]; // rv 1
  assign CH2_RXRATE_in[6] = (CH2_RXRATE[6] === 1'bz) || CH2_RXRATE[6]; // rv 1
  assign CH2_RXRATE_in[7] = (CH2_RXRATE[7] === 1'bz) || CH2_RXRATE[7]; // rv 1
  assign CH2_RXRESETDONE_M_in = CH2_RXRESETDONE_M;
  assign CH2_RXRESETMODE_in[0] = (CH2_RXRESETMODE[0] === 1'bz) || CH2_RXRESETMODE[0]; // rv 1
  assign CH2_RXRESETMODE_in[1] = (CH2_RXRESETMODE[1] === 1'bz) || CH2_RXRESETMODE[1]; // rv 1
  assign CH2_RXSLIDERDY_M_in = CH2_RXSLIDERDY_M;
  assign CH2_RXSLIDE_in = (CH2_RXSLIDE === 1'bz) || CH2_RXSLIDE; // rv 1
  assign CH2_RXSTARTOFSEQ_M_in = CH2_RXSTARTOFSEQ_M;
  assign CH2_RXSTATUS_M_in = CH2_RXSTATUS_M;
  assign CH2_RXSYNCALLIN_in = (CH2_RXSYNCALLIN === 1'bz) || CH2_RXSYNCALLIN; // rv 1
  assign CH2_RXSYNCDONE_M_in = CH2_RXSYNCDONE_M;
  assign CH2_RXTERMINATION_in = (CH2_RXTERMINATION === 1'bz) || CH2_RXTERMINATION; // rv 1
  assign CH2_RXUSERRDY_in = (CH2_RXUSERRDY === 1'bz) || CH2_RXUSERRDY; // rv 1
  assign CH2_RXUSRCLK_in = (CH2_RXUSRCLK === 1'bz) || CH2_RXUSRCLK; // rv 1
  assign CH2_RXVALID_M_in = CH2_RXVALID_M;
  assign CH2_TSTCLK0_in = (CH2_TSTCLK0 === 1'bz) || CH2_TSTCLK0; // rv 1
  assign CH2_TSTCLK1_in = (CH2_TSTCLK1 === 1'bz) || CH2_TSTCLK1; // rv 1
  assign CH2_TSTIN_in[0] = (CH2_TSTIN[0] === 1'bz) || CH2_TSTIN[0]; // rv 1
  assign CH2_TSTIN_in[10] = (CH2_TSTIN[10] === 1'bz) || CH2_TSTIN[10]; // rv 1
  assign CH2_TSTIN_in[11] = (CH2_TSTIN[11] === 1'bz) || CH2_TSTIN[11]; // rv 1
  assign CH2_TSTIN_in[12] = (CH2_TSTIN[12] === 1'bz) || CH2_TSTIN[12]; // rv 1
  assign CH2_TSTIN_in[13] = (CH2_TSTIN[13] === 1'bz) || CH2_TSTIN[13]; // rv 1
  assign CH2_TSTIN_in[14] = (CH2_TSTIN[14] === 1'bz) || CH2_TSTIN[14]; // rv 1
  assign CH2_TSTIN_in[15] = (CH2_TSTIN[15] === 1'bz) || CH2_TSTIN[15]; // rv 1
  assign CH2_TSTIN_in[16] = (CH2_TSTIN[16] === 1'bz) || CH2_TSTIN[16]; // rv 1
  assign CH2_TSTIN_in[17] = (CH2_TSTIN[17] === 1'bz) || CH2_TSTIN[17]; // rv 1
  assign CH2_TSTIN_in[18] = (CH2_TSTIN[18] === 1'bz) || CH2_TSTIN[18]; // rv 1
  assign CH2_TSTIN_in[19] = (CH2_TSTIN[19] === 1'bz) || CH2_TSTIN[19]; // rv 1
  assign CH2_TSTIN_in[1] = (CH2_TSTIN[1] === 1'bz) || CH2_TSTIN[1]; // rv 1
  assign CH2_TSTIN_in[2] = (CH2_TSTIN[2] === 1'bz) || CH2_TSTIN[2]; // rv 1
  assign CH2_TSTIN_in[3] = (CH2_TSTIN[3] === 1'bz) || CH2_TSTIN[3]; // rv 1
  assign CH2_TSTIN_in[4] = (CH2_TSTIN[4] === 1'bz) || CH2_TSTIN[4]; // rv 1
  assign CH2_TSTIN_in[5] = (CH2_TSTIN[5] === 1'bz) || CH2_TSTIN[5]; // rv 1
  assign CH2_TSTIN_in[6] = (CH2_TSTIN[6] === 1'bz) || CH2_TSTIN[6]; // rv 1
  assign CH2_TSTIN_in[7] = (CH2_TSTIN[7] === 1'bz) || CH2_TSTIN[7]; // rv 1
  assign CH2_TSTIN_in[8] = (CH2_TSTIN[8] === 1'bz) || CH2_TSTIN[8]; // rv 1
  assign CH2_TSTIN_in[9] = (CH2_TSTIN[9] === 1'bz) || CH2_TSTIN[9]; // rv 1
  assign CH2_TX10GSTAT_M_in = CH2_TX10GSTAT_M;
  assign CH2_TXBUFSTATUS_M_in = CH2_TXBUFSTATUS_M;
  assign CH2_TXCOMFINISH_M_in = CH2_TXCOMFINISH_M;
  assign CH2_TXCOMINIT_in = (CH2_TXCOMINIT === 1'bz) || CH2_TXCOMINIT; // rv 1
  assign CH2_TXCOMSAS_in = (CH2_TXCOMSAS === 1'bz) || CH2_TXCOMSAS; // rv 1
  assign CH2_TXCOMWAKE_in = (CH2_TXCOMWAKE === 1'bz) || CH2_TXCOMWAKE; // rv 1
  assign CH2_TXCTRL0_in[0] = (CH2_TXCTRL0[0] === 1'bz) || CH2_TXCTRL0[0]; // rv 1
  assign CH2_TXCTRL0_in[10] = (CH2_TXCTRL0[10] === 1'bz) || CH2_TXCTRL0[10]; // rv 1
  assign CH2_TXCTRL0_in[11] = (CH2_TXCTRL0[11] === 1'bz) || CH2_TXCTRL0[11]; // rv 1
  assign CH2_TXCTRL0_in[12] = (CH2_TXCTRL0[12] === 1'bz) || CH2_TXCTRL0[12]; // rv 1
  assign CH2_TXCTRL0_in[13] = (CH2_TXCTRL0[13] === 1'bz) || CH2_TXCTRL0[13]; // rv 1
  assign CH2_TXCTRL0_in[14] = (CH2_TXCTRL0[14] === 1'bz) || CH2_TXCTRL0[14]; // rv 1
  assign CH2_TXCTRL0_in[15] = (CH2_TXCTRL0[15] === 1'bz) || CH2_TXCTRL0[15]; // rv 1
  assign CH2_TXCTRL0_in[1] = (CH2_TXCTRL0[1] === 1'bz) || CH2_TXCTRL0[1]; // rv 1
  assign CH2_TXCTRL0_in[2] = (CH2_TXCTRL0[2] === 1'bz) || CH2_TXCTRL0[2]; // rv 1
  assign CH2_TXCTRL0_in[3] = (CH2_TXCTRL0[3] === 1'bz) || CH2_TXCTRL0[3]; // rv 1
  assign CH2_TXCTRL0_in[4] = (CH2_TXCTRL0[4] === 1'bz) || CH2_TXCTRL0[4]; // rv 1
  assign CH2_TXCTRL0_in[5] = (CH2_TXCTRL0[5] === 1'bz) || CH2_TXCTRL0[5]; // rv 1
  assign CH2_TXCTRL0_in[6] = (CH2_TXCTRL0[6] === 1'bz) || CH2_TXCTRL0[6]; // rv 1
  assign CH2_TXCTRL0_in[7] = (CH2_TXCTRL0[7] === 1'bz) || CH2_TXCTRL0[7]; // rv 1
  assign CH2_TXCTRL0_in[8] = (CH2_TXCTRL0[8] === 1'bz) || CH2_TXCTRL0[8]; // rv 1
  assign CH2_TXCTRL0_in[9] = (CH2_TXCTRL0[9] === 1'bz) || CH2_TXCTRL0[9]; // rv 1
  assign CH2_TXCTRL1_in[0] = (CH2_TXCTRL1[0] === 1'bz) || CH2_TXCTRL1[0]; // rv 1
  assign CH2_TXCTRL1_in[10] = (CH2_TXCTRL1[10] === 1'bz) || CH2_TXCTRL1[10]; // rv 1
  assign CH2_TXCTRL1_in[11] = (CH2_TXCTRL1[11] === 1'bz) || CH2_TXCTRL1[11]; // rv 1
  assign CH2_TXCTRL1_in[12] = (CH2_TXCTRL1[12] === 1'bz) || CH2_TXCTRL1[12]; // rv 1
  assign CH2_TXCTRL1_in[13] = (CH2_TXCTRL1[13] === 1'bz) || CH2_TXCTRL1[13]; // rv 1
  assign CH2_TXCTRL1_in[14] = (CH2_TXCTRL1[14] === 1'bz) || CH2_TXCTRL1[14]; // rv 1
  assign CH2_TXCTRL1_in[15] = (CH2_TXCTRL1[15] === 1'bz) || CH2_TXCTRL1[15]; // rv 1
  assign CH2_TXCTRL1_in[1] = (CH2_TXCTRL1[1] === 1'bz) || CH2_TXCTRL1[1]; // rv 1
  assign CH2_TXCTRL1_in[2] = (CH2_TXCTRL1[2] === 1'bz) || CH2_TXCTRL1[2]; // rv 1
  assign CH2_TXCTRL1_in[3] = (CH2_TXCTRL1[3] === 1'bz) || CH2_TXCTRL1[3]; // rv 1
  assign CH2_TXCTRL1_in[4] = (CH2_TXCTRL1[4] === 1'bz) || CH2_TXCTRL1[4]; // rv 1
  assign CH2_TXCTRL1_in[5] = (CH2_TXCTRL1[5] === 1'bz) || CH2_TXCTRL1[5]; // rv 1
  assign CH2_TXCTRL1_in[6] = (CH2_TXCTRL1[6] === 1'bz) || CH2_TXCTRL1[6]; // rv 1
  assign CH2_TXCTRL1_in[7] = (CH2_TXCTRL1[7] === 1'bz) || CH2_TXCTRL1[7]; // rv 1
  assign CH2_TXCTRL1_in[8] = (CH2_TXCTRL1[8] === 1'bz) || CH2_TXCTRL1[8]; // rv 1
  assign CH2_TXCTRL1_in[9] = (CH2_TXCTRL1[9] === 1'bz) || CH2_TXCTRL1[9]; // rv 1
  assign CH2_TXCTRL2_in[0] = (CH2_TXCTRL2[0] === 1'bz) || CH2_TXCTRL2[0]; // rv 1
  assign CH2_TXCTRL2_in[1] = (CH2_TXCTRL2[1] === 1'bz) || CH2_TXCTRL2[1]; // rv 1
  assign CH2_TXCTRL2_in[2] = (CH2_TXCTRL2[2] === 1'bz) || CH2_TXCTRL2[2]; // rv 1
  assign CH2_TXCTRL2_in[3] = (CH2_TXCTRL2[3] === 1'bz) || CH2_TXCTRL2[3]; // rv 1
  assign CH2_TXCTRL2_in[4] = (CH2_TXCTRL2[4] === 1'bz) || CH2_TXCTRL2[4]; // rv 1
  assign CH2_TXCTRL2_in[5] = (CH2_TXCTRL2[5] === 1'bz) || CH2_TXCTRL2[5]; // rv 1
  assign CH2_TXCTRL2_in[6] = (CH2_TXCTRL2[6] === 1'bz) || CH2_TXCTRL2[6]; // rv 1
  assign CH2_TXCTRL2_in[7] = (CH2_TXCTRL2[7] === 1'bz) || CH2_TXCTRL2[7]; // rv 1
  assign CH2_TXDAPICODEOVRDEN_in = (CH2_TXDAPICODEOVRDEN === 1'bz) || CH2_TXDAPICODEOVRDEN; // rv 1
  assign CH2_TXDAPICODERESET_in = (CH2_TXDAPICODERESET === 1'bz) || CH2_TXDAPICODERESET; // rv 1
  assign CH2_TXDATAEXTENDRSVD_in[0] = (CH2_TXDATAEXTENDRSVD[0] === 1'bz) || CH2_TXDATAEXTENDRSVD[0]; // rv 1
  assign CH2_TXDATAEXTENDRSVD_in[1] = (CH2_TXDATAEXTENDRSVD[1] === 1'bz) || CH2_TXDATAEXTENDRSVD[1]; // rv 1
  assign CH2_TXDATAEXTENDRSVD_in[2] = (CH2_TXDATAEXTENDRSVD[2] === 1'bz) || CH2_TXDATAEXTENDRSVD[2]; // rv 1
  assign CH2_TXDATAEXTENDRSVD_in[3] = (CH2_TXDATAEXTENDRSVD[3] === 1'bz) || CH2_TXDATAEXTENDRSVD[3]; // rv 1
  assign CH2_TXDATAEXTENDRSVD_in[4] = (CH2_TXDATAEXTENDRSVD[4] === 1'bz) || CH2_TXDATAEXTENDRSVD[4]; // rv 1
  assign CH2_TXDATAEXTENDRSVD_in[5] = (CH2_TXDATAEXTENDRSVD[5] === 1'bz) || CH2_TXDATAEXTENDRSVD[5]; // rv 1
  assign CH2_TXDATAEXTENDRSVD_in[6] = (CH2_TXDATAEXTENDRSVD[6] === 1'bz) || CH2_TXDATAEXTENDRSVD[6]; // rv 1
  assign CH2_TXDATAEXTENDRSVD_in[7] = (CH2_TXDATAEXTENDRSVD[7] === 1'bz) || CH2_TXDATAEXTENDRSVD[7]; // rv 1
  assign CH2_TXDCCDONE_M_in = CH2_TXDCCDONE_M;
  assign CH2_TXDEEMPH_in[0] = (CH2_TXDEEMPH[0] === 1'bz) || CH2_TXDEEMPH[0]; // rv 1
  assign CH2_TXDEEMPH_in[1] = (CH2_TXDEEMPH[1] === 1'bz) || CH2_TXDEEMPH[1]; // rv 1
  assign CH2_TXDETECTRX_in = (CH2_TXDETECTRX === 1'bz) || CH2_TXDETECTRX; // rv 1
  assign CH2_TXDIFFCTRL_in[0] = (CH2_TXDIFFCTRL[0] === 1'bz) || CH2_TXDIFFCTRL[0]; // rv 1
  assign CH2_TXDIFFCTRL_in[1] = (CH2_TXDIFFCTRL[1] === 1'bz) || CH2_TXDIFFCTRL[1]; // rv 1
  assign CH2_TXDIFFCTRL_in[2] = (CH2_TXDIFFCTRL[2] === 1'bz) || CH2_TXDIFFCTRL[2]; // rv 1
  assign CH2_TXDIFFCTRL_in[3] = (CH2_TXDIFFCTRL[3] === 1'bz) || CH2_TXDIFFCTRL[3]; // rv 1
  assign CH2_TXDIFFCTRL_in[4] = (CH2_TXDIFFCTRL[4] === 1'bz) || CH2_TXDIFFCTRL[4]; // rv 1
  assign CH2_TXDLYALIGNERR_M_in = CH2_TXDLYALIGNERR_M;
  assign CH2_TXDLYALIGNPROG_M_in = CH2_TXDLYALIGNPROG_M;
  assign CH2_TXDLYALIGNREQ_in = (CH2_TXDLYALIGNREQ === 1'bz) || CH2_TXDLYALIGNREQ; // rv 1
  assign CH2_TXELECIDLE_in = (CH2_TXELECIDLE === 1'bz) || CH2_TXELECIDLE; // rv 1
  assign CH2_TXHEADER_in[0] = (CH2_TXHEADER[0] === 1'bz) || CH2_TXHEADER[0]; // rv 1
  assign CH2_TXHEADER_in[1] = (CH2_TXHEADER[1] === 1'bz) || CH2_TXHEADER[1]; // rv 1
  assign CH2_TXHEADER_in[2] = (CH2_TXHEADER[2] === 1'bz) || CH2_TXHEADER[2]; // rv 1
  assign CH2_TXHEADER_in[3] = (CH2_TXHEADER[3] === 1'bz) || CH2_TXHEADER[3]; // rv 1
  assign CH2_TXHEADER_in[4] = (CH2_TXHEADER[4] === 1'bz) || CH2_TXHEADER[4]; // rv 1
  assign CH2_TXHEADER_in[5] = (CH2_TXHEADER[5] === 1'bz) || CH2_TXHEADER[5]; // rv 1
  assign CH2_TXINHIBIT_in = (CH2_TXINHIBIT === 1'bz) || CH2_TXINHIBIT; // rv 1
  assign CH2_TXLATCLK_in = (CH2_TXLATCLK === 1'bz) || CH2_TXLATCLK; // rv 1
  assign CH2_TXMAINCURSOR_in[0] = (CH2_TXMAINCURSOR[0] === 1'bz) || CH2_TXMAINCURSOR[0]; // rv 1
  assign CH2_TXMAINCURSOR_in[1] = (CH2_TXMAINCURSOR[1] === 1'bz) || CH2_TXMAINCURSOR[1]; // rv 1
  assign CH2_TXMAINCURSOR_in[2] = (CH2_TXMAINCURSOR[2] === 1'bz) || CH2_TXMAINCURSOR[2]; // rv 1
  assign CH2_TXMAINCURSOR_in[3] = (CH2_TXMAINCURSOR[3] === 1'bz) || CH2_TXMAINCURSOR[3]; // rv 1
  assign CH2_TXMAINCURSOR_in[4] = (CH2_TXMAINCURSOR[4] === 1'bz) || CH2_TXMAINCURSOR[4]; // rv 1
  assign CH2_TXMAINCURSOR_in[5] = (CH2_TXMAINCURSOR[5] === 1'bz) || CH2_TXMAINCURSOR[5]; // rv 1
  assign CH2_TXMAINCURSOR_in[6] = (CH2_TXMAINCURSOR[6] === 1'bz) || CH2_TXMAINCURSOR[6]; // rv 1
  assign CH2_TXMARGIN_in[0] = (CH2_TXMARGIN[0] === 1'bz) || CH2_TXMARGIN[0]; // rv 1
  assign CH2_TXMARGIN_in[1] = (CH2_TXMARGIN[1] === 1'bz) || CH2_TXMARGIN[1]; // rv 1
  assign CH2_TXMARGIN_in[2] = (CH2_TXMARGIN[2] === 1'bz) || CH2_TXMARGIN[2]; // rv 1
  assign CH2_TXMLDCHAINDONE_in = (CH2_TXMLDCHAINDONE === 1'bz) || CH2_TXMLDCHAINDONE; // rv 1
  assign CH2_TXMLDCHAINREQ_in = (CH2_TXMLDCHAINREQ === 1'bz) || CH2_TXMLDCHAINREQ; // rv 1
  assign CH2_TXONESZEROS_in = (CH2_TXONESZEROS === 1'bz) || CH2_TXONESZEROS; // rv 1
  assign CH2_TXPAUSEDELAYALIGN_in = (CH2_TXPAUSEDELAYALIGN === 1'bz) || CH2_TXPAUSEDELAYALIGN; // rv 1
  assign CH2_TXPCSRESETMASK_in = (CH2_TXPCSRESETMASK === 1'bz) || CH2_TXPCSRESETMASK; // rv 1
  assign CH2_TXPD_in[0] = (CH2_TXPD[0] === 1'bz) || CH2_TXPD[0]; // rv 1
  assign CH2_TXPD_in[1] = (CH2_TXPD[1] === 1'bz) || CH2_TXPD[1]; // rv 1
  assign CH2_TXPHALIGNDONE_M_in = CH2_TXPHALIGNDONE_M;
  assign CH2_TXPHALIGNERR_M_in = CH2_TXPHALIGNERR_M;
  assign CH2_TXPHALIGNOUTRSVD_M_in = CH2_TXPHALIGNOUTRSVD_M;
  assign CH2_TXPHALIGNREQ_in = (CH2_TXPHALIGNREQ === 1'bz) || CH2_TXPHALIGNREQ; // rv 1
  assign CH2_TXPHALIGNRESETMASK_in[0] = (CH2_TXPHALIGNRESETMASK[0] === 1'bz) || CH2_TXPHALIGNRESETMASK[0]; // rv 1
  assign CH2_TXPHALIGNRESETMASK_in[1] = (CH2_TXPHALIGNRESETMASK[1] === 1'bz) || CH2_TXPHALIGNRESETMASK[1]; // rv 1
  assign CH2_TXPHDLYPD_in = (CH2_TXPHDLYPD === 1'bz) || CH2_TXPHDLYPD; // rv 1
  assign CH2_TXPHDLYRESETDONE_M_in = CH2_TXPHDLYRESETDONE_M;
  assign CH2_TXPHDLYRESET_in = (CH2_TXPHDLYRESET === 1'bz) || CH2_TXPHDLYRESET; // rv 1
  assign CH2_TXPHDLYTSTCLK_in = (CH2_TXPHDLYTSTCLK === 1'bz) || CH2_TXPHDLYTSTCLK; // rv 1
  assign CH2_TXPHSETINITDONE_M_in = CH2_TXPHSETINITDONE_M;
  assign CH2_TXPHSETINITREQ_in = (CH2_TXPHSETINITREQ === 1'bz) || CH2_TXPHSETINITREQ; // rv 1
  assign CH2_TXPHSHIFT180DONE_M_in = CH2_TXPHSHIFT180DONE_M;
  assign CH2_TXPHSHIFT180_in = (CH2_TXPHSHIFT180 === 1'bz) || CH2_TXPHSHIFT180; // rv 1
  assign CH2_TXPICODEOVRDEN_in = (CH2_TXPICODEOVRDEN === 1'bz) || CH2_TXPICODEOVRDEN; // rv 1
  assign CH2_TXPICODERESET_in = (CH2_TXPICODERESET === 1'bz) || CH2_TXPICODERESET; // rv 1
  assign CH2_TXPIPPMEN_in = (CH2_TXPIPPMEN === 1'bz) || CH2_TXPIPPMEN; // rv 1
  assign CH2_TXPIPPMSTEPSIZE_in[0] = (CH2_TXPIPPMSTEPSIZE[0] === 1'bz) || CH2_TXPIPPMSTEPSIZE[0]; // rv 1
  assign CH2_TXPIPPMSTEPSIZE_in[1] = (CH2_TXPIPPMSTEPSIZE[1] === 1'bz) || CH2_TXPIPPMSTEPSIZE[1]; // rv 1
  assign CH2_TXPIPPMSTEPSIZE_in[2] = (CH2_TXPIPPMSTEPSIZE[2] === 1'bz) || CH2_TXPIPPMSTEPSIZE[2]; // rv 1
  assign CH2_TXPIPPMSTEPSIZE_in[3] = (CH2_TXPIPPMSTEPSIZE[3] === 1'bz) || CH2_TXPIPPMSTEPSIZE[3]; // rv 1
  assign CH2_TXPIPPMSTEPSIZE_in[4] = (CH2_TXPIPPMSTEPSIZE[4] === 1'bz) || CH2_TXPIPPMSTEPSIZE[4]; // rv 1
  assign CH2_TXPISOPD_in = (CH2_TXPISOPD === 1'bz) || CH2_TXPISOPD; // rv 1
  assign CH2_TXPMARESETDONE_M_in = CH2_TXPMARESETDONE_M;
  assign CH2_TXPMARESETMASK_in[0] = (CH2_TXPMARESETMASK[0] === 1'bz) || CH2_TXPMARESETMASK[0]; // rv 1
  assign CH2_TXPMARESETMASK_in[1] = (CH2_TXPMARESETMASK[1] === 1'bz) || CH2_TXPMARESETMASK[1]; // rv 1
  assign CH2_TXPMARESETMASK_in[2] = (CH2_TXPMARESETMASK[2] === 1'bz) || CH2_TXPMARESETMASK[2]; // rv 1
  assign CH2_TXPOLARITY_in = (CH2_TXPOLARITY === 1'bz) || CH2_TXPOLARITY; // rv 1
  assign CH2_TXPOSTCURSOR_in[0] = (CH2_TXPOSTCURSOR[0] === 1'bz) || CH2_TXPOSTCURSOR[0]; // rv 1
  assign CH2_TXPOSTCURSOR_in[1] = (CH2_TXPOSTCURSOR[1] === 1'bz) || CH2_TXPOSTCURSOR[1]; // rv 1
  assign CH2_TXPOSTCURSOR_in[2] = (CH2_TXPOSTCURSOR[2] === 1'bz) || CH2_TXPOSTCURSOR[2]; // rv 1
  assign CH2_TXPOSTCURSOR_in[3] = (CH2_TXPOSTCURSOR[3] === 1'bz) || CH2_TXPOSTCURSOR[3]; // rv 1
  assign CH2_TXPOSTCURSOR_in[4] = (CH2_TXPOSTCURSOR[4] === 1'bz) || CH2_TXPOSTCURSOR[4]; // rv 1
  assign CH2_TXPRBSFORCEERR_in = (CH2_TXPRBSFORCEERR === 1'bz) || CH2_TXPRBSFORCEERR; // rv 1
  assign CH2_TXPRBSSEL_in[0] = (CH2_TXPRBSSEL[0] === 1'bz) || CH2_TXPRBSSEL[0]; // rv 1
  assign CH2_TXPRBSSEL_in[1] = (CH2_TXPRBSSEL[1] === 1'bz) || CH2_TXPRBSSEL[1]; // rv 1
  assign CH2_TXPRBSSEL_in[2] = (CH2_TXPRBSSEL[2] === 1'bz) || CH2_TXPRBSSEL[2]; // rv 1
  assign CH2_TXPRBSSEL_in[3] = (CH2_TXPRBSSEL[3] === 1'bz) || CH2_TXPRBSSEL[3]; // rv 1
  assign CH2_TXPRECURSOR_in[0] = (CH2_TXPRECURSOR[0] === 1'bz) || CH2_TXPRECURSOR[0]; // rv 1
  assign CH2_TXPRECURSOR_in[1] = (CH2_TXPRECURSOR[1] === 1'bz) || CH2_TXPRECURSOR[1]; // rv 1
  assign CH2_TXPRECURSOR_in[2] = (CH2_TXPRECURSOR[2] === 1'bz) || CH2_TXPRECURSOR[2]; // rv 1
  assign CH2_TXPRECURSOR_in[3] = (CH2_TXPRECURSOR[3] === 1'bz) || CH2_TXPRECURSOR[3]; // rv 1
  assign CH2_TXPRECURSOR_in[4] = (CH2_TXPRECURSOR[4] === 1'bz) || CH2_TXPRECURSOR[4]; // rv 1
  assign CH2_TXPROGDIVRESETDONE_M_in = CH2_TXPROGDIVRESETDONE_M;
  assign CH2_TXPROGDIVRESET_in = (CH2_TXPROGDIVRESET === 1'bz) || CH2_TXPROGDIVRESET; // rv 1
  assign CH2_TXRATE_in[0] = (CH2_TXRATE[0] === 1'bz) || CH2_TXRATE[0]; // rv 1
  assign CH2_TXRATE_in[1] = (CH2_TXRATE[1] === 1'bz) || CH2_TXRATE[1]; // rv 1
  assign CH2_TXRATE_in[2] = (CH2_TXRATE[2] === 1'bz) || CH2_TXRATE[2]; // rv 1
  assign CH2_TXRATE_in[3] = (CH2_TXRATE[3] === 1'bz) || CH2_TXRATE[3]; // rv 1
  assign CH2_TXRATE_in[4] = (CH2_TXRATE[4] === 1'bz) || CH2_TXRATE[4]; // rv 1
  assign CH2_TXRATE_in[5] = (CH2_TXRATE[5] === 1'bz) || CH2_TXRATE[5]; // rv 1
  assign CH2_TXRATE_in[6] = (CH2_TXRATE[6] === 1'bz) || CH2_TXRATE[6]; // rv 1
  assign CH2_TXRATE_in[7] = (CH2_TXRATE[7] === 1'bz) || CH2_TXRATE[7]; // rv 1
  assign CH2_TXRESETDONE_M_in = CH2_TXRESETDONE_M;
  assign CH2_TXRESETMODE_in[0] = (CH2_TXRESETMODE[0] === 1'bz) || CH2_TXRESETMODE[0]; // rv 1
  assign CH2_TXRESETMODE_in[1] = (CH2_TXRESETMODE[1] === 1'bz) || CH2_TXRESETMODE[1]; // rv 1
  assign CH2_TXSEQUENCE_in[0] = (CH2_TXSEQUENCE[0] === 1'bz) || CH2_TXSEQUENCE[0]; // rv 1
  assign CH2_TXSEQUENCE_in[1] = (CH2_TXSEQUENCE[1] === 1'bz) || CH2_TXSEQUENCE[1]; // rv 1
  assign CH2_TXSEQUENCE_in[2] = (CH2_TXSEQUENCE[2] === 1'bz) || CH2_TXSEQUENCE[2]; // rv 1
  assign CH2_TXSEQUENCE_in[3] = (CH2_TXSEQUENCE[3] === 1'bz) || CH2_TXSEQUENCE[3]; // rv 1
  assign CH2_TXSEQUENCE_in[4] = (CH2_TXSEQUENCE[4] === 1'bz) || CH2_TXSEQUENCE[4]; // rv 1
  assign CH2_TXSEQUENCE_in[5] = (CH2_TXSEQUENCE[5] === 1'bz) || CH2_TXSEQUENCE[5]; // rv 1
  assign CH2_TXSEQUENCE_in[6] = (CH2_TXSEQUENCE[6] === 1'bz) || CH2_TXSEQUENCE[6]; // rv 1
  assign CH2_TXSWING_in = (CH2_TXSWING === 1'bz) || CH2_TXSWING; // rv 1
  assign CH2_TXSYNCALLIN_in = (CH2_TXSYNCALLIN === 1'bz) || CH2_TXSYNCALLIN; // rv 1
  assign CH2_TXSYNCDONE_M_in = CH2_TXSYNCDONE_M;
  assign CH2_TXUSERRDY_in = (CH2_TXUSERRDY === 1'bz) || CH2_TXUSERRDY; // rv 1
  assign CH2_TXUSRCLK_in = (CH2_TXUSRCLK === 1'bz) || CH2_TXUSRCLK; // rv 1
  assign CH3_BUFGTCEMASK_M_in = CH3_BUFGTCEMASK_M;
  assign CH3_BUFGTCE_M_in = CH3_BUFGTCE_M;
  assign CH3_BUFGTDIV_M_in = CH3_BUFGTDIV_M;
  assign CH3_BUFGTRSTMASK_M_in = CH3_BUFGTRSTMASK_M;
  assign CH3_BUFGTRST_M_in = CH3_BUFGTRST_M;
  assign CH3_CDRBMCDRREQ_in = (CH3_CDRBMCDRREQ === 1'bz) || CH3_CDRBMCDRREQ; // rv 1
  assign CH3_CDRFREQOS_in = (CH3_CDRFREQOS === 1'bz) || CH3_CDRFREQOS; // rv 1
  assign CH3_CDRINCPCTRL_in = (CH3_CDRINCPCTRL === 1'bz) || CH3_CDRINCPCTRL; // rv 1
  assign CH3_CDRSTEPDIR_in = (CH3_CDRSTEPDIR === 1'bz) || CH3_CDRSTEPDIR; // rv 1
  assign CH3_CDRSTEPSQ_in = (CH3_CDRSTEPSQ === 1'bz) || CH3_CDRSTEPSQ; // rv 1
  assign CH3_CDRSTEPSX_in = (CH3_CDRSTEPSX === 1'bz) || CH3_CDRSTEPSX; // rv 1
  assign CH3_CFOKOVRDFINISH_in = (CH3_CFOKOVRDFINISH === 1'bz) || CH3_CFOKOVRDFINISH; // rv 1
  assign CH3_CFOKOVRDPULSE_in = (CH3_CFOKOVRDPULSE === 1'bz) || CH3_CFOKOVRDPULSE; // rv 1
  assign CH3_CFOKOVRDRDY0_M_in = CH3_CFOKOVRDRDY0_M;
  assign CH3_CFOKOVRDRDY1_M_in = CH3_CFOKOVRDRDY1_M;
  assign CH3_CFOKOVRDSTART_in = (CH3_CFOKOVRDSTART === 1'bz) || CH3_CFOKOVRDSTART; // rv 1
  assign CH3_CLKRSVD0_in = (CH3_CLKRSVD0 === 1'bz) || CH3_CLKRSVD0; // rv 1
  assign CH3_CLKRSVD1_in = (CH3_CLKRSVD1 === 1'bz) || CH3_CLKRSVD1; // rv 1
  assign CH3_DMONFIFORESET_in = (CH3_DMONFIFORESET === 1'bz) || CH3_DMONFIFORESET; // rv 1
  assign CH3_DMONITORCLK_in = (CH3_DMONITORCLK === 1'bz) || CH3_DMONITORCLK; // rv 1
  assign CH3_DMONITOROUT_M_in = CH3_DMONITOROUT_M;
  assign CH3_EYESCANDATAERROR_M_in = CH3_EYESCANDATAERROR_M;
  assign CH3_EYESCANRESET_in = (CH3_EYESCANRESET === 1'bz) || CH3_EYESCANRESET; // rv 1
  assign CH3_EYESCANTRIGGER_in = (CH3_EYESCANTRIGGER === 1'bz) || CH3_EYESCANTRIGGER; // rv 1
  assign CH3_GTRSVD_in[0] = (CH3_GTRSVD[0] === 1'bz) || CH3_GTRSVD[0]; // rv 1
  assign CH3_GTRSVD_in[10] = (CH3_GTRSVD[10] === 1'bz) || CH3_GTRSVD[10]; // rv 1
  assign CH3_GTRSVD_in[11] = (CH3_GTRSVD[11] === 1'bz) || CH3_GTRSVD[11]; // rv 1
  assign CH3_GTRSVD_in[12] = (CH3_GTRSVD[12] === 1'bz) || CH3_GTRSVD[12]; // rv 1
  assign CH3_GTRSVD_in[13] = (CH3_GTRSVD[13] === 1'bz) || CH3_GTRSVD[13]; // rv 1
  assign CH3_GTRSVD_in[14] = (CH3_GTRSVD[14] === 1'bz) || CH3_GTRSVD[14]; // rv 1
  assign CH3_GTRSVD_in[15] = (CH3_GTRSVD[15] === 1'bz) || CH3_GTRSVD[15]; // rv 1
  assign CH3_GTRSVD_in[1] = (CH3_GTRSVD[1] === 1'bz) || CH3_GTRSVD[1]; // rv 1
  assign CH3_GTRSVD_in[2] = (CH3_GTRSVD[2] === 1'bz) || CH3_GTRSVD[2]; // rv 1
  assign CH3_GTRSVD_in[3] = (CH3_GTRSVD[3] === 1'bz) || CH3_GTRSVD[3]; // rv 1
  assign CH3_GTRSVD_in[4] = (CH3_GTRSVD[4] === 1'bz) || CH3_GTRSVD[4]; // rv 1
  assign CH3_GTRSVD_in[5] = (CH3_GTRSVD[5] === 1'bz) || CH3_GTRSVD[5]; // rv 1
  assign CH3_GTRSVD_in[6] = (CH3_GTRSVD[6] === 1'bz) || CH3_GTRSVD[6]; // rv 1
  assign CH3_GTRSVD_in[7] = (CH3_GTRSVD[7] === 1'bz) || CH3_GTRSVD[7]; // rv 1
  assign CH3_GTRSVD_in[8] = (CH3_GTRSVD[8] === 1'bz) || CH3_GTRSVD[8]; // rv 1
  assign CH3_GTRSVD_in[9] = (CH3_GTRSVD[9] === 1'bz) || CH3_GTRSVD[9]; // rv 1
  assign CH3_GTRXRESET_in = (CH3_GTRXRESET === 1'bz) || CH3_GTRXRESET; // rv 1
  assign CH3_GTTXRESET_in = (CH3_GTTXRESET === 1'bz) || CH3_GTTXRESET; // rv 1
  assign CH3_HSDPPCSRESET_in = (CH3_HSDPPCSRESET === 1'bz) || CH3_HSDPPCSRESET; // rv 1
  assign CH3_ILORESETDONE_M_in = CH3_ILORESETDONE_M;
  assign CH3_ILORESETMASK_in = (CH3_ILORESETMASK === 1'bz) || CH3_ILORESETMASK; // rv 1
  assign CH3_ILORESET_in = (CH3_ILORESET === 1'bz) || CH3_ILORESET; // rv 1
  assign CH3_LOOPBACK_in[0] = (CH3_LOOPBACK[0] === 1'bz) || CH3_LOOPBACK[0]; // rv 1
  assign CH3_LOOPBACK_in[1] = (CH3_LOOPBACK[1] === 1'bz) || CH3_LOOPBACK[1]; // rv 1
  assign CH3_LOOPBACK_in[2] = (CH3_LOOPBACK[2] === 1'bz) || CH3_LOOPBACK[2]; // rv 1
  assign CH3_PCIERSTB_in = (CH3_PCIERSTB === 1'bz) || CH3_PCIERSTB; // rv 1
  assign CH3_PCSRSVDIN_in[0] = (CH3_PCSRSVDIN[0] === 1'bz) || CH3_PCSRSVDIN[0]; // rv 1
  assign CH3_PCSRSVDIN_in[10] = (CH3_PCSRSVDIN[10] === 1'bz) || CH3_PCSRSVDIN[10]; // rv 1
  assign CH3_PCSRSVDIN_in[11] = (CH3_PCSRSVDIN[11] === 1'bz) || CH3_PCSRSVDIN[11]; // rv 1
  assign CH3_PCSRSVDIN_in[12] = (CH3_PCSRSVDIN[12] === 1'bz) || CH3_PCSRSVDIN[12]; // rv 1
  assign CH3_PCSRSVDIN_in[13] = (CH3_PCSRSVDIN[13] === 1'bz) || CH3_PCSRSVDIN[13]; // rv 1
  assign CH3_PCSRSVDIN_in[14] = (CH3_PCSRSVDIN[14] === 1'bz) || CH3_PCSRSVDIN[14]; // rv 1
  assign CH3_PCSRSVDIN_in[15] = (CH3_PCSRSVDIN[15] === 1'bz) || CH3_PCSRSVDIN[15]; // rv 1
  assign CH3_PCSRSVDIN_in[1] = (CH3_PCSRSVDIN[1] === 1'bz) || CH3_PCSRSVDIN[1]; // rv 1
  assign CH3_PCSRSVDIN_in[2] = (CH3_PCSRSVDIN[2] === 1'bz) || CH3_PCSRSVDIN[2]; // rv 1
  assign CH3_PCSRSVDIN_in[3] = (CH3_PCSRSVDIN[3] === 1'bz) || CH3_PCSRSVDIN[3]; // rv 1
  assign CH3_PCSRSVDIN_in[4] = (CH3_PCSRSVDIN[4] === 1'bz) || CH3_PCSRSVDIN[4]; // rv 1
  assign CH3_PCSRSVDIN_in[5] = (CH3_PCSRSVDIN[5] === 1'bz) || CH3_PCSRSVDIN[5]; // rv 1
  assign CH3_PCSRSVDIN_in[6] = (CH3_PCSRSVDIN[6] === 1'bz) || CH3_PCSRSVDIN[6]; // rv 1
  assign CH3_PCSRSVDIN_in[7] = (CH3_PCSRSVDIN[7] === 1'bz) || CH3_PCSRSVDIN[7]; // rv 1
  assign CH3_PCSRSVDIN_in[8] = (CH3_PCSRSVDIN[8] === 1'bz) || CH3_PCSRSVDIN[8]; // rv 1
  assign CH3_PCSRSVDIN_in[9] = (CH3_PCSRSVDIN[9] === 1'bz) || CH3_PCSRSVDIN[9]; // rv 1
  assign CH3_PCSRSVDOUT_M_in = CH3_PCSRSVDOUT_M;
  assign CH3_PHYESMADAPTSAVE_in = (CH3_PHYESMADAPTSAVE === 1'bz) || CH3_PHYESMADAPTSAVE; // rv 1
  assign CH3_PHYREADY_M_in = CH3_PHYREADY_M;
  assign CH3_PHYSTATUS_M_in = CH3_PHYSTATUS_M;
  assign CH3_PINRSVDAS_M_in = CH3_PINRSVDAS_M;
  assign CH3_RESETEXCEPTION_M_in = CH3_RESETEXCEPTION_M;
  assign CH3_RX10GSTAT_M_in = CH3_RX10GSTAT_M;
  assign CH3_RXBUFSTATUS_M_in = CH3_RXBUFSTATUS_M;
  assign CH3_RXBYTEISALIGNED_M_in = CH3_RXBYTEISALIGNED_M;
  assign CH3_RXBYTEREALIGN_M_in = CH3_RXBYTEREALIGN_M;
  assign CH3_RXCDRHOLD_in = (CH3_RXCDRHOLD === 1'bz) || CH3_RXCDRHOLD; // rv 1
  assign CH3_RXCDRLOCK_M_in = CH3_RXCDRLOCK_M;
  assign CH3_RXCDROVRDEN_in = (CH3_RXCDROVRDEN === 1'bz) || CH3_RXCDROVRDEN; // rv 1
  assign CH3_RXCDRPHDONE_M_in = CH3_RXCDRPHDONE_M;
  assign CH3_RXCDRRESET_in = (CH3_RXCDRRESET === 1'bz) || CH3_RXCDRRESET; // rv 1
  assign CH3_RXCHANBONDSEQ_M_in = CH3_RXCHANBONDSEQ_M;
  assign CH3_RXCHANISALIGNED_M_in = CH3_RXCHANISALIGNED_M;
  assign CH3_RXCHANREALIGN_M_in = CH3_RXCHANREALIGN_M;
  assign CH3_RXCHBONDI_in[0] = (CH3_RXCHBONDI[0] === 1'bz) || CH3_RXCHBONDI[0]; // rv 1
  assign CH3_RXCHBONDI_in[1] = (CH3_RXCHBONDI[1] === 1'bz) || CH3_RXCHBONDI[1]; // rv 1
  assign CH3_RXCHBONDI_in[2] = (CH3_RXCHBONDI[2] === 1'bz) || CH3_RXCHBONDI[2]; // rv 1
  assign CH3_RXCHBONDI_in[3] = (CH3_RXCHBONDI[3] === 1'bz) || CH3_RXCHBONDI[3]; // rv 1
  assign CH3_RXCHBONDI_in[4] = (CH3_RXCHBONDI[4] === 1'bz) || CH3_RXCHBONDI[4]; // rv 1
  assign CH3_RXCHBONDO_M_in = CH3_RXCHBONDO_M;
  assign CH3_RXCLKCORCNT_M_in = CH3_RXCLKCORCNT_M;
  assign CH3_RXCOMINITDET_M_in = CH3_RXCOMINITDET_M;
  assign CH3_RXCOMMADET_M_in = CH3_RXCOMMADET_M;
  assign CH3_RXCOMSASDET_M_in = CH3_RXCOMSASDET_M;
  assign CH3_RXCOMWAKEDET_M_in = CH3_RXCOMWAKEDET_M;
  assign CH3_RXCTRL0_M_in = CH3_RXCTRL0_M;
  assign CH3_RXCTRL1_M_in = CH3_RXCTRL1_M;
  assign CH3_RXCTRL2_M_in = CH3_RXCTRL2_M;
  assign CH3_RXCTRL3_M_in = CH3_RXCTRL3_M;
  assign CH3_RXDAPICODEOVRDEN_in = (CH3_RXDAPICODEOVRDEN === 1'bz) || CH3_RXDAPICODEOVRDEN; // rv 1
  assign CH3_RXDAPICODERESET_in = (CH3_RXDAPICODERESET === 1'bz) || CH3_RXDAPICODERESET; // rv 1
  assign CH3_RXDATAEXTENDRSVD_M_in = CH3_RXDATAEXTENDRSVD_M;
  assign CH3_RXDATAVALID_M_in = CH3_RXDATAVALID_M;
  assign CH3_RXDATA_M_in = CH3_RXDATA_M;
  assign CH3_RXDCCDONE_M_in = CH3_RXDCCDONE_M;
  assign CH3_RXDLYALIGNERR_M_in = CH3_RXDLYALIGNERR_M;
  assign CH3_RXDLYALIGNPROG_M_in = CH3_RXDLYALIGNPROG_M;
  assign CH3_RXDLYALIGNREQ_in = (CH3_RXDLYALIGNREQ === 1'bz) || CH3_RXDLYALIGNREQ; // rv 1
  assign CH3_RXELECIDLE_M_in = CH3_RXELECIDLE_M;
  assign CH3_RXEQTRAINING_in = (CH3_RXEQTRAINING === 1'bz) || CH3_RXEQTRAINING; // rv 1
  assign CH3_RXFINEALIGNDONE_M_in = CH3_RXFINEALIGNDONE_M;
  assign CH3_RXGEARBOXSLIP_in = (CH3_RXGEARBOXSLIP === 1'bz) || CH3_RXGEARBOXSLIP; // rv 1
  assign CH3_RXHEADERVALID_M_in = CH3_RXHEADERVALID_M;
  assign CH3_RXHEADER_M_in = CH3_RXHEADER_M;
  assign CH3_RXLATCLK_in = (CH3_RXLATCLK === 1'bz) || CH3_RXLATCLK; // rv 1
  assign CH3_RXLPMEN_in = (CH3_RXLPMEN === 1'bz) || CH3_RXLPMEN; // rv 1
  assign CH3_RXMLDCHAINDONE_in = (CH3_RXMLDCHAINDONE === 1'bz) || CH3_RXMLDCHAINDONE; // rv 1
  assign CH3_RXMLDCHAINREQ_in = (CH3_RXMLDCHAINREQ === 1'bz) || CH3_RXMLDCHAINREQ; // rv 1
  assign CH3_RXMLFINEALIGNREQ_in = (CH3_RXMLFINEALIGNREQ === 1'bz) || CH3_RXMLFINEALIGNREQ; // rv 1
  assign CH3_RXOOBRESET_in = (CH3_RXOOBRESET === 1'bz) || CH3_RXOOBRESET; // rv 1
  assign CH3_RXOSINTDONE_M_in = CH3_RXOSINTDONE_M;
  assign CH3_RXOSINTSTARTED_M_in = CH3_RXOSINTSTARTED_M;
  assign CH3_RXOSINTSTROBEDONE_M_in = CH3_RXOSINTSTROBEDONE_M;
  assign CH3_RXOSINTSTROBESTARTED_M_in = CH3_RXOSINTSTROBESTARTED_M;
  assign CH3_RXPCSRESETMASK_in[0] = (CH3_RXPCSRESETMASK[0] === 1'bz) || CH3_RXPCSRESETMASK[0]; // rv 1
  assign CH3_RXPCSRESETMASK_in[1] = (CH3_RXPCSRESETMASK[1] === 1'bz) || CH3_RXPCSRESETMASK[1]; // rv 1
  assign CH3_RXPCSRESETMASK_in[2] = (CH3_RXPCSRESETMASK[2] === 1'bz) || CH3_RXPCSRESETMASK[2]; // rv 1
  assign CH3_RXPCSRESETMASK_in[3] = (CH3_RXPCSRESETMASK[3] === 1'bz) || CH3_RXPCSRESETMASK[3]; // rv 1
  assign CH3_RXPCSRESETMASK_in[4] = (CH3_RXPCSRESETMASK[4] === 1'bz) || CH3_RXPCSRESETMASK[4]; // rv 1
  assign CH3_RXPD_in[0] = (CH3_RXPD[0] === 1'bz) || CH3_RXPD[0]; // rv 1
  assign CH3_RXPD_in[1] = (CH3_RXPD[1] === 1'bz) || CH3_RXPD[1]; // rv 1
  assign CH3_RXPHALIGNDONE_M_in = CH3_RXPHALIGNDONE_M;
  assign CH3_RXPHALIGNERR_M_in = CH3_RXPHALIGNERR_M;
  assign CH3_RXPHALIGNREQ_in = (CH3_RXPHALIGNREQ === 1'bz) || CH3_RXPHALIGNREQ; // rv 1
  assign CH3_RXPHALIGNRESETMASK_in[0] = (CH3_RXPHALIGNRESETMASK[0] === 1'bz) || CH3_RXPHALIGNRESETMASK[0]; // rv 1
  assign CH3_RXPHALIGNRESETMASK_in[1] = (CH3_RXPHALIGNRESETMASK[1] === 1'bz) || CH3_RXPHALIGNRESETMASK[1]; // rv 1
  assign CH3_RXPHDLYPD_in = (CH3_RXPHDLYPD === 1'bz) || CH3_RXPHDLYPD; // rv 1
  assign CH3_RXPHDLYRESETDONE_M_in = CH3_RXPHDLYRESETDONE_M;
  assign CH3_RXPHDLYRESET_in = (CH3_RXPHDLYRESET === 1'bz) || CH3_RXPHDLYRESET; // rv 1
  assign CH3_RXPHSETINITDONE_M_in = CH3_RXPHSETINITDONE_M;
  assign CH3_RXPHSETINITREQ_in = (CH3_RXPHSETINITREQ === 1'bz) || CH3_RXPHSETINITREQ; // rv 1
  assign CH3_RXPHSHIFT180DONE_M_in = CH3_RXPHSHIFT180DONE_M;
  assign CH3_RXPHSHIFT180_in = (CH3_RXPHSHIFT180 === 1'bz) || CH3_RXPHSHIFT180; // rv 1
  assign CH3_RXPMARESETDONE_M_in = CH3_RXPMARESETDONE_M;
  assign CH3_RXPMARESETMASK_in[0] = (CH3_RXPMARESETMASK[0] === 1'bz) || CH3_RXPMARESETMASK[0]; // rv 1
  assign CH3_RXPMARESETMASK_in[1] = (CH3_RXPMARESETMASK[1] === 1'bz) || CH3_RXPMARESETMASK[1]; // rv 1
  assign CH3_RXPMARESETMASK_in[2] = (CH3_RXPMARESETMASK[2] === 1'bz) || CH3_RXPMARESETMASK[2]; // rv 1
  assign CH3_RXPMARESETMASK_in[3] = (CH3_RXPMARESETMASK[3] === 1'bz) || CH3_RXPMARESETMASK[3]; // rv 1
  assign CH3_RXPMARESETMASK_in[4] = (CH3_RXPMARESETMASK[4] === 1'bz) || CH3_RXPMARESETMASK[4]; // rv 1
  assign CH3_RXPMARESETMASK_in[5] = (CH3_RXPMARESETMASK[5] === 1'bz) || CH3_RXPMARESETMASK[5]; // rv 1
  assign CH3_RXPMARESETMASK_in[6] = (CH3_RXPMARESETMASK[6] === 1'bz) || CH3_RXPMARESETMASK[6]; // rv 1
  assign CH3_RXPOLARITY_in = (CH3_RXPOLARITY === 1'bz) || CH3_RXPOLARITY; // rv 1
  assign CH3_RXPRBSCNTRESET_in = (CH3_RXPRBSCNTRESET === 1'bz) || CH3_RXPRBSCNTRESET; // rv 1
  assign CH3_RXPRBSERR_M_in = CH3_RXPRBSERR_M;
  assign CH3_RXPRBSLOCKED_M_in = CH3_RXPRBSLOCKED_M;
  assign CH3_RXPRBSSEL_in[0] = (CH3_RXPRBSSEL[0] === 1'bz) || CH3_RXPRBSSEL[0]; // rv 1
  assign CH3_RXPRBSSEL_in[1] = (CH3_RXPRBSSEL[1] === 1'bz) || CH3_RXPRBSSEL[1]; // rv 1
  assign CH3_RXPRBSSEL_in[2] = (CH3_RXPRBSSEL[2] === 1'bz) || CH3_RXPRBSSEL[2]; // rv 1
  assign CH3_RXPRBSSEL_in[3] = (CH3_RXPRBSSEL[3] === 1'bz) || CH3_RXPRBSSEL[3]; // rv 1
  assign CH3_RXPROGDIVRESETDONE_M_in = CH3_RXPROGDIVRESETDONE_M;
  assign CH3_RXPROGDIVRESET_in = (CH3_RXPROGDIVRESET === 1'bz) || CH3_RXPROGDIVRESET; // rv 1
  assign CH3_RXRATE_in[0] = (CH3_RXRATE[0] === 1'bz) || CH3_RXRATE[0]; // rv 1
  assign CH3_RXRATE_in[1] = (CH3_RXRATE[1] === 1'bz) || CH3_RXRATE[1]; // rv 1
  assign CH3_RXRATE_in[2] = (CH3_RXRATE[2] === 1'bz) || CH3_RXRATE[2]; // rv 1
  assign CH3_RXRATE_in[3] = (CH3_RXRATE[3] === 1'bz) || CH3_RXRATE[3]; // rv 1
  assign CH3_RXRATE_in[4] = (CH3_RXRATE[4] === 1'bz) || CH3_RXRATE[4]; // rv 1
  assign CH3_RXRATE_in[5] = (CH3_RXRATE[5] === 1'bz) || CH3_RXRATE[5]; // rv 1
  assign CH3_RXRATE_in[6] = (CH3_RXRATE[6] === 1'bz) || CH3_RXRATE[6]; // rv 1
  assign CH3_RXRATE_in[7] = (CH3_RXRATE[7] === 1'bz) || CH3_RXRATE[7]; // rv 1
  assign CH3_RXRESETDONE_M_in = CH3_RXRESETDONE_M;
  assign CH3_RXRESETMODE_in[0] = (CH3_RXRESETMODE[0] === 1'bz) || CH3_RXRESETMODE[0]; // rv 1
  assign CH3_RXRESETMODE_in[1] = (CH3_RXRESETMODE[1] === 1'bz) || CH3_RXRESETMODE[1]; // rv 1
  assign CH3_RXSLIDERDY_M_in = CH3_RXSLIDERDY_M;
  assign CH3_RXSLIDE_in = (CH3_RXSLIDE === 1'bz) || CH3_RXSLIDE; // rv 1
  assign CH3_RXSTARTOFSEQ_M_in = CH3_RXSTARTOFSEQ_M;
  assign CH3_RXSTATUS_M_in = CH3_RXSTATUS_M;
  assign CH3_RXSYNCALLIN_in = (CH3_RXSYNCALLIN === 1'bz) || CH3_RXSYNCALLIN; // rv 1
  assign CH3_RXSYNCDONE_M_in = CH3_RXSYNCDONE_M;
  assign CH3_RXTERMINATION_in = (CH3_RXTERMINATION === 1'bz) || CH3_RXTERMINATION; // rv 1
  assign CH3_RXUSERRDY_in = (CH3_RXUSERRDY === 1'bz) || CH3_RXUSERRDY; // rv 1
  assign CH3_RXUSRCLK_in = (CH3_RXUSRCLK === 1'bz) || CH3_RXUSRCLK; // rv 1
  assign CH3_RXVALID_M_in = CH3_RXVALID_M;
  assign CH3_TSTCLK0_in = (CH3_TSTCLK0 === 1'bz) || CH3_TSTCLK0; // rv 1
  assign CH3_TSTCLK1_in = (CH3_TSTCLK1 === 1'bz) || CH3_TSTCLK1; // rv 1
  assign CH3_TSTIN_in[0] = (CH3_TSTIN[0] === 1'bz) || CH3_TSTIN[0]; // rv 1
  assign CH3_TSTIN_in[10] = (CH3_TSTIN[10] === 1'bz) || CH3_TSTIN[10]; // rv 1
  assign CH3_TSTIN_in[11] = (CH3_TSTIN[11] === 1'bz) || CH3_TSTIN[11]; // rv 1
  assign CH3_TSTIN_in[12] = (CH3_TSTIN[12] === 1'bz) || CH3_TSTIN[12]; // rv 1
  assign CH3_TSTIN_in[13] = (CH3_TSTIN[13] === 1'bz) || CH3_TSTIN[13]; // rv 1
  assign CH3_TSTIN_in[14] = (CH3_TSTIN[14] === 1'bz) || CH3_TSTIN[14]; // rv 1
  assign CH3_TSTIN_in[15] = (CH3_TSTIN[15] === 1'bz) || CH3_TSTIN[15]; // rv 1
  assign CH3_TSTIN_in[16] = (CH3_TSTIN[16] === 1'bz) || CH3_TSTIN[16]; // rv 1
  assign CH3_TSTIN_in[17] = (CH3_TSTIN[17] === 1'bz) || CH3_TSTIN[17]; // rv 1
  assign CH3_TSTIN_in[18] = (CH3_TSTIN[18] === 1'bz) || CH3_TSTIN[18]; // rv 1
  assign CH3_TSTIN_in[19] = (CH3_TSTIN[19] === 1'bz) || CH3_TSTIN[19]; // rv 1
  assign CH3_TSTIN_in[1] = (CH3_TSTIN[1] === 1'bz) || CH3_TSTIN[1]; // rv 1
  assign CH3_TSTIN_in[2] = (CH3_TSTIN[2] === 1'bz) || CH3_TSTIN[2]; // rv 1
  assign CH3_TSTIN_in[3] = (CH3_TSTIN[3] === 1'bz) || CH3_TSTIN[3]; // rv 1
  assign CH3_TSTIN_in[4] = (CH3_TSTIN[4] === 1'bz) || CH3_TSTIN[4]; // rv 1
  assign CH3_TSTIN_in[5] = (CH3_TSTIN[5] === 1'bz) || CH3_TSTIN[5]; // rv 1
  assign CH3_TSTIN_in[6] = (CH3_TSTIN[6] === 1'bz) || CH3_TSTIN[6]; // rv 1
  assign CH3_TSTIN_in[7] = (CH3_TSTIN[7] === 1'bz) || CH3_TSTIN[7]; // rv 1
  assign CH3_TSTIN_in[8] = (CH3_TSTIN[8] === 1'bz) || CH3_TSTIN[8]; // rv 1
  assign CH3_TSTIN_in[9] = (CH3_TSTIN[9] === 1'bz) || CH3_TSTIN[9]; // rv 1
  assign CH3_TX10GSTAT_M_in = CH3_TX10GSTAT_M;
  assign CH3_TXBUFSTATUS_M_in = CH3_TXBUFSTATUS_M;
  assign CH3_TXCOMFINISH_M_in = CH3_TXCOMFINISH_M;
  assign CH3_TXCOMINIT_in = (CH3_TXCOMINIT === 1'bz) || CH3_TXCOMINIT; // rv 1
  assign CH3_TXCOMSAS_in = (CH3_TXCOMSAS === 1'bz) || CH3_TXCOMSAS; // rv 1
  assign CH3_TXCOMWAKE_in = (CH3_TXCOMWAKE === 1'bz) || CH3_TXCOMWAKE; // rv 1
  assign CH3_TXCTRL0_in[0] = (CH3_TXCTRL0[0] === 1'bz) || CH3_TXCTRL0[0]; // rv 1
  assign CH3_TXCTRL0_in[10] = (CH3_TXCTRL0[10] === 1'bz) || CH3_TXCTRL0[10]; // rv 1
  assign CH3_TXCTRL0_in[11] = (CH3_TXCTRL0[11] === 1'bz) || CH3_TXCTRL0[11]; // rv 1
  assign CH3_TXCTRL0_in[12] = (CH3_TXCTRL0[12] === 1'bz) || CH3_TXCTRL0[12]; // rv 1
  assign CH3_TXCTRL0_in[13] = (CH3_TXCTRL0[13] === 1'bz) || CH3_TXCTRL0[13]; // rv 1
  assign CH3_TXCTRL0_in[14] = (CH3_TXCTRL0[14] === 1'bz) || CH3_TXCTRL0[14]; // rv 1
  assign CH3_TXCTRL0_in[15] = (CH3_TXCTRL0[15] === 1'bz) || CH3_TXCTRL0[15]; // rv 1
  assign CH3_TXCTRL0_in[1] = (CH3_TXCTRL0[1] === 1'bz) || CH3_TXCTRL0[1]; // rv 1
  assign CH3_TXCTRL0_in[2] = (CH3_TXCTRL0[2] === 1'bz) || CH3_TXCTRL0[2]; // rv 1
  assign CH3_TXCTRL0_in[3] = (CH3_TXCTRL0[3] === 1'bz) || CH3_TXCTRL0[3]; // rv 1
  assign CH3_TXCTRL0_in[4] = (CH3_TXCTRL0[4] === 1'bz) || CH3_TXCTRL0[4]; // rv 1
  assign CH3_TXCTRL0_in[5] = (CH3_TXCTRL0[5] === 1'bz) || CH3_TXCTRL0[5]; // rv 1
  assign CH3_TXCTRL0_in[6] = (CH3_TXCTRL0[6] === 1'bz) || CH3_TXCTRL0[6]; // rv 1
  assign CH3_TXCTRL0_in[7] = (CH3_TXCTRL0[7] === 1'bz) || CH3_TXCTRL0[7]; // rv 1
  assign CH3_TXCTRL0_in[8] = (CH3_TXCTRL0[8] === 1'bz) || CH3_TXCTRL0[8]; // rv 1
  assign CH3_TXCTRL0_in[9] = (CH3_TXCTRL0[9] === 1'bz) || CH3_TXCTRL0[9]; // rv 1
  assign CH3_TXCTRL1_in[0] = (CH3_TXCTRL1[0] === 1'bz) || CH3_TXCTRL1[0]; // rv 1
  assign CH3_TXCTRL1_in[10] = (CH3_TXCTRL1[10] === 1'bz) || CH3_TXCTRL1[10]; // rv 1
  assign CH3_TXCTRL1_in[11] = (CH3_TXCTRL1[11] === 1'bz) || CH3_TXCTRL1[11]; // rv 1
  assign CH3_TXCTRL1_in[12] = (CH3_TXCTRL1[12] === 1'bz) || CH3_TXCTRL1[12]; // rv 1
  assign CH3_TXCTRL1_in[13] = (CH3_TXCTRL1[13] === 1'bz) || CH3_TXCTRL1[13]; // rv 1
  assign CH3_TXCTRL1_in[14] = (CH3_TXCTRL1[14] === 1'bz) || CH3_TXCTRL1[14]; // rv 1
  assign CH3_TXCTRL1_in[15] = (CH3_TXCTRL1[15] === 1'bz) || CH3_TXCTRL1[15]; // rv 1
  assign CH3_TXCTRL1_in[1] = (CH3_TXCTRL1[1] === 1'bz) || CH3_TXCTRL1[1]; // rv 1
  assign CH3_TXCTRL1_in[2] = (CH3_TXCTRL1[2] === 1'bz) || CH3_TXCTRL1[2]; // rv 1
  assign CH3_TXCTRL1_in[3] = (CH3_TXCTRL1[3] === 1'bz) || CH3_TXCTRL1[3]; // rv 1
  assign CH3_TXCTRL1_in[4] = (CH3_TXCTRL1[4] === 1'bz) || CH3_TXCTRL1[4]; // rv 1
  assign CH3_TXCTRL1_in[5] = (CH3_TXCTRL1[5] === 1'bz) || CH3_TXCTRL1[5]; // rv 1
  assign CH3_TXCTRL1_in[6] = (CH3_TXCTRL1[6] === 1'bz) || CH3_TXCTRL1[6]; // rv 1
  assign CH3_TXCTRL1_in[7] = (CH3_TXCTRL1[7] === 1'bz) || CH3_TXCTRL1[7]; // rv 1
  assign CH3_TXCTRL1_in[8] = (CH3_TXCTRL1[8] === 1'bz) || CH3_TXCTRL1[8]; // rv 1
  assign CH3_TXCTRL1_in[9] = (CH3_TXCTRL1[9] === 1'bz) || CH3_TXCTRL1[9]; // rv 1
  assign CH3_TXCTRL2_in[0] = (CH3_TXCTRL2[0] === 1'bz) || CH3_TXCTRL2[0]; // rv 1
  assign CH3_TXCTRL2_in[1] = (CH3_TXCTRL2[1] === 1'bz) || CH3_TXCTRL2[1]; // rv 1
  assign CH3_TXCTRL2_in[2] = (CH3_TXCTRL2[2] === 1'bz) || CH3_TXCTRL2[2]; // rv 1
  assign CH3_TXCTRL2_in[3] = (CH3_TXCTRL2[3] === 1'bz) || CH3_TXCTRL2[3]; // rv 1
  assign CH3_TXCTRL2_in[4] = (CH3_TXCTRL2[4] === 1'bz) || CH3_TXCTRL2[4]; // rv 1
  assign CH3_TXCTRL2_in[5] = (CH3_TXCTRL2[5] === 1'bz) || CH3_TXCTRL2[5]; // rv 1
  assign CH3_TXCTRL2_in[6] = (CH3_TXCTRL2[6] === 1'bz) || CH3_TXCTRL2[6]; // rv 1
  assign CH3_TXCTRL2_in[7] = (CH3_TXCTRL2[7] === 1'bz) || CH3_TXCTRL2[7]; // rv 1
  assign CH3_TXDAPICODEOVRDEN_in = (CH3_TXDAPICODEOVRDEN === 1'bz) || CH3_TXDAPICODEOVRDEN; // rv 1
  assign CH3_TXDAPICODERESET_in = (CH3_TXDAPICODERESET === 1'bz) || CH3_TXDAPICODERESET; // rv 1
  assign CH3_TXDATAEXTENDRSVD_in[0] = (CH3_TXDATAEXTENDRSVD[0] === 1'bz) || CH3_TXDATAEXTENDRSVD[0]; // rv 1
  assign CH3_TXDATAEXTENDRSVD_in[1] = (CH3_TXDATAEXTENDRSVD[1] === 1'bz) || CH3_TXDATAEXTENDRSVD[1]; // rv 1
  assign CH3_TXDATAEXTENDRSVD_in[2] = (CH3_TXDATAEXTENDRSVD[2] === 1'bz) || CH3_TXDATAEXTENDRSVD[2]; // rv 1
  assign CH3_TXDATAEXTENDRSVD_in[3] = (CH3_TXDATAEXTENDRSVD[3] === 1'bz) || CH3_TXDATAEXTENDRSVD[3]; // rv 1
  assign CH3_TXDATAEXTENDRSVD_in[4] = (CH3_TXDATAEXTENDRSVD[4] === 1'bz) || CH3_TXDATAEXTENDRSVD[4]; // rv 1
  assign CH3_TXDATAEXTENDRSVD_in[5] = (CH3_TXDATAEXTENDRSVD[5] === 1'bz) || CH3_TXDATAEXTENDRSVD[5]; // rv 1
  assign CH3_TXDATAEXTENDRSVD_in[6] = (CH3_TXDATAEXTENDRSVD[6] === 1'bz) || CH3_TXDATAEXTENDRSVD[6]; // rv 1
  assign CH3_TXDATAEXTENDRSVD_in[7] = (CH3_TXDATAEXTENDRSVD[7] === 1'bz) || CH3_TXDATAEXTENDRSVD[7]; // rv 1
  assign CH3_TXDCCDONE_M_in = CH3_TXDCCDONE_M;
  assign CH3_TXDEEMPH_in[0] = (CH3_TXDEEMPH[0] === 1'bz) || CH3_TXDEEMPH[0]; // rv 1
  assign CH3_TXDEEMPH_in[1] = (CH3_TXDEEMPH[1] === 1'bz) || CH3_TXDEEMPH[1]; // rv 1
  assign CH3_TXDETECTRX_in = (CH3_TXDETECTRX === 1'bz) || CH3_TXDETECTRX; // rv 1
  assign CH3_TXDIFFCTRL_in[0] = (CH3_TXDIFFCTRL[0] === 1'bz) || CH3_TXDIFFCTRL[0]; // rv 1
  assign CH3_TXDIFFCTRL_in[1] = (CH3_TXDIFFCTRL[1] === 1'bz) || CH3_TXDIFFCTRL[1]; // rv 1
  assign CH3_TXDIFFCTRL_in[2] = (CH3_TXDIFFCTRL[2] === 1'bz) || CH3_TXDIFFCTRL[2]; // rv 1
  assign CH3_TXDIFFCTRL_in[3] = (CH3_TXDIFFCTRL[3] === 1'bz) || CH3_TXDIFFCTRL[3]; // rv 1
  assign CH3_TXDIFFCTRL_in[4] = (CH3_TXDIFFCTRL[4] === 1'bz) || CH3_TXDIFFCTRL[4]; // rv 1
  assign CH3_TXDLYALIGNERR_M_in = CH3_TXDLYALIGNERR_M;
  assign CH3_TXDLYALIGNPROG_M_in = CH3_TXDLYALIGNPROG_M;
  assign CH3_TXDLYALIGNREQ_in = (CH3_TXDLYALIGNREQ === 1'bz) || CH3_TXDLYALIGNREQ; // rv 1
  assign CH3_TXELECIDLE_in = (CH3_TXELECIDLE === 1'bz) || CH3_TXELECIDLE; // rv 1
  assign CH3_TXHEADER_in[0] = (CH3_TXHEADER[0] === 1'bz) || CH3_TXHEADER[0]; // rv 1
  assign CH3_TXHEADER_in[1] = (CH3_TXHEADER[1] === 1'bz) || CH3_TXHEADER[1]; // rv 1
  assign CH3_TXHEADER_in[2] = (CH3_TXHEADER[2] === 1'bz) || CH3_TXHEADER[2]; // rv 1
  assign CH3_TXHEADER_in[3] = (CH3_TXHEADER[3] === 1'bz) || CH3_TXHEADER[3]; // rv 1
  assign CH3_TXHEADER_in[4] = (CH3_TXHEADER[4] === 1'bz) || CH3_TXHEADER[4]; // rv 1
  assign CH3_TXHEADER_in[5] = (CH3_TXHEADER[5] === 1'bz) || CH3_TXHEADER[5]; // rv 1
  assign CH3_TXINHIBIT_in = (CH3_TXINHIBIT === 1'bz) || CH3_TXINHIBIT; // rv 1
  assign CH3_TXLATCLK_in = (CH3_TXLATCLK === 1'bz) || CH3_TXLATCLK; // rv 1
  assign CH3_TXMAINCURSOR_in[0] = (CH3_TXMAINCURSOR[0] === 1'bz) || CH3_TXMAINCURSOR[0]; // rv 1
  assign CH3_TXMAINCURSOR_in[1] = (CH3_TXMAINCURSOR[1] === 1'bz) || CH3_TXMAINCURSOR[1]; // rv 1
  assign CH3_TXMAINCURSOR_in[2] = (CH3_TXMAINCURSOR[2] === 1'bz) || CH3_TXMAINCURSOR[2]; // rv 1
  assign CH3_TXMAINCURSOR_in[3] = (CH3_TXMAINCURSOR[3] === 1'bz) || CH3_TXMAINCURSOR[3]; // rv 1
  assign CH3_TXMAINCURSOR_in[4] = (CH3_TXMAINCURSOR[4] === 1'bz) || CH3_TXMAINCURSOR[4]; // rv 1
  assign CH3_TXMAINCURSOR_in[5] = (CH3_TXMAINCURSOR[5] === 1'bz) || CH3_TXMAINCURSOR[5]; // rv 1
  assign CH3_TXMAINCURSOR_in[6] = (CH3_TXMAINCURSOR[6] === 1'bz) || CH3_TXMAINCURSOR[6]; // rv 1
  assign CH3_TXMARGIN_in[0] = (CH3_TXMARGIN[0] === 1'bz) || CH3_TXMARGIN[0]; // rv 1
  assign CH3_TXMARGIN_in[1] = (CH3_TXMARGIN[1] === 1'bz) || CH3_TXMARGIN[1]; // rv 1
  assign CH3_TXMARGIN_in[2] = (CH3_TXMARGIN[2] === 1'bz) || CH3_TXMARGIN[2]; // rv 1
  assign CH3_TXMLDCHAINDONE_in = (CH3_TXMLDCHAINDONE === 1'bz) || CH3_TXMLDCHAINDONE; // rv 1
  assign CH3_TXMLDCHAINREQ_in = (CH3_TXMLDCHAINREQ === 1'bz) || CH3_TXMLDCHAINREQ; // rv 1
  assign CH3_TXONESZEROS_in = (CH3_TXONESZEROS === 1'bz) || CH3_TXONESZEROS; // rv 1
  assign CH3_TXPAUSEDELAYALIGN_in = (CH3_TXPAUSEDELAYALIGN === 1'bz) || CH3_TXPAUSEDELAYALIGN; // rv 1
  assign CH3_TXPCSRESETMASK_in = (CH3_TXPCSRESETMASK === 1'bz) || CH3_TXPCSRESETMASK; // rv 1
  assign CH3_TXPD_in[0] = (CH3_TXPD[0] === 1'bz) || CH3_TXPD[0]; // rv 1
  assign CH3_TXPD_in[1] = (CH3_TXPD[1] === 1'bz) || CH3_TXPD[1]; // rv 1
  assign CH3_TXPHALIGNDONE_M_in = CH3_TXPHALIGNDONE_M;
  assign CH3_TXPHALIGNERR_M_in = CH3_TXPHALIGNERR_M;
  assign CH3_TXPHALIGNOUTRSVD_M_in = CH3_TXPHALIGNOUTRSVD_M;
  assign CH3_TXPHALIGNREQ_in = (CH3_TXPHALIGNREQ === 1'bz) || CH3_TXPHALIGNREQ; // rv 1
  assign CH3_TXPHALIGNRESETMASK_in[0] = (CH3_TXPHALIGNRESETMASK[0] === 1'bz) || CH3_TXPHALIGNRESETMASK[0]; // rv 1
  assign CH3_TXPHALIGNRESETMASK_in[1] = (CH3_TXPHALIGNRESETMASK[1] === 1'bz) || CH3_TXPHALIGNRESETMASK[1]; // rv 1
  assign CH3_TXPHDLYPD_in = (CH3_TXPHDLYPD === 1'bz) || CH3_TXPHDLYPD; // rv 1
  assign CH3_TXPHDLYRESETDONE_M_in = CH3_TXPHDLYRESETDONE_M;
  assign CH3_TXPHDLYRESET_in = (CH3_TXPHDLYRESET === 1'bz) || CH3_TXPHDLYRESET; // rv 1
  assign CH3_TXPHDLYTSTCLK_in = (CH3_TXPHDLYTSTCLK === 1'bz) || CH3_TXPHDLYTSTCLK; // rv 1
  assign CH3_TXPHSETINITDONE_M_in = CH3_TXPHSETINITDONE_M;
  assign CH3_TXPHSETINITREQ_in = (CH3_TXPHSETINITREQ === 1'bz) || CH3_TXPHSETINITREQ; // rv 1
  assign CH3_TXPHSHIFT180DONE_M_in = CH3_TXPHSHIFT180DONE_M;
  assign CH3_TXPHSHIFT180_in = (CH3_TXPHSHIFT180 === 1'bz) || CH3_TXPHSHIFT180; // rv 1
  assign CH3_TXPICODEOVRDEN_in = (CH3_TXPICODEOVRDEN === 1'bz) || CH3_TXPICODEOVRDEN; // rv 1
  assign CH3_TXPICODERESET_in = (CH3_TXPICODERESET === 1'bz) || CH3_TXPICODERESET; // rv 1
  assign CH3_TXPIPPMEN_in = (CH3_TXPIPPMEN === 1'bz) || CH3_TXPIPPMEN; // rv 1
  assign CH3_TXPIPPMSTEPSIZE_in[0] = (CH3_TXPIPPMSTEPSIZE[0] === 1'bz) || CH3_TXPIPPMSTEPSIZE[0]; // rv 1
  assign CH3_TXPIPPMSTEPSIZE_in[1] = (CH3_TXPIPPMSTEPSIZE[1] === 1'bz) || CH3_TXPIPPMSTEPSIZE[1]; // rv 1
  assign CH3_TXPIPPMSTEPSIZE_in[2] = (CH3_TXPIPPMSTEPSIZE[2] === 1'bz) || CH3_TXPIPPMSTEPSIZE[2]; // rv 1
  assign CH3_TXPIPPMSTEPSIZE_in[3] = (CH3_TXPIPPMSTEPSIZE[3] === 1'bz) || CH3_TXPIPPMSTEPSIZE[3]; // rv 1
  assign CH3_TXPIPPMSTEPSIZE_in[4] = (CH3_TXPIPPMSTEPSIZE[4] === 1'bz) || CH3_TXPIPPMSTEPSIZE[4]; // rv 1
  assign CH3_TXPISOPD_in = (CH3_TXPISOPD === 1'bz) || CH3_TXPISOPD; // rv 1
  assign CH3_TXPMARESETDONE_M_in = CH3_TXPMARESETDONE_M;
  assign CH3_TXPMARESETMASK_in[0] = (CH3_TXPMARESETMASK[0] === 1'bz) || CH3_TXPMARESETMASK[0]; // rv 1
  assign CH3_TXPMARESETMASK_in[1] = (CH3_TXPMARESETMASK[1] === 1'bz) || CH3_TXPMARESETMASK[1]; // rv 1
  assign CH3_TXPMARESETMASK_in[2] = (CH3_TXPMARESETMASK[2] === 1'bz) || CH3_TXPMARESETMASK[2]; // rv 1
  assign CH3_TXPOLARITY_in = (CH3_TXPOLARITY === 1'bz) || CH3_TXPOLARITY; // rv 1
  assign CH3_TXPOSTCURSOR_in[0] = (CH3_TXPOSTCURSOR[0] === 1'bz) || CH3_TXPOSTCURSOR[0]; // rv 1
  assign CH3_TXPOSTCURSOR_in[1] = (CH3_TXPOSTCURSOR[1] === 1'bz) || CH3_TXPOSTCURSOR[1]; // rv 1
  assign CH3_TXPOSTCURSOR_in[2] = (CH3_TXPOSTCURSOR[2] === 1'bz) || CH3_TXPOSTCURSOR[2]; // rv 1
  assign CH3_TXPOSTCURSOR_in[3] = (CH3_TXPOSTCURSOR[3] === 1'bz) || CH3_TXPOSTCURSOR[3]; // rv 1
  assign CH3_TXPOSTCURSOR_in[4] = (CH3_TXPOSTCURSOR[4] === 1'bz) || CH3_TXPOSTCURSOR[4]; // rv 1
  assign CH3_TXPRBSFORCEERR_in = (CH3_TXPRBSFORCEERR === 1'bz) || CH3_TXPRBSFORCEERR; // rv 1
  assign CH3_TXPRBSSEL_in[0] = (CH3_TXPRBSSEL[0] === 1'bz) || CH3_TXPRBSSEL[0]; // rv 1
  assign CH3_TXPRBSSEL_in[1] = (CH3_TXPRBSSEL[1] === 1'bz) || CH3_TXPRBSSEL[1]; // rv 1
  assign CH3_TXPRBSSEL_in[2] = (CH3_TXPRBSSEL[2] === 1'bz) || CH3_TXPRBSSEL[2]; // rv 1
  assign CH3_TXPRBSSEL_in[3] = (CH3_TXPRBSSEL[3] === 1'bz) || CH3_TXPRBSSEL[3]; // rv 1
  assign CH3_TXPRECURSOR_in[0] = (CH3_TXPRECURSOR[0] === 1'bz) || CH3_TXPRECURSOR[0]; // rv 1
  assign CH3_TXPRECURSOR_in[1] = (CH3_TXPRECURSOR[1] === 1'bz) || CH3_TXPRECURSOR[1]; // rv 1
  assign CH3_TXPRECURSOR_in[2] = (CH3_TXPRECURSOR[2] === 1'bz) || CH3_TXPRECURSOR[2]; // rv 1
  assign CH3_TXPRECURSOR_in[3] = (CH3_TXPRECURSOR[3] === 1'bz) || CH3_TXPRECURSOR[3]; // rv 1
  assign CH3_TXPRECURSOR_in[4] = (CH3_TXPRECURSOR[4] === 1'bz) || CH3_TXPRECURSOR[4]; // rv 1
  assign CH3_TXPROGDIVRESETDONE_M_in = CH3_TXPROGDIVRESETDONE_M;
  assign CH3_TXPROGDIVRESET_in = (CH3_TXPROGDIVRESET === 1'bz) || CH3_TXPROGDIVRESET; // rv 1
  assign CH3_TXRATE_in[0] = (CH3_TXRATE[0] === 1'bz) || CH3_TXRATE[0]; // rv 1
  assign CH3_TXRATE_in[1] = (CH3_TXRATE[1] === 1'bz) || CH3_TXRATE[1]; // rv 1
  assign CH3_TXRATE_in[2] = (CH3_TXRATE[2] === 1'bz) || CH3_TXRATE[2]; // rv 1
  assign CH3_TXRATE_in[3] = (CH3_TXRATE[3] === 1'bz) || CH3_TXRATE[3]; // rv 1
  assign CH3_TXRATE_in[4] = (CH3_TXRATE[4] === 1'bz) || CH3_TXRATE[4]; // rv 1
  assign CH3_TXRATE_in[5] = (CH3_TXRATE[5] === 1'bz) || CH3_TXRATE[5]; // rv 1
  assign CH3_TXRATE_in[6] = (CH3_TXRATE[6] === 1'bz) || CH3_TXRATE[6]; // rv 1
  assign CH3_TXRATE_in[7] = (CH3_TXRATE[7] === 1'bz) || CH3_TXRATE[7]; // rv 1
  assign CH3_TXRESETDONE_M_in = CH3_TXRESETDONE_M;
  assign CH3_TXRESETMODE_in[0] = (CH3_TXRESETMODE[0] === 1'bz) || CH3_TXRESETMODE[0]; // rv 1
  assign CH3_TXRESETMODE_in[1] = (CH3_TXRESETMODE[1] === 1'bz) || CH3_TXRESETMODE[1]; // rv 1
  assign CH3_TXSEQUENCE_in[0] = (CH3_TXSEQUENCE[0] === 1'bz) || CH3_TXSEQUENCE[0]; // rv 1
  assign CH3_TXSEQUENCE_in[1] = (CH3_TXSEQUENCE[1] === 1'bz) || CH3_TXSEQUENCE[1]; // rv 1
  assign CH3_TXSEQUENCE_in[2] = (CH3_TXSEQUENCE[2] === 1'bz) || CH3_TXSEQUENCE[2]; // rv 1
  assign CH3_TXSEQUENCE_in[3] = (CH3_TXSEQUENCE[3] === 1'bz) || CH3_TXSEQUENCE[3]; // rv 1
  assign CH3_TXSEQUENCE_in[4] = (CH3_TXSEQUENCE[4] === 1'bz) || CH3_TXSEQUENCE[4]; // rv 1
  assign CH3_TXSEQUENCE_in[5] = (CH3_TXSEQUENCE[5] === 1'bz) || CH3_TXSEQUENCE[5]; // rv 1
  assign CH3_TXSEQUENCE_in[6] = (CH3_TXSEQUENCE[6] === 1'bz) || CH3_TXSEQUENCE[6]; // rv 1
  assign CH3_TXSWING_in = (CH3_TXSWING === 1'bz) || CH3_TXSWING; // rv 1
  assign CH3_TXSYNCALLIN_in = (CH3_TXSYNCALLIN === 1'bz) || CH3_TXSYNCALLIN; // rv 1
  assign CH3_TXSYNCDONE_M_in = CH3_TXSYNCDONE_M;
  assign CH3_TXUSERRDY_in = (CH3_TXUSERRDY === 1'bz) || CH3_TXUSERRDY; // rv 1
  assign CH3_TXUSRCLK_in = (CH3_TXUSRCLK === 1'bz) || CH3_TXUSRCLK; // rv 1
  assign CORRECTERR_M_in = CORRECTERR_M;
  assign CTRLRSVDIN1_in[0] = (CTRLRSVDIN1[0] === 1'bz) || CTRLRSVDIN1[0]; // rv 1
  assign CTRLRSVDIN1_in[10] = (CTRLRSVDIN1[10] === 1'bz) || CTRLRSVDIN1[10]; // rv 1
  assign CTRLRSVDIN1_in[11] = (CTRLRSVDIN1[11] === 1'bz) || CTRLRSVDIN1[11]; // rv 1
  assign CTRLRSVDIN1_in[12] = (CTRLRSVDIN1[12] === 1'bz) || CTRLRSVDIN1[12]; // rv 1
  assign CTRLRSVDIN1_in[13] = (CTRLRSVDIN1[13] === 1'bz) || CTRLRSVDIN1[13]; // rv 1
  assign CTRLRSVDIN1_in[1] = (CTRLRSVDIN1[1] === 1'bz) || CTRLRSVDIN1[1]; // rv 1
  assign CTRLRSVDIN1_in[2] = (CTRLRSVDIN1[2] === 1'bz) || CTRLRSVDIN1[2]; // rv 1
  assign CTRLRSVDIN1_in[3] = (CTRLRSVDIN1[3] === 1'bz) || CTRLRSVDIN1[3]; // rv 1
  assign CTRLRSVDIN1_in[4] = (CTRLRSVDIN1[4] === 1'bz) || CTRLRSVDIN1[4]; // rv 1
  assign CTRLRSVDIN1_in[5] = (CTRLRSVDIN1[5] === 1'bz) || CTRLRSVDIN1[5]; // rv 1
  assign CTRLRSVDIN1_in[6] = (CTRLRSVDIN1[6] === 1'bz) || CTRLRSVDIN1[6]; // rv 1
  assign CTRLRSVDIN1_in[7] = (CTRLRSVDIN1[7] === 1'bz) || CTRLRSVDIN1[7]; // rv 1
  assign CTRLRSVDIN1_in[8] = (CTRLRSVDIN1[8] === 1'bz) || CTRLRSVDIN1[8]; // rv 1
  assign CTRLRSVDIN1_in[9] = (CTRLRSVDIN1[9] === 1'bz) || CTRLRSVDIN1[9]; // rv 1
  assign CTRLRSVDOUT_M_in = CTRLRSVDOUT_M;
  assign DEBUGTRACECLK_in = (DEBUGTRACECLK === 1'bz) || DEBUGTRACECLK; // rv 1
  assign DEBUGTRACEREADY_in = (DEBUGTRACEREADY === 1'bz) || DEBUGTRACEREADY; // rv 1
  assign DEBUGTRACETDATA_M_in = DEBUGTRACETDATA_M;
  assign DEBUGTRACETVALID_M_in = DEBUGTRACETVALID_M;
  assign GPI_in[0] = (GPI[0] === 1'bz) || GPI[0]; // rv 1
  assign GPI_in[10] = (GPI[10] === 1'bz) || GPI[10]; // rv 1
  assign GPI_in[11] = (GPI[11] === 1'bz) || GPI[11]; // rv 1
  assign GPI_in[12] = (GPI[12] === 1'bz) || GPI[12]; // rv 1
  assign GPI_in[13] = (GPI[13] === 1'bz) || GPI[13]; // rv 1
  assign GPI_in[14] = (GPI[14] === 1'bz) || GPI[14]; // rv 1
  assign GPI_in[15] = (GPI[15] === 1'bz) || GPI[15]; // rv 1
  assign GPI_in[1] = (GPI[1] === 1'bz) || GPI[1]; // rv 1
  assign GPI_in[2] = (GPI[2] === 1'bz) || GPI[2]; // rv 1
  assign GPI_in[3] = (GPI[3] === 1'bz) || GPI[3]; // rv 1
  assign GPI_in[4] = (GPI[4] === 1'bz) || GPI[4]; // rv 1
  assign GPI_in[5] = (GPI[5] === 1'bz) || GPI[5]; // rv 1
  assign GPI_in[6] = (GPI[6] === 1'bz) || GPI[6]; // rv 1
  assign GPI_in[7] = (GPI[7] === 1'bz) || GPI[7]; // rv 1
  assign GPI_in[8] = (GPI[8] === 1'bz) || GPI[8]; // rv 1
  assign GPI_in[9] = (GPI[9] === 1'bz) || GPI[9]; // rv 1
  assign GPO_M_in = GPO_M;
  assign GTPOWERGOOD_M_in = GTPOWERGOOD_M;
  assign HSCLK0_LCPLLCLKRSVD0_in = (HSCLK0_LCPLLCLKRSVD0 === 1'bz) || HSCLK0_LCPLLCLKRSVD0; // rv 1
  assign HSCLK0_LCPLLCLKRSVD1_in = (HSCLK0_LCPLLCLKRSVD1 === 1'bz) || HSCLK0_LCPLLCLKRSVD1; // rv 1
  assign HSCLK0_LCPLLFBCLKLOST_M_in = HSCLK0_LCPLLFBCLKLOST_M;
  assign HSCLK0_LCPLLFBDIV_in[0] = (HSCLK0_LCPLLFBDIV[0] === 1'bz) || HSCLK0_LCPLLFBDIV[0]; // rv 1
  assign HSCLK0_LCPLLFBDIV_in[1] = (HSCLK0_LCPLLFBDIV[1] === 1'bz) || HSCLK0_LCPLLFBDIV[1]; // rv 1
  assign HSCLK0_LCPLLFBDIV_in[2] = (HSCLK0_LCPLLFBDIV[2] === 1'bz) || HSCLK0_LCPLLFBDIV[2]; // rv 1
  assign HSCLK0_LCPLLFBDIV_in[3] = (HSCLK0_LCPLLFBDIV[3] === 1'bz) || HSCLK0_LCPLLFBDIV[3]; // rv 1
  assign HSCLK0_LCPLLFBDIV_in[4] = (HSCLK0_LCPLLFBDIV[4] === 1'bz) || HSCLK0_LCPLLFBDIV[4]; // rv 1
  assign HSCLK0_LCPLLFBDIV_in[5] = (HSCLK0_LCPLLFBDIV[5] === 1'bz) || HSCLK0_LCPLLFBDIV[5]; // rv 1
  assign HSCLK0_LCPLLFBDIV_in[6] = (HSCLK0_LCPLLFBDIV[6] === 1'bz) || HSCLK0_LCPLLFBDIV[6]; // rv 1
  assign HSCLK0_LCPLLFBDIV_in[7] = (HSCLK0_LCPLLFBDIV[7] === 1'bz) || HSCLK0_LCPLLFBDIV[7]; // rv 1
  assign HSCLK0_LCPLLGTGREFCLK_in = HSCLK0_LCPLLGTGREFCLK;
  assign HSCLK0_LCPLLLOCK_M_in = HSCLK0_LCPLLLOCK_M;
  assign HSCLK0_LCPLLPD_in = (HSCLK0_LCPLLPD === 1'bz) || HSCLK0_LCPLLPD; // rv 1
  assign HSCLK0_LCPLLREFCLKLOST_M_in = HSCLK0_LCPLLREFCLKLOST_M;
  assign HSCLK0_LCPLLREFCLKMONITOR_M_in = HSCLK0_LCPLLREFCLKMONITOR_M;
  assign HSCLK0_LCPLLREFCLKSEL_in[0] = (HSCLK0_LCPLLREFCLKSEL[0] === 1'bz) || HSCLK0_LCPLLREFCLKSEL[0]; // rv 1
  assign HSCLK0_LCPLLREFCLKSEL_in[1] = (HSCLK0_LCPLLREFCLKSEL[1] === 1'bz) || HSCLK0_LCPLLREFCLKSEL[1]; // rv 1
  assign HSCLK0_LCPLLREFCLKSEL_in[2] = (HSCLK0_LCPLLREFCLKSEL[2] === 1'bz) || HSCLK0_LCPLLREFCLKSEL[2]; // rv 1
  assign HSCLK0_LCPLLRESETBYPASSMODE_in = (HSCLK0_LCPLLRESETBYPASSMODE === 1'bz) || HSCLK0_LCPLLRESETBYPASSMODE; // rv 1
  assign HSCLK0_LCPLLRESETMASK_in[0] = (HSCLK0_LCPLLRESETMASK[0] === 1'bz) || HSCLK0_LCPLLRESETMASK[0]; // rv 1
  assign HSCLK0_LCPLLRESETMASK_in[1] = (HSCLK0_LCPLLRESETMASK[1] === 1'bz) || HSCLK0_LCPLLRESETMASK[1]; // rv 1
  assign HSCLK0_LCPLLRESET_in = (HSCLK0_LCPLLRESET === 1'bz) || HSCLK0_LCPLLRESET; // rv 1
  assign HSCLK0_LCPLLRSVD0_in[0] = (HSCLK0_LCPLLRSVD0[0] === 1'bz) || HSCLK0_LCPLLRSVD0[0]; // rv 1
  assign HSCLK0_LCPLLRSVD0_in[1] = (HSCLK0_LCPLLRSVD0[1] === 1'bz) || HSCLK0_LCPLLRSVD0[1]; // rv 1
  assign HSCLK0_LCPLLRSVD0_in[2] = (HSCLK0_LCPLLRSVD0[2] === 1'bz) || HSCLK0_LCPLLRSVD0[2]; // rv 1
  assign HSCLK0_LCPLLRSVD0_in[3] = (HSCLK0_LCPLLRSVD0[3] === 1'bz) || HSCLK0_LCPLLRSVD0[3]; // rv 1
  assign HSCLK0_LCPLLRSVD0_in[4] = (HSCLK0_LCPLLRSVD0[4] === 1'bz) || HSCLK0_LCPLLRSVD0[4]; // rv 1
  assign HSCLK0_LCPLLRSVD0_in[5] = (HSCLK0_LCPLLRSVD0[5] === 1'bz) || HSCLK0_LCPLLRSVD0[5]; // rv 1
  assign HSCLK0_LCPLLRSVD0_in[6] = (HSCLK0_LCPLLRSVD0[6] === 1'bz) || HSCLK0_LCPLLRSVD0[6]; // rv 1
  assign HSCLK0_LCPLLRSVD0_in[7] = (HSCLK0_LCPLLRSVD0[7] === 1'bz) || HSCLK0_LCPLLRSVD0[7]; // rv 1
  assign HSCLK0_LCPLLRSVD1_in[0] = (HSCLK0_LCPLLRSVD1[0] === 1'bz) || HSCLK0_LCPLLRSVD1[0]; // rv 1
  assign HSCLK0_LCPLLRSVD1_in[1] = (HSCLK0_LCPLLRSVD1[1] === 1'bz) || HSCLK0_LCPLLRSVD1[1]; // rv 1
  assign HSCLK0_LCPLLRSVD1_in[2] = (HSCLK0_LCPLLRSVD1[2] === 1'bz) || HSCLK0_LCPLLRSVD1[2]; // rv 1
  assign HSCLK0_LCPLLRSVD1_in[3] = (HSCLK0_LCPLLRSVD1[3] === 1'bz) || HSCLK0_LCPLLRSVD1[3]; // rv 1
  assign HSCLK0_LCPLLRSVD1_in[4] = (HSCLK0_LCPLLRSVD1[4] === 1'bz) || HSCLK0_LCPLLRSVD1[4]; // rv 1
  assign HSCLK0_LCPLLRSVD1_in[5] = (HSCLK0_LCPLLRSVD1[5] === 1'bz) || HSCLK0_LCPLLRSVD1[5]; // rv 1
  assign HSCLK0_LCPLLRSVD1_in[6] = (HSCLK0_LCPLLRSVD1[6] === 1'bz) || HSCLK0_LCPLLRSVD1[6]; // rv 1
  assign HSCLK0_LCPLLRSVD1_in[7] = (HSCLK0_LCPLLRSVD1[7] === 1'bz) || HSCLK0_LCPLLRSVD1[7]; // rv 1
  assign HSCLK0_LCPLLRSVDOUT_M_in = HSCLK0_LCPLLRSVDOUT_M;
  assign HSCLK0_LCPLLSDMDATA_in[0] = (HSCLK0_LCPLLSDMDATA[0] === 1'bz) || HSCLK0_LCPLLSDMDATA[0]; // rv 1
  assign HSCLK0_LCPLLSDMDATA_in[10] = (HSCLK0_LCPLLSDMDATA[10] === 1'bz) || HSCLK0_LCPLLSDMDATA[10]; // rv 1
  assign HSCLK0_LCPLLSDMDATA_in[11] = (HSCLK0_LCPLLSDMDATA[11] === 1'bz) || HSCLK0_LCPLLSDMDATA[11]; // rv 1
  assign HSCLK0_LCPLLSDMDATA_in[12] = (HSCLK0_LCPLLSDMDATA[12] === 1'bz) || HSCLK0_LCPLLSDMDATA[12]; // rv 1
  assign HSCLK0_LCPLLSDMDATA_in[13] = (HSCLK0_LCPLLSDMDATA[13] === 1'bz) || HSCLK0_LCPLLSDMDATA[13]; // rv 1
  assign HSCLK0_LCPLLSDMDATA_in[14] = (HSCLK0_LCPLLSDMDATA[14] === 1'bz) || HSCLK0_LCPLLSDMDATA[14]; // rv 1
  assign HSCLK0_LCPLLSDMDATA_in[15] = (HSCLK0_LCPLLSDMDATA[15] === 1'bz) || HSCLK0_LCPLLSDMDATA[15]; // rv 1
  assign HSCLK0_LCPLLSDMDATA_in[16] = (HSCLK0_LCPLLSDMDATA[16] === 1'bz) || HSCLK0_LCPLLSDMDATA[16]; // rv 1
  assign HSCLK0_LCPLLSDMDATA_in[17] = (HSCLK0_LCPLLSDMDATA[17] === 1'bz) || HSCLK0_LCPLLSDMDATA[17]; // rv 1
  assign HSCLK0_LCPLLSDMDATA_in[18] = (HSCLK0_LCPLLSDMDATA[18] === 1'bz) || HSCLK0_LCPLLSDMDATA[18]; // rv 1
  assign HSCLK0_LCPLLSDMDATA_in[19] = (HSCLK0_LCPLLSDMDATA[19] === 1'bz) || HSCLK0_LCPLLSDMDATA[19]; // rv 1
  assign HSCLK0_LCPLLSDMDATA_in[1] = (HSCLK0_LCPLLSDMDATA[1] === 1'bz) || HSCLK0_LCPLLSDMDATA[1]; // rv 1
  assign HSCLK0_LCPLLSDMDATA_in[20] = (HSCLK0_LCPLLSDMDATA[20] === 1'bz) || HSCLK0_LCPLLSDMDATA[20]; // rv 1
  assign HSCLK0_LCPLLSDMDATA_in[21] = (HSCLK0_LCPLLSDMDATA[21] === 1'bz) || HSCLK0_LCPLLSDMDATA[21]; // rv 1
  assign HSCLK0_LCPLLSDMDATA_in[22] = (HSCLK0_LCPLLSDMDATA[22] === 1'bz) || HSCLK0_LCPLLSDMDATA[22]; // rv 1
  assign HSCLK0_LCPLLSDMDATA_in[23] = (HSCLK0_LCPLLSDMDATA[23] === 1'bz) || HSCLK0_LCPLLSDMDATA[23]; // rv 1
  assign HSCLK0_LCPLLSDMDATA_in[24] = (HSCLK0_LCPLLSDMDATA[24] === 1'bz) || HSCLK0_LCPLLSDMDATA[24]; // rv 1
  assign HSCLK0_LCPLLSDMDATA_in[25] = (HSCLK0_LCPLLSDMDATA[25] === 1'bz) || HSCLK0_LCPLLSDMDATA[25]; // rv 1
  assign HSCLK0_LCPLLSDMDATA_in[2] = (HSCLK0_LCPLLSDMDATA[2] === 1'bz) || HSCLK0_LCPLLSDMDATA[2]; // rv 1
  assign HSCLK0_LCPLLSDMDATA_in[3] = (HSCLK0_LCPLLSDMDATA[3] === 1'bz) || HSCLK0_LCPLLSDMDATA[3]; // rv 1
  assign HSCLK0_LCPLLSDMDATA_in[4] = (HSCLK0_LCPLLSDMDATA[4] === 1'bz) || HSCLK0_LCPLLSDMDATA[4]; // rv 1
  assign HSCLK0_LCPLLSDMDATA_in[5] = (HSCLK0_LCPLLSDMDATA[5] === 1'bz) || HSCLK0_LCPLLSDMDATA[5]; // rv 1
  assign HSCLK0_LCPLLSDMDATA_in[6] = (HSCLK0_LCPLLSDMDATA[6] === 1'bz) || HSCLK0_LCPLLSDMDATA[6]; // rv 1
  assign HSCLK0_LCPLLSDMDATA_in[7] = (HSCLK0_LCPLLSDMDATA[7] === 1'bz) || HSCLK0_LCPLLSDMDATA[7]; // rv 1
  assign HSCLK0_LCPLLSDMDATA_in[8] = (HSCLK0_LCPLLSDMDATA[8] === 1'bz) || HSCLK0_LCPLLSDMDATA[8]; // rv 1
  assign HSCLK0_LCPLLSDMDATA_in[9] = (HSCLK0_LCPLLSDMDATA[9] === 1'bz) || HSCLK0_LCPLLSDMDATA[9]; // rv 1
  assign HSCLK0_LCPLLSDMTOGGLE_in = (HSCLK0_LCPLLSDMTOGGLE === 1'bz) || HSCLK0_LCPLLSDMTOGGLE; // rv 1
  assign HSCLK0_RPLLCLKRSVD0_in = (HSCLK0_RPLLCLKRSVD0 === 1'bz) || HSCLK0_RPLLCLKRSVD0; // rv 1
  assign HSCLK0_RPLLCLKRSVD1_in = (HSCLK0_RPLLCLKRSVD1 === 1'bz) || HSCLK0_RPLLCLKRSVD1; // rv 1
  assign HSCLK0_RPLLFBCLKLOST_M_in = HSCLK0_RPLLFBCLKLOST_M;
  assign HSCLK0_RPLLFBDIV_in[0] = (HSCLK0_RPLLFBDIV[0] === 1'bz) || HSCLK0_RPLLFBDIV[0]; // rv 1
  assign HSCLK0_RPLLFBDIV_in[1] = (HSCLK0_RPLLFBDIV[1] === 1'bz) || HSCLK0_RPLLFBDIV[1]; // rv 1
  assign HSCLK0_RPLLFBDIV_in[2] = (HSCLK0_RPLLFBDIV[2] === 1'bz) || HSCLK0_RPLLFBDIV[2]; // rv 1
  assign HSCLK0_RPLLFBDIV_in[3] = (HSCLK0_RPLLFBDIV[3] === 1'bz) || HSCLK0_RPLLFBDIV[3]; // rv 1
  assign HSCLK0_RPLLFBDIV_in[4] = (HSCLK0_RPLLFBDIV[4] === 1'bz) || HSCLK0_RPLLFBDIV[4]; // rv 1
  assign HSCLK0_RPLLFBDIV_in[5] = (HSCLK0_RPLLFBDIV[5] === 1'bz) || HSCLK0_RPLLFBDIV[5]; // rv 1
  assign HSCLK0_RPLLFBDIV_in[6] = (HSCLK0_RPLLFBDIV[6] === 1'bz) || HSCLK0_RPLLFBDIV[6]; // rv 1
  assign HSCLK0_RPLLFBDIV_in[7] = (HSCLK0_RPLLFBDIV[7] === 1'bz) || HSCLK0_RPLLFBDIV[7]; // rv 1
  assign HSCLK0_RPLLGTGREFCLK_in = HSCLK0_RPLLGTGREFCLK;
  assign HSCLK0_RPLLLOCK_M_in = HSCLK0_RPLLLOCK_M;
  assign HSCLK0_RPLLPD_in = (HSCLK0_RPLLPD === 1'bz) || HSCLK0_RPLLPD; // rv 1
  assign HSCLK0_RPLLREFCLKLOST_M_in = HSCLK0_RPLLREFCLKLOST_M;
  assign HSCLK0_RPLLREFCLKMONITOR_M_in = HSCLK0_RPLLREFCLKMONITOR_M;
  assign HSCLK0_RPLLREFCLKSEL_in[0] = (HSCLK0_RPLLREFCLKSEL[0] === 1'bz) || HSCLK0_RPLLREFCLKSEL[0]; // rv 1
  assign HSCLK0_RPLLREFCLKSEL_in[1] = (HSCLK0_RPLLREFCLKSEL[1] === 1'bz) || HSCLK0_RPLLREFCLKSEL[1]; // rv 1
  assign HSCLK0_RPLLREFCLKSEL_in[2] = (HSCLK0_RPLLREFCLKSEL[2] === 1'bz) || HSCLK0_RPLLREFCLKSEL[2]; // rv 1
  assign HSCLK0_RPLLRESETBYPASSMODE_in = (HSCLK0_RPLLRESETBYPASSMODE === 1'bz) || HSCLK0_RPLLRESETBYPASSMODE; // rv 1
  assign HSCLK0_RPLLRESETMASK_in[0] = (HSCLK0_RPLLRESETMASK[0] === 1'bz) || HSCLK0_RPLLRESETMASK[0]; // rv 1
  assign HSCLK0_RPLLRESETMASK_in[1] = (HSCLK0_RPLLRESETMASK[1] === 1'bz) || HSCLK0_RPLLRESETMASK[1]; // rv 1
  assign HSCLK0_RPLLRESET_in = (HSCLK0_RPLLRESET === 1'bz) || HSCLK0_RPLLRESET; // rv 1
  assign HSCLK0_RPLLRSVD0_in[0] = (HSCLK0_RPLLRSVD0[0] === 1'bz) || HSCLK0_RPLLRSVD0[0]; // rv 1
  assign HSCLK0_RPLLRSVD0_in[1] = (HSCLK0_RPLLRSVD0[1] === 1'bz) || HSCLK0_RPLLRSVD0[1]; // rv 1
  assign HSCLK0_RPLLRSVD0_in[2] = (HSCLK0_RPLLRSVD0[2] === 1'bz) || HSCLK0_RPLLRSVD0[2]; // rv 1
  assign HSCLK0_RPLLRSVD0_in[3] = (HSCLK0_RPLLRSVD0[3] === 1'bz) || HSCLK0_RPLLRSVD0[3]; // rv 1
  assign HSCLK0_RPLLRSVD0_in[4] = (HSCLK0_RPLLRSVD0[4] === 1'bz) || HSCLK0_RPLLRSVD0[4]; // rv 1
  assign HSCLK0_RPLLRSVD0_in[5] = (HSCLK0_RPLLRSVD0[5] === 1'bz) || HSCLK0_RPLLRSVD0[5]; // rv 1
  assign HSCLK0_RPLLRSVD0_in[6] = (HSCLK0_RPLLRSVD0[6] === 1'bz) || HSCLK0_RPLLRSVD0[6]; // rv 1
  assign HSCLK0_RPLLRSVD0_in[7] = (HSCLK0_RPLLRSVD0[7] === 1'bz) || HSCLK0_RPLLRSVD0[7]; // rv 1
  assign HSCLK0_RPLLRSVD1_in[0] = (HSCLK0_RPLLRSVD1[0] === 1'bz) || HSCLK0_RPLLRSVD1[0]; // rv 1
  assign HSCLK0_RPLLRSVD1_in[1] = (HSCLK0_RPLLRSVD1[1] === 1'bz) || HSCLK0_RPLLRSVD1[1]; // rv 1
  assign HSCLK0_RPLLRSVD1_in[2] = (HSCLK0_RPLLRSVD1[2] === 1'bz) || HSCLK0_RPLLRSVD1[2]; // rv 1
  assign HSCLK0_RPLLRSVD1_in[3] = (HSCLK0_RPLLRSVD1[3] === 1'bz) || HSCLK0_RPLLRSVD1[3]; // rv 1
  assign HSCLK0_RPLLRSVD1_in[4] = (HSCLK0_RPLLRSVD1[4] === 1'bz) || HSCLK0_RPLLRSVD1[4]; // rv 1
  assign HSCLK0_RPLLRSVD1_in[5] = (HSCLK0_RPLLRSVD1[5] === 1'bz) || HSCLK0_RPLLRSVD1[5]; // rv 1
  assign HSCLK0_RPLLRSVD1_in[6] = (HSCLK0_RPLLRSVD1[6] === 1'bz) || HSCLK0_RPLLRSVD1[6]; // rv 1
  assign HSCLK0_RPLLRSVD1_in[7] = (HSCLK0_RPLLRSVD1[7] === 1'bz) || HSCLK0_RPLLRSVD1[7]; // rv 1
  assign HSCLK0_RPLLRSVDOUT_M_in = HSCLK0_RPLLRSVDOUT_M;
  assign HSCLK0_RPLLSDMDATA_in[0] = (HSCLK0_RPLLSDMDATA[0] === 1'bz) || HSCLK0_RPLLSDMDATA[0]; // rv 1
  assign HSCLK0_RPLLSDMDATA_in[10] = (HSCLK0_RPLLSDMDATA[10] === 1'bz) || HSCLK0_RPLLSDMDATA[10]; // rv 1
  assign HSCLK0_RPLLSDMDATA_in[11] = (HSCLK0_RPLLSDMDATA[11] === 1'bz) || HSCLK0_RPLLSDMDATA[11]; // rv 1
  assign HSCLK0_RPLLSDMDATA_in[12] = (HSCLK0_RPLLSDMDATA[12] === 1'bz) || HSCLK0_RPLLSDMDATA[12]; // rv 1
  assign HSCLK0_RPLLSDMDATA_in[13] = (HSCLK0_RPLLSDMDATA[13] === 1'bz) || HSCLK0_RPLLSDMDATA[13]; // rv 1
  assign HSCLK0_RPLLSDMDATA_in[14] = (HSCLK0_RPLLSDMDATA[14] === 1'bz) || HSCLK0_RPLLSDMDATA[14]; // rv 1
  assign HSCLK0_RPLLSDMDATA_in[15] = (HSCLK0_RPLLSDMDATA[15] === 1'bz) || HSCLK0_RPLLSDMDATA[15]; // rv 1
  assign HSCLK0_RPLLSDMDATA_in[16] = (HSCLK0_RPLLSDMDATA[16] === 1'bz) || HSCLK0_RPLLSDMDATA[16]; // rv 1
  assign HSCLK0_RPLLSDMDATA_in[17] = (HSCLK0_RPLLSDMDATA[17] === 1'bz) || HSCLK0_RPLLSDMDATA[17]; // rv 1
  assign HSCLK0_RPLLSDMDATA_in[18] = (HSCLK0_RPLLSDMDATA[18] === 1'bz) || HSCLK0_RPLLSDMDATA[18]; // rv 1
  assign HSCLK0_RPLLSDMDATA_in[19] = (HSCLK0_RPLLSDMDATA[19] === 1'bz) || HSCLK0_RPLLSDMDATA[19]; // rv 1
  assign HSCLK0_RPLLSDMDATA_in[1] = (HSCLK0_RPLLSDMDATA[1] === 1'bz) || HSCLK0_RPLLSDMDATA[1]; // rv 1
  assign HSCLK0_RPLLSDMDATA_in[20] = (HSCLK0_RPLLSDMDATA[20] === 1'bz) || HSCLK0_RPLLSDMDATA[20]; // rv 1
  assign HSCLK0_RPLLSDMDATA_in[21] = (HSCLK0_RPLLSDMDATA[21] === 1'bz) || HSCLK0_RPLLSDMDATA[21]; // rv 1
  assign HSCLK0_RPLLSDMDATA_in[22] = (HSCLK0_RPLLSDMDATA[22] === 1'bz) || HSCLK0_RPLLSDMDATA[22]; // rv 1
  assign HSCLK0_RPLLSDMDATA_in[23] = (HSCLK0_RPLLSDMDATA[23] === 1'bz) || HSCLK0_RPLLSDMDATA[23]; // rv 1
  assign HSCLK0_RPLLSDMDATA_in[24] = (HSCLK0_RPLLSDMDATA[24] === 1'bz) || HSCLK0_RPLLSDMDATA[24]; // rv 1
  assign HSCLK0_RPLLSDMDATA_in[25] = (HSCLK0_RPLLSDMDATA[25] === 1'bz) || HSCLK0_RPLLSDMDATA[25]; // rv 1
  assign HSCLK0_RPLLSDMDATA_in[2] = (HSCLK0_RPLLSDMDATA[2] === 1'bz) || HSCLK0_RPLLSDMDATA[2]; // rv 1
  assign HSCLK0_RPLLSDMDATA_in[3] = (HSCLK0_RPLLSDMDATA[3] === 1'bz) || HSCLK0_RPLLSDMDATA[3]; // rv 1
  assign HSCLK0_RPLLSDMDATA_in[4] = (HSCLK0_RPLLSDMDATA[4] === 1'bz) || HSCLK0_RPLLSDMDATA[4]; // rv 1
  assign HSCLK0_RPLLSDMDATA_in[5] = (HSCLK0_RPLLSDMDATA[5] === 1'bz) || HSCLK0_RPLLSDMDATA[5]; // rv 1
  assign HSCLK0_RPLLSDMDATA_in[6] = (HSCLK0_RPLLSDMDATA[6] === 1'bz) || HSCLK0_RPLLSDMDATA[6]; // rv 1
  assign HSCLK0_RPLLSDMDATA_in[7] = (HSCLK0_RPLLSDMDATA[7] === 1'bz) || HSCLK0_RPLLSDMDATA[7]; // rv 1
  assign HSCLK0_RPLLSDMDATA_in[8] = (HSCLK0_RPLLSDMDATA[8] === 1'bz) || HSCLK0_RPLLSDMDATA[8]; // rv 1
  assign HSCLK0_RPLLSDMDATA_in[9] = (HSCLK0_RPLLSDMDATA[9] === 1'bz) || HSCLK0_RPLLSDMDATA[9]; // rv 1
  assign HSCLK0_RPLLSDMTOGGLE_in = (HSCLK0_RPLLSDMTOGGLE === 1'bz) || HSCLK0_RPLLSDMTOGGLE; // rv 1
  assign HSCLK1_LCPLLCLKRSVD0_in = (HSCLK1_LCPLLCLKRSVD0 === 1'bz) || HSCLK1_LCPLLCLKRSVD0; // rv 1
  assign HSCLK1_LCPLLCLKRSVD1_in = (HSCLK1_LCPLLCLKRSVD1 === 1'bz) || HSCLK1_LCPLLCLKRSVD1; // rv 1
  assign HSCLK1_LCPLLFBCLKLOST_M_in = HSCLK1_LCPLLFBCLKLOST_M;
  assign HSCLK1_LCPLLFBDIV_in[0] = (HSCLK1_LCPLLFBDIV[0] === 1'bz) || HSCLK1_LCPLLFBDIV[0]; // rv 1
  assign HSCLK1_LCPLLFBDIV_in[1] = (HSCLK1_LCPLLFBDIV[1] === 1'bz) || HSCLK1_LCPLLFBDIV[1]; // rv 1
  assign HSCLK1_LCPLLFBDIV_in[2] = (HSCLK1_LCPLLFBDIV[2] === 1'bz) || HSCLK1_LCPLLFBDIV[2]; // rv 1
  assign HSCLK1_LCPLLFBDIV_in[3] = (HSCLK1_LCPLLFBDIV[3] === 1'bz) || HSCLK1_LCPLLFBDIV[3]; // rv 1
  assign HSCLK1_LCPLLFBDIV_in[4] = (HSCLK1_LCPLLFBDIV[4] === 1'bz) || HSCLK1_LCPLLFBDIV[4]; // rv 1
  assign HSCLK1_LCPLLFBDIV_in[5] = (HSCLK1_LCPLLFBDIV[5] === 1'bz) || HSCLK1_LCPLLFBDIV[5]; // rv 1
  assign HSCLK1_LCPLLFBDIV_in[6] = (HSCLK1_LCPLLFBDIV[6] === 1'bz) || HSCLK1_LCPLLFBDIV[6]; // rv 1
  assign HSCLK1_LCPLLFBDIV_in[7] = (HSCLK1_LCPLLFBDIV[7] === 1'bz) || HSCLK1_LCPLLFBDIV[7]; // rv 1
  assign HSCLK1_LCPLLGTGREFCLK_in = HSCLK1_LCPLLGTGREFCLK;
  assign HSCLK1_LCPLLLOCK_M_in = HSCLK1_LCPLLLOCK_M;
  assign HSCLK1_LCPLLPD_in = (HSCLK1_LCPLLPD === 1'bz) || HSCLK1_LCPLLPD; // rv 1
  assign HSCLK1_LCPLLREFCLKLOST_M_in = HSCLK1_LCPLLREFCLKLOST_M;
  assign HSCLK1_LCPLLREFCLKMONITOR_M_in = HSCLK1_LCPLLREFCLKMONITOR_M;
  assign HSCLK1_LCPLLREFCLKSEL_in[0] = (HSCLK1_LCPLLREFCLKSEL[0] === 1'bz) || HSCLK1_LCPLLREFCLKSEL[0]; // rv 1
  assign HSCLK1_LCPLLREFCLKSEL_in[1] = (HSCLK1_LCPLLREFCLKSEL[1] === 1'bz) || HSCLK1_LCPLLREFCLKSEL[1]; // rv 1
  assign HSCLK1_LCPLLREFCLKSEL_in[2] = (HSCLK1_LCPLLREFCLKSEL[2] === 1'bz) || HSCLK1_LCPLLREFCLKSEL[2]; // rv 1
  assign HSCLK1_LCPLLRESETBYPASSMODE_in = (HSCLK1_LCPLLRESETBYPASSMODE === 1'bz) || HSCLK1_LCPLLRESETBYPASSMODE; // rv 1
  assign HSCLK1_LCPLLRESETMASK_in[0] = (HSCLK1_LCPLLRESETMASK[0] === 1'bz) || HSCLK1_LCPLLRESETMASK[0]; // rv 1
  assign HSCLK1_LCPLLRESETMASK_in[1] = (HSCLK1_LCPLLRESETMASK[1] === 1'bz) || HSCLK1_LCPLLRESETMASK[1]; // rv 1
  assign HSCLK1_LCPLLRESET_in = (HSCLK1_LCPLLRESET === 1'bz) || HSCLK1_LCPLLRESET; // rv 1
  assign HSCLK1_LCPLLRSVD0_in[0] = (HSCLK1_LCPLLRSVD0[0] === 1'bz) || HSCLK1_LCPLLRSVD0[0]; // rv 1
  assign HSCLK1_LCPLLRSVD0_in[1] = (HSCLK1_LCPLLRSVD0[1] === 1'bz) || HSCLK1_LCPLLRSVD0[1]; // rv 1
  assign HSCLK1_LCPLLRSVD0_in[2] = (HSCLK1_LCPLLRSVD0[2] === 1'bz) || HSCLK1_LCPLLRSVD0[2]; // rv 1
  assign HSCLK1_LCPLLRSVD0_in[3] = (HSCLK1_LCPLLRSVD0[3] === 1'bz) || HSCLK1_LCPLLRSVD0[3]; // rv 1
  assign HSCLK1_LCPLLRSVD0_in[4] = (HSCLK1_LCPLLRSVD0[4] === 1'bz) || HSCLK1_LCPLLRSVD0[4]; // rv 1
  assign HSCLK1_LCPLLRSVD0_in[5] = (HSCLK1_LCPLLRSVD0[5] === 1'bz) || HSCLK1_LCPLLRSVD0[5]; // rv 1
  assign HSCLK1_LCPLLRSVD0_in[6] = (HSCLK1_LCPLLRSVD0[6] === 1'bz) || HSCLK1_LCPLLRSVD0[6]; // rv 1
  assign HSCLK1_LCPLLRSVD0_in[7] = (HSCLK1_LCPLLRSVD0[7] === 1'bz) || HSCLK1_LCPLLRSVD0[7]; // rv 1
  assign HSCLK1_LCPLLRSVD1_in[0] = (HSCLK1_LCPLLRSVD1[0] === 1'bz) || HSCLK1_LCPLLRSVD1[0]; // rv 1
  assign HSCLK1_LCPLLRSVD1_in[1] = (HSCLK1_LCPLLRSVD1[1] === 1'bz) || HSCLK1_LCPLLRSVD1[1]; // rv 1
  assign HSCLK1_LCPLLRSVD1_in[2] = (HSCLK1_LCPLLRSVD1[2] === 1'bz) || HSCLK1_LCPLLRSVD1[2]; // rv 1
  assign HSCLK1_LCPLLRSVD1_in[3] = (HSCLK1_LCPLLRSVD1[3] === 1'bz) || HSCLK1_LCPLLRSVD1[3]; // rv 1
  assign HSCLK1_LCPLLRSVD1_in[4] = (HSCLK1_LCPLLRSVD1[4] === 1'bz) || HSCLK1_LCPLLRSVD1[4]; // rv 1
  assign HSCLK1_LCPLLRSVD1_in[5] = (HSCLK1_LCPLLRSVD1[5] === 1'bz) || HSCLK1_LCPLLRSVD1[5]; // rv 1
  assign HSCLK1_LCPLLRSVD1_in[6] = (HSCLK1_LCPLLRSVD1[6] === 1'bz) || HSCLK1_LCPLLRSVD1[6]; // rv 1
  assign HSCLK1_LCPLLRSVD1_in[7] = (HSCLK1_LCPLLRSVD1[7] === 1'bz) || HSCLK1_LCPLLRSVD1[7]; // rv 1
  assign HSCLK1_LCPLLRSVDOUT_M_in = HSCLK1_LCPLLRSVDOUT_M;
  assign HSCLK1_LCPLLSDMDATA_in[0] = (HSCLK1_LCPLLSDMDATA[0] === 1'bz) || HSCLK1_LCPLLSDMDATA[0]; // rv 1
  assign HSCLK1_LCPLLSDMDATA_in[10] = (HSCLK1_LCPLLSDMDATA[10] === 1'bz) || HSCLK1_LCPLLSDMDATA[10]; // rv 1
  assign HSCLK1_LCPLLSDMDATA_in[11] = (HSCLK1_LCPLLSDMDATA[11] === 1'bz) || HSCLK1_LCPLLSDMDATA[11]; // rv 1
  assign HSCLK1_LCPLLSDMDATA_in[12] = (HSCLK1_LCPLLSDMDATA[12] === 1'bz) || HSCLK1_LCPLLSDMDATA[12]; // rv 1
  assign HSCLK1_LCPLLSDMDATA_in[13] = (HSCLK1_LCPLLSDMDATA[13] === 1'bz) || HSCLK1_LCPLLSDMDATA[13]; // rv 1
  assign HSCLK1_LCPLLSDMDATA_in[14] = (HSCLK1_LCPLLSDMDATA[14] === 1'bz) || HSCLK1_LCPLLSDMDATA[14]; // rv 1
  assign HSCLK1_LCPLLSDMDATA_in[15] = (HSCLK1_LCPLLSDMDATA[15] === 1'bz) || HSCLK1_LCPLLSDMDATA[15]; // rv 1
  assign HSCLK1_LCPLLSDMDATA_in[16] = (HSCLK1_LCPLLSDMDATA[16] === 1'bz) || HSCLK1_LCPLLSDMDATA[16]; // rv 1
  assign HSCLK1_LCPLLSDMDATA_in[17] = (HSCLK1_LCPLLSDMDATA[17] === 1'bz) || HSCLK1_LCPLLSDMDATA[17]; // rv 1
  assign HSCLK1_LCPLLSDMDATA_in[18] = (HSCLK1_LCPLLSDMDATA[18] === 1'bz) || HSCLK1_LCPLLSDMDATA[18]; // rv 1
  assign HSCLK1_LCPLLSDMDATA_in[19] = (HSCLK1_LCPLLSDMDATA[19] === 1'bz) || HSCLK1_LCPLLSDMDATA[19]; // rv 1
  assign HSCLK1_LCPLLSDMDATA_in[1] = (HSCLK1_LCPLLSDMDATA[1] === 1'bz) || HSCLK1_LCPLLSDMDATA[1]; // rv 1
  assign HSCLK1_LCPLLSDMDATA_in[20] = (HSCLK1_LCPLLSDMDATA[20] === 1'bz) || HSCLK1_LCPLLSDMDATA[20]; // rv 1
  assign HSCLK1_LCPLLSDMDATA_in[21] = (HSCLK1_LCPLLSDMDATA[21] === 1'bz) || HSCLK1_LCPLLSDMDATA[21]; // rv 1
  assign HSCLK1_LCPLLSDMDATA_in[22] = (HSCLK1_LCPLLSDMDATA[22] === 1'bz) || HSCLK1_LCPLLSDMDATA[22]; // rv 1
  assign HSCLK1_LCPLLSDMDATA_in[23] = (HSCLK1_LCPLLSDMDATA[23] === 1'bz) || HSCLK1_LCPLLSDMDATA[23]; // rv 1
  assign HSCLK1_LCPLLSDMDATA_in[24] = (HSCLK1_LCPLLSDMDATA[24] === 1'bz) || HSCLK1_LCPLLSDMDATA[24]; // rv 1
  assign HSCLK1_LCPLLSDMDATA_in[25] = (HSCLK1_LCPLLSDMDATA[25] === 1'bz) || HSCLK1_LCPLLSDMDATA[25]; // rv 1
  assign HSCLK1_LCPLLSDMDATA_in[2] = (HSCLK1_LCPLLSDMDATA[2] === 1'bz) || HSCLK1_LCPLLSDMDATA[2]; // rv 1
  assign HSCLK1_LCPLLSDMDATA_in[3] = (HSCLK1_LCPLLSDMDATA[3] === 1'bz) || HSCLK1_LCPLLSDMDATA[3]; // rv 1
  assign HSCLK1_LCPLLSDMDATA_in[4] = (HSCLK1_LCPLLSDMDATA[4] === 1'bz) || HSCLK1_LCPLLSDMDATA[4]; // rv 1
  assign HSCLK1_LCPLLSDMDATA_in[5] = (HSCLK1_LCPLLSDMDATA[5] === 1'bz) || HSCLK1_LCPLLSDMDATA[5]; // rv 1
  assign HSCLK1_LCPLLSDMDATA_in[6] = (HSCLK1_LCPLLSDMDATA[6] === 1'bz) || HSCLK1_LCPLLSDMDATA[6]; // rv 1
  assign HSCLK1_LCPLLSDMDATA_in[7] = (HSCLK1_LCPLLSDMDATA[7] === 1'bz) || HSCLK1_LCPLLSDMDATA[7]; // rv 1
  assign HSCLK1_LCPLLSDMDATA_in[8] = (HSCLK1_LCPLLSDMDATA[8] === 1'bz) || HSCLK1_LCPLLSDMDATA[8]; // rv 1
  assign HSCLK1_LCPLLSDMDATA_in[9] = (HSCLK1_LCPLLSDMDATA[9] === 1'bz) || HSCLK1_LCPLLSDMDATA[9]; // rv 1
  assign HSCLK1_LCPLLSDMTOGGLE_in = (HSCLK1_LCPLLSDMTOGGLE === 1'bz) || HSCLK1_LCPLLSDMTOGGLE; // rv 1
  assign HSCLK1_RPLLCLKRSVD0_in = (HSCLK1_RPLLCLKRSVD0 === 1'bz) || HSCLK1_RPLLCLKRSVD0; // rv 1
  assign HSCLK1_RPLLCLKRSVD1_in = (HSCLK1_RPLLCLKRSVD1 === 1'bz) || HSCLK1_RPLLCLKRSVD1; // rv 1
  assign HSCLK1_RPLLFBCLKLOST_M_in = HSCLK1_RPLLFBCLKLOST_M;
  assign HSCLK1_RPLLFBDIV_in[0] = (HSCLK1_RPLLFBDIV[0] === 1'bz) || HSCLK1_RPLLFBDIV[0]; // rv 1
  assign HSCLK1_RPLLFBDIV_in[1] = (HSCLK1_RPLLFBDIV[1] === 1'bz) || HSCLK1_RPLLFBDIV[1]; // rv 1
  assign HSCLK1_RPLLFBDIV_in[2] = (HSCLK1_RPLLFBDIV[2] === 1'bz) || HSCLK1_RPLLFBDIV[2]; // rv 1
  assign HSCLK1_RPLLFBDIV_in[3] = (HSCLK1_RPLLFBDIV[3] === 1'bz) || HSCLK1_RPLLFBDIV[3]; // rv 1
  assign HSCLK1_RPLLFBDIV_in[4] = (HSCLK1_RPLLFBDIV[4] === 1'bz) || HSCLK1_RPLLFBDIV[4]; // rv 1
  assign HSCLK1_RPLLFBDIV_in[5] = (HSCLK1_RPLLFBDIV[5] === 1'bz) || HSCLK1_RPLLFBDIV[5]; // rv 1
  assign HSCLK1_RPLLFBDIV_in[6] = (HSCLK1_RPLLFBDIV[6] === 1'bz) || HSCLK1_RPLLFBDIV[6]; // rv 1
  assign HSCLK1_RPLLFBDIV_in[7] = (HSCLK1_RPLLFBDIV[7] === 1'bz) || HSCLK1_RPLLFBDIV[7]; // rv 1
  assign HSCLK1_RPLLGTGREFCLK_in = HSCLK1_RPLLGTGREFCLK;
  assign HSCLK1_RPLLLOCK_M_in = HSCLK1_RPLLLOCK_M;
  assign HSCLK1_RPLLPD_in = (HSCLK1_RPLLPD === 1'bz) || HSCLK1_RPLLPD; // rv 1
  assign HSCLK1_RPLLREFCLKLOST_M_in = HSCLK1_RPLLREFCLKLOST_M;
  assign HSCLK1_RPLLREFCLKMONITOR_M_in = HSCLK1_RPLLREFCLKMONITOR_M;
  assign HSCLK1_RPLLREFCLKSEL_in[0] = (HSCLK1_RPLLREFCLKSEL[0] === 1'bz) || HSCLK1_RPLLREFCLKSEL[0]; // rv 1
  assign HSCLK1_RPLLREFCLKSEL_in[1] = (HSCLK1_RPLLREFCLKSEL[1] === 1'bz) || HSCLK1_RPLLREFCLKSEL[1]; // rv 1
  assign HSCLK1_RPLLREFCLKSEL_in[2] = (HSCLK1_RPLLREFCLKSEL[2] === 1'bz) || HSCLK1_RPLLREFCLKSEL[2]; // rv 1
  assign HSCLK1_RPLLRESETBYPASSMODE_in = (HSCLK1_RPLLRESETBYPASSMODE === 1'bz) || HSCLK1_RPLLRESETBYPASSMODE; // rv 1
  assign HSCLK1_RPLLRESETMASK_in[0] = (HSCLK1_RPLLRESETMASK[0] === 1'bz) || HSCLK1_RPLLRESETMASK[0]; // rv 1
  assign HSCLK1_RPLLRESETMASK_in[1] = (HSCLK1_RPLLRESETMASK[1] === 1'bz) || HSCLK1_RPLLRESETMASK[1]; // rv 1
  assign HSCLK1_RPLLRESET_in = (HSCLK1_RPLLRESET === 1'bz) || HSCLK1_RPLLRESET; // rv 1
  assign HSCLK1_RPLLRSVD0_in[0] = (HSCLK1_RPLLRSVD0[0] === 1'bz) || HSCLK1_RPLLRSVD0[0]; // rv 1
  assign HSCLK1_RPLLRSVD0_in[1] = (HSCLK1_RPLLRSVD0[1] === 1'bz) || HSCLK1_RPLLRSVD0[1]; // rv 1
  assign HSCLK1_RPLLRSVD0_in[2] = (HSCLK1_RPLLRSVD0[2] === 1'bz) || HSCLK1_RPLLRSVD0[2]; // rv 1
  assign HSCLK1_RPLLRSVD0_in[3] = (HSCLK1_RPLLRSVD0[3] === 1'bz) || HSCLK1_RPLLRSVD0[3]; // rv 1
  assign HSCLK1_RPLLRSVD0_in[4] = (HSCLK1_RPLLRSVD0[4] === 1'bz) || HSCLK1_RPLLRSVD0[4]; // rv 1
  assign HSCLK1_RPLLRSVD0_in[5] = (HSCLK1_RPLLRSVD0[5] === 1'bz) || HSCLK1_RPLLRSVD0[5]; // rv 1
  assign HSCLK1_RPLLRSVD0_in[6] = (HSCLK1_RPLLRSVD0[6] === 1'bz) || HSCLK1_RPLLRSVD0[6]; // rv 1
  assign HSCLK1_RPLLRSVD0_in[7] = (HSCLK1_RPLLRSVD0[7] === 1'bz) || HSCLK1_RPLLRSVD0[7]; // rv 1
  assign HSCLK1_RPLLRSVD1_in[0] = (HSCLK1_RPLLRSVD1[0] === 1'bz) || HSCLK1_RPLLRSVD1[0]; // rv 1
  assign HSCLK1_RPLLRSVD1_in[1] = (HSCLK1_RPLLRSVD1[1] === 1'bz) || HSCLK1_RPLLRSVD1[1]; // rv 1
  assign HSCLK1_RPLLRSVD1_in[2] = (HSCLK1_RPLLRSVD1[2] === 1'bz) || HSCLK1_RPLLRSVD1[2]; // rv 1
  assign HSCLK1_RPLLRSVD1_in[3] = (HSCLK1_RPLLRSVD1[3] === 1'bz) || HSCLK1_RPLLRSVD1[3]; // rv 1
  assign HSCLK1_RPLLRSVD1_in[4] = (HSCLK1_RPLLRSVD1[4] === 1'bz) || HSCLK1_RPLLRSVD1[4]; // rv 1
  assign HSCLK1_RPLLRSVD1_in[5] = (HSCLK1_RPLLRSVD1[5] === 1'bz) || HSCLK1_RPLLRSVD1[5]; // rv 1
  assign HSCLK1_RPLLRSVD1_in[6] = (HSCLK1_RPLLRSVD1[6] === 1'bz) || HSCLK1_RPLLRSVD1[6]; // rv 1
  assign HSCLK1_RPLLRSVD1_in[7] = (HSCLK1_RPLLRSVD1[7] === 1'bz) || HSCLK1_RPLLRSVD1[7]; // rv 1
  assign HSCLK1_RPLLRSVDOUT_M_in = HSCLK1_RPLLRSVDOUT_M;
  assign HSCLK1_RPLLSDMDATA_in[0] = (HSCLK1_RPLLSDMDATA[0] === 1'bz) || HSCLK1_RPLLSDMDATA[0]; // rv 1
  assign HSCLK1_RPLLSDMDATA_in[10] = (HSCLK1_RPLLSDMDATA[10] === 1'bz) || HSCLK1_RPLLSDMDATA[10]; // rv 1
  assign HSCLK1_RPLLSDMDATA_in[11] = (HSCLK1_RPLLSDMDATA[11] === 1'bz) || HSCLK1_RPLLSDMDATA[11]; // rv 1
  assign HSCLK1_RPLLSDMDATA_in[12] = (HSCLK1_RPLLSDMDATA[12] === 1'bz) || HSCLK1_RPLLSDMDATA[12]; // rv 1
  assign HSCLK1_RPLLSDMDATA_in[13] = (HSCLK1_RPLLSDMDATA[13] === 1'bz) || HSCLK1_RPLLSDMDATA[13]; // rv 1
  assign HSCLK1_RPLLSDMDATA_in[14] = (HSCLK1_RPLLSDMDATA[14] === 1'bz) || HSCLK1_RPLLSDMDATA[14]; // rv 1
  assign HSCLK1_RPLLSDMDATA_in[15] = (HSCLK1_RPLLSDMDATA[15] === 1'bz) || HSCLK1_RPLLSDMDATA[15]; // rv 1
  assign HSCLK1_RPLLSDMDATA_in[16] = (HSCLK1_RPLLSDMDATA[16] === 1'bz) || HSCLK1_RPLLSDMDATA[16]; // rv 1
  assign HSCLK1_RPLLSDMDATA_in[17] = (HSCLK1_RPLLSDMDATA[17] === 1'bz) || HSCLK1_RPLLSDMDATA[17]; // rv 1
  assign HSCLK1_RPLLSDMDATA_in[18] = (HSCLK1_RPLLSDMDATA[18] === 1'bz) || HSCLK1_RPLLSDMDATA[18]; // rv 1
  assign HSCLK1_RPLLSDMDATA_in[19] = (HSCLK1_RPLLSDMDATA[19] === 1'bz) || HSCLK1_RPLLSDMDATA[19]; // rv 1
  assign HSCLK1_RPLLSDMDATA_in[1] = (HSCLK1_RPLLSDMDATA[1] === 1'bz) || HSCLK1_RPLLSDMDATA[1]; // rv 1
  assign HSCLK1_RPLLSDMDATA_in[20] = (HSCLK1_RPLLSDMDATA[20] === 1'bz) || HSCLK1_RPLLSDMDATA[20]; // rv 1
  assign HSCLK1_RPLLSDMDATA_in[21] = (HSCLK1_RPLLSDMDATA[21] === 1'bz) || HSCLK1_RPLLSDMDATA[21]; // rv 1
  assign HSCLK1_RPLLSDMDATA_in[22] = (HSCLK1_RPLLSDMDATA[22] === 1'bz) || HSCLK1_RPLLSDMDATA[22]; // rv 1
  assign HSCLK1_RPLLSDMDATA_in[23] = (HSCLK1_RPLLSDMDATA[23] === 1'bz) || HSCLK1_RPLLSDMDATA[23]; // rv 1
  assign HSCLK1_RPLLSDMDATA_in[24] = (HSCLK1_RPLLSDMDATA[24] === 1'bz) || HSCLK1_RPLLSDMDATA[24]; // rv 1
  assign HSCLK1_RPLLSDMDATA_in[25] = (HSCLK1_RPLLSDMDATA[25] === 1'bz) || HSCLK1_RPLLSDMDATA[25]; // rv 1
  assign HSCLK1_RPLLSDMDATA_in[2] = (HSCLK1_RPLLSDMDATA[2] === 1'bz) || HSCLK1_RPLLSDMDATA[2]; // rv 1
  assign HSCLK1_RPLLSDMDATA_in[3] = (HSCLK1_RPLLSDMDATA[3] === 1'bz) || HSCLK1_RPLLSDMDATA[3]; // rv 1
  assign HSCLK1_RPLLSDMDATA_in[4] = (HSCLK1_RPLLSDMDATA[4] === 1'bz) || HSCLK1_RPLLSDMDATA[4]; // rv 1
  assign HSCLK1_RPLLSDMDATA_in[5] = (HSCLK1_RPLLSDMDATA[5] === 1'bz) || HSCLK1_RPLLSDMDATA[5]; // rv 1
  assign HSCLK1_RPLLSDMDATA_in[6] = (HSCLK1_RPLLSDMDATA[6] === 1'bz) || HSCLK1_RPLLSDMDATA[6]; // rv 1
  assign HSCLK1_RPLLSDMDATA_in[7] = (HSCLK1_RPLLSDMDATA[7] === 1'bz) || HSCLK1_RPLLSDMDATA[7]; // rv 1
  assign HSCLK1_RPLLSDMDATA_in[8] = (HSCLK1_RPLLSDMDATA[8] === 1'bz) || HSCLK1_RPLLSDMDATA[8]; // rv 1
  assign HSCLK1_RPLLSDMDATA_in[9] = (HSCLK1_RPLLSDMDATA[9] === 1'bz) || HSCLK1_RPLLSDMDATA[9]; // rv 1
  assign HSCLK1_RPLLSDMTOGGLE_in = (HSCLK1_RPLLSDMTOGGLE === 1'bz) || HSCLK1_RPLLSDMTOGGLE; // rv 1
  assign M0_AXIS_TDATA_M_in = M0_AXIS_TDATA_M;
  assign M0_AXIS_TLAST_M_in = M0_AXIS_TLAST_M;
  assign M0_AXIS_TREADY_in = (M0_AXIS_TREADY === 1'bz) || M0_AXIS_TREADY; // rv 1
  assign M0_AXIS_TVALID_M_in = M0_AXIS_TVALID_M;
  assign M1_AXIS_TDATA_M_in = M1_AXIS_TDATA_M;
  assign M1_AXIS_TLAST_M_in = M1_AXIS_TLAST_M;
  assign M1_AXIS_TREADY_in = (M1_AXIS_TREADY === 1'bz) || M1_AXIS_TREADY; // rv 1
  assign M1_AXIS_TVALID_M_in = M1_AXIS_TVALID_M;
  assign M2_AXIS_TDATA_M_in = M2_AXIS_TDATA_M;
  assign M2_AXIS_TLAST_M_in = M2_AXIS_TLAST_M;
  assign M2_AXIS_TREADY_in = (M2_AXIS_TREADY === 1'bz) || M2_AXIS_TREADY; // rv 1
  assign M2_AXIS_TVALID_M_in = M2_AXIS_TVALID_M;
  assign MSTRXRESETDONE_M_in = MSTRXRESETDONE_M;
  assign MSTRXRESET_in[0] = (MSTRXRESET[0] === 1'bz) || MSTRXRESET[0]; // rv 1
  assign MSTRXRESET_in[1] = (MSTRXRESET[1] === 1'bz) || MSTRXRESET[1]; // rv 1
  assign MSTRXRESET_in[2] = (MSTRXRESET[2] === 1'bz) || MSTRXRESET[2]; // rv 1
  assign MSTRXRESET_in[3] = (MSTRXRESET[3] === 1'bz) || MSTRXRESET[3]; // rv 1
  assign MSTTXRESETDONE_M_in = MSTTXRESETDONE_M;
  assign MSTTXRESET_in[0] = (MSTTXRESET[0] === 1'bz) || MSTTXRESET[0]; // rv 1
  assign MSTTXRESET_in[1] = (MSTTXRESET[1] === 1'bz) || MSTTXRESET[1]; // rv 1
  assign MSTTXRESET_in[2] = (MSTTXRESET[2] === 1'bz) || MSTTXRESET[2]; // rv 1
  assign MSTTXRESET_in[3] = (MSTTXRESET[3] === 1'bz) || MSTTXRESET[3]; // rv 1
  assign PCIELINKREACHTARGET_in = (PCIELINKREACHTARGET === 1'bz) || PCIELINKREACHTARGET; // rv 1
  assign PCIELTSSM_in[0] = (PCIELTSSM[0] === 1'bz) || PCIELTSSM[0]; // rv 1
  assign PCIELTSSM_in[1] = (PCIELTSSM[1] === 1'bz) || PCIELTSSM[1]; // rv 1
  assign PCIELTSSM_in[2] = (PCIELTSSM[2] === 1'bz) || PCIELTSSM[2]; // rv 1
  assign PCIELTSSM_in[3] = (PCIELTSSM[3] === 1'bz) || PCIELTSSM[3]; // rv 1
  assign PCIELTSSM_in[4] = (PCIELTSSM[4] === 1'bz) || PCIELTSSM[4]; // rv 1
  assign PCIELTSSM_in[5] = (PCIELTSSM[5] === 1'bz) || PCIELTSSM[5]; // rv 1
  assign RCALENB_in = RCALENB;
  assign REFCLK0_CLKTESTSIG_in = REFCLK0_CLKTESTSIG;
  assign REFCLK0_GTREFCLKPD_in = REFCLK0_GTREFCLKPD;
  assign REFCLK1_CLKTESTSIG_in = REFCLK1_CLKTESTSIG;
  assign REFCLK1_GTREFCLKPD_in = REFCLK1_GTREFCLKPD;
  assign RXMARGINCLK_in = (RXMARGINCLK === 1'bz) || RXMARGINCLK; // rv 1
  assign RXMARGINREQACK_M_in = RXMARGINREQACK_M;
  assign RXMARGINREQCMD_in[0] = (RXMARGINREQCMD[0] === 1'bz) || RXMARGINREQCMD[0]; // rv 1
  assign RXMARGINREQCMD_in[1] = (RXMARGINREQCMD[1] === 1'bz) || RXMARGINREQCMD[1]; // rv 1
  assign RXMARGINREQCMD_in[2] = (RXMARGINREQCMD[2] === 1'bz) || RXMARGINREQCMD[2]; // rv 1
  assign RXMARGINREQCMD_in[3] = (RXMARGINREQCMD[3] === 1'bz) || RXMARGINREQCMD[3]; // rv 1
  assign RXMARGINREQLANENUM_in[0] = (RXMARGINREQLANENUM[0] === 1'bz) || RXMARGINREQLANENUM[0]; // rv 1
  assign RXMARGINREQLANENUM_in[1] = (RXMARGINREQLANENUM[1] === 1'bz) || RXMARGINREQLANENUM[1]; // rv 1
  assign RXMARGINREQPAYLD_in[0] = (RXMARGINREQPAYLD[0] === 1'bz) || RXMARGINREQPAYLD[0]; // rv 1
  assign RXMARGINREQPAYLD_in[1] = (RXMARGINREQPAYLD[1] === 1'bz) || RXMARGINREQPAYLD[1]; // rv 1
  assign RXMARGINREQPAYLD_in[2] = (RXMARGINREQPAYLD[2] === 1'bz) || RXMARGINREQPAYLD[2]; // rv 1
  assign RXMARGINREQPAYLD_in[3] = (RXMARGINREQPAYLD[3] === 1'bz) || RXMARGINREQPAYLD[3]; // rv 1
  assign RXMARGINREQPAYLD_in[4] = (RXMARGINREQPAYLD[4] === 1'bz) || RXMARGINREQPAYLD[4]; // rv 1
  assign RXMARGINREQPAYLD_in[5] = (RXMARGINREQPAYLD[5] === 1'bz) || RXMARGINREQPAYLD[5]; // rv 1
  assign RXMARGINREQPAYLD_in[6] = (RXMARGINREQPAYLD[6] === 1'bz) || RXMARGINREQPAYLD[6]; // rv 1
  assign RXMARGINREQPAYLD_in[7] = (RXMARGINREQPAYLD[7] === 1'bz) || RXMARGINREQPAYLD[7]; // rv 1
  assign RXMARGINREQREQ_in = (RXMARGINREQREQ === 1'bz) || RXMARGINREQREQ; // rv 1
  assign RXMARGINRESACK_in = (RXMARGINRESACK === 1'bz) || RXMARGINRESACK; // rv 1
  assign RXMARGINRESCMD_M_in = RXMARGINRESCMD_M;
  assign RXMARGINRESLANENUM_M_in = RXMARGINRESLANENUM_M;
  assign RXMARGINRESPAYLD_M_in = RXMARGINRESPAYLD_M;
  assign RXMARGINRESREQ_M_in = RXMARGINRESREQ_M;
  assign S0_AXIS_TDATA_in[0] = (S0_AXIS_TDATA[0] === 1'bz) || S0_AXIS_TDATA[0]; // rv 1
  assign S0_AXIS_TDATA_in[10] = (S0_AXIS_TDATA[10] === 1'bz) || S0_AXIS_TDATA[10]; // rv 1
  assign S0_AXIS_TDATA_in[11] = (S0_AXIS_TDATA[11] === 1'bz) || S0_AXIS_TDATA[11]; // rv 1
  assign S0_AXIS_TDATA_in[12] = (S0_AXIS_TDATA[12] === 1'bz) || S0_AXIS_TDATA[12]; // rv 1
  assign S0_AXIS_TDATA_in[13] = (S0_AXIS_TDATA[13] === 1'bz) || S0_AXIS_TDATA[13]; // rv 1
  assign S0_AXIS_TDATA_in[14] = (S0_AXIS_TDATA[14] === 1'bz) || S0_AXIS_TDATA[14]; // rv 1
  assign S0_AXIS_TDATA_in[15] = (S0_AXIS_TDATA[15] === 1'bz) || S0_AXIS_TDATA[15]; // rv 1
  assign S0_AXIS_TDATA_in[16] = (S0_AXIS_TDATA[16] === 1'bz) || S0_AXIS_TDATA[16]; // rv 1
  assign S0_AXIS_TDATA_in[17] = (S0_AXIS_TDATA[17] === 1'bz) || S0_AXIS_TDATA[17]; // rv 1
  assign S0_AXIS_TDATA_in[18] = (S0_AXIS_TDATA[18] === 1'bz) || S0_AXIS_TDATA[18]; // rv 1
  assign S0_AXIS_TDATA_in[19] = (S0_AXIS_TDATA[19] === 1'bz) || S0_AXIS_TDATA[19]; // rv 1
  assign S0_AXIS_TDATA_in[1] = (S0_AXIS_TDATA[1] === 1'bz) || S0_AXIS_TDATA[1]; // rv 1
  assign S0_AXIS_TDATA_in[20] = (S0_AXIS_TDATA[20] === 1'bz) || S0_AXIS_TDATA[20]; // rv 1
  assign S0_AXIS_TDATA_in[21] = (S0_AXIS_TDATA[21] === 1'bz) || S0_AXIS_TDATA[21]; // rv 1
  assign S0_AXIS_TDATA_in[22] = (S0_AXIS_TDATA[22] === 1'bz) || S0_AXIS_TDATA[22]; // rv 1
  assign S0_AXIS_TDATA_in[23] = (S0_AXIS_TDATA[23] === 1'bz) || S0_AXIS_TDATA[23]; // rv 1
  assign S0_AXIS_TDATA_in[24] = (S0_AXIS_TDATA[24] === 1'bz) || S0_AXIS_TDATA[24]; // rv 1
  assign S0_AXIS_TDATA_in[25] = (S0_AXIS_TDATA[25] === 1'bz) || S0_AXIS_TDATA[25]; // rv 1
  assign S0_AXIS_TDATA_in[26] = (S0_AXIS_TDATA[26] === 1'bz) || S0_AXIS_TDATA[26]; // rv 1
  assign S0_AXIS_TDATA_in[27] = (S0_AXIS_TDATA[27] === 1'bz) || S0_AXIS_TDATA[27]; // rv 1
  assign S0_AXIS_TDATA_in[28] = (S0_AXIS_TDATA[28] === 1'bz) || S0_AXIS_TDATA[28]; // rv 1
  assign S0_AXIS_TDATA_in[29] = (S0_AXIS_TDATA[29] === 1'bz) || S0_AXIS_TDATA[29]; // rv 1
  assign S0_AXIS_TDATA_in[2] = (S0_AXIS_TDATA[2] === 1'bz) || S0_AXIS_TDATA[2]; // rv 1
  assign S0_AXIS_TDATA_in[30] = (S0_AXIS_TDATA[30] === 1'bz) || S0_AXIS_TDATA[30]; // rv 1
  assign S0_AXIS_TDATA_in[31] = (S0_AXIS_TDATA[31] === 1'bz) || S0_AXIS_TDATA[31]; // rv 1
  assign S0_AXIS_TDATA_in[3] = (S0_AXIS_TDATA[3] === 1'bz) || S0_AXIS_TDATA[3]; // rv 1
  assign S0_AXIS_TDATA_in[4] = (S0_AXIS_TDATA[4] === 1'bz) || S0_AXIS_TDATA[4]; // rv 1
  assign S0_AXIS_TDATA_in[5] = (S0_AXIS_TDATA[5] === 1'bz) || S0_AXIS_TDATA[5]; // rv 1
  assign S0_AXIS_TDATA_in[6] = (S0_AXIS_TDATA[6] === 1'bz) || S0_AXIS_TDATA[6]; // rv 1
  assign S0_AXIS_TDATA_in[7] = (S0_AXIS_TDATA[7] === 1'bz) || S0_AXIS_TDATA[7]; // rv 1
  assign S0_AXIS_TDATA_in[8] = (S0_AXIS_TDATA[8] === 1'bz) || S0_AXIS_TDATA[8]; // rv 1
  assign S0_AXIS_TDATA_in[9] = (S0_AXIS_TDATA[9] === 1'bz) || S0_AXIS_TDATA[9]; // rv 1
  assign S0_AXIS_TLAST_in = (S0_AXIS_TLAST === 1'bz) || S0_AXIS_TLAST; // rv 1
  assign S0_AXIS_TREADY_M_in = S0_AXIS_TREADY_M;
  assign S0_AXIS_TVALID_in = (S0_AXIS_TVALID === 1'bz) || S0_AXIS_TVALID; // rv 1
  assign S1_AXIS_TDATA_in[0] = (S1_AXIS_TDATA[0] === 1'bz) || S1_AXIS_TDATA[0]; // rv 1
  assign S1_AXIS_TDATA_in[10] = (S1_AXIS_TDATA[10] === 1'bz) || S1_AXIS_TDATA[10]; // rv 1
  assign S1_AXIS_TDATA_in[11] = (S1_AXIS_TDATA[11] === 1'bz) || S1_AXIS_TDATA[11]; // rv 1
  assign S1_AXIS_TDATA_in[12] = (S1_AXIS_TDATA[12] === 1'bz) || S1_AXIS_TDATA[12]; // rv 1
  assign S1_AXIS_TDATA_in[13] = (S1_AXIS_TDATA[13] === 1'bz) || S1_AXIS_TDATA[13]; // rv 1
  assign S1_AXIS_TDATA_in[14] = (S1_AXIS_TDATA[14] === 1'bz) || S1_AXIS_TDATA[14]; // rv 1
  assign S1_AXIS_TDATA_in[15] = (S1_AXIS_TDATA[15] === 1'bz) || S1_AXIS_TDATA[15]; // rv 1
  assign S1_AXIS_TDATA_in[16] = (S1_AXIS_TDATA[16] === 1'bz) || S1_AXIS_TDATA[16]; // rv 1
  assign S1_AXIS_TDATA_in[17] = (S1_AXIS_TDATA[17] === 1'bz) || S1_AXIS_TDATA[17]; // rv 1
  assign S1_AXIS_TDATA_in[18] = (S1_AXIS_TDATA[18] === 1'bz) || S1_AXIS_TDATA[18]; // rv 1
  assign S1_AXIS_TDATA_in[19] = (S1_AXIS_TDATA[19] === 1'bz) || S1_AXIS_TDATA[19]; // rv 1
  assign S1_AXIS_TDATA_in[1] = (S1_AXIS_TDATA[1] === 1'bz) || S1_AXIS_TDATA[1]; // rv 1
  assign S1_AXIS_TDATA_in[20] = (S1_AXIS_TDATA[20] === 1'bz) || S1_AXIS_TDATA[20]; // rv 1
  assign S1_AXIS_TDATA_in[21] = (S1_AXIS_TDATA[21] === 1'bz) || S1_AXIS_TDATA[21]; // rv 1
  assign S1_AXIS_TDATA_in[22] = (S1_AXIS_TDATA[22] === 1'bz) || S1_AXIS_TDATA[22]; // rv 1
  assign S1_AXIS_TDATA_in[23] = (S1_AXIS_TDATA[23] === 1'bz) || S1_AXIS_TDATA[23]; // rv 1
  assign S1_AXIS_TDATA_in[24] = (S1_AXIS_TDATA[24] === 1'bz) || S1_AXIS_TDATA[24]; // rv 1
  assign S1_AXIS_TDATA_in[25] = (S1_AXIS_TDATA[25] === 1'bz) || S1_AXIS_TDATA[25]; // rv 1
  assign S1_AXIS_TDATA_in[26] = (S1_AXIS_TDATA[26] === 1'bz) || S1_AXIS_TDATA[26]; // rv 1
  assign S1_AXIS_TDATA_in[27] = (S1_AXIS_TDATA[27] === 1'bz) || S1_AXIS_TDATA[27]; // rv 1
  assign S1_AXIS_TDATA_in[28] = (S1_AXIS_TDATA[28] === 1'bz) || S1_AXIS_TDATA[28]; // rv 1
  assign S1_AXIS_TDATA_in[29] = (S1_AXIS_TDATA[29] === 1'bz) || S1_AXIS_TDATA[29]; // rv 1
  assign S1_AXIS_TDATA_in[2] = (S1_AXIS_TDATA[2] === 1'bz) || S1_AXIS_TDATA[2]; // rv 1
  assign S1_AXIS_TDATA_in[30] = (S1_AXIS_TDATA[30] === 1'bz) || S1_AXIS_TDATA[30]; // rv 1
  assign S1_AXIS_TDATA_in[31] = (S1_AXIS_TDATA[31] === 1'bz) || S1_AXIS_TDATA[31]; // rv 1
  assign S1_AXIS_TDATA_in[3] = (S1_AXIS_TDATA[3] === 1'bz) || S1_AXIS_TDATA[3]; // rv 1
  assign S1_AXIS_TDATA_in[4] = (S1_AXIS_TDATA[4] === 1'bz) || S1_AXIS_TDATA[4]; // rv 1
  assign S1_AXIS_TDATA_in[5] = (S1_AXIS_TDATA[5] === 1'bz) || S1_AXIS_TDATA[5]; // rv 1
  assign S1_AXIS_TDATA_in[6] = (S1_AXIS_TDATA[6] === 1'bz) || S1_AXIS_TDATA[6]; // rv 1
  assign S1_AXIS_TDATA_in[7] = (S1_AXIS_TDATA[7] === 1'bz) || S1_AXIS_TDATA[7]; // rv 1
  assign S1_AXIS_TDATA_in[8] = (S1_AXIS_TDATA[8] === 1'bz) || S1_AXIS_TDATA[8]; // rv 1
  assign S1_AXIS_TDATA_in[9] = (S1_AXIS_TDATA[9] === 1'bz) || S1_AXIS_TDATA[9]; // rv 1
  assign S1_AXIS_TLAST_in = (S1_AXIS_TLAST === 1'bz) || S1_AXIS_TLAST; // rv 1
  assign S1_AXIS_TREADY_M_in = S1_AXIS_TREADY_M;
  assign S1_AXIS_TVALID_in = (S1_AXIS_TVALID === 1'bz) || S1_AXIS_TVALID; // rv 1
  assign S2_AXIS_TDATA_in[0] = (S2_AXIS_TDATA[0] === 1'bz) || S2_AXIS_TDATA[0]; // rv 1
  assign S2_AXIS_TDATA_in[10] = (S2_AXIS_TDATA[10] === 1'bz) || S2_AXIS_TDATA[10]; // rv 1
  assign S2_AXIS_TDATA_in[11] = (S2_AXIS_TDATA[11] === 1'bz) || S2_AXIS_TDATA[11]; // rv 1
  assign S2_AXIS_TDATA_in[12] = (S2_AXIS_TDATA[12] === 1'bz) || S2_AXIS_TDATA[12]; // rv 1
  assign S2_AXIS_TDATA_in[13] = (S2_AXIS_TDATA[13] === 1'bz) || S2_AXIS_TDATA[13]; // rv 1
  assign S2_AXIS_TDATA_in[14] = (S2_AXIS_TDATA[14] === 1'bz) || S2_AXIS_TDATA[14]; // rv 1
  assign S2_AXIS_TDATA_in[15] = (S2_AXIS_TDATA[15] === 1'bz) || S2_AXIS_TDATA[15]; // rv 1
  assign S2_AXIS_TDATA_in[16] = (S2_AXIS_TDATA[16] === 1'bz) || S2_AXIS_TDATA[16]; // rv 1
  assign S2_AXIS_TDATA_in[17] = (S2_AXIS_TDATA[17] === 1'bz) || S2_AXIS_TDATA[17]; // rv 1
  assign S2_AXIS_TDATA_in[18] = (S2_AXIS_TDATA[18] === 1'bz) || S2_AXIS_TDATA[18]; // rv 1
  assign S2_AXIS_TDATA_in[19] = (S2_AXIS_TDATA[19] === 1'bz) || S2_AXIS_TDATA[19]; // rv 1
  assign S2_AXIS_TDATA_in[1] = (S2_AXIS_TDATA[1] === 1'bz) || S2_AXIS_TDATA[1]; // rv 1
  assign S2_AXIS_TDATA_in[20] = (S2_AXIS_TDATA[20] === 1'bz) || S2_AXIS_TDATA[20]; // rv 1
  assign S2_AXIS_TDATA_in[21] = (S2_AXIS_TDATA[21] === 1'bz) || S2_AXIS_TDATA[21]; // rv 1
  assign S2_AXIS_TDATA_in[22] = (S2_AXIS_TDATA[22] === 1'bz) || S2_AXIS_TDATA[22]; // rv 1
  assign S2_AXIS_TDATA_in[23] = (S2_AXIS_TDATA[23] === 1'bz) || S2_AXIS_TDATA[23]; // rv 1
  assign S2_AXIS_TDATA_in[24] = (S2_AXIS_TDATA[24] === 1'bz) || S2_AXIS_TDATA[24]; // rv 1
  assign S2_AXIS_TDATA_in[25] = (S2_AXIS_TDATA[25] === 1'bz) || S2_AXIS_TDATA[25]; // rv 1
  assign S2_AXIS_TDATA_in[26] = (S2_AXIS_TDATA[26] === 1'bz) || S2_AXIS_TDATA[26]; // rv 1
  assign S2_AXIS_TDATA_in[27] = (S2_AXIS_TDATA[27] === 1'bz) || S2_AXIS_TDATA[27]; // rv 1
  assign S2_AXIS_TDATA_in[28] = (S2_AXIS_TDATA[28] === 1'bz) || S2_AXIS_TDATA[28]; // rv 1
  assign S2_AXIS_TDATA_in[29] = (S2_AXIS_TDATA[29] === 1'bz) || S2_AXIS_TDATA[29]; // rv 1
  assign S2_AXIS_TDATA_in[2] = (S2_AXIS_TDATA[2] === 1'bz) || S2_AXIS_TDATA[2]; // rv 1
  assign S2_AXIS_TDATA_in[30] = (S2_AXIS_TDATA[30] === 1'bz) || S2_AXIS_TDATA[30]; // rv 1
  assign S2_AXIS_TDATA_in[31] = (S2_AXIS_TDATA[31] === 1'bz) || S2_AXIS_TDATA[31]; // rv 1
  assign S2_AXIS_TDATA_in[3] = (S2_AXIS_TDATA[3] === 1'bz) || S2_AXIS_TDATA[3]; // rv 1
  assign S2_AXIS_TDATA_in[4] = (S2_AXIS_TDATA[4] === 1'bz) || S2_AXIS_TDATA[4]; // rv 1
  assign S2_AXIS_TDATA_in[5] = (S2_AXIS_TDATA[5] === 1'bz) || S2_AXIS_TDATA[5]; // rv 1
  assign S2_AXIS_TDATA_in[6] = (S2_AXIS_TDATA[6] === 1'bz) || S2_AXIS_TDATA[6]; // rv 1
  assign S2_AXIS_TDATA_in[7] = (S2_AXIS_TDATA[7] === 1'bz) || S2_AXIS_TDATA[7]; // rv 1
  assign S2_AXIS_TDATA_in[8] = (S2_AXIS_TDATA[8] === 1'bz) || S2_AXIS_TDATA[8]; // rv 1
  assign S2_AXIS_TDATA_in[9] = (S2_AXIS_TDATA[9] === 1'bz) || S2_AXIS_TDATA[9]; // rv 1
  assign S2_AXIS_TLAST_in = (S2_AXIS_TLAST === 1'bz) || S2_AXIS_TLAST; // rv 1
  assign S2_AXIS_TREADY_M_in = S2_AXIS_TREADY_M;
  assign S2_AXIS_TVALID_in = (S2_AXIS_TVALID === 1'bz) || S2_AXIS_TVALID; // rv 1
  assign TRIGACKIN0_M_in = TRIGACKIN0_M;
  assign TRIGACKOUT0_in = (TRIGACKOUT0 === 1'bz) || TRIGACKOUT0; // rv 1
  assign TRIGIN0_in = (TRIGIN0 === 1'bz) || TRIGIN0; // rv 1
  assign TRIGOUT0_M_in = TRIGOUT0_M;
  assign UBENABLE_in = (UBENABLE === 1'bz) || UBENABLE; // rv 1
  assign UBINTERRUPT_M_in = UBINTERRUPT_M;
  assign UBINTR_in[0] = (UBINTR[0] === 1'bz) || UBINTR[0]; // rv 1
  assign UBINTR_in[10] = (UBINTR[10] === 1'bz) || UBINTR[10]; // rv 1
  assign UBINTR_in[11] = (UBINTR[11] === 1'bz) || UBINTR[11]; // rv 1
  assign UBINTR_in[1] = (UBINTR[1] === 1'bz) || UBINTR[1]; // rv 1
  assign UBINTR_in[2] = (UBINTR[2] === 1'bz) || UBINTR[2]; // rv 1
  assign UBINTR_in[3] = (UBINTR[3] === 1'bz) || UBINTR[3]; // rv 1
  assign UBINTR_in[4] = (UBINTR[4] === 1'bz) || UBINTR[4]; // rv 1
  assign UBINTR_in[5] = (UBINTR[5] === 1'bz) || UBINTR[5]; // rv 1
  assign UBINTR_in[6] = (UBINTR[6] === 1'bz) || UBINTR[6]; // rv 1
  assign UBINTR_in[7] = (UBINTR[7] === 1'bz) || UBINTR[7]; // rv 1
  assign UBINTR_in[8] = (UBINTR[8] === 1'bz) || UBINTR[8]; // rv 1
  assign UBINTR_in[9] = (UBINTR[9] === 1'bz) || UBINTR[9]; // rv 1
  assign UBIOLMBRST_in = (UBIOLMBRST === 1'bz) || UBIOLMBRST; // rv 1
  assign UBMBRST_in = (UBMBRST === 1'bz) || UBMBRST; // rv 1
  assign UBRXUART_in = (UBRXUART === 1'bz) || UBRXUART; // rv 1
  assign UBTXUART_M_in = UBTXUART_M;
  assign UNCORRECTERR_M_in = UNCORRECTERR_M;
  assign XPIPE_BUFGTCE_MASK_M_1_in = XPIPE_BUFGTCE_MASK_M_1;
  assign XPIPE_BUFGTCE_MASK_M_in = XPIPE_BUFGTCE_MASK_M;
  assign XPIPE_BUFGTCE_M_1_in = XPIPE_BUFGTCE_M_1;
  assign XPIPE_BUFGTCE_M_in = XPIPE_BUFGTCE_M;
  assign XPIPE_BUFGTDIV_M_1_in = XPIPE_BUFGTDIV_M_1;
  assign XPIPE_BUFGTDIV_M_in = XPIPE_BUFGTDIV_M;
  assign XPIPE_BUFGTRST_MASK_M_1_in = XPIPE_BUFGTRST_MASK_M_1;
  assign XPIPE_BUFGTRST_MASK_M_in = XPIPE_BUFGTRST_MASK_M;
  assign XPIPE_BUFGTRST_M_1_in = XPIPE_BUFGTRST_M_1;
  assign XPIPE_BUFGTRST_M_in = XPIPE_BUFGTRST_M;
  assign XPIPE_GT_OUTCLK_M_1_in = XPIPE_GT_OUTCLK_M_1;
  assign XPIPE_GT_OUTCLK_M_in = XPIPE_GT_OUTCLK_M;
  assign XPIPE_GT_RXOUTCLK_M_in = XPIPE_GT_RXOUTCLK_M;
  assign XPIPE_GT_RXUSRCLK_in = XPIPE_GT_RXUSRCLK;
  assign XPIPE_HSDP_RXDATAVALID_M_1_in = XPIPE_HSDP_RXDATAVALID_M_1;
  assign XPIPE_HSDP_RXDATAVALID_M_2_in = XPIPE_HSDP_RXDATAVALID_M_2;
  assign XPIPE_HSDP_RXDATAVALID_M_in = XPIPE_HSDP_RXDATAVALID_M;
  assign XPIPE_HSDP_RXGEARBOXSLIP_1_in = XPIPE_HSDP_RXGEARBOXSLIP_1;
  assign XPIPE_HSDP_RXGEARBOXSLIP_2_in = XPIPE_HSDP_RXGEARBOXSLIP_2;
  assign XPIPE_HSDP_RXGEARBOXSLIP_in = XPIPE_HSDP_RXGEARBOXSLIP;
  assign XPIPE_HSDP_RXHEADERVALID_M_1_in = XPIPE_HSDP_RXHEADERVALID_M_1;
  assign XPIPE_HSDP_RXHEADERVALID_M_2_in = XPIPE_HSDP_RXHEADERVALID_M_2;
  assign XPIPE_HSDP_RXHEADERVALID_M_in = XPIPE_HSDP_RXHEADERVALID_M;
  assign XPIPE_HSDP_RXHEADER_M_1_in = XPIPE_HSDP_RXHEADER_M_1;
  assign XPIPE_HSDP_RXHEADER_M_2_in = XPIPE_HSDP_RXHEADER_M_2;
  assign XPIPE_HSDP_RXHEADER_M_in = XPIPE_HSDP_RXHEADER_M;
  assign XPIPE_HSDP_RXPCSRESET_1_in = XPIPE_HSDP_RXPCSRESET_1;
  assign XPIPE_HSDP_RXPCSRESET_2_in = XPIPE_HSDP_RXPCSRESET_2;
  assign XPIPE_HSDP_RXPCSRESET_in = XPIPE_HSDP_RXPCSRESET;
  assign XPIPE_HSDP_RXRESETDONE_M_1_in = XPIPE_HSDP_RXRESETDONE_M_1;
  assign XPIPE_HSDP_RXRESETDONE_M_2_in = XPIPE_HSDP_RXRESETDONE_M_2;
  assign XPIPE_HSDP_RXRESETDONE_M_in = XPIPE_HSDP_RXRESETDONE_M;
  assign XPIPE_HSDP_TXHEADER_1_in = XPIPE_HSDP_TXHEADER_1;
  assign XPIPE_HSDP_TXHEADER_2_in = XPIPE_HSDP_TXHEADER_2;
  assign XPIPE_HSDP_TXHEADER_in = XPIPE_HSDP_TXHEADER;
  assign XPIPE_HSDP_TXRESETDONE_M_1_in = XPIPE_HSDP_TXRESETDONE_M_1;
  assign XPIPE_HSDP_TXRESETDONE_M_2_in = XPIPE_HSDP_TXRESETDONE_M_2;
  assign XPIPE_HSDP_TXRESETDONE_M_in = XPIPE_HSDP_TXRESETDONE_M;
  assign XPIPE_HSDP_TXSEQUENCE_1_in = XPIPE_HSDP_TXSEQUENCE_1;
  assign XPIPE_HSDP_TXSEQUENCE_2_in = XPIPE_HSDP_TXSEQUENCE_2;
  assign XPIPE_HSDP_TXSEQUENCE_in = XPIPE_HSDP_TXSEQUENCE;
  assign XPIPE_PCIELINKREACHTARGET_1_in = XPIPE_PCIELINKREACHTARGET_1;
  assign XPIPE_PCIELINKREACHTARGET_in = XPIPE_PCIELINKREACHTARGET;
  assign XPIPE_PCIELTSSMSTATE_1_in = XPIPE_PCIELTSSMSTATE_1;
  assign XPIPE_PCIELTSSMSTATE_in = XPIPE_PCIELTSSMSTATE;
  assign XPIPE_PCIE_PERST_N_1_in = XPIPE_PCIE_PERST_N_1;
  assign XPIPE_PCIE_PERST_N_in = XPIPE_PCIE_PERST_N;
  assign XPIPE_PCIE_RATE_1_in = XPIPE_PCIE_RATE_1;
  assign XPIPE_PCIE_RATE_in = XPIPE_PCIE_RATE;
  assign XPIPE_PHYESMADAPTSAVE_1_in = XPIPE_PHYESMADAPTSAVE_1;
  assign XPIPE_PHYESMADAPTSAVE_in = XPIPE_PHYESMADAPTSAVE;
  assign XPIPE_PHYREADY_FR_BOT_in = XPIPE_PHYREADY_FR_BOT;
  assign XPIPE_PHYREADY_TO_BOT_M_in = XPIPE_PHYREADY_TO_BOT_M;
  assign XPIPE_PHY_READY_M_1_in = XPIPE_PHY_READY_M_1;
  assign XPIPE_PHY_READY_M_in = XPIPE_PHY_READY_M;
  assign XPIPE_PIPE_CH0_PHYSTATUS_M_in = XPIPE_PIPE_CH0_PHYSTATUS_M;
  assign XPIPE_PIPE_CH0_POWERDOWN_in = XPIPE_PIPE_CH0_POWERDOWN;
  assign XPIPE_PIPE_CH0_RXCHARISK_M_in = XPIPE_PIPE_CH0_RXCHARISK_M;
  assign XPIPE_PIPE_CH0_RXDATAVALID_M_in = XPIPE_PIPE_CH0_RXDATAVALID_M;
  assign XPIPE_PIPE_CH0_RXDATA_M_in = XPIPE_PIPE_CH0_RXDATA_M;
  assign XPIPE_PIPE_CH0_RXELECIDLE_M_in = XPIPE_PIPE_CH0_RXELECIDLE_M;
  assign XPIPE_PIPE_CH0_RXPOLARITY_in = XPIPE_PIPE_CH0_RXPOLARITY;
  assign XPIPE_PIPE_CH0_RXSTARTBLOCK_M_in = XPIPE_PIPE_CH0_RXSTARTBLOCK_M;
  assign XPIPE_PIPE_CH0_RXSTATUS_M_in = XPIPE_PIPE_CH0_RXSTATUS_M;
  assign XPIPE_PIPE_CH0_RXSYNCHEADER_M_in = XPIPE_PIPE_CH0_RXSYNCHEADER_M;
  assign XPIPE_PIPE_CH0_RXTERMINATION_in = XPIPE_PIPE_CH0_RXTERMINATION;
  assign XPIPE_PIPE_CH0_RXVALID_M_in = XPIPE_PIPE_CH0_RXVALID_M;
  assign XPIPE_PIPE_CH0_TXCHARISK_in = XPIPE_PIPE_CH0_TXCHARISK;
  assign XPIPE_PIPE_CH0_TXCOMPLIANCE_in = XPIPE_PIPE_CH0_TXCOMPLIANCE;
  assign XPIPE_PIPE_CH0_TXDATAVALID_in = XPIPE_PIPE_CH0_TXDATAVALID;
  assign XPIPE_PIPE_CH0_TXDATA_in = XPIPE_PIPE_CH0_TXDATA;
  assign XPIPE_PIPE_CH0_TXDEEMPH_in = XPIPE_PIPE_CH0_TXDEEMPH;
  assign XPIPE_PIPE_CH0_TXDETECTRXLOOPBACK_in = XPIPE_PIPE_CH0_TXDETECTRXLOOPBACK;
  assign XPIPE_PIPE_CH0_TXELECIDLE_in = XPIPE_PIPE_CH0_TXELECIDLE;
  assign XPIPE_PIPE_CH0_TXMAINCURSOR_in = XPIPE_PIPE_CH0_TXMAINCURSOR;
  assign XPIPE_PIPE_CH0_TXMARGIN_in = XPIPE_PIPE_CH0_TXMARGIN;
  assign XPIPE_PIPE_CH0_TXPOSTCURSOR_in = XPIPE_PIPE_CH0_TXPOSTCURSOR;
  assign XPIPE_PIPE_CH0_TXPRECURSOR_in = XPIPE_PIPE_CH0_TXPRECURSOR;
  assign XPIPE_PIPE_CH0_TXSTARTBLOCK_in = XPIPE_PIPE_CH0_TXSTARTBLOCK;
  assign XPIPE_PIPE_CH0_TXSWING_in = XPIPE_PIPE_CH0_TXSWING;
  assign XPIPE_PIPE_CH0_TXSYNCHEADER_in = XPIPE_PIPE_CH0_TXSYNCHEADER;
  assign XPIPE_PIPE_CH10_PHYSTATUS_M_in = XPIPE_PIPE_CH10_PHYSTATUS_M;
  assign XPIPE_PIPE_CH10_POWERDOWN_in = XPIPE_PIPE_CH10_POWERDOWN;
  assign XPIPE_PIPE_CH10_RXCHARISK_M_in = XPIPE_PIPE_CH10_RXCHARISK_M;
  assign XPIPE_PIPE_CH10_RXDATAVALID_M_in = XPIPE_PIPE_CH10_RXDATAVALID_M;
  assign XPIPE_PIPE_CH10_RXDATA_M_in = XPIPE_PIPE_CH10_RXDATA_M;
  assign XPIPE_PIPE_CH10_RXELECIDLE_M_in = XPIPE_PIPE_CH10_RXELECIDLE_M;
  assign XPIPE_PIPE_CH10_RXPOLARITY_in = XPIPE_PIPE_CH10_RXPOLARITY;
  assign XPIPE_PIPE_CH10_RXSTARTBLOCK_M_in = XPIPE_PIPE_CH10_RXSTARTBLOCK_M;
  assign XPIPE_PIPE_CH10_RXSTATUS_M_in = XPIPE_PIPE_CH10_RXSTATUS_M;
  assign XPIPE_PIPE_CH10_RXSYNCHEADER_M_in = XPIPE_PIPE_CH10_RXSYNCHEADER_M;
  assign XPIPE_PIPE_CH10_RXTERMINATION_in = XPIPE_PIPE_CH10_RXTERMINATION;
  assign XPIPE_PIPE_CH10_RXVALID_M_in = XPIPE_PIPE_CH10_RXVALID_M;
  assign XPIPE_PIPE_CH10_TXCHARISK_in = XPIPE_PIPE_CH10_TXCHARISK;
  assign XPIPE_PIPE_CH10_TXCOMPLIANCE_in = XPIPE_PIPE_CH10_TXCOMPLIANCE;
  assign XPIPE_PIPE_CH10_TXDATAVALID_in = XPIPE_PIPE_CH10_TXDATAVALID;
  assign XPIPE_PIPE_CH10_TXDATA_in = XPIPE_PIPE_CH10_TXDATA;
  assign XPIPE_PIPE_CH10_TXDEEMPH_in = XPIPE_PIPE_CH10_TXDEEMPH;
  assign XPIPE_PIPE_CH10_TXDETECTRXLOOPBACK_in = XPIPE_PIPE_CH10_TXDETECTRXLOOPBACK;
  assign XPIPE_PIPE_CH10_TXELECIDLE_in = XPIPE_PIPE_CH10_TXELECIDLE;
  assign XPIPE_PIPE_CH10_TXMAINCURSOR_in = XPIPE_PIPE_CH10_TXMAINCURSOR;
  assign XPIPE_PIPE_CH10_TXMARGIN_in = XPIPE_PIPE_CH10_TXMARGIN;
  assign XPIPE_PIPE_CH10_TXPOSTCURSOR_in = XPIPE_PIPE_CH10_TXPOSTCURSOR;
  assign XPIPE_PIPE_CH10_TXPRECURSOR_in = XPIPE_PIPE_CH10_TXPRECURSOR;
  assign XPIPE_PIPE_CH10_TXSTARTBLOCK_in = XPIPE_PIPE_CH10_TXSTARTBLOCK;
  assign XPIPE_PIPE_CH10_TXSWING_in = XPIPE_PIPE_CH10_TXSWING;
  assign XPIPE_PIPE_CH10_TXSYNCHEADER_in = XPIPE_PIPE_CH10_TXSYNCHEADER;
  assign XPIPE_PIPE_CH11_PHYSTATUS_M_in = XPIPE_PIPE_CH11_PHYSTATUS_M;
  assign XPIPE_PIPE_CH11_POWERDOWN_in = XPIPE_PIPE_CH11_POWERDOWN;
  assign XPIPE_PIPE_CH11_RXCHARISK_M_in = XPIPE_PIPE_CH11_RXCHARISK_M;
  assign XPIPE_PIPE_CH11_RXDATAVALID_M_in = XPIPE_PIPE_CH11_RXDATAVALID_M;
  assign XPIPE_PIPE_CH11_RXDATA_M_in = XPIPE_PIPE_CH11_RXDATA_M;
  assign XPIPE_PIPE_CH11_RXELECIDLE_M_in = XPIPE_PIPE_CH11_RXELECIDLE_M;
  assign XPIPE_PIPE_CH11_RXPOLARITY_in = XPIPE_PIPE_CH11_RXPOLARITY;
  assign XPIPE_PIPE_CH11_RXSTARTBLOCK_M_in = XPIPE_PIPE_CH11_RXSTARTBLOCK_M;
  assign XPIPE_PIPE_CH11_RXSTATUS_M_in = XPIPE_PIPE_CH11_RXSTATUS_M;
  assign XPIPE_PIPE_CH11_RXSYNCHEADER_M_in = XPIPE_PIPE_CH11_RXSYNCHEADER_M;
  assign XPIPE_PIPE_CH11_RXTERMINATION_in = XPIPE_PIPE_CH11_RXTERMINATION;
  assign XPIPE_PIPE_CH11_RXVALID_M_in = XPIPE_PIPE_CH11_RXVALID_M;
  assign XPIPE_PIPE_CH11_TXCHARISK_in = XPIPE_PIPE_CH11_TXCHARISK;
  assign XPIPE_PIPE_CH11_TXCOMPLIANCE_in = XPIPE_PIPE_CH11_TXCOMPLIANCE;
  assign XPIPE_PIPE_CH11_TXDATAVALID_in = XPIPE_PIPE_CH11_TXDATAVALID;
  assign XPIPE_PIPE_CH11_TXDATA_in = XPIPE_PIPE_CH11_TXDATA;
  assign XPIPE_PIPE_CH11_TXDEEMPH_in = XPIPE_PIPE_CH11_TXDEEMPH;
  assign XPIPE_PIPE_CH11_TXDETECTRXLOOPBACK_in = XPIPE_PIPE_CH11_TXDETECTRXLOOPBACK;
  assign XPIPE_PIPE_CH11_TXELECIDLE_in = XPIPE_PIPE_CH11_TXELECIDLE;
  assign XPIPE_PIPE_CH11_TXMAINCURSOR_in = XPIPE_PIPE_CH11_TXMAINCURSOR;
  assign XPIPE_PIPE_CH11_TXMARGIN_in = XPIPE_PIPE_CH11_TXMARGIN;
  assign XPIPE_PIPE_CH11_TXPOSTCURSOR_in = XPIPE_PIPE_CH11_TXPOSTCURSOR;
  assign XPIPE_PIPE_CH11_TXPRECURSOR_in = XPIPE_PIPE_CH11_TXPRECURSOR;
  assign XPIPE_PIPE_CH11_TXSTARTBLOCK_in = XPIPE_PIPE_CH11_TXSTARTBLOCK;
  assign XPIPE_PIPE_CH11_TXSWING_in = XPIPE_PIPE_CH11_TXSWING;
  assign XPIPE_PIPE_CH11_TXSYNCHEADER_in = XPIPE_PIPE_CH11_TXSYNCHEADER;
  assign XPIPE_PIPE_CH12_PHYSTATUS_M_in = XPIPE_PIPE_CH12_PHYSTATUS_M;
  assign XPIPE_PIPE_CH12_POWERDOWN_in = XPIPE_PIPE_CH12_POWERDOWN;
  assign XPIPE_PIPE_CH12_RXCHARISK_M_in = XPIPE_PIPE_CH12_RXCHARISK_M;
  assign XPIPE_PIPE_CH12_RXDATAVALID_M_in = XPIPE_PIPE_CH12_RXDATAVALID_M;
  assign XPIPE_PIPE_CH12_RXDATA_M_in = XPIPE_PIPE_CH12_RXDATA_M;
  assign XPIPE_PIPE_CH12_RXELECIDLE_M_in = XPIPE_PIPE_CH12_RXELECIDLE_M;
  assign XPIPE_PIPE_CH12_RXPOLARITY_in = XPIPE_PIPE_CH12_RXPOLARITY;
  assign XPIPE_PIPE_CH12_RXSTARTBLOCK_M_in = XPIPE_PIPE_CH12_RXSTARTBLOCK_M;
  assign XPIPE_PIPE_CH12_RXSTATUS_M_in = XPIPE_PIPE_CH12_RXSTATUS_M;
  assign XPIPE_PIPE_CH12_RXSYNCHEADER_M_in = XPIPE_PIPE_CH12_RXSYNCHEADER_M;
  assign XPIPE_PIPE_CH12_RXTERMINATION_in = XPIPE_PIPE_CH12_RXTERMINATION;
  assign XPIPE_PIPE_CH12_RXVALID_M_in = XPIPE_PIPE_CH12_RXVALID_M;
  assign XPIPE_PIPE_CH12_TXCHARISK_in = XPIPE_PIPE_CH12_TXCHARISK;
  assign XPIPE_PIPE_CH12_TXCOMPLIANCE_in = XPIPE_PIPE_CH12_TXCOMPLIANCE;
  assign XPIPE_PIPE_CH12_TXDATAVALID_in = XPIPE_PIPE_CH12_TXDATAVALID;
  assign XPIPE_PIPE_CH12_TXDATA_in = XPIPE_PIPE_CH12_TXDATA;
  assign XPIPE_PIPE_CH12_TXDEEMPH_in = XPIPE_PIPE_CH12_TXDEEMPH;
  assign XPIPE_PIPE_CH12_TXDETECTRXLOOPBACK_in = XPIPE_PIPE_CH12_TXDETECTRXLOOPBACK;
  assign XPIPE_PIPE_CH12_TXELECIDLE_in = XPIPE_PIPE_CH12_TXELECIDLE;
  assign XPIPE_PIPE_CH12_TXMAINCURSOR_in = XPIPE_PIPE_CH12_TXMAINCURSOR;
  assign XPIPE_PIPE_CH12_TXMARGIN_in = XPIPE_PIPE_CH12_TXMARGIN;
  assign XPIPE_PIPE_CH12_TXPOSTCURSOR_in = XPIPE_PIPE_CH12_TXPOSTCURSOR;
  assign XPIPE_PIPE_CH12_TXPRECURSOR_in = XPIPE_PIPE_CH12_TXPRECURSOR;
  assign XPIPE_PIPE_CH12_TXSTARTBLOCK_in = XPIPE_PIPE_CH12_TXSTARTBLOCK;
  assign XPIPE_PIPE_CH12_TXSWING_in = XPIPE_PIPE_CH12_TXSWING;
  assign XPIPE_PIPE_CH12_TXSYNCHEADER_in = XPIPE_PIPE_CH12_TXSYNCHEADER;
  assign XPIPE_PIPE_CH13_PHYSTATUS_M_in = XPIPE_PIPE_CH13_PHYSTATUS_M;
  assign XPIPE_PIPE_CH13_POWERDOWN_in = XPIPE_PIPE_CH13_POWERDOWN;
  assign XPIPE_PIPE_CH13_RXCHARISK_M_in = XPIPE_PIPE_CH13_RXCHARISK_M;
  assign XPIPE_PIPE_CH13_RXDATAVALID_M_in = XPIPE_PIPE_CH13_RXDATAVALID_M;
  assign XPIPE_PIPE_CH13_RXDATA_M_in = XPIPE_PIPE_CH13_RXDATA_M;
  assign XPIPE_PIPE_CH13_RXELECIDLE_M_in = XPIPE_PIPE_CH13_RXELECIDLE_M;
  assign XPIPE_PIPE_CH13_RXPOLARITY_in = XPIPE_PIPE_CH13_RXPOLARITY;
  assign XPIPE_PIPE_CH13_RXSTARTBLOCK_M_in = XPIPE_PIPE_CH13_RXSTARTBLOCK_M;
  assign XPIPE_PIPE_CH13_RXSTATUS_M_in = XPIPE_PIPE_CH13_RXSTATUS_M;
  assign XPIPE_PIPE_CH13_RXSYNCHEADER_M_in = XPIPE_PIPE_CH13_RXSYNCHEADER_M;
  assign XPIPE_PIPE_CH13_RXTERMINATION_in = XPIPE_PIPE_CH13_RXTERMINATION;
  assign XPIPE_PIPE_CH13_RXVALID_M_in = XPIPE_PIPE_CH13_RXVALID_M;
  assign XPIPE_PIPE_CH13_TXCHARISK_in = XPIPE_PIPE_CH13_TXCHARISK;
  assign XPIPE_PIPE_CH13_TXCOMPLIANCE_in = XPIPE_PIPE_CH13_TXCOMPLIANCE;
  assign XPIPE_PIPE_CH13_TXDATAVALID_in = XPIPE_PIPE_CH13_TXDATAVALID;
  assign XPIPE_PIPE_CH13_TXDATA_in = XPIPE_PIPE_CH13_TXDATA;
  assign XPIPE_PIPE_CH13_TXDEEMPH_in = XPIPE_PIPE_CH13_TXDEEMPH;
  assign XPIPE_PIPE_CH13_TXDETECTRXLOOPBACK_in = XPIPE_PIPE_CH13_TXDETECTRXLOOPBACK;
  assign XPIPE_PIPE_CH13_TXELECIDLE_in = XPIPE_PIPE_CH13_TXELECIDLE;
  assign XPIPE_PIPE_CH13_TXMAINCURSOR_in = XPIPE_PIPE_CH13_TXMAINCURSOR;
  assign XPIPE_PIPE_CH13_TXMARGIN_in = XPIPE_PIPE_CH13_TXMARGIN;
  assign XPIPE_PIPE_CH13_TXPOSTCURSOR_in = XPIPE_PIPE_CH13_TXPOSTCURSOR;
  assign XPIPE_PIPE_CH13_TXPRECURSOR_in = XPIPE_PIPE_CH13_TXPRECURSOR;
  assign XPIPE_PIPE_CH13_TXSTARTBLOCK_in = XPIPE_PIPE_CH13_TXSTARTBLOCK;
  assign XPIPE_PIPE_CH13_TXSWING_in = XPIPE_PIPE_CH13_TXSWING;
  assign XPIPE_PIPE_CH13_TXSYNCHEADER_in = XPIPE_PIPE_CH13_TXSYNCHEADER;
  assign XPIPE_PIPE_CH14_PHYSTATUS_M_in = XPIPE_PIPE_CH14_PHYSTATUS_M;
  assign XPIPE_PIPE_CH14_POWERDOWN_in = XPIPE_PIPE_CH14_POWERDOWN;
  assign XPIPE_PIPE_CH14_RXCHARISK_M_in = XPIPE_PIPE_CH14_RXCHARISK_M;
  assign XPIPE_PIPE_CH14_RXDATAVALID_M_in = XPIPE_PIPE_CH14_RXDATAVALID_M;
  assign XPIPE_PIPE_CH14_RXDATA_M_in = XPIPE_PIPE_CH14_RXDATA_M;
  assign XPIPE_PIPE_CH14_RXELECIDLE_M_in = XPIPE_PIPE_CH14_RXELECIDLE_M;
  assign XPIPE_PIPE_CH14_RXPOLARITY_in = XPIPE_PIPE_CH14_RXPOLARITY;
  assign XPIPE_PIPE_CH14_RXSTARTBLOCK_M_in = XPIPE_PIPE_CH14_RXSTARTBLOCK_M;
  assign XPIPE_PIPE_CH14_RXSTATUS_M_in = XPIPE_PIPE_CH14_RXSTATUS_M;
  assign XPIPE_PIPE_CH14_RXSYNCHEADER_M_in = XPIPE_PIPE_CH14_RXSYNCHEADER_M;
  assign XPIPE_PIPE_CH14_RXTERMINATION_in = XPIPE_PIPE_CH14_RXTERMINATION;
  assign XPIPE_PIPE_CH14_RXVALID_M_in = XPIPE_PIPE_CH14_RXVALID_M;
  assign XPIPE_PIPE_CH14_TXCHARISK_in = XPIPE_PIPE_CH14_TXCHARISK;
  assign XPIPE_PIPE_CH14_TXCOMPLIANCE_in = XPIPE_PIPE_CH14_TXCOMPLIANCE;
  assign XPIPE_PIPE_CH14_TXDATAVALID_in = XPIPE_PIPE_CH14_TXDATAVALID;
  assign XPIPE_PIPE_CH14_TXDATA_in = XPIPE_PIPE_CH14_TXDATA;
  assign XPIPE_PIPE_CH14_TXDEEMPH_in = XPIPE_PIPE_CH14_TXDEEMPH;
  assign XPIPE_PIPE_CH14_TXDETECTRXLOOPBACK_in = XPIPE_PIPE_CH14_TXDETECTRXLOOPBACK;
  assign XPIPE_PIPE_CH14_TXELECIDLE_in = XPIPE_PIPE_CH14_TXELECIDLE;
  assign XPIPE_PIPE_CH14_TXMAINCURSOR_in = XPIPE_PIPE_CH14_TXMAINCURSOR;
  assign XPIPE_PIPE_CH14_TXMARGIN_in = XPIPE_PIPE_CH14_TXMARGIN;
  assign XPIPE_PIPE_CH14_TXPOSTCURSOR_in = XPIPE_PIPE_CH14_TXPOSTCURSOR;
  assign XPIPE_PIPE_CH14_TXPRECURSOR_in = XPIPE_PIPE_CH14_TXPRECURSOR;
  assign XPIPE_PIPE_CH14_TXSTARTBLOCK_in = XPIPE_PIPE_CH14_TXSTARTBLOCK;
  assign XPIPE_PIPE_CH14_TXSWING_in = XPIPE_PIPE_CH14_TXSWING;
  assign XPIPE_PIPE_CH14_TXSYNCHEADER_in = XPIPE_PIPE_CH14_TXSYNCHEADER;
  assign XPIPE_PIPE_CH15_PHYSTATUS_M_in = XPIPE_PIPE_CH15_PHYSTATUS_M;
  assign XPIPE_PIPE_CH15_POWERDOWN_in = XPIPE_PIPE_CH15_POWERDOWN;
  assign XPIPE_PIPE_CH15_RXCHARISK_M_in = XPIPE_PIPE_CH15_RXCHARISK_M;
  assign XPIPE_PIPE_CH15_RXDATAVALID_M_in = XPIPE_PIPE_CH15_RXDATAVALID_M;
  assign XPIPE_PIPE_CH15_RXDATA_M_in = XPIPE_PIPE_CH15_RXDATA_M;
  assign XPIPE_PIPE_CH15_RXELECIDLE_M_in = XPIPE_PIPE_CH15_RXELECIDLE_M;
  assign XPIPE_PIPE_CH15_RXPOLARITY_in = XPIPE_PIPE_CH15_RXPOLARITY;
  assign XPIPE_PIPE_CH15_RXSTARTBLOCK_M_in = XPIPE_PIPE_CH15_RXSTARTBLOCK_M;
  assign XPIPE_PIPE_CH15_RXSTATUS_M_in = XPIPE_PIPE_CH15_RXSTATUS_M;
  assign XPIPE_PIPE_CH15_RXSYNCHEADER_M_in = XPIPE_PIPE_CH15_RXSYNCHEADER_M;
  assign XPIPE_PIPE_CH15_RXTERMINATION_in = XPIPE_PIPE_CH15_RXTERMINATION;
  assign XPIPE_PIPE_CH15_RXVALID_M_in = XPIPE_PIPE_CH15_RXVALID_M;
  assign XPIPE_PIPE_CH15_TXCHARISK_in = XPIPE_PIPE_CH15_TXCHARISK;
  assign XPIPE_PIPE_CH15_TXCOMPLIANCE_in = XPIPE_PIPE_CH15_TXCOMPLIANCE;
  assign XPIPE_PIPE_CH15_TXDATAVALID_in = XPIPE_PIPE_CH15_TXDATAVALID;
  assign XPIPE_PIPE_CH15_TXDATA_in = XPIPE_PIPE_CH15_TXDATA;
  assign XPIPE_PIPE_CH15_TXDEEMPH_in = XPIPE_PIPE_CH15_TXDEEMPH;
  assign XPIPE_PIPE_CH15_TXDETECTRXLOOPBACK_in = XPIPE_PIPE_CH15_TXDETECTRXLOOPBACK;
  assign XPIPE_PIPE_CH15_TXELECIDLE_in = XPIPE_PIPE_CH15_TXELECIDLE;
  assign XPIPE_PIPE_CH15_TXMAINCURSOR_in = XPIPE_PIPE_CH15_TXMAINCURSOR;
  assign XPIPE_PIPE_CH15_TXMARGIN_in = XPIPE_PIPE_CH15_TXMARGIN;
  assign XPIPE_PIPE_CH15_TXPOSTCURSOR_in = XPIPE_PIPE_CH15_TXPOSTCURSOR;
  assign XPIPE_PIPE_CH15_TXPRECURSOR_in = XPIPE_PIPE_CH15_TXPRECURSOR;
  assign XPIPE_PIPE_CH15_TXSTARTBLOCK_in = XPIPE_PIPE_CH15_TXSTARTBLOCK;
  assign XPIPE_PIPE_CH15_TXSWING_in = XPIPE_PIPE_CH15_TXSWING;
  assign XPIPE_PIPE_CH15_TXSYNCHEADER_in = XPIPE_PIPE_CH15_TXSYNCHEADER;
  assign XPIPE_PIPE_CH1_PHYSTATUS_M_in = XPIPE_PIPE_CH1_PHYSTATUS_M;
  assign XPIPE_PIPE_CH1_POWERDOWN_in = XPIPE_PIPE_CH1_POWERDOWN;
  assign XPIPE_PIPE_CH1_RXCHARISK_M_in = XPIPE_PIPE_CH1_RXCHARISK_M;
  assign XPIPE_PIPE_CH1_RXDATAVALID_M_in = XPIPE_PIPE_CH1_RXDATAVALID_M;
  assign XPIPE_PIPE_CH1_RXDATA_M_in = XPIPE_PIPE_CH1_RXDATA_M;
  assign XPIPE_PIPE_CH1_RXELECIDLE_M_in = XPIPE_PIPE_CH1_RXELECIDLE_M;
  assign XPIPE_PIPE_CH1_RXPOLARITY_in = XPIPE_PIPE_CH1_RXPOLARITY;
  assign XPIPE_PIPE_CH1_RXSTARTBLOCK_M_in = XPIPE_PIPE_CH1_RXSTARTBLOCK_M;
  assign XPIPE_PIPE_CH1_RXSTATUS_M_in = XPIPE_PIPE_CH1_RXSTATUS_M;
  assign XPIPE_PIPE_CH1_RXSYNCHEADER_M_in = XPIPE_PIPE_CH1_RXSYNCHEADER_M;
  assign XPIPE_PIPE_CH1_RXTERMINATION_in = XPIPE_PIPE_CH1_RXTERMINATION;
  assign XPIPE_PIPE_CH1_RXVALID_M_in = XPIPE_PIPE_CH1_RXVALID_M;
  assign XPIPE_PIPE_CH1_TXCHARISK_in = XPIPE_PIPE_CH1_TXCHARISK;
  assign XPIPE_PIPE_CH1_TXCOMPLIANCE_in = XPIPE_PIPE_CH1_TXCOMPLIANCE;
  assign XPIPE_PIPE_CH1_TXDATAVALID_in = XPIPE_PIPE_CH1_TXDATAVALID;
  assign XPIPE_PIPE_CH1_TXDATA_in = XPIPE_PIPE_CH1_TXDATA;
  assign XPIPE_PIPE_CH1_TXDEEMPH_in = XPIPE_PIPE_CH1_TXDEEMPH;
  assign XPIPE_PIPE_CH1_TXDETECTRXLOOPBACK_in = XPIPE_PIPE_CH1_TXDETECTRXLOOPBACK;
  assign XPIPE_PIPE_CH1_TXELECIDLE_in = XPIPE_PIPE_CH1_TXELECIDLE;
  assign XPIPE_PIPE_CH1_TXMAINCURSOR_in = XPIPE_PIPE_CH1_TXMAINCURSOR;
  assign XPIPE_PIPE_CH1_TXMARGIN_in = XPIPE_PIPE_CH1_TXMARGIN;
  assign XPIPE_PIPE_CH1_TXPOSTCURSOR_in = XPIPE_PIPE_CH1_TXPOSTCURSOR;
  assign XPIPE_PIPE_CH1_TXPRECURSOR_in = XPIPE_PIPE_CH1_TXPRECURSOR;
  assign XPIPE_PIPE_CH1_TXSTARTBLOCK_in = XPIPE_PIPE_CH1_TXSTARTBLOCK;
  assign XPIPE_PIPE_CH1_TXSWING_in = XPIPE_PIPE_CH1_TXSWING;
  assign XPIPE_PIPE_CH1_TXSYNCHEADER_in = XPIPE_PIPE_CH1_TXSYNCHEADER;
  assign XPIPE_PIPE_CH2_PHYSTATUS_M_in = XPIPE_PIPE_CH2_PHYSTATUS_M;
  assign XPIPE_PIPE_CH2_POWERDOWN_in = XPIPE_PIPE_CH2_POWERDOWN;
  assign XPIPE_PIPE_CH2_RXCHARISK_M_in = XPIPE_PIPE_CH2_RXCHARISK_M;
  assign XPIPE_PIPE_CH2_RXDATAVALID_M_in = XPIPE_PIPE_CH2_RXDATAVALID_M;
  assign XPIPE_PIPE_CH2_RXDATA_M_in = XPIPE_PIPE_CH2_RXDATA_M;
  assign XPIPE_PIPE_CH2_RXELECIDLE_M_in = XPIPE_PIPE_CH2_RXELECIDLE_M;
  assign XPIPE_PIPE_CH2_RXPOLARITY_in = XPIPE_PIPE_CH2_RXPOLARITY;
  assign XPIPE_PIPE_CH2_RXSTARTBLOCK_M_in = XPIPE_PIPE_CH2_RXSTARTBLOCK_M;
  assign XPIPE_PIPE_CH2_RXSTATUS_M_in = XPIPE_PIPE_CH2_RXSTATUS_M;
  assign XPIPE_PIPE_CH2_RXSYNCHEADER_M_in = XPIPE_PIPE_CH2_RXSYNCHEADER_M;
  assign XPIPE_PIPE_CH2_RXTERMINATION_in = XPIPE_PIPE_CH2_RXTERMINATION;
  assign XPIPE_PIPE_CH2_RXVALID_M_in = XPIPE_PIPE_CH2_RXVALID_M;
  assign XPIPE_PIPE_CH2_TXCHARISK_in = XPIPE_PIPE_CH2_TXCHARISK;
  assign XPIPE_PIPE_CH2_TXCOMPLIANCE_in = XPIPE_PIPE_CH2_TXCOMPLIANCE;
  assign XPIPE_PIPE_CH2_TXDATAVALID_in = XPIPE_PIPE_CH2_TXDATAVALID;
  assign XPIPE_PIPE_CH2_TXDATA_in = XPIPE_PIPE_CH2_TXDATA;
  assign XPIPE_PIPE_CH2_TXDEEMPH_in = XPIPE_PIPE_CH2_TXDEEMPH;
  assign XPIPE_PIPE_CH2_TXDETECTRXLOOPBACK_in = XPIPE_PIPE_CH2_TXDETECTRXLOOPBACK;
  assign XPIPE_PIPE_CH2_TXELECIDLE_in = XPIPE_PIPE_CH2_TXELECIDLE;
  assign XPIPE_PIPE_CH2_TXMAINCURSOR_in = XPIPE_PIPE_CH2_TXMAINCURSOR;
  assign XPIPE_PIPE_CH2_TXMARGIN_in = XPIPE_PIPE_CH2_TXMARGIN;
  assign XPIPE_PIPE_CH2_TXPOSTCURSOR_in = XPIPE_PIPE_CH2_TXPOSTCURSOR;
  assign XPIPE_PIPE_CH2_TXPRECURSOR_in = XPIPE_PIPE_CH2_TXPRECURSOR;
  assign XPIPE_PIPE_CH2_TXSTARTBLOCK_in = XPIPE_PIPE_CH2_TXSTARTBLOCK;
  assign XPIPE_PIPE_CH2_TXSWING_in = XPIPE_PIPE_CH2_TXSWING;
  assign XPIPE_PIPE_CH2_TXSYNCHEADER_in = XPIPE_PIPE_CH2_TXSYNCHEADER;
  assign XPIPE_PIPE_CH3_PHYSTATUS_M_in = XPIPE_PIPE_CH3_PHYSTATUS_M;
  assign XPIPE_PIPE_CH3_POWERDOWN_in = XPIPE_PIPE_CH3_POWERDOWN;
  assign XPIPE_PIPE_CH3_RXCHARISK_M_in = XPIPE_PIPE_CH3_RXCHARISK_M;
  assign XPIPE_PIPE_CH3_RXDATAVALID_M_in = XPIPE_PIPE_CH3_RXDATAVALID_M;
  assign XPIPE_PIPE_CH3_RXDATA_M_in = XPIPE_PIPE_CH3_RXDATA_M;
  assign XPIPE_PIPE_CH3_RXELECIDLE_M_in = XPIPE_PIPE_CH3_RXELECIDLE_M;
  assign XPIPE_PIPE_CH3_RXPOLARITY_in = XPIPE_PIPE_CH3_RXPOLARITY;
  assign XPIPE_PIPE_CH3_RXSTARTBLOCK_M_in = XPIPE_PIPE_CH3_RXSTARTBLOCK_M;
  assign XPIPE_PIPE_CH3_RXSTATUS_M_in = XPIPE_PIPE_CH3_RXSTATUS_M;
  assign XPIPE_PIPE_CH3_RXSYNCHEADER_M_in = XPIPE_PIPE_CH3_RXSYNCHEADER_M;
  assign XPIPE_PIPE_CH3_RXTERMINATION_in = XPIPE_PIPE_CH3_RXTERMINATION;
  assign XPIPE_PIPE_CH3_RXVALID_M_in = XPIPE_PIPE_CH3_RXVALID_M;
  assign XPIPE_PIPE_CH3_TXCHARISK_in = XPIPE_PIPE_CH3_TXCHARISK;
  assign XPIPE_PIPE_CH3_TXCOMPLIANCE_in = XPIPE_PIPE_CH3_TXCOMPLIANCE;
  assign XPIPE_PIPE_CH3_TXDATAVALID_in = XPIPE_PIPE_CH3_TXDATAVALID;
  assign XPIPE_PIPE_CH3_TXDATA_in = XPIPE_PIPE_CH3_TXDATA;
  assign XPIPE_PIPE_CH3_TXDEEMPH_in = XPIPE_PIPE_CH3_TXDEEMPH;
  assign XPIPE_PIPE_CH3_TXDETECTRXLOOPBACK_in = XPIPE_PIPE_CH3_TXDETECTRXLOOPBACK;
  assign XPIPE_PIPE_CH3_TXELECIDLE_in = XPIPE_PIPE_CH3_TXELECIDLE;
  assign XPIPE_PIPE_CH3_TXMAINCURSOR_in = XPIPE_PIPE_CH3_TXMAINCURSOR;
  assign XPIPE_PIPE_CH3_TXMARGIN_in = XPIPE_PIPE_CH3_TXMARGIN;
  assign XPIPE_PIPE_CH3_TXPOSTCURSOR_in = XPIPE_PIPE_CH3_TXPOSTCURSOR;
  assign XPIPE_PIPE_CH3_TXPRECURSOR_in = XPIPE_PIPE_CH3_TXPRECURSOR;
  assign XPIPE_PIPE_CH3_TXSTARTBLOCK_in = XPIPE_PIPE_CH3_TXSTARTBLOCK;
  assign XPIPE_PIPE_CH3_TXSWING_in = XPIPE_PIPE_CH3_TXSWING;
  assign XPIPE_PIPE_CH3_TXSYNCHEADER_in = XPIPE_PIPE_CH3_TXSYNCHEADER;
  assign XPIPE_PIPE_CH4_PHYSTATUS_M_in = XPIPE_PIPE_CH4_PHYSTATUS_M;
  assign XPIPE_PIPE_CH4_POWERDOWN_in = XPIPE_PIPE_CH4_POWERDOWN;
  assign XPIPE_PIPE_CH4_RXCHARISK_M_in = XPIPE_PIPE_CH4_RXCHARISK_M;
  assign XPIPE_PIPE_CH4_RXDATAVALID_M_in = XPIPE_PIPE_CH4_RXDATAVALID_M;
  assign XPIPE_PIPE_CH4_RXDATA_M_in = XPIPE_PIPE_CH4_RXDATA_M;
  assign XPIPE_PIPE_CH4_RXELECIDLE_M_in = XPIPE_PIPE_CH4_RXELECIDLE_M;
  assign XPIPE_PIPE_CH4_RXPOLARITY_in = XPIPE_PIPE_CH4_RXPOLARITY;
  assign XPIPE_PIPE_CH4_RXSTARTBLOCK_M_in = XPIPE_PIPE_CH4_RXSTARTBLOCK_M;
  assign XPIPE_PIPE_CH4_RXSTATUS_M_in = XPIPE_PIPE_CH4_RXSTATUS_M;
  assign XPIPE_PIPE_CH4_RXSYNCHEADER_M_in = XPIPE_PIPE_CH4_RXSYNCHEADER_M;
  assign XPIPE_PIPE_CH4_RXTERMINATION_in = XPIPE_PIPE_CH4_RXTERMINATION;
  assign XPIPE_PIPE_CH4_RXVALID_M_in = XPIPE_PIPE_CH4_RXVALID_M;
  assign XPIPE_PIPE_CH4_TXCHARISK_in = XPIPE_PIPE_CH4_TXCHARISK;
  assign XPIPE_PIPE_CH4_TXCOMPLIANCE_in = XPIPE_PIPE_CH4_TXCOMPLIANCE;
  assign XPIPE_PIPE_CH4_TXDATAVALID_in = XPIPE_PIPE_CH4_TXDATAVALID;
  assign XPIPE_PIPE_CH4_TXDATA_in = XPIPE_PIPE_CH4_TXDATA;
  assign XPIPE_PIPE_CH4_TXDEEMPH_in = XPIPE_PIPE_CH4_TXDEEMPH;
  assign XPIPE_PIPE_CH4_TXDETECTRXLOOPBACK_in = XPIPE_PIPE_CH4_TXDETECTRXLOOPBACK;
  assign XPIPE_PIPE_CH4_TXELECIDLE_in = XPIPE_PIPE_CH4_TXELECIDLE;
  assign XPIPE_PIPE_CH4_TXMAINCURSOR_in = XPIPE_PIPE_CH4_TXMAINCURSOR;
  assign XPIPE_PIPE_CH4_TXMARGIN_in = XPIPE_PIPE_CH4_TXMARGIN;
  assign XPIPE_PIPE_CH4_TXPOSTCURSOR_in = XPIPE_PIPE_CH4_TXPOSTCURSOR;
  assign XPIPE_PIPE_CH4_TXPRECURSOR_in = XPIPE_PIPE_CH4_TXPRECURSOR;
  assign XPIPE_PIPE_CH4_TXSTARTBLOCK_in = XPIPE_PIPE_CH4_TXSTARTBLOCK;
  assign XPIPE_PIPE_CH4_TXSWING_in = XPIPE_PIPE_CH4_TXSWING;
  assign XPIPE_PIPE_CH4_TXSYNCHEADER_in = XPIPE_PIPE_CH4_TXSYNCHEADER;
  assign XPIPE_PIPE_CH5_PHYSTATUS_M_in = XPIPE_PIPE_CH5_PHYSTATUS_M;
  assign XPIPE_PIPE_CH5_POWERDOWN_in = XPIPE_PIPE_CH5_POWERDOWN;
  assign XPIPE_PIPE_CH5_RXCHARISK_M_in = XPIPE_PIPE_CH5_RXCHARISK_M;
  assign XPIPE_PIPE_CH5_RXDATAVALID_M_in = XPIPE_PIPE_CH5_RXDATAVALID_M;
  assign XPIPE_PIPE_CH5_RXDATA_M_in = XPIPE_PIPE_CH5_RXDATA_M;
  assign XPIPE_PIPE_CH5_RXELECIDLE_M_in = XPIPE_PIPE_CH5_RXELECIDLE_M;
  assign XPIPE_PIPE_CH5_RXPOLARITY_in = XPIPE_PIPE_CH5_RXPOLARITY;
  assign XPIPE_PIPE_CH5_RXSTARTBLOCK_M_in = XPIPE_PIPE_CH5_RXSTARTBLOCK_M;
  assign XPIPE_PIPE_CH5_RXSTATUS_M_in = XPIPE_PIPE_CH5_RXSTATUS_M;
  assign XPIPE_PIPE_CH5_RXSYNCHEADER_M_in = XPIPE_PIPE_CH5_RXSYNCHEADER_M;
  assign XPIPE_PIPE_CH5_RXTERMINATION_in = XPIPE_PIPE_CH5_RXTERMINATION;
  assign XPIPE_PIPE_CH5_RXVALID_M_in = XPIPE_PIPE_CH5_RXVALID_M;
  assign XPIPE_PIPE_CH5_TXCHARISK_in = XPIPE_PIPE_CH5_TXCHARISK;
  assign XPIPE_PIPE_CH5_TXCOMPLIANCE_in = XPIPE_PIPE_CH5_TXCOMPLIANCE;
  assign XPIPE_PIPE_CH5_TXDATAVALID_in = XPIPE_PIPE_CH5_TXDATAVALID;
  assign XPIPE_PIPE_CH5_TXDATA_in = XPIPE_PIPE_CH5_TXDATA;
  assign XPIPE_PIPE_CH5_TXDEEMPH_in = XPIPE_PIPE_CH5_TXDEEMPH;
  assign XPIPE_PIPE_CH5_TXDETECTRXLOOPBACK_in = XPIPE_PIPE_CH5_TXDETECTRXLOOPBACK;
  assign XPIPE_PIPE_CH5_TXELECIDLE_in = XPIPE_PIPE_CH5_TXELECIDLE;
  assign XPIPE_PIPE_CH5_TXMAINCURSOR_in = XPIPE_PIPE_CH5_TXMAINCURSOR;
  assign XPIPE_PIPE_CH5_TXMARGIN_in = XPIPE_PIPE_CH5_TXMARGIN;
  assign XPIPE_PIPE_CH5_TXPOSTCURSOR_in = XPIPE_PIPE_CH5_TXPOSTCURSOR;
  assign XPIPE_PIPE_CH5_TXPRECURSOR_in = XPIPE_PIPE_CH5_TXPRECURSOR;
  assign XPIPE_PIPE_CH5_TXSTARTBLOCK_in = XPIPE_PIPE_CH5_TXSTARTBLOCK;
  assign XPIPE_PIPE_CH5_TXSWING_in = XPIPE_PIPE_CH5_TXSWING;
  assign XPIPE_PIPE_CH5_TXSYNCHEADER_in = XPIPE_PIPE_CH5_TXSYNCHEADER;
  assign XPIPE_PIPE_CH6_PHYSTATUS_M_in = XPIPE_PIPE_CH6_PHYSTATUS_M;
  assign XPIPE_PIPE_CH6_POWERDOWN_in = XPIPE_PIPE_CH6_POWERDOWN;
  assign XPIPE_PIPE_CH6_RXCHARISK_M_in = XPIPE_PIPE_CH6_RXCHARISK_M;
  assign XPIPE_PIPE_CH6_RXDATAVALID_M_in = XPIPE_PIPE_CH6_RXDATAVALID_M;
  assign XPIPE_PIPE_CH6_RXDATA_M_in = XPIPE_PIPE_CH6_RXDATA_M;
  assign XPIPE_PIPE_CH6_RXELECIDLE_M_in = XPIPE_PIPE_CH6_RXELECIDLE_M;
  assign XPIPE_PIPE_CH6_RXPOLARITY_in = XPIPE_PIPE_CH6_RXPOLARITY;
  assign XPIPE_PIPE_CH6_RXSTARTBLOCK_M_in = XPIPE_PIPE_CH6_RXSTARTBLOCK_M;
  assign XPIPE_PIPE_CH6_RXSTATUS_M_in = XPIPE_PIPE_CH6_RXSTATUS_M;
  assign XPIPE_PIPE_CH6_RXSYNCHEADER_M_in = XPIPE_PIPE_CH6_RXSYNCHEADER_M;
  assign XPIPE_PIPE_CH6_RXTERMINATION_in = XPIPE_PIPE_CH6_RXTERMINATION;
  assign XPIPE_PIPE_CH6_RXVALID_M_in = XPIPE_PIPE_CH6_RXVALID_M;
  assign XPIPE_PIPE_CH6_TXCHARISK_in = XPIPE_PIPE_CH6_TXCHARISK;
  assign XPIPE_PIPE_CH6_TXCOMPLIANCE_in = XPIPE_PIPE_CH6_TXCOMPLIANCE;
  assign XPIPE_PIPE_CH6_TXDATAVALID_in = XPIPE_PIPE_CH6_TXDATAVALID;
  assign XPIPE_PIPE_CH6_TXDATA_in = XPIPE_PIPE_CH6_TXDATA;
  assign XPIPE_PIPE_CH6_TXDEEMPH_in = XPIPE_PIPE_CH6_TXDEEMPH;
  assign XPIPE_PIPE_CH6_TXDETECTRXLOOPBACK_in = XPIPE_PIPE_CH6_TXDETECTRXLOOPBACK;
  assign XPIPE_PIPE_CH6_TXELECIDLE_in = XPIPE_PIPE_CH6_TXELECIDLE;
  assign XPIPE_PIPE_CH6_TXMAINCURSOR_in = XPIPE_PIPE_CH6_TXMAINCURSOR;
  assign XPIPE_PIPE_CH6_TXMARGIN_in = XPIPE_PIPE_CH6_TXMARGIN;
  assign XPIPE_PIPE_CH6_TXPOSTCURSOR_in = XPIPE_PIPE_CH6_TXPOSTCURSOR;
  assign XPIPE_PIPE_CH6_TXPRECURSOR_in = XPIPE_PIPE_CH6_TXPRECURSOR;
  assign XPIPE_PIPE_CH6_TXSTARTBLOCK_in = XPIPE_PIPE_CH6_TXSTARTBLOCK;
  assign XPIPE_PIPE_CH6_TXSWING_in = XPIPE_PIPE_CH6_TXSWING;
  assign XPIPE_PIPE_CH6_TXSYNCHEADER_in = XPIPE_PIPE_CH6_TXSYNCHEADER;
  assign XPIPE_PIPE_CH7_PHYSTATUS_M_in = XPIPE_PIPE_CH7_PHYSTATUS_M;
  assign XPIPE_PIPE_CH7_POWERDOWN_in = XPIPE_PIPE_CH7_POWERDOWN;
  assign XPIPE_PIPE_CH7_RXCHARISK_M_in = XPIPE_PIPE_CH7_RXCHARISK_M;
  assign XPIPE_PIPE_CH7_RXDATAVALID_M_in = XPIPE_PIPE_CH7_RXDATAVALID_M;
  assign XPIPE_PIPE_CH7_RXDATA_M_in = XPIPE_PIPE_CH7_RXDATA_M;
  assign XPIPE_PIPE_CH7_RXELECIDLE_M_in = XPIPE_PIPE_CH7_RXELECIDLE_M;
  assign XPIPE_PIPE_CH7_RXPOLARITY_in = XPIPE_PIPE_CH7_RXPOLARITY;
  assign XPIPE_PIPE_CH7_RXSTARTBLOCK_M_in = XPIPE_PIPE_CH7_RXSTARTBLOCK_M;
  assign XPIPE_PIPE_CH7_RXSTATUS_M_in = XPIPE_PIPE_CH7_RXSTATUS_M;
  assign XPIPE_PIPE_CH7_RXSYNCHEADER_M_in = XPIPE_PIPE_CH7_RXSYNCHEADER_M;
  assign XPIPE_PIPE_CH7_RXTERMINATION_in = XPIPE_PIPE_CH7_RXTERMINATION;
  assign XPIPE_PIPE_CH7_RXVALID_M_in = XPIPE_PIPE_CH7_RXVALID_M;
  assign XPIPE_PIPE_CH7_TXCHARISK_in = XPIPE_PIPE_CH7_TXCHARISK;
  assign XPIPE_PIPE_CH7_TXCOMPLIANCE_in = XPIPE_PIPE_CH7_TXCOMPLIANCE;
  assign XPIPE_PIPE_CH7_TXDATAVALID_in = XPIPE_PIPE_CH7_TXDATAVALID;
  assign XPIPE_PIPE_CH7_TXDATA_in = XPIPE_PIPE_CH7_TXDATA;
  assign XPIPE_PIPE_CH7_TXDEEMPH_in = XPIPE_PIPE_CH7_TXDEEMPH;
  assign XPIPE_PIPE_CH7_TXDETECTRXLOOPBACK_in = XPIPE_PIPE_CH7_TXDETECTRXLOOPBACK;
  assign XPIPE_PIPE_CH7_TXELECIDLE_in = XPIPE_PIPE_CH7_TXELECIDLE;
  assign XPIPE_PIPE_CH7_TXMAINCURSOR_in = XPIPE_PIPE_CH7_TXMAINCURSOR;
  assign XPIPE_PIPE_CH7_TXMARGIN_in = XPIPE_PIPE_CH7_TXMARGIN;
  assign XPIPE_PIPE_CH7_TXPOSTCURSOR_in = XPIPE_PIPE_CH7_TXPOSTCURSOR;
  assign XPIPE_PIPE_CH7_TXPRECURSOR_in = XPIPE_PIPE_CH7_TXPRECURSOR;
  assign XPIPE_PIPE_CH7_TXSTARTBLOCK_in = XPIPE_PIPE_CH7_TXSTARTBLOCK;
  assign XPIPE_PIPE_CH7_TXSWING_in = XPIPE_PIPE_CH7_TXSWING;
  assign XPIPE_PIPE_CH7_TXSYNCHEADER_in = XPIPE_PIPE_CH7_TXSYNCHEADER;
  assign XPIPE_PIPE_CH8_PHYSTATUS_M_in = XPIPE_PIPE_CH8_PHYSTATUS_M;
  assign XPIPE_PIPE_CH8_POWERDOWN_in = XPIPE_PIPE_CH8_POWERDOWN;
  assign XPIPE_PIPE_CH8_RXCHARISK_M_in = XPIPE_PIPE_CH8_RXCHARISK_M;
  assign XPIPE_PIPE_CH8_RXDATAVALID_M_in = XPIPE_PIPE_CH8_RXDATAVALID_M;
  assign XPIPE_PIPE_CH8_RXDATA_M_in = XPIPE_PIPE_CH8_RXDATA_M;
  assign XPIPE_PIPE_CH8_RXELECIDLE_M_in = XPIPE_PIPE_CH8_RXELECIDLE_M;
  assign XPIPE_PIPE_CH8_RXPOLARITY_in = XPIPE_PIPE_CH8_RXPOLARITY;
  assign XPIPE_PIPE_CH8_RXSTARTBLOCK_M_in = XPIPE_PIPE_CH8_RXSTARTBLOCK_M;
  assign XPIPE_PIPE_CH8_RXSTATUS_M_in = XPIPE_PIPE_CH8_RXSTATUS_M;
  assign XPIPE_PIPE_CH8_RXSYNCHEADER_M_in = XPIPE_PIPE_CH8_RXSYNCHEADER_M;
  assign XPIPE_PIPE_CH8_RXTERMINATION_in = XPIPE_PIPE_CH8_RXTERMINATION;
  assign XPIPE_PIPE_CH8_RXVALID_M_in = XPIPE_PIPE_CH8_RXVALID_M;
  assign XPIPE_PIPE_CH8_TXCHARISK_in = XPIPE_PIPE_CH8_TXCHARISK;
  assign XPIPE_PIPE_CH8_TXCOMPLIANCE_in = XPIPE_PIPE_CH8_TXCOMPLIANCE;
  assign XPIPE_PIPE_CH8_TXDATAVALID_in = XPIPE_PIPE_CH8_TXDATAVALID;
  assign XPIPE_PIPE_CH8_TXDATA_in = XPIPE_PIPE_CH8_TXDATA;
  assign XPIPE_PIPE_CH8_TXDEEMPH_in = XPIPE_PIPE_CH8_TXDEEMPH;
  assign XPIPE_PIPE_CH8_TXDETECTRXLOOPBACK_in = XPIPE_PIPE_CH8_TXDETECTRXLOOPBACK;
  assign XPIPE_PIPE_CH8_TXELECIDLE_in = XPIPE_PIPE_CH8_TXELECIDLE;
  assign XPIPE_PIPE_CH8_TXMAINCURSOR_in = XPIPE_PIPE_CH8_TXMAINCURSOR;
  assign XPIPE_PIPE_CH8_TXMARGIN_in = XPIPE_PIPE_CH8_TXMARGIN;
  assign XPIPE_PIPE_CH8_TXPOSTCURSOR_in = XPIPE_PIPE_CH8_TXPOSTCURSOR;
  assign XPIPE_PIPE_CH8_TXPRECURSOR_in = XPIPE_PIPE_CH8_TXPRECURSOR;
  assign XPIPE_PIPE_CH8_TXSTARTBLOCK_in = XPIPE_PIPE_CH8_TXSTARTBLOCK;
  assign XPIPE_PIPE_CH8_TXSWING_in = XPIPE_PIPE_CH8_TXSWING;
  assign XPIPE_PIPE_CH8_TXSYNCHEADER_in = XPIPE_PIPE_CH8_TXSYNCHEADER;
  assign XPIPE_PIPE_CH9_PHYSTATUS_M_in = XPIPE_PIPE_CH9_PHYSTATUS_M;
  assign XPIPE_PIPE_CH9_POWERDOWN_in = XPIPE_PIPE_CH9_POWERDOWN;
  assign XPIPE_PIPE_CH9_RXCHARISK_M_in = XPIPE_PIPE_CH9_RXCHARISK_M;
  assign XPIPE_PIPE_CH9_RXDATAVALID_M_in = XPIPE_PIPE_CH9_RXDATAVALID_M;
  assign XPIPE_PIPE_CH9_RXDATA_M_in = XPIPE_PIPE_CH9_RXDATA_M;
  assign XPIPE_PIPE_CH9_RXELECIDLE_M_in = XPIPE_PIPE_CH9_RXELECIDLE_M;
  assign XPIPE_PIPE_CH9_RXPOLARITY_in = XPIPE_PIPE_CH9_RXPOLARITY;
  assign XPIPE_PIPE_CH9_RXSTARTBLOCK_M_in = XPIPE_PIPE_CH9_RXSTARTBLOCK_M;
  assign XPIPE_PIPE_CH9_RXSTATUS_M_in = XPIPE_PIPE_CH9_RXSTATUS_M;
  assign XPIPE_PIPE_CH9_RXSYNCHEADER_M_in = XPIPE_PIPE_CH9_RXSYNCHEADER_M;
  assign XPIPE_PIPE_CH9_RXTERMINATION_in = XPIPE_PIPE_CH9_RXTERMINATION;
  assign XPIPE_PIPE_CH9_RXVALID_M_in = XPIPE_PIPE_CH9_RXVALID_M;
  assign XPIPE_PIPE_CH9_TXCHARISK_in = XPIPE_PIPE_CH9_TXCHARISK;
  assign XPIPE_PIPE_CH9_TXCOMPLIANCE_in = XPIPE_PIPE_CH9_TXCOMPLIANCE;
  assign XPIPE_PIPE_CH9_TXDATAVALID_in = XPIPE_PIPE_CH9_TXDATAVALID;
  assign XPIPE_PIPE_CH9_TXDATA_in = XPIPE_PIPE_CH9_TXDATA;
  assign XPIPE_PIPE_CH9_TXDEEMPH_in = XPIPE_PIPE_CH9_TXDEEMPH;
  assign XPIPE_PIPE_CH9_TXDETECTRXLOOPBACK_in = XPIPE_PIPE_CH9_TXDETECTRXLOOPBACK;
  assign XPIPE_PIPE_CH9_TXELECIDLE_in = XPIPE_PIPE_CH9_TXELECIDLE;
  assign XPIPE_PIPE_CH9_TXMAINCURSOR_in = XPIPE_PIPE_CH9_TXMAINCURSOR;
  assign XPIPE_PIPE_CH9_TXMARGIN_in = XPIPE_PIPE_CH9_TXMARGIN;
  assign XPIPE_PIPE_CH9_TXPOSTCURSOR_in = XPIPE_PIPE_CH9_TXPOSTCURSOR;
  assign XPIPE_PIPE_CH9_TXPRECURSOR_in = XPIPE_PIPE_CH9_TXPRECURSOR;
  assign XPIPE_PIPE_CH9_TXSTARTBLOCK_in = XPIPE_PIPE_CH9_TXSTARTBLOCK;
  assign XPIPE_PIPE_CH9_TXSWING_in = XPIPE_PIPE_CH9_TXSWING;
  assign XPIPE_PIPE_CH9_TXSYNCHEADER_in = XPIPE_PIPE_CH9_TXSYNCHEADER;
  assign XPIPE_RXMARGINREQACK_M_1_in = XPIPE_RXMARGINREQACK_M_1;
  assign XPIPE_RXMARGINREQACK_M_2_in = XPIPE_RXMARGINREQACK_M_2;
  assign XPIPE_RXMARGINREQACK_M_3_in = XPIPE_RXMARGINREQACK_M_3;
  assign XPIPE_RXMARGINREQACK_M_in = XPIPE_RXMARGINREQACK_M;
  assign XPIPE_RXMARGINREQCMD_1_in = XPIPE_RXMARGINREQCMD_1;
  assign XPIPE_RXMARGINREQCMD_2_in = XPIPE_RXMARGINREQCMD_2;
  assign XPIPE_RXMARGINREQCMD_3_in = XPIPE_RXMARGINREQCMD_3;
  assign XPIPE_RXMARGINREQCMD_in = XPIPE_RXMARGINREQCMD;
  assign XPIPE_RXMARGINREQLANENUM_1_in = XPIPE_RXMARGINREQLANENUM_1;
  assign XPIPE_RXMARGINREQLANENUM_2_in = XPIPE_RXMARGINREQLANENUM_2;
  assign XPIPE_RXMARGINREQLANENUM_3_in = XPIPE_RXMARGINREQLANENUM_3;
  assign XPIPE_RXMARGINREQLANENUM_in = XPIPE_RXMARGINREQLANENUM;
  assign XPIPE_RXMARGINREQPAYLOAD_1_in = XPIPE_RXMARGINREQPAYLOAD_1;
  assign XPIPE_RXMARGINREQPAYLOAD_2_in = XPIPE_RXMARGINREQPAYLOAD_2;
  assign XPIPE_RXMARGINREQPAYLOAD_3_in = XPIPE_RXMARGINREQPAYLOAD_3;
  assign XPIPE_RXMARGINREQPAYLOAD_in = XPIPE_RXMARGINREQPAYLOAD;
  assign XPIPE_RXMARGINREQREQ_1_in = XPIPE_RXMARGINREQREQ_1;
  assign XPIPE_RXMARGINREQREQ_2_in = XPIPE_RXMARGINREQREQ_2;
  assign XPIPE_RXMARGINREQREQ_3_in = XPIPE_RXMARGINREQREQ_3;
  assign XPIPE_RXMARGINREQREQ_in = XPIPE_RXMARGINREQREQ;
  assign XPIPE_RXMARGINRESACK_1_in = XPIPE_RXMARGINRESACK_1;
  assign XPIPE_RXMARGINRESACK_2_in = XPIPE_RXMARGINRESACK_2;
  assign XPIPE_RXMARGINRESACK_3_in = XPIPE_RXMARGINRESACK_3;
  assign XPIPE_RXMARGINRESACK_in = XPIPE_RXMARGINRESACK;
  assign XPIPE_RXMARGINRESCMD_M_1_in = XPIPE_RXMARGINRESCMD_M_1;
  assign XPIPE_RXMARGINRESCMD_M_2_in = XPIPE_RXMARGINRESCMD_M_2;
  assign XPIPE_RXMARGINRESCMD_M_3_in = XPIPE_RXMARGINRESCMD_M_3;
  assign XPIPE_RXMARGINRESCMD_M_in = XPIPE_RXMARGINRESCMD_M;
  assign XPIPE_RXMARGINRESLANENUM_M_1_in = XPIPE_RXMARGINRESLANENUM_M_1;
  assign XPIPE_RXMARGINRESLANENUM_M_2_in = XPIPE_RXMARGINRESLANENUM_M_2;
  assign XPIPE_RXMARGINRESLANENUM_M_3_in = XPIPE_RXMARGINRESLANENUM_M_3;
  assign XPIPE_RXMARGINRESLANENUM_M_in = XPIPE_RXMARGINRESLANENUM_M;
  assign XPIPE_RXMARGINRESPAYLOAD_M_1_in = XPIPE_RXMARGINRESPAYLOAD_M_1;
  assign XPIPE_RXMARGINRESPAYLOAD_M_2_in = XPIPE_RXMARGINRESPAYLOAD_M_2;
  assign XPIPE_RXMARGINRESPAYLOAD_M_3_in = XPIPE_RXMARGINRESPAYLOAD_M_3;
  assign XPIPE_RXMARGINRESPAYLOAD_M_in = XPIPE_RXMARGINRESPAYLOAD_M;
  assign XPIPE_RXMARGINRESREQ_M_1_in = XPIPE_RXMARGINRESREQ_M_1;
  assign XPIPE_RXMARGINRESREQ_M_2_in = XPIPE_RXMARGINRESREQ_M_2;
  assign XPIPE_RXMARGINRESREQ_M_3_in = XPIPE_RXMARGINRESREQ_M_3;
  assign XPIPE_RXMARGINRESREQ_M_in = XPIPE_RXMARGINRESREQ_M;

`ifndef XIL_XECLIB
  reg attr_test;
  reg attr_err;
  
  initial begin
  trig_attr = 1'b0;
  `ifdef XIL_ATTR_TEST
    attr_test = 1'b1;
  `else
    attr_test = 1'b0;
  `endif
    attr_err = 1'b0;
    #1;
    trig_attr = ~trig_attr;
  end
`endif

`ifdef XIL_XECLIB
  assign DATA_RATE_BIN = DATA_RATE_REG * 1000;
  
`else
  always @ (trig_attr) begin
  #1;
  DATA_RATE_BIN = DATA_RATE_REG * 1000;
  
  end
`endif

`ifndef XIL_XECLIB
  always @ (trig_attr) begin
    #1;
    if ((attr_test == 1'b1) ||
       ((DATA_RATE_REG != 8.0) &&
        (DATA_RATE_REG != 2.5) &&
        (DATA_RATE_REG != 14.8) &&
        (DATA_RATE_REG != 16.0) &&
        (DATA_RATE_REG != 20.0) &&
        (DATA_RATE_REG != 25.0))) begin
      $display("Error: [Unisim %s-101] DATA_RATE attribute is set to %f.  Legal values for this attribute are 8.0, 2.5, 14.8, 16.0, 20.0 or 25.0. Instance: %m", MODULE_NAME, DATA_RATE_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((GT_CHANNELS_REG != 1) &&
         (GT_CHANNELS_REG != 2) &&
         (GT_CHANNELS_REG != 4) &&
         (GT_CHANNELS_REG != 8) &&
         (GT_CHANNELS_REG != 16))) begin
      $display("Error: [Unisim %s-102] GT_CHANNELS attribute is set to %d.  Legal values for this attribute are 1, 2, 4, 8 or 16. Instance: %m", MODULE_NAME, GT_CHANNELS_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((SIM_DEVICE_REG != "VERSAL_AI_CORE") &&
         (SIM_DEVICE_REG != "VERSAL_AI_CORE_ES1") &&
         (SIM_DEVICE_REG != "VERSAL_AI_CORE_ES2") &&
         (SIM_DEVICE_REG != "VERSAL_PRIME") &&
         (SIM_DEVICE_REG != "VERSAL_PRIME_ES1") &&
         (SIM_DEVICE_REG != "VERSAL_PRIME_ES2"))) begin
      $display("Error: [Unisim %s-103] SIM_DEVICE attribute is set to %s.  Legal values for this attribute are VERSAL_AI_CORE, VERSAL_AI_CORE_ES1, VERSAL_AI_CORE_ES2, VERSAL_PRIME, VERSAL_PRIME_ES1 or VERSAL_PRIME_ES2. Instance: %m", MODULE_NAME, SIM_DEVICE_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((XPIPE_LINK0_CFG_REG != "DISABLE") &&
         (XPIPE_LINK0_CFG_REG != "HSDP") &&
         (XPIPE_LINK0_CFG_REG != "X4") &&
         (XPIPE_LINK0_CFG_REG != "X8") &&
         (XPIPE_LINK0_CFG_REG != "X16"))) begin
      $display("Error: [Unisim %s-107] XPIPE_LINK0_CFG attribute is set to %s.  Legal values for this attribute are DISABLE, HSDP, X4, X8 or X16. Instance: %m", MODULE_NAME, XPIPE_LINK0_CFG_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((XPIPE_LINK1_CFG_REG != "DISABLE") &&
         (XPIPE_LINK1_CFG_REG != "HSDP") &&
         (XPIPE_LINK1_CFG_REG != "X4") &&
         (XPIPE_LINK1_CFG_REG != "X8"))) begin
      $display("Error: [Unisim %s-108] XPIPE_LINK1_CFG attribute is set to %s.  Legal values for this attribute are DISABLE, HSDP, X4 or X8. Instance: %m", MODULE_NAME, XPIPE_LINK1_CFG_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((XPIPE_LOC_REG != "QUAD0") &&
         (XPIPE_LOC_REG != "QUAD1") &&
         (XPIPE_LOC_REG != "QUAD2") &&
         (XPIPE_LOC_REG != "QUAD3"))) begin
      $display("Error: [Unisim %s-109] XPIPE_LOC attribute is set to %s.  Legal values for this attribute are QUAD0, QUAD1, QUAD2 or QUAD3. Instance: %m", MODULE_NAME, XPIPE_LOC_REG);
      attr_err = 1'b1;
    end
    
    if (attr_err == 1'b1) #1 $finish;
  end
`endif


assign CH0_SCANCLKB_in = 1'b1; // tie off
assign CH1_SCANCLKB_in = 1'b1; // tie off
assign CH2_SCANCLKB_in = 1'b1; // tie off
assign CH3_SCANCLKB_in = 1'b1; // tie off
assign XPSCANCLK_in = 1'b1; // tie off

assign CH0_BSR_SERIAL_in = 1'b1; // tie off
assign CH0_CSSDRSTB_in = 1'b1; // tie off
assign CH0_CSSDSTOPCLKDONE_M_in = 1'b1; // tie off
assign CH0_CSSDSTOPCLK_in = 1'b1; // tie off
assign CH0_EDTUPDATEB_in = 1'b1; // tie off
assign CH0_SCANCNTRLIN_in = 1'b1; // tie off
assign CH0_SCANCNTRLOUT_M_in = 1'b1; // tie off
assign CH0_SCANENB_in = 1'b1; // tie off
assign CH0_SCANIN_in = 4'b1111; // tie off
assign CH0_SCANOUT_M_in = 4'b1111; // tie off
assign CH0_SCANRSTB_in = 1'b1; // tie off
assign CH1_BSR_SERIAL_in = 1'b1; // tie off
assign CH1_CSSDRSTB_in = 1'b1; // tie off
assign CH1_CSSDSTOPCLKDONE_M_in = 1'b1; // tie off
assign CH1_CSSDSTOPCLK_in = 1'b1; // tie off
assign CH1_EDTUPDATEB_in = 1'b1; // tie off
assign CH1_SCANCNTRLIN_in = 1'b1; // tie off
assign CH1_SCANCNTRLOUT_M_in = 1'b1; // tie off
assign CH1_SCANENB_in = 1'b1; // tie off
assign CH1_SCANIN_in = 4'b1111; // tie off
assign CH1_SCANOUT_M_in = 4'b1111; // tie off
assign CH1_SCANRSTB_in = 1'b1; // tie off
assign CH2_BSR_SERIAL_in = 1'b1; // tie off
assign CH2_CSSDRSTB_in = 1'b1; // tie off
assign CH2_CSSDSTOPCLKDONE_M_in = 1'b1; // tie off
assign CH2_CSSDSTOPCLK_in = 1'b1; // tie off
assign CH2_EDTUPDATEB_in = 1'b1; // tie off
assign CH2_SCANCNTRLIN_in = 1'b1; // tie off
assign CH2_SCANCNTRLOUT_M_in = 1'b1; // tie off
assign CH2_SCANENB_in = 1'b1; // tie off
assign CH2_SCANIN_in = 4'b1111; // tie off
assign CH2_SCANOUT_M_in = 4'b1111; // tie off
assign CH2_SCANRSTB_in = 1'b1; // tie off
assign CH3_BSR_SERIAL_in = 1'b1; // tie off
assign CH3_CSSDRSTB_in = 1'b1; // tie off
assign CH3_CSSDSTOPCLKDONE_M_in = 1'b1; // tie off
assign CH3_CSSDSTOPCLK_in = 1'b1; // tie off
assign CH3_EDTUPDATEB_in = 1'b1; // tie off
assign CH3_SCANCNTRLIN_in = 1'b1; // tie off
assign CH3_SCANCNTRLOUT_M_in = 1'b1; // tie off
assign CH3_SCANENB_in = 1'b1; // tie off
assign CH3_SCANIN_in = 4'b1111; // tie off
assign CH3_SCANOUT_M_in = 4'b1111; // tie off
assign CH3_SCANRSTB_in = 1'b1; // tie off
assign CSSDRSTB_in = 1'b1; // tie off
assign CSSDSTOPCLKDONE_M_in = 1'b1; // tie off
assign CSSDSTOPCLK_in = 1'b1; // tie off
assign EDTUPDATEB_in = 1'b1; // tie off
assign RCALCMP_M_in = 1'b1; // tie off
assign RCALOUT_M_in = 5'b11111; // tie off
assign SCANCLKB_in = 1'b1; // tie off
assign SCANCNTRLIN_in = 1'b1; // tie off
assign SCANCNTRLOUT_M_in = 1'b1; // tie off
assign SCANENB_in = 1'b1; // tie off
assign SCANIN_in = 4'b1111; // tie off
assign SCANOUT_M_in = 4'b1111; // tie off
assign SCANRSTB_in = 1'b1; // tie off
assign XPSCANENB_in = 1'b1; // tie off
assign XPSCANIN_in = 16'b1111111111111111; // tie off
assign XPSCANMODEB_in = 1'b1; // tie off
assign XPSCANOUT_M_in = 16'b1111111111111111; // tie off
assign XPSCANRSTB_in = 1'b1; // tie off

  SIP_XPIPE_QUAD SIP_XPIPE_QUAD_INST (
    .DATA_RATE (DATA_RATE_BIN),
    .GT_CHANNELS (GT_CHANNELS_REG),
    .SIM_DEVICE (SIM_DEVICE_MAP),
    .XPIPE_CLKDLY_CFG (XPIPE_CLKDLY_CFG_REG),
    .XPIPE_CLK_CFG (XPIPE_CLK_CFG_REG),
    .XPIPE_INSTANTIATED (XPIPE_INSTANTIATED_REG),
    .XPIPE_LINK0_CFG (XPIPE_LINK0_CFG_REG),
    .XPIPE_LINK1_CFG (XPIPE_LINK1_CFG_REG),
    .XPIPE_LOC (XPIPE_LOC_REG),
    .XPIPE_MODE (XPIPE_MODE_REG),
    .XPIPE_REG_CFG (XPIPE_REG_CFG_REG),
    .XPIPE_RSVD (XPIPE_RSVD_REG),
    .ALTCLK_M (ALTCLK_M_out),
    .APB3CLK_M (APB3CLK_M_out),
    .APB3PADDR_M (APB3PADDR_M_out),
    .APB3PENABLE_M (APB3PENABLE_M_out),
    .APB3PRDATA (APB3PRDATA_out),
    .APB3PREADY (APB3PREADY_out),
    .APB3PRESETN_M (APB3PRESETN_M_out),
    .APB3PSEL_M (APB3PSEL_M_out),
    .APB3PSLVERR (APB3PSLVERR_out),
    .APB3PWDATA_M (APB3PWDATA_M_out),
    .APB3PWRITE_M (APB3PWRITE_M_out),
    .AXISCLK_M (AXISCLK_M_out),
    .BGBYPASSB_M (BGBYPASSB_M_out),
    .BGMONITORENB_M (BGMONITORENB_M_out),
    .BGPDB_M (BGPDB_M_out),
    .BGRCALOVRDENB_M (BGRCALOVRDENB_M_out),
    .BGRCALOVRD_M (BGRCALOVRD_M_out),
    .CH0_BSR_SERIAL_M (CH0_BSR_SERIAL_M_out),
    .CH0_BUFGTCE (CH0_BUFGTCE_out),
    .CH0_BUFGTCEMASK (CH0_BUFGTCEMASK_out),
    .CH0_BUFGTDIV (CH0_BUFGTDIV_out),
    .CH0_BUFGTRST (CH0_BUFGTRST_out),
    .CH0_BUFGTRSTMASK (CH0_BUFGTRSTMASK_out),
    .CH0_CDRBMCDRREQ_M (CH0_CDRBMCDRREQ_M_out),
    .CH0_CDRFREQOS_M (CH0_CDRFREQOS_M_out),
    .CH0_CDRINCPCTRL_M (CH0_CDRINCPCTRL_M_out),
    .CH0_CDRSTEPDIR_M (CH0_CDRSTEPDIR_M_out),
    .CH0_CDRSTEPSQ_M (CH0_CDRSTEPSQ_M_out),
    .CH0_CDRSTEPSX_M (CH0_CDRSTEPSX_M_out),
    .CH0_CFOKOVRDFINISH_M (CH0_CFOKOVRDFINISH_M_out),
    .CH0_CFOKOVRDPULSE_M (CH0_CFOKOVRDPULSE_M_out),
    .CH0_CFOKOVRDRDY0 (CH0_CFOKOVRDRDY0_out),
    .CH0_CFOKOVRDRDY1 (CH0_CFOKOVRDRDY1_out),
    .CH0_CFOKOVRDSTART_M (CH0_CFOKOVRDSTART_M_out),
    .CH0_CLKRSVD0_M (CH0_CLKRSVD0_M_out),
    .CH0_CLKRSVD1_M (CH0_CLKRSVD1_M_out),
    .CH0_CSSDRSTB_M (CH0_CSSDRSTB_M_out),
    .CH0_CSSDSTOPCLKDONE (CH0_CSSDSTOPCLKDONE_out),
    .CH0_CSSDSTOPCLK_M (CH0_CSSDSTOPCLK_M_out),
    .CH0_DMONFIFORESET_M (CH0_DMONFIFORESET_M_out),
    .CH0_DMONITORCLK_M (CH0_DMONITORCLK_M_out),
    .CH0_DMONITOROUT (CH0_DMONITOROUT_out),
    .CH0_EDTUPDATEB_M (CH0_EDTUPDATEB_M_out),
    .CH0_EYESCANDATAERROR (CH0_EYESCANDATAERROR_out),
    .CH0_EYESCANRESET_M (CH0_EYESCANRESET_M_out),
    .CH0_EYESCANTRIGGER_M (CH0_EYESCANTRIGGER_M_out),
    .CH0_GTRSVD_M (CH0_GTRSVD_M_out),
    .CH0_GTRXRESET_M (CH0_GTRXRESET_M_out),
    .CH0_GTTXRESET_M (CH0_GTTXRESET_M_out),
    .CH0_HSDPPCSRESET_M (CH0_HSDPPCSRESET_M_out),
    .CH0_ILORESETDONE (CH0_ILORESETDONE_out),
    .CH0_ILORESETMASK_M (CH0_ILORESETMASK_M_out),
    .CH0_ILORESET_M (CH0_ILORESET_M_out),
    .CH0_LOOPBACK_M (CH0_LOOPBACK_M_out),
    .CH0_PCIERSTB_M (CH0_PCIERSTB_M_out),
    .CH0_PCSRSVDIN_M (CH0_PCSRSVDIN_M_out),
    .CH0_PCSRSVDOUT (CH0_PCSRSVDOUT_out),
    .CH0_PHYESMADAPTSAVE_M (CH0_PHYESMADAPTSAVE_M_out),
    .CH0_PHYREADY (CH0_PHYREADY_out),
    .CH0_PHYSTATUS (CH0_PHYSTATUS_out),
    .CH0_PINRSVDAS (CH0_PINRSVDAS_out),
    .CH0_RESETEXCEPTION (CH0_RESETEXCEPTION_out),
    .CH0_RX10GSTAT (CH0_RX10GSTAT_out),
    .CH0_RXBUFSTATUS (CH0_RXBUFSTATUS_out),
    .CH0_RXBYTEISALIGNED (CH0_RXBYTEISALIGNED_out),
    .CH0_RXBYTEREALIGN (CH0_RXBYTEREALIGN_out),
    .CH0_RXCDRHOLD_M (CH0_RXCDRHOLD_M_out),
    .CH0_RXCDRLOCK (CH0_RXCDRLOCK_out),
    .CH0_RXCDROVRDEN_M (CH0_RXCDROVRDEN_M_out),
    .CH0_RXCDRPHDONE (CH0_RXCDRPHDONE_out),
    .CH0_RXCDRRESET_M (CH0_RXCDRRESET_M_out),
    .CH0_RXCHANBONDSEQ (CH0_RXCHANBONDSEQ_out),
    .CH0_RXCHANISALIGNED (CH0_RXCHANISALIGNED_out),
    .CH0_RXCHANREALIGN (CH0_RXCHANREALIGN_out),
    .CH0_RXCHBONDI_M (CH0_RXCHBONDI_M_out),
    .CH0_RXCHBONDO (CH0_RXCHBONDO_out),
    .CH0_RXCLKCORCNT (CH0_RXCLKCORCNT_out),
    .CH0_RXCOMINITDET (CH0_RXCOMINITDET_out),
    .CH0_RXCOMMADET (CH0_RXCOMMADET_out),
    .CH0_RXCOMSASDET (CH0_RXCOMSASDET_out),
    .CH0_RXCOMWAKEDET (CH0_RXCOMWAKEDET_out),
    .CH0_RXCTRL0 (CH0_RXCTRL0_out),
    .CH0_RXCTRL1 (CH0_RXCTRL1_out),
    .CH0_RXCTRL2 (CH0_RXCTRL2_out),
    .CH0_RXCTRL3 (CH0_RXCTRL3_out),
    .CH0_RXDAPICODEOVRDEN_M (CH0_RXDAPICODEOVRDEN_M_out),
    .CH0_RXDAPICODERESET_M (CH0_RXDAPICODERESET_M_out),
    .CH0_RXDATA (CH0_RXDATA_out),
    .CH0_RXDATAEXTENDRSVD (CH0_RXDATAEXTENDRSVD_out),
    .CH0_RXDATAVALID (CH0_RXDATAVALID_out),
    .CH0_RXDCCDONE (CH0_RXDCCDONE_out),
    .CH0_RXDLYALIGNERR (CH0_RXDLYALIGNERR_out),
    .CH0_RXDLYALIGNPROG (CH0_RXDLYALIGNPROG_out),
    .CH0_RXDLYALIGNREQ_M (CH0_RXDLYALIGNREQ_M_out),
    .CH0_RXELECIDLE (CH0_RXELECIDLE_out),
    .CH0_RXEQTRAINING_M (CH0_RXEQTRAINING_M_out),
    .CH0_RXFINEALIGNDONE (CH0_RXFINEALIGNDONE_out),
    .CH0_RXGEARBOXSLIP_M (CH0_RXGEARBOXSLIP_M_out),
    .CH0_RXHEADER (CH0_RXHEADER_out),
    .CH0_RXHEADERVALID (CH0_RXHEADERVALID_out),
    .CH0_RXLATCLK_M (CH0_RXLATCLK_M_out),
    .CH0_RXLPMEN_M (CH0_RXLPMEN_M_out),
    .CH0_RXMLDCHAINDONE_M (CH0_RXMLDCHAINDONE_M_out),
    .CH0_RXMLDCHAINREQ_M (CH0_RXMLDCHAINREQ_M_out),
    .CH0_RXMLFINEALIGNREQ_M (CH0_RXMLFINEALIGNREQ_M_out),
    .CH0_RXOOBRESET_M (CH0_RXOOBRESET_M_out),
    .CH0_RXOSINTDONE (CH0_RXOSINTDONE_out),
    .CH0_RXOSINTSTARTED (CH0_RXOSINTSTARTED_out),
    .CH0_RXOSINTSTROBEDONE (CH0_RXOSINTSTROBEDONE_out),
    .CH0_RXOSINTSTROBESTARTED (CH0_RXOSINTSTROBESTARTED_out),
    .CH0_RXPCSRESETMASK_M (CH0_RXPCSRESETMASK_M_out),
    .CH0_RXPD_M (CH0_RXPD_M_out),
    .CH0_RXPHALIGNDONE (CH0_RXPHALIGNDONE_out),
    .CH0_RXPHALIGNERR (CH0_RXPHALIGNERR_out),
    .CH0_RXPHALIGNREQ_M (CH0_RXPHALIGNREQ_M_out),
    .CH0_RXPHALIGNRESETMASK_M (CH0_RXPHALIGNRESETMASK_M_out),
    .CH0_RXPHDLYPD_M (CH0_RXPHDLYPD_M_out),
    .CH0_RXPHDLYRESETDONE (CH0_RXPHDLYRESETDONE_out),
    .CH0_RXPHDLYRESET_M (CH0_RXPHDLYRESET_M_out),
    .CH0_RXPHSETINITDONE (CH0_RXPHSETINITDONE_out),
    .CH0_RXPHSETINITREQ_M (CH0_RXPHSETINITREQ_M_out),
    .CH0_RXPHSHIFT180DONE (CH0_RXPHSHIFT180DONE_out),
    .CH0_RXPHSHIFT180_M (CH0_RXPHSHIFT180_M_out),
    .CH0_RXPMARESETDONE (CH0_RXPMARESETDONE_out),
    .CH0_RXPMARESETMASK_M (CH0_RXPMARESETMASK_M_out),
    .CH0_RXPOLARITY_M (CH0_RXPOLARITY_M_out),
    .CH0_RXPRBSCNTRESET_M (CH0_RXPRBSCNTRESET_M_out),
    .CH0_RXPRBSERR (CH0_RXPRBSERR_out),
    .CH0_RXPRBSLOCKED (CH0_RXPRBSLOCKED_out),
    .CH0_RXPRBSSEL_M (CH0_RXPRBSSEL_M_out),
    .CH0_RXPROGDIVRESETDONE (CH0_RXPROGDIVRESETDONE_out),
    .CH0_RXPROGDIVRESET_M (CH0_RXPROGDIVRESET_M_out),
    .CH0_RXRATE_M (CH0_RXRATE_M_out),
    .CH0_RXRESETDONE (CH0_RXRESETDONE_out),
    .CH0_RXRESETMODE_M (CH0_RXRESETMODE_M_out),
    .CH0_RXSLIDERDY (CH0_RXSLIDERDY_out),
    .CH0_RXSLIDE_M (CH0_RXSLIDE_M_out),
    .CH0_RXSTARTOFSEQ (CH0_RXSTARTOFSEQ_out),
    .CH0_RXSTATUS (CH0_RXSTATUS_out),
    .CH0_RXSYNCALLIN_M (CH0_RXSYNCALLIN_M_out),
    .CH0_RXSYNCDONE (CH0_RXSYNCDONE_out),
    .CH0_RXTERMINATION_M (CH0_RXTERMINATION_M_out),
    .CH0_RXUSERRDY_M (CH0_RXUSERRDY_M_out),
    .CH0_RXUSRCLK_M (CH0_RXUSRCLK_M_out),
    .CH0_RXVALID (CH0_RXVALID_out),
    .CH0_SCANCLKB_M (CH0_SCANCLKB_M_out),
    .CH0_SCANCNTRLIN_M (CH0_SCANCNTRLIN_M_out),
    .CH0_SCANCNTRLOUT (CH0_SCANCNTRLOUT_out),
    .CH0_SCANENB_M (CH0_SCANENB_M_out),
    .CH0_SCANIN_M (CH0_SCANIN_M_out),
    .CH0_SCANOUT (CH0_SCANOUT_out),
    .CH0_SCANRSTB_M (CH0_SCANRSTB_M_out),
    .CH0_TSTCLK0_M (CH0_TSTCLK0_M_out),
    .CH0_TSTCLK1_M (CH0_TSTCLK1_M_out),
    .CH0_TSTIN_M (CH0_TSTIN_M_out),
    .CH0_TX10GSTAT (CH0_TX10GSTAT_out),
    .CH0_TXBUFSTATUS (CH0_TXBUFSTATUS_out),
    .CH0_TXCOMFINISH (CH0_TXCOMFINISH_out),
    .CH0_TXCOMINIT_M (CH0_TXCOMINIT_M_out),
    .CH0_TXCOMSAS_M (CH0_TXCOMSAS_M_out),
    .CH0_TXCOMWAKE_M (CH0_TXCOMWAKE_M_out),
    .CH0_TXCTRL0_M (CH0_TXCTRL0_M_out),
    .CH0_TXCTRL1_M (CH0_TXCTRL1_M_out),
    .CH0_TXCTRL2_M (CH0_TXCTRL2_M_out),
    .CH0_TXDAPICODEOVRDEN_M (CH0_TXDAPICODEOVRDEN_M_out),
    .CH0_TXDAPICODERESET_M (CH0_TXDAPICODERESET_M_out),
    .CH0_TXDATAEXTENDRSVD_M (CH0_TXDATAEXTENDRSVD_M_out),
    .CH0_TXDATA_M (CH0_TXDATA_M_out),
    .CH0_TXDCCDONE (CH0_TXDCCDONE_out),
    .CH0_TXDEEMPH_M (CH0_TXDEEMPH_M_out),
    .CH0_TXDETECTRX_M (CH0_TXDETECTRX_M_out),
    .CH0_TXDIFFCTRL_M (CH0_TXDIFFCTRL_M_out),
    .CH0_TXDLYALIGNERR (CH0_TXDLYALIGNERR_out),
    .CH0_TXDLYALIGNPROG (CH0_TXDLYALIGNPROG_out),
    .CH0_TXDLYALIGNREQ_M (CH0_TXDLYALIGNREQ_M_out),
    .CH0_TXELECIDLE_M (CH0_TXELECIDLE_M_out),
    .CH0_TXHEADER_M (CH0_TXHEADER_M_out),
    .CH0_TXINHIBIT_M (CH0_TXINHIBIT_M_out),
    .CH0_TXLATCLK_M (CH0_TXLATCLK_M_out),
    .CH0_TXMAINCURSOR_M (CH0_TXMAINCURSOR_M_out),
    .CH0_TXMARGIN_M (CH0_TXMARGIN_M_out),
    .CH0_TXMLDCHAINDONE_M (CH0_TXMLDCHAINDONE_M_out),
    .CH0_TXMLDCHAINREQ_M (CH0_TXMLDCHAINREQ_M_out),
    .CH0_TXONESZEROS_M (CH0_TXONESZEROS_M_out),
    .CH0_TXPAUSEDELAYALIGN_M (CH0_TXPAUSEDELAYALIGN_M_out),
    .CH0_TXPCSRESETMASK_M (CH0_TXPCSRESETMASK_M_out),
    .CH0_TXPD_M (CH0_TXPD_M_out),
    .CH0_TXPHALIGNDONE (CH0_TXPHALIGNDONE_out),
    .CH0_TXPHALIGNERR (CH0_TXPHALIGNERR_out),
    .CH0_TXPHALIGNOUTRSVD (CH0_TXPHALIGNOUTRSVD_out),
    .CH0_TXPHALIGNREQ_M (CH0_TXPHALIGNREQ_M_out),
    .CH0_TXPHALIGNRESETMASK_M (CH0_TXPHALIGNRESETMASK_M_out),
    .CH0_TXPHDLYPD_M (CH0_TXPHDLYPD_M_out),
    .CH0_TXPHDLYRESETDONE (CH0_TXPHDLYRESETDONE_out),
    .CH0_TXPHDLYRESET_M (CH0_TXPHDLYRESET_M_out),
    .CH0_TXPHDLYTSTCLK_M (CH0_TXPHDLYTSTCLK_M_out),
    .CH0_TXPHSETINITDONE (CH0_TXPHSETINITDONE_out),
    .CH0_TXPHSETINITREQ_M (CH0_TXPHSETINITREQ_M_out),
    .CH0_TXPHSHIFT180DONE (CH0_TXPHSHIFT180DONE_out),
    .CH0_TXPHSHIFT180_M (CH0_TXPHSHIFT180_M_out),
    .CH0_TXPICODEOVRDEN_M (CH0_TXPICODEOVRDEN_M_out),
    .CH0_TXPICODERESET_M (CH0_TXPICODERESET_M_out),
    .CH0_TXPIPPMEN_M (CH0_TXPIPPMEN_M_out),
    .CH0_TXPIPPMSTEPSIZE_M (CH0_TXPIPPMSTEPSIZE_M_out),
    .CH0_TXPISOPD_M (CH0_TXPISOPD_M_out),
    .CH0_TXPMARESETDONE (CH0_TXPMARESETDONE_out),
    .CH0_TXPMARESETMASK_M (CH0_TXPMARESETMASK_M_out),
    .CH0_TXPOLARITY_M (CH0_TXPOLARITY_M_out),
    .CH0_TXPOSTCURSOR_M (CH0_TXPOSTCURSOR_M_out),
    .CH0_TXPRBSFORCEERR_M (CH0_TXPRBSFORCEERR_M_out),
    .CH0_TXPRBSSEL_M (CH0_TXPRBSSEL_M_out),
    .CH0_TXPRECURSOR_M (CH0_TXPRECURSOR_M_out),
    .CH0_TXPROGDIVRESETDONE (CH0_TXPROGDIVRESETDONE_out),
    .CH0_TXPROGDIVRESET_M (CH0_TXPROGDIVRESET_M_out),
    .CH0_TXRATE_M (CH0_TXRATE_M_out),
    .CH0_TXRESETDONE (CH0_TXRESETDONE_out),
    .CH0_TXRESETMODE_M (CH0_TXRESETMODE_M_out),
    .CH0_TXSEQUENCE_M (CH0_TXSEQUENCE_M_out),
    .CH0_TXSWING_M (CH0_TXSWING_M_out),
    .CH0_TXSYNCALLIN_M (CH0_TXSYNCALLIN_M_out),
    .CH0_TXSYNCDONE (CH0_TXSYNCDONE_out),
    .CH0_TXUSERRDY_M (CH0_TXUSERRDY_M_out),
    .CH0_TXUSRCLK_M (CH0_TXUSRCLK_M_out),
    .CH1_BSR_SERIAL_M (CH1_BSR_SERIAL_M_out),
    .CH1_BUFGTCE (CH1_BUFGTCE_out),
    .CH1_BUFGTCEMASK (CH1_BUFGTCEMASK_out),
    .CH1_BUFGTDIV (CH1_BUFGTDIV_out),
    .CH1_BUFGTRST (CH1_BUFGTRST_out),
    .CH1_BUFGTRSTMASK (CH1_BUFGTRSTMASK_out),
    .CH1_CDRBMCDRREQ_M (CH1_CDRBMCDRREQ_M_out),
    .CH1_CDRFREQOS_M (CH1_CDRFREQOS_M_out),
    .CH1_CDRINCPCTRL_M (CH1_CDRINCPCTRL_M_out),
    .CH1_CDRSTEPDIR_M (CH1_CDRSTEPDIR_M_out),
    .CH1_CDRSTEPSQ_M (CH1_CDRSTEPSQ_M_out),
    .CH1_CDRSTEPSX_M (CH1_CDRSTEPSX_M_out),
    .CH1_CFOKOVRDFINISH_M (CH1_CFOKOVRDFINISH_M_out),
    .CH1_CFOKOVRDPULSE_M (CH1_CFOKOVRDPULSE_M_out),
    .CH1_CFOKOVRDRDY0 (CH1_CFOKOVRDRDY0_out),
    .CH1_CFOKOVRDRDY1 (CH1_CFOKOVRDRDY1_out),
    .CH1_CFOKOVRDSTART_M (CH1_CFOKOVRDSTART_M_out),
    .CH1_CLKRSVD0_M (CH1_CLKRSVD0_M_out),
    .CH1_CLKRSVD1_M (CH1_CLKRSVD1_M_out),
    .CH1_CSSDRSTB_M (CH1_CSSDRSTB_M_out),
    .CH1_CSSDSTOPCLKDONE (CH1_CSSDSTOPCLKDONE_out),
    .CH1_CSSDSTOPCLK_M (CH1_CSSDSTOPCLK_M_out),
    .CH1_DMONFIFORESET_M (CH1_DMONFIFORESET_M_out),
    .CH1_DMONITORCLK_M (CH1_DMONITORCLK_M_out),
    .CH1_DMONITOROUT (CH1_DMONITOROUT_out),
    .CH1_EDTUPDATEB_M (CH1_EDTUPDATEB_M_out),
    .CH1_EYESCANDATAERROR (CH1_EYESCANDATAERROR_out),
    .CH1_EYESCANRESET_M (CH1_EYESCANRESET_M_out),
    .CH1_EYESCANTRIGGER_M (CH1_EYESCANTRIGGER_M_out),
    .CH1_GTRSVD_M (CH1_GTRSVD_M_out),
    .CH1_GTRXRESET_M (CH1_GTRXRESET_M_out),
    .CH1_GTTXRESET_M (CH1_GTTXRESET_M_out),
    .CH1_HSDPPCSRESET_M (CH1_HSDPPCSRESET_M_out),
    .CH1_ILORESETDONE (CH1_ILORESETDONE_out),
    .CH1_ILORESETMASK_M (CH1_ILORESETMASK_M_out),
    .CH1_ILORESET_M (CH1_ILORESET_M_out),
    .CH1_LOOPBACK_M (CH1_LOOPBACK_M_out),
    .CH1_PCIERSTB_M (CH1_PCIERSTB_M_out),
    .CH1_PCSRSVDIN_M (CH1_PCSRSVDIN_M_out),
    .CH1_PCSRSVDOUT (CH1_PCSRSVDOUT_out),
    .CH1_PHYESMADAPTSAVE_M (CH1_PHYESMADAPTSAVE_M_out),
    .CH1_PHYREADY (CH1_PHYREADY_out),
    .CH1_PHYSTATUS (CH1_PHYSTATUS_out),
    .CH1_PINRSVDAS (CH1_PINRSVDAS_out),
    .CH1_RESETEXCEPTION (CH1_RESETEXCEPTION_out),
    .CH1_RX10GSTAT (CH1_RX10GSTAT_out),
    .CH1_RXBUFSTATUS (CH1_RXBUFSTATUS_out),
    .CH1_RXBYTEISALIGNED (CH1_RXBYTEISALIGNED_out),
    .CH1_RXBYTEREALIGN (CH1_RXBYTEREALIGN_out),
    .CH1_RXCDRHOLD_M (CH1_RXCDRHOLD_M_out),
    .CH1_RXCDRLOCK (CH1_RXCDRLOCK_out),
    .CH1_RXCDROVRDEN_M (CH1_RXCDROVRDEN_M_out),
    .CH1_RXCDRPHDONE (CH1_RXCDRPHDONE_out),
    .CH1_RXCDRRESET_M (CH1_RXCDRRESET_M_out),
    .CH1_RXCHANBONDSEQ (CH1_RXCHANBONDSEQ_out),
    .CH1_RXCHANISALIGNED (CH1_RXCHANISALIGNED_out),
    .CH1_RXCHANREALIGN (CH1_RXCHANREALIGN_out),
    .CH1_RXCHBONDI_M (CH1_RXCHBONDI_M_out),
    .CH1_RXCHBONDO (CH1_RXCHBONDO_out),
    .CH1_RXCLKCORCNT (CH1_RXCLKCORCNT_out),
    .CH1_RXCOMINITDET (CH1_RXCOMINITDET_out),
    .CH1_RXCOMMADET (CH1_RXCOMMADET_out),
    .CH1_RXCOMSASDET (CH1_RXCOMSASDET_out),
    .CH1_RXCOMWAKEDET (CH1_RXCOMWAKEDET_out),
    .CH1_RXCTRL0 (CH1_RXCTRL0_out),
    .CH1_RXCTRL1 (CH1_RXCTRL1_out),
    .CH1_RXCTRL2 (CH1_RXCTRL2_out),
    .CH1_RXCTRL3 (CH1_RXCTRL3_out),
    .CH1_RXDAPICODEOVRDEN_M (CH1_RXDAPICODEOVRDEN_M_out),
    .CH1_RXDAPICODERESET_M (CH1_RXDAPICODERESET_M_out),
    .CH1_RXDATA (CH1_RXDATA_out),
    .CH1_RXDATAEXTENDRSVD (CH1_RXDATAEXTENDRSVD_out),
    .CH1_RXDATAVALID (CH1_RXDATAVALID_out),
    .CH1_RXDCCDONE (CH1_RXDCCDONE_out),
    .CH1_RXDLYALIGNERR (CH1_RXDLYALIGNERR_out),
    .CH1_RXDLYALIGNPROG (CH1_RXDLYALIGNPROG_out),
    .CH1_RXDLYALIGNREQ_M (CH1_RXDLYALIGNREQ_M_out),
    .CH1_RXELECIDLE (CH1_RXELECIDLE_out),
    .CH1_RXEQTRAINING_M (CH1_RXEQTRAINING_M_out),
    .CH1_RXFINEALIGNDONE (CH1_RXFINEALIGNDONE_out),
    .CH1_RXGEARBOXSLIP_M (CH1_RXGEARBOXSLIP_M_out),
    .CH1_RXHEADER (CH1_RXHEADER_out),
    .CH1_RXHEADERVALID (CH1_RXHEADERVALID_out),
    .CH1_RXLATCLK_M (CH1_RXLATCLK_M_out),
    .CH1_RXLPMEN_M (CH1_RXLPMEN_M_out),
    .CH1_RXMLDCHAINDONE_M (CH1_RXMLDCHAINDONE_M_out),
    .CH1_RXMLDCHAINREQ_M (CH1_RXMLDCHAINREQ_M_out),
    .CH1_RXMLFINEALIGNREQ_M (CH1_RXMLFINEALIGNREQ_M_out),
    .CH1_RXOOBRESET_M (CH1_RXOOBRESET_M_out),
    .CH1_RXOSINTDONE (CH1_RXOSINTDONE_out),
    .CH1_RXOSINTSTARTED (CH1_RXOSINTSTARTED_out),
    .CH1_RXOSINTSTROBEDONE (CH1_RXOSINTSTROBEDONE_out),
    .CH1_RXOSINTSTROBESTARTED (CH1_RXOSINTSTROBESTARTED_out),
    .CH1_RXPCSRESETMASK_M (CH1_RXPCSRESETMASK_M_out),
    .CH1_RXPD_M (CH1_RXPD_M_out),
    .CH1_RXPHALIGNDONE (CH1_RXPHALIGNDONE_out),
    .CH1_RXPHALIGNERR (CH1_RXPHALIGNERR_out),
    .CH1_RXPHALIGNREQ_M (CH1_RXPHALIGNREQ_M_out),
    .CH1_RXPHALIGNRESETMASK_M (CH1_RXPHALIGNRESETMASK_M_out),
    .CH1_RXPHDLYPD_M (CH1_RXPHDLYPD_M_out),
    .CH1_RXPHDLYRESETDONE (CH1_RXPHDLYRESETDONE_out),
    .CH1_RXPHDLYRESET_M (CH1_RXPHDLYRESET_M_out),
    .CH1_RXPHSETINITDONE (CH1_RXPHSETINITDONE_out),
    .CH1_RXPHSETINITREQ_M (CH1_RXPHSETINITREQ_M_out),
    .CH1_RXPHSHIFT180DONE (CH1_RXPHSHIFT180DONE_out),
    .CH1_RXPHSHIFT180_M (CH1_RXPHSHIFT180_M_out),
    .CH1_RXPMARESETDONE (CH1_RXPMARESETDONE_out),
    .CH1_RXPMARESETMASK_M (CH1_RXPMARESETMASK_M_out),
    .CH1_RXPOLARITY_M (CH1_RXPOLARITY_M_out),
    .CH1_RXPRBSCNTRESET_M (CH1_RXPRBSCNTRESET_M_out),
    .CH1_RXPRBSERR (CH1_RXPRBSERR_out),
    .CH1_RXPRBSLOCKED (CH1_RXPRBSLOCKED_out),
    .CH1_RXPRBSSEL_M (CH1_RXPRBSSEL_M_out),
    .CH1_RXPROGDIVRESETDONE (CH1_RXPROGDIVRESETDONE_out),
    .CH1_RXPROGDIVRESET_M (CH1_RXPROGDIVRESET_M_out),
    .CH1_RXRATE_M (CH1_RXRATE_M_out),
    .CH1_RXRESETDONE (CH1_RXRESETDONE_out),
    .CH1_RXRESETMODE_M (CH1_RXRESETMODE_M_out),
    .CH1_RXSLIDERDY (CH1_RXSLIDERDY_out),
    .CH1_RXSLIDE_M (CH1_RXSLIDE_M_out),
    .CH1_RXSTARTOFSEQ (CH1_RXSTARTOFSEQ_out),
    .CH1_RXSTATUS (CH1_RXSTATUS_out),
    .CH1_RXSYNCALLIN_M (CH1_RXSYNCALLIN_M_out),
    .CH1_RXSYNCDONE (CH1_RXSYNCDONE_out),
    .CH1_RXTERMINATION_M (CH1_RXTERMINATION_M_out),
    .CH1_RXUSERRDY_M (CH1_RXUSERRDY_M_out),
    .CH1_RXUSRCLK_M (CH1_RXUSRCLK_M_out),
    .CH1_RXVALID (CH1_RXVALID_out),
    .CH1_SCANCLKB_M (CH1_SCANCLKB_M_out),
    .CH1_SCANCNTRLIN_M (CH1_SCANCNTRLIN_M_out),
    .CH1_SCANCNTRLOUT (CH1_SCANCNTRLOUT_out),
    .CH1_SCANENB_M (CH1_SCANENB_M_out),
    .CH1_SCANIN_M (CH1_SCANIN_M_out),
    .CH1_SCANOUT (CH1_SCANOUT_out),
    .CH1_SCANRSTB_M (CH1_SCANRSTB_M_out),
    .CH1_TSTCLK0_M (CH1_TSTCLK0_M_out),
    .CH1_TSTCLK1_M (CH1_TSTCLK1_M_out),
    .CH1_TSTIN_M (CH1_TSTIN_M_out),
    .CH1_TX10GSTAT (CH1_TX10GSTAT_out),
    .CH1_TXBUFSTATUS (CH1_TXBUFSTATUS_out),
    .CH1_TXCOMFINISH (CH1_TXCOMFINISH_out),
    .CH1_TXCOMINIT_M (CH1_TXCOMINIT_M_out),
    .CH1_TXCOMSAS_M (CH1_TXCOMSAS_M_out),
    .CH1_TXCOMWAKE_M (CH1_TXCOMWAKE_M_out),
    .CH1_TXCTRL0_M (CH1_TXCTRL0_M_out),
    .CH1_TXCTRL1_M (CH1_TXCTRL1_M_out),
    .CH1_TXCTRL2_M (CH1_TXCTRL2_M_out),
    .CH1_TXDAPICODEOVRDEN_M (CH1_TXDAPICODEOVRDEN_M_out),
    .CH1_TXDAPICODERESET_M (CH1_TXDAPICODERESET_M_out),
    .CH1_TXDATAEXTENDRSVD_M (CH1_TXDATAEXTENDRSVD_M_out),
    .CH1_TXDATA_M (CH1_TXDATA_M_out),
    .CH1_TXDCCDONE (CH1_TXDCCDONE_out),
    .CH1_TXDEEMPH_M (CH1_TXDEEMPH_M_out),
    .CH1_TXDETECTRX_M (CH1_TXDETECTRX_M_out),
    .CH1_TXDIFFCTRL_M (CH1_TXDIFFCTRL_M_out),
    .CH1_TXDLYALIGNERR (CH1_TXDLYALIGNERR_out),
    .CH1_TXDLYALIGNPROG (CH1_TXDLYALIGNPROG_out),
    .CH1_TXDLYALIGNREQ_M (CH1_TXDLYALIGNREQ_M_out),
    .CH1_TXELECIDLE_M (CH1_TXELECIDLE_M_out),
    .CH1_TXHEADER_M (CH1_TXHEADER_M_out),
    .CH1_TXINHIBIT_M (CH1_TXINHIBIT_M_out),
    .CH1_TXLATCLK_M (CH1_TXLATCLK_M_out),
    .CH1_TXMAINCURSOR_M (CH1_TXMAINCURSOR_M_out),
    .CH1_TXMARGIN_M (CH1_TXMARGIN_M_out),
    .CH1_TXMLDCHAINDONE_M (CH1_TXMLDCHAINDONE_M_out),
    .CH1_TXMLDCHAINREQ_M (CH1_TXMLDCHAINREQ_M_out),
    .CH1_TXONESZEROS_M (CH1_TXONESZEROS_M_out),
    .CH1_TXPAUSEDELAYALIGN_M (CH1_TXPAUSEDELAYALIGN_M_out),
    .CH1_TXPCSRESETMASK_M (CH1_TXPCSRESETMASK_M_out),
    .CH1_TXPD_M (CH1_TXPD_M_out),
    .CH1_TXPHALIGNDONE (CH1_TXPHALIGNDONE_out),
    .CH1_TXPHALIGNERR (CH1_TXPHALIGNERR_out),
    .CH1_TXPHALIGNOUTRSVD (CH1_TXPHALIGNOUTRSVD_out),
    .CH1_TXPHALIGNREQ_M (CH1_TXPHALIGNREQ_M_out),
    .CH1_TXPHALIGNRESETMASK_M (CH1_TXPHALIGNRESETMASK_M_out),
    .CH1_TXPHDLYPD_M (CH1_TXPHDLYPD_M_out),
    .CH1_TXPHDLYRESETDONE (CH1_TXPHDLYRESETDONE_out),
    .CH1_TXPHDLYRESET_M (CH1_TXPHDLYRESET_M_out),
    .CH1_TXPHDLYTSTCLK_M (CH1_TXPHDLYTSTCLK_M_out),
    .CH1_TXPHSETINITDONE (CH1_TXPHSETINITDONE_out),
    .CH1_TXPHSETINITREQ_M (CH1_TXPHSETINITREQ_M_out),
    .CH1_TXPHSHIFT180DONE (CH1_TXPHSHIFT180DONE_out),
    .CH1_TXPHSHIFT180_M (CH1_TXPHSHIFT180_M_out),
    .CH1_TXPICODEOVRDEN_M (CH1_TXPICODEOVRDEN_M_out),
    .CH1_TXPICODERESET_M (CH1_TXPICODERESET_M_out),
    .CH1_TXPIPPMEN_M (CH1_TXPIPPMEN_M_out),
    .CH1_TXPIPPMSTEPSIZE_M (CH1_TXPIPPMSTEPSIZE_M_out),
    .CH1_TXPISOPD_M (CH1_TXPISOPD_M_out),
    .CH1_TXPMARESETDONE (CH1_TXPMARESETDONE_out),
    .CH1_TXPMARESETMASK_M (CH1_TXPMARESETMASK_M_out),
    .CH1_TXPOLARITY_M (CH1_TXPOLARITY_M_out),
    .CH1_TXPOSTCURSOR_M (CH1_TXPOSTCURSOR_M_out),
    .CH1_TXPRBSFORCEERR_M (CH1_TXPRBSFORCEERR_M_out),
    .CH1_TXPRBSSEL_M (CH1_TXPRBSSEL_M_out),
    .CH1_TXPRECURSOR_M (CH1_TXPRECURSOR_M_out),
    .CH1_TXPROGDIVRESETDONE (CH1_TXPROGDIVRESETDONE_out),
    .CH1_TXPROGDIVRESET_M (CH1_TXPROGDIVRESET_M_out),
    .CH1_TXRATE_M (CH1_TXRATE_M_out),
    .CH1_TXRESETDONE (CH1_TXRESETDONE_out),
    .CH1_TXRESETMODE_M (CH1_TXRESETMODE_M_out),
    .CH1_TXSEQUENCE_M (CH1_TXSEQUENCE_M_out),
    .CH1_TXSWING_M (CH1_TXSWING_M_out),
    .CH1_TXSYNCALLIN_M (CH1_TXSYNCALLIN_M_out),
    .CH1_TXSYNCDONE (CH1_TXSYNCDONE_out),
    .CH1_TXUSERRDY_M (CH1_TXUSERRDY_M_out),
    .CH1_TXUSRCLK_M (CH1_TXUSRCLK_M_out),
    .CH2_BSR_SERIAL_M (CH2_BSR_SERIAL_M_out),
    .CH2_BUFGTCE (CH2_BUFGTCE_out),
    .CH2_BUFGTCEMASK (CH2_BUFGTCEMASK_out),
    .CH2_BUFGTDIV (CH2_BUFGTDIV_out),
    .CH2_BUFGTRST (CH2_BUFGTRST_out),
    .CH2_BUFGTRSTMASK (CH2_BUFGTRSTMASK_out),
    .CH2_CDRBMCDRREQ_M (CH2_CDRBMCDRREQ_M_out),
    .CH2_CDRFREQOS_M (CH2_CDRFREQOS_M_out),
    .CH2_CDRINCPCTRL_M (CH2_CDRINCPCTRL_M_out),
    .CH2_CDRSTEPDIR_M (CH2_CDRSTEPDIR_M_out),
    .CH2_CDRSTEPSQ_M (CH2_CDRSTEPSQ_M_out),
    .CH2_CDRSTEPSX_M (CH2_CDRSTEPSX_M_out),
    .CH2_CFOKOVRDFINISH_M (CH2_CFOKOVRDFINISH_M_out),
    .CH2_CFOKOVRDPULSE_M (CH2_CFOKOVRDPULSE_M_out),
    .CH2_CFOKOVRDRDY0 (CH2_CFOKOVRDRDY0_out),
    .CH2_CFOKOVRDRDY1 (CH2_CFOKOVRDRDY1_out),
    .CH2_CFOKOVRDSTART_M (CH2_CFOKOVRDSTART_M_out),
    .CH2_CLKRSVD0_M (CH2_CLKRSVD0_M_out),
    .CH2_CLKRSVD1_M (CH2_CLKRSVD1_M_out),
    .CH2_CSSDRSTB_M (CH2_CSSDRSTB_M_out),
    .CH2_CSSDSTOPCLKDONE (CH2_CSSDSTOPCLKDONE_out),
    .CH2_CSSDSTOPCLK_M (CH2_CSSDSTOPCLK_M_out),
    .CH2_DMONFIFORESET_M (CH2_DMONFIFORESET_M_out),
    .CH2_DMONITORCLK_M (CH2_DMONITORCLK_M_out),
    .CH2_DMONITOROUT (CH2_DMONITOROUT_out),
    .CH2_EDTUPDATEB_M (CH2_EDTUPDATEB_M_out),
    .CH2_EYESCANDATAERROR (CH2_EYESCANDATAERROR_out),
    .CH2_EYESCANRESET_M (CH2_EYESCANRESET_M_out),
    .CH2_EYESCANTRIGGER_M (CH2_EYESCANTRIGGER_M_out),
    .CH2_GTRSVD_M (CH2_GTRSVD_M_out),
    .CH2_GTRXRESET_M (CH2_GTRXRESET_M_out),
    .CH2_GTTXRESET_M (CH2_GTTXRESET_M_out),
    .CH2_HSDPPCSRESET_M (CH2_HSDPPCSRESET_M_out),
    .CH2_ILORESETDONE (CH2_ILORESETDONE_out),
    .CH2_ILORESETMASK_M (CH2_ILORESETMASK_M_out),
    .CH2_ILORESET_M (CH2_ILORESET_M_out),
    .CH2_LOOPBACK_M (CH2_LOOPBACK_M_out),
    .CH2_PCIERSTB_M (CH2_PCIERSTB_M_out),
    .CH2_PCSRSVDIN_M (CH2_PCSRSVDIN_M_out),
    .CH2_PCSRSVDOUT (CH2_PCSRSVDOUT_out),
    .CH2_PHYESMADAPTSAVE_M (CH2_PHYESMADAPTSAVE_M_out),
    .CH2_PHYREADY (CH2_PHYREADY_out),
    .CH2_PHYSTATUS (CH2_PHYSTATUS_out),
    .CH2_PINRSVDAS (CH2_PINRSVDAS_out),
    .CH2_RESETEXCEPTION (CH2_RESETEXCEPTION_out),
    .CH2_RX10GSTAT (CH2_RX10GSTAT_out),
    .CH2_RXBUFSTATUS (CH2_RXBUFSTATUS_out),
    .CH2_RXBYTEISALIGNED (CH2_RXBYTEISALIGNED_out),
    .CH2_RXBYTEREALIGN (CH2_RXBYTEREALIGN_out),
    .CH2_RXCDRHOLD_M (CH2_RXCDRHOLD_M_out),
    .CH2_RXCDRLOCK (CH2_RXCDRLOCK_out),
    .CH2_RXCDROVRDEN_M (CH2_RXCDROVRDEN_M_out),
    .CH2_RXCDRPHDONE (CH2_RXCDRPHDONE_out),
    .CH2_RXCDRRESET_M (CH2_RXCDRRESET_M_out),
    .CH2_RXCHANBONDSEQ (CH2_RXCHANBONDSEQ_out),
    .CH2_RXCHANISALIGNED (CH2_RXCHANISALIGNED_out),
    .CH2_RXCHANREALIGN (CH2_RXCHANREALIGN_out),
    .CH2_RXCHBONDI_M (CH2_RXCHBONDI_M_out),
    .CH2_RXCHBONDO (CH2_RXCHBONDO_out),
    .CH2_RXCLKCORCNT (CH2_RXCLKCORCNT_out),
    .CH2_RXCOMINITDET (CH2_RXCOMINITDET_out),
    .CH2_RXCOMMADET (CH2_RXCOMMADET_out),
    .CH2_RXCOMSASDET (CH2_RXCOMSASDET_out),
    .CH2_RXCOMWAKEDET (CH2_RXCOMWAKEDET_out),
    .CH2_RXCTRL0 (CH2_RXCTRL0_out),
    .CH2_RXCTRL1 (CH2_RXCTRL1_out),
    .CH2_RXCTRL2 (CH2_RXCTRL2_out),
    .CH2_RXCTRL3 (CH2_RXCTRL3_out),
    .CH2_RXDAPICODEOVRDEN_M (CH2_RXDAPICODEOVRDEN_M_out),
    .CH2_RXDAPICODERESET_M (CH2_RXDAPICODERESET_M_out),
    .CH2_RXDATA (CH2_RXDATA_out),
    .CH2_RXDATAEXTENDRSVD (CH2_RXDATAEXTENDRSVD_out),
    .CH2_RXDATAVALID (CH2_RXDATAVALID_out),
    .CH2_RXDCCDONE (CH2_RXDCCDONE_out),
    .CH2_RXDLYALIGNERR (CH2_RXDLYALIGNERR_out),
    .CH2_RXDLYALIGNPROG (CH2_RXDLYALIGNPROG_out),
    .CH2_RXDLYALIGNREQ_M (CH2_RXDLYALIGNREQ_M_out),
    .CH2_RXELECIDLE (CH2_RXELECIDLE_out),
    .CH2_RXEQTRAINING_M (CH2_RXEQTRAINING_M_out),
    .CH2_RXFINEALIGNDONE (CH2_RXFINEALIGNDONE_out),
    .CH2_RXGEARBOXSLIP_M (CH2_RXGEARBOXSLIP_M_out),
    .CH2_RXHEADER (CH2_RXHEADER_out),
    .CH2_RXHEADERVALID (CH2_RXHEADERVALID_out),
    .CH2_RXLATCLK_M (CH2_RXLATCLK_M_out),
    .CH2_RXLPMEN_M (CH2_RXLPMEN_M_out),
    .CH2_RXMLDCHAINDONE_M (CH2_RXMLDCHAINDONE_M_out),
    .CH2_RXMLDCHAINREQ_M (CH2_RXMLDCHAINREQ_M_out),
    .CH2_RXMLFINEALIGNREQ_M (CH2_RXMLFINEALIGNREQ_M_out),
    .CH2_RXOOBRESET_M (CH2_RXOOBRESET_M_out),
    .CH2_RXOSINTDONE (CH2_RXOSINTDONE_out),
    .CH2_RXOSINTSTARTED (CH2_RXOSINTSTARTED_out),
    .CH2_RXOSINTSTROBEDONE (CH2_RXOSINTSTROBEDONE_out),
    .CH2_RXOSINTSTROBESTARTED (CH2_RXOSINTSTROBESTARTED_out),
    .CH2_RXPCSRESETMASK_M (CH2_RXPCSRESETMASK_M_out),
    .CH2_RXPD_M (CH2_RXPD_M_out),
    .CH2_RXPHALIGNDONE (CH2_RXPHALIGNDONE_out),
    .CH2_RXPHALIGNERR (CH2_RXPHALIGNERR_out),
    .CH2_RXPHALIGNREQ_M (CH2_RXPHALIGNREQ_M_out),
    .CH2_RXPHALIGNRESETMASK_M (CH2_RXPHALIGNRESETMASK_M_out),
    .CH2_RXPHDLYPD_M (CH2_RXPHDLYPD_M_out),
    .CH2_RXPHDLYRESETDONE (CH2_RXPHDLYRESETDONE_out),
    .CH2_RXPHDLYRESET_M (CH2_RXPHDLYRESET_M_out),
    .CH2_RXPHSETINITDONE (CH2_RXPHSETINITDONE_out),
    .CH2_RXPHSETINITREQ_M (CH2_RXPHSETINITREQ_M_out),
    .CH2_RXPHSHIFT180DONE (CH2_RXPHSHIFT180DONE_out),
    .CH2_RXPHSHIFT180_M (CH2_RXPHSHIFT180_M_out),
    .CH2_RXPMARESETDONE (CH2_RXPMARESETDONE_out),
    .CH2_RXPMARESETMASK_M (CH2_RXPMARESETMASK_M_out),
    .CH2_RXPOLARITY_M (CH2_RXPOLARITY_M_out),
    .CH2_RXPRBSCNTRESET_M (CH2_RXPRBSCNTRESET_M_out),
    .CH2_RXPRBSERR (CH2_RXPRBSERR_out),
    .CH2_RXPRBSLOCKED (CH2_RXPRBSLOCKED_out),
    .CH2_RXPRBSSEL_M (CH2_RXPRBSSEL_M_out),
    .CH2_RXPROGDIVRESETDONE (CH2_RXPROGDIVRESETDONE_out),
    .CH2_RXPROGDIVRESET_M (CH2_RXPROGDIVRESET_M_out),
    .CH2_RXRATE_M (CH2_RXRATE_M_out),
    .CH2_RXRESETDONE (CH2_RXRESETDONE_out),
    .CH2_RXRESETMODE_M (CH2_RXRESETMODE_M_out),
    .CH2_RXSLIDERDY (CH2_RXSLIDERDY_out),
    .CH2_RXSLIDE_M (CH2_RXSLIDE_M_out),
    .CH2_RXSTARTOFSEQ (CH2_RXSTARTOFSEQ_out),
    .CH2_RXSTATUS (CH2_RXSTATUS_out),
    .CH2_RXSYNCALLIN_M (CH2_RXSYNCALLIN_M_out),
    .CH2_RXSYNCDONE (CH2_RXSYNCDONE_out),
    .CH2_RXTERMINATION_M (CH2_RXTERMINATION_M_out),
    .CH2_RXUSERRDY_M (CH2_RXUSERRDY_M_out),
    .CH2_RXUSRCLK_M (CH2_RXUSRCLK_M_out),
    .CH2_RXVALID (CH2_RXVALID_out),
    .CH2_SCANCLKB_M (CH2_SCANCLKB_M_out),
    .CH2_SCANCNTRLIN_M (CH2_SCANCNTRLIN_M_out),
    .CH2_SCANCNTRLOUT (CH2_SCANCNTRLOUT_out),
    .CH2_SCANENB_M (CH2_SCANENB_M_out),
    .CH2_SCANIN_M (CH2_SCANIN_M_out),
    .CH2_SCANOUT (CH2_SCANOUT_out),
    .CH2_SCANRSTB_M (CH2_SCANRSTB_M_out),
    .CH2_TSTCLK0_M (CH2_TSTCLK0_M_out),
    .CH2_TSTCLK1_M (CH2_TSTCLK1_M_out),
    .CH2_TSTIN_M (CH2_TSTIN_M_out),
    .CH2_TX10GSTAT (CH2_TX10GSTAT_out),
    .CH2_TXBUFSTATUS (CH2_TXBUFSTATUS_out),
    .CH2_TXCOMFINISH (CH2_TXCOMFINISH_out),
    .CH2_TXCOMINIT_M (CH2_TXCOMINIT_M_out),
    .CH2_TXCOMSAS_M (CH2_TXCOMSAS_M_out),
    .CH2_TXCOMWAKE_M (CH2_TXCOMWAKE_M_out),
    .CH2_TXCTRL0_M (CH2_TXCTRL0_M_out),
    .CH2_TXCTRL1_M (CH2_TXCTRL1_M_out),
    .CH2_TXCTRL2_M (CH2_TXCTRL2_M_out),
    .CH2_TXDAPICODEOVRDEN_M (CH2_TXDAPICODEOVRDEN_M_out),
    .CH2_TXDAPICODERESET_M (CH2_TXDAPICODERESET_M_out),
    .CH2_TXDATAEXTENDRSVD_M (CH2_TXDATAEXTENDRSVD_M_out),
    .CH2_TXDATA_M (CH2_TXDATA_M_out),
    .CH2_TXDCCDONE (CH2_TXDCCDONE_out),
    .CH2_TXDEEMPH_M (CH2_TXDEEMPH_M_out),
    .CH2_TXDETECTRX_M (CH2_TXDETECTRX_M_out),
    .CH2_TXDIFFCTRL_M (CH2_TXDIFFCTRL_M_out),
    .CH2_TXDLYALIGNERR (CH2_TXDLYALIGNERR_out),
    .CH2_TXDLYALIGNPROG (CH2_TXDLYALIGNPROG_out),
    .CH2_TXDLYALIGNREQ_M (CH2_TXDLYALIGNREQ_M_out),
    .CH2_TXELECIDLE_M (CH2_TXELECIDLE_M_out),
    .CH2_TXHEADER_M (CH2_TXHEADER_M_out),
    .CH2_TXINHIBIT_M (CH2_TXINHIBIT_M_out),
    .CH2_TXLATCLK_M (CH2_TXLATCLK_M_out),
    .CH2_TXMAINCURSOR_M (CH2_TXMAINCURSOR_M_out),
    .CH2_TXMARGIN_M (CH2_TXMARGIN_M_out),
    .CH2_TXMLDCHAINDONE_M (CH2_TXMLDCHAINDONE_M_out),
    .CH2_TXMLDCHAINREQ_M (CH2_TXMLDCHAINREQ_M_out),
    .CH2_TXONESZEROS_M (CH2_TXONESZEROS_M_out),
    .CH2_TXPAUSEDELAYALIGN_M (CH2_TXPAUSEDELAYALIGN_M_out),
    .CH2_TXPCSRESETMASK_M (CH2_TXPCSRESETMASK_M_out),
    .CH2_TXPD_M (CH2_TXPD_M_out),
    .CH2_TXPHALIGNDONE (CH2_TXPHALIGNDONE_out),
    .CH2_TXPHALIGNERR (CH2_TXPHALIGNERR_out),
    .CH2_TXPHALIGNOUTRSVD (CH2_TXPHALIGNOUTRSVD_out),
    .CH2_TXPHALIGNREQ_M (CH2_TXPHALIGNREQ_M_out),
    .CH2_TXPHALIGNRESETMASK_M (CH2_TXPHALIGNRESETMASK_M_out),
    .CH2_TXPHDLYPD_M (CH2_TXPHDLYPD_M_out),
    .CH2_TXPHDLYRESETDONE (CH2_TXPHDLYRESETDONE_out),
    .CH2_TXPHDLYRESET_M (CH2_TXPHDLYRESET_M_out),
    .CH2_TXPHDLYTSTCLK_M (CH2_TXPHDLYTSTCLK_M_out),
    .CH2_TXPHSETINITDONE (CH2_TXPHSETINITDONE_out),
    .CH2_TXPHSETINITREQ_M (CH2_TXPHSETINITREQ_M_out),
    .CH2_TXPHSHIFT180DONE (CH2_TXPHSHIFT180DONE_out),
    .CH2_TXPHSHIFT180_M (CH2_TXPHSHIFT180_M_out),
    .CH2_TXPICODEOVRDEN_M (CH2_TXPICODEOVRDEN_M_out),
    .CH2_TXPICODERESET_M (CH2_TXPICODERESET_M_out),
    .CH2_TXPIPPMEN_M (CH2_TXPIPPMEN_M_out),
    .CH2_TXPIPPMSTEPSIZE_M (CH2_TXPIPPMSTEPSIZE_M_out),
    .CH2_TXPISOPD_M (CH2_TXPISOPD_M_out),
    .CH2_TXPMARESETDONE (CH2_TXPMARESETDONE_out),
    .CH2_TXPMARESETMASK_M (CH2_TXPMARESETMASK_M_out),
    .CH2_TXPOLARITY_M (CH2_TXPOLARITY_M_out),
    .CH2_TXPOSTCURSOR_M (CH2_TXPOSTCURSOR_M_out),
    .CH2_TXPRBSFORCEERR_M (CH2_TXPRBSFORCEERR_M_out),
    .CH2_TXPRBSSEL_M (CH2_TXPRBSSEL_M_out),
    .CH2_TXPRECURSOR_M (CH2_TXPRECURSOR_M_out),
    .CH2_TXPROGDIVRESETDONE (CH2_TXPROGDIVRESETDONE_out),
    .CH2_TXPROGDIVRESET_M (CH2_TXPROGDIVRESET_M_out),
    .CH2_TXRATE_M (CH2_TXRATE_M_out),
    .CH2_TXRESETDONE (CH2_TXRESETDONE_out),
    .CH2_TXRESETMODE_M (CH2_TXRESETMODE_M_out),
    .CH2_TXSEQUENCE_M (CH2_TXSEQUENCE_M_out),
    .CH2_TXSWING_M (CH2_TXSWING_M_out),
    .CH2_TXSYNCALLIN_M (CH2_TXSYNCALLIN_M_out),
    .CH2_TXSYNCDONE (CH2_TXSYNCDONE_out),
    .CH2_TXUSERRDY_M (CH2_TXUSERRDY_M_out),
    .CH2_TXUSRCLK_M (CH2_TXUSRCLK_M_out),
    .CH3_BSR_SERIAL_M (CH3_BSR_SERIAL_M_out),
    .CH3_BUFGTCE (CH3_BUFGTCE_out),
    .CH3_BUFGTCEMASK (CH3_BUFGTCEMASK_out),
    .CH3_BUFGTDIV (CH3_BUFGTDIV_out),
    .CH3_BUFGTRST (CH3_BUFGTRST_out),
    .CH3_BUFGTRSTMASK (CH3_BUFGTRSTMASK_out),
    .CH3_CDRBMCDRREQ_M (CH3_CDRBMCDRREQ_M_out),
    .CH3_CDRFREQOS_M (CH3_CDRFREQOS_M_out),
    .CH3_CDRINCPCTRL_M (CH3_CDRINCPCTRL_M_out),
    .CH3_CDRSTEPDIR_M (CH3_CDRSTEPDIR_M_out),
    .CH3_CDRSTEPSQ_M (CH3_CDRSTEPSQ_M_out),
    .CH3_CDRSTEPSX_M (CH3_CDRSTEPSX_M_out),
    .CH3_CFOKOVRDFINISH_M (CH3_CFOKOVRDFINISH_M_out),
    .CH3_CFOKOVRDPULSE_M (CH3_CFOKOVRDPULSE_M_out),
    .CH3_CFOKOVRDRDY0 (CH3_CFOKOVRDRDY0_out),
    .CH3_CFOKOVRDRDY1 (CH3_CFOKOVRDRDY1_out),
    .CH3_CFOKOVRDSTART_M (CH3_CFOKOVRDSTART_M_out),
    .CH3_CLKRSVD0_M (CH3_CLKRSVD0_M_out),
    .CH3_CLKRSVD1_M (CH3_CLKRSVD1_M_out),
    .CH3_CSSDRSTB_M (CH3_CSSDRSTB_M_out),
    .CH3_CSSDSTOPCLKDONE (CH3_CSSDSTOPCLKDONE_out),
    .CH3_CSSDSTOPCLK_M (CH3_CSSDSTOPCLK_M_out),
    .CH3_DMONFIFORESET_M (CH3_DMONFIFORESET_M_out),
    .CH3_DMONITORCLK_M (CH3_DMONITORCLK_M_out),
    .CH3_DMONITOROUT (CH3_DMONITOROUT_out),
    .CH3_EDTUPDATEB_M (CH3_EDTUPDATEB_M_out),
    .CH3_EYESCANDATAERROR (CH3_EYESCANDATAERROR_out),
    .CH3_EYESCANRESET_M (CH3_EYESCANRESET_M_out),
    .CH3_EYESCANTRIGGER_M (CH3_EYESCANTRIGGER_M_out),
    .CH3_GTRSVD_M (CH3_GTRSVD_M_out),
    .CH3_GTRXRESET_M (CH3_GTRXRESET_M_out),
    .CH3_GTTXRESET_M (CH3_GTTXRESET_M_out),
    .CH3_HSDPPCSRESET_M (CH3_HSDPPCSRESET_M_out),
    .CH3_ILORESETDONE (CH3_ILORESETDONE_out),
    .CH3_ILORESETMASK_M (CH3_ILORESETMASK_M_out),
    .CH3_ILORESET_M (CH3_ILORESET_M_out),
    .CH3_LOOPBACK_M (CH3_LOOPBACK_M_out),
    .CH3_PCIERSTB_M (CH3_PCIERSTB_M_out),
    .CH3_PCSRSVDIN_M (CH3_PCSRSVDIN_M_out),
    .CH3_PCSRSVDOUT (CH3_PCSRSVDOUT_out),
    .CH3_PHYESMADAPTSAVE_M (CH3_PHYESMADAPTSAVE_M_out),
    .CH3_PHYREADY (CH3_PHYREADY_out),
    .CH3_PHYSTATUS (CH3_PHYSTATUS_out),
    .CH3_PINRSVDAS (CH3_PINRSVDAS_out),
    .CH3_RESETEXCEPTION (CH3_RESETEXCEPTION_out),
    .CH3_RX10GSTAT (CH3_RX10GSTAT_out),
    .CH3_RXBUFSTATUS (CH3_RXBUFSTATUS_out),
    .CH3_RXBYTEISALIGNED (CH3_RXBYTEISALIGNED_out),
    .CH3_RXBYTEREALIGN (CH3_RXBYTEREALIGN_out),
    .CH3_RXCDRHOLD_M (CH3_RXCDRHOLD_M_out),
    .CH3_RXCDRLOCK (CH3_RXCDRLOCK_out),
    .CH3_RXCDROVRDEN_M (CH3_RXCDROVRDEN_M_out),
    .CH3_RXCDRPHDONE (CH3_RXCDRPHDONE_out),
    .CH3_RXCDRRESET_M (CH3_RXCDRRESET_M_out),
    .CH3_RXCHANBONDSEQ (CH3_RXCHANBONDSEQ_out),
    .CH3_RXCHANISALIGNED (CH3_RXCHANISALIGNED_out),
    .CH3_RXCHANREALIGN (CH3_RXCHANREALIGN_out),
    .CH3_RXCHBONDI_M (CH3_RXCHBONDI_M_out),
    .CH3_RXCHBONDO (CH3_RXCHBONDO_out),
    .CH3_RXCLKCORCNT (CH3_RXCLKCORCNT_out),
    .CH3_RXCOMINITDET (CH3_RXCOMINITDET_out),
    .CH3_RXCOMMADET (CH3_RXCOMMADET_out),
    .CH3_RXCOMSASDET (CH3_RXCOMSASDET_out),
    .CH3_RXCOMWAKEDET (CH3_RXCOMWAKEDET_out),
    .CH3_RXCTRL0 (CH3_RXCTRL0_out),
    .CH3_RXCTRL1 (CH3_RXCTRL1_out),
    .CH3_RXCTRL2 (CH3_RXCTRL2_out),
    .CH3_RXCTRL3 (CH3_RXCTRL3_out),
    .CH3_RXDAPICODEOVRDEN_M (CH3_RXDAPICODEOVRDEN_M_out),
    .CH3_RXDAPICODERESET_M (CH3_RXDAPICODERESET_M_out),
    .CH3_RXDATA (CH3_RXDATA_out),
    .CH3_RXDATAEXTENDRSVD (CH3_RXDATAEXTENDRSVD_out),
    .CH3_RXDATAVALID (CH3_RXDATAVALID_out),
    .CH3_RXDCCDONE (CH3_RXDCCDONE_out),
    .CH3_RXDLYALIGNERR (CH3_RXDLYALIGNERR_out),
    .CH3_RXDLYALIGNPROG (CH3_RXDLYALIGNPROG_out),
    .CH3_RXDLYALIGNREQ_M (CH3_RXDLYALIGNREQ_M_out),
    .CH3_RXELECIDLE (CH3_RXELECIDLE_out),
    .CH3_RXEQTRAINING_M (CH3_RXEQTRAINING_M_out),
    .CH3_RXFINEALIGNDONE (CH3_RXFINEALIGNDONE_out),
    .CH3_RXGEARBOXSLIP_M (CH3_RXGEARBOXSLIP_M_out),
    .CH3_RXHEADER (CH3_RXHEADER_out),
    .CH3_RXHEADERVALID (CH3_RXHEADERVALID_out),
    .CH3_RXLATCLK_M (CH3_RXLATCLK_M_out),
    .CH3_RXLPMEN_M (CH3_RXLPMEN_M_out),
    .CH3_RXMLDCHAINDONE_M (CH3_RXMLDCHAINDONE_M_out),
    .CH3_RXMLDCHAINREQ_M (CH3_RXMLDCHAINREQ_M_out),
    .CH3_RXMLFINEALIGNREQ_M (CH3_RXMLFINEALIGNREQ_M_out),
    .CH3_RXOOBRESET_M (CH3_RXOOBRESET_M_out),
    .CH3_RXOSINTDONE (CH3_RXOSINTDONE_out),
    .CH3_RXOSINTSTARTED (CH3_RXOSINTSTARTED_out),
    .CH3_RXOSINTSTROBEDONE (CH3_RXOSINTSTROBEDONE_out),
    .CH3_RXOSINTSTROBESTARTED (CH3_RXOSINTSTROBESTARTED_out),
    .CH3_RXPCSRESETMASK_M (CH3_RXPCSRESETMASK_M_out),
    .CH3_RXPD_M (CH3_RXPD_M_out),
    .CH3_RXPHALIGNDONE (CH3_RXPHALIGNDONE_out),
    .CH3_RXPHALIGNERR (CH3_RXPHALIGNERR_out),
    .CH3_RXPHALIGNREQ_M (CH3_RXPHALIGNREQ_M_out),
    .CH3_RXPHALIGNRESETMASK_M (CH3_RXPHALIGNRESETMASK_M_out),
    .CH3_RXPHDLYPD_M (CH3_RXPHDLYPD_M_out),
    .CH3_RXPHDLYRESETDONE (CH3_RXPHDLYRESETDONE_out),
    .CH3_RXPHDLYRESET_M (CH3_RXPHDLYRESET_M_out),
    .CH3_RXPHSETINITDONE (CH3_RXPHSETINITDONE_out),
    .CH3_RXPHSETINITREQ_M (CH3_RXPHSETINITREQ_M_out),
    .CH3_RXPHSHIFT180DONE (CH3_RXPHSHIFT180DONE_out),
    .CH3_RXPHSHIFT180_M (CH3_RXPHSHIFT180_M_out),
    .CH3_RXPMARESETDONE (CH3_RXPMARESETDONE_out),
    .CH3_RXPMARESETMASK_M (CH3_RXPMARESETMASK_M_out),
    .CH3_RXPOLARITY_M (CH3_RXPOLARITY_M_out),
    .CH3_RXPRBSCNTRESET_M (CH3_RXPRBSCNTRESET_M_out),
    .CH3_RXPRBSERR (CH3_RXPRBSERR_out),
    .CH3_RXPRBSLOCKED (CH3_RXPRBSLOCKED_out),
    .CH3_RXPRBSSEL_M (CH3_RXPRBSSEL_M_out),
    .CH3_RXPROGDIVRESETDONE (CH3_RXPROGDIVRESETDONE_out),
    .CH3_RXPROGDIVRESET_M (CH3_RXPROGDIVRESET_M_out),
    .CH3_RXRATE_M (CH3_RXRATE_M_out),
    .CH3_RXRESETDONE (CH3_RXRESETDONE_out),
    .CH3_RXRESETMODE_M (CH3_RXRESETMODE_M_out),
    .CH3_RXSLIDERDY (CH3_RXSLIDERDY_out),
    .CH3_RXSLIDE_M (CH3_RXSLIDE_M_out),
    .CH3_RXSTARTOFSEQ (CH3_RXSTARTOFSEQ_out),
    .CH3_RXSTATUS (CH3_RXSTATUS_out),
    .CH3_RXSYNCALLIN_M (CH3_RXSYNCALLIN_M_out),
    .CH3_RXSYNCDONE (CH3_RXSYNCDONE_out),
    .CH3_RXTERMINATION_M (CH3_RXTERMINATION_M_out),
    .CH3_RXUSERRDY_M (CH3_RXUSERRDY_M_out),
    .CH3_RXUSRCLK_M (CH3_RXUSRCLK_M_out),
    .CH3_RXVALID (CH3_RXVALID_out),
    .CH3_SCANCLKB_M (CH3_SCANCLKB_M_out),
    .CH3_SCANCNTRLIN_M (CH3_SCANCNTRLIN_M_out),
    .CH3_SCANCNTRLOUT (CH3_SCANCNTRLOUT_out),
    .CH3_SCANENB_M (CH3_SCANENB_M_out),
    .CH3_SCANIN_M (CH3_SCANIN_M_out),
    .CH3_SCANOUT (CH3_SCANOUT_out),
    .CH3_SCANRSTB_M (CH3_SCANRSTB_M_out),
    .CH3_TSTCLK0_M (CH3_TSTCLK0_M_out),
    .CH3_TSTCLK1_M (CH3_TSTCLK1_M_out),
    .CH3_TSTIN_M (CH3_TSTIN_M_out),
    .CH3_TX10GSTAT (CH3_TX10GSTAT_out),
    .CH3_TXBUFSTATUS (CH3_TXBUFSTATUS_out),
    .CH3_TXCOMFINISH (CH3_TXCOMFINISH_out),
    .CH3_TXCOMINIT_M (CH3_TXCOMINIT_M_out),
    .CH3_TXCOMSAS_M (CH3_TXCOMSAS_M_out),
    .CH3_TXCOMWAKE_M (CH3_TXCOMWAKE_M_out),
    .CH3_TXCTRL0_M (CH3_TXCTRL0_M_out),
    .CH3_TXCTRL1_M (CH3_TXCTRL1_M_out),
    .CH3_TXCTRL2_M (CH3_TXCTRL2_M_out),
    .CH3_TXDAPICODEOVRDEN_M (CH3_TXDAPICODEOVRDEN_M_out),
    .CH3_TXDAPICODERESET_M (CH3_TXDAPICODERESET_M_out),
    .CH3_TXDATAEXTENDRSVD_M (CH3_TXDATAEXTENDRSVD_M_out),
    .CH3_TXDATA_M (CH3_TXDATA_M_out),
    .CH3_TXDCCDONE (CH3_TXDCCDONE_out),
    .CH3_TXDEEMPH_M (CH3_TXDEEMPH_M_out),
    .CH3_TXDETECTRX_M (CH3_TXDETECTRX_M_out),
    .CH3_TXDIFFCTRL_M (CH3_TXDIFFCTRL_M_out),
    .CH3_TXDLYALIGNERR (CH3_TXDLYALIGNERR_out),
    .CH3_TXDLYALIGNPROG (CH3_TXDLYALIGNPROG_out),
    .CH3_TXDLYALIGNREQ_M (CH3_TXDLYALIGNREQ_M_out),
    .CH3_TXELECIDLE_M (CH3_TXELECIDLE_M_out),
    .CH3_TXHEADER_M (CH3_TXHEADER_M_out),
    .CH3_TXINHIBIT_M (CH3_TXINHIBIT_M_out),
    .CH3_TXLATCLK_M (CH3_TXLATCLK_M_out),
    .CH3_TXMAINCURSOR_M (CH3_TXMAINCURSOR_M_out),
    .CH3_TXMARGIN_M (CH3_TXMARGIN_M_out),
    .CH3_TXMLDCHAINDONE_M (CH3_TXMLDCHAINDONE_M_out),
    .CH3_TXMLDCHAINREQ_M (CH3_TXMLDCHAINREQ_M_out),
    .CH3_TXONESZEROS_M (CH3_TXONESZEROS_M_out),
    .CH3_TXPAUSEDELAYALIGN_M (CH3_TXPAUSEDELAYALIGN_M_out),
    .CH3_TXPCSRESETMASK_M (CH3_TXPCSRESETMASK_M_out),
    .CH3_TXPD_M (CH3_TXPD_M_out),
    .CH3_TXPHALIGNDONE (CH3_TXPHALIGNDONE_out),
    .CH3_TXPHALIGNERR (CH3_TXPHALIGNERR_out),
    .CH3_TXPHALIGNOUTRSVD (CH3_TXPHALIGNOUTRSVD_out),
    .CH3_TXPHALIGNREQ_M (CH3_TXPHALIGNREQ_M_out),
    .CH3_TXPHALIGNRESETMASK_M (CH3_TXPHALIGNRESETMASK_M_out),
    .CH3_TXPHDLYPD_M (CH3_TXPHDLYPD_M_out),
    .CH3_TXPHDLYRESETDONE (CH3_TXPHDLYRESETDONE_out),
    .CH3_TXPHDLYRESET_M (CH3_TXPHDLYRESET_M_out),
    .CH3_TXPHDLYTSTCLK_M (CH3_TXPHDLYTSTCLK_M_out),
    .CH3_TXPHSETINITDONE (CH3_TXPHSETINITDONE_out),
    .CH3_TXPHSETINITREQ_M (CH3_TXPHSETINITREQ_M_out),
    .CH3_TXPHSHIFT180DONE (CH3_TXPHSHIFT180DONE_out),
    .CH3_TXPHSHIFT180_M (CH3_TXPHSHIFT180_M_out),
    .CH3_TXPICODEOVRDEN_M (CH3_TXPICODEOVRDEN_M_out),
    .CH3_TXPICODERESET_M (CH3_TXPICODERESET_M_out),
    .CH3_TXPIPPMEN_M (CH3_TXPIPPMEN_M_out),
    .CH3_TXPIPPMSTEPSIZE_M (CH3_TXPIPPMSTEPSIZE_M_out),
    .CH3_TXPISOPD_M (CH3_TXPISOPD_M_out),
    .CH3_TXPMARESETDONE (CH3_TXPMARESETDONE_out),
    .CH3_TXPMARESETMASK_M (CH3_TXPMARESETMASK_M_out),
    .CH3_TXPOLARITY_M (CH3_TXPOLARITY_M_out),
    .CH3_TXPOSTCURSOR_M (CH3_TXPOSTCURSOR_M_out),
    .CH3_TXPRBSFORCEERR_M (CH3_TXPRBSFORCEERR_M_out),
    .CH3_TXPRBSSEL_M (CH3_TXPRBSSEL_M_out),
    .CH3_TXPRECURSOR_M (CH3_TXPRECURSOR_M_out),
    .CH3_TXPROGDIVRESETDONE (CH3_TXPROGDIVRESETDONE_out),
    .CH3_TXPROGDIVRESET_M (CH3_TXPROGDIVRESET_M_out),
    .CH3_TXRATE_M (CH3_TXRATE_M_out),
    .CH3_TXRESETDONE (CH3_TXRESETDONE_out),
    .CH3_TXRESETMODE_M (CH3_TXRESETMODE_M_out),
    .CH3_TXSEQUENCE_M (CH3_TXSEQUENCE_M_out),
    .CH3_TXSWING_M (CH3_TXSWING_M_out),
    .CH3_TXSYNCALLIN_M (CH3_TXSYNCALLIN_M_out),
    .CH3_TXSYNCDONE (CH3_TXSYNCDONE_out),
    .CH3_TXUSERRDY_M (CH3_TXUSERRDY_M_out),
    .CH3_TXUSRCLK_M (CH3_TXUSRCLK_M_out),
    .CORRECTERR (CORRECTERR_out),
    .CSSDRSTB_M (CSSDRSTB_M_out),
    .CSSDSTOPCLKDONE (CSSDSTOPCLKDONE_out),
    .CSSDSTOPCLK_M (CSSDSTOPCLK_M_out),
    .CTRLRSVDIN0_M (CTRLRSVDIN0_M_out),
    .CTRLRSVDIN1_M (CTRLRSVDIN1_M_out),
    .CTRLRSVDOUT (CTRLRSVDOUT_out),
    .DEBUGTRACECLK_M (DEBUGTRACECLK_M_out),
    .DEBUGTRACEREADY_M (DEBUGTRACEREADY_M_out),
    .DEBUGTRACETDATA (DEBUGTRACETDATA_out),
    .DEBUGTRACETVALID (DEBUGTRACETVALID_out),
    .EDTUPDATEB_M (EDTUPDATEB_M_out),
    .GPI_M (GPI_M_out),
    .GPO (GPO_out),
    .GTPOWERGOOD (GTPOWERGOOD_out),
    .HSCLK0_LCPLLCLKRSVD0_M (HSCLK0_LCPLLCLKRSVD0_M_out),
    .HSCLK0_LCPLLCLKRSVD1_M (HSCLK0_LCPLLCLKRSVD1_M_out),
    .HSCLK0_LCPLLFBCLKLOST (HSCLK0_LCPLLFBCLKLOST_out),
    .HSCLK0_LCPLLFBDIV_M (HSCLK0_LCPLLFBDIV_M_out),
    .HSCLK0_LCPLLGTGREFCLK_M (HSCLK0_LCPLLGTGREFCLK_M_out),
    .HSCLK0_LCPLLLOCK (HSCLK0_LCPLLLOCK_out),
    .HSCLK0_LCPLLPD_M (HSCLK0_LCPLLPD_M_out),
    .HSCLK0_LCPLLREFCLKLOST (HSCLK0_LCPLLREFCLKLOST_out),
    .HSCLK0_LCPLLREFCLKMONITOR (HSCLK0_LCPLLREFCLKMONITOR_out),
    .HSCLK0_LCPLLREFCLKSEL_M (HSCLK0_LCPLLREFCLKSEL_M_out),
    .HSCLK0_LCPLLRESETBYPASSMODE_M (HSCLK0_LCPLLRESETBYPASSMODE_M_out),
    .HSCLK0_LCPLLRESETMASK_M (HSCLK0_LCPLLRESETMASK_M_out),
    .HSCLK0_LCPLLRESET_M (HSCLK0_LCPLLRESET_M_out),
    .HSCLK0_LCPLLRSVD0_M (HSCLK0_LCPLLRSVD0_M_out),
    .HSCLK0_LCPLLRSVD1_M (HSCLK0_LCPLLRSVD1_M_out),
    .HSCLK0_LCPLLRSVDOUT (HSCLK0_LCPLLRSVDOUT_out),
    .HSCLK0_LCPLLSDMDATA_M (HSCLK0_LCPLLSDMDATA_M_out),
    .HSCLK0_LCPLLSDMTOGGLE_M (HSCLK0_LCPLLSDMTOGGLE_M_out),
    .HSCLK0_RPLLCLKRSVD0_M (HSCLK0_RPLLCLKRSVD0_M_out),
    .HSCLK0_RPLLCLKRSVD1_M (HSCLK0_RPLLCLKRSVD1_M_out),
    .HSCLK0_RPLLFBCLKLOST (HSCLK0_RPLLFBCLKLOST_out),
    .HSCLK0_RPLLFBDIV_M (HSCLK0_RPLLFBDIV_M_out),
    .HSCLK0_RPLLGTGREFCLK_M (HSCLK0_RPLLGTGREFCLK_M_out),
    .HSCLK0_RPLLLOCK (HSCLK0_RPLLLOCK_out),
    .HSCLK0_RPLLPD_M (HSCLK0_RPLLPD_M_out),
    .HSCLK0_RPLLREFCLKLOST (HSCLK0_RPLLREFCLKLOST_out),
    .HSCLK0_RPLLREFCLKMONITOR (HSCLK0_RPLLREFCLKMONITOR_out),
    .HSCLK0_RPLLREFCLKSEL_M (HSCLK0_RPLLREFCLKSEL_M_out),
    .HSCLK0_RPLLRESETBYPASSMODE_M (HSCLK0_RPLLRESETBYPASSMODE_M_out),
    .HSCLK0_RPLLRESETMASK_M (HSCLK0_RPLLRESETMASK_M_out),
    .HSCLK0_RPLLRESET_M (HSCLK0_RPLLRESET_M_out),
    .HSCLK0_RPLLRSVD0_M (HSCLK0_RPLLRSVD0_M_out),
    .HSCLK0_RPLLRSVD1_M (HSCLK0_RPLLRSVD1_M_out),
    .HSCLK0_RPLLRSVDOUT (HSCLK0_RPLLRSVDOUT_out),
    .HSCLK0_RPLLSDMDATA_M (HSCLK0_RPLLSDMDATA_M_out),
    .HSCLK0_RPLLSDMTOGGLE_M (HSCLK0_RPLLSDMTOGGLE_M_out),
    .HSCLK1_LCPLLCLKRSVD0_M (HSCLK1_LCPLLCLKRSVD0_M_out),
    .HSCLK1_LCPLLCLKRSVD1_M (HSCLK1_LCPLLCLKRSVD1_M_out),
    .HSCLK1_LCPLLFBCLKLOST (HSCLK1_LCPLLFBCLKLOST_out),
    .HSCLK1_LCPLLFBDIV_M (HSCLK1_LCPLLFBDIV_M_out),
    .HSCLK1_LCPLLGTGREFCLK_M (HSCLK1_LCPLLGTGREFCLK_M_out),
    .HSCLK1_LCPLLLOCK (HSCLK1_LCPLLLOCK_out),
    .HSCLK1_LCPLLPD_M (HSCLK1_LCPLLPD_M_out),
    .HSCLK1_LCPLLREFCLKLOST (HSCLK1_LCPLLREFCLKLOST_out),
    .HSCLK1_LCPLLREFCLKMONITOR (HSCLK1_LCPLLREFCLKMONITOR_out),
    .HSCLK1_LCPLLREFCLKSEL_M (HSCLK1_LCPLLREFCLKSEL_M_out),
    .HSCLK1_LCPLLRESETBYPASSMODE_M (HSCLK1_LCPLLRESETBYPASSMODE_M_out),
    .HSCLK1_LCPLLRESETMASK_M (HSCLK1_LCPLLRESETMASK_M_out),
    .HSCLK1_LCPLLRESET_M (HSCLK1_LCPLLRESET_M_out),
    .HSCLK1_LCPLLRSVD0_M (HSCLK1_LCPLLRSVD0_M_out),
    .HSCLK1_LCPLLRSVD1_M (HSCLK1_LCPLLRSVD1_M_out),
    .HSCLK1_LCPLLRSVDOUT (HSCLK1_LCPLLRSVDOUT_out),
    .HSCLK1_LCPLLSDMDATA_M (HSCLK1_LCPLLSDMDATA_M_out),
    .HSCLK1_LCPLLSDMTOGGLE_M (HSCLK1_LCPLLSDMTOGGLE_M_out),
    .HSCLK1_RPLLCLKRSVD0_M (HSCLK1_RPLLCLKRSVD0_M_out),
    .HSCLK1_RPLLCLKRSVD1_M (HSCLK1_RPLLCLKRSVD1_M_out),
    .HSCLK1_RPLLFBCLKLOST (HSCLK1_RPLLFBCLKLOST_out),
    .HSCLK1_RPLLFBDIV_M (HSCLK1_RPLLFBDIV_M_out),
    .HSCLK1_RPLLGTGREFCLK_M (HSCLK1_RPLLGTGREFCLK_M_out),
    .HSCLK1_RPLLLOCK (HSCLK1_RPLLLOCK_out),
    .HSCLK1_RPLLPD_M (HSCLK1_RPLLPD_M_out),
    .HSCLK1_RPLLREFCLKLOST (HSCLK1_RPLLREFCLKLOST_out),
    .HSCLK1_RPLLREFCLKMONITOR (HSCLK1_RPLLREFCLKMONITOR_out),
    .HSCLK1_RPLLREFCLKSEL_M (HSCLK1_RPLLREFCLKSEL_M_out),
    .HSCLK1_RPLLRESETBYPASSMODE_M (HSCLK1_RPLLRESETBYPASSMODE_M_out),
    .HSCLK1_RPLLRESETMASK_M (HSCLK1_RPLLRESETMASK_M_out),
    .HSCLK1_RPLLRESET_M (HSCLK1_RPLLRESET_M_out),
    .HSCLK1_RPLLRSVD0_M (HSCLK1_RPLLRSVD0_M_out),
    .HSCLK1_RPLLRSVD1_M (HSCLK1_RPLLRSVD1_M_out),
    .HSCLK1_RPLLRSVDOUT (HSCLK1_RPLLRSVDOUT_out),
    .HSCLK1_RPLLSDMDATA_M (HSCLK1_RPLLSDMDATA_M_out),
    .HSCLK1_RPLLSDMTOGGLE_M (HSCLK1_RPLLSDMTOGGLE_M_out),
    .M0_AXIS_TDATA (M0_AXIS_TDATA_out),
    .M0_AXIS_TLAST (M0_AXIS_TLAST_out),
    .M0_AXIS_TREADY_M (M0_AXIS_TREADY_M_out),
    .M0_AXIS_TVALID (M0_AXIS_TVALID_out),
    .M1_AXIS_TDATA (M1_AXIS_TDATA_out),
    .M1_AXIS_TLAST (M1_AXIS_TLAST_out),
    .M1_AXIS_TREADY_M (M1_AXIS_TREADY_M_out),
    .M1_AXIS_TVALID (M1_AXIS_TVALID_out),
    .M2_AXIS_TDATA (M2_AXIS_TDATA_out),
    .M2_AXIS_TLAST (M2_AXIS_TLAST_out),
    .M2_AXIS_TREADY_M (M2_AXIS_TREADY_M_out),
    .M2_AXIS_TVALID (M2_AXIS_TVALID_out),
    .MSTRXRESETDONE (MSTRXRESETDONE_out),
    .MSTRXRESET_M (MSTRXRESET_M_out),
    .MSTTXRESETDONE (MSTTXRESETDONE_out),
    .MSTTXRESET_M (MSTTXRESET_M_out),
    .PCIELINKREACHTARGET_M (PCIELINKREACHTARGET_M_out),
    .PCIELTSSM_M (PCIELTSSM_M_out),
    .RCALCMP (RCALCMP_out),
    .RCALENB_M (RCALENB_M_out),
    .RCALOUT (RCALOUT_out),
    .REFCLK0_CLKTESTSIG_M (REFCLK0_CLKTESTSIG_M_out),
    .REFCLK0_GTREFCLKPD_M (REFCLK0_GTREFCLKPD_M_out),
    .REFCLK1_CLKTESTSIG_M (REFCLK1_CLKTESTSIG_M_out),
    .REFCLK1_GTREFCLKPD_M (REFCLK1_GTREFCLKPD_M_out),
    .RXMARGINCLK_M (RXMARGINCLK_M_out),
    .RXMARGINREQACK (RXMARGINREQACK_out),
    .RXMARGINREQCMD_M (RXMARGINREQCMD_M_out),
    .RXMARGINREQLANENUM_M (RXMARGINREQLANENUM_M_out),
    .RXMARGINREQPAYLD_M (RXMARGINREQPAYLD_M_out),
    .RXMARGINREQREQ_M (RXMARGINREQREQ_M_out),
    .RXMARGINRESACK_M (RXMARGINRESACK_M_out),
    .RXMARGINRESCMD (RXMARGINRESCMD_out),
    .RXMARGINRESLANENUM (RXMARGINRESLANENUM_out),
    .RXMARGINRESPAYLD (RXMARGINRESPAYLD_out),
    .RXMARGINRESREQ (RXMARGINRESREQ_out),
    .S0_AXIS_TDATA_M (S0_AXIS_TDATA_M_out),
    .S0_AXIS_TLAST_M (S0_AXIS_TLAST_M_out),
    .S0_AXIS_TREADY (S0_AXIS_TREADY_out),
    .S0_AXIS_TVALID_M (S0_AXIS_TVALID_M_out),
    .S1_AXIS_TDATA_M (S1_AXIS_TDATA_M_out),
    .S1_AXIS_TLAST_M (S1_AXIS_TLAST_M_out),
    .S1_AXIS_TREADY (S1_AXIS_TREADY_out),
    .S1_AXIS_TVALID_M (S1_AXIS_TVALID_M_out),
    .S2_AXIS_TDATA_M (S2_AXIS_TDATA_M_out),
    .S2_AXIS_TLAST_M (S2_AXIS_TLAST_M_out),
    .S2_AXIS_TREADY (S2_AXIS_TREADY_out),
    .S2_AXIS_TVALID_M (S2_AXIS_TVALID_M_out),
    .SCANCLKB_M (SCANCLKB_M_out),
    .SCANCNTRLIN_M (SCANCNTRLIN_M_out),
    .SCANCNTRLOUT (SCANCNTRLOUT_out),
    .SCANENB_M (SCANENB_M_out),
    .SCANIN_M (SCANIN_M_out),
    .SCANOUT (SCANOUT_out),
    .SCANRSTB_M (SCANRSTB_M_out),
    .TRIGACKIN0 (TRIGACKIN0_out),
    .TRIGACKOUT0_M (TRIGACKOUT0_M_out),
    .TRIGIN0_M (TRIGIN0_M_out),
    .TRIGOUT0 (TRIGOUT0_out),
    .TXOUTCLKDBG_NORTH (TXOUTCLKDBG_NORTH_out),
    .TXOUTCLKDBG_SOUTH (TXOUTCLKDBG_SOUTH_out),
    .UBENABLE_M (UBENABLE_M_out),
    .UBINTERRUPT (UBINTERRUPT_out),
    .UBINTR_M (UBINTR_M_out),
    .UBIOLMBRST_M (UBIOLMBRST_M_out),
    .UBMBRST_M (UBMBRST_M_out),
    .UBRXUART_M (UBRXUART_M_out),
    .UBTXUART (UBTXUART_out),
    .UNCORRECTERR (UNCORRECTERR_out),
    .XPIPE_BUFGTCE (XPIPE_BUFGTCE_out),
    .XPIPE_BUFGTCE_1 (XPIPE_BUFGTCE_1_out),
    .XPIPE_BUFGTCE_MASK (XPIPE_BUFGTCE_MASK_out),
    .XPIPE_BUFGTCE_MASK_1 (XPIPE_BUFGTCE_MASK_1_out),
    .XPIPE_BUFGTDIV (XPIPE_BUFGTDIV_out),
    .XPIPE_BUFGTDIV_1 (XPIPE_BUFGTDIV_1_out),
    .XPIPE_BUFGTRST (XPIPE_BUFGTRST_out),
    .XPIPE_BUFGTRST_1 (XPIPE_BUFGTRST_1_out),
    .XPIPE_BUFGTRST_MASK (XPIPE_BUFGTRST_MASK_out),
    .XPIPE_BUFGTRST_MASK_1 (XPIPE_BUFGTRST_MASK_1_out),
    .XPIPE_GT_OUTCLK (XPIPE_GT_OUTCLK_out),
    .XPIPE_GT_OUTCLK_1 (XPIPE_GT_OUTCLK_1_out),
    .XPIPE_GT_PIPECLK_M (XPIPE_GT_PIPECLK_M_out),
    .XPIPE_GT_PIPECLK_M_1 (XPIPE_GT_PIPECLK_M_1_out),
    .XPIPE_GT_RXOUTCLK (XPIPE_GT_RXOUTCLK_out),
    .XPIPE_GT_RXUSRCLK_M (XPIPE_GT_RXUSRCLK_M_out),
    .XPIPE_HSDP_RXDATAVALID (XPIPE_HSDP_RXDATAVALID_out),
    .XPIPE_HSDP_RXDATAVALID_1 (XPIPE_HSDP_RXDATAVALID_1_out),
    .XPIPE_HSDP_RXDATAVALID_2 (XPIPE_HSDP_RXDATAVALID_2_out),
    .XPIPE_HSDP_RXGEARBOXSLIP_M (XPIPE_HSDP_RXGEARBOXSLIP_M_out),
    .XPIPE_HSDP_RXGEARBOXSLIP_M_1 (XPIPE_HSDP_RXGEARBOXSLIP_M_1_out),
    .XPIPE_HSDP_RXGEARBOXSLIP_M_2 (XPIPE_HSDP_RXGEARBOXSLIP_M_2_out),
    .XPIPE_HSDP_RXHEADER (XPIPE_HSDP_RXHEADER_out),
    .XPIPE_HSDP_RXHEADERVALID (XPIPE_HSDP_RXHEADERVALID_out),
    .XPIPE_HSDP_RXHEADERVALID_1 (XPIPE_HSDP_RXHEADERVALID_1_out),
    .XPIPE_HSDP_RXHEADERVALID_2 (XPIPE_HSDP_RXHEADERVALID_2_out),
    .XPIPE_HSDP_RXHEADER_1 (XPIPE_HSDP_RXHEADER_1_out),
    .XPIPE_HSDP_RXHEADER_2 (XPIPE_HSDP_RXHEADER_2_out),
    .XPIPE_HSDP_RXPCSRESET_M (XPIPE_HSDP_RXPCSRESET_M_out),
    .XPIPE_HSDP_RXPCSRESET_M_1 (XPIPE_HSDP_RXPCSRESET_M_1_out),
    .XPIPE_HSDP_RXPCSRESET_M_2 (XPIPE_HSDP_RXPCSRESET_M_2_out),
    .XPIPE_HSDP_RXRESETDONE (XPIPE_HSDP_RXRESETDONE_out),
    .XPIPE_HSDP_RXRESETDONE_1 (XPIPE_HSDP_RXRESETDONE_1_out),
    .XPIPE_HSDP_RXRESETDONE_2 (XPIPE_HSDP_RXRESETDONE_2_out),
    .XPIPE_HSDP_TXHEADER_M (XPIPE_HSDP_TXHEADER_M_out),
    .XPIPE_HSDP_TXHEADER_M_1 (XPIPE_HSDP_TXHEADER_M_1_out),
    .XPIPE_HSDP_TXHEADER_M_2 (XPIPE_HSDP_TXHEADER_M_2_out),
    .XPIPE_HSDP_TXRESETDONE (XPIPE_HSDP_TXRESETDONE_out),
    .XPIPE_HSDP_TXRESETDONE_1 (XPIPE_HSDP_TXRESETDONE_1_out),
    .XPIPE_HSDP_TXRESETDONE_2 (XPIPE_HSDP_TXRESETDONE_2_out),
    .XPIPE_HSDP_TXSEQUENCE_M (XPIPE_HSDP_TXSEQUENCE_M_out),
    .XPIPE_HSDP_TXSEQUENCE_M_1 (XPIPE_HSDP_TXSEQUENCE_M_1_out),
    .XPIPE_HSDP_TXSEQUENCE_M_2 (XPIPE_HSDP_TXSEQUENCE_M_2_out),
    .XPIPE_PCIELINKREACHTARGET_M (XPIPE_PCIELINKREACHTARGET_M_out),
    .XPIPE_PCIELINKREACHTARGET_M_1 (XPIPE_PCIELINKREACHTARGET_M_1_out),
    .XPIPE_PCIELTSSMSTATE_M (XPIPE_PCIELTSSMSTATE_M_out),
    .XPIPE_PCIELTSSMSTATE_M_1 (XPIPE_PCIELTSSMSTATE_M_1_out),
    .XPIPE_PCIE_PERST_N_M (XPIPE_PCIE_PERST_N_M_out),
    .XPIPE_PCIE_PERST_N_M_1 (XPIPE_PCIE_PERST_N_M_1_out),
    .XPIPE_PCIE_RATE_M (XPIPE_PCIE_RATE_M_out),
    .XPIPE_PCIE_RATE_M_1 (XPIPE_PCIE_RATE_M_1_out),
    .XPIPE_PHYESMADAPTSAVE_M (XPIPE_PHYESMADAPTSAVE_M_out),
    .XPIPE_PHYESMADAPTSAVE_M_1 (XPIPE_PHYESMADAPTSAVE_M_1_out),
    .XPIPE_PHYREADY_FR_BOT_M (XPIPE_PHYREADY_FR_BOT_M_out),
    .XPIPE_PHYREADY_TO_BOT (XPIPE_PHYREADY_TO_BOT_out),
    .XPIPE_PHY_READY (XPIPE_PHY_READY_out),
    .XPIPE_PHY_READY_1 (XPIPE_PHY_READY_1_out),
    .XPIPE_PIPE_CH0_PHYSTATUS (XPIPE_PIPE_CH0_PHYSTATUS_out),
    .XPIPE_PIPE_CH0_POWERDOWN_M (XPIPE_PIPE_CH0_POWERDOWN_M_out),
    .XPIPE_PIPE_CH0_RXCHARISK (XPIPE_PIPE_CH0_RXCHARISK_out),
    .XPIPE_PIPE_CH0_RXDATA (XPIPE_PIPE_CH0_RXDATA_out),
    .XPIPE_PIPE_CH0_RXDATAVALID (XPIPE_PIPE_CH0_RXDATAVALID_out),
    .XPIPE_PIPE_CH0_RXELECIDLE (XPIPE_PIPE_CH0_RXELECIDLE_out),
    .XPIPE_PIPE_CH0_RXPOLARITY_M (XPIPE_PIPE_CH0_RXPOLARITY_M_out),
    .XPIPE_PIPE_CH0_RXSTARTBLOCK (XPIPE_PIPE_CH0_RXSTARTBLOCK_out),
    .XPIPE_PIPE_CH0_RXSTATUS (XPIPE_PIPE_CH0_RXSTATUS_out),
    .XPIPE_PIPE_CH0_RXSYNCHEADER (XPIPE_PIPE_CH0_RXSYNCHEADER_out),
    .XPIPE_PIPE_CH0_RXTERMINATION_M (XPIPE_PIPE_CH0_RXTERMINATION_M_out),
    .XPIPE_PIPE_CH0_RXVALID (XPIPE_PIPE_CH0_RXVALID_out),
    .XPIPE_PIPE_CH0_TXCHARISK_M (XPIPE_PIPE_CH0_TXCHARISK_M_out),
    .XPIPE_PIPE_CH0_TXCOMPLIANCE_M (XPIPE_PIPE_CH0_TXCOMPLIANCE_M_out),
    .XPIPE_PIPE_CH0_TXDATAVALID_M (XPIPE_PIPE_CH0_TXDATAVALID_M_out),
    .XPIPE_PIPE_CH0_TXDATA_M (XPIPE_PIPE_CH0_TXDATA_M_out),
    .XPIPE_PIPE_CH0_TXDEEMPH_M (XPIPE_PIPE_CH0_TXDEEMPH_M_out),
    .XPIPE_PIPE_CH0_TXDETECTRXLOOPBACK_M (XPIPE_PIPE_CH0_TXDETECTRXLOOPBACK_M_out),
    .XPIPE_PIPE_CH0_TXELECIDLE_M (XPIPE_PIPE_CH0_TXELECIDLE_M_out),
    .XPIPE_PIPE_CH0_TXMAINCURSOR_M (XPIPE_PIPE_CH0_TXMAINCURSOR_M_out),
    .XPIPE_PIPE_CH0_TXMARGIN_M (XPIPE_PIPE_CH0_TXMARGIN_M_out),
    .XPIPE_PIPE_CH0_TXPOSTCURSOR_M (XPIPE_PIPE_CH0_TXPOSTCURSOR_M_out),
    .XPIPE_PIPE_CH0_TXPRECURSOR_M (XPIPE_PIPE_CH0_TXPRECURSOR_M_out),
    .XPIPE_PIPE_CH0_TXSTARTBLOCK_M (XPIPE_PIPE_CH0_TXSTARTBLOCK_M_out),
    .XPIPE_PIPE_CH0_TXSWING_M (XPIPE_PIPE_CH0_TXSWING_M_out),
    .XPIPE_PIPE_CH0_TXSYNCHEADER_M (XPIPE_PIPE_CH0_TXSYNCHEADER_M_out),
    .XPIPE_PIPE_CH10_PHYSTATUS (XPIPE_PIPE_CH10_PHYSTATUS_out),
    .XPIPE_PIPE_CH10_POWERDOWN_M (XPIPE_PIPE_CH10_POWERDOWN_M_out),
    .XPIPE_PIPE_CH10_RXCHARISK (XPIPE_PIPE_CH10_RXCHARISK_out),
    .XPIPE_PIPE_CH10_RXDATA (XPIPE_PIPE_CH10_RXDATA_out),
    .XPIPE_PIPE_CH10_RXDATAVALID (XPIPE_PIPE_CH10_RXDATAVALID_out),
    .XPIPE_PIPE_CH10_RXELECIDLE (XPIPE_PIPE_CH10_RXELECIDLE_out),
    .XPIPE_PIPE_CH10_RXPOLARITY_M (XPIPE_PIPE_CH10_RXPOLARITY_M_out),
    .XPIPE_PIPE_CH10_RXSTARTBLOCK (XPIPE_PIPE_CH10_RXSTARTBLOCK_out),
    .XPIPE_PIPE_CH10_RXSTATUS (XPIPE_PIPE_CH10_RXSTATUS_out),
    .XPIPE_PIPE_CH10_RXSYNCHEADER (XPIPE_PIPE_CH10_RXSYNCHEADER_out),
    .XPIPE_PIPE_CH10_RXTERMINATION_M (XPIPE_PIPE_CH10_RXTERMINATION_M_out),
    .XPIPE_PIPE_CH10_RXVALID (XPIPE_PIPE_CH10_RXVALID_out),
    .XPIPE_PIPE_CH10_TXCHARISK_M (XPIPE_PIPE_CH10_TXCHARISK_M_out),
    .XPIPE_PIPE_CH10_TXCOMPLIANCE_M (XPIPE_PIPE_CH10_TXCOMPLIANCE_M_out),
    .XPIPE_PIPE_CH10_TXDATAVALID_M (XPIPE_PIPE_CH10_TXDATAVALID_M_out),
    .XPIPE_PIPE_CH10_TXDATA_M (XPIPE_PIPE_CH10_TXDATA_M_out),
    .XPIPE_PIPE_CH10_TXDEEMPH_M (XPIPE_PIPE_CH10_TXDEEMPH_M_out),
    .XPIPE_PIPE_CH10_TXDETECTRXLOOPBACK_M (XPIPE_PIPE_CH10_TXDETECTRXLOOPBACK_M_out),
    .XPIPE_PIPE_CH10_TXELECIDLE_M (XPIPE_PIPE_CH10_TXELECIDLE_M_out),
    .XPIPE_PIPE_CH10_TXMAINCURSOR_M (XPIPE_PIPE_CH10_TXMAINCURSOR_M_out),
    .XPIPE_PIPE_CH10_TXMARGIN_M (XPIPE_PIPE_CH10_TXMARGIN_M_out),
    .XPIPE_PIPE_CH10_TXPOSTCURSOR_M (XPIPE_PIPE_CH10_TXPOSTCURSOR_M_out),
    .XPIPE_PIPE_CH10_TXPRECURSOR_M (XPIPE_PIPE_CH10_TXPRECURSOR_M_out),
    .XPIPE_PIPE_CH10_TXSTARTBLOCK_M (XPIPE_PIPE_CH10_TXSTARTBLOCK_M_out),
    .XPIPE_PIPE_CH10_TXSWING_M (XPIPE_PIPE_CH10_TXSWING_M_out),
    .XPIPE_PIPE_CH10_TXSYNCHEADER_M (XPIPE_PIPE_CH10_TXSYNCHEADER_M_out),
    .XPIPE_PIPE_CH11_PHYSTATUS (XPIPE_PIPE_CH11_PHYSTATUS_out),
    .XPIPE_PIPE_CH11_POWERDOWN_M (XPIPE_PIPE_CH11_POWERDOWN_M_out),
    .XPIPE_PIPE_CH11_RXCHARISK (XPIPE_PIPE_CH11_RXCHARISK_out),
    .XPIPE_PIPE_CH11_RXDATA (XPIPE_PIPE_CH11_RXDATA_out),
    .XPIPE_PIPE_CH11_RXDATAVALID (XPIPE_PIPE_CH11_RXDATAVALID_out),
    .XPIPE_PIPE_CH11_RXELECIDLE (XPIPE_PIPE_CH11_RXELECIDLE_out),
    .XPIPE_PIPE_CH11_RXPOLARITY_M (XPIPE_PIPE_CH11_RXPOLARITY_M_out),
    .XPIPE_PIPE_CH11_RXSTARTBLOCK (XPIPE_PIPE_CH11_RXSTARTBLOCK_out),
    .XPIPE_PIPE_CH11_RXSTATUS (XPIPE_PIPE_CH11_RXSTATUS_out),
    .XPIPE_PIPE_CH11_RXSYNCHEADER (XPIPE_PIPE_CH11_RXSYNCHEADER_out),
    .XPIPE_PIPE_CH11_RXTERMINATION_M (XPIPE_PIPE_CH11_RXTERMINATION_M_out),
    .XPIPE_PIPE_CH11_RXVALID (XPIPE_PIPE_CH11_RXVALID_out),
    .XPIPE_PIPE_CH11_TXCHARISK_M (XPIPE_PIPE_CH11_TXCHARISK_M_out),
    .XPIPE_PIPE_CH11_TXCOMPLIANCE_M (XPIPE_PIPE_CH11_TXCOMPLIANCE_M_out),
    .XPIPE_PIPE_CH11_TXDATAVALID_M (XPIPE_PIPE_CH11_TXDATAVALID_M_out),
    .XPIPE_PIPE_CH11_TXDATA_M (XPIPE_PIPE_CH11_TXDATA_M_out),
    .XPIPE_PIPE_CH11_TXDEEMPH_M (XPIPE_PIPE_CH11_TXDEEMPH_M_out),
    .XPIPE_PIPE_CH11_TXDETECTRXLOOPBACK_M (XPIPE_PIPE_CH11_TXDETECTRXLOOPBACK_M_out),
    .XPIPE_PIPE_CH11_TXELECIDLE_M (XPIPE_PIPE_CH11_TXELECIDLE_M_out),
    .XPIPE_PIPE_CH11_TXMAINCURSOR_M (XPIPE_PIPE_CH11_TXMAINCURSOR_M_out),
    .XPIPE_PIPE_CH11_TXMARGIN_M (XPIPE_PIPE_CH11_TXMARGIN_M_out),
    .XPIPE_PIPE_CH11_TXPOSTCURSOR_M (XPIPE_PIPE_CH11_TXPOSTCURSOR_M_out),
    .XPIPE_PIPE_CH11_TXPRECURSOR_M (XPIPE_PIPE_CH11_TXPRECURSOR_M_out),
    .XPIPE_PIPE_CH11_TXSTARTBLOCK_M (XPIPE_PIPE_CH11_TXSTARTBLOCK_M_out),
    .XPIPE_PIPE_CH11_TXSWING_M (XPIPE_PIPE_CH11_TXSWING_M_out),
    .XPIPE_PIPE_CH11_TXSYNCHEADER_M (XPIPE_PIPE_CH11_TXSYNCHEADER_M_out),
    .XPIPE_PIPE_CH12_PHYSTATUS (XPIPE_PIPE_CH12_PHYSTATUS_out),
    .XPIPE_PIPE_CH12_POWERDOWN_M (XPIPE_PIPE_CH12_POWERDOWN_M_out),
    .XPIPE_PIPE_CH12_RXCHARISK (XPIPE_PIPE_CH12_RXCHARISK_out),
    .XPIPE_PIPE_CH12_RXDATA (XPIPE_PIPE_CH12_RXDATA_out),
    .XPIPE_PIPE_CH12_RXDATAVALID (XPIPE_PIPE_CH12_RXDATAVALID_out),
    .XPIPE_PIPE_CH12_RXELECIDLE (XPIPE_PIPE_CH12_RXELECIDLE_out),
    .XPIPE_PIPE_CH12_RXPOLARITY_M (XPIPE_PIPE_CH12_RXPOLARITY_M_out),
    .XPIPE_PIPE_CH12_RXSTARTBLOCK (XPIPE_PIPE_CH12_RXSTARTBLOCK_out),
    .XPIPE_PIPE_CH12_RXSTATUS (XPIPE_PIPE_CH12_RXSTATUS_out),
    .XPIPE_PIPE_CH12_RXSYNCHEADER (XPIPE_PIPE_CH12_RXSYNCHEADER_out),
    .XPIPE_PIPE_CH12_RXTERMINATION_M (XPIPE_PIPE_CH12_RXTERMINATION_M_out),
    .XPIPE_PIPE_CH12_RXVALID (XPIPE_PIPE_CH12_RXVALID_out),
    .XPIPE_PIPE_CH12_TXCHARISK_M (XPIPE_PIPE_CH12_TXCHARISK_M_out),
    .XPIPE_PIPE_CH12_TXCOMPLIANCE_M (XPIPE_PIPE_CH12_TXCOMPLIANCE_M_out),
    .XPIPE_PIPE_CH12_TXDATAVALID_M (XPIPE_PIPE_CH12_TXDATAVALID_M_out),
    .XPIPE_PIPE_CH12_TXDATA_M (XPIPE_PIPE_CH12_TXDATA_M_out),
    .XPIPE_PIPE_CH12_TXDEEMPH_M (XPIPE_PIPE_CH12_TXDEEMPH_M_out),
    .XPIPE_PIPE_CH12_TXDETECTRXLOOPBACK_M (XPIPE_PIPE_CH12_TXDETECTRXLOOPBACK_M_out),
    .XPIPE_PIPE_CH12_TXELECIDLE_M (XPIPE_PIPE_CH12_TXELECIDLE_M_out),
    .XPIPE_PIPE_CH12_TXMAINCURSOR_M (XPIPE_PIPE_CH12_TXMAINCURSOR_M_out),
    .XPIPE_PIPE_CH12_TXMARGIN_M (XPIPE_PIPE_CH12_TXMARGIN_M_out),
    .XPIPE_PIPE_CH12_TXPOSTCURSOR_M (XPIPE_PIPE_CH12_TXPOSTCURSOR_M_out),
    .XPIPE_PIPE_CH12_TXPRECURSOR_M (XPIPE_PIPE_CH12_TXPRECURSOR_M_out),
    .XPIPE_PIPE_CH12_TXSTARTBLOCK_M (XPIPE_PIPE_CH12_TXSTARTBLOCK_M_out),
    .XPIPE_PIPE_CH12_TXSWING_M (XPIPE_PIPE_CH12_TXSWING_M_out),
    .XPIPE_PIPE_CH12_TXSYNCHEADER_M (XPIPE_PIPE_CH12_TXSYNCHEADER_M_out),
    .XPIPE_PIPE_CH13_PHYSTATUS (XPIPE_PIPE_CH13_PHYSTATUS_out),
    .XPIPE_PIPE_CH13_POWERDOWN_M (XPIPE_PIPE_CH13_POWERDOWN_M_out),
    .XPIPE_PIPE_CH13_RXCHARISK (XPIPE_PIPE_CH13_RXCHARISK_out),
    .XPIPE_PIPE_CH13_RXDATA (XPIPE_PIPE_CH13_RXDATA_out),
    .XPIPE_PIPE_CH13_RXDATAVALID (XPIPE_PIPE_CH13_RXDATAVALID_out),
    .XPIPE_PIPE_CH13_RXELECIDLE (XPIPE_PIPE_CH13_RXELECIDLE_out),
    .XPIPE_PIPE_CH13_RXPOLARITY_M (XPIPE_PIPE_CH13_RXPOLARITY_M_out),
    .XPIPE_PIPE_CH13_RXSTARTBLOCK (XPIPE_PIPE_CH13_RXSTARTBLOCK_out),
    .XPIPE_PIPE_CH13_RXSTATUS (XPIPE_PIPE_CH13_RXSTATUS_out),
    .XPIPE_PIPE_CH13_RXSYNCHEADER (XPIPE_PIPE_CH13_RXSYNCHEADER_out),
    .XPIPE_PIPE_CH13_RXTERMINATION_M (XPIPE_PIPE_CH13_RXTERMINATION_M_out),
    .XPIPE_PIPE_CH13_RXVALID (XPIPE_PIPE_CH13_RXVALID_out),
    .XPIPE_PIPE_CH13_TXCHARISK_M (XPIPE_PIPE_CH13_TXCHARISK_M_out),
    .XPIPE_PIPE_CH13_TXCOMPLIANCE_M (XPIPE_PIPE_CH13_TXCOMPLIANCE_M_out),
    .XPIPE_PIPE_CH13_TXDATAVALID_M (XPIPE_PIPE_CH13_TXDATAVALID_M_out),
    .XPIPE_PIPE_CH13_TXDATA_M (XPIPE_PIPE_CH13_TXDATA_M_out),
    .XPIPE_PIPE_CH13_TXDEEMPH_M (XPIPE_PIPE_CH13_TXDEEMPH_M_out),
    .XPIPE_PIPE_CH13_TXDETECTRXLOOPBACK_M (XPIPE_PIPE_CH13_TXDETECTRXLOOPBACK_M_out),
    .XPIPE_PIPE_CH13_TXELECIDLE_M (XPIPE_PIPE_CH13_TXELECIDLE_M_out),
    .XPIPE_PIPE_CH13_TXMAINCURSOR_M (XPIPE_PIPE_CH13_TXMAINCURSOR_M_out),
    .XPIPE_PIPE_CH13_TXMARGIN_M (XPIPE_PIPE_CH13_TXMARGIN_M_out),
    .XPIPE_PIPE_CH13_TXPOSTCURSOR_M (XPIPE_PIPE_CH13_TXPOSTCURSOR_M_out),
    .XPIPE_PIPE_CH13_TXPRECURSOR_M (XPIPE_PIPE_CH13_TXPRECURSOR_M_out),
    .XPIPE_PIPE_CH13_TXSTARTBLOCK_M (XPIPE_PIPE_CH13_TXSTARTBLOCK_M_out),
    .XPIPE_PIPE_CH13_TXSWING_M (XPIPE_PIPE_CH13_TXSWING_M_out),
    .XPIPE_PIPE_CH13_TXSYNCHEADER_M (XPIPE_PIPE_CH13_TXSYNCHEADER_M_out),
    .XPIPE_PIPE_CH14_PHYSTATUS (XPIPE_PIPE_CH14_PHYSTATUS_out),
    .XPIPE_PIPE_CH14_POWERDOWN_M (XPIPE_PIPE_CH14_POWERDOWN_M_out),
    .XPIPE_PIPE_CH14_RXCHARISK (XPIPE_PIPE_CH14_RXCHARISK_out),
    .XPIPE_PIPE_CH14_RXDATA (XPIPE_PIPE_CH14_RXDATA_out),
    .XPIPE_PIPE_CH14_RXDATAVALID (XPIPE_PIPE_CH14_RXDATAVALID_out),
    .XPIPE_PIPE_CH14_RXELECIDLE (XPIPE_PIPE_CH14_RXELECIDLE_out),
    .XPIPE_PIPE_CH14_RXPOLARITY_M (XPIPE_PIPE_CH14_RXPOLARITY_M_out),
    .XPIPE_PIPE_CH14_RXSTARTBLOCK (XPIPE_PIPE_CH14_RXSTARTBLOCK_out),
    .XPIPE_PIPE_CH14_RXSTATUS (XPIPE_PIPE_CH14_RXSTATUS_out),
    .XPIPE_PIPE_CH14_RXSYNCHEADER (XPIPE_PIPE_CH14_RXSYNCHEADER_out),
    .XPIPE_PIPE_CH14_RXTERMINATION_M (XPIPE_PIPE_CH14_RXTERMINATION_M_out),
    .XPIPE_PIPE_CH14_RXVALID (XPIPE_PIPE_CH14_RXVALID_out),
    .XPIPE_PIPE_CH14_TXCHARISK_M (XPIPE_PIPE_CH14_TXCHARISK_M_out),
    .XPIPE_PIPE_CH14_TXCOMPLIANCE_M (XPIPE_PIPE_CH14_TXCOMPLIANCE_M_out),
    .XPIPE_PIPE_CH14_TXDATAVALID_M (XPIPE_PIPE_CH14_TXDATAVALID_M_out),
    .XPIPE_PIPE_CH14_TXDATA_M (XPIPE_PIPE_CH14_TXDATA_M_out),
    .XPIPE_PIPE_CH14_TXDEEMPH_M (XPIPE_PIPE_CH14_TXDEEMPH_M_out),
    .XPIPE_PIPE_CH14_TXDETECTRXLOOPBACK_M (XPIPE_PIPE_CH14_TXDETECTRXLOOPBACK_M_out),
    .XPIPE_PIPE_CH14_TXELECIDLE_M (XPIPE_PIPE_CH14_TXELECIDLE_M_out),
    .XPIPE_PIPE_CH14_TXMAINCURSOR_M (XPIPE_PIPE_CH14_TXMAINCURSOR_M_out),
    .XPIPE_PIPE_CH14_TXMARGIN_M (XPIPE_PIPE_CH14_TXMARGIN_M_out),
    .XPIPE_PIPE_CH14_TXPOSTCURSOR_M (XPIPE_PIPE_CH14_TXPOSTCURSOR_M_out),
    .XPIPE_PIPE_CH14_TXPRECURSOR_M (XPIPE_PIPE_CH14_TXPRECURSOR_M_out),
    .XPIPE_PIPE_CH14_TXSTARTBLOCK_M (XPIPE_PIPE_CH14_TXSTARTBLOCK_M_out),
    .XPIPE_PIPE_CH14_TXSWING_M (XPIPE_PIPE_CH14_TXSWING_M_out),
    .XPIPE_PIPE_CH14_TXSYNCHEADER_M (XPIPE_PIPE_CH14_TXSYNCHEADER_M_out),
    .XPIPE_PIPE_CH15_PHYSTATUS (XPIPE_PIPE_CH15_PHYSTATUS_out),
    .XPIPE_PIPE_CH15_POWERDOWN_M (XPIPE_PIPE_CH15_POWERDOWN_M_out),
    .XPIPE_PIPE_CH15_RXCHARISK (XPIPE_PIPE_CH15_RXCHARISK_out),
    .XPIPE_PIPE_CH15_RXDATA (XPIPE_PIPE_CH15_RXDATA_out),
    .XPIPE_PIPE_CH15_RXDATAVALID (XPIPE_PIPE_CH15_RXDATAVALID_out),
    .XPIPE_PIPE_CH15_RXELECIDLE (XPIPE_PIPE_CH15_RXELECIDLE_out),
    .XPIPE_PIPE_CH15_RXPOLARITY_M (XPIPE_PIPE_CH15_RXPOLARITY_M_out),
    .XPIPE_PIPE_CH15_RXSTARTBLOCK (XPIPE_PIPE_CH15_RXSTARTBLOCK_out),
    .XPIPE_PIPE_CH15_RXSTATUS (XPIPE_PIPE_CH15_RXSTATUS_out),
    .XPIPE_PIPE_CH15_RXSYNCHEADER (XPIPE_PIPE_CH15_RXSYNCHEADER_out),
    .XPIPE_PIPE_CH15_RXTERMINATION_M (XPIPE_PIPE_CH15_RXTERMINATION_M_out),
    .XPIPE_PIPE_CH15_RXVALID (XPIPE_PIPE_CH15_RXVALID_out),
    .XPIPE_PIPE_CH15_TXCHARISK_M (XPIPE_PIPE_CH15_TXCHARISK_M_out),
    .XPIPE_PIPE_CH15_TXCOMPLIANCE_M (XPIPE_PIPE_CH15_TXCOMPLIANCE_M_out),
    .XPIPE_PIPE_CH15_TXDATAVALID_M (XPIPE_PIPE_CH15_TXDATAVALID_M_out),
    .XPIPE_PIPE_CH15_TXDATA_M (XPIPE_PIPE_CH15_TXDATA_M_out),
    .XPIPE_PIPE_CH15_TXDEEMPH_M (XPIPE_PIPE_CH15_TXDEEMPH_M_out),
    .XPIPE_PIPE_CH15_TXDETECTRXLOOPBACK_M (XPIPE_PIPE_CH15_TXDETECTRXLOOPBACK_M_out),
    .XPIPE_PIPE_CH15_TXELECIDLE_M (XPIPE_PIPE_CH15_TXELECIDLE_M_out),
    .XPIPE_PIPE_CH15_TXMAINCURSOR_M (XPIPE_PIPE_CH15_TXMAINCURSOR_M_out),
    .XPIPE_PIPE_CH15_TXMARGIN_M (XPIPE_PIPE_CH15_TXMARGIN_M_out),
    .XPIPE_PIPE_CH15_TXPOSTCURSOR_M (XPIPE_PIPE_CH15_TXPOSTCURSOR_M_out),
    .XPIPE_PIPE_CH15_TXPRECURSOR_M (XPIPE_PIPE_CH15_TXPRECURSOR_M_out),
    .XPIPE_PIPE_CH15_TXSTARTBLOCK_M (XPIPE_PIPE_CH15_TXSTARTBLOCK_M_out),
    .XPIPE_PIPE_CH15_TXSWING_M (XPIPE_PIPE_CH15_TXSWING_M_out),
    .XPIPE_PIPE_CH15_TXSYNCHEADER_M (XPIPE_PIPE_CH15_TXSYNCHEADER_M_out),
    .XPIPE_PIPE_CH1_PHYSTATUS (XPIPE_PIPE_CH1_PHYSTATUS_out),
    .XPIPE_PIPE_CH1_POWERDOWN_M (XPIPE_PIPE_CH1_POWERDOWN_M_out),
    .XPIPE_PIPE_CH1_RXCHARISK (XPIPE_PIPE_CH1_RXCHARISK_out),
    .XPIPE_PIPE_CH1_RXDATA (XPIPE_PIPE_CH1_RXDATA_out),
    .XPIPE_PIPE_CH1_RXDATAVALID (XPIPE_PIPE_CH1_RXDATAVALID_out),
    .XPIPE_PIPE_CH1_RXELECIDLE (XPIPE_PIPE_CH1_RXELECIDLE_out),
    .XPIPE_PIPE_CH1_RXPOLARITY_M (XPIPE_PIPE_CH1_RXPOLARITY_M_out),
    .XPIPE_PIPE_CH1_RXSTARTBLOCK (XPIPE_PIPE_CH1_RXSTARTBLOCK_out),
    .XPIPE_PIPE_CH1_RXSTATUS (XPIPE_PIPE_CH1_RXSTATUS_out),
    .XPIPE_PIPE_CH1_RXSYNCHEADER (XPIPE_PIPE_CH1_RXSYNCHEADER_out),
    .XPIPE_PIPE_CH1_RXTERMINATION_M (XPIPE_PIPE_CH1_RXTERMINATION_M_out),
    .XPIPE_PIPE_CH1_RXVALID (XPIPE_PIPE_CH1_RXVALID_out),
    .XPIPE_PIPE_CH1_TXCHARISK_M (XPIPE_PIPE_CH1_TXCHARISK_M_out),
    .XPIPE_PIPE_CH1_TXCOMPLIANCE_M (XPIPE_PIPE_CH1_TXCOMPLIANCE_M_out),
    .XPIPE_PIPE_CH1_TXDATAVALID_M (XPIPE_PIPE_CH1_TXDATAVALID_M_out),
    .XPIPE_PIPE_CH1_TXDATA_M (XPIPE_PIPE_CH1_TXDATA_M_out),
    .XPIPE_PIPE_CH1_TXDEEMPH_M (XPIPE_PIPE_CH1_TXDEEMPH_M_out),
    .XPIPE_PIPE_CH1_TXDETECTRXLOOPBACK_M (XPIPE_PIPE_CH1_TXDETECTRXLOOPBACK_M_out),
    .XPIPE_PIPE_CH1_TXELECIDLE_M (XPIPE_PIPE_CH1_TXELECIDLE_M_out),
    .XPIPE_PIPE_CH1_TXMAINCURSOR_M (XPIPE_PIPE_CH1_TXMAINCURSOR_M_out),
    .XPIPE_PIPE_CH1_TXMARGIN_M (XPIPE_PIPE_CH1_TXMARGIN_M_out),
    .XPIPE_PIPE_CH1_TXPOSTCURSOR_M (XPIPE_PIPE_CH1_TXPOSTCURSOR_M_out),
    .XPIPE_PIPE_CH1_TXPRECURSOR_M (XPIPE_PIPE_CH1_TXPRECURSOR_M_out),
    .XPIPE_PIPE_CH1_TXSTARTBLOCK_M (XPIPE_PIPE_CH1_TXSTARTBLOCK_M_out),
    .XPIPE_PIPE_CH1_TXSWING_M (XPIPE_PIPE_CH1_TXSWING_M_out),
    .XPIPE_PIPE_CH1_TXSYNCHEADER_M (XPIPE_PIPE_CH1_TXSYNCHEADER_M_out),
    .XPIPE_PIPE_CH2_PHYSTATUS (XPIPE_PIPE_CH2_PHYSTATUS_out),
    .XPIPE_PIPE_CH2_POWERDOWN_M (XPIPE_PIPE_CH2_POWERDOWN_M_out),
    .XPIPE_PIPE_CH2_RXCHARISK (XPIPE_PIPE_CH2_RXCHARISK_out),
    .XPIPE_PIPE_CH2_RXDATA (XPIPE_PIPE_CH2_RXDATA_out),
    .XPIPE_PIPE_CH2_RXDATAVALID (XPIPE_PIPE_CH2_RXDATAVALID_out),
    .XPIPE_PIPE_CH2_RXELECIDLE (XPIPE_PIPE_CH2_RXELECIDLE_out),
    .XPIPE_PIPE_CH2_RXPOLARITY_M (XPIPE_PIPE_CH2_RXPOLARITY_M_out),
    .XPIPE_PIPE_CH2_RXSTARTBLOCK (XPIPE_PIPE_CH2_RXSTARTBLOCK_out),
    .XPIPE_PIPE_CH2_RXSTATUS (XPIPE_PIPE_CH2_RXSTATUS_out),
    .XPIPE_PIPE_CH2_RXSYNCHEADER (XPIPE_PIPE_CH2_RXSYNCHEADER_out),
    .XPIPE_PIPE_CH2_RXTERMINATION_M (XPIPE_PIPE_CH2_RXTERMINATION_M_out),
    .XPIPE_PIPE_CH2_RXVALID (XPIPE_PIPE_CH2_RXVALID_out),
    .XPIPE_PIPE_CH2_TXCHARISK_M (XPIPE_PIPE_CH2_TXCHARISK_M_out),
    .XPIPE_PIPE_CH2_TXCOMPLIANCE_M (XPIPE_PIPE_CH2_TXCOMPLIANCE_M_out),
    .XPIPE_PIPE_CH2_TXDATAVALID_M (XPIPE_PIPE_CH2_TXDATAVALID_M_out),
    .XPIPE_PIPE_CH2_TXDATA_M (XPIPE_PIPE_CH2_TXDATA_M_out),
    .XPIPE_PIPE_CH2_TXDEEMPH_M (XPIPE_PIPE_CH2_TXDEEMPH_M_out),
    .XPIPE_PIPE_CH2_TXDETECTRXLOOPBACK_M (XPIPE_PIPE_CH2_TXDETECTRXLOOPBACK_M_out),
    .XPIPE_PIPE_CH2_TXELECIDLE_M (XPIPE_PIPE_CH2_TXELECIDLE_M_out),
    .XPIPE_PIPE_CH2_TXMAINCURSOR_M (XPIPE_PIPE_CH2_TXMAINCURSOR_M_out),
    .XPIPE_PIPE_CH2_TXMARGIN_M (XPIPE_PIPE_CH2_TXMARGIN_M_out),
    .XPIPE_PIPE_CH2_TXPOSTCURSOR_M (XPIPE_PIPE_CH2_TXPOSTCURSOR_M_out),
    .XPIPE_PIPE_CH2_TXPRECURSOR_M (XPIPE_PIPE_CH2_TXPRECURSOR_M_out),
    .XPIPE_PIPE_CH2_TXSTARTBLOCK_M (XPIPE_PIPE_CH2_TXSTARTBLOCK_M_out),
    .XPIPE_PIPE_CH2_TXSWING_M (XPIPE_PIPE_CH2_TXSWING_M_out),
    .XPIPE_PIPE_CH2_TXSYNCHEADER_M (XPIPE_PIPE_CH2_TXSYNCHEADER_M_out),
    .XPIPE_PIPE_CH3_PHYSTATUS (XPIPE_PIPE_CH3_PHYSTATUS_out),
    .XPIPE_PIPE_CH3_POWERDOWN_M (XPIPE_PIPE_CH3_POWERDOWN_M_out),
    .XPIPE_PIPE_CH3_RXCHARISK (XPIPE_PIPE_CH3_RXCHARISK_out),
    .XPIPE_PIPE_CH3_RXDATA (XPIPE_PIPE_CH3_RXDATA_out),
    .XPIPE_PIPE_CH3_RXDATAVALID (XPIPE_PIPE_CH3_RXDATAVALID_out),
    .XPIPE_PIPE_CH3_RXELECIDLE (XPIPE_PIPE_CH3_RXELECIDLE_out),
    .XPIPE_PIPE_CH3_RXPOLARITY_M (XPIPE_PIPE_CH3_RXPOLARITY_M_out),
    .XPIPE_PIPE_CH3_RXSTARTBLOCK (XPIPE_PIPE_CH3_RXSTARTBLOCK_out),
    .XPIPE_PIPE_CH3_RXSTATUS (XPIPE_PIPE_CH3_RXSTATUS_out),
    .XPIPE_PIPE_CH3_RXSYNCHEADER (XPIPE_PIPE_CH3_RXSYNCHEADER_out),
    .XPIPE_PIPE_CH3_RXTERMINATION_M (XPIPE_PIPE_CH3_RXTERMINATION_M_out),
    .XPIPE_PIPE_CH3_RXVALID (XPIPE_PIPE_CH3_RXVALID_out),
    .XPIPE_PIPE_CH3_TXCHARISK_M (XPIPE_PIPE_CH3_TXCHARISK_M_out),
    .XPIPE_PIPE_CH3_TXCOMPLIANCE_M (XPIPE_PIPE_CH3_TXCOMPLIANCE_M_out),
    .XPIPE_PIPE_CH3_TXDATAVALID_M (XPIPE_PIPE_CH3_TXDATAVALID_M_out),
    .XPIPE_PIPE_CH3_TXDATA_M (XPIPE_PIPE_CH3_TXDATA_M_out),
    .XPIPE_PIPE_CH3_TXDEEMPH_M (XPIPE_PIPE_CH3_TXDEEMPH_M_out),
    .XPIPE_PIPE_CH3_TXDETECTRXLOOPBACK_M (XPIPE_PIPE_CH3_TXDETECTRXLOOPBACK_M_out),
    .XPIPE_PIPE_CH3_TXELECIDLE_M (XPIPE_PIPE_CH3_TXELECIDLE_M_out),
    .XPIPE_PIPE_CH3_TXMAINCURSOR_M (XPIPE_PIPE_CH3_TXMAINCURSOR_M_out),
    .XPIPE_PIPE_CH3_TXMARGIN_M (XPIPE_PIPE_CH3_TXMARGIN_M_out),
    .XPIPE_PIPE_CH3_TXPOSTCURSOR_M (XPIPE_PIPE_CH3_TXPOSTCURSOR_M_out),
    .XPIPE_PIPE_CH3_TXPRECURSOR_M (XPIPE_PIPE_CH3_TXPRECURSOR_M_out),
    .XPIPE_PIPE_CH3_TXSTARTBLOCK_M (XPIPE_PIPE_CH3_TXSTARTBLOCK_M_out),
    .XPIPE_PIPE_CH3_TXSWING_M (XPIPE_PIPE_CH3_TXSWING_M_out),
    .XPIPE_PIPE_CH3_TXSYNCHEADER_M (XPIPE_PIPE_CH3_TXSYNCHEADER_M_out),
    .XPIPE_PIPE_CH4_PHYSTATUS (XPIPE_PIPE_CH4_PHYSTATUS_out),
    .XPIPE_PIPE_CH4_POWERDOWN_M (XPIPE_PIPE_CH4_POWERDOWN_M_out),
    .XPIPE_PIPE_CH4_RXCHARISK (XPIPE_PIPE_CH4_RXCHARISK_out),
    .XPIPE_PIPE_CH4_RXDATA (XPIPE_PIPE_CH4_RXDATA_out),
    .XPIPE_PIPE_CH4_RXDATAVALID (XPIPE_PIPE_CH4_RXDATAVALID_out),
    .XPIPE_PIPE_CH4_RXELECIDLE (XPIPE_PIPE_CH4_RXELECIDLE_out),
    .XPIPE_PIPE_CH4_RXPOLARITY_M (XPIPE_PIPE_CH4_RXPOLARITY_M_out),
    .XPIPE_PIPE_CH4_RXSTARTBLOCK (XPIPE_PIPE_CH4_RXSTARTBLOCK_out),
    .XPIPE_PIPE_CH4_RXSTATUS (XPIPE_PIPE_CH4_RXSTATUS_out),
    .XPIPE_PIPE_CH4_RXSYNCHEADER (XPIPE_PIPE_CH4_RXSYNCHEADER_out),
    .XPIPE_PIPE_CH4_RXTERMINATION_M (XPIPE_PIPE_CH4_RXTERMINATION_M_out),
    .XPIPE_PIPE_CH4_RXVALID (XPIPE_PIPE_CH4_RXVALID_out),
    .XPIPE_PIPE_CH4_TXCHARISK_M (XPIPE_PIPE_CH4_TXCHARISK_M_out),
    .XPIPE_PIPE_CH4_TXCOMPLIANCE_M (XPIPE_PIPE_CH4_TXCOMPLIANCE_M_out),
    .XPIPE_PIPE_CH4_TXDATAVALID_M (XPIPE_PIPE_CH4_TXDATAVALID_M_out),
    .XPIPE_PIPE_CH4_TXDATA_M (XPIPE_PIPE_CH4_TXDATA_M_out),
    .XPIPE_PIPE_CH4_TXDEEMPH_M (XPIPE_PIPE_CH4_TXDEEMPH_M_out),
    .XPIPE_PIPE_CH4_TXDETECTRXLOOPBACK_M (XPIPE_PIPE_CH4_TXDETECTRXLOOPBACK_M_out),
    .XPIPE_PIPE_CH4_TXELECIDLE_M (XPIPE_PIPE_CH4_TXELECIDLE_M_out),
    .XPIPE_PIPE_CH4_TXMAINCURSOR_M (XPIPE_PIPE_CH4_TXMAINCURSOR_M_out),
    .XPIPE_PIPE_CH4_TXMARGIN_M (XPIPE_PIPE_CH4_TXMARGIN_M_out),
    .XPIPE_PIPE_CH4_TXPOSTCURSOR_M (XPIPE_PIPE_CH4_TXPOSTCURSOR_M_out),
    .XPIPE_PIPE_CH4_TXPRECURSOR_M (XPIPE_PIPE_CH4_TXPRECURSOR_M_out),
    .XPIPE_PIPE_CH4_TXSTARTBLOCK_M (XPIPE_PIPE_CH4_TXSTARTBLOCK_M_out),
    .XPIPE_PIPE_CH4_TXSWING_M (XPIPE_PIPE_CH4_TXSWING_M_out),
    .XPIPE_PIPE_CH4_TXSYNCHEADER_M (XPIPE_PIPE_CH4_TXSYNCHEADER_M_out),
    .XPIPE_PIPE_CH5_PHYSTATUS (XPIPE_PIPE_CH5_PHYSTATUS_out),
    .XPIPE_PIPE_CH5_POWERDOWN_M (XPIPE_PIPE_CH5_POWERDOWN_M_out),
    .XPIPE_PIPE_CH5_RXCHARISK (XPIPE_PIPE_CH5_RXCHARISK_out),
    .XPIPE_PIPE_CH5_RXDATA (XPIPE_PIPE_CH5_RXDATA_out),
    .XPIPE_PIPE_CH5_RXDATAVALID (XPIPE_PIPE_CH5_RXDATAVALID_out),
    .XPIPE_PIPE_CH5_RXELECIDLE (XPIPE_PIPE_CH5_RXELECIDLE_out),
    .XPIPE_PIPE_CH5_RXPOLARITY_M (XPIPE_PIPE_CH5_RXPOLARITY_M_out),
    .XPIPE_PIPE_CH5_RXSTARTBLOCK (XPIPE_PIPE_CH5_RXSTARTBLOCK_out),
    .XPIPE_PIPE_CH5_RXSTATUS (XPIPE_PIPE_CH5_RXSTATUS_out),
    .XPIPE_PIPE_CH5_RXSYNCHEADER (XPIPE_PIPE_CH5_RXSYNCHEADER_out),
    .XPIPE_PIPE_CH5_RXTERMINATION_M (XPIPE_PIPE_CH5_RXTERMINATION_M_out),
    .XPIPE_PIPE_CH5_RXVALID (XPIPE_PIPE_CH5_RXVALID_out),
    .XPIPE_PIPE_CH5_TXCHARISK_M (XPIPE_PIPE_CH5_TXCHARISK_M_out),
    .XPIPE_PIPE_CH5_TXCOMPLIANCE_M (XPIPE_PIPE_CH5_TXCOMPLIANCE_M_out),
    .XPIPE_PIPE_CH5_TXDATAVALID_M (XPIPE_PIPE_CH5_TXDATAVALID_M_out),
    .XPIPE_PIPE_CH5_TXDATA_M (XPIPE_PIPE_CH5_TXDATA_M_out),
    .XPIPE_PIPE_CH5_TXDEEMPH_M (XPIPE_PIPE_CH5_TXDEEMPH_M_out),
    .XPIPE_PIPE_CH5_TXDETECTRXLOOPBACK_M (XPIPE_PIPE_CH5_TXDETECTRXLOOPBACK_M_out),
    .XPIPE_PIPE_CH5_TXELECIDLE_M (XPIPE_PIPE_CH5_TXELECIDLE_M_out),
    .XPIPE_PIPE_CH5_TXMAINCURSOR_M (XPIPE_PIPE_CH5_TXMAINCURSOR_M_out),
    .XPIPE_PIPE_CH5_TXMARGIN_M (XPIPE_PIPE_CH5_TXMARGIN_M_out),
    .XPIPE_PIPE_CH5_TXPOSTCURSOR_M (XPIPE_PIPE_CH5_TXPOSTCURSOR_M_out),
    .XPIPE_PIPE_CH5_TXPRECURSOR_M (XPIPE_PIPE_CH5_TXPRECURSOR_M_out),
    .XPIPE_PIPE_CH5_TXSTARTBLOCK_M (XPIPE_PIPE_CH5_TXSTARTBLOCK_M_out),
    .XPIPE_PIPE_CH5_TXSWING_M (XPIPE_PIPE_CH5_TXSWING_M_out),
    .XPIPE_PIPE_CH5_TXSYNCHEADER_M (XPIPE_PIPE_CH5_TXSYNCHEADER_M_out),
    .XPIPE_PIPE_CH6_PHYSTATUS (XPIPE_PIPE_CH6_PHYSTATUS_out),
    .XPIPE_PIPE_CH6_POWERDOWN_M (XPIPE_PIPE_CH6_POWERDOWN_M_out),
    .XPIPE_PIPE_CH6_RXCHARISK (XPIPE_PIPE_CH6_RXCHARISK_out),
    .XPIPE_PIPE_CH6_RXDATA (XPIPE_PIPE_CH6_RXDATA_out),
    .XPIPE_PIPE_CH6_RXDATAVALID (XPIPE_PIPE_CH6_RXDATAVALID_out),
    .XPIPE_PIPE_CH6_RXELECIDLE (XPIPE_PIPE_CH6_RXELECIDLE_out),
    .XPIPE_PIPE_CH6_RXPOLARITY_M (XPIPE_PIPE_CH6_RXPOLARITY_M_out),
    .XPIPE_PIPE_CH6_RXSTARTBLOCK (XPIPE_PIPE_CH6_RXSTARTBLOCK_out),
    .XPIPE_PIPE_CH6_RXSTATUS (XPIPE_PIPE_CH6_RXSTATUS_out),
    .XPIPE_PIPE_CH6_RXSYNCHEADER (XPIPE_PIPE_CH6_RXSYNCHEADER_out),
    .XPIPE_PIPE_CH6_RXTERMINATION_M (XPIPE_PIPE_CH6_RXTERMINATION_M_out),
    .XPIPE_PIPE_CH6_RXVALID (XPIPE_PIPE_CH6_RXVALID_out),
    .XPIPE_PIPE_CH6_TXCHARISK_M (XPIPE_PIPE_CH6_TXCHARISK_M_out),
    .XPIPE_PIPE_CH6_TXCOMPLIANCE_M (XPIPE_PIPE_CH6_TXCOMPLIANCE_M_out),
    .XPIPE_PIPE_CH6_TXDATAVALID_M (XPIPE_PIPE_CH6_TXDATAVALID_M_out),
    .XPIPE_PIPE_CH6_TXDATA_M (XPIPE_PIPE_CH6_TXDATA_M_out),
    .XPIPE_PIPE_CH6_TXDEEMPH_M (XPIPE_PIPE_CH6_TXDEEMPH_M_out),
    .XPIPE_PIPE_CH6_TXDETECTRXLOOPBACK_M (XPIPE_PIPE_CH6_TXDETECTRXLOOPBACK_M_out),
    .XPIPE_PIPE_CH6_TXELECIDLE_M (XPIPE_PIPE_CH6_TXELECIDLE_M_out),
    .XPIPE_PIPE_CH6_TXMAINCURSOR_M (XPIPE_PIPE_CH6_TXMAINCURSOR_M_out),
    .XPIPE_PIPE_CH6_TXMARGIN_M (XPIPE_PIPE_CH6_TXMARGIN_M_out),
    .XPIPE_PIPE_CH6_TXPOSTCURSOR_M (XPIPE_PIPE_CH6_TXPOSTCURSOR_M_out),
    .XPIPE_PIPE_CH6_TXPRECURSOR_M (XPIPE_PIPE_CH6_TXPRECURSOR_M_out),
    .XPIPE_PIPE_CH6_TXSTARTBLOCK_M (XPIPE_PIPE_CH6_TXSTARTBLOCK_M_out),
    .XPIPE_PIPE_CH6_TXSWING_M (XPIPE_PIPE_CH6_TXSWING_M_out),
    .XPIPE_PIPE_CH6_TXSYNCHEADER_M (XPIPE_PIPE_CH6_TXSYNCHEADER_M_out),
    .XPIPE_PIPE_CH7_PHYSTATUS (XPIPE_PIPE_CH7_PHYSTATUS_out),
    .XPIPE_PIPE_CH7_POWERDOWN_M (XPIPE_PIPE_CH7_POWERDOWN_M_out),
    .XPIPE_PIPE_CH7_RXCHARISK (XPIPE_PIPE_CH7_RXCHARISK_out),
    .XPIPE_PIPE_CH7_RXDATA (XPIPE_PIPE_CH7_RXDATA_out),
    .XPIPE_PIPE_CH7_RXDATAVALID (XPIPE_PIPE_CH7_RXDATAVALID_out),
    .XPIPE_PIPE_CH7_RXELECIDLE (XPIPE_PIPE_CH7_RXELECIDLE_out),
    .XPIPE_PIPE_CH7_RXPOLARITY_M (XPIPE_PIPE_CH7_RXPOLARITY_M_out),
    .XPIPE_PIPE_CH7_RXSTARTBLOCK (XPIPE_PIPE_CH7_RXSTARTBLOCK_out),
    .XPIPE_PIPE_CH7_RXSTATUS (XPIPE_PIPE_CH7_RXSTATUS_out),
    .XPIPE_PIPE_CH7_RXSYNCHEADER (XPIPE_PIPE_CH7_RXSYNCHEADER_out),
    .XPIPE_PIPE_CH7_RXTERMINATION_M (XPIPE_PIPE_CH7_RXTERMINATION_M_out),
    .XPIPE_PIPE_CH7_RXVALID (XPIPE_PIPE_CH7_RXVALID_out),
    .XPIPE_PIPE_CH7_TXCHARISK_M (XPIPE_PIPE_CH7_TXCHARISK_M_out),
    .XPIPE_PIPE_CH7_TXCOMPLIANCE_M (XPIPE_PIPE_CH7_TXCOMPLIANCE_M_out),
    .XPIPE_PIPE_CH7_TXDATAVALID_M (XPIPE_PIPE_CH7_TXDATAVALID_M_out),
    .XPIPE_PIPE_CH7_TXDATA_M (XPIPE_PIPE_CH7_TXDATA_M_out),
    .XPIPE_PIPE_CH7_TXDEEMPH_M (XPIPE_PIPE_CH7_TXDEEMPH_M_out),
    .XPIPE_PIPE_CH7_TXDETECTRXLOOPBACK_M (XPIPE_PIPE_CH7_TXDETECTRXLOOPBACK_M_out),
    .XPIPE_PIPE_CH7_TXELECIDLE_M (XPIPE_PIPE_CH7_TXELECIDLE_M_out),
    .XPIPE_PIPE_CH7_TXMAINCURSOR_M (XPIPE_PIPE_CH7_TXMAINCURSOR_M_out),
    .XPIPE_PIPE_CH7_TXMARGIN_M (XPIPE_PIPE_CH7_TXMARGIN_M_out),
    .XPIPE_PIPE_CH7_TXPOSTCURSOR_M (XPIPE_PIPE_CH7_TXPOSTCURSOR_M_out),
    .XPIPE_PIPE_CH7_TXPRECURSOR_M (XPIPE_PIPE_CH7_TXPRECURSOR_M_out),
    .XPIPE_PIPE_CH7_TXSTARTBLOCK_M (XPIPE_PIPE_CH7_TXSTARTBLOCK_M_out),
    .XPIPE_PIPE_CH7_TXSWING_M (XPIPE_PIPE_CH7_TXSWING_M_out),
    .XPIPE_PIPE_CH7_TXSYNCHEADER_M (XPIPE_PIPE_CH7_TXSYNCHEADER_M_out),
    .XPIPE_PIPE_CH8_PHYSTATUS (XPIPE_PIPE_CH8_PHYSTATUS_out),
    .XPIPE_PIPE_CH8_POWERDOWN_M (XPIPE_PIPE_CH8_POWERDOWN_M_out),
    .XPIPE_PIPE_CH8_RXCHARISK (XPIPE_PIPE_CH8_RXCHARISK_out),
    .XPIPE_PIPE_CH8_RXDATA (XPIPE_PIPE_CH8_RXDATA_out),
    .XPIPE_PIPE_CH8_RXDATAVALID (XPIPE_PIPE_CH8_RXDATAVALID_out),
    .XPIPE_PIPE_CH8_RXELECIDLE (XPIPE_PIPE_CH8_RXELECIDLE_out),
    .XPIPE_PIPE_CH8_RXPOLARITY_M (XPIPE_PIPE_CH8_RXPOLARITY_M_out),
    .XPIPE_PIPE_CH8_RXSTARTBLOCK (XPIPE_PIPE_CH8_RXSTARTBLOCK_out),
    .XPIPE_PIPE_CH8_RXSTATUS (XPIPE_PIPE_CH8_RXSTATUS_out),
    .XPIPE_PIPE_CH8_RXSYNCHEADER (XPIPE_PIPE_CH8_RXSYNCHEADER_out),
    .XPIPE_PIPE_CH8_RXTERMINATION_M (XPIPE_PIPE_CH8_RXTERMINATION_M_out),
    .XPIPE_PIPE_CH8_RXVALID (XPIPE_PIPE_CH8_RXVALID_out),
    .XPIPE_PIPE_CH8_TXCHARISK_M (XPIPE_PIPE_CH8_TXCHARISK_M_out),
    .XPIPE_PIPE_CH8_TXCOMPLIANCE_M (XPIPE_PIPE_CH8_TXCOMPLIANCE_M_out),
    .XPIPE_PIPE_CH8_TXDATAVALID_M (XPIPE_PIPE_CH8_TXDATAVALID_M_out),
    .XPIPE_PIPE_CH8_TXDATA_M (XPIPE_PIPE_CH8_TXDATA_M_out),
    .XPIPE_PIPE_CH8_TXDEEMPH_M (XPIPE_PIPE_CH8_TXDEEMPH_M_out),
    .XPIPE_PIPE_CH8_TXDETECTRXLOOPBACK_M (XPIPE_PIPE_CH8_TXDETECTRXLOOPBACK_M_out),
    .XPIPE_PIPE_CH8_TXELECIDLE_M (XPIPE_PIPE_CH8_TXELECIDLE_M_out),
    .XPIPE_PIPE_CH8_TXMAINCURSOR_M (XPIPE_PIPE_CH8_TXMAINCURSOR_M_out),
    .XPIPE_PIPE_CH8_TXMARGIN_M (XPIPE_PIPE_CH8_TXMARGIN_M_out),
    .XPIPE_PIPE_CH8_TXPOSTCURSOR_M (XPIPE_PIPE_CH8_TXPOSTCURSOR_M_out),
    .XPIPE_PIPE_CH8_TXPRECURSOR_M (XPIPE_PIPE_CH8_TXPRECURSOR_M_out),
    .XPIPE_PIPE_CH8_TXSTARTBLOCK_M (XPIPE_PIPE_CH8_TXSTARTBLOCK_M_out),
    .XPIPE_PIPE_CH8_TXSWING_M (XPIPE_PIPE_CH8_TXSWING_M_out),
    .XPIPE_PIPE_CH8_TXSYNCHEADER_M (XPIPE_PIPE_CH8_TXSYNCHEADER_M_out),
    .XPIPE_PIPE_CH9_PHYSTATUS (XPIPE_PIPE_CH9_PHYSTATUS_out),
    .XPIPE_PIPE_CH9_POWERDOWN_M (XPIPE_PIPE_CH9_POWERDOWN_M_out),
    .XPIPE_PIPE_CH9_RXCHARISK (XPIPE_PIPE_CH9_RXCHARISK_out),
    .XPIPE_PIPE_CH9_RXDATA (XPIPE_PIPE_CH9_RXDATA_out),
    .XPIPE_PIPE_CH9_RXDATAVALID (XPIPE_PIPE_CH9_RXDATAVALID_out),
    .XPIPE_PIPE_CH9_RXELECIDLE (XPIPE_PIPE_CH9_RXELECIDLE_out),
    .XPIPE_PIPE_CH9_RXPOLARITY_M (XPIPE_PIPE_CH9_RXPOLARITY_M_out),
    .XPIPE_PIPE_CH9_RXSTARTBLOCK (XPIPE_PIPE_CH9_RXSTARTBLOCK_out),
    .XPIPE_PIPE_CH9_RXSTATUS (XPIPE_PIPE_CH9_RXSTATUS_out),
    .XPIPE_PIPE_CH9_RXSYNCHEADER (XPIPE_PIPE_CH9_RXSYNCHEADER_out),
    .XPIPE_PIPE_CH9_RXTERMINATION_M (XPIPE_PIPE_CH9_RXTERMINATION_M_out),
    .XPIPE_PIPE_CH9_RXVALID (XPIPE_PIPE_CH9_RXVALID_out),
    .XPIPE_PIPE_CH9_TXCHARISK_M (XPIPE_PIPE_CH9_TXCHARISK_M_out),
    .XPIPE_PIPE_CH9_TXCOMPLIANCE_M (XPIPE_PIPE_CH9_TXCOMPLIANCE_M_out),
    .XPIPE_PIPE_CH9_TXDATAVALID_M (XPIPE_PIPE_CH9_TXDATAVALID_M_out),
    .XPIPE_PIPE_CH9_TXDATA_M (XPIPE_PIPE_CH9_TXDATA_M_out),
    .XPIPE_PIPE_CH9_TXDEEMPH_M (XPIPE_PIPE_CH9_TXDEEMPH_M_out),
    .XPIPE_PIPE_CH9_TXDETECTRXLOOPBACK_M (XPIPE_PIPE_CH9_TXDETECTRXLOOPBACK_M_out),
    .XPIPE_PIPE_CH9_TXELECIDLE_M (XPIPE_PIPE_CH9_TXELECIDLE_M_out),
    .XPIPE_PIPE_CH9_TXMAINCURSOR_M (XPIPE_PIPE_CH9_TXMAINCURSOR_M_out),
    .XPIPE_PIPE_CH9_TXMARGIN_M (XPIPE_PIPE_CH9_TXMARGIN_M_out),
    .XPIPE_PIPE_CH9_TXPOSTCURSOR_M (XPIPE_PIPE_CH9_TXPOSTCURSOR_M_out),
    .XPIPE_PIPE_CH9_TXPRECURSOR_M (XPIPE_PIPE_CH9_TXPRECURSOR_M_out),
    .XPIPE_PIPE_CH9_TXSTARTBLOCK_M (XPIPE_PIPE_CH9_TXSTARTBLOCK_M_out),
    .XPIPE_PIPE_CH9_TXSWING_M (XPIPE_PIPE_CH9_TXSWING_M_out),
    .XPIPE_PIPE_CH9_TXSYNCHEADER_M (XPIPE_PIPE_CH9_TXSYNCHEADER_M_out),
    .XPIPE_RXMARGINREQACK (XPIPE_RXMARGINREQACK_out),
    .XPIPE_RXMARGINREQACK_1 (XPIPE_RXMARGINREQACK_1_out),
    .XPIPE_RXMARGINREQACK_2 (XPIPE_RXMARGINREQACK_2_out),
    .XPIPE_RXMARGINREQACK_3 (XPIPE_RXMARGINREQACK_3_out),
    .XPIPE_RXMARGINREQCMD_M (XPIPE_RXMARGINREQCMD_M_out),
    .XPIPE_RXMARGINREQCMD_M_1 (XPIPE_RXMARGINREQCMD_M_1_out),
    .XPIPE_RXMARGINREQCMD_M_2 (XPIPE_RXMARGINREQCMD_M_2_out),
    .XPIPE_RXMARGINREQCMD_M_3 (XPIPE_RXMARGINREQCMD_M_3_out),
    .XPIPE_RXMARGINREQLANENUM_M (XPIPE_RXMARGINREQLANENUM_M_out),
    .XPIPE_RXMARGINREQLANENUM_M_1 (XPIPE_RXMARGINREQLANENUM_M_1_out),
    .XPIPE_RXMARGINREQLANENUM_M_2 (XPIPE_RXMARGINREQLANENUM_M_2_out),
    .XPIPE_RXMARGINREQLANENUM_M_3 (XPIPE_RXMARGINREQLANENUM_M_3_out),
    .XPIPE_RXMARGINREQPAYLOAD_M (XPIPE_RXMARGINREQPAYLOAD_M_out),
    .XPIPE_RXMARGINREQPAYLOAD_M_1 (XPIPE_RXMARGINREQPAYLOAD_M_1_out),
    .XPIPE_RXMARGINREQPAYLOAD_M_2 (XPIPE_RXMARGINREQPAYLOAD_M_2_out),
    .XPIPE_RXMARGINREQPAYLOAD_M_3 (XPIPE_RXMARGINREQPAYLOAD_M_3_out),
    .XPIPE_RXMARGINREQREQ_M (XPIPE_RXMARGINREQREQ_M_out),
    .XPIPE_RXMARGINREQREQ_M_1 (XPIPE_RXMARGINREQREQ_M_1_out),
    .XPIPE_RXMARGINREQREQ_M_2 (XPIPE_RXMARGINREQREQ_M_2_out),
    .XPIPE_RXMARGINREQREQ_M_3 (XPIPE_RXMARGINREQREQ_M_3_out),
    .XPIPE_RXMARGINRESACK_M (XPIPE_RXMARGINRESACK_M_out),
    .XPIPE_RXMARGINRESACK_M_1 (XPIPE_RXMARGINRESACK_M_1_out),
    .XPIPE_RXMARGINRESACK_M_2 (XPIPE_RXMARGINRESACK_M_2_out),
    .XPIPE_RXMARGINRESACK_M_3 (XPIPE_RXMARGINRESACK_M_3_out),
    .XPIPE_RXMARGINRESCMD (XPIPE_RXMARGINRESCMD_out),
    .XPIPE_RXMARGINRESCMD_1 (XPIPE_RXMARGINRESCMD_1_out),
    .XPIPE_RXMARGINRESCMD_2 (XPIPE_RXMARGINRESCMD_2_out),
    .XPIPE_RXMARGINRESCMD_3 (XPIPE_RXMARGINRESCMD_3_out),
    .XPIPE_RXMARGINRESLANENUM (XPIPE_RXMARGINRESLANENUM_out),
    .XPIPE_RXMARGINRESLANENUM_1 (XPIPE_RXMARGINRESLANENUM_1_out),
    .XPIPE_RXMARGINRESLANENUM_2 (XPIPE_RXMARGINRESLANENUM_2_out),
    .XPIPE_RXMARGINRESLANENUM_3 (XPIPE_RXMARGINRESLANENUM_3_out),
    .XPIPE_RXMARGINRESPAYLOAD (XPIPE_RXMARGINRESPAYLOAD_out),
    .XPIPE_RXMARGINRESPAYLOAD_1 (XPIPE_RXMARGINRESPAYLOAD_1_out),
    .XPIPE_RXMARGINRESPAYLOAD_2 (XPIPE_RXMARGINRESPAYLOAD_2_out),
    .XPIPE_RXMARGINRESPAYLOAD_3 (XPIPE_RXMARGINRESPAYLOAD_3_out),
    .XPIPE_RXMARGINRESREQ (XPIPE_RXMARGINRESREQ_out),
    .XPIPE_RXMARGINRESREQ_1 (XPIPE_RXMARGINRESREQ_1_out),
    .XPIPE_RXMARGINRESREQ_2 (XPIPE_RXMARGINRESREQ_2_out),
    .XPIPE_RXMARGINRESREQ_3 (XPIPE_RXMARGINRESREQ_3_out),
    .XPSCANCLK_M (XPSCANCLK_M_out),
    .XPSCANENB_M (XPSCANENB_M_out),
    .XPSCANIN_M (XPSCANIN_M_out),
    .XPSCANMODEB_M (XPSCANMODEB_M_out),
    .XPSCANOUT (XPSCANOUT_out),
    .XPSCANRSTB_M (XPSCANRSTB_M_out),
    .ALTCLK (ALTCLK_in),
    .APB3CLK (APB3CLK_in),
    .APB3PADDR (APB3PADDR_in),
    .APB3PENABLE (APB3PENABLE_in),
    .APB3PRDATA_M (APB3PRDATA_M_in),
    .APB3PREADY_M (APB3PREADY_M_in),
    .APB3PRESETN (APB3PRESETN_in),
    .APB3PSEL (APB3PSEL_in),
    .APB3PSLVERR_M (APB3PSLVERR_M_in),
    .APB3PWDATA (APB3PWDATA_in),
    .APB3PWRITE (APB3PWRITE_in),
    .AXISCLK (AXISCLK_in),
    .BGBYPASSB (BGBYPASSB_in),
    .BGMONITORENB (BGMONITORENB_in),
    .BGPDB (BGPDB_in),
    .BGRCALOVRD (BGRCALOVRD_in),
    .BGRCALOVRDENB (BGRCALOVRDENB_in),
    .CH0_BSR_SERIAL (CH0_BSR_SERIAL_in),
    .CH0_BUFGTCEMASK_M (CH0_BUFGTCEMASK_M_in),
    .CH0_BUFGTCE_M (CH0_BUFGTCE_M_in),
    .CH0_BUFGTDIV_M (CH0_BUFGTDIV_M_in),
    .CH0_BUFGTRSTMASK_M (CH0_BUFGTRSTMASK_M_in),
    .CH0_BUFGTRST_M (CH0_BUFGTRST_M_in),
    .CH0_CDRBMCDRREQ (CH0_CDRBMCDRREQ_in),
    .CH0_CDRFREQOS (CH0_CDRFREQOS_in),
    .CH0_CDRINCPCTRL (CH0_CDRINCPCTRL_in),
    .CH0_CDRSTEPDIR (CH0_CDRSTEPDIR_in),
    .CH0_CDRSTEPSQ (CH0_CDRSTEPSQ_in),
    .CH0_CDRSTEPSX (CH0_CDRSTEPSX_in),
    .CH0_CFOKOVRDFINISH (CH0_CFOKOVRDFINISH_in),
    .CH0_CFOKOVRDPULSE (CH0_CFOKOVRDPULSE_in),
    .CH0_CFOKOVRDRDY0_M (CH0_CFOKOVRDRDY0_M_in),
    .CH0_CFOKOVRDRDY1_M (CH0_CFOKOVRDRDY1_M_in),
    .CH0_CFOKOVRDSTART (CH0_CFOKOVRDSTART_in),
    .CH0_CLKRSVD0 (CH0_CLKRSVD0_in),
    .CH0_CLKRSVD1 (CH0_CLKRSVD1_in),
    .CH0_CSSDRSTB (CH0_CSSDRSTB_in),
    .CH0_CSSDSTOPCLK (CH0_CSSDSTOPCLK_in),
    .CH0_CSSDSTOPCLKDONE_M (CH0_CSSDSTOPCLKDONE_M_in),
    .CH0_DMONFIFORESET (CH0_DMONFIFORESET_in),
    .CH0_DMONITORCLK (CH0_DMONITORCLK_in),
    .CH0_DMONITOROUT_M (CH0_DMONITOROUT_M_in),
    .CH0_EDTUPDATEB (CH0_EDTUPDATEB_in),
    .CH0_EYESCANDATAERROR_M (CH0_EYESCANDATAERROR_M_in),
    .CH0_EYESCANRESET (CH0_EYESCANRESET_in),
    .CH0_EYESCANTRIGGER (CH0_EYESCANTRIGGER_in),
    .CH0_GTRSVD (CH0_GTRSVD_in),
    .CH0_GTRXRESET (CH0_GTRXRESET_in),
    .CH0_GTTXRESET (CH0_GTTXRESET_in),
    .CH0_HSDPPCSRESET (CH0_HSDPPCSRESET_in),
    .CH0_ILORESET (CH0_ILORESET_in),
    .CH0_ILORESETDONE_M (CH0_ILORESETDONE_M_in),
    .CH0_ILORESETMASK (CH0_ILORESETMASK_in),
    .CH0_LOOPBACK (CH0_LOOPBACK_in),
    .CH0_PCIERSTB (CH0_PCIERSTB_in),
    .CH0_PCSRSVDIN (CH0_PCSRSVDIN_in),
    .CH0_PCSRSVDOUT_M (CH0_PCSRSVDOUT_M_in),
    .CH0_PHYESMADAPTSAVE (CH0_PHYESMADAPTSAVE_in),
    .CH0_PHYREADY_M (CH0_PHYREADY_M_in),
    .CH0_PHYSTATUS_M (CH0_PHYSTATUS_M_in),
    .CH0_PINRSVDAS_M (CH0_PINRSVDAS_M_in),
    .CH0_RESETEXCEPTION_M (CH0_RESETEXCEPTION_M_in),
    .CH0_RX10GSTAT_M (CH0_RX10GSTAT_M_in),
    .CH0_RXBUFSTATUS_M (CH0_RXBUFSTATUS_M_in),
    .CH0_RXBYTEISALIGNED_M (CH0_RXBYTEISALIGNED_M_in),
    .CH0_RXBYTEREALIGN_M (CH0_RXBYTEREALIGN_M_in),
    .CH0_RXCDRHOLD (CH0_RXCDRHOLD_in),
    .CH0_RXCDRLOCK_M (CH0_RXCDRLOCK_M_in),
    .CH0_RXCDROVRDEN (CH0_RXCDROVRDEN_in),
    .CH0_RXCDRPHDONE_M (CH0_RXCDRPHDONE_M_in),
    .CH0_RXCDRRESET (CH0_RXCDRRESET_in),
    .CH0_RXCHANBONDSEQ_M (CH0_RXCHANBONDSEQ_M_in),
    .CH0_RXCHANISALIGNED_M (CH0_RXCHANISALIGNED_M_in),
    .CH0_RXCHANREALIGN_M (CH0_RXCHANREALIGN_M_in),
    .CH0_RXCHBONDI (CH0_RXCHBONDI_in),
    .CH0_RXCHBONDO_M (CH0_RXCHBONDO_M_in),
    .CH0_RXCLKCORCNT_M (CH0_RXCLKCORCNT_M_in),
    .CH0_RXCOMINITDET_M (CH0_RXCOMINITDET_M_in),
    .CH0_RXCOMMADET_M (CH0_RXCOMMADET_M_in),
    .CH0_RXCOMSASDET_M (CH0_RXCOMSASDET_M_in),
    .CH0_RXCOMWAKEDET_M (CH0_RXCOMWAKEDET_M_in),
    .CH0_RXCTRL0_M (CH0_RXCTRL0_M_in),
    .CH0_RXCTRL1_M (CH0_RXCTRL1_M_in),
    .CH0_RXCTRL2_M (CH0_RXCTRL2_M_in),
    .CH0_RXCTRL3_M (CH0_RXCTRL3_M_in),
    .CH0_RXDAPICODEOVRDEN (CH0_RXDAPICODEOVRDEN_in),
    .CH0_RXDAPICODERESET (CH0_RXDAPICODERESET_in),
    .CH0_RXDATAEXTENDRSVD_M (CH0_RXDATAEXTENDRSVD_M_in),
    .CH0_RXDATAVALID_M (CH0_RXDATAVALID_M_in),
    .CH0_RXDATA_M (CH0_RXDATA_M_in),
    .CH0_RXDCCDONE_M (CH0_RXDCCDONE_M_in),
    .CH0_RXDLYALIGNERR_M (CH0_RXDLYALIGNERR_M_in),
    .CH0_RXDLYALIGNPROG_M (CH0_RXDLYALIGNPROG_M_in),
    .CH0_RXDLYALIGNREQ (CH0_RXDLYALIGNREQ_in),
    .CH0_RXELECIDLE_M (CH0_RXELECIDLE_M_in),
    .CH0_RXEQTRAINING (CH0_RXEQTRAINING_in),
    .CH0_RXFINEALIGNDONE_M (CH0_RXFINEALIGNDONE_M_in),
    .CH0_RXGEARBOXSLIP (CH0_RXGEARBOXSLIP_in),
    .CH0_RXHEADERVALID_M (CH0_RXHEADERVALID_M_in),
    .CH0_RXHEADER_M (CH0_RXHEADER_M_in),
    .CH0_RXLATCLK (CH0_RXLATCLK_in),
    .CH0_RXLPMEN (CH0_RXLPMEN_in),
    .CH0_RXMLDCHAINDONE (CH0_RXMLDCHAINDONE_in),
    .CH0_RXMLDCHAINREQ (CH0_RXMLDCHAINREQ_in),
    .CH0_RXMLFINEALIGNREQ (CH0_RXMLFINEALIGNREQ_in),
    .CH0_RXOOBRESET (CH0_RXOOBRESET_in),
    .CH0_RXOSINTDONE_M (CH0_RXOSINTDONE_M_in),
    .CH0_RXOSINTSTARTED_M (CH0_RXOSINTSTARTED_M_in),
    .CH0_RXOSINTSTROBEDONE_M (CH0_RXOSINTSTROBEDONE_M_in),
    .CH0_RXOSINTSTROBESTARTED_M (CH0_RXOSINTSTROBESTARTED_M_in),
    .CH0_RXOUTCLK_M (CH0_RXOUTCLK_M_in),
    .CH0_RXPCSRESETMASK (CH0_RXPCSRESETMASK_in),
    .CH0_RXPD (CH0_RXPD_in),
    .CH0_RXPHALIGNDONE_M (CH0_RXPHALIGNDONE_M_in),
    .CH0_RXPHALIGNERR_M (CH0_RXPHALIGNERR_M_in),
    .CH0_RXPHALIGNREQ (CH0_RXPHALIGNREQ_in),
    .CH0_RXPHALIGNRESETMASK (CH0_RXPHALIGNRESETMASK_in),
    .CH0_RXPHDLYPD (CH0_RXPHDLYPD_in),
    .CH0_RXPHDLYRESET (CH0_RXPHDLYRESET_in),
    .CH0_RXPHDLYRESETDONE_M (CH0_RXPHDLYRESETDONE_M_in),
    .CH0_RXPHSETINITDONE_M (CH0_RXPHSETINITDONE_M_in),
    .CH0_RXPHSETINITREQ (CH0_RXPHSETINITREQ_in),
    .CH0_RXPHSHIFT180 (CH0_RXPHSHIFT180_in),
    .CH0_RXPHSHIFT180DONE_M (CH0_RXPHSHIFT180DONE_M_in),
    .CH0_RXPMARESETDONE_M (CH0_RXPMARESETDONE_M_in),
    .CH0_RXPMARESETMASK (CH0_RXPMARESETMASK_in),
    .CH0_RXPOLARITY (CH0_RXPOLARITY_in),
    .CH0_RXPRBSCNTRESET (CH0_RXPRBSCNTRESET_in),
    .CH0_RXPRBSERR_M (CH0_RXPRBSERR_M_in),
    .CH0_RXPRBSLOCKED_M (CH0_RXPRBSLOCKED_M_in),
    .CH0_RXPRBSSEL (CH0_RXPRBSSEL_in),
    .CH0_RXPROGDIVRESET (CH0_RXPROGDIVRESET_in),
    .CH0_RXPROGDIVRESETDONE_M (CH0_RXPROGDIVRESETDONE_M_in),
    .CH0_RXRATE (CH0_RXRATE_in),
    .CH0_RXRESETDONE_M (CH0_RXRESETDONE_M_in),
    .CH0_RXRESETMODE (CH0_RXRESETMODE_in),
    .CH0_RXSLIDE (CH0_RXSLIDE_in),
    .CH0_RXSLIDERDY_M (CH0_RXSLIDERDY_M_in),
    .CH0_RXSTARTOFSEQ_M (CH0_RXSTARTOFSEQ_M_in),
    .CH0_RXSTATUS_M (CH0_RXSTATUS_M_in),
    .CH0_RXSYNCALLIN (CH0_RXSYNCALLIN_in),
    .CH0_RXSYNCDONE_M (CH0_RXSYNCDONE_M_in),
    .CH0_RXTERMINATION (CH0_RXTERMINATION_in),
    .CH0_RXUSERRDY (CH0_RXUSERRDY_in),
    .CH0_RXUSRCLK (CH0_RXUSRCLK_in),
    .CH0_RXVALID_M (CH0_RXVALID_M_in),
    .CH0_SCANCLKB (CH0_SCANCLKB_in),
    .CH0_SCANCNTRLIN (CH0_SCANCNTRLIN_in),
    .CH0_SCANCNTRLOUT_M (CH0_SCANCNTRLOUT_M_in),
    .CH0_SCANENB (CH0_SCANENB_in),
    .CH0_SCANIN (CH0_SCANIN_in),
    .CH0_SCANOUT_M (CH0_SCANOUT_M_in),
    .CH0_SCANRSTB (CH0_SCANRSTB_in),
    .CH0_TSTCLK0 (CH0_TSTCLK0_in),
    .CH0_TSTCLK1 (CH0_TSTCLK1_in),
    .CH0_TSTIN (CH0_TSTIN_in),
    .CH0_TX10GSTAT_M (CH0_TX10GSTAT_M_in),
    .CH0_TXBUFSTATUS_M (CH0_TXBUFSTATUS_M_in),
    .CH0_TXCOMFINISH_M (CH0_TXCOMFINISH_M_in),
    .CH0_TXCOMINIT (CH0_TXCOMINIT_in),
    .CH0_TXCOMSAS (CH0_TXCOMSAS_in),
    .CH0_TXCOMWAKE (CH0_TXCOMWAKE_in),
    .CH0_TXCTRL0 (CH0_TXCTRL0_in),
    .CH0_TXCTRL1 (CH0_TXCTRL1_in),
    .CH0_TXCTRL2 (CH0_TXCTRL2_in),
    .CH0_TXDAPICODEOVRDEN (CH0_TXDAPICODEOVRDEN_in),
    .CH0_TXDAPICODERESET (CH0_TXDAPICODERESET_in),
    .CH0_TXDATA (CH0_TXDATA_in),
    .CH0_TXDATAEXTENDRSVD (CH0_TXDATAEXTENDRSVD_in),
    .CH0_TXDCCDONE_M (CH0_TXDCCDONE_M_in),
    .CH0_TXDEEMPH (CH0_TXDEEMPH_in),
    .CH0_TXDETECTRX (CH0_TXDETECTRX_in),
    .CH0_TXDIFFCTRL (CH0_TXDIFFCTRL_in),
    .CH0_TXDLYALIGNERR_M (CH0_TXDLYALIGNERR_M_in),
    .CH0_TXDLYALIGNPROG_M (CH0_TXDLYALIGNPROG_M_in),
    .CH0_TXDLYALIGNREQ (CH0_TXDLYALIGNREQ_in),
    .CH0_TXELECIDLE (CH0_TXELECIDLE_in),
    .CH0_TXHEADER (CH0_TXHEADER_in),
    .CH0_TXINHIBIT (CH0_TXINHIBIT_in),
    .CH0_TXLATCLK (CH0_TXLATCLK_in),
    .CH0_TXMAINCURSOR (CH0_TXMAINCURSOR_in),
    .CH0_TXMARGIN (CH0_TXMARGIN_in),
    .CH0_TXMLDCHAINDONE (CH0_TXMLDCHAINDONE_in),
    .CH0_TXMLDCHAINREQ (CH0_TXMLDCHAINREQ_in),
    .CH0_TXONESZEROS (CH0_TXONESZEROS_in),
    .CH0_TXOUTCLK_M (CH0_TXOUTCLK_M_in),
    .CH0_TXPAUSEDELAYALIGN (CH0_TXPAUSEDELAYALIGN_in),
    .CH0_TXPCSRESETMASK (CH0_TXPCSRESETMASK_in),
    .CH0_TXPD (CH0_TXPD_in),
    .CH0_TXPHALIGNDONE_M (CH0_TXPHALIGNDONE_M_in),
    .CH0_TXPHALIGNERR_M (CH0_TXPHALIGNERR_M_in),
    .CH0_TXPHALIGNOUTRSVD_M (CH0_TXPHALIGNOUTRSVD_M_in),
    .CH0_TXPHALIGNREQ (CH0_TXPHALIGNREQ_in),
    .CH0_TXPHALIGNRESETMASK (CH0_TXPHALIGNRESETMASK_in),
    .CH0_TXPHDLYPD (CH0_TXPHDLYPD_in),
    .CH0_TXPHDLYRESET (CH0_TXPHDLYRESET_in),
    .CH0_TXPHDLYRESETDONE_M (CH0_TXPHDLYRESETDONE_M_in),
    .CH0_TXPHDLYTSTCLK (CH0_TXPHDLYTSTCLK_in),
    .CH0_TXPHSETINITDONE_M (CH0_TXPHSETINITDONE_M_in),
    .CH0_TXPHSETINITREQ (CH0_TXPHSETINITREQ_in),
    .CH0_TXPHSHIFT180 (CH0_TXPHSHIFT180_in),
    .CH0_TXPHSHIFT180DONE_M (CH0_TXPHSHIFT180DONE_M_in),
    .CH0_TXPICODEOVRDEN (CH0_TXPICODEOVRDEN_in),
    .CH0_TXPICODERESET (CH0_TXPICODERESET_in),
    .CH0_TXPIPPMEN (CH0_TXPIPPMEN_in),
    .CH0_TXPIPPMSTEPSIZE (CH0_TXPIPPMSTEPSIZE_in),
    .CH0_TXPISOPD (CH0_TXPISOPD_in),
    .CH0_TXPMARESETDONE_M (CH0_TXPMARESETDONE_M_in),
    .CH0_TXPMARESETMASK (CH0_TXPMARESETMASK_in),
    .CH0_TXPOLARITY (CH0_TXPOLARITY_in),
    .CH0_TXPOSTCURSOR (CH0_TXPOSTCURSOR_in),
    .CH0_TXPRBSFORCEERR (CH0_TXPRBSFORCEERR_in),
    .CH0_TXPRBSSEL (CH0_TXPRBSSEL_in),
    .CH0_TXPRECURSOR (CH0_TXPRECURSOR_in),
    .CH0_TXPROGDIVRESET (CH0_TXPROGDIVRESET_in),
    .CH0_TXPROGDIVRESETDONE_M (CH0_TXPROGDIVRESETDONE_M_in),
    .CH0_TXRATE (CH0_TXRATE_in),
    .CH0_TXRESETDONE_M (CH0_TXRESETDONE_M_in),
    .CH0_TXRESETMODE (CH0_TXRESETMODE_in),
    .CH0_TXSEQUENCE (CH0_TXSEQUENCE_in),
    .CH0_TXSWING (CH0_TXSWING_in),
    .CH0_TXSYNCALLIN (CH0_TXSYNCALLIN_in),
    .CH0_TXSYNCDONE_M (CH0_TXSYNCDONE_M_in),
    .CH0_TXUSERRDY (CH0_TXUSERRDY_in),
    .CH0_TXUSRCLK (CH0_TXUSRCLK_in),
    .CH1_BSR_SERIAL (CH1_BSR_SERIAL_in),
    .CH1_BUFGTCEMASK_M (CH1_BUFGTCEMASK_M_in),
    .CH1_BUFGTCE_M (CH1_BUFGTCE_M_in),
    .CH1_BUFGTDIV_M (CH1_BUFGTDIV_M_in),
    .CH1_BUFGTRSTMASK_M (CH1_BUFGTRSTMASK_M_in),
    .CH1_BUFGTRST_M (CH1_BUFGTRST_M_in),
    .CH1_CDRBMCDRREQ (CH1_CDRBMCDRREQ_in),
    .CH1_CDRFREQOS (CH1_CDRFREQOS_in),
    .CH1_CDRINCPCTRL (CH1_CDRINCPCTRL_in),
    .CH1_CDRSTEPDIR (CH1_CDRSTEPDIR_in),
    .CH1_CDRSTEPSQ (CH1_CDRSTEPSQ_in),
    .CH1_CDRSTEPSX (CH1_CDRSTEPSX_in),
    .CH1_CFOKOVRDFINISH (CH1_CFOKOVRDFINISH_in),
    .CH1_CFOKOVRDPULSE (CH1_CFOKOVRDPULSE_in),
    .CH1_CFOKOVRDRDY0_M (CH1_CFOKOVRDRDY0_M_in),
    .CH1_CFOKOVRDRDY1_M (CH1_CFOKOVRDRDY1_M_in),
    .CH1_CFOKOVRDSTART (CH1_CFOKOVRDSTART_in),
    .CH1_CLKRSVD0 (CH1_CLKRSVD0_in),
    .CH1_CLKRSVD1 (CH1_CLKRSVD1_in),
    .CH1_CSSDRSTB (CH1_CSSDRSTB_in),
    .CH1_CSSDSTOPCLK (CH1_CSSDSTOPCLK_in),
    .CH1_CSSDSTOPCLKDONE_M (CH1_CSSDSTOPCLKDONE_M_in),
    .CH1_DMONFIFORESET (CH1_DMONFIFORESET_in),
    .CH1_DMONITORCLK (CH1_DMONITORCLK_in),
    .CH1_DMONITOROUT_M (CH1_DMONITOROUT_M_in),
    .CH1_EDTUPDATEB (CH1_EDTUPDATEB_in),
    .CH1_EYESCANDATAERROR_M (CH1_EYESCANDATAERROR_M_in),
    .CH1_EYESCANRESET (CH1_EYESCANRESET_in),
    .CH1_EYESCANTRIGGER (CH1_EYESCANTRIGGER_in),
    .CH1_GTRSVD (CH1_GTRSVD_in),
    .CH1_GTRXRESET (CH1_GTRXRESET_in),
    .CH1_GTTXRESET (CH1_GTTXRESET_in),
    .CH1_HSDPPCSRESET (CH1_HSDPPCSRESET_in),
    .CH1_ILORESET (CH1_ILORESET_in),
    .CH1_ILORESETDONE_M (CH1_ILORESETDONE_M_in),
    .CH1_ILORESETMASK (CH1_ILORESETMASK_in),
    .CH1_LOOPBACK (CH1_LOOPBACK_in),
    .CH1_PCIERSTB (CH1_PCIERSTB_in),
    .CH1_PCSRSVDIN (CH1_PCSRSVDIN_in),
    .CH1_PCSRSVDOUT_M (CH1_PCSRSVDOUT_M_in),
    .CH1_PHYESMADAPTSAVE (CH1_PHYESMADAPTSAVE_in),
    .CH1_PHYREADY_M (CH1_PHYREADY_M_in),
    .CH1_PHYSTATUS_M (CH1_PHYSTATUS_M_in),
    .CH1_PINRSVDAS_M (CH1_PINRSVDAS_M_in),
    .CH1_RESETEXCEPTION_M (CH1_RESETEXCEPTION_M_in),
    .CH1_RX10GSTAT_M (CH1_RX10GSTAT_M_in),
    .CH1_RXBUFSTATUS_M (CH1_RXBUFSTATUS_M_in),
    .CH1_RXBYTEISALIGNED_M (CH1_RXBYTEISALIGNED_M_in),
    .CH1_RXBYTEREALIGN_M (CH1_RXBYTEREALIGN_M_in),
    .CH1_RXCDRHOLD (CH1_RXCDRHOLD_in),
    .CH1_RXCDRLOCK_M (CH1_RXCDRLOCK_M_in),
    .CH1_RXCDROVRDEN (CH1_RXCDROVRDEN_in),
    .CH1_RXCDRPHDONE_M (CH1_RXCDRPHDONE_M_in),
    .CH1_RXCDRRESET (CH1_RXCDRRESET_in),
    .CH1_RXCHANBONDSEQ_M (CH1_RXCHANBONDSEQ_M_in),
    .CH1_RXCHANISALIGNED_M (CH1_RXCHANISALIGNED_M_in),
    .CH1_RXCHANREALIGN_M (CH1_RXCHANREALIGN_M_in),
    .CH1_RXCHBONDI (CH1_RXCHBONDI_in),
    .CH1_RXCHBONDO_M (CH1_RXCHBONDO_M_in),
    .CH1_RXCLKCORCNT_M (CH1_RXCLKCORCNT_M_in),
    .CH1_RXCOMINITDET_M (CH1_RXCOMINITDET_M_in),
    .CH1_RXCOMMADET_M (CH1_RXCOMMADET_M_in),
    .CH1_RXCOMSASDET_M (CH1_RXCOMSASDET_M_in),
    .CH1_RXCOMWAKEDET_M (CH1_RXCOMWAKEDET_M_in),
    .CH1_RXCTRL0_M (CH1_RXCTRL0_M_in),
    .CH1_RXCTRL1_M (CH1_RXCTRL1_M_in),
    .CH1_RXCTRL2_M (CH1_RXCTRL2_M_in),
    .CH1_RXCTRL3_M (CH1_RXCTRL3_M_in),
    .CH1_RXDAPICODEOVRDEN (CH1_RXDAPICODEOVRDEN_in),
    .CH1_RXDAPICODERESET (CH1_RXDAPICODERESET_in),
    .CH1_RXDATAEXTENDRSVD_M (CH1_RXDATAEXTENDRSVD_M_in),
    .CH1_RXDATAVALID_M (CH1_RXDATAVALID_M_in),
    .CH1_RXDATA_M (CH1_RXDATA_M_in),
    .CH1_RXDCCDONE_M (CH1_RXDCCDONE_M_in),
    .CH1_RXDLYALIGNERR_M (CH1_RXDLYALIGNERR_M_in),
    .CH1_RXDLYALIGNPROG_M (CH1_RXDLYALIGNPROG_M_in),
    .CH1_RXDLYALIGNREQ (CH1_RXDLYALIGNREQ_in),
    .CH1_RXELECIDLE_M (CH1_RXELECIDLE_M_in),
    .CH1_RXEQTRAINING (CH1_RXEQTRAINING_in),
    .CH1_RXFINEALIGNDONE_M (CH1_RXFINEALIGNDONE_M_in),
    .CH1_RXGEARBOXSLIP (CH1_RXGEARBOXSLIP_in),
    .CH1_RXHEADERVALID_M (CH1_RXHEADERVALID_M_in),
    .CH1_RXHEADER_M (CH1_RXHEADER_M_in),
    .CH1_RXLATCLK (CH1_RXLATCLK_in),
    .CH1_RXLPMEN (CH1_RXLPMEN_in),
    .CH1_RXMLDCHAINDONE (CH1_RXMLDCHAINDONE_in),
    .CH1_RXMLDCHAINREQ (CH1_RXMLDCHAINREQ_in),
    .CH1_RXMLFINEALIGNREQ (CH1_RXMLFINEALIGNREQ_in),
    .CH1_RXOOBRESET (CH1_RXOOBRESET_in),
    .CH1_RXOSINTDONE_M (CH1_RXOSINTDONE_M_in),
    .CH1_RXOSINTSTARTED_M (CH1_RXOSINTSTARTED_M_in),
    .CH1_RXOSINTSTROBEDONE_M (CH1_RXOSINTSTROBEDONE_M_in),
    .CH1_RXOSINTSTROBESTARTED_M (CH1_RXOSINTSTROBESTARTED_M_in),
    .CH1_RXPCSRESETMASK (CH1_RXPCSRESETMASK_in),
    .CH1_RXPD (CH1_RXPD_in),
    .CH1_RXPHALIGNDONE_M (CH1_RXPHALIGNDONE_M_in),
    .CH1_RXPHALIGNERR_M (CH1_RXPHALIGNERR_M_in),
    .CH1_RXPHALIGNREQ (CH1_RXPHALIGNREQ_in),
    .CH1_RXPHALIGNRESETMASK (CH1_RXPHALIGNRESETMASK_in),
    .CH1_RXPHDLYPD (CH1_RXPHDLYPD_in),
    .CH1_RXPHDLYRESET (CH1_RXPHDLYRESET_in),
    .CH1_RXPHDLYRESETDONE_M (CH1_RXPHDLYRESETDONE_M_in),
    .CH1_RXPHSETINITDONE_M (CH1_RXPHSETINITDONE_M_in),
    .CH1_RXPHSETINITREQ (CH1_RXPHSETINITREQ_in),
    .CH1_RXPHSHIFT180 (CH1_RXPHSHIFT180_in),
    .CH1_RXPHSHIFT180DONE_M (CH1_RXPHSHIFT180DONE_M_in),
    .CH1_RXPMARESETDONE_M (CH1_RXPMARESETDONE_M_in),
    .CH1_RXPMARESETMASK (CH1_RXPMARESETMASK_in),
    .CH1_RXPOLARITY (CH1_RXPOLARITY_in),
    .CH1_RXPRBSCNTRESET (CH1_RXPRBSCNTRESET_in),
    .CH1_RXPRBSERR_M (CH1_RXPRBSERR_M_in),
    .CH1_RXPRBSLOCKED_M (CH1_RXPRBSLOCKED_M_in),
    .CH1_RXPRBSSEL (CH1_RXPRBSSEL_in),
    .CH1_RXPROGDIVRESET (CH1_RXPROGDIVRESET_in),
    .CH1_RXPROGDIVRESETDONE_M (CH1_RXPROGDIVRESETDONE_M_in),
    .CH1_RXRATE (CH1_RXRATE_in),
    .CH1_RXRESETDONE_M (CH1_RXRESETDONE_M_in),
    .CH1_RXRESETMODE (CH1_RXRESETMODE_in),
    .CH1_RXSLIDE (CH1_RXSLIDE_in),
    .CH1_RXSLIDERDY_M (CH1_RXSLIDERDY_M_in),
    .CH1_RXSTARTOFSEQ_M (CH1_RXSTARTOFSEQ_M_in),
    .CH1_RXSTATUS_M (CH1_RXSTATUS_M_in),
    .CH1_RXSYNCALLIN (CH1_RXSYNCALLIN_in),
    .CH1_RXSYNCDONE_M (CH1_RXSYNCDONE_M_in),
    .CH1_RXTERMINATION (CH1_RXTERMINATION_in),
    .CH1_RXUSERRDY (CH1_RXUSERRDY_in),
    .CH1_RXUSRCLK (CH1_RXUSRCLK_in),
    .CH1_RXVALID_M (CH1_RXVALID_M_in),
    .CH1_SCANCLKB (CH1_SCANCLKB_in),
    .CH1_SCANCNTRLIN (CH1_SCANCNTRLIN_in),
    .CH1_SCANCNTRLOUT_M (CH1_SCANCNTRLOUT_M_in),
    .CH1_SCANENB (CH1_SCANENB_in),
    .CH1_SCANIN (CH1_SCANIN_in),
    .CH1_SCANOUT_M (CH1_SCANOUT_M_in),
    .CH1_SCANRSTB (CH1_SCANRSTB_in),
    .CH1_TSTCLK0 (CH1_TSTCLK0_in),
    .CH1_TSTCLK1 (CH1_TSTCLK1_in),
    .CH1_TSTIN (CH1_TSTIN_in),
    .CH1_TX10GSTAT_M (CH1_TX10GSTAT_M_in),
    .CH1_TXBUFSTATUS_M (CH1_TXBUFSTATUS_M_in),
    .CH1_TXCOMFINISH_M (CH1_TXCOMFINISH_M_in),
    .CH1_TXCOMINIT (CH1_TXCOMINIT_in),
    .CH1_TXCOMSAS (CH1_TXCOMSAS_in),
    .CH1_TXCOMWAKE (CH1_TXCOMWAKE_in),
    .CH1_TXCTRL0 (CH1_TXCTRL0_in),
    .CH1_TXCTRL1 (CH1_TXCTRL1_in),
    .CH1_TXCTRL2 (CH1_TXCTRL2_in),
    .CH1_TXDAPICODEOVRDEN (CH1_TXDAPICODEOVRDEN_in),
    .CH1_TXDAPICODERESET (CH1_TXDAPICODERESET_in),
    .CH1_TXDATA (CH1_TXDATA_in),
    .CH1_TXDATAEXTENDRSVD (CH1_TXDATAEXTENDRSVD_in),
    .CH1_TXDCCDONE_M (CH1_TXDCCDONE_M_in),
    .CH1_TXDEEMPH (CH1_TXDEEMPH_in),
    .CH1_TXDETECTRX (CH1_TXDETECTRX_in),
    .CH1_TXDIFFCTRL (CH1_TXDIFFCTRL_in),
    .CH1_TXDLYALIGNERR_M (CH1_TXDLYALIGNERR_M_in),
    .CH1_TXDLYALIGNPROG_M (CH1_TXDLYALIGNPROG_M_in),
    .CH1_TXDLYALIGNREQ (CH1_TXDLYALIGNREQ_in),
    .CH1_TXELECIDLE (CH1_TXELECIDLE_in),
    .CH1_TXHEADER (CH1_TXHEADER_in),
    .CH1_TXINHIBIT (CH1_TXINHIBIT_in),
    .CH1_TXLATCLK (CH1_TXLATCLK_in),
    .CH1_TXMAINCURSOR (CH1_TXMAINCURSOR_in),
    .CH1_TXMARGIN (CH1_TXMARGIN_in),
    .CH1_TXMLDCHAINDONE (CH1_TXMLDCHAINDONE_in),
    .CH1_TXMLDCHAINREQ (CH1_TXMLDCHAINREQ_in),
    .CH1_TXONESZEROS (CH1_TXONESZEROS_in),
    .CH1_TXPAUSEDELAYALIGN (CH1_TXPAUSEDELAYALIGN_in),
    .CH1_TXPCSRESETMASK (CH1_TXPCSRESETMASK_in),
    .CH1_TXPD (CH1_TXPD_in),
    .CH1_TXPHALIGNDONE_M (CH1_TXPHALIGNDONE_M_in),
    .CH1_TXPHALIGNERR_M (CH1_TXPHALIGNERR_M_in),
    .CH1_TXPHALIGNOUTRSVD_M (CH1_TXPHALIGNOUTRSVD_M_in),
    .CH1_TXPHALIGNREQ (CH1_TXPHALIGNREQ_in),
    .CH1_TXPHALIGNRESETMASK (CH1_TXPHALIGNRESETMASK_in),
    .CH1_TXPHDLYPD (CH1_TXPHDLYPD_in),
    .CH1_TXPHDLYRESET (CH1_TXPHDLYRESET_in),
    .CH1_TXPHDLYRESETDONE_M (CH1_TXPHDLYRESETDONE_M_in),
    .CH1_TXPHDLYTSTCLK (CH1_TXPHDLYTSTCLK_in),
    .CH1_TXPHSETINITDONE_M (CH1_TXPHSETINITDONE_M_in),
    .CH1_TXPHSETINITREQ (CH1_TXPHSETINITREQ_in),
    .CH1_TXPHSHIFT180 (CH1_TXPHSHIFT180_in),
    .CH1_TXPHSHIFT180DONE_M (CH1_TXPHSHIFT180DONE_M_in),
    .CH1_TXPICODEOVRDEN (CH1_TXPICODEOVRDEN_in),
    .CH1_TXPICODERESET (CH1_TXPICODERESET_in),
    .CH1_TXPIPPMEN (CH1_TXPIPPMEN_in),
    .CH1_TXPIPPMSTEPSIZE (CH1_TXPIPPMSTEPSIZE_in),
    .CH1_TXPISOPD (CH1_TXPISOPD_in),
    .CH1_TXPMARESETDONE_M (CH1_TXPMARESETDONE_M_in),
    .CH1_TXPMARESETMASK (CH1_TXPMARESETMASK_in),
    .CH1_TXPOLARITY (CH1_TXPOLARITY_in),
    .CH1_TXPOSTCURSOR (CH1_TXPOSTCURSOR_in),
    .CH1_TXPRBSFORCEERR (CH1_TXPRBSFORCEERR_in),
    .CH1_TXPRBSSEL (CH1_TXPRBSSEL_in),
    .CH1_TXPRECURSOR (CH1_TXPRECURSOR_in),
    .CH1_TXPROGDIVRESET (CH1_TXPROGDIVRESET_in),
    .CH1_TXPROGDIVRESETDONE_M (CH1_TXPROGDIVRESETDONE_M_in),
    .CH1_TXRATE (CH1_TXRATE_in),
    .CH1_TXRESETDONE_M (CH1_TXRESETDONE_M_in),
    .CH1_TXRESETMODE (CH1_TXRESETMODE_in),
    .CH1_TXSEQUENCE (CH1_TXSEQUENCE_in),
    .CH1_TXSWING (CH1_TXSWING_in),
    .CH1_TXSYNCALLIN (CH1_TXSYNCALLIN_in),
    .CH1_TXSYNCDONE_M (CH1_TXSYNCDONE_M_in),
    .CH1_TXUSERRDY (CH1_TXUSERRDY_in),
    .CH1_TXUSRCLK (CH1_TXUSRCLK_in),
    .CH2_BSR_SERIAL (CH2_BSR_SERIAL_in),
    .CH2_BUFGTCEMASK_M (CH2_BUFGTCEMASK_M_in),
    .CH2_BUFGTCE_M (CH2_BUFGTCE_M_in),
    .CH2_BUFGTDIV_M (CH2_BUFGTDIV_M_in),
    .CH2_BUFGTRSTMASK_M (CH2_BUFGTRSTMASK_M_in),
    .CH2_BUFGTRST_M (CH2_BUFGTRST_M_in),
    .CH2_CDRBMCDRREQ (CH2_CDRBMCDRREQ_in),
    .CH2_CDRFREQOS (CH2_CDRFREQOS_in),
    .CH2_CDRINCPCTRL (CH2_CDRINCPCTRL_in),
    .CH2_CDRSTEPDIR (CH2_CDRSTEPDIR_in),
    .CH2_CDRSTEPSQ (CH2_CDRSTEPSQ_in),
    .CH2_CDRSTEPSX (CH2_CDRSTEPSX_in),
    .CH2_CFOKOVRDFINISH (CH2_CFOKOVRDFINISH_in),
    .CH2_CFOKOVRDPULSE (CH2_CFOKOVRDPULSE_in),
    .CH2_CFOKOVRDRDY0_M (CH2_CFOKOVRDRDY0_M_in),
    .CH2_CFOKOVRDRDY1_M (CH2_CFOKOVRDRDY1_M_in),
    .CH2_CFOKOVRDSTART (CH2_CFOKOVRDSTART_in),
    .CH2_CLKRSVD0 (CH2_CLKRSVD0_in),
    .CH2_CLKRSVD1 (CH2_CLKRSVD1_in),
    .CH2_CSSDRSTB (CH2_CSSDRSTB_in),
    .CH2_CSSDSTOPCLK (CH2_CSSDSTOPCLK_in),
    .CH2_CSSDSTOPCLKDONE_M (CH2_CSSDSTOPCLKDONE_M_in),
    .CH2_DMONFIFORESET (CH2_DMONFIFORESET_in),
    .CH2_DMONITORCLK (CH2_DMONITORCLK_in),
    .CH2_DMONITOROUT_M (CH2_DMONITOROUT_M_in),
    .CH2_EDTUPDATEB (CH2_EDTUPDATEB_in),
    .CH2_EYESCANDATAERROR_M (CH2_EYESCANDATAERROR_M_in),
    .CH2_EYESCANRESET (CH2_EYESCANRESET_in),
    .CH2_EYESCANTRIGGER (CH2_EYESCANTRIGGER_in),
    .CH2_GTRSVD (CH2_GTRSVD_in),
    .CH2_GTRXRESET (CH2_GTRXRESET_in),
    .CH2_GTTXRESET (CH2_GTTXRESET_in),
    .CH2_HSDPPCSRESET (CH2_HSDPPCSRESET_in),
    .CH2_ILORESET (CH2_ILORESET_in),
    .CH2_ILORESETDONE_M (CH2_ILORESETDONE_M_in),
    .CH2_ILORESETMASK (CH2_ILORESETMASK_in),
    .CH2_LOOPBACK (CH2_LOOPBACK_in),
    .CH2_PCIERSTB (CH2_PCIERSTB_in),
    .CH2_PCSRSVDIN (CH2_PCSRSVDIN_in),
    .CH2_PCSRSVDOUT_M (CH2_PCSRSVDOUT_M_in),
    .CH2_PHYESMADAPTSAVE (CH2_PHYESMADAPTSAVE_in),
    .CH2_PHYREADY_M (CH2_PHYREADY_M_in),
    .CH2_PHYSTATUS_M (CH2_PHYSTATUS_M_in),
    .CH2_PINRSVDAS_M (CH2_PINRSVDAS_M_in),
    .CH2_RESETEXCEPTION_M (CH2_RESETEXCEPTION_M_in),
    .CH2_RX10GSTAT_M (CH2_RX10GSTAT_M_in),
    .CH2_RXBUFSTATUS_M (CH2_RXBUFSTATUS_M_in),
    .CH2_RXBYTEISALIGNED_M (CH2_RXBYTEISALIGNED_M_in),
    .CH2_RXBYTEREALIGN_M (CH2_RXBYTEREALIGN_M_in),
    .CH2_RXCDRHOLD (CH2_RXCDRHOLD_in),
    .CH2_RXCDRLOCK_M (CH2_RXCDRLOCK_M_in),
    .CH2_RXCDROVRDEN (CH2_RXCDROVRDEN_in),
    .CH2_RXCDRPHDONE_M (CH2_RXCDRPHDONE_M_in),
    .CH2_RXCDRRESET (CH2_RXCDRRESET_in),
    .CH2_RXCHANBONDSEQ_M (CH2_RXCHANBONDSEQ_M_in),
    .CH2_RXCHANISALIGNED_M (CH2_RXCHANISALIGNED_M_in),
    .CH2_RXCHANREALIGN_M (CH2_RXCHANREALIGN_M_in),
    .CH2_RXCHBONDI (CH2_RXCHBONDI_in),
    .CH2_RXCHBONDO_M (CH2_RXCHBONDO_M_in),
    .CH2_RXCLKCORCNT_M (CH2_RXCLKCORCNT_M_in),
    .CH2_RXCOMINITDET_M (CH2_RXCOMINITDET_M_in),
    .CH2_RXCOMMADET_M (CH2_RXCOMMADET_M_in),
    .CH2_RXCOMSASDET_M (CH2_RXCOMSASDET_M_in),
    .CH2_RXCOMWAKEDET_M (CH2_RXCOMWAKEDET_M_in),
    .CH2_RXCTRL0_M (CH2_RXCTRL0_M_in),
    .CH2_RXCTRL1_M (CH2_RXCTRL1_M_in),
    .CH2_RXCTRL2_M (CH2_RXCTRL2_M_in),
    .CH2_RXCTRL3_M (CH2_RXCTRL3_M_in),
    .CH2_RXDAPICODEOVRDEN (CH2_RXDAPICODEOVRDEN_in),
    .CH2_RXDAPICODERESET (CH2_RXDAPICODERESET_in),
    .CH2_RXDATAEXTENDRSVD_M (CH2_RXDATAEXTENDRSVD_M_in),
    .CH2_RXDATAVALID_M (CH2_RXDATAVALID_M_in),
    .CH2_RXDATA_M (CH2_RXDATA_M_in),
    .CH2_RXDCCDONE_M (CH2_RXDCCDONE_M_in),
    .CH2_RXDLYALIGNERR_M (CH2_RXDLYALIGNERR_M_in),
    .CH2_RXDLYALIGNPROG_M (CH2_RXDLYALIGNPROG_M_in),
    .CH2_RXDLYALIGNREQ (CH2_RXDLYALIGNREQ_in),
    .CH2_RXELECIDLE_M (CH2_RXELECIDLE_M_in),
    .CH2_RXEQTRAINING (CH2_RXEQTRAINING_in),
    .CH2_RXFINEALIGNDONE_M (CH2_RXFINEALIGNDONE_M_in),
    .CH2_RXGEARBOXSLIP (CH2_RXGEARBOXSLIP_in),
    .CH2_RXHEADERVALID_M (CH2_RXHEADERVALID_M_in),
    .CH2_RXHEADER_M (CH2_RXHEADER_M_in),
    .CH2_RXLATCLK (CH2_RXLATCLK_in),
    .CH2_RXLPMEN (CH2_RXLPMEN_in),
    .CH2_RXMLDCHAINDONE (CH2_RXMLDCHAINDONE_in),
    .CH2_RXMLDCHAINREQ (CH2_RXMLDCHAINREQ_in),
    .CH2_RXMLFINEALIGNREQ (CH2_RXMLFINEALIGNREQ_in),
    .CH2_RXOOBRESET (CH2_RXOOBRESET_in),
    .CH2_RXOSINTDONE_M (CH2_RXOSINTDONE_M_in),
    .CH2_RXOSINTSTARTED_M (CH2_RXOSINTSTARTED_M_in),
    .CH2_RXOSINTSTROBEDONE_M (CH2_RXOSINTSTROBEDONE_M_in),
    .CH2_RXOSINTSTROBESTARTED_M (CH2_RXOSINTSTROBESTARTED_M_in),
    .CH2_RXPCSRESETMASK (CH2_RXPCSRESETMASK_in),
    .CH2_RXPD (CH2_RXPD_in),
    .CH2_RXPHALIGNDONE_M (CH2_RXPHALIGNDONE_M_in),
    .CH2_RXPHALIGNERR_M (CH2_RXPHALIGNERR_M_in),
    .CH2_RXPHALIGNREQ (CH2_RXPHALIGNREQ_in),
    .CH2_RXPHALIGNRESETMASK (CH2_RXPHALIGNRESETMASK_in),
    .CH2_RXPHDLYPD (CH2_RXPHDLYPD_in),
    .CH2_RXPHDLYRESET (CH2_RXPHDLYRESET_in),
    .CH2_RXPHDLYRESETDONE_M (CH2_RXPHDLYRESETDONE_M_in),
    .CH2_RXPHSETINITDONE_M (CH2_RXPHSETINITDONE_M_in),
    .CH2_RXPHSETINITREQ (CH2_RXPHSETINITREQ_in),
    .CH2_RXPHSHIFT180 (CH2_RXPHSHIFT180_in),
    .CH2_RXPHSHIFT180DONE_M (CH2_RXPHSHIFT180DONE_M_in),
    .CH2_RXPMARESETDONE_M (CH2_RXPMARESETDONE_M_in),
    .CH2_RXPMARESETMASK (CH2_RXPMARESETMASK_in),
    .CH2_RXPOLARITY (CH2_RXPOLARITY_in),
    .CH2_RXPRBSCNTRESET (CH2_RXPRBSCNTRESET_in),
    .CH2_RXPRBSERR_M (CH2_RXPRBSERR_M_in),
    .CH2_RXPRBSLOCKED_M (CH2_RXPRBSLOCKED_M_in),
    .CH2_RXPRBSSEL (CH2_RXPRBSSEL_in),
    .CH2_RXPROGDIVRESET (CH2_RXPROGDIVRESET_in),
    .CH2_RXPROGDIVRESETDONE_M (CH2_RXPROGDIVRESETDONE_M_in),
    .CH2_RXRATE (CH2_RXRATE_in),
    .CH2_RXRESETDONE_M (CH2_RXRESETDONE_M_in),
    .CH2_RXRESETMODE (CH2_RXRESETMODE_in),
    .CH2_RXSLIDE (CH2_RXSLIDE_in),
    .CH2_RXSLIDERDY_M (CH2_RXSLIDERDY_M_in),
    .CH2_RXSTARTOFSEQ_M (CH2_RXSTARTOFSEQ_M_in),
    .CH2_RXSTATUS_M (CH2_RXSTATUS_M_in),
    .CH2_RXSYNCALLIN (CH2_RXSYNCALLIN_in),
    .CH2_RXSYNCDONE_M (CH2_RXSYNCDONE_M_in),
    .CH2_RXTERMINATION (CH2_RXTERMINATION_in),
    .CH2_RXUSERRDY (CH2_RXUSERRDY_in),
    .CH2_RXUSRCLK (CH2_RXUSRCLK_in),
    .CH2_RXVALID_M (CH2_RXVALID_M_in),
    .CH2_SCANCLKB (CH2_SCANCLKB_in),
    .CH2_SCANCNTRLIN (CH2_SCANCNTRLIN_in),
    .CH2_SCANCNTRLOUT_M (CH2_SCANCNTRLOUT_M_in),
    .CH2_SCANENB (CH2_SCANENB_in),
    .CH2_SCANIN (CH2_SCANIN_in),
    .CH2_SCANOUT_M (CH2_SCANOUT_M_in),
    .CH2_SCANRSTB (CH2_SCANRSTB_in),
    .CH2_TSTCLK0 (CH2_TSTCLK0_in),
    .CH2_TSTCLK1 (CH2_TSTCLK1_in),
    .CH2_TSTIN (CH2_TSTIN_in),
    .CH2_TX10GSTAT_M (CH2_TX10GSTAT_M_in),
    .CH2_TXBUFSTATUS_M (CH2_TXBUFSTATUS_M_in),
    .CH2_TXCOMFINISH_M (CH2_TXCOMFINISH_M_in),
    .CH2_TXCOMINIT (CH2_TXCOMINIT_in),
    .CH2_TXCOMSAS (CH2_TXCOMSAS_in),
    .CH2_TXCOMWAKE (CH2_TXCOMWAKE_in),
    .CH2_TXCTRL0 (CH2_TXCTRL0_in),
    .CH2_TXCTRL1 (CH2_TXCTRL1_in),
    .CH2_TXCTRL2 (CH2_TXCTRL2_in),
    .CH2_TXDAPICODEOVRDEN (CH2_TXDAPICODEOVRDEN_in),
    .CH2_TXDAPICODERESET (CH2_TXDAPICODERESET_in),
    .CH2_TXDATA (CH2_TXDATA_in),
    .CH2_TXDATAEXTENDRSVD (CH2_TXDATAEXTENDRSVD_in),
    .CH2_TXDCCDONE_M (CH2_TXDCCDONE_M_in),
    .CH2_TXDEEMPH (CH2_TXDEEMPH_in),
    .CH2_TXDETECTRX (CH2_TXDETECTRX_in),
    .CH2_TXDIFFCTRL (CH2_TXDIFFCTRL_in),
    .CH2_TXDLYALIGNERR_M (CH2_TXDLYALIGNERR_M_in),
    .CH2_TXDLYALIGNPROG_M (CH2_TXDLYALIGNPROG_M_in),
    .CH2_TXDLYALIGNREQ (CH2_TXDLYALIGNREQ_in),
    .CH2_TXELECIDLE (CH2_TXELECIDLE_in),
    .CH2_TXHEADER (CH2_TXHEADER_in),
    .CH2_TXINHIBIT (CH2_TXINHIBIT_in),
    .CH2_TXLATCLK (CH2_TXLATCLK_in),
    .CH2_TXMAINCURSOR (CH2_TXMAINCURSOR_in),
    .CH2_TXMARGIN (CH2_TXMARGIN_in),
    .CH2_TXMLDCHAINDONE (CH2_TXMLDCHAINDONE_in),
    .CH2_TXMLDCHAINREQ (CH2_TXMLDCHAINREQ_in),
    .CH2_TXONESZEROS (CH2_TXONESZEROS_in),
    .CH2_TXPAUSEDELAYALIGN (CH2_TXPAUSEDELAYALIGN_in),
    .CH2_TXPCSRESETMASK (CH2_TXPCSRESETMASK_in),
    .CH2_TXPD (CH2_TXPD_in),
    .CH2_TXPHALIGNDONE_M (CH2_TXPHALIGNDONE_M_in),
    .CH2_TXPHALIGNERR_M (CH2_TXPHALIGNERR_M_in),
    .CH2_TXPHALIGNOUTRSVD_M (CH2_TXPHALIGNOUTRSVD_M_in),
    .CH2_TXPHALIGNREQ (CH2_TXPHALIGNREQ_in),
    .CH2_TXPHALIGNRESETMASK (CH2_TXPHALIGNRESETMASK_in),
    .CH2_TXPHDLYPD (CH2_TXPHDLYPD_in),
    .CH2_TXPHDLYRESET (CH2_TXPHDLYRESET_in),
    .CH2_TXPHDLYRESETDONE_M (CH2_TXPHDLYRESETDONE_M_in),
    .CH2_TXPHDLYTSTCLK (CH2_TXPHDLYTSTCLK_in),
    .CH2_TXPHSETINITDONE_M (CH2_TXPHSETINITDONE_M_in),
    .CH2_TXPHSETINITREQ (CH2_TXPHSETINITREQ_in),
    .CH2_TXPHSHIFT180 (CH2_TXPHSHIFT180_in),
    .CH2_TXPHSHIFT180DONE_M (CH2_TXPHSHIFT180DONE_M_in),
    .CH2_TXPICODEOVRDEN (CH2_TXPICODEOVRDEN_in),
    .CH2_TXPICODERESET (CH2_TXPICODERESET_in),
    .CH2_TXPIPPMEN (CH2_TXPIPPMEN_in),
    .CH2_TXPIPPMSTEPSIZE (CH2_TXPIPPMSTEPSIZE_in),
    .CH2_TXPISOPD (CH2_TXPISOPD_in),
    .CH2_TXPMARESETDONE_M (CH2_TXPMARESETDONE_M_in),
    .CH2_TXPMARESETMASK (CH2_TXPMARESETMASK_in),
    .CH2_TXPOLARITY (CH2_TXPOLARITY_in),
    .CH2_TXPOSTCURSOR (CH2_TXPOSTCURSOR_in),
    .CH2_TXPRBSFORCEERR (CH2_TXPRBSFORCEERR_in),
    .CH2_TXPRBSSEL (CH2_TXPRBSSEL_in),
    .CH2_TXPRECURSOR (CH2_TXPRECURSOR_in),
    .CH2_TXPROGDIVRESET (CH2_TXPROGDIVRESET_in),
    .CH2_TXPROGDIVRESETDONE_M (CH2_TXPROGDIVRESETDONE_M_in),
    .CH2_TXRATE (CH2_TXRATE_in),
    .CH2_TXRESETDONE_M (CH2_TXRESETDONE_M_in),
    .CH2_TXRESETMODE (CH2_TXRESETMODE_in),
    .CH2_TXSEQUENCE (CH2_TXSEQUENCE_in),
    .CH2_TXSWING (CH2_TXSWING_in),
    .CH2_TXSYNCALLIN (CH2_TXSYNCALLIN_in),
    .CH2_TXSYNCDONE_M (CH2_TXSYNCDONE_M_in),
    .CH2_TXUSERRDY (CH2_TXUSERRDY_in),
    .CH2_TXUSRCLK (CH2_TXUSRCLK_in),
    .CH3_BSR_SERIAL (CH3_BSR_SERIAL_in),
    .CH3_BUFGTCEMASK_M (CH3_BUFGTCEMASK_M_in),
    .CH3_BUFGTCE_M (CH3_BUFGTCE_M_in),
    .CH3_BUFGTDIV_M (CH3_BUFGTDIV_M_in),
    .CH3_BUFGTRSTMASK_M (CH3_BUFGTRSTMASK_M_in),
    .CH3_BUFGTRST_M (CH3_BUFGTRST_M_in),
    .CH3_CDRBMCDRREQ (CH3_CDRBMCDRREQ_in),
    .CH3_CDRFREQOS (CH3_CDRFREQOS_in),
    .CH3_CDRINCPCTRL (CH3_CDRINCPCTRL_in),
    .CH3_CDRSTEPDIR (CH3_CDRSTEPDIR_in),
    .CH3_CDRSTEPSQ (CH3_CDRSTEPSQ_in),
    .CH3_CDRSTEPSX (CH3_CDRSTEPSX_in),
    .CH3_CFOKOVRDFINISH (CH3_CFOKOVRDFINISH_in),
    .CH3_CFOKOVRDPULSE (CH3_CFOKOVRDPULSE_in),
    .CH3_CFOKOVRDRDY0_M (CH3_CFOKOVRDRDY0_M_in),
    .CH3_CFOKOVRDRDY1_M (CH3_CFOKOVRDRDY1_M_in),
    .CH3_CFOKOVRDSTART (CH3_CFOKOVRDSTART_in),
    .CH3_CLKRSVD0 (CH3_CLKRSVD0_in),
    .CH3_CLKRSVD1 (CH3_CLKRSVD1_in),
    .CH3_CSSDRSTB (CH3_CSSDRSTB_in),
    .CH3_CSSDSTOPCLK (CH3_CSSDSTOPCLK_in),
    .CH3_CSSDSTOPCLKDONE_M (CH3_CSSDSTOPCLKDONE_M_in),
    .CH3_DMONFIFORESET (CH3_DMONFIFORESET_in),
    .CH3_DMONITORCLK (CH3_DMONITORCLK_in),
    .CH3_DMONITOROUT_M (CH3_DMONITOROUT_M_in),
    .CH3_EDTUPDATEB (CH3_EDTUPDATEB_in),
    .CH3_EYESCANDATAERROR_M (CH3_EYESCANDATAERROR_M_in),
    .CH3_EYESCANRESET (CH3_EYESCANRESET_in),
    .CH3_EYESCANTRIGGER (CH3_EYESCANTRIGGER_in),
    .CH3_GTRSVD (CH3_GTRSVD_in),
    .CH3_GTRXRESET (CH3_GTRXRESET_in),
    .CH3_GTTXRESET (CH3_GTTXRESET_in),
    .CH3_HSDPPCSRESET (CH3_HSDPPCSRESET_in),
    .CH3_ILORESET (CH3_ILORESET_in),
    .CH3_ILORESETDONE_M (CH3_ILORESETDONE_M_in),
    .CH3_ILORESETMASK (CH3_ILORESETMASK_in),
    .CH3_LOOPBACK (CH3_LOOPBACK_in),
    .CH3_PCIERSTB (CH3_PCIERSTB_in),
    .CH3_PCSRSVDIN (CH3_PCSRSVDIN_in),
    .CH3_PCSRSVDOUT_M (CH3_PCSRSVDOUT_M_in),
    .CH3_PHYESMADAPTSAVE (CH3_PHYESMADAPTSAVE_in),
    .CH3_PHYREADY_M (CH3_PHYREADY_M_in),
    .CH3_PHYSTATUS_M (CH3_PHYSTATUS_M_in),
    .CH3_PINRSVDAS_M (CH3_PINRSVDAS_M_in),
    .CH3_RESETEXCEPTION_M (CH3_RESETEXCEPTION_M_in),
    .CH3_RX10GSTAT_M (CH3_RX10GSTAT_M_in),
    .CH3_RXBUFSTATUS_M (CH3_RXBUFSTATUS_M_in),
    .CH3_RXBYTEISALIGNED_M (CH3_RXBYTEISALIGNED_M_in),
    .CH3_RXBYTEREALIGN_M (CH3_RXBYTEREALIGN_M_in),
    .CH3_RXCDRHOLD (CH3_RXCDRHOLD_in),
    .CH3_RXCDRLOCK_M (CH3_RXCDRLOCK_M_in),
    .CH3_RXCDROVRDEN (CH3_RXCDROVRDEN_in),
    .CH3_RXCDRPHDONE_M (CH3_RXCDRPHDONE_M_in),
    .CH3_RXCDRRESET (CH3_RXCDRRESET_in),
    .CH3_RXCHANBONDSEQ_M (CH3_RXCHANBONDSEQ_M_in),
    .CH3_RXCHANISALIGNED_M (CH3_RXCHANISALIGNED_M_in),
    .CH3_RXCHANREALIGN_M (CH3_RXCHANREALIGN_M_in),
    .CH3_RXCHBONDI (CH3_RXCHBONDI_in),
    .CH3_RXCHBONDO_M (CH3_RXCHBONDO_M_in),
    .CH3_RXCLKCORCNT_M (CH3_RXCLKCORCNT_M_in),
    .CH3_RXCOMINITDET_M (CH3_RXCOMINITDET_M_in),
    .CH3_RXCOMMADET_M (CH3_RXCOMMADET_M_in),
    .CH3_RXCOMSASDET_M (CH3_RXCOMSASDET_M_in),
    .CH3_RXCOMWAKEDET_M (CH3_RXCOMWAKEDET_M_in),
    .CH3_RXCTRL0_M (CH3_RXCTRL0_M_in),
    .CH3_RXCTRL1_M (CH3_RXCTRL1_M_in),
    .CH3_RXCTRL2_M (CH3_RXCTRL2_M_in),
    .CH3_RXCTRL3_M (CH3_RXCTRL3_M_in),
    .CH3_RXDAPICODEOVRDEN (CH3_RXDAPICODEOVRDEN_in),
    .CH3_RXDAPICODERESET (CH3_RXDAPICODERESET_in),
    .CH3_RXDATAEXTENDRSVD_M (CH3_RXDATAEXTENDRSVD_M_in),
    .CH3_RXDATAVALID_M (CH3_RXDATAVALID_M_in),
    .CH3_RXDATA_M (CH3_RXDATA_M_in),
    .CH3_RXDCCDONE_M (CH3_RXDCCDONE_M_in),
    .CH3_RXDLYALIGNERR_M (CH3_RXDLYALIGNERR_M_in),
    .CH3_RXDLYALIGNPROG_M (CH3_RXDLYALIGNPROG_M_in),
    .CH3_RXDLYALIGNREQ (CH3_RXDLYALIGNREQ_in),
    .CH3_RXELECIDLE_M (CH3_RXELECIDLE_M_in),
    .CH3_RXEQTRAINING (CH3_RXEQTRAINING_in),
    .CH3_RXFINEALIGNDONE_M (CH3_RXFINEALIGNDONE_M_in),
    .CH3_RXGEARBOXSLIP (CH3_RXGEARBOXSLIP_in),
    .CH3_RXHEADERVALID_M (CH3_RXHEADERVALID_M_in),
    .CH3_RXHEADER_M (CH3_RXHEADER_M_in),
    .CH3_RXLATCLK (CH3_RXLATCLK_in),
    .CH3_RXLPMEN (CH3_RXLPMEN_in),
    .CH3_RXMLDCHAINDONE (CH3_RXMLDCHAINDONE_in),
    .CH3_RXMLDCHAINREQ (CH3_RXMLDCHAINREQ_in),
    .CH3_RXMLFINEALIGNREQ (CH3_RXMLFINEALIGNREQ_in),
    .CH3_RXOOBRESET (CH3_RXOOBRESET_in),
    .CH3_RXOSINTDONE_M (CH3_RXOSINTDONE_M_in),
    .CH3_RXOSINTSTARTED_M (CH3_RXOSINTSTARTED_M_in),
    .CH3_RXOSINTSTROBEDONE_M (CH3_RXOSINTSTROBEDONE_M_in),
    .CH3_RXOSINTSTROBESTARTED_M (CH3_RXOSINTSTROBESTARTED_M_in),
    .CH3_RXPCSRESETMASK (CH3_RXPCSRESETMASK_in),
    .CH3_RXPD (CH3_RXPD_in),
    .CH3_RXPHALIGNDONE_M (CH3_RXPHALIGNDONE_M_in),
    .CH3_RXPHALIGNERR_M (CH3_RXPHALIGNERR_M_in),
    .CH3_RXPHALIGNREQ (CH3_RXPHALIGNREQ_in),
    .CH3_RXPHALIGNRESETMASK (CH3_RXPHALIGNRESETMASK_in),
    .CH3_RXPHDLYPD (CH3_RXPHDLYPD_in),
    .CH3_RXPHDLYRESET (CH3_RXPHDLYRESET_in),
    .CH3_RXPHDLYRESETDONE_M (CH3_RXPHDLYRESETDONE_M_in),
    .CH3_RXPHSETINITDONE_M (CH3_RXPHSETINITDONE_M_in),
    .CH3_RXPHSETINITREQ (CH3_RXPHSETINITREQ_in),
    .CH3_RXPHSHIFT180 (CH3_RXPHSHIFT180_in),
    .CH3_RXPHSHIFT180DONE_M (CH3_RXPHSHIFT180DONE_M_in),
    .CH3_RXPMARESETDONE_M (CH3_RXPMARESETDONE_M_in),
    .CH3_RXPMARESETMASK (CH3_RXPMARESETMASK_in),
    .CH3_RXPOLARITY (CH3_RXPOLARITY_in),
    .CH3_RXPRBSCNTRESET (CH3_RXPRBSCNTRESET_in),
    .CH3_RXPRBSERR_M (CH3_RXPRBSERR_M_in),
    .CH3_RXPRBSLOCKED_M (CH3_RXPRBSLOCKED_M_in),
    .CH3_RXPRBSSEL (CH3_RXPRBSSEL_in),
    .CH3_RXPROGDIVRESET (CH3_RXPROGDIVRESET_in),
    .CH3_RXPROGDIVRESETDONE_M (CH3_RXPROGDIVRESETDONE_M_in),
    .CH3_RXRATE (CH3_RXRATE_in),
    .CH3_RXRESETDONE_M (CH3_RXRESETDONE_M_in),
    .CH3_RXRESETMODE (CH3_RXRESETMODE_in),
    .CH3_RXSLIDE (CH3_RXSLIDE_in),
    .CH3_RXSLIDERDY_M (CH3_RXSLIDERDY_M_in),
    .CH3_RXSTARTOFSEQ_M (CH3_RXSTARTOFSEQ_M_in),
    .CH3_RXSTATUS_M (CH3_RXSTATUS_M_in),
    .CH3_RXSYNCALLIN (CH3_RXSYNCALLIN_in),
    .CH3_RXSYNCDONE_M (CH3_RXSYNCDONE_M_in),
    .CH3_RXTERMINATION (CH3_RXTERMINATION_in),
    .CH3_RXUSERRDY (CH3_RXUSERRDY_in),
    .CH3_RXUSRCLK (CH3_RXUSRCLK_in),
    .CH3_RXVALID_M (CH3_RXVALID_M_in),
    .CH3_SCANCLKB (CH3_SCANCLKB_in),
    .CH3_SCANCNTRLIN (CH3_SCANCNTRLIN_in),
    .CH3_SCANCNTRLOUT_M (CH3_SCANCNTRLOUT_M_in),
    .CH3_SCANENB (CH3_SCANENB_in),
    .CH3_SCANIN (CH3_SCANIN_in),
    .CH3_SCANOUT_M (CH3_SCANOUT_M_in),
    .CH3_SCANRSTB (CH3_SCANRSTB_in),
    .CH3_TSTCLK0 (CH3_TSTCLK0_in),
    .CH3_TSTCLK1 (CH3_TSTCLK1_in),
    .CH3_TSTIN (CH3_TSTIN_in),
    .CH3_TX10GSTAT_M (CH3_TX10GSTAT_M_in),
    .CH3_TXBUFSTATUS_M (CH3_TXBUFSTATUS_M_in),
    .CH3_TXCOMFINISH_M (CH3_TXCOMFINISH_M_in),
    .CH3_TXCOMINIT (CH3_TXCOMINIT_in),
    .CH3_TXCOMSAS (CH3_TXCOMSAS_in),
    .CH3_TXCOMWAKE (CH3_TXCOMWAKE_in),
    .CH3_TXCTRL0 (CH3_TXCTRL0_in),
    .CH3_TXCTRL1 (CH3_TXCTRL1_in),
    .CH3_TXCTRL2 (CH3_TXCTRL2_in),
    .CH3_TXDAPICODEOVRDEN (CH3_TXDAPICODEOVRDEN_in),
    .CH3_TXDAPICODERESET (CH3_TXDAPICODERESET_in),
    .CH3_TXDATA (CH3_TXDATA_in),
    .CH3_TXDATAEXTENDRSVD (CH3_TXDATAEXTENDRSVD_in),
    .CH3_TXDCCDONE_M (CH3_TXDCCDONE_M_in),
    .CH3_TXDEEMPH (CH3_TXDEEMPH_in),
    .CH3_TXDETECTRX (CH3_TXDETECTRX_in),
    .CH3_TXDIFFCTRL (CH3_TXDIFFCTRL_in),
    .CH3_TXDLYALIGNERR_M (CH3_TXDLYALIGNERR_M_in),
    .CH3_TXDLYALIGNPROG_M (CH3_TXDLYALIGNPROG_M_in),
    .CH3_TXDLYALIGNREQ (CH3_TXDLYALIGNREQ_in),
    .CH3_TXELECIDLE (CH3_TXELECIDLE_in),
    .CH3_TXHEADER (CH3_TXHEADER_in),
    .CH3_TXINHIBIT (CH3_TXINHIBIT_in),
    .CH3_TXLATCLK (CH3_TXLATCLK_in),
    .CH3_TXMAINCURSOR (CH3_TXMAINCURSOR_in),
    .CH3_TXMARGIN (CH3_TXMARGIN_in),
    .CH3_TXMLDCHAINDONE (CH3_TXMLDCHAINDONE_in),
    .CH3_TXMLDCHAINREQ (CH3_TXMLDCHAINREQ_in),
    .CH3_TXONESZEROS (CH3_TXONESZEROS_in),
    .CH3_TXPAUSEDELAYALIGN (CH3_TXPAUSEDELAYALIGN_in),
    .CH3_TXPCSRESETMASK (CH3_TXPCSRESETMASK_in),
    .CH3_TXPD (CH3_TXPD_in),
    .CH3_TXPHALIGNDONE_M (CH3_TXPHALIGNDONE_M_in),
    .CH3_TXPHALIGNERR_M (CH3_TXPHALIGNERR_M_in),
    .CH3_TXPHALIGNOUTRSVD_M (CH3_TXPHALIGNOUTRSVD_M_in),
    .CH3_TXPHALIGNREQ (CH3_TXPHALIGNREQ_in),
    .CH3_TXPHALIGNRESETMASK (CH3_TXPHALIGNRESETMASK_in),
    .CH3_TXPHDLYPD (CH3_TXPHDLYPD_in),
    .CH3_TXPHDLYRESET (CH3_TXPHDLYRESET_in),
    .CH3_TXPHDLYRESETDONE_M (CH3_TXPHDLYRESETDONE_M_in),
    .CH3_TXPHDLYTSTCLK (CH3_TXPHDLYTSTCLK_in),
    .CH3_TXPHSETINITDONE_M (CH3_TXPHSETINITDONE_M_in),
    .CH3_TXPHSETINITREQ (CH3_TXPHSETINITREQ_in),
    .CH3_TXPHSHIFT180 (CH3_TXPHSHIFT180_in),
    .CH3_TXPHSHIFT180DONE_M (CH3_TXPHSHIFT180DONE_M_in),
    .CH3_TXPICODEOVRDEN (CH3_TXPICODEOVRDEN_in),
    .CH3_TXPICODERESET (CH3_TXPICODERESET_in),
    .CH3_TXPIPPMEN (CH3_TXPIPPMEN_in),
    .CH3_TXPIPPMSTEPSIZE (CH3_TXPIPPMSTEPSIZE_in),
    .CH3_TXPISOPD (CH3_TXPISOPD_in),
    .CH3_TXPMARESETDONE_M (CH3_TXPMARESETDONE_M_in),
    .CH3_TXPMARESETMASK (CH3_TXPMARESETMASK_in),
    .CH3_TXPOLARITY (CH3_TXPOLARITY_in),
    .CH3_TXPOSTCURSOR (CH3_TXPOSTCURSOR_in),
    .CH3_TXPRBSFORCEERR (CH3_TXPRBSFORCEERR_in),
    .CH3_TXPRBSSEL (CH3_TXPRBSSEL_in),
    .CH3_TXPRECURSOR (CH3_TXPRECURSOR_in),
    .CH3_TXPROGDIVRESET (CH3_TXPROGDIVRESET_in),
    .CH3_TXPROGDIVRESETDONE_M (CH3_TXPROGDIVRESETDONE_M_in),
    .CH3_TXRATE (CH3_TXRATE_in),
    .CH3_TXRESETDONE_M (CH3_TXRESETDONE_M_in),
    .CH3_TXRESETMODE (CH3_TXRESETMODE_in),
    .CH3_TXSEQUENCE (CH3_TXSEQUENCE_in),
    .CH3_TXSWING (CH3_TXSWING_in),
    .CH3_TXSYNCALLIN (CH3_TXSYNCALLIN_in),
    .CH3_TXSYNCDONE_M (CH3_TXSYNCDONE_M_in),
    .CH3_TXUSERRDY (CH3_TXUSERRDY_in),
    .CH3_TXUSRCLK (CH3_TXUSRCLK_in),
    .CORRECTERR_M (CORRECTERR_M_in),
    .CSSDRSTB (CSSDRSTB_in),
    .CSSDSTOPCLK (CSSDSTOPCLK_in),
    .CSSDSTOPCLKDONE_M (CSSDSTOPCLKDONE_M_in),
    .CTRLRSVDIN0 (CTRLRSVDIN0_in),
    .CTRLRSVDIN1 (CTRLRSVDIN1_in),
    .CTRLRSVDOUT_M (CTRLRSVDOUT_M_in),
    .DEBUGTRACECLK (DEBUGTRACECLK_in),
    .DEBUGTRACEREADY (DEBUGTRACEREADY_in),
    .DEBUGTRACETDATA_M (DEBUGTRACETDATA_M_in),
    .DEBUGTRACETVALID_M (DEBUGTRACETVALID_M_in),
    .EDTUPDATEB (EDTUPDATEB_in),
    .GPI (GPI_in),
    .GPO_M (GPO_M_in),
    .GTPOWERGOOD_M (GTPOWERGOOD_M_in),
    .HSCLK0_LCPLLCLKRSVD0 (HSCLK0_LCPLLCLKRSVD0_in),
    .HSCLK0_LCPLLCLKRSVD1 (HSCLK0_LCPLLCLKRSVD1_in),
    .HSCLK0_LCPLLFBCLKLOST_M (HSCLK0_LCPLLFBCLKLOST_M_in),
    .HSCLK0_LCPLLFBDIV (HSCLK0_LCPLLFBDIV_in),
    .HSCLK0_LCPLLGTGREFCLK (HSCLK0_LCPLLGTGREFCLK_in),
    .HSCLK0_LCPLLLOCK_M (HSCLK0_LCPLLLOCK_M_in),
    .HSCLK0_LCPLLPD (HSCLK0_LCPLLPD_in),
    .HSCLK0_LCPLLREFCLKLOST_M (HSCLK0_LCPLLREFCLKLOST_M_in),
    .HSCLK0_LCPLLREFCLKMONITOR_M (HSCLK0_LCPLLREFCLKMONITOR_M_in),
    .HSCLK0_LCPLLREFCLKSEL (HSCLK0_LCPLLREFCLKSEL_in),
    .HSCLK0_LCPLLRESET (HSCLK0_LCPLLRESET_in),
    .HSCLK0_LCPLLRESETBYPASSMODE (HSCLK0_LCPLLRESETBYPASSMODE_in),
    .HSCLK0_LCPLLRESETMASK (HSCLK0_LCPLLRESETMASK_in),
    .HSCLK0_LCPLLRSVD0 (HSCLK0_LCPLLRSVD0_in),
    .HSCLK0_LCPLLRSVD1 (HSCLK0_LCPLLRSVD1_in),
    .HSCLK0_LCPLLRSVDOUT_M (HSCLK0_LCPLLRSVDOUT_M_in),
    .HSCLK0_LCPLLSDMDATA (HSCLK0_LCPLLSDMDATA_in),
    .HSCLK0_LCPLLSDMTOGGLE (HSCLK0_LCPLLSDMTOGGLE_in),
    .HSCLK0_RPLLCLKRSVD0 (HSCLK0_RPLLCLKRSVD0_in),
    .HSCLK0_RPLLCLKRSVD1 (HSCLK0_RPLLCLKRSVD1_in),
    .HSCLK0_RPLLFBCLKLOST_M (HSCLK0_RPLLFBCLKLOST_M_in),
    .HSCLK0_RPLLFBDIV (HSCLK0_RPLLFBDIV_in),
    .HSCLK0_RPLLGTGREFCLK (HSCLK0_RPLLGTGREFCLK_in),
    .HSCLK0_RPLLLOCK_M (HSCLK0_RPLLLOCK_M_in),
    .HSCLK0_RPLLPD (HSCLK0_RPLLPD_in),
    .HSCLK0_RPLLREFCLKLOST_M (HSCLK0_RPLLREFCLKLOST_M_in),
    .HSCLK0_RPLLREFCLKMONITOR_M (HSCLK0_RPLLREFCLKMONITOR_M_in),
    .HSCLK0_RPLLREFCLKSEL (HSCLK0_RPLLREFCLKSEL_in),
    .HSCLK0_RPLLRESET (HSCLK0_RPLLRESET_in),
    .HSCLK0_RPLLRESETBYPASSMODE (HSCLK0_RPLLRESETBYPASSMODE_in),
    .HSCLK0_RPLLRESETMASK (HSCLK0_RPLLRESETMASK_in),
    .HSCLK0_RPLLRSVD0 (HSCLK0_RPLLRSVD0_in),
    .HSCLK0_RPLLRSVD1 (HSCLK0_RPLLRSVD1_in),
    .HSCLK0_RPLLRSVDOUT_M (HSCLK0_RPLLRSVDOUT_M_in),
    .HSCLK0_RPLLSDMDATA (HSCLK0_RPLLSDMDATA_in),
    .HSCLK0_RPLLSDMTOGGLE (HSCLK0_RPLLSDMTOGGLE_in),
    .HSCLK1_LCPLLCLKRSVD0 (HSCLK1_LCPLLCLKRSVD0_in),
    .HSCLK1_LCPLLCLKRSVD1 (HSCLK1_LCPLLCLKRSVD1_in),
    .HSCLK1_LCPLLFBCLKLOST_M (HSCLK1_LCPLLFBCLKLOST_M_in),
    .HSCLK1_LCPLLFBDIV (HSCLK1_LCPLLFBDIV_in),
    .HSCLK1_LCPLLGTGREFCLK (HSCLK1_LCPLLGTGREFCLK_in),
    .HSCLK1_LCPLLLOCK_M (HSCLK1_LCPLLLOCK_M_in),
    .HSCLK1_LCPLLPD (HSCLK1_LCPLLPD_in),
    .HSCLK1_LCPLLREFCLKLOST_M (HSCLK1_LCPLLREFCLKLOST_M_in),
    .HSCLK1_LCPLLREFCLKMONITOR_M (HSCLK1_LCPLLREFCLKMONITOR_M_in),
    .HSCLK1_LCPLLREFCLKSEL (HSCLK1_LCPLLREFCLKSEL_in),
    .HSCLK1_LCPLLRESET (HSCLK1_LCPLLRESET_in),
    .HSCLK1_LCPLLRESETBYPASSMODE (HSCLK1_LCPLLRESETBYPASSMODE_in),
    .HSCLK1_LCPLLRESETMASK (HSCLK1_LCPLLRESETMASK_in),
    .HSCLK1_LCPLLRSVD0 (HSCLK1_LCPLLRSVD0_in),
    .HSCLK1_LCPLLRSVD1 (HSCLK1_LCPLLRSVD1_in),
    .HSCLK1_LCPLLRSVDOUT_M (HSCLK1_LCPLLRSVDOUT_M_in),
    .HSCLK1_LCPLLSDMDATA (HSCLK1_LCPLLSDMDATA_in),
    .HSCLK1_LCPLLSDMTOGGLE (HSCLK1_LCPLLSDMTOGGLE_in),
    .HSCLK1_RPLLCLKRSVD0 (HSCLK1_RPLLCLKRSVD0_in),
    .HSCLK1_RPLLCLKRSVD1 (HSCLK1_RPLLCLKRSVD1_in),
    .HSCLK1_RPLLFBCLKLOST_M (HSCLK1_RPLLFBCLKLOST_M_in),
    .HSCLK1_RPLLFBDIV (HSCLK1_RPLLFBDIV_in),
    .HSCLK1_RPLLGTGREFCLK (HSCLK1_RPLLGTGREFCLK_in),
    .HSCLK1_RPLLLOCK_M (HSCLK1_RPLLLOCK_M_in),
    .HSCLK1_RPLLPD (HSCLK1_RPLLPD_in),
    .HSCLK1_RPLLREFCLKLOST_M (HSCLK1_RPLLREFCLKLOST_M_in),
    .HSCLK1_RPLLREFCLKMONITOR_M (HSCLK1_RPLLREFCLKMONITOR_M_in),
    .HSCLK1_RPLLREFCLKSEL (HSCLK1_RPLLREFCLKSEL_in),
    .HSCLK1_RPLLRESET (HSCLK1_RPLLRESET_in),
    .HSCLK1_RPLLRESETBYPASSMODE (HSCLK1_RPLLRESETBYPASSMODE_in),
    .HSCLK1_RPLLRESETMASK (HSCLK1_RPLLRESETMASK_in),
    .HSCLK1_RPLLRSVD0 (HSCLK1_RPLLRSVD0_in),
    .HSCLK1_RPLLRSVD1 (HSCLK1_RPLLRSVD1_in),
    .HSCLK1_RPLLRSVDOUT_M (HSCLK1_RPLLRSVDOUT_M_in),
    .HSCLK1_RPLLSDMDATA (HSCLK1_RPLLSDMDATA_in),
    .HSCLK1_RPLLSDMTOGGLE (HSCLK1_RPLLSDMTOGGLE_in),
    .M0_AXIS_TDATA_M (M0_AXIS_TDATA_M_in),
    .M0_AXIS_TLAST_M (M0_AXIS_TLAST_M_in),
    .M0_AXIS_TREADY (M0_AXIS_TREADY_in),
    .M0_AXIS_TVALID_M (M0_AXIS_TVALID_M_in),
    .M1_AXIS_TDATA_M (M1_AXIS_TDATA_M_in),
    .M1_AXIS_TLAST_M (M1_AXIS_TLAST_M_in),
    .M1_AXIS_TREADY (M1_AXIS_TREADY_in),
    .M1_AXIS_TVALID_M (M1_AXIS_TVALID_M_in),
    .M2_AXIS_TDATA_M (M2_AXIS_TDATA_M_in),
    .M2_AXIS_TLAST_M (M2_AXIS_TLAST_M_in),
    .M2_AXIS_TREADY (M2_AXIS_TREADY_in),
    .M2_AXIS_TVALID_M (M2_AXIS_TVALID_M_in),
    .MSTRXRESET (MSTRXRESET_in),
    .MSTRXRESETDONE_M (MSTRXRESETDONE_M_in),
    .MSTTXRESET (MSTTXRESET_in),
    .MSTTXRESETDONE_M (MSTTXRESETDONE_M_in),
    .PCIELINKREACHTARGET (PCIELINKREACHTARGET_in),
    .PCIELTSSM (PCIELTSSM_in),
    .RCALCMP_M (RCALCMP_M_in),
    .RCALENB (RCALENB_in),
    .RCALOUT_M (RCALOUT_M_in),
    .REFCLK0_CLKTESTSIG (REFCLK0_CLKTESTSIG_in),
    .REFCLK0_GTREFCLKPD (REFCLK0_GTREFCLKPD_in),
    .REFCLK1_CLKTESTSIG (REFCLK1_CLKTESTSIG_in),
    .REFCLK1_GTREFCLKPD (REFCLK1_GTREFCLKPD_in),
    .RXMARGINCLK (RXMARGINCLK_in),
    .RXMARGINREQACK_M (RXMARGINREQACK_M_in),
    .RXMARGINREQCMD (RXMARGINREQCMD_in),
    .RXMARGINREQLANENUM (RXMARGINREQLANENUM_in),
    .RXMARGINREQPAYLD (RXMARGINREQPAYLD_in),
    .RXMARGINREQREQ (RXMARGINREQREQ_in),
    .RXMARGINRESACK (RXMARGINRESACK_in),
    .RXMARGINRESCMD_M (RXMARGINRESCMD_M_in),
    .RXMARGINRESLANENUM_M (RXMARGINRESLANENUM_M_in),
    .RXMARGINRESPAYLD_M (RXMARGINRESPAYLD_M_in),
    .RXMARGINRESREQ_M (RXMARGINRESREQ_M_in),
    .S0_AXIS_TDATA (S0_AXIS_TDATA_in),
    .S0_AXIS_TLAST (S0_AXIS_TLAST_in),
    .S0_AXIS_TREADY_M (S0_AXIS_TREADY_M_in),
    .S0_AXIS_TVALID (S0_AXIS_TVALID_in),
    .S1_AXIS_TDATA (S1_AXIS_TDATA_in),
    .S1_AXIS_TLAST (S1_AXIS_TLAST_in),
    .S1_AXIS_TREADY_M (S1_AXIS_TREADY_M_in),
    .S1_AXIS_TVALID (S1_AXIS_TVALID_in),
    .S2_AXIS_TDATA (S2_AXIS_TDATA_in),
    .S2_AXIS_TLAST (S2_AXIS_TLAST_in),
    .S2_AXIS_TREADY_M (S2_AXIS_TREADY_M_in),
    .S2_AXIS_TVALID (S2_AXIS_TVALID_in),
    .SCANCLKB (SCANCLKB_in),
    .SCANCNTRLIN (SCANCNTRLIN_in),
    .SCANCNTRLOUT_M (SCANCNTRLOUT_M_in),
    .SCANENB (SCANENB_in),
    .SCANIN (SCANIN_in),
    .SCANOUT_M (SCANOUT_M_in),
    .SCANRSTB (SCANRSTB_in),
    .TRIGACKIN0_M (TRIGACKIN0_M_in),
    .TRIGACKOUT0 (TRIGACKOUT0_in),
    .TRIGIN0 (TRIGIN0_in),
    .TRIGOUT0_M (TRIGOUT0_M_in),
    .UBENABLE (UBENABLE_in),
    .UBINTERRUPT_M (UBINTERRUPT_M_in),
    .UBINTR (UBINTR_in),
    .UBIOLMBRST (UBIOLMBRST_in),
    .UBMBRST (UBMBRST_in),
    .UBRXUART (UBRXUART_in),
    .UBTXUART_M (UBTXUART_M_in),
    .UNCORRECTERR_M (UNCORRECTERR_M_in),
    .XPIPE_BUFGTCE_M (XPIPE_BUFGTCE_M_in),
    .XPIPE_BUFGTCE_MASK_M (XPIPE_BUFGTCE_MASK_M_in),
    .XPIPE_BUFGTCE_MASK_M_1 (XPIPE_BUFGTCE_MASK_M_1_in),
    .XPIPE_BUFGTCE_M_1 (XPIPE_BUFGTCE_M_1_in),
    .XPIPE_BUFGTDIV_M (XPIPE_BUFGTDIV_M_in),
    .XPIPE_BUFGTDIV_M_1 (XPIPE_BUFGTDIV_M_1_in),
    .XPIPE_BUFGTRST_M (XPIPE_BUFGTRST_M_in),
    .XPIPE_BUFGTRST_MASK_M (XPIPE_BUFGTRST_MASK_M_in),
    .XPIPE_BUFGTRST_MASK_M_1 (XPIPE_BUFGTRST_MASK_M_1_in),
    .XPIPE_BUFGTRST_M_1 (XPIPE_BUFGTRST_M_1_in),
    .XPIPE_GT_OUTCLK_M (XPIPE_GT_OUTCLK_M_in),
    .XPIPE_GT_OUTCLK_M_1 (XPIPE_GT_OUTCLK_M_1_in),
    .XPIPE_GT_PIPECLK (XPIPE_GT_PIPECLK_in),
    .XPIPE_GT_PIPECLK_1 (XPIPE_GT_PIPECLK_1_in),
    .XPIPE_GT_RXOUTCLK_M (XPIPE_GT_RXOUTCLK_M_in),
    .XPIPE_GT_RXUSRCLK (XPIPE_GT_RXUSRCLK_in),
    .XPIPE_HSDP_RXDATAVALID_M (XPIPE_HSDP_RXDATAVALID_M_in),
    .XPIPE_HSDP_RXDATAVALID_M_1 (XPIPE_HSDP_RXDATAVALID_M_1_in),
    .XPIPE_HSDP_RXDATAVALID_M_2 (XPIPE_HSDP_RXDATAVALID_M_2_in),
    .XPIPE_HSDP_RXGEARBOXSLIP (XPIPE_HSDP_RXGEARBOXSLIP_in),
    .XPIPE_HSDP_RXGEARBOXSLIP_1 (XPIPE_HSDP_RXGEARBOXSLIP_1_in),
    .XPIPE_HSDP_RXGEARBOXSLIP_2 (XPIPE_HSDP_RXGEARBOXSLIP_2_in),
    .XPIPE_HSDP_RXHEADERVALID_M (XPIPE_HSDP_RXHEADERVALID_M_in),
    .XPIPE_HSDP_RXHEADERVALID_M_1 (XPIPE_HSDP_RXHEADERVALID_M_1_in),
    .XPIPE_HSDP_RXHEADERVALID_M_2 (XPIPE_HSDP_RXHEADERVALID_M_2_in),
    .XPIPE_HSDP_RXHEADER_M (XPIPE_HSDP_RXHEADER_M_in),
    .XPIPE_HSDP_RXHEADER_M_1 (XPIPE_HSDP_RXHEADER_M_1_in),
    .XPIPE_HSDP_RXHEADER_M_2 (XPIPE_HSDP_RXHEADER_M_2_in),
    .XPIPE_HSDP_RXPCSRESET (XPIPE_HSDP_RXPCSRESET_in),
    .XPIPE_HSDP_RXPCSRESET_1 (XPIPE_HSDP_RXPCSRESET_1_in),
    .XPIPE_HSDP_RXPCSRESET_2 (XPIPE_HSDP_RXPCSRESET_2_in),
    .XPIPE_HSDP_RXRESETDONE_M (XPIPE_HSDP_RXRESETDONE_M_in),
    .XPIPE_HSDP_RXRESETDONE_M_1 (XPIPE_HSDP_RXRESETDONE_M_1_in),
    .XPIPE_HSDP_RXRESETDONE_M_2 (XPIPE_HSDP_RXRESETDONE_M_2_in),
    .XPIPE_HSDP_TXHEADER (XPIPE_HSDP_TXHEADER_in),
    .XPIPE_HSDP_TXHEADER_1 (XPIPE_HSDP_TXHEADER_1_in),
    .XPIPE_HSDP_TXHEADER_2 (XPIPE_HSDP_TXHEADER_2_in),
    .XPIPE_HSDP_TXRESETDONE_M (XPIPE_HSDP_TXRESETDONE_M_in),
    .XPIPE_HSDP_TXRESETDONE_M_1 (XPIPE_HSDP_TXRESETDONE_M_1_in),
    .XPIPE_HSDP_TXRESETDONE_M_2 (XPIPE_HSDP_TXRESETDONE_M_2_in),
    .XPIPE_HSDP_TXSEQUENCE (XPIPE_HSDP_TXSEQUENCE_in),
    .XPIPE_HSDP_TXSEQUENCE_1 (XPIPE_HSDP_TXSEQUENCE_1_in),
    .XPIPE_HSDP_TXSEQUENCE_2 (XPIPE_HSDP_TXSEQUENCE_2_in),
    .XPIPE_PCIELINKREACHTARGET (XPIPE_PCIELINKREACHTARGET_in),
    .XPIPE_PCIELINKREACHTARGET_1 (XPIPE_PCIELINKREACHTARGET_1_in),
    .XPIPE_PCIELTSSMSTATE (XPIPE_PCIELTSSMSTATE_in),
    .XPIPE_PCIELTSSMSTATE_1 (XPIPE_PCIELTSSMSTATE_1_in),
    .XPIPE_PCIE_PERST_N (XPIPE_PCIE_PERST_N_in),
    .XPIPE_PCIE_PERST_N_1 (XPIPE_PCIE_PERST_N_1_in),
    .XPIPE_PCIE_RATE (XPIPE_PCIE_RATE_in),
    .XPIPE_PCIE_RATE_1 (XPIPE_PCIE_RATE_1_in),
    .XPIPE_PHYESMADAPTSAVE (XPIPE_PHYESMADAPTSAVE_in),
    .XPIPE_PHYESMADAPTSAVE_1 (XPIPE_PHYESMADAPTSAVE_1_in),
    .XPIPE_PHYREADY_FR_BOT (XPIPE_PHYREADY_FR_BOT_in),
    .XPIPE_PHYREADY_TO_BOT_M (XPIPE_PHYREADY_TO_BOT_M_in),
    .XPIPE_PHY_READY_M (XPIPE_PHY_READY_M_in),
    .XPIPE_PHY_READY_M_1 (XPIPE_PHY_READY_M_1_in),
    .XPIPE_PIPE_CH0_PHYSTATUS_M (XPIPE_PIPE_CH0_PHYSTATUS_M_in),
    .XPIPE_PIPE_CH0_POWERDOWN (XPIPE_PIPE_CH0_POWERDOWN_in),
    .XPIPE_PIPE_CH0_RXCHARISK_M (XPIPE_PIPE_CH0_RXCHARISK_M_in),
    .XPIPE_PIPE_CH0_RXDATAVALID_M (XPIPE_PIPE_CH0_RXDATAVALID_M_in),
    .XPIPE_PIPE_CH0_RXDATA_M (XPIPE_PIPE_CH0_RXDATA_M_in),
    .XPIPE_PIPE_CH0_RXELECIDLE_M (XPIPE_PIPE_CH0_RXELECIDLE_M_in),
    .XPIPE_PIPE_CH0_RXPOLARITY (XPIPE_PIPE_CH0_RXPOLARITY_in),
    .XPIPE_PIPE_CH0_RXSTARTBLOCK_M (XPIPE_PIPE_CH0_RXSTARTBLOCK_M_in),
    .XPIPE_PIPE_CH0_RXSTATUS_M (XPIPE_PIPE_CH0_RXSTATUS_M_in),
    .XPIPE_PIPE_CH0_RXSYNCHEADER_M (XPIPE_PIPE_CH0_RXSYNCHEADER_M_in),
    .XPIPE_PIPE_CH0_RXTERMINATION (XPIPE_PIPE_CH0_RXTERMINATION_in),
    .XPIPE_PIPE_CH0_RXVALID_M (XPIPE_PIPE_CH0_RXVALID_M_in),
    .XPIPE_PIPE_CH0_TXCHARISK (XPIPE_PIPE_CH0_TXCHARISK_in),
    .XPIPE_PIPE_CH0_TXCOMPLIANCE (XPIPE_PIPE_CH0_TXCOMPLIANCE_in),
    .XPIPE_PIPE_CH0_TXDATA (XPIPE_PIPE_CH0_TXDATA_in),
    .XPIPE_PIPE_CH0_TXDATAVALID (XPIPE_PIPE_CH0_TXDATAVALID_in),
    .XPIPE_PIPE_CH0_TXDEEMPH (XPIPE_PIPE_CH0_TXDEEMPH_in),
    .XPIPE_PIPE_CH0_TXDETECTRXLOOPBACK (XPIPE_PIPE_CH0_TXDETECTRXLOOPBACK_in),
    .XPIPE_PIPE_CH0_TXELECIDLE (XPIPE_PIPE_CH0_TXELECIDLE_in),
    .XPIPE_PIPE_CH0_TXMAINCURSOR (XPIPE_PIPE_CH0_TXMAINCURSOR_in),
    .XPIPE_PIPE_CH0_TXMARGIN (XPIPE_PIPE_CH0_TXMARGIN_in),
    .XPIPE_PIPE_CH0_TXPOSTCURSOR (XPIPE_PIPE_CH0_TXPOSTCURSOR_in),
    .XPIPE_PIPE_CH0_TXPRECURSOR (XPIPE_PIPE_CH0_TXPRECURSOR_in),
    .XPIPE_PIPE_CH0_TXSTARTBLOCK (XPIPE_PIPE_CH0_TXSTARTBLOCK_in),
    .XPIPE_PIPE_CH0_TXSWING (XPIPE_PIPE_CH0_TXSWING_in),
    .XPIPE_PIPE_CH0_TXSYNCHEADER (XPIPE_PIPE_CH0_TXSYNCHEADER_in),
    .XPIPE_PIPE_CH10_PHYSTATUS_M (XPIPE_PIPE_CH10_PHYSTATUS_M_in),
    .XPIPE_PIPE_CH10_POWERDOWN (XPIPE_PIPE_CH10_POWERDOWN_in),
    .XPIPE_PIPE_CH10_RXCHARISK_M (XPIPE_PIPE_CH10_RXCHARISK_M_in),
    .XPIPE_PIPE_CH10_RXDATAVALID_M (XPIPE_PIPE_CH10_RXDATAVALID_M_in),
    .XPIPE_PIPE_CH10_RXDATA_M (XPIPE_PIPE_CH10_RXDATA_M_in),
    .XPIPE_PIPE_CH10_RXELECIDLE_M (XPIPE_PIPE_CH10_RXELECIDLE_M_in),
    .XPIPE_PIPE_CH10_RXPOLARITY (XPIPE_PIPE_CH10_RXPOLARITY_in),
    .XPIPE_PIPE_CH10_RXSTARTBLOCK_M (XPIPE_PIPE_CH10_RXSTARTBLOCK_M_in),
    .XPIPE_PIPE_CH10_RXSTATUS_M (XPIPE_PIPE_CH10_RXSTATUS_M_in),
    .XPIPE_PIPE_CH10_RXSYNCHEADER_M (XPIPE_PIPE_CH10_RXSYNCHEADER_M_in),
    .XPIPE_PIPE_CH10_RXTERMINATION (XPIPE_PIPE_CH10_RXTERMINATION_in),
    .XPIPE_PIPE_CH10_RXVALID_M (XPIPE_PIPE_CH10_RXVALID_M_in),
    .XPIPE_PIPE_CH10_TXCHARISK (XPIPE_PIPE_CH10_TXCHARISK_in),
    .XPIPE_PIPE_CH10_TXCOMPLIANCE (XPIPE_PIPE_CH10_TXCOMPLIANCE_in),
    .XPIPE_PIPE_CH10_TXDATA (XPIPE_PIPE_CH10_TXDATA_in),
    .XPIPE_PIPE_CH10_TXDATAVALID (XPIPE_PIPE_CH10_TXDATAVALID_in),
    .XPIPE_PIPE_CH10_TXDEEMPH (XPIPE_PIPE_CH10_TXDEEMPH_in),
    .XPIPE_PIPE_CH10_TXDETECTRXLOOPBACK (XPIPE_PIPE_CH10_TXDETECTRXLOOPBACK_in),
    .XPIPE_PIPE_CH10_TXELECIDLE (XPIPE_PIPE_CH10_TXELECIDLE_in),
    .XPIPE_PIPE_CH10_TXMAINCURSOR (XPIPE_PIPE_CH10_TXMAINCURSOR_in),
    .XPIPE_PIPE_CH10_TXMARGIN (XPIPE_PIPE_CH10_TXMARGIN_in),
    .XPIPE_PIPE_CH10_TXPOSTCURSOR (XPIPE_PIPE_CH10_TXPOSTCURSOR_in),
    .XPIPE_PIPE_CH10_TXPRECURSOR (XPIPE_PIPE_CH10_TXPRECURSOR_in),
    .XPIPE_PIPE_CH10_TXSTARTBLOCK (XPIPE_PIPE_CH10_TXSTARTBLOCK_in),
    .XPIPE_PIPE_CH10_TXSWING (XPIPE_PIPE_CH10_TXSWING_in),
    .XPIPE_PIPE_CH10_TXSYNCHEADER (XPIPE_PIPE_CH10_TXSYNCHEADER_in),
    .XPIPE_PIPE_CH11_PHYSTATUS_M (XPIPE_PIPE_CH11_PHYSTATUS_M_in),
    .XPIPE_PIPE_CH11_POWERDOWN (XPIPE_PIPE_CH11_POWERDOWN_in),
    .XPIPE_PIPE_CH11_RXCHARISK_M (XPIPE_PIPE_CH11_RXCHARISK_M_in),
    .XPIPE_PIPE_CH11_RXDATAVALID_M (XPIPE_PIPE_CH11_RXDATAVALID_M_in),
    .XPIPE_PIPE_CH11_RXDATA_M (XPIPE_PIPE_CH11_RXDATA_M_in),
    .XPIPE_PIPE_CH11_RXELECIDLE_M (XPIPE_PIPE_CH11_RXELECIDLE_M_in),
    .XPIPE_PIPE_CH11_RXPOLARITY (XPIPE_PIPE_CH11_RXPOLARITY_in),
    .XPIPE_PIPE_CH11_RXSTARTBLOCK_M (XPIPE_PIPE_CH11_RXSTARTBLOCK_M_in),
    .XPIPE_PIPE_CH11_RXSTATUS_M (XPIPE_PIPE_CH11_RXSTATUS_M_in),
    .XPIPE_PIPE_CH11_RXSYNCHEADER_M (XPIPE_PIPE_CH11_RXSYNCHEADER_M_in),
    .XPIPE_PIPE_CH11_RXTERMINATION (XPIPE_PIPE_CH11_RXTERMINATION_in),
    .XPIPE_PIPE_CH11_RXVALID_M (XPIPE_PIPE_CH11_RXVALID_M_in),
    .XPIPE_PIPE_CH11_TXCHARISK (XPIPE_PIPE_CH11_TXCHARISK_in),
    .XPIPE_PIPE_CH11_TXCOMPLIANCE (XPIPE_PIPE_CH11_TXCOMPLIANCE_in),
    .XPIPE_PIPE_CH11_TXDATA (XPIPE_PIPE_CH11_TXDATA_in),
    .XPIPE_PIPE_CH11_TXDATAVALID (XPIPE_PIPE_CH11_TXDATAVALID_in),
    .XPIPE_PIPE_CH11_TXDEEMPH (XPIPE_PIPE_CH11_TXDEEMPH_in),
    .XPIPE_PIPE_CH11_TXDETECTRXLOOPBACK (XPIPE_PIPE_CH11_TXDETECTRXLOOPBACK_in),
    .XPIPE_PIPE_CH11_TXELECIDLE (XPIPE_PIPE_CH11_TXELECIDLE_in),
    .XPIPE_PIPE_CH11_TXMAINCURSOR (XPIPE_PIPE_CH11_TXMAINCURSOR_in),
    .XPIPE_PIPE_CH11_TXMARGIN (XPIPE_PIPE_CH11_TXMARGIN_in),
    .XPIPE_PIPE_CH11_TXPOSTCURSOR (XPIPE_PIPE_CH11_TXPOSTCURSOR_in),
    .XPIPE_PIPE_CH11_TXPRECURSOR (XPIPE_PIPE_CH11_TXPRECURSOR_in),
    .XPIPE_PIPE_CH11_TXSTARTBLOCK (XPIPE_PIPE_CH11_TXSTARTBLOCK_in),
    .XPIPE_PIPE_CH11_TXSWING (XPIPE_PIPE_CH11_TXSWING_in),
    .XPIPE_PIPE_CH11_TXSYNCHEADER (XPIPE_PIPE_CH11_TXSYNCHEADER_in),
    .XPIPE_PIPE_CH12_PHYSTATUS_M (XPIPE_PIPE_CH12_PHYSTATUS_M_in),
    .XPIPE_PIPE_CH12_POWERDOWN (XPIPE_PIPE_CH12_POWERDOWN_in),
    .XPIPE_PIPE_CH12_RXCHARISK_M (XPIPE_PIPE_CH12_RXCHARISK_M_in),
    .XPIPE_PIPE_CH12_RXDATAVALID_M (XPIPE_PIPE_CH12_RXDATAVALID_M_in),
    .XPIPE_PIPE_CH12_RXDATA_M (XPIPE_PIPE_CH12_RXDATA_M_in),
    .XPIPE_PIPE_CH12_RXELECIDLE_M (XPIPE_PIPE_CH12_RXELECIDLE_M_in),
    .XPIPE_PIPE_CH12_RXPOLARITY (XPIPE_PIPE_CH12_RXPOLARITY_in),
    .XPIPE_PIPE_CH12_RXSTARTBLOCK_M (XPIPE_PIPE_CH12_RXSTARTBLOCK_M_in),
    .XPIPE_PIPE_CH12_RXSTATUS_M (XPIPE_PIPE_CH12_RXSTATUS_M_in),
    .XPIPE_PIPE_CH12_RXSYNCHEADER_M (XPIPE_PIPE_CH12_RXSYNCHEADER_M_in),
    .XPIPE_PIPE_CH12_RXTERMINATION (XPIPE_PIPE_CH12_RXTERMINATION_in),
    .XPIPE_PIPE_CH12_RXVALID_M (XPIPE_PIPE_CH12_RXVALID_M_in),
    .XPIPE_PIPE_CH12_TXCHARISK (XPIPE_PIPE_CH12_TXCHARISK_in),
    .XPIPE_PIPE_CH12_TXCOMPLIANCE (XPIPE_PIPE_CH12_TXCOMPLIANCE_in),
    .XPIPE_PIPE_CH12_TXDATA (XPIPE_PIPE_CH12_TXDATA_in),
    .XPIPE_PIPE_CH12_TXDATAVALID (XPIPE_PIPE_CH12_TXDATAVALID_in),
    .XPIPE_PIPE_CH12_TXDEEMPH (XPIPE_PIPE_CH12_TXDEEMPH_in),
    .XPIPE_PIPE_CH12_TXDETECTRXLOOPBACK (XPIPE_PIPE_CH12_TXDETECTRXLOOPBACK_in),
    .XPIPE_PIPE_CH12_TXELECIDLE (XPIPE_PIPE_CH12_TXELECIDLE_in),
    .XPIPE_PIPE_CH12_TXMAINCURSOR (XPIPE_PIPE_CH12_TXMAINCURSOR_in),
    .XPIPE_PIPE_CH12_TXMARGIN (XPIPE_PIPE_CH12_TXMARGIN_in),
    .XPIPE_PIPE_CH12_TXPOSTCURSOR (XPIPE_PIPE_CH12_TXPOSTCURSOR_in),
    .XPIPE_PIPE_CH12_TXPRECURSOR (XPIPE_PIPE_CH12_TXPRECURSOR_in),
    .XPIPE_PIPE_CH12_TXSTARTBLOCK (XPIPE_PIPE_CH12_TXSTARTBLOCK_in),
    .XPIPE_PIPE_CH12_TXSWING (XPIPE_PIPE_CH12_TXSWING_in),
    .XPIPE_PIPE_CH12_TXSYNCHEADER (XPIPE_PIPE_CH12_TXSYNCHEADER_in),
    .XPIPE_PIPE_CH13_PHYSTATUS_M (XPIPE_PIPE_CH13_PHYSTATUS_M_in),
    .XPIPE_PIPE_CH13_POWERDOWN (XPIPE_PIPE_CH13_POWERDOWN_in),
    .XPIPE_PIPE_CH13_RXCHARISK_M (XPIPE_PIPE_CH13_RXCHARISK_M_in),
    .XPIPE_PIPE_CH13_RXDATAVALID_M (XPIPE_PIPE_CH13_RXDATAVALID_M_in),
    .XPIPE_PIPE_CH13_RXDATA_M (XPIPE_PIPE_CH13_RXDATA_M_in),
    .XPIPE_PIPE_CH13_RXELECIDLE_M (XPIPE_PIPE_CH13_RXELECIDLE_M_in),
    .XPIPE_PIPE_CH13_RXPOLARITY (XPIPE_PIPE_CH13_RXPOLARITY_in),
    .XPIPE_PIPE_CH13_RXSTARTBLOCK_M (XPIPE_PIPE_CH13_RXSTARTBLOCK_M_in),
    .XPIPE_PIPE_CH13_RXSTATUS_M (XPIPE_PIPE_CH13_RXSTATUS_M_in),
    .XPIPE_PIPE_CH13_RXSYNCHEADER_M (XPIPE_PIPE_CH13_RXSYNCHEADER_M_in),
    .XPIPE_PIPE_CH13_RXTERMINATION (XPIPE_PIPE_CH13_RXTERMINATION_in),
    .XPIPE_PIPE_CH13_RXVALID_M (XPIPE_PIPE_CH13_RXVALID_M_in),
    .XPIPE_PIPE_CH13_TXCHARISK (XPIPE_PIPE_CH13_TXCHARISK_in),
    .XPIPE_PIPE_CH13_TXCOMPLIANCE (XPIPE_PIPE_CH13_TXCOMPLIANCE_in),
    .XPIPE_PIPE_CH13_TXDATA (XPIPE_PIPE_CH13_TXDATA_in),
    .XPIPE_PIPE_CH13_TXDATAVALID (XPIPE_PIPE_CH13_TXDATAVALID_in),
    .XPIPE_PIPE_CH13_TXDEEMPH (XPIPE_PIPE_CH13_TXDEEMPH_in),
    .XPIPE_PIPE_CH13_TXDETECTRXLOOPBACK (XPIPE_PIPE_CH13_TXDETECTRXLOOPBACK_in),
    .XPIPE_PIPE_CH13_TXELECIDLE (XPIPE_PIPE_CH13_TXELECIDLE_in),
    .XPIPE_PIPE_CH13_TXMAINCURSOR (XPIPE_PIPE_CH13_TXMAINCURSOR_in),
    .XPIPE_PIPE_CH13_TXMARGIN (XPIPE_PIPE_CH13_TXMARGIN_in),
    .XPIPE_PIPE_CH13_TXPOSTCURSOR (XPIPE_PIPE_CH13_TXPOSTCURSOR_in),
    .XPIPE_PIPE_CH13_TXPRECURSOR (XPIPE_PIPE_CH13_TXPRECURSOR_in),
    .XPIPE_PIPE_CH13_TXSTARTBLOCK (XPIPE_PIPE_CH13_TXSTARTBLOCK_in),
    .XPIPE_PIPE_CH13_TXSWING (XPIPE_PIPE_CH13_TXSWING_in),
    .XPIPE_PIPE_CH13_TXSYNCHEADER (XPIPE_PIPE_CH13_TXSYNCHEADER_in),
    .XPIPE_PIPE_CH14_PHYSTATUS_M (XPIPE_PIPE_CH14_PHYSTATUS_M_in),
    .XPIPE_PIPE_CH14_POWERDOWN (XPIPE_PIPE_CH14_POWERDOWN_in),
    .XPIPE_PIPE_CH14_RXCHARISK_M (XPIPE_PIPE_CH14_RXCHARISK_M_in),
    .XPIPE_PIPE_CH14_RXDATAVALID_M (XPIPE_PIPE_CH14_RXDATAVALID_M_in),
    .XPIPE_PIPE_CH14_RXDATA_M (XPIPE_PIPE_CH14_RXDATA_M_in),
    .XPIPE_PIPE_CH14_RXELECIDLE_M (XPIPE_PIPE_CH14_RXELECIDLE_M_in),
    .XPIPE_PIPE_CH14_RXPOLARITY (XPIPE_PIPE_CH14_RXPOLARITY_in),
    .XPIPE_PIPE_CH14_RXSTARTBLOCK_M (XPIPE_PIPE_CH14_RXSTARTBLOCK_M_in),
    .XPIPE_PIPE_CH14_RXSTATUS_M (XPIPE_PIPE_CH14_RXSTATUS_M_in),
    .XPIPE_PIPE_CH14_RXSYNCHEADER_M (XPIPE_PIPE_CH14_RXSYNCHEADER_M_in),
    .XPIPE_PIPE_CH14_RXTERMINATION (XPIPE_PIPE_CH14_RXTERMINATION_in),
    .XPIPE_PIPE_CH14_RXVALID_M (XPIPE_PIPE_CH14_RXVALID_M_in),
    .XPIPE_PIPE_CH14_TXCHARISK (XPIPE_PIPE_CH14_TXCHARISK_in),
    .XPIPE_PIPE_CH14_TXCOMPLIANCE (XPIPE_PIPE_CH14_TXCOMPLIANCE_in),
    .XPIPE_PIPE_CH14_TXDATA (XPIPE_PIPE_CH14_TXDATA_in),
    .XPIPE_PIPE_CH14_TXDATAVALID (XPIPE_PIPE_CH14_TXDATAVALID_in),
    .XPIPE_PIPE_CH14_TXDEEMPH (XPIPE_PIPE_CH14_TXDEEMPH_in),
    .XPIPE_PIPE_CH14_TXDETECTRXLOOPBACK (XPIPE_PIPE_CH14_TXDETECTRXLOOPBACK_in),
    .XPIPE_PIPE_CH14_TXELECIDLE (XPIPE_PIPE_CH14_TXELECIDLE_in),
    .XPIPE_PIPE_CH14_TXMAINCURSOR (XPIPE_PIPE_CH14_TXMAINCURSOR_in),
    .XPIPE_PIPE_CH14_TXMARGIN (XPIPE_PIPE_CH14_TXMARGIN_in),
    .XPIPE_PIPE_CH14_TXPOSTCURSOR (XPIPE_PIPE_CH14_TXPOSTCURSOR_in),
    .XPIPE_PIPE_CH14_TXPRECURSOR (XPIPE_PIPE_CH14_TXPRECURSOR_in),
    .XPIPE_PIPE_CH14_TXSTARTBLOCK (XPIPE_PIPE_CH14_TXSTARTBLOCK_in),
    .XPIPE_PIPE_CH14_TXSWING (XPIPE_PIPE_CH14_TXSWING_in),
    .XPIPE_PIPE_CH14_TXSYNCHEADER (XPIPE_PIPE_CH14_TXSYNCHEADER_in),
    .XPIPE_PIPE_CH15_PHYSTATUS_M (XPIPE_PIPE_CH15_PHYSTATUS_M_in),
    .XPIPE_PIPE_CH15_POWERDOWN (XPIPE_PIPE_CH15_POWERDOWN_in),
    .XPIPE_PIPE_CH15_RXCHARISK_M (XPIPE_PIPE_CH15_RXCHARISK_M_in),
    .XPIPE_PIPE_CH15_RXDATAVALID_M (XPIPE_PIPE_CH15_RXDATAVALID_M_in),
    .XPIPE_PIPE_CH15_RXDATA_M (XPIPE_PIPE_CH15_RXDATA_M_in),
    .XPIPE_PIPE_CH15_RXELECIDLE_M (XPIPE_PIPE_CH15_RXELECIDLE_M_in),
    .XPIPE_PIPE_CH15_RXPOLARITY (XPIPE_PIPE_CH15_RXPOLARITY_in),
    .XPIPE_PIPE_CH15_RXSTARTBLOCK_M (XPIPE_PIPE_CH15_RXSTARTBLOCK_M_in),
    .XPIPE_PIPE_CH15_RXSTATUS_M (XPIPE_PIPE_CH15_RXSTATUS_M_in),
    .XPIPE_PIPE_CH15_RXSYNCHEADER_M (XPIPE_PIPE_CH15_RXSYNCHEADER_M_in),
    .XPIPE_PIPE_CH15_RXTERMINATION (XPIPE_PIPE_CH15_RXTERMINATION_in),
    .XPIPE_PIPE_CH15_RXVALID_M (XPIPE_PIPE_CH15_RXVALID_M_in),
    .XPIPE_PIPE_CH15_TXCHARISK (XPIPE_PIPE_CH15_TXCHARISK_in),
    .XPIPE_PIPE_CH15_TXCOMPLIANCE (XPIPE_PIPE_CH15_TXCOMPLIANCE_in),
    .XPIPE_PIPE_CH15_TXDATA (XPIPE_PIPE_CH15_TXDATA_in),
    .XPIPE_PIPE_CH15_TXDATAVALID (XPIPE_PIPE_CH15_TXDATAVALID_in),
    .XPIPE_PIPE_CH15_TXDEEMPH (XPIPE_PIPE_CH15_TXDEEMPH_in),
    .XPIPE_PIPE_CH15_TXDETECTRXLOOPBACK (XPIPE_PIPE_CH15_TXDETECTRXLOOPBACK_in),
    .XPIPE_PIPE_CH15_TXELECIDLE (XPIPE_PIPE_CH15_TXELECIDLE_in),
    .XPIPE_PIPE_CH15_TXMAINCURSOR (XPIPE_PIPE_CH15_TXMAINCURSOR_in),
    .XPIPE_PIPE_CH15_TXMARGIN (XPIPE_PIPE_CH15_TXMARGIN_in),
    .XPIPE_PIPE_CH15_TXPOSTCURSOR (XPIPE_PIPE_CH15_TXPOSTCURSOR_in),
    .XPIPE_PIPE_CH15_TXPRECURSOR (XPIPE_PIPE_CH15_TXPRECURSOR_in),
    .XPIPE_PIPE_CH15_TXSTARTBLOCK (XPIPE_PIPE_CH15_TXSTARTBLOCK_in),
    .XPIPE_PIPE_CH15_TXSWING (XPIPE_PIPE_CH15_TXSWING_in),
    .XPIPE_PIPE_CH15_TXSYNCHEADER (XPIPE_PIPE_CH15_TXSYNCHEADER_in),
    .XPIPE_PIPE_CH1_PHYSTATUS_M (XPIPE_PIPE_CH1_PHYSTATUS_M_in),
    .XPIPE_PIPE_CH1_POWERDOWN (XPIPE_PIPE_CH1_POWERDOWN_in),
    .XPIPE_PIPE_CH1_RXCHARISK_M (XPIPE_PIPE_CH1_RXCHARISK_M_in),
    .XPIPE_PIPE_CH1_RXDATAVALID_M (XPIPE_PIPE_CH1_RXDATAVALID_M_in),
    .XPIPE_PIPE_CH1_RXDATA_M (XPIPE_PIPE_CH1_RXDATA_M_in),
    .XPIPE_PIPE_CH1_RXELECIDLE_M (XPIPE_PIPE_CH1_RXELECIDLE_M_in),
    .XPIPE_PIPE_CH1_RXPOLARITY (XPIPE_PIPE_CH1_RXPOLARITY_in),
    .XPIPE_PIPE_CH1_RXSTARTBLOCK_M (XPIPE_PIPE_CH1_RXSTARTBLOCK_M_in),
    .XPIPE_PIPE_CH1_RXSTATUS_M (XPIPE_PIPE_CH1_RXSTATUS_M_in),
    .XPIPE_PIPE_CH1_RXSYNCHEADER_M (XPIPE_PIPE_CH1_RXSYNCHEADER_M_in),
    .XPIPE_PIPE_CH1_RXTERMINATION (XPIPE_PIPE_CH1_RXTERMINATION_in),
    .XPIPE_PIPE_CH1_RXVALID_M (XPIPE_PIPE_CH1_RXVALID_M_in),
    .XPIPE_PIPE_CH1_TXCHARISK (XPIPE_PIPE_CH1_TXCHARISK_in),
    .XPIPE_PIPE_CH1_TXCOMPLIANCE (XPIPE_PIPE_CH1_TXCOMPLIANCE_in),
    .XPIPE_PIPE_CH1_TXDATA (XPIPE_PIPE_CH1_TXDATA_in),
    .XPIPE_PIPE_CH1_TXDATAVALID (XPIPE_PIPE_CH1_TXDATAVALID_in),
    .XPIPE_PIPE_CH1_TXDEEMPH (XPIPE_PIPE_CH1_TXDEEMPH_in),
    .XPIPE_PIPE_CH1_TXDETECTRXLOOPBACK (XPIPE_PIPE_CH1_TXDETECTRXLOOPBACK_in),
    .XPIPE_PIPE_CH1_TXELECIDLE (XPIPE_PIPE_CH1_TXELECIDLE_in),
    .XPIPE_PIPE_CH1_TXMAINCURSOR (XPIPE_PIPE_CH1_TXMAINCURSOR_in),
    .XPIPE_PIPE_CH1_TXMARGIN (XPIPE_PIPE_CH1_TXMARGIN_in),
    .XPIPE_PIPE_CH1_TXPOSTCURSOR (XPIPE_PIPE_CH1_TXPOSTCURSOR_in),
    .XPIPE_PIPE_CH1_TXPRECURSOR (XPIPE_PIPE_CH1_TXPRECURSOR_in),
    .XPIPE_PIPE_CH1_TXSTARTBLOCK (XPIPE_PIPE_CH1_TXSTARTBLOCK_in),
    .XPIPE_PIPE_CH1_TXSWING (XPIPE_PIPE_CH1_TXSWING_in),
    .XPIPE_PIPE_CH1_TXSYNCHEADER (XPIPE_PIPE_CH1_TXSYNCHEADER_in),
    .XPIPE_PIPE_CH2_PHYSTATUS_M (XPIPE_PIPE_CH2_PHYSTATUS_M_in),
    .XPIPE_PIPE_CH2_POWERDOWN (XPIPE_PIPE_CH2_POWERDOWN_in),
    .XPIPE_PIPE_CH2_RXCHARISK_M (XPIPE_PIPE_CH2_RXCHARISK_M_in),
    .XPIPE_PIPE_CH2_RXDATAVALID_M (XPIPE_PIPE_CH2_RXDATAVALID_M_in),
    .XPIPE_PIPE_CH2_RXDATA_M (XPIPE_PIPE_CH2_RXDATA_M_in),
    .XPIPE_PIPE_CH2_RXELECIDLE_M (XPIPE_PIPE_CH2_RXELECIDLE_M_in),
    .XPIPE_PIPE_CH2_RXPOLARITY (XPIPE_PIPE_CH2_RXPOLARITY_in),
    .XPIPE_PIPE_CH2_RXSTARTBLOCK_M (XPIPE_PIPE_CH2_RXSTARTBLOCK_M_in),
    .XPIPE_PIPE_CH2_RXSTATUS_M (XPIPE_PIPE_CH2_RXSTATUS_M_in),
    .XPIPE_PIPE_CH2_RXSYNCHEADER_M (XPIPE_PIPE_CH2_RXSYNCHEADER_M_in),
    .XPIPE_PIPE_CH2_RXTERMINATION (XPIPE_PIPE_CH2_RXTERMINATION_in),
    .XPIPE_PIPE_CH2_RXVALID_M (XPIPE_PIPE_CH2_RXVALID_M_in),
    .XPIPE_PIPE_CH2_TXCHARISK (XPIPE_PIPE_CH2_TXCHARISK_in),
    .XPIPE_PIPE_CH2_TXCOMPLIANCE (XPIPE_PIPE_CH2_TXCOMPLIANCE_in),
    .XPIPE_PIPE_CH2_TXDATA (XPIPE_PIPE_CH2_TXDATA_in),
    .XPIPE_PIPE_CH2_TXDATAVALID (XPIPE_PIPE_CH2_TXDATAVALID_in),
    .XPIPE_PIPE_CH2_TXDEEMPH (XPIPE_PIPE_CH2_TXDEEMPH_in),
    .XPIPE_PIPE_CH2_TXDETECTRXLOOPBACK (XPIPE_PIPE_CH2_TXDETECTRXLOOPBACK_in),
    .XPIPE_PIPE_CH2_TXELECIDLE (XPIPE_PIPE_CH2_TXELECIDLE_in),
    .XPIPE_PIPE_CH2_TXMAINCURSOR (XPIPE_PIPE_CH2_TXMAINCURSOR_in),
    .XPIPE_PIPE_CH2_TXMARGIN (XPIPE_PIPE_CH2_TXMARGIN_in),
    .XPIPE_PIPE_CH2_TXPOSTCURSOR (XPIPE_PIPE_CH2_TXPOSTCURSOR_in),
    .XPIPE_PIPE_CH2_TXPRECURSOR (XPIPE_PIPE_CH2_TXPRECURSOR_in),
    .XPIPE_PIPE_CH2_TXSTARTBLOCK (XPIPE_PIPE_CH2_TXSTARTBLOCK_in),
    .XPIPE_PIPE_CH2_TXSWING (XPIPE_PIPE_CH2_TXSWING_in),
    .XPIPE_PIPE_CH2_TXSYNCHEADER (XPIPE_PIPE_CH2_TXSYNCHEADER_in),
    .XPIPE_PIPE_CH3_PHYSTATUS_M (XPIPE_PIPE_CH3_PHYSTATUS_M_in),
    .XPIPE_PIPE_CH3_POWERDOWN (XPIPE_PIPE_CH3_POWERDOWN_in),
    .XPIPE_PIPE_CH3_RXCHARISK_M (XPIPE_PIPE_CH3_RXCHARISK_M_in),
    .XPIPE_PIPE_CH3_RXDATAVALID_M (XPIPE_PIPE_CH3_RXDATAVALID_M_in),
    .XPIPE_PIPE_CH3_RXDATA_M (XPIPE_PIPE_CH3_RXDATA_M_in),
    .XPIPE_PIPE_CH3_RXELECIDLE_M (XPIPE_PIPE_CH3_RXELECIDLE_M_in),
    .XPIPE_PIPE_CH3_RXPOLARITY (XPIPE_PIPE_CH3_RXPOLARITY_in),
    .XPIPE_PIPE_CH3_RXSTARTBLOCK_M (XPIPE_PIPE_CH3_RXSTARTBLOCK_M_in),
    .XPIPE_PIPE_CH3_RXSTATUS_M (XPIPE_PIPE_CH3_RXSTATUS_M_in),
    .XPIPE_PIPE_CH3_RXSYNCHEADER_M (XPIPE_PIPE_CH3_RXSYNCHEADER_M_in),
    .XPIPE_PIPE_CH3_RXTERMINATION (XPIPE_PIPE_CH3_RXTERMINATION_in),
    .XPIPE_PIPE_CH3_RXVALID_M (XPIPE_PIPE_CH3_RXVALID_M_in),
    .XPIPE_PIPE_CH3_TXCHARISK (XPIPE_PIPE_CH3_TXCHARISK_in),
    .XPIPE_PIPE_CH3_TXCOMPLIANCE (XPIPE_PIPE_CH3_TXCOMPLIANCE_in),
    .XPIPE_PIPE_CH3_TXDATA (XPIPE_PIPE_CH3_TXDATA_in),
    .XPIPE_PIPE_CH3_TXDATAVALID (XPIPE_PIPE_CH3_TXDATAVALID_in),
    .XPIPE_PIPE_CH3_TXDEEMPH (XPIPE_PIPE_CH3_TXDEEMPH_in),
    .XPIPE_PIPE_CH3_TXDETECTRXLOOPBACK (XPIPE_PIPE_CH3_TXDETECTRXLOOPBACK_in),
    .XPIPE_PIPE_CH3_TXELECIDLE (XPIPE_PIPE_CH3_TXELECIDLE_in),
    .XPIPE_PIPE_CH3_TXMAINCURSOR (XPIPE_PIPE_CH3_TXMAINCURSOR_in),
    .XPIPE_PIPE_CH3_TXMARGIN (XPIPE_PIPE_CH3_TXMARGIN_in),
    .XPIPE_PIPE_CH3_TXPOSTCURSOR (XPIPE_PIPE_CH3_TXPOSTCURSOR_in),
    .XPIPE_PIPE_CH3_TXPRECURSOR (XPIPE_PIPE_CH3_TXPRECURSOR_in),
    .XPIPE_PIPE_CH3_TXSTARTBLOCK (XPIPE_PIPE_CH3_TXSTARTBLOCK_in),
    .XPIPE_PIPE_CH3_TXSWING (XPIPE_PIPE_CH3_TXSWING_in),
    .XPIPE_PIPE_CH3_TXSYNCHEADER (XPIPE_PIPE_CH3_TXSYNCHEADER_in),
    .XPIPE_PIPE_CH4_PHYSTATUS_M (XPIPE_PIPE_CH4_PHYSTATUS_M_in),
    .XPIPE_PIPE_CH4_POWERDOWN (XPIPE_PIPE_CH4_POWERDOWN_in),
    .XPIPE_PIPE_CH4_RXCHARISK_M (XPIPE_PIPE_CH4_RXCHARISK_M_in),
    .XPIPE_PIPE_CH4_RXDATAVALID_M (XPIPE_PIPE_CH4_RXDATAVALID_M_in),
    .XPIPE_PIPE_CH4_RXDATA_M (XPIPE_PIPE_CH4_RXDATA_M_in),
    .XPIPE_PIPE_CH4_RXELECIDLE_M (XPIPE_PIPE_CH4_RXELECIDLE_M_in),
    .XPIPE_PIPE_CH4_RXPOLARITY (XPIPE_PIPE_CH4_RXPOLARITY_in),
    .XPIPE_PIPE_CH4_RXSTARTBLOCK_M (XPIPE_PIPE_CH4_RXSTARTBLOCK_M_in),
    .XPIPE_PIPE_CH4_RXSTATUS_M (XPIPE_PIPE_CH4_RXSTATUS_M_in),
    .XPIPE_PIPE_CH4_RXSYNCHEADER_M (XPIPE_PIPE_CH4_RXSYNCHEADER_M_in),
    .XPIPE_PIPE_CH4_RXTERMINATION (XPIPE_PIPE_CH4_RXTERMINATION_in),
    .XPIPE_PIPE_CH4_RXVALID_M (XPIPE_PIPE_CH4_RXVALID_M_in),
    .XPIPE_PIPE_CH4_TXCHARISK (XPIPE_PIPE_CH4_TXCHARISK_in),
    .XPIPE_PIPE_CH4_TXCOMPLIANCE (XPIPE_PIPE_CH4_TXCOMPLIANCE_in),
    .XPIPE_PIPE_CH4_TXDATA (XPIPE_PIPE_CH4_TXDATA_in),
    .XPIPE_PIPE_CH4_TXDATAVALID (XPIPE_PIPE_CH4_TXDATAVALID_in),
    .XPIPE_PIPE_CH4_TXDEEMPH (XPIPE_PIPE_CH4_TXDEEMPH_in),
    .XPIPE_PIPE_CH4_TXDETECTRXLOOPBACK (XPIPE_PIPE_CH4_TXDETECTRXLOOPBACK_in),
    .XPIPE_PIPE_CH4_TXELECIDLE (XPIPE_PIPE_CH4_TXELECIDLE_in),
    .XPIPE_PIPE_CH4_TXMAINCURSOR (XPIPE_PIPE_CH4_TXMAINCURSOR_in),
    .XPIPE_PIPE_CH4_TXMARGIN (XPIPE_PIPE_CH4_TXMARGIN_in),
    .XPIPE_PIPE_CH4_TXPOSTCURSOR (XPIPE_PIPE_CH4_TXPOSTCURSOR_in),
    .XPIPE_PIPE_CH4_TXPRECURSOR (XPIPE_PIPE_CH4_TXPRECURSOR_in),
    .XPIPE_PIPE_CH4_TXSTARTBLOCK (XPIPE_PIPE_CH4_TXSTARTBLOCK_in),
    .XPIPE_PIPE_CH4_TXSWING (XPIPE_PIPE_CH4_TXSWING_in),
    .XPIPE_PIPE_CH4_TXSYNCHEADER (XPIPE_PIPE_CH4_TXSYNCHEADER_in),
    .XPIPE_PIPE_CH5_PHYSTATUS_M (XPIPE_PIPE_CH5_PHYSTATUS_M_in),
    .XPIPE_PIPE_CH5_POWERDOWN (XPIPE_PIPE_CH5_POWERDOWN_in),
    .XPIPE_PIPE_CH5_RXCHARISK_M (XPIPE_PIPE_CH5_RXCHARISK_M_in),
    .XPIPE_PIPE_CH5_RXDATAVALID_M (XPIPE_PIPE_CH5_RXDATAVALID_M_in),
    .XPIPE_PIPE_CH5_RXDATA_M (XPIPE_PIPE_CH5_RXDATA_M_in),
    .XPIPE_PIPE_CH5_RXELECIDLE_M (XPIPE_PIPE_CH5_RXELECIDLE_M_in),
    .XPIPE_PIPE_CH5_RXPOLARITY (XPIPE_PIPE_CH5_RXPOLARITY_in),
    .XPIPE_PIPE_CH5_RXSTARTBLOCK_M (XPIPE_PIPE_CH5_RXSTARTBLOCK_M_in),
    .XPIPE_PIPE_CH5_RXSTATUS_M (XPIPE_PIPE_CH5_RXSTATUS_M_in),
    .XPIPE_PIPE_CH5_RXSYNCHEADER_M (XPIPE_PIPE_CH5_RXSYNCHEADER_M_in),
    .XPIPE_PIPE_CH5_RXTERMINATION (XPIPE_PIPE_CH5_RXTERMINATION_in),
    .XPIPE_PIPE_CH5_RXVALID_M (XPIPE_PIPE_CH5_RXVALID_M_in),
    .XPIPE_PIPE_CH5_TXCHARISK (XPIPE_PIPE_CH5_TXCHARISK_in),
    .XPIPE_PIPE_CH5_TXCOMPLIANCE (XPIPE_PIPE_CH5_TXCOMPLIANCE_in),
    .XPIPE_PIPE_CH5_TXDATA (XPIPE_PIPE_CH5_TXDATA_in),
    .XPIPE_PIPE_CH5_TXDATAVALID (XPIPE_PIPE_CH5_TXDATAVALID_in),
    .XPIPE_PIPE_CH5_TXDEEMPH (XPIPE_PIPE_CH5_TXDEEMPH_in),
    .XPIPE_PIPE_CH5_TXDETECTRXLOOPBACK (XPIPE_PIPE_CH5_TXDETECTRXLOOPBACK_in),
    .XPIPE_PIPE_CH5_TXELECIDLE (XPIPE_PIPE_CH5_TXELECIDLE_in),
    .XPIPE_PIPE_CH5_TXMAINCURSOR (XPIPE_PIPE_CH5_TXMAINCURSOR_in),
    .XPIPE_PIPE_CH5_TXMARGIN (XPIPE_PIPE_CH5_TXMARGIN_in),
    .XPIPE_PIPE_CH5_TXPOSTCURSOR (XPIPE_PIPE_CH5_TXPOSTCURSOR_in),
    .XPIPE_PIPE_CH5_TXPRECURSOR (XPIPE_PIPE_CH5_TXPRECURSOR_in),
    .XPIPE_PIPE_CH5_TXSTARTBLOCK (XPIPE_PIPE_CH5_TXSTARTBLOCK_in),
    .XPIPE_PIPE_CH5_TXSWING (XPIPE_PIPE_CH5_TXSWING_in),
    .XPIPE_PIPE_CH5_TXSYNCHEADER (XPIPE_PIPE_CH5_TXSYNCHEADER_in),
    .XPIPE_PIPE_CH6_PHYSTATUS_M (XPIPE_PIPE_CH6_PHYSTATUS_M_in),
    .XPIPE_PIPE_CH6_POWERDOWN (XPIPE_PIPE_CH6_POWERDOWN_in),
    .XPIPE_PIPE_CH6_RXCHARISK_M (XPIPE_PIPE_CH6_RXCHARISK_M_in),
    .XPIPE_PIPE_CH6_RXDATAVALID_M (XPIPE_PIPE_CH6_RXDATAVALID_M_in),
    .XPIPE_PIPE_CH6_RXDATA_M (XPIPE_PIPE_CH6_RXDATA_M_in),
    .XPIPE_PIPE_CH6_RXELECIDLE_M (XPIPE_PIPE_CH6_RXELECIDLE_M_in),
    .XPIPE_PIPE_CH6_RXPOLARITY (XPIPE_PIPE_CH6_RXPOLARITY_in),
    .XPIPE_PIPE_CH6_RXSTARTBLOCK_M (XPIPE_PIPE_CH6_RXSTARTBLOCK_M_in),
    .XPIPE_PIPE_CH6_RXSTATUS_M (XPIPE_PIPE_CH6_RXSTATUS_M_in),
    .XPIPE_PIPE_CH6_RXSYNCHEADER_M (XPIPE_PIPE_CH6_RXSYNCHEADER_M_in),
    .XPIPE_PIPE_CH6_RXTERMINATION (XPIPE_PIPE_CH6_RXTERMINATION_in),
    .XPIPE_PIPE_CH6_RXVALID_M (XPIPE_PIPE_CH6_RXVALID_M_in),
    .XPIPE_PIPE_CH6_TXCHARISK (XPIPE_PIPE_CH6_TXCHARISK_in),
    .XPIPE_PIPE_CH6_TXCOMPLIANCE (XPIPE_PIPE_CH6_TXCOMPLIANCE_in),
    .XPIPE_PIPE_CH6_TXDATA (XPIPE_PIPE_CH6_TXDATA_in),
    .XPIPE_PIPE_CH6_TXDATAVALID (XPIPE_PIPE_CH6_TXDATAVALID_in),
    .XPIPE_PIPE_CH6_TXDEEMPH (XPIPE_PIPE_CH6_TXDEEMPH_in),
    .XPIPE_PIPE_CH6_TXDETECTRXLOOPBACK (XPIPE_PIPE_CH6_TXDETECTRXLOOPBACK_in),
    .XPIPE_PIPE_CH6_TXELECIDLE (XPIPE_PIPE_CH6_TXELECIDLE_in),
    .XPIPE_PIPE_CH6_TXMAINCURSOR (XPIPE_PIPE_CH6_TXMAINCURSOR_in),
    .XPIPE_PIPE_CH6_TXMARGIN (XPIPE_PIPE_CH6_TXMARGIN_in),
    .XPIPE_PIPE_CH6_TXPOSTCURSOR (XPIPE_PIPE_CH6_TXPOSTCURSOR_in),
    .XPIPE_PIPE_CH6_TXPRECURSOR (XPIPE_PIPE_CH6_TXPRECURSOR_in),
    .XPIPE_PIPE_CH6_TXSTARTBLOCK (XPIPE_PIPE_CH6_TXSTARTBLOCK_in),
    .XPIPE_PIPE_CH6_TXSWING (XPIPE_PIPE_CH6_TXSWING_in),
    .XPIPE_PIPE_CH6_TXSYNCHEADER (XPIPE_PIPE_CH6_TXSYNCHEADER_in),
    .XPIPE_PIPE_CH7_PHYSTATUS_M (XPIPE_PIPE_CH7_PHYSTATUS_M_in),
    .XPIPE_PIPE_CH7_POWERDOWN (XPIPE_PIPE_CH7_POWERDOWN_in),
    .XPIPE_PIPE_CH7_RXCHARISK_M (XPIPE_PIPE_CH7_RXCHARISK_M_in),
    .XPIPE_PIPE_CH7_RXDATAVALID_M (XPIPE_PIPE_CH7_RXDATAVALID_M_in),
    .XPIPE_PIPE_CH7_RXDATA_M (XPIPE_PIPE_CH7_RXDATA_M_in),
    .XPIPE_PIPE_CH7_RXELECIDLE_M (XPIPE_PIPE_CH7_RXELECIDLE_M_in),
    .XPIPE_PIPE_CH7_RXPOLARITY (XPIPE_PIPE_CH7_RXPOLARITY_in),
    .XPIPE_PIPE_CH7_RXSTARTBLOCK_M (XPIPE_PIPE_CH7_RXSTARTBLOCK_M_in),
    .XPIPE_PIPE_CH7_RXSTATUS_M (XPIPE_PIPE_CH7_RXSTATUS_M_in),
    .XPIPE_PIPE_CH7_RXSYNCHEADER_M (XPIPE_PIPE_CH7_RXSYNCHEADER_M_in),
    .XPIPE_PIPE_CH7_RXTERMINATION (XPIPE_PIPE_CH7_RXTERMINATION_in),
    .XPIPE_PIPE_CH7_RXVALID_M (XPIPE_PIPE_CH7_RXVALID_M_in),
    .XPIPE_PIPE_CH7_TXCHARISK (XPIPE_PIPE_CH7_TXCHARISK_in),
    .XPIPE_PIPE_CH7_TXCOMPLIANCE (XPIPE_PIPE_CH7_TXCOMPLIANCE_in),
    .XPIPE_PIPE_CH7_TXDATA (XPIPE_PIPE_CH7_TXDATA_in),
    .XPIPE_PIPE_CH7_TXDATAVALID (XPIPE_PIPE_CH7_TXDATAVALID_in),
    .XPIPE_PIPE_CH7_TXDEEMPH (XPIPE_PIPE_CH7_TXDEEMPH_in),
    .XPIPE_PIPE_CH7_TXDETECTRXLOOPBACK (XPIPE_PIPE_CH7_TXDETECTRXLOOPBACK_in),
    .XPIPE_PIPE_CH7_TXELECIDLE (XPIPE_PIPE_CH7_TXELECIDLE_in),
    .XPIPE_PIPE_CH7_TXMAINCURSOR (XPIPE_PIPE_CH7_TXMAINCURSOR_in),
    .XPIPE_PIPE_CH7_TXMARGIN (XPIPE_PIPE_CH7_TXMARGIN_in),
    .XPIPE_PIPE_CH7_TXPOSTCURSOR (XPIPE_PIPE_CH7_TXPOSTCURSOR_in),
    .XPIPE_PIPE_CH7_TXPRECURSOR (XPIPE_PIPE_CH7_TXPRECURSOR_in),
    .XPIPE_PIPE_CH7_TXSTARTBLOCK (XPIPE_PIPE_CH7_TXSTARTBLOCK_in),
    .XPIPE_PIPE_CH7_TXSWING (XPIPE_PIPE_CH7_TXSWING_in),
    .XPIPE_PIPE_CH7_TXSYNCHEADER (XPIPE_PIPE_CH7_TXSYNCHEADER_in),
    .XPIPE_PIPE_CH8_PHYSTATUS_M (XPIPE_PIPE_CH8_PHYSTATUS_M_in),
    .XPIPE_PIPE_CH8_POWERDOWN (XPIPE_PIPE_CH8_POWERDOWN_in),
    .XPIPE_PIPE_CH8_RXCHARISK_M (XPIPE_PIPE_CH8_RXCHARISK_M_in),
    .XPIPE_PIPE_CH8_RXDATAVALID_M (XPIPE_PIPE_CH8_RXDATAVALID_M_in),
    .XPIPE_PIPE_CH8_RXDATA_M (XPIPE_PIPE_CH8_RXDATA_M_in),
    .XPIPE_PIPE_CH8_RXELECIDLE_M (XPIPE_PIPE_CH8_RXELECIDLE_M_in),
    .XPIPE_PIPE_CH8_RXPOLARITY (XPIPE_PIPE_CH8_RXPOLARITY_in),
    .XPIPE_PIPE_CH8_RXSTARTBLOCK_M (XPIPE_PIPE_CH8_RXSTARTBLOCK_M_in),
    .XPIPE_PIPE_CH8_RXSTATUS_M (XPIPE_PIPE_CH8_RXSTATUS_M_in),
    .XPIPE_PIPE_CH8_RXSYNCHEADER_M (XPIPE_PIPE_CH8_RXSYNCHEADER_M_in),
    .XPIPE_PIPE_CH8_RXTERMINATION (XPIPE_PIPE_CH8_RXTERMINATION_in),
    .XPIPE_PIPE_CH8_RXVALID_M (XPIPE_PIPE_CH8_RXVALID_M_in),
    .XPIPE_PIPE_CH8_TXCHARISK (XPIPE_PIPE_CH8_TXCHARISK_in),
    .XPIPE_PIPE_CH8_TXCOMPLIANCE (XPIPE_PIPE_CH8_TXCOMPLIANCE_in),
    .XPIPE_PIPE_CH8_TXDATA (XPIPE_PIPE_CH8_TXDATA_in),
    .XPIPE_PIPE_CH8_TXDATAVALID (XPIPE_PIPE_CH8_TXDATAVALID_in),
    .XPIPE_PIPE_CH8_TXDEEMPH (XPIPE_PIPE_CH8_TXDEEMPH_in),
    .XPIPE_PIPE_CH8_TXDETECTRXLOOPBACK (XPIPE_PIPE_CH8_TXDETECTRXLOOPBACK_in),
    .XPIPE_PIPE_CH8_TXELECIDLE (XPIPE_PIPE_CH8_TXELECIDLE_in),
    .XPIPE_PIPE_CH8_TXMAINCURSOR (XPIPE_PIPE_CH8_TXMAINCURSOR_in),
    .XPIPE_PIPE_CH8_TXMARGIN (XPIPE_PIPE_CH8_TXMARGIN_in),
    .XPIPE_PIPE_CH8_TXPOSTCURSOR (XPIPE_PIPE_CH8_TXPOSTCURSOR_in),
    .XPIPE_PIPE_CH8_TXPRECURSOR (XPIPE_PIPE_CH8_TXPRECURSOR_in),
    .XPIPE_PIPE_CH8_TXSTARTBLOCK (XPIPE_PIPE_CH8_TXSTARTBLOCK_in),
    .XPIPE_PIPE_CH8_TXSWING (XPIPE_PIPE_CH8_TXSWING_in),
    .XPIPE_PIPE_CH8_TXSYNCHEADER (XPIPE_PIPE_CH8_TXSYNCHEADER_in),
    .XPIPE_PIPE_CH9_PHYSTATUS_M (XPIPE_PIPE_CH9_PHYSTATUS_M_in),
    .XPIPE_PIPE_CH9_POWERDOWN (XPIPE_PIPE_CH9_POWERDOWN_in),
    .XPIPE_PIPE_CH9_RXCHARISK_M (XPIPE_PIPE_CH9_RXCHARISK_M_in),
    .XPIPE_PIPE_CH9_RXDATAVALID_M (XPIPE_PIPE_CH9_RXDATAVALID_M_in),
    .XPIPE_PIPE_CH9_RXDATA_M (XPIPE_PIPE_CH9_RXDATA_M_in),
    .XPIPE_PIPE_CH9_RXELECIDLE_M (XPIPE_PIPE_CH9_RXELECIDLE_M_in),
    .XPIPE_PIPE_CH9_RXPOLARITY (XPIPE_PIPE_CH9_RXPOLARITY_in),
    .XPIPE_PIPE_CH9_RXSTARTBLOCK_M (XPIPE_PIPE_CH9_RXSTARTBLOCK_M_in),
    .XPIPE_PIPE_CH9_RXSTATUS_M (XPIPE_PIPE_CH9_RXSTATUS_M_in),
    .XPIPE_PIPE_CH9_RXSYNCHEADER_M (XPIPE_PIPE_CH9_RXSYNCHEADER_M_in),
    .XPIPE_PIPE_CH9_RXTERMINATION (XPIPE_PIPE_CH9_RXTERMINATION_in),
    .XPIPE_PIPE_CH9_RXVALID_M (XPIPE_PIPE_CH9_RXVALID_M_in),
    .XPIPE_PIPE_CH9_TXCHARISK (XPIPE_PIPE_CH9_TXCHARISK_in),
    .XPIPE_PIPE_CH9_TXCOMPLIANCE (XPIPE_PIPE_CH9_TXCOMPLIANCE_in),
    .XPIPE_PIPE_CH9_TXDATA (XPIPE_PIPE_CH9_TXDATA_in),
    .XPIPE_PIPE_CH9_TXDATAVALID (XPIPE_PIPE_CH9_TXDATAVALID_in),
    .XPIPE_PIPE_CH9_TXDEEMPH (XPIPE_PIPE_CH9_TXDEEMPH_in),
    .XPIPE_PIPE_CH9_TXDETECTRXLOOPBACK (XPIPE_PIPE_CH9_TXDETECTRXLOOPBACK_in),
    .XPIPE_PIPE_CH9_TXELECIDLE (XPIPE_PIPE_CH9_TXELECIDLE_in),
    .XPIPE_PIPE_CH9_TXMAINCURSOR (XPIPE_PIPE_CH9_TXMAINCURSOR_in),
    .XPIPE_PIPE_CH9_TXMARGIN (XPIPE_PIPE_CH9_TXMARGIN_in),
    .XPIPE_PIPE_CH9_TXPOSTCURSOR (XPIPE_PIPE_CH9_TXPOSTCURSOR_in),
    .XPIPE_PIPE_CH9_TXPRECURSOR (XPIPE_PIPE_CH9_TXPRECURSOR_in),
    .XPIPE_PIPE_CH9_TXSTARTBLOCK (XPIPE_PIPE_CH9_TXSTARTBLOCK_in),
    .XPIPE_PIPE_CH9_TXSWING (XPIPE_PIPE_CH9_TXSWING_in),
    .XPIPE_PIPE_CH9_TXSYNCHEADER (XPIPE_PIPE_CH9_TXSYNCHEADER_in),
    .XPIPE_RXMARGINREQACK_M (XPIPE_RXMARGINREQACK_M_in),
    .XPIPE_RXMARGINREQACK_M_1 (XPIPE_RXMARGINREQACK_M_1_in),
    .XPIPE_RXMARGINREQACK_M_2 (XPIPE_RXMARGINREQACK_M_2_in),
    .XPIPE_RXMARGINREQACK_M_3 (XPIPE_RXMARGINREQACK_M_3_in),
    .XPIPE_RXMARGINREQCMD (XPIPE_RXMARGINREQCMD_in),
    .XPIPE_RXMARGINREQCMD_1 (XPIPE_RXMARGINREQCMD_1_in),
    .XPIPE_RXMARGINREQCMD_2 (XPIPE_RXMARGINREQCMD_2_in),
    .XPIPE_RXMARGINREQCMD_3 (XPIPE_RXMARGINREQCMD_3_in),
    .XPIPE_RXMARGINREQLANENUM (XPIPE_RXMARGINREQLANENUM_in),
    .XPIPE_RXMARGINREQLANENUM_1 (XPIPE_RXMARGINREQLANENUM_1_in),
    .XPIPE_RXMARGINREQLANENUM_2 (XPIPE_RXMARGINREQLANENUM_2_in),
    .XPIPE_RXMARGINREQLANENUM_3 (XPIPE_RXMARGINREQLANENUM_3_in),
    .XPIPE_RXMARGINREQPAYLOAD (XPIPE_RXMARGINREQPAYLOAD_in),
    .XPIPE_RXMARGINREQPAYLOAD_1 (XPIPE_RXMARGINREQPAYLOAD_1_in),
    .XPIPE_RXMARGINREQPAYLOAD_2 (XPIPE_RXMARGINREQPAYLOAD_2_in),
    .XPIPE_RXMARGINREQPAYLOAD_3 (XPIPE_RXMARGINREQPAYLOAD_3_in),
    .XPIPE_RXMARGINREQREQ (XPIPE_RXMARGINREQREQ_in),
    .XPIPE_RXMARGINREQREQ_1 (XPIPE_RXMARGINREQREQ_1_in),
    .XPIPE_RXMARGINREQREQ_2 (XPIPE_RXMARGINREQREQ_2_in),
    .XPIPE_RXMARGINREQREQ_3 (XPIPE_RXMARGINREQREQ_3_in),
    .XPIPE_RXMARGINRESACK (XPIPE_RXMARGINRESACK_in),
    .XPIPE_RXMARGINRESACK_1 (XPIPE_RXMARGINRESACK_1_in),
    .XPIPE_RXMARGINRESACK_2 (XPIPE_RXMARGINRESACK_2_in),
    .XPIPE_RXMARGINRESACK_3 (XPIPE_RXMARGINRESACK_3_in),
    .XPIPE_RXMARGINRESCMD_M (XPIPE_RXMARGINRESCMD_M_in),
    .XPIPE_RXMARGINRESCMD_M_1 (XPIPE_RXMARGINRESCMD_M_1_in),
    .XPIPE_RXMARGINRESCMD_M_2 (XPIPE_RXMARGINRESCMD_M_2_in),
    .XPIPE_RXMARGINRESCMD_M_3 (XPIPE_RXMARGINRESCMD_M_3_in),
    .XPIPE_RXMARGINRESLANENUM_M (XPIPE_RXMARGINRESLANENUM_M_in),
    .XPIPE_RXMARGINRESLANENUM_M_1 (XPIPE_RXMARGINRESLANENUM_M_1_in),
    .XPIPE_RXMARGINRESLANENUM_M_2 (XPIPE_RXMARGINRESLANENUM_M_2_in),
    .XPIPE_RXMARGINRESLANENUM_M_3 (XPIPE_RXMARGINRESLANENUM_M_3_in),
    .XPIPE_RXMARGINRESPAYLOAD_M (XPIPE_RXMARGINRESPAYLOAD_M_in),
    .XPIPE_RXMARGINRESPAYLOAD_M_1 (XPIPE_RXMARGINRESPAYLOAD_M_1_in),
    .XPIPE_RXMARGINRESPAYLOAD_M_2 (XPIPE_RXMARGINRESPAYLOAD_M_2_in),
    .XPIPE_RXMARGINRESPAYLOAD_M_3 (XPIPE_RXMARGINRESPAYLOAD_M_3_in),
    .XPIPE_RXMARGINRESREQ_M (XPIPE_RXMARGINRESREQ_M_in),
    .XPIPE_RXMARGINRESREQ_M_1 (XPIPE_RXMARGINRESREQ_M_1_in),
    .XPIPE_RXMARGINRESREQ_M_2 (XPIPE_RXMARGINRESREQ_M_2_in),
    .XPIPE_RXMARGINRESREQ_M_3 (XPIPE_RXMARGINRESREQ_M_3_in),
    .XPSCANCLK (XPSCANCLK_in),
    .XPSCANENB (XPSCANENB_in),
    .XPSCANIN (XPSCANIN_in),
    .XPSCANMODEB (XPSCANMODEB_in),
    .XPSCANOUT_M (XPSCANOUT_M_in),
    .XPSCANRSTB (XPSCANRSTB_in)
  );

`ifdef XIL_TIMING
  reg notifier;
`endif

`ifndef XIL_XECLIB
  specify
    (ALTCLK => ALTCLK_M) = (0:0:0, 0:0:0);
    (APB3CLK => APB3CLK_M) = (0:0:0, 0:0:0);
    (APB3PADDR[0] => APB3PADDR_M[0]) = (0:0:0, 0:0:0);
    (APB3PADDR[10] => APB3PADDR_M[10]) = (0:0:0, 0:0:0);
    (APB3PADDR[11] => APB3PADDR_M[11]) = (0:0:0, 0:0:0);
    (APB3PADDR[12] => APB3PADDR_M[12]) = (0:0:0, 0:0:0);
    (APB3PADDR[13] => APB3PADDR_M[13]) = (0:0:0, 0:0:0);
    (APB3PADDR[14] => APB3PADDR_M[14]) = (0:0:0, 0:0:0);
    (APB3PADDR[15] => APB3PADDR_M[15]) = (0:0:0, 0:0:0);
    (APB3PADDR[1] => APB3PADDR_M[1]) = (0:0:0, 0:0:0);
    (APB3PADDR[2] => APB3PADDR_M[2]) = (0:0:0, 0:0:0);
    (APB3PADDR[3] => APB3PADDR_M[3]) = (0:0:0, 0:0:0);
    (APB3PADDR[4] => APB3PADDR_M[4]) = (0:0:0, 0:0:0);
    (APB3PADDR[5] => APB3PADDR_M[5]) = (0:0:0, 0:0:0);
    (APB3PADDR[6] => APB3PADDR_M[6]) = (0:0:0, 0:0:0);
    (APB3PADDR[7] => APB3PADDR_M[7]) = (0:0:0, 0:0:0);
    (APB3PADDR[8] => APB3PADDR_M[8]) = (0:0:0, 0:0:0);
    (APB3PADDR[9] => APB3PADDR_M[9]) = (0:0:0, 0:0:0);
    (APB3PENABLE => APB3PENABLE_M) = (0:0:0, 0:0:0);
    (APB3PRDATA_M[0] => APB3PRDATA[0]) = (0:0:0, 0:0:0);
    (APB3PRDATA_M[10] => APB3PRDATA[10]) = (0:0:0, 0:0:0);
    (APB3PRDATA_M[11] => APB3PRDATA[11]) = (0:0:0, 0:0:0);
    (APB3PRDATA_M[12] => APB3PRDATA[12]) = (0:0:0, 0:0:0);
    (APB3PRDATA_M[13] => APB3PRDATA[13]) = (0:0:0, 0:0:0);
    (APB3PRDATA_M[14] => APB3PRDATA[14]) = (0:0:0, 0:0:0);
    (APB3PRDATA_M[15] => APB3PRDATA[15]) = (0:0:0, 0:0:0);
    (APB3PRDATA_M[16] => APB3PRDATA[16]) = (0:0:0, 0:0:0);
    (APB3PRDATA_M[17] => APB3PRDATA[17]) = (0:0:0, 0:0:0);
    (APB3PRDATA_M[18] => APB3PRDATA[18]) = (0:0:0, 0:0:0);
    (APB3PRDATA_M[19] => APB3PRDATA[19]) = (0:0:0, 0:0:0);
    (APB3PRDATA_M[1] => APB3PRDATA[1]) = (0:0:0, 0:0:0);
    (APB3PRDATA_M[20] => APB3PRDATA[20]) = (0:0:0, 0:0:0);
    (APB3PRDATA_M[21] => APB3PRDATA[21]) = (0:0:0, 0:0:0);
    (APB3PRDATA_M[22] => APB3PRDATA[22]) = (0:0:0, 0:0:0);
    (APB3PRDATA_M[23] => APB3PRDATA[23]) = (0:0:0, 0:0:0);
    (APB3PRDATA_M[24] => APB3PRDATA[24]) = (0:0:0, 0:0:0);
    (APB3PRDATA_M[25] => APB3PRDATA[25]) = (0:0:0, 0:0:0);
    (APB3PRDATA_M[26] => APB3PRDATA[26]) = (0:0:0, 0:0:0);
    (APB3PRDATA_M[27] => APB3PRDATA[27]) = (0:0:0, 0:0:0);
    (APB3PRDATA_M[28] => APB3PRDATA[28]) = (0:0:0, 0:0:0);
    (APB3PRDATA_M[29] => APB3PRDATA[29]) = (0:0:0, 0:0:0);
    (APB3PRDATA_M[2] => APB3PRDATA[2]) = (0:0:0, 0:0:0);
    (APB3PRDATA_M[30] => APB3PRDATA[30]) = (0:0:0, 0:0:0);
    (APB3PRDATA_M[31] => APB3PRDATA[31]) = (0:0:0, 0:0:0);
    (APB3PRDATA_M[3] => APB3PRDATA[3]) = (0:0:0, 0:0:0);
    (APB3PRDATA_M[4] => APB3PRDATA[4]) = (0:0:0, 0:0:0);
    (APB3PRDATA_M[5] => APB3PRDATA[5]) = (0:0:0, 0:0:0);
    (APB3PRDATA_M[6] => APB3PRDATA[6]) = (0:0:0, 0:0:0);
    (APB3PRDATA_M[7] => APB3PRDATA[7]) = (0:0:0, 0:0:0);
    (APB3PRDATA_M[8] => APB3PRDATA[8]) = (0:0:0, 0:0:0);
    (APB3PRDATA_M[9] => APB3PRDATA[9]) = (0:0:0, 0:0:0);
    (APB3PSEL => APB3PSEL_M) = (0:0:0, 0:0:0);
    (APB3PSLVERR_M => APB3PSLVERR) = (0:0:0, 0:0:0);
    (APB3PWDATA[0] => APB3PWDATA_M[0]) = (0:0:0, 0:0:0);
    (APB3PWDATA[10] => APB3PWDATA_M[10]) = (0:0:0, 0:0:0);
    (APB3PWDATA[11] => APB3PWDATA_M[11]) = (0:0:0, 0:0:0);
    (APB3PWDATA[12] => APB3PWDATA_M[12]) = (0:0:0, 0:0:0);
    (APB3PWDATA[13] => APB3PWDATA_M[13]) = (0:0:0, 0:0:0);
    (APB3PWDATA[14] => APB3PWDATA_M[14]) = (0:0:0, 0:0:0);
    (APB3PWDATA[15] => APB3PWDATA_M[15]) = (0:0:0, 0:0:0);
    (APB3PWDATA[16] => APB3PWDATA_M[16]) = (0:0:0, 0:0:0);
    (APB3PWDATA[17] => APB3PWDATA_M[17]) = (0:0:0, 0:0:0);
    (APB3PWDATA[18] => APB3PWDATA_M[18]) = (0:0:0, 0:0:0);
    (APB3PWDATA[19] => APB3PWDATA_M[19]) = (0:0:0, 0:0:0);
    (APB3PWDATA[1] => APB3PWDATA_M[1]) = (0:0:0, 0:0:0);
    (APB3PWDATA[20] => APB3PWDATA_M[20]) = (0:0:0, 0:0:0);
    (APB3PWDATA[21] => APB3PWDATA_M[21]) = (0:0:0, 0:0:0);
    (APB3PWDATA[22] => APB3PWDATA_M[22]) = (0:0:0, 0:0:0);
    (APB3PWDATA[23] => APB3PWDATA_M[23]) = (0:0:0, 0:0:0);
    (APB3PWDATA[24] => APB3PWDATA_M[24]) = (0:0:0, 0:0:0);
    (APB3PWDATA[25] => APB3PWDATA_M[25]) = (0:0:0, 0:0:0);
    (APB3PWDATA[26] => APB3PWDATA_M[26]) = (0:0:0, 0:0:0);
    (APB3PWDATA[27] => APB3PWDATA_M[27]) = (0:0:0, 0:0:0);
    (APB3PWDATA[28] => APB3PWDATA_M[28]) = (0:0:0, 0:0:0);
    (APB3PWDATA[29] => APB3PWDATA_M[29]) = (0:0:0, 0:0:0);
    (APB3PWDATA[2] => APB3PWDATA_M[2]) = (0:0:0, 0:0:0);
    (APB3PWDATA[30] => APB3PWDATA_M[30]) = (0:0:0, 0:0:0);
    (APB3PWDATA[31] => APB3PWDATA_M[31]) = (0:0:0, 0:0:0);
    (APB3PWDATA[3] => APB3PWDATA_M[3]) = (0:0:0, 0:0:0);
    (APB3PWDATA[4] => APB3PWDATA_M[4]) = (0:0:0, 0:0:0);
    (APB3PWDATA[5] => APB3PWDATA_M[5]) = (0:0:0, 0:0:0);
    (APB3PWDATA[6] => APB3PWDATA_M[6]) = (0:0:0, 0:0:0);
    (APB3PWDATA[7] => APB3PWDATA_M[7]) = (0:0:0, 0:0:0);
    (APB3PWDATA[8] => APB3PWDATA_M[8]) = (0:0:0, 0:0:0);
    (APB3PWDATA[9] => APB3PWDATA_M[9]) = (0:0:0, 0:0:0);
    (APB3PWRITE => APB3PWRITE_M) = (0:0:0, 0:0:0);
    (AXISCLK => AXISCLK_M) = (0:0:0, 0:0:0);
    (BGBYPASSB => BGBYPASSB_M) = (0:0:0, 0:0:0);
    (BGMONITORENB => BGMONITORENB_M) = (0:0:0, 0:0:0);
    (BGPDB => BGPDB_M) = (0:0:0, 0:0:0);
    (BGRCALOVRDENB => BGRCALOVRDENB_M) = (0:0:0, 0:0:0);
    (BGRCALOVRD[0] => BGRCALOVRD_M[0]) = (0:0:0, 0:0:0);
    (BGRCALOVRD[1] => BGRCALOVRD_M[1]) = (0:0:0, 0:0:0);
    (BGRCALOVRD[2] => BGRCALOVRD_M[2]) = (0:0:0, 0:0:0);
    (BGRCALOVRD[3] => BGRCALOVRD_M[3]) = (0:0:0, 0:0:0);
    (BGRCALOVRD[4] => BGRCALOVRD_M[4]) = (0:0:0, 0:0:0);
    (CH0_BUFGTCEMASK_M[0] => CH0_BUFGTCEMASK[0]) = (0:0:0, 0:0:0);
    (CH0_BUFGTCEMASK_M[1] => CH0_BUFGTCEMASK[1]) = (0:0:0, 0:0:0);
    (CH0_BUFGTCEMASK_M[2] => CH0_BUFGTCEMASK[2]) = (0:0:0, 0:0:0);
    (CH0_BUFGTCEMASK_M[3] => CH0_BUFGTCEMASK[3]) = (0:0:0, 0:0:0);
    (CH0_BUFGTCE_M => CH0_BUFGTCE) = (0:0:0, 0:0:0);
    (CH0_BUFGTDIV_M[0] => CH0_BUFGTDIV[0]) = (0:0:0, 0:0:0);
    (CH0_BUFGTDIV_M[10] => CH0_BUFGTDIV[10]) = (0:0:0, 0:0:0);
    (CH0_BUFGTDIV_M[11] => CH0_BUFGTDIV[11]) = (0:0:0, 0:0:0);
    (CH0_BUFGTDIV_M[1] => CH0_BUFGTDIV[1]) = (0:0:0, 0:0:0);
    (CH0_BUFGTDIV_M[2] => CH0_BUFGTDIV[2]) = (0:0:0, 0:0:0);
    (CH0_BUFGTDIV_M[3] => CH0_BUFGTDIV[3]) = (0:0:0, 0:0:0);
    (CH0_BUFGTDIV_M[4] => CH0_BUFGTDIV[4]) = (0:0:0, 0:0:0);
    (CH0_BUFGTDIV_M[5] => CH0_BUFGTDIV[5]) = (0:0:0, 0:0:0);
    (CH0_BUFGTDIV_M[6] => CH0_BUFGTDIV[6]) = (0:0:0, 0:0:0);
    (CH0_BUFGTDIV_M[7] => CH0_BUFGTDIV[7]) = (0:0:0, 0:0:0);
    (CH0_BUFGTDIV_M[8] => CH0_BUFGTDIV[8]) = (0:0:0, 0:0:0);
    (CH0_BUFGTDIV_M[9] => CH0_BUFGTDIV[9]) = (0:0:0, 0:0:0);
    (CH0_CDRBMCDRREQ => CH0_CDRBMCDRREQ_M) = (0:0:0, 0:0:0);
    (CH0_CDRFREQOS => CH0_CDRFREQOS_M) = (0:0:0, 0:0:0);
    (CH0_CDRINCPCTRL => CH0_CDRINCPCTRL_M) = (0:0:0, 0:0:0);
    (CH0_CFOKOVRDFINISH => CH0_CFOKOVRDFINISH_M) = (0:0:0, 0:0:0);
    (CH0_CFOKOVRDPULSE => CH0_CFOKOVRDPULSE_M) = (0:0:0, 0:0:0);
    (CH0_CFOKOVRDRDY0_M => CH0_CFOKOVRDRDY0) = (0:0:0, 0:0:0);
    (CH0_CFOKOVRDRDY1_M => CH0_CFOKOVRDRDY1) = (0:0:0, 0:0:0);
    (CH0_CFOKOVRDSTART => CH0_CFOKOVRDSTART_M) = (0:0:0, 0:0:0);
    (CH0_CLKRSVD0 => CH0_CLKRSVD0_M) = (0:0:0, 0:0:0);
    (CH0_CLKRSVD1 => CH0_CLKRSVD1_M) = (0:0:0, 0:0:0);
    (CH0_DMONITORCLK => CH0_DMONITORCLK_M) = (0:0:0, 0:0:0);
    (CH0_DMONITOROUT_M[0] => CH0_DMONITOROUT[0]) = (0:0:0, 0:0:0);
    (CH0_DMONITOROUT_M[10] => CH0_DMONITOROUT[10]) = (0:0:0, 0:0:0);
    (CH0_DMONITOROUT_M[11] => CH0_DMONITOROUT[11]) = (0:0:0, 0:0:0);
    (CH0_DMONITOROUT_M[12] => CH0_DMONITOROUT[12]) = (0:0:0, 0:0:0);
    (CH0_DMONITOROUT_M[13] => CH0_DMONITOROUT[13]) = (0:0:0, 0:0:0);
    (CH0_DMONITOROUT_M[14] => CH0_DMONITOROUT[14]) = (0:0:0, 0:0:0);
    (CH0_DMONITOROUT_M[15] => CH0_DMONITOROUT[15]) = (0:0:0, 0:0:0);
    (CH0_DMONITOROUT_M[16] => CH0_DMONITOROUT[16]) = (0:0:0, 0:0:0);
    (CH0_DMONITOROUT_M[17] => CH0_DMONITOROUT[17]) = (0:0:0, 0:0:0);
    (CH0_DMONITOROUT_M[18] => CH0_DMONITOROUT[18]) = (0:0:0, 0:0:0);
    (CH0_DMONITOROUT_M[19] => CH0_DMONITOROUT[19]) = (0:0:0, 0:0:0);
    (CH0_DMONITOROUT_M[1] => CH0_DMONITOROUT[1]) = (0:0:0, 0:0:0);
    (CH0_DMONITOROUT_M[20] => CH0_DMONITOROUT[20]) = (0:0:0, 0:0:0);
    (CH0_DMONITOROUT_M[21] => CH0_DMONITOROUT[21]) = (0:0:0, 0:0:0);
    (CH0_DMONITOROUT_M[22] => CH0_DMONITOROUT[22]) = (0:0:0, 0:0:0);
    (CH0_DMONITOROUT_M[23] => CH0_DMONITOROUT[23]) = (0:0:0, 0:0:0);
    (CH0_DMONITOROUT_M[24] => CH0_DMONITOROUT[24]) = (0:0:0, 0:0:0);
    (CH0_DMONITOROUT_M[25] => CH0_DMONITOROUT[25]) = (0:0:0, 0:0:0);
    (CH0_DMONITOROUT_M[26] => CH0_DMONITOROUT[26]) = (0:0:0, 0:0:0);
    (CH0_DMONITOROUT_M[27] => CH0_DMONITOROUT[27]) = (0:0:0, 0:0:0);
    (CH0_DMONITOROUT_M[28] => CH0_DMONITOROUT[28]) = (0:0:0, 0:0:0);
    (CH0_DMONITOROUT_M[29] => CH0_DMONITOROUT[29]) = (0:0:0, 0:0:0);
    (CH0_DMONITOROUT_M[2] => CH0_DMONITOROUT[2]) = (0:0:0, 0:0:0);
    (CH0_DMONITOROUT_M[30] => CH0_DMONITOROUT[30]) = (0:0:0, 0:0:0);
    (CH0_DMONITOROUT_M[31] => CH0_DMONITOROUT[31]) = (0:0:0, 0:0:0);
    (CH0_DMONITOROUT_M[3] => CH0_DMONITOROUT[3]) = (0:0:0, 0:0:0);
    (CH0_DMONITOROUT_M[4] => CH0_DMONITOROUT[4]) = (0:0:0, 0:0:0);
    (CH0_DMONITOROUT_M[5] => CH0_DMONITOROUT[5]) = (0:0:0, 0:0:0);
    (CH0_DMONITOROUT_M[6] => CH0_DMONITOROUT[6]) = (0:0:0, 0:0:0);
    (CH0_DMONITOROUT_M[7] => CH0_DMONITOROUT[7]) = (0:0:0, 0:0:0);
    (CH0_DMONITOROUT_M[8] => CH0_DMONITOROUT[8]) = (0:0:0, 0:0:0);
    (CH0_DMONITOROUT_M[9] => CH0_DMONITOROUT[9]) = (0:0:0, 0:0:0);
    (CH0_EYESCANDATAERROR_M => CH0_EYESCANDATAERROR) = (0:0:0, 0:0:0);
    (CH0_EYESCANTRIGGER => CH0_EYESCANTRIGGER_M) = (0:0:0, 0:0:0);
    (CH0_GTRSVD[0] => CH0_GTRSVD_M[0]) = (0:0:0, 0:0:0);
    (CH0_GTRSVD[10] => CH0_GTRSVD_M[10]) = (0:0:0, 0:0:0);
    (CH0_GTRSVD[11] => CH0_GTRSVD_M[11]) = (0:0:0, 0:0:0);
    (CH0_GTRSVD[12] => CH0_GTRSVD_M[12]) = (0:0:0, 0:0:0);
    (CH0_GTRSVD[13] => CH0_GTRSVD_M[13]) = (0:0:0, 0:0:0);
    (CH0_GTRSVD[14] => CH0_GTRSVD_M[14]) = (0:0:0, 0:0:0);
    (CH0_GTRSVD[15] => CH0_GTRSVD_M[15]) = (0:0:0, 0:0:0);
    (CH0_GTRSVD[1] => CH0_GTRSVD_M[1]) = (0:0:0, 0:0:0);
    (CH0_GTRSVD[2] => CH0_GTRSVD_M[2]) = (0:0:0, 0:0:0);
    (CH0_GTRSVD[3] => CH0_GTRSVD_M[3]) = (0:0:0, 0:0:0);
    (CH0_GTRSVD[4] => CH0_GTRSVD_M[4]) = (0:0:0, 0:0:0);
    (CH0_GTRSVD[5] => CH0_GTRSVD_M[5]) = (0:0:0, 0:0:0);
    (CH0_GTRSVD[6] => CH0_GTRSVD_M[6]) = (0:0:0, 0:0:0);
    (CH0_GTRSVD[7] => CH0_GTRSVD_M[7]) = (0:0:0, 0:0:0);
    (CH0_GTRSVD[8] => CH0_GTRSVD_M[8]) = (0:0:0, 0:0:0);
    (CH0_GTRSVD[9] => CH0_GTRSVD_M[9]) = (0:0:0, 0:0:0);
    (CH0_LOOPBACK[0] => CH0_LOOPBACK_M[0]) = (0:0:0, 0:0:0);
    (CH0_LOOPBACK[1] => CH0_LOOPBACK_M[1]) = (0:0:0, 0:0:0);
    (CH0_LOOPBACK[2] => CH0_LOOPBACK_M[2]) = (0:0:0, 0:0:0);
    (CH0_PCSRSVDIN[0] => CH0_PCSRSVDIN_M[0]) = (0:0:0, 0:0:0);
    (CH0_PCSRSVDIN[10] => CH0_PCSRSVDIN_M[10]) = (0:0:0, 0:0:0);
    (CH0_PCSRSVDIN[11] => CH0_PCSRSVDIN_M[11]) = (0:0:0, 0:0:0);
    (CH0_PCSRSVDIN[12] => CH0_PCSRSVDIN_M[12]) = (0:0:0, 0:0:0);
    (CH0_PCSRSVDIN[13] => CH0_PCSRSVDIN_M[13]) = (0:0:0, 0:0:0);
    (CH0_PCSRSVDIN[14] => CH0_PCSRSVDIN_M[14]) = (0:0:0, 0:0:0);
    (CH0_PCSRSVDIN[15] => CH0_PCSRSVDIN_M[15]) = (0:0:0, 0:0:0);
    (CH0_PCSRSVDIN[1] => CH0_PCSRSVDIN_M[1]) = (0:0:0, 0:0:0);
    (CH0_PCSRSVDIN[2] => CH0_PCSRSVDIN_M[2]) = (0:0:0, 0:0:0);
    (CH0_PCSRSVDIN[3] => CH0_PCSRSVDIN_M[3]) = (0:0:0, 0:0:0);
    (CH0_PCSRSVDIN[4] => CH0_PCSRSVDIN_M[4]) = (0:0:0, 0:0:0);
    (CH0_PCSRSVDIN[5] => CH0_PCSRSVDIN_M[5]) = (0:0:0, 0:0:0);
    (CH0_PCSRSVDIN[6] => CH0_PCSRSVDIN_M[6]) = (0:0:0, 0:0:0);
    (CH0_PCSRSVDIN[7] => CH0_PCSRSVDIN_M[7]) = (0:0:0, 0:0:0);
    (CH0_PCSRSVDIN[8] => CH0_PCSRSVDIN_M[8]) = (0:0:0, 0:0:0);
    (CH0_PCSRSVDIN[9] => CH0_PCSRSVDIN_M[9]) = (0:0:0, 0:0:0);
    (CH0_PCSRSVDOUT_M[0] => CH0_PCSRSVDOUT[0]) = (0:0:0, 0:0:0);
    (CH0_PCSRSVDOUT_M[10] => CH0_PCSRSVDOUT[10]) = (0:0:0, 0:0:0);
    (CH0_PCSRSVDOUT_M[11] => CH0_PCSRSVDOUT[11]) = (0:0:0, 0:0:0);
    (CH0_PCSRSVDOUT_M[12] => CH0_PCSRSVDOUT[12]) = (0:0:0, 0:0:0);
    (CH0_PCSRSVDOUT_M[13] => CH0_PCSRSVDOUT[13]) = (0:0:0, 0:0:0);
    (CH0_PCSRSVDOUT_M[14] => CH0_PCSRSVDOUT[14]) = (0:0:0, 0:0:0);
    (CH0_PCSRSVDOUT_M[15] => CH0_PCSRSVDOUT[15]) = (0:0:0, 0:0:0);
    (CH0_PCSRSVDOUT_M[1] => CH0_PCSRSVDOUT[1]) = (0:0:0, 0:0:0);
    (CH0_PCSRSVDOUT_M[2] => CH0_PCSRSVDOUT[2]) = (0:0:0, 0:0:0);
    (CH0_PCSRSVDOUT_M[3] => CH0_PCSRSVDOUT[3]) = (0:0:0, 0:0:0);
    (CH0_PCSRSVDOUT_M[4] => CH0_PCSRSVDOUT[4]) = (0:0:0, 0:0:0);
    (CH0_PCSRSVDOUT_M[5] => CH0_PCSRSVDOUT[5]) = (0:0:0, 0:0:0);
    (CH0_PCSRSVDOUT_M[6] => CH0_PCSRSVDOUT[6]) = (0:0:0, 0:0:0);
    (CH0_PCSRSVDOUT_M[7] => CH0_PCSRSVDOUT[7]) = (0:0:0, 0:0:0);
    (CH0_PCSRSVDOUT_M[8] => CH0_PCSRSVDOUT[8]) = (0:0:0, 0:0:0);
    (CH0_PCSRSVDOUT_M[9] => CH0_PCSRSVDOUT[9]) = (0:0:0, 0:0:0);
    (CH0_PHYESMADAPTSAVE => CH0_PHYESMADAPTSAVE_M) = (0:0:0, 0:0:0);
    (CH0_PHYREADY_M => CH0_PHYREADY) = (0:0:0, 0:0:0);
    (CH0_PHYSTATUS_M => CH0_PHYSTATUS) = (0:0:0, 0:0:0);
    (CH0_PINRSVDAS_M[0] => CH0_PINRSVDAS[0]) = (0:0:0, 0:0:0);
    (CH0_PINRSVDAS_M[10] => CH0_PINRSVDAS[10]) = (0:0:0, 0:0:0);
    (CH0_PINRSVDAS_M[11] => CH0_PINRSVDAS[11]) = (0:0:0, 0:0:0);
    (CH0_PINRSVDAS_M[12] => CH0_PINRSVDAS[12]) = (0:0:0, 0:0:0);
    (CH0_PINRSVDAS_M[13] => CH0_PINRSVDAS[13]) = (0:0:0, 0:0:0);
    (CH0_PINRSVDAS_M[14] => CH0_PINRSVDAS[14]) = (0:0:0, 0:0:0);
    (CH0_PINRSVDAS_M[15] => CH0_PINRSVDAS[15]) = (0:0:0, 0:0:0);
    (CH0_PINRSVDAS_M[1] => CH0_PINRSVDAS[1]) = (0:0:0, 0:0:0);
    (CH0_PINRSVDAS_M[2] => CH0_PINRSVDAS[2]) = (0:0:0, 0:0:0);
    (CH0_PINRSVDAS_M[3] => CH0_PINRSVDAS[3]) = (0:0:0, 0:0:0);
    (CH0_PINRSVDAS_M[4] => CH0_PINRSVDAS[4]) = (0:0:0, 0:0:0);
    (CH0_PINRSVDAS_M[5] => CH0_PINRSVDAS[5]) = (0:0:0, 0:0:0);
    (CH0_PINRSVDAS_M[6] => CH0_PINRSVDAS[6]) = (0:0:0, 0:0:0);
    (CH0_PINRSVDAS_M[7] => CH0_PINRSVDAS[7]) = (0:0:0, 0:0:0);
    (CH0_PINRSVDAS_M[8] => CH0_PINRSVDAS[8]) = (0:0:0, 0:0:0);
    (CH0_PINRSVDAS_M[9] => CH0_PINRSVDAS[9]) = (0:0:0, 0:0:0);
    (CH0_RX10GSTAT_M[0] => CH0_RX10GSTAT[0]) = (0:0:0, 0:0:0);
    (CH0_RX10GSTAT_M[1] => CH0_RX10GSTAT[1]) = (0:0:0, 0:0:0);
    (CH0_RX10GSTAT_M[2] => CH0_RX10GSTAT[2]) = (0:0:0, 0:0:0);
    (CH0_RX10GSTAT_M[3] => CH0_RX10GSTAT[3]) = (0:0:0, 0:0:0);
    (CH0_RX10GSTAT_M[4] => CH0_RX10GSTAT[4]) = (0:0:0, 0:0:0);
    (CH0_RX10GSTAT_M[5] => CH0_RX10GSTAT[5]) = (0:0:0, 0:0:0);
    (CH0_RX10GSTAT_M[6] => CH0_RX10GSTAT[6]) = (0:0:0, 0:0:0);
    (CH0_RX10GSTAT_M[7] => CH0_RX10GSTAT[7]) = (0:0:0, 0:0:0);
    (CH0_RXBUFSTATUS_M[0] => CH0_RXBUFSTATUS[0]) = (0:0:0, 0:0:0);
    (CH0_RXBUFSTATUS_M[1] => CH0_RXBUFSTATUS[1]) = (0:0:0, 0:0:0);
    (CH0_RXBUFSTATUS_M[2] => CH0_RXBUFSTATUS[2]) = (0:0:0, 0:0:0);
    (CH0_RXBYTEISALIGNED_M => CH0_RXBYTEISALIGNED) = (0:0:0, 0:0:0);
    (CH0_RXBYTEREALIGN_M => CH0_RXBYTEREALIGN) = (0:0:0, 0:0:0);
    (CH0_RXCDRHOLD => CH0_RXCDRHOLD_M) = (0:0:0, 0:0:0);
    (CH0_RXCDRLOCK_M => CH0_RXCDRLOCK) = (0:0:0, 0:0:0);
    (CH0_RXCDROVRDEN => CH0_RXCDROVRDEN_M) = (0:0:0, 0:0:0);
    (CH0_RXCDRPHDONE_M => CH0_RXCDRPHDONE) = (0:0:0, 0:0:0);
    (CH0_RXCHANBONDSEQ_M => CH0_RXCHANBONDSEQ) = (0:0:0, 0:0:0);
    (CH0_RXCHANISALIGNED_M => CH0_RXCHANISALIGNED) = (0:0:0, 0:0:0);
    (CH0_RXCHANREALIGN_M => CH0_RXCHANREALIGN) = (0:0:0, 0:0:0);
    (CH0_RXCHBONDI[0] => CH0_RXCHBONDI_M[0]) = (0:0:0, 0:0:0);
    (CH0_RXCHBONDI[1] => CH0_RXCHBONDI_M[1]) = (0:0:0, 0:0:0);
    (CH0_RXCHBONDI[2] => CH0_RXCHBONDI_M[2]) = (0:0:0, 0:0:0);
    (CH0_RXCHBONDI[3] => CH0_RXCHBONDI_M[3]) = (0:0:0, 0:0:0);
    (CH0_RXCHBONDI[4] => CH0_RXCHBONDI_M[4]) = (0:0:0, 0:0:0);
    (CH0_RXCHBONDO_M[0] => CH0_RXCHBONDO[0]) = (0:0:0, 0:0:0);
    (CH0_RXCHBONDO_M[1] => CH0_RXCHBONDO[1]) = (0:0:0, 0:0:0);
    (CH0_RXCHBONDO_M[2] => CH0_RXCHBONDO[2]) = (0:0:0, 0:0:0);
    (CH0_RXCHBONDO_M[3] => CH0_RXCHBONDO[3]) = (0:0:0, 0:0:0);
    (CH0_RXCHBONDO_M[4] => CH0_RXCHBONDO[4]) = (0:0:0, 0:0:0);
    (CH0_RXCLKCORCNT_M[0] => CH0_RXCLKCORCNT[0]) = (0:0:0, 0:0:0);
    (CH0_RXCLKCORCNT_M[1] => CH0_RXCLKCORCNT[1]) = (0:0:0, 0:0:0);
    (CH0_RXCOMINITDET_M => CH0_RXCOMINITDET) = (0:0:0, 0:0:0);
    (CH0_RXCOMMADET_M => CH0_RXCOMMADET) = (0:0:0, 0:0:0);
    (CH0_RXCOMSASDET_M => CH0_RXCOMSASDET) = (0:0:0, 0:0:0);
    (CH0_RXCOMWAKEDET_M => CH0_RXCOMWAKEDET) = (0:0:0, 0:0:0);
    (CH0_RXCTRL0_M[0] => CH0_RXCTRL0[0]) = (0:0:0, 0:0:0);
    (CH0_RXCTRL0_M[10] => CH0_RXCTRL0[10]) = (0:0:0, 0:0:0);
    (CH0_RXCTRL0_M[11] => CH0_RXCTRL0[11]) = (0:0:0, 0:0:0);
    (CH0_RXCTRL0_M[12] => CH0_RXCTRL0[12]) = (0:0:0, 0:0:0);
    (CH0_RXCTRL0_M[13] => CH0_RXCTRL0[13]) = (0:0:0, 0:0:0);
    (CH0_RXCTRL0_M[14] => CH0_RXCTRL0[14]) = (0:0:0, 0:0:0);
    (CH0_RXCTRL0_M[15] => CH0_RXCTRL0[15]) = (0:0:0, 0:0:0);
    (CH0_RXCTRL0_M[1] => CH0_RXCTRL0[1]) = (0:0:0, 0:0:0);
    (CH0_RXCTRL0_M[2] => CH0_RXCTRL0[2]) = (0:0:0, 0:0:0);
    (CH0_RXCTRL0_M[3] => CH0_RXCTRL0[3]) = (0:0:0, 0:0:0);
    (CH0_RXCTRL0_M[4] => CH0_RXCTRL0[4]) = (0:0:0, 0:0:0);
    (CH0_RXCTRL0_M[5] => CH0_RXCTRL0[5]) = (0:0:0, 0:0:0);
    (CH0_RXCTRL0_M[6] => CH0_RXCTRL0[6]) = (0:0:0, 0:0:0);
    (CH0_RXCTRL0_M[7] => CH0_RXCTRL0[7]) = (0:0:0, 0:0:0);
    (CH0_RXCTRL0_M[8] => CH0_RXCTRL0[8]) = (0:0:0, 0:0:0);
    (CH0_RXCTRL0_M[9] => CH0_RXCTRL0[9]) = (0:0:0, 0:0:0);
    (CH0_RXCTRL1_M[0] => CH0_RXCTRL1[0]) = (0:0:0, 0:0:0);
    (CH0_RXCTRL1_M[10] => CH0_RXCTRL1[10]) = (0:0:0, 0:0:0);
    (CH0_RXCTRL1_M[11] => CH0_RXCTRL1[11]) = (0:0:0, 0:0:0);
    (CH0_RXCTRL1_M[12] => CH0_RXCTRL1[12]) = (0:0:0, 0:0:0);
    (CH0_RXCTRL1_M[13] => CH0_RXCTRL1[13]) = (0:0:0, 0:0:0);
    (CH0_RXCTRL1_M[14] => CH0_RXCTRL1[14]) = (0:0:0, 0:0:0);
    (CH0_RXCTRL1_M[15] => CH0_RXCTRL1[15]) = (0:0:0, 0:0:0);
    (CH0_RXCTRL1_M[1] => CH0_RXCTRL1[1]) = (0:0:0, 0:0:0);
    (CH0_RXCTRL1_M[2] => CH0_RXCTRL1[2]) = (0:0:0, 0:0:0);
    (CH0_RXCTRL1_M[3] => CH0_RXCTRL1[3]) = (0:0:0, 0:0:0);
    (CH0_RXCTRL1_M[4] => CH0_RXCTRL1[4]) = (0:0:0, 0:0:0);
    (CH0_RXCTRL1_M[5] => CH0_RXCTRL1[5]) = (0:0:0, 0:0:0);
    (CH0_RXCTRL1_M[6] => CH0_RXCTRL1[6]) = (0:0:0, 0:0:0);
    (CH0_RXCTRL1_M[7] => CH0_RXCTRL1[7]) = (0:0:0, 0:0:0);
    (CH0_RXCTRL1_M[8] => CH0_RXCTRL1[8]) = (0:0:0, 0:0:0);
    (CH0_RXCTRL1_M[9] => CH0_RXCTRL1[9]) = (0:0:0, 0:0:0);
    (CH0_RXCTRL2_M[0] => CH0_RXCTRL2[0]) = (0:0:0, 0:0:0);
    (CH0_RXCTRL2_M[1] => CH0_RXCTRL2[1]) = (0:0:0, 0:0:0);
    (CH0_RXCTRL2_M[2] => CH0_RXCTRL2[2]) = (0:0:0, 0:0:0);
    (CH0_RXCTRL2_M[3] => CH0_RXCTRL2[3]) = (0:0:0, 0:0:0);
    (CH0_RXCTRL2_M[4] => CH0_RXCTRL2[4]) = (0:0:0, 0:0:0);
    (CH0_RXCTRL2_M[5] => CH0_RXCTRL2[5]) = (0:0:0, 0:0:0);
    (CH0_RXCTRL2_M[6] => CH0_RXCTRL2[6]) = (0:0:0, 0:0:0);
    (CH0_RXCTRL2_M[7] => CH0_RXCTRL2[7]) = (0:0:0, 0:0:0);
    (CH0_RXCTRL3_M[0] => CH0_RXCTRL3[0]) = (0:0:0, 0:0:0);
    (CH0_RXCTRL3_M[1] => CH0_RXCTRL3[1]) = (0:0:0, 0:0:0);
    (CH0_RXCTRL3_M[2] => CH0_RXCTRL3[2]) = (0:0:0, 0:0:0);
    (CH0_RXCTRL3_M[3] => CH0_RXCTRL3[3]) = (0:0:0, 0:0:0);
    (CH0_RXCTRL3_M[4] => CH0_RXCTRL3[4]) = (0:0:0, 0:0:0);
    (CH0_RXCTRL3_M[5] => CH0_RXCTRL3[5]) = (0:0:0, 0:0:0);
    (CH0_RXCTRL3_M[6] => CH0_RXCTRL3[6]) = (0:0:0, 0:0:0);
    (CH0_RXCTRL3_M[7] => CH0_RXCTRL3[7]) = (0:0:0, 0:0:0);
    (CH0_RXDAPICODEOVRDEN => CH0_RXDAPICODEOVRDEN_M) = (0:0:0, 0:0:0);
    (CH0_RXDATAEXTENDRSVD_M[0] => CH0_RXDATAEXTENDRSVD[0]) = (0:0:0, 0:0:0);
    (CH0_RXDATAEXTENDRSVD_M[1] => CH0_RXDATAEXTENDRSVD[1]) = (0:0:0, 0:0:0);
    (CH0_RXDATAEXTENDRSVD_M[2] => CH0_RXDATAEXTENDRSVD[2]) = (0:0:0, 0:0:0);
    (CH0_RXDATAEXTENDRSVD_M[3] => CH0_RXDATAEXTENDRSVD[3]) = (0:0:0, 0:0:0);
    (CH0_RXDATAEXTENDRSVD_M[4] => CH0_RXDATAEXTENDRSVD[4]) = (0:0:0, 0:0:0);
    (CH0_RXDATAEXTENDRSVD_M[5] => CH0_RXDATAEXTENDRSVD[5]) = (0:0:0, 0:0:0);
    (CH0_RXDATAEXTENDRSVD_M[6] => CH0_RXDATAEXTENDRSVD[6]) = (0:0:0, 0:0:0);
    (CH0_RXDATAEXTENDRSVD_M[7] => CH0_RXDATAEXTENDRSVD[7]) = (0:0:0, 0:0:0);
    (CH0_RXDATAVALID_M[0] => CH0_RXDATAVALID[0]) = (0:0:0, 0:0:0);
    (CH0_RXDATAVALID_M[1] => CH0_RXDATAVALID[1]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[0] => CH0_RXDATA[0]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[100] => CH0_RXDATA[100]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[101] => CH0_RXDATA[101]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[102] => CH0_RXDATA[102]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[103] => CH0_RXDATA[103]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[104] => CH0_RXDATA[104]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[105] => CH0_RXDATA[105]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[106] => CH0_RXDATA[106]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[107] => CH0_RXDATA[107]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[108] => CH0_RXDATA[108]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[109] => CH0_RXDATA[109]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[10] => CH0_RXDATA[10]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[110] => CH0_RXDATA[110]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[111] => CH0_RXDATA[111]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[112] => CH0_RXDATA[112]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[113] => CH0_RXDATA[113]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[114] => CH0_RXDATA[114]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[115] => CH0_RXDATA[115]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[116] => CH0_RXDATA[116]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[117] => CH0_RXDATA[117]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[118] => CH0_RXDATA[118]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[119] => CH0_RXDATA[119]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[11] => CH0_RXDATA[11]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[120] => CH0_RXDATA[120]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[121] => CH0_RXDATA[121]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[122] => CH0_RXDATA[122]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[123] => CH0_RXDATA[123]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[124] => CH0_RXDATA[124]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[125] => CH0_RXDATA[125]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[126] => CH0_RXDATA[126]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[127] => CH0_RXDATA[127]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[12] => CH0_RXDATA[12]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[13] => CH0_RXDATA[13]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[14] => CH0_RXDATA[14]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[15] => CH0_RXDATA[15]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[16] => CH0_RXDATA[16]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[17] => CH0_RXDATA[17]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[18] => CH0_RXDATA[18]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[19] => CH0_RXDATA[19]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[1] => CH0_RXDATA[1]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[20] => CH0_RXDATA[20]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[21] => CH0_RXDATA[21]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[22] => CH0_RXDATA[22]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[23] => CH0_RXDATA[23]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[24] => CH0_RXDATA[24]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[25] => CH0_RXDATA[25]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[26] => CH0_RXDATA[26]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[27] => CH0_RXDATA[27]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[28] => CH0_RXDATA[28]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[29] => CH0_RXDATA[29]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[2] => CH0_RXDATA[2]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[30] => CH0_RXDATA[30]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[31] => CH0_RXDATA[31]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[32] => CH0_RXDATA[32]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[33] => CH0_RXDATA[33]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[34] => CH0_RXDATA[34]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[35] => CH0_RXDATA[35]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[36] => CH0_RXDATA[36]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[37] => CH0_RXDATA[37]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[38] => CH0_RXDATA[38]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[39] => CH0_RXDATA[39]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[3] => CH0_RXDATA[3]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[40] => CH0_RXDATA[40]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[41] => CH0_RXDATA[41]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[42] => CH0_RXDATA[42]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[43] => CH0_RXDATA[43]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[44] => CH0_RXDATA[44]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[45] => CH0_RXDATA[45]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[46] => CH0_RXDATA[46]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[47] => CH0_RXDATA[47]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[48] => CH0_RXDATA[48]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[49] => CH0_RXDATA[49]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[4] => CH0_RXDATA[4]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[50] => CH0_RXDATA[50]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[51] => CH0_RXDATA[51]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[52] => CH0_RXDATA[52]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[53] => CH0_RXDATA[53]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[54] => CH0_RXDATA[54]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[55] => CH0_RXDATA[55]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[56] => CH0_RXDATA[56]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[57] => CH0_RXDATA[57]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[58] => CH0_RXDATA[58]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[59] => CH0_RXDATA[59]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[5] => CH0_RXDATA[5]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[60] => CH0_RXDATA[60]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[61] => CH0_RXDATA[61]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[62] => CH0_RXDATA[62]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[63] => CH0_RXDATA[63]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[64] => CH0_RXDATA[64]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[65] => CH0_RXDATA[65]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[66] => CH0_RXDATA[66]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[67] => CH0_RXDATA[67]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[68] => CH0_RXDATA[68]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[69] => CH0_RXDATA[69]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[6] => CH0_RXDATA[6]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[70] => CH0_RXDATA[70]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[71] => CH0_RXDATA[71]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[72] => CH0_RXDATA[72]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[73] => CH0_RXDATA[73]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[74] => CH0_RXDATA[74]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[75] => CH0_RXDATA[75]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[76] => CH0_RXDATA[76]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[77] => CH0_RXDATA[77]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[78] => CH0_RXDATA[78]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[79] => CH0_RXDATA[79]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[7] => CH0_RXDATA[7]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[80] => CH0_RXDATA[80]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[81] => CH0_RXDATA[81]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[82] => CH0_RXDATA[82]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[83] => CH0_RXDATA[83]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[84] => CH0_RXDATA[84]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[85] => CH0_RXDATA[85]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[86] => CH0_RXDATA[86]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[87] => CH0_RXDATA[87]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[88] => CH0_RXDATA[88]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[89] => CH0_RXDATA[89]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[8] => CH0_RXDATA[8]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[90] => CH0_RXDATA[90]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[91] => CH0_RXDATA[91]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[92] => CH0_RXDATA[92]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[93] => CH0_RXDATA[93]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[94] => CH0_RXDATA[94]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[95] => CH0_RXDATA[95]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[96] => CH0_RXDATA[96]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[97] => CH0_RXDATA[97]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[98] => CH0_RXDATA[98]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[99] => CH0_RXDATA[99]) = (0:0:0, 0:0:0);
    (CH0_RXDATA_M[9] => CH0_RXDATA[9]) = (0:0:0, 0:0:0);
    (CH0_RXDCCDONE_M => CH0_RXDCCDONE) = (0:0:0, 0:0:0);
    (CH0_RXDLYALIGNERR_M => CH0_RXDLYALIGNERR) = (0:0:0, 0:0:0);
    (CH0_RXDLYALIGNPROG_M => CH0_RXDLYALIGNPROG) = (0:0:0, 0:0:0);
    (CH0_RXDLYALIGNREQ => CH0_RXDLYALIGNREQ_M) = (0:0:0, 0:0:0);
    (CH0_RXELECIDLE_M => CH0_RXELECIDLE) = (0:0:0, 0:0:0);
    (CH0_RXEQTRAINING => CH0_RXEQTRAINING_M) = (0:0:0, 0:0:0);
    (CH0_RXFINEALIGNDONE_M => CH0_RXFINEALIGNDONE) = (0:0:0, 0:0:0);
    (CH0_RXGEARBOXSLIP => CH0_RXGEARBOXSLIP_M) = (0:0:0, 0:0:0);
    (CH0_RXHEADERVALID_M[0] => CH0_RXHEADERVALID[0]) = (0:0:0, 0:0:0);
    (CH0_RXHEADERVALID_M[1] => CH0_RXHEADERVALID[1]) = (0:0:0, 0:0:0);
    (CH0_RXHEADER_M[0] => CH0_RXHEADER[0]) = (0:0:0, 0:0:0);
    (CH0_RXHEADER_M[1] => CH0_RXHEADER[1]) = (0:0:0, 0:0:0);
    (CH0_RXHEADER_M[2] => CH0_RXHEADER[2]) = (0:0:0, 0:0:0);
    (CH0_RXHEADER_M[3] => CH0_RXHEADER[3]) = (0:0:0, 0:0:0);
    (CH0_RXHEADER_M[4] => CH0_RXHEADER[4]) = (0:0:0, 0:0:0);
    (CH0_RXHEADER_M[5] => CH0_RXHEADER[5]) = (0:0:0, 0:0:0);
    (CH0_RXLATCLK => CH0_RXLATCLK_M) = (0:0:0, 0:0:0);
    (CH0_RXLPMEN => CH0_RXLPMEN_M) = (0:0:0, 0:0:0);
    (CH0_RXMLDCHAINDONE => CH0_RXMLDCHAINDONE_M) = (0:0:0, 0:0:0);
    (CH0_RXMLDCHAINREQ => CH0_RXMLDCHAINREQ_M) = (0:0:0, 0:0:0);
    (CH0_RXMLFINEALIGNREQ => CH0_RXMLFINEALIGNREQ_M) = (0:0:0, 0:0:0);
    (CH0_RXOSINTDONE_M => CH0_RXOSINTDONE) = (0:0:0, 0:0:0);
    (CH0_RXOSINTSTARTED_M => CH0_RXOSINTSTARTED) = (0:0:0, 0:0:0);
    (CH0_RXOSINTSTROBEDONE_M => CH0_RXOSINTSTROBEDONE) = (0:0:0, 0:0:0);
    (CH0_RXOSINTSTROBESTARTED_M => CH0_RXOSINTSTROBESTARTED) = (0:0:0, 0:0:0);
    (CH0_RXPD[0] => CH0_RXPD_M[0]) = (0:0:0, 0:0:0);
    (CH0_RXPD[1] => CH0_RXPD_M[1]) = (0:0:0, 0:0:0);
    (CH0_RXPHALIGNDONE_M => CH0_RXPHALIGNDONE) = (0:0:0, 0:0:0);
    (CH0_RXPHALIGNERR_M => CH0_RXPHALIGNERR) = (0:0:0, 0:0:0);
    (CH0_RXPHALIGNREQ => CH0_RXPHALIGNREQ_M) = (0:0:0, 0:0:0);
    (CH0_RXPHDLYPD => CH0_RXPHDLYPD_M) = (0:0:0, 0:0:0);
    (CH0_RXPHSHIFT180 => CH0_RXPHSHIFT180_M) = (0:0:0, 0:0:0);
    (CH0_RXPHSHIFT180DONE_M => CH0_RXPHSHIFT180DONE) = (0:0:0, 0:0:0);
    (CH0_RXPOLARITY => CH0_RXPOLARITY_M) = (0:0:0, 0:0:0);
    (CH0_RXPRBSERR_M => CH0_RXPRBSERR) = (0:0:0, 0:0:0);
    (CH0_RXPRBSLOCKED_M => CH0_RXPRBSLOCKED) = (0:0:0, 0:0:0);
    (CH0_RXPRBSSEL[0] => CH0_RXPRBSSEL_M[0]) = (0:0:0, 0:0:0);
    (CH0_RXPRBSSEL[1] => CH0_RXPRBSSEL_M[1]) = (0:0:0, 0:0:0);
    (CH0_RXPRBSSEL[2] => CH0_RXPRBSSEL_M[2]) = (0:0:0, 0:0:0);
    (CH0_RXPRBSSEL[3] => CH0_RXPRBSSEL_M[3]) = (0:0:0, 0:0:0);
    (CH0_RXRATE[0] => CH0_RXRATE_M[0]) = (0:0:0, 0:0:0);
    (CH0_RXRATE[1] => CH0_RXRATE_M[1]) = (0:0:0, 0:0:0);
    (CH0_RXRATE[2] => CH0_RXRATE_M[2]) = (0:0:0, 0:0:0);
    (CH0_RXRATE[3] => CH0_RXRATE_M[3]) = (0:0:0, 0:0:0);
    (CH0_RXRATE[4] => CH0_RXRATE_M[4]) = (0:0:0, 0:0:0);
    (CH0_RXRATE[5] => CH0_RXRATE_M[5]) = (0:0:0, 0:0:0);
    (CH0_RXRATE[6] => CH0_RXRATE_M[6]) = (0:0:0, 0:0:0);
    (CH0_RXRATE[7] => CH0_RXRATE_M[7]) = (0:0:0, 0:0:0);
    (CH0_RXSLIDE => CH0_RXSLIDE_M) = (0:0:0, 0:0:0);
    (CH0_RXSLIDERDY_M => CH0_RXSLIDERDY) = (0:0:0, 0:0:0);
    (CH0_RXSTARTOFSEQ_M[0] => CH0_RXSTARTOFSEQ[0]) = (0:0:0, 0:0:0);
    (CH0_RXSTARTOFSEQ_M[1] => CH0_RXSTARTOFSEQ[1]) = (0:0:0, 0:0:0);
    (CH0_RXSTATUS_M[0] => CH0_RXSTATUS[0]) = (0:0:0, 0:0:0);
    (CH0_RXSTATUS_M[1] => CH0_RXSTATUS[1]) = (0:0:0, 0:0:0);
    (CH0_RXSTATUS_M[2] => CH0_RXSTATUS[2]) = (0:0:0, 0:0:0);
    (CH0_RXSYNCALLIN => CH0_RXSYNCALLIN_M) = (0:0:0, 0:0:0);
    (CH0_RXSYNCDONE_M => CH0_RXSYNCDONE) = (0:0:0, 0:0:0);
    (CH0_RXTERMINATION => CH0_RXTERMINATION_M) = (0:0:0, 0:0:0);
    (CH0_RXUSERRDY => CH0_RXUSERRDY_M) = (0:0:0, 0:0:0);
    (CH0_RXUSRCLK => CH0_RXUSRCLK_M) = (0:0:0, 0:0:0);
    (CH0_RXVALID_M => CH0_RXVALID) = (0:0:0, 0:0:0);
    (CH0_TSTCLK0 => CH0_TSTCLK0_M) = (0:0:0, 0:0:0);
    (CH0_TSTCLK1 => CH0_TSTCLK1_M) = (0:0:0, 0:0:0);
    (CH0_TSTIN[0] => CH0_TSTIN_M[0]) = (0:0:0, 0:0:0);
    (CH0_TSTIN[10] => CH0_TSTIN_M[10]) = (0:0:0, 0:0:0);
    (CH0_TSTIN[11] => CH0_TSTIN_M[11]) = (0:0:0, 0:0:0);
    (CH0_TSTIN[12] => CH0_TSTIN_M[12]) = (0:0:0, 0:0:0);
    (CH0_TSTIN[13] => CH0_TSTIN_M[13]) = (0:0:0, 0:0:0);
    (CH0_TSTIN[14] => CH0_TSTIN_M[14]) = (0:0:0, 0:0:0);
    (CH0_TSTIN[15] => CH0_TSTIN_M[15]) = (0:0:0, 0:0:0);
    (CH0_TSTIN[16] => CH0_TSTIN_M[16]) = (0:0:0, 0:0:0);
    (CH0_TSTIN[17] => CH0_TSTIN_M[17]) = (0:0:0, 0:0:0);
    (CH0_TSTIN[18] => CH0_TSTIN_M[18]) = (0:0:0, 0:0:0);
    (CH0_TSTIN[19] => CH0_TSTIN_M[19]) = (0:0:0, 0:0:0);
    (CH0_TSTIN[1] => CH0_TSTIN_M[1]) = (0:0:0, 0:0:0);
    (CH0_TSTIN[2] => CH0_TSTIN_M[2]) = (0:0:0, 0:0:0);
    (CH0_TSTIN[3] => CH0_TSTIN_M[3]) = (0:0:0, 0:0:0);
    (CH0_TSTIN[4] => CH0_TSTIN_M[4]) = (0:0:0, 0:0:0);
    (CH0_TSTIN[5] => CH0_TSTIN_M[5]) = (0:0:0, 0:0:0);
    (CH0_TSTIN[6] => CH0_TSTIN_M[6]) = (0:0:0, 0:0:0);
    (CH0_TSTIN[7] => CH0_TSTIN_M[7]) = (0:0:0, 0:0:0);
    (CH0_TSTIN[8] => CH0_TSTIN_M[8]) = (0:0:0, 0:0:0);
    (CH0_TSTIN[9] => CH0_TSTIN_M[9]) = (0:0:0, 0:0:0);
    (CH0_TX10GSTAT_M => CH0_TX10GSTAT) = (0:0:0, 0:0:0);
    (CH0_TXBUFSTATUS_M[0] => CH0_TXBUFSTATUS[0]) = (0:0:0, 0:0:0);
    (CH0_TXBUFSTATUS_M[1] => CH0_TXBUFSTATUS[1]) = (0:0:0, 0:0:0);
    (CH0_TXCOMFINISH_M => CH0_TXCOMFINISH) = (0:0:0, 0:0:0);
    (CH0_TXCOMINIT => CH0_TXCOMINIT_M) = (0:0:0, 0:0:0);
    (CH0_TXCOMSAS => CH0_TXCOMSAS_M) = (0:0:0, 0:0:0);
    (CH0_TXCOMWAKE => CH0_TXCOMWAKE_M) = (0:0:0, 0:0:0);
    (CH0_TXCTRL0[0] => CH0_TXCTRL0_M[0]) = (0:0:0, 0:0:0);
    (CH0_TXCTRL0[10] => CH0_TXCTRL0_M[10]) = (0:0:0, 0:0:0);
    (CH0_TXCTRL0[11] => CH0_TXCTRL0_M[11]) = (0:0:0, 0:0:0);
    (CH0_TXCTRL0[12] => CH0_TXCTRL0_M[12]) = (0:0:0, 0:0:0);
    (CH0_TXCTRL0[13] => CH0_TXCTRL0_M[13]) = (0:0:0, 0:0:0);
    (CH0_TXCTRL0[14] => CH0_TXCTRL0_M[14]) = (0:0:0, 0:0:0);
    (CH0_TXCTRL0[15] => CH0_TXCTRL0_M[15]) = (0:0:0, 0:0:0);
    (CH0_TXCTRL0[1] => CH0_TXCTRL0_M[1]) = (0:0:0, 0:0:0);
    (CH0_TXCTRL0[2] => CH0_TXCTRL0_M[2]) = (0:0:0, 0:0:0);
    (CH0_TXCTRL0[3] => CH0_TXCTRL0_M[3]) = (0:0:0, 0:0:0);
    (CH0_TXCTRL0[4] => CH0_TXCTRL0_M[4]) = (0:0:0, 0:0:0);
    (CH0_TXCTRL0[5] => CH0_TXCTRL0_M[5]) = (0:0:0, 0:0:0);
    (CH0_TXCTRL0[6] => CH0_TXCTRL0_M[6]) = (0:0:0, 0:0:0);
    (CH0_TXCTRL0[7] => CH0_TXCTRL0_M[7]) = (0:0:0, 0:0:0);
    (CH0_TXCTRL0[8] => CH0_TXCTRL0_M[8]) = (0:0:0, 0:0:0);
    (CH0_TXCTRL0[9] => CH0_TXCTRL0_M[9]) = (0:0:0, 0:0:0);
    (CH0_TXCTRL1[0] => CH0_TXCTRL1_M[0]) = (0:0:0, 0:0:0);
    (CH0_TXCTRL1[10] => CH0_TXCTRL1_M[10]) = (0:0:0, 0:0:0);
    (CH0_TXCTRL1[11] => CH0_TXCTRL1_M[11]) = (0:0:0, 0:0:0);
    (CH0_TXCTRL1[12] => CH0_TXCTRL1_M[12]) = (0:0:0, 0:0:0);
    (CH0_TXCTRL1[13] => CH0_TXCTRL1_M[13]) = (0:0:0, 0:0:0);
    (CH0_TXCTRL1[14] => CH0_TXCTRL1_M[14]) = (0:0:0, 0:0:0);
    (CH0_TXCTRL1[15] => CH0_TXCTRL1_M[15]) = (0:0:0, 0:0:0);
    (CH0_TXCTRL1[1] => CH0_TXCTRL1_M[1]) = (0:0:0, 0:0:0);
    (CH0_TXCTRL1[2] => CH0_TXCTRL1_M[2]) = (0:0:0, 0:0:0);
    (CH0_TXCTRL1[3] => CH0_TXCTRL1_M[3]) = (0:0:0, 0:0:0);
    (CH0_TXCTRL1[4] => CH0_TXCTRL1_M[4]) = (0:0:0, 0:0:0);
    (CH0_TXCTRL1[5] => CH0_TXCTRL1_M[5]) = (0:0:0, 0:0:0);
    (CH0_TXCTRL1[6] => CH0_TXCTRL1_M[6]) = (0:0:0, 0:0:0);
    (CH0_TXCTRL1[7] => CH0_TXCTRL1_M[7]) = (0:0:0, 0:0:0);
    (CH0_TXCTRL1[8] => CH0_TXCTRL1_M[8]) = (0:0:0, 0:0:0);
    (CH0_TXCTRL1[9] => CH0_TXCTRL1_M[9]) = (0:0:0, 0:0:0);
    (CH0_TXCTRL2[0] => CH0_TXCTRL2_M[0]) = (0:0:0, 0:0:0);
    (CH0_TXCTRL2[1] => CH0_TXCTRL2_M[1]) = (0:0:0, 0:0:0);
    (CH0_TXCTRL2[2] => CH0_TXCTRL2_M[2]) = (0:0:0, 0:0:0);
    (CH0_TXCTRL2[3] => CH0_TXCTRL2_M[3]) = (0:0:0, 0:0:0);
    (CH0_TXCTRL2[4] => CH0_TXCTRL2_M[4]) = (0:0:0, 0:0:0);
    (CH0_TXCTRL2[5] => CH0_TXCTRL2_M[5]) = (0:0:0, 0:0:0);
    (CH0_TXCTRL2[6] => CH0_TXCTRL2_M[6]) = (0:0:0, 0:0:0);
    (CH0_TXCTRL2[7] => CH0_TXCTRL2_M[7]) = (0:0:0, 0:0:0);
    (CH0_TXDAPICODEOVRDEN => CH0_TXDAPICODEOVRDEN_M) = (0:0:0, 0:0:0);
    (CH0_TXDATAEXTENDRSVD[0] => CH0_TXDATAEXTENDRSVD_M[0]) = (0:0:0, 0:0:0);
    (CH0_TXDATAEXTENDRSVD[1] => CH0_TXDATAEXTENDRSVD_M[1]) = (0:0:0, 0:0:0);
    (CH0_TXDATAEXTENDRSVD[2] => CH0_TXDATAEXTENDRSVD_M[2]) = (0:0:0, 0:0:0);
    (CH0_TXDATAEXTENDRSVD[3] => CH0_TXDATAEXTENDRSVD_M[3]) = (0:0:0, 0:0:0);
    (CH0_TXDATAEXTENDRSVD[4] => CH0_TXDATAEXTENDRSVD_M[4]) = (0:0:0, 0:0:0);
    (CH0_TXDATAEXTENDRSVD[5] => CH0_TXDATAEXTENDRSVD_M[5]) = (0:0:0, 0:0:0);
    (CH0_TXDATAEXTENDRSVD[6] => CH0_TXDATAEXTENDRSVD_M[6]) = (0:0:0, 0:0:0);
    (CH0_TXDATAEXTENDRSVD[7] => CH0_TXDATAEXTENDRSVD_M[7]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[0] => CH0_TXDATA_M[0]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[100] => CH0_TXDATA_M[100]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[101] => CH0_TXDATA_M[101]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[102] => CH0_TXDATA_M[102]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[103] => CH0_TXDATA_M[103]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[104] => CH0_TXDATA_M[104]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[105] => CH0_TXDATA_M[105]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[106] => CH0_TXDATA_M[106]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[107] => CH0_TXDATA_M[107]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[108] => CH0_TXDATA_M[108]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[109] => CH0_TXDATA_M[109]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[10] => CH0_TXDATA_M[10]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[110] => CH0_TXDATA_M[110]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[111] => CH0_TXDATA_M[111]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[112] => CH0_TXDATA_M[112]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[113] => CH0_TXDATA_M[113]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[114] => CH0_TXDATA_M[114]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[115] => CH0_TXDATA_M[115]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[116] => CH0_TXDATA_M[116]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[117] => CH0_TXDATA_M[117]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[118] => CH0_TXDATA_M[118]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[119] => CH0_TXDATA_M[119]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[11] => CH0_TXDATA_M[11]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[120] => CH0_TXDATA_M[120]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[121] => CH0_TXDATA_M[121]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[122] => CH0_TXDATA_M[122]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[123] => CH0_TXDATA_M[123]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[124] => CH0_TXDATA_M[124]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[125] => CH0_TXDATA_M[125]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[126] => CH0_TXDATA_M[126]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[127] => CH0_TXDATA_M[127]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[12] => CH0_TXDATA_M[12]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[13] => CH0_TXDATA_M[13]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[14] => CH0_TXDATA_M[14]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[15] => CH0_TXDATA_M[15]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[16] => CH0_TXDATA_M[16]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[17] => CH0_TXDATA_M[17]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[18] => CH0_TXDATA_M[18]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[19] => CH0_TXDATA_M[19]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[1] => CH0_TXDATA_M[1]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[20] => CH0_TXDATA_M[20]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[21] => CH0_TXDATA_M[21]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[22] => CH0_TXDATA_M[22]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[23] => CH0_TXDATA_M[23]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[24] => CH0_TXDATA_M[24]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[25] => CH0_TXDATA_M[25]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[26] => CH0_TXDATA_M[26]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[27] => CH0_TXDATA_M[27]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[28] => CH0_TXDATA_M[28]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[29] => CH0_TXDATA_M[29]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[2] => CH0_TXDATA_M[2]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[30] => CH0_TXDATA_M[30]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[31] => CH0_TXDATA_M[31]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[32] => CH0_TXDATA_M[32]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[33] => CH0_TXDATA_M[33]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[34] => CH0_TXDATA_M[34]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[35] => CH0_TXDATA_M[35]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[36] => CH0_TXDATA_M[36]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[37] => CH0_TXDATA_M[37]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[38] => CH0_TXDATA_M[38]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[39] => CH0_TXDATA_M[39]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[3] => CH0_TXDATA_M[3]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[40] => CH0_TXDATA_M[40]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[41] => CH0_TXDATA_M[41]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[42] => CH0_TXDATA_M[42]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[43] => CH0_TXDATA_M[43]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[44] => CH0_TXDATA_M[44]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[45] => CH0_TXDATA_M[45]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[46] => CH0_TXDATA_M[46]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[47] => CH0_TXDATA_M[47]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[48] => CH0_TXDATA_M[48]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[49] => CH0_TXDATA_M[49]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[4] => CH0_TXDATA_M[4]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[50] => CH0_TXDATA_M[50]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[51] => CH0_TXDATA_M[51]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[52] => CH0_TXDATA_M[52]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[53] => CH0_TXDATA_M[53]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[54] => CH0_TXDATA_M[54]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[55] => CH0_TXDATA_M[55]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[56] => CH0_TXDATA_M[56]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[57] => CH0_TXDATA_M[57]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[58] => CH0_TXDATA_M[58]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[59] => CH0_TXDATA_M[59]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[5] => CH0_TXDATA_M[5]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[60] => CH0_TXDATA_M[60]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[61] => CH0_TXDATA_M[61]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[62] => CH0_TXDATA_M[62]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[63] => CH0_TXDATA_M[63]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[64] => CH0_TXDATA_M[64]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[65] => CH0_TXDATA_M[65]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[66] => CH0_TXDATA_M[66]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[67] => CH0_TXDATA_M[67]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[68] => CH0_TXDATA_M[68]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[69] => CH0_TXDATA_M[69]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[6] => CH0_TXDATA_M[6]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[70] => CH0_TXDATA_M[70]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[71] => CH0_TXDATA_M[71]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[72] => CH0_TXDATA_M[72]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[73] => CH0_TXDATA_M[73]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[74] => CH0_TXDATA_M[74]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[75] => CH0_TXDATA_M[75]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[76] => CH0_TXDATA_M[76]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[77] => CH0_TXDATA_M[77]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[78] => CH0_TXDATA_M[78]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[79] => CH0_TXDATA_M[79]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[7] => CH0_TXDATA_M[7]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[80] => CH0_TXDATA_M[80]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[81] => CH0_TXDATA_M[81]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[82] => CH0_TXDATA_M[82]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[83] => CH0_TXDATA_M[83]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[84] => CH0_TXDATA_M[84]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[85] => CH0_TXDATA_M[85]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[86] => CH0_TXDATA_M[86]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[87] => CH0_TXDATA_M[87]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[88] => CH0_TXDATA_M[88]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[89] => CH0_TXDATA_M[89]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[8] => CH0_TXDATA_M[8]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[90] => CH0_TXDATA_M[90]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[91] => CH0_TXDATA_M[91]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[92] => CH0_TXDATA_M[92]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[93] => CH0_TXDATA_M[93]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[94] => CH0_TXDATA_M[94]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[95] => CH0_TXDATA_M[95]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[96] => CH0_TXDATA_M[96]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[97] => CH0_TXDATA_M[97]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[98] => CH0_TXDATA_M[98]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[99] => CH0_TXDATA_M[99]) = (0:0:0, 0:0:0);
    (CH0_TXDATA[9] => CH0_TXDATA_M[9]) = (0:0:0, 0:0:0);
    (CH0_TXDCCDONE_M => CH0_TXDCCDONE) = (0:0:0, 0:0:0);
    (CH0_TXDEEMPH[0] => CH0_TXDEEMPH_M[0]) = (0:0:0, 0:0:0);
    (CH0_TXDEEMPH[1] => CH0_TXDEEMPH_M[1]) = (0:0:0, 0:0:0);
    (CH0_TXDETECTRX => CH0_TXDETECTRX_M) = (0:0:0, 0:0:0);
    (CH0_TXDIFFCTRL[0] => CH0_TXDIFFCTRL_M[0]) = (0:0:0, 0:0:0);
    (CH0_TXDIFFCTRL[1] => CH0_TXDIFFCTRL_M[1]) = (0:0:0, 0:0:0);
    (CH0_TXDIFFCTRL[2] => CH0_TXDIFFCTRL_M[2]) = (0:0:0, 0:0:0);
    (CH0_TXDIFFCTRL[3] => CH0_TXDIFFCTRL_M[3]) = (0:0:0, 0:0:0);
    (CH0_TXDIFFCTRL[4] => CH0_TXDIFFCTRL_M[4]) = (0:0:0, 0:0:0);
    (CH0_TXDLYALIGNERR_M => CH0_TXDLYALIGNERR) = (0:0:0, 0:0:0);
    (CH0_TXDLYALIGNPROG_M => CH0_TXDLYALIGNPROG) = (0:0:0, 0:0:0);
    (CH0_TXDLYALIGNREQ => CH0_TXDLYALIGNREQ_M) = (0:0:0, 0:0:0);
    (CH0_TXELECIDLE => CH0_TXELECIDLE_M) = (0:0:0, 0:0:0);
    (CH0_TXHEADER[0] => CH0_TXHEADER_M[0]) = (0:0:0, 0:0:0);
    (CH0_TXHEADER[1] => CH0_TXHEADER_M[1]) = (0:0:0, 0:0:0);
    (CH0_TXHEADER[2] => CH0_TXHEADER_M[2]) = (0:0:0, 0:0:0);
    (CH0_TXHEADER[3] => CH0_TXHEADER_M[3]) = (0:0:0, 0:0:0);
    (CH0_TXHEADER[4] => CH0_TXHEADER_M[4]) = (0:0:0, 0:0:0);
    (CH0_TXHEADER[5] => CH0_TXHEADER_M[5]) = (0:0:0, 0:0:0);
    (CH0_TXINHIBIT => CH0_TXINHIBIT_M) = (0:0:0, 0:0:0);
    (CH0_TXLATCLK => CH0_TXLATCLK_M) = (0:0:0, 0:0:0);
    (CH0_TXMAINCURSOR[0] => CH0_TXMAINCURSOR_M[0]) = (0:0:0, 0:0:0);
    (CH0_TXMAINCURSOR[1] => CH0_TXMAINCURSOR_M[1]) = (0:0:0, 0:0:0);
    (CH0_TXMAINCURSOR[2] => CH0_TXMAINCURSOR_M[2]) = (0:0:0, 0:0:0);
    (CH0_TXMAINCURSOR[3] => CH0_TXMAINCURSOR_M[3]) = (0:0:0, 0:0:0);
    (CH0_TXMAINCURSOR[4] => CH0_TXMAINCURSOR_M[4]) = (0:0:0, 0:0:0);
    (CH0_TXMAINCURSOR[5] => CH0_TXMAINCURSOR_M[5]) = (0:0:0, 0:0:0);
    (CH0_TXMAINCURSOR[6] => CH0_TXMAINCURSOR_M[6]) = (0:0:0, 0:0:0);
    (CH0_TXMARGIN[0] => CH0_TXMARGIN_M[0]) = (0:0:0, 0:0:0);
    (CH0_TXMARGIN[1] => CH0_TXMARGIN_M[1]) = (0:0:0, 0:0:0);
    (CH0_TXMARGIN[2] => CH0_TXMARGIN_M[2]) = (0:0:0, 0:0:0);
    (CH0_TXMLDCHAINDONE => CH0_TXMLDCHAINDONE_M) = (0:0:0, 0:0:0);
    (CH0_TXMLDCHAINREQ => CH0_TXMLDCHAINREQ_M) = (0:0:0, 0:0:0);
    (CH0_TXONESZEROS => CH0_TXONESZEROS_M) = (0:0:0, 0:0:0);
    (CH0_TXOUTCLK_M => TXOUTCLKDBG_SOUTH) = (0:0:0, 0:0:0);
    (CH0_TXPAUSEDELAYALIGN => CH0_TXPAUSEDELAYALIGN_M) = (0:0:0, 0:0:0);
    (CH0_TXPD[0] => CH0_TXPD_M[0]) = (0:0:0, 0:0:0);
    (CH0_TXPD[1] => CH0_TXPD_M[1]) = (0:0:0, 0:0:0);
    (CH0_TXPHALIGNDONE_M => CH0_TXPHALIGNDONE) = (0:0:0, 0:0:0);
    (CH0_TXPHALIGNERR_M => CH0_TXPHALIGNERR) = (0:0:0, 0:0:0);
    (CH0_TXPHALIGNOUTRSVD_M => CH0_TXPHALIGNOUTRSVD) = (0:0:0, 0:0:0);
    (CH0_TXPHALIGNREQ => CH0_TXPHALIGNREQ_M) = (0:0:0, 0:0:0);
    (CH0_TXPHDLYPD => CH0_TXPHDLYPD_M) = (0:0:0, 0:0:0);
    (CH0_TXPHDLYTSTCLK => CH0_TXPHDLYTSTCLK_M) = (0:0:0, 0:0:0);
    (CH0_TXPHSHIFT180 => CH0_TXPHSHIFT180_M) = (0:0:0, 0:0:0);
    (CH0_TXPHSHIFT180DONE_M => CH0_TXPHSHIFT180DONE) = (0:0:0, 0:0:0);
    (CH0_TXPICODEOVRDEN => CH0_TXPICODEOVRDEN_M) = (0:0:0, 0:0:0);
    (CH0_TXPIPPMEN => CH0_TXPIPPMEN_M) = (0:0:0, 0:0:0);
    (CH0_TXPIPPMSTEPSIZE[0] => CH0_TXPIPPMSTEPSIZE_M[0]) = (0:0:0, 0:0:0);
    (CH0_TXPIPPMSTEPSIZE[1] => CH0_TXPIPPMSTEPSIZE_M[1]) = (0:0:0, 0:0:0);
    (CH0_TXPIPPMSTEPSIZE[2] => CH0_TXPIPPMSTEPSIZE_M[2]) = (0:0:0, 0:0:0);
    (CH0_TXPIPPMSTEPSIZE[3] => CH0_TXPIPPMSTEPSIZE_M[3]) = (0:0:0, 0:0:0);
    (CH0_TXPIPPMSTEPSIZE[4] => CH0_TXPIPPMSTEPSIZE_M[4]) = (0:0:0, 0:0:0);
    (CH0_TXPISOPD => CH0_TXPISOPD_M) = (0:0:0, 0:0:0);
    (CH0_TXPOLARITY => CH0_TXPOLARITY_M) = (0:0:0, 0:0:0);
    (CH0_TXPOSTCURSOR[0] => CH0_TXPOSTCURSOR_M[0]) = (0:0:0, 0:0:0);
    (CH0_TXPOSTCURSOR[1] => CH0_TXPOSTCURSOR_M[1]) = (0:0:0, 0:0:0);
    (CH0_TXPOSTCURSOR[2] => CH0_TXPOSTCURSOR_M[2]) = (0:0:0, 0:0:0);
    (CH0_TXPOSTCURSOR[3] => CH0_TXPOSTCURSOR_M[3]) = (0:0:0, 0:0:0);
    (CH0_TXPOSTCURSOR[4] => CH0_TXPOSTCURSOR_M[4]) = (0:0:0, 0:0:0);
    (CH0_TXPRBSFORCEERR => CH0_TXPRBSFORCEERR_M) = (0:0:0, 0:0:0);
    (CH0_TXPRBSSEL[0] => CH0_TXPRBSSEL_M[0]) = (0:0:0, 0:0:0);
    (CH0_TXPRBSSEL[1] => CH0_TXPRBSSEL_M[1]) = (0:0:0, 0:0:0);
    (CH0_TXPRBSSEL[2] => CH0_TXPRBSSEL_M[2]) = (0:0:0, 0:0:0);
    (CH0_TXPRBSSEL[3] => CH0_TXPRBSSEL_M[3]) = (0:0:0, 0:0:0);
    (CH0_TXRATE[0] => CH0_TXRATE_M[0]) = (0:0:0, 0:0:0);
    (CH0_TXRATE[1] => CH0_TXRATE_M[1]) = (0:0:0, 0:0:0);
    (CH0_TXRATE[2] => CH0_TXRATE_M[2]) = (0:0:0, 0:0:0);
    (CH0_TXRATE[3] => CH0_TXRATE_M[3]) = (0:0:0, 0:0:0);
    (CH0_TXRATE[4] => CH0_TXRATE_M[4]) = (0:0:0, 0:0:0);
    (CH0_TXRATE[5] => CH0_TXRATE_M[5]) = (0:0:0, 0:0:0);
    (CH0_TXRATE[6] => CH0_TXRATE_M[6]) = (0:0:0, 0:0:0);
    (CH0_TXRATE[7] => CH0_TXRATE_M[7]) = (0:0:0, 0:0:0);
    (CH0_TXSEQUENCE[0] => CH0_TXSEQUENCE_M[0]) = (0:0:0, 0:0:0);
    (CH0_TXSEQUENCE[1] => CH0_TXSEQUENCE_M[1]) = (0:0:0, 0:0:0);
    (CH0_TXSEQUENCE[2] => CH0_TXSEQUENCE_M[2]) = (0:0:0, 0:0:0);
    (CH0_TXSEQUENCE[3] => CH0_TXSEQUENCE_M[3]) = (0:0:0, 0:0:0);
    (CH0_TXSEQUENCE[4] => CH0_TXSEQUENCE_M[4]) = (0:0:0, 0:0:0);
    (CH0_TXSEQUENCE[5] => CH0_TXSEQUENCE_M[5]) = (0:0:0, 0:0:0);
    (CH0_TXSEQUENCE[6] => CH0_TXSEQUENCE_M[6]) = (0:0:0, 0:0:0);
    (CH0_TXSWING => CH0_TXSWING_M) = (0:0:0, 0:0:0);
    (CH0_TXSYNCALLIN => CH0_TXSYNCALLIN_M) = (0:0:0, 0:0:0);
    (CH0_TXSYNCDONE_M => CH0_TXSYNCDONE) = (0:0:0, 0:0:0);
    (CH0_TXUSERRDY => CH0_TXUSERRDY_M) = (0:0:0, 0:0:0);
    (CH0_TXUSRCLK => CH0_TXUSRCLK_M) = (0:0:0, 0:0:0);
    (CH1_BUFGTCEMASK_M[0] => CH1_BUFGTCEMASK[0]) = (0:0:0, 0:0:0);
    (CH1_BUFGTCEMASK_M[1] => CH1_BUFGTCEMASK[1]) = (0:0:0, 0:0:0);
    (CH1_BUFGTCEMASK_M[2] => CH1_BUFGTCEMASK[2]) = (0:0:0, 0:0:0);
    (CH1_BUFGTCEMASK_M[3] => CH1_BUFGTCEMASK[3]) = (0:0:0, 0:0:0);
    (CH1_BUFGTCE_M => CH1_BUFGTCE) = (0:0:0, 0:0:0);
    (CH1_BUFGTDIV_M[0] => CH1_BUFGTDIV[0]) = (0:0:0, 0:0:0);
    (CH1_BUFGTDIV_M[10] => CH1_BUFGTDIV[10]) = (0:0:0, 0:0:0);
    (CH1_BUFGTDIV_M[11] => CH1_BUFGTDIV[11]) = (0:0:0, 0:0:0);
    (CH1_BUFGTDIV_M[1] => CH1_BUFGTDIV[1]) = (0:0:0, 0:0:0);
    (CH1_BUFGTDIV_M[2] => CH1_BUFGTDIV[2]) = (0:0:0, 0:0:0);
    (CH1_BUFGTDIV_M[3] => CH1_BUFGTDIV[3]) = (0:0:0, 0:0:0);
    (CH1_BUFGTDIV_M[4] => CH1_BUFGTDIV[4]) = (0:0:0, 0:0:0);
    (CH1_BUFGTDIV_M[5] => CH1_BUFGTDIV[5]) = (0:0:0, 0:0:0);
    (CH1_BUFGTDIV_M[6] => CH1_BUFGTDIV[6]) = (0:0:0, 0:0:0);
    (CH1_BUFGTDIV_M[7] => CH1_BUFGTDIV[7]) = (0:0:0, 0:0:0);
    (CH1_BUFGTDIV_M[8] => CH1_BUFGTDIV[8]) = (0:0:0, 0:0:0);
    (CH1_BUFGTDIV_M[9] => CH1_BUFGTDIV[9]) = (0:0:0, 0:0:0);
    (CH1_CDRBMCDRREQ => CH1_CDRBMCDRREQ_M) = (0:0:0, 0:0:0);
    (CH1_CDRFREQOS => CH1_CDRFREQOS_M) = (0:0:0, 0:0:0);
    (CH1_CDRINCPCTRL => CH1_CDRINCPCTRL_M) = (0:0:0, 0:0:0);
    (CH1_CFOKOVRDFINISH => CH1_CFOKOVRDFINISH_M) = (0:0:0, 0:0:0);
    (CH1_CFOKOVRDPULSE => CH1_CFOKOVRDPULSE_M) = (0:0:0, 0:0:0);
    (CH1_CFOKOVRDRDY0_M => CH1_CFOKOVRDRDY0) = (0:0:0, 0:0:0);
    (CH1_CFOKOVRDRDY1_M => CH1_CFOKOVRDRDY1) = (0:0:0, 0:0:0);
    (CH1_CFOKOVRDSTART => CH1_CFOKOVRDSTART_M) = (0:0:0, 0:0:0);
    (CH1_CLKRSVD0 => CH1_CLKRSVD0_M) = (0:0:0, 0:0:0);
    (CH1_CLKRSVD1 => CH1_CLKRSVD1_M) = (0:0:0, 0:0:0);
    (CH1_DMONITORCLK => CH1_DMONITORCLK_M) = (0:0:0, 0:0:0);
    (CH1_DMONITOROUT_M[0] => CH1_DMONITOROUT[0]) = (0:0:0, 0:0:0);
    (CH1_DMONITOROUT_M[10] => CH1_DMONITOROUT[10]) = (0:0:0, 0:0:0);
    (CH1_DMONITOROUT_M[11] => CH1_DMONITOROUT[11]) = (0:0:0, 0:0:0);
    (CH1_DMONITOROUT_M[12] => CH1_DMONITOROUT[12]) = (0:0:0, 0:0:0);
    (CH1_DMONITOROUT_M[13] => CH1_DMONITOROUT[13]) = (0:0:0, 0:0:0);
    (CH1_DMONITOROUT_M[14] => CH1_DMONITOROUT[14]) = (0:0:0, 0:0:0);
    (CH1_DMONITOROUT_M[15] => CH1_DMONITOROUT[15]) = (0:0:0, 0:0:0);
    (CH1_DMONITOROUT_M[16] => CH1_DMONITOROUT[16]) = (0:0:0, 0:0:0);
    (CH1_DMONITOROUT_M[17] => CH1_DMONITOROUT[17]) = (0:0:0, 0:0:0);
    (CH1_DMONITOROUT_M[18] => CH1_DMONITOROUT[18]) = (0:0:0, 0:0:0);
    (CH1_DMONITOROUT_M[19] => CH1_DMONITOROUT[19]) = (0:0:0, 0:0:0);
    (CH1_DMONITOROUT_M[1] => CH1_DMONITOROUT[1]) = (0:0:0, 0:0:0);
    (CH1_DMONITOROUT_M[20] => CH1_DMONITOROUT[20]) = (0:0:0, 0:0:0);
    (CH1_DMONITOROUT_M[21] => CH1_DMONITOROUT[21]) = (0:0:0, 0:0:0);
    (CH1_DMONITOROUT_M[22] => CH1_DMONITOROUT[22]) = (0:0:0, 0:0:0);
    (CH1_DMONITOROUT_M[23] => CH1_DMONITOROUT[23]) = (0:0:0, 0:0:0);
    (CH1_DMONITOROUT_M[24] => CH1_DMONITOROUT[24]) = (0:0:0, 0:0:0);
    (CH1_DMONITOROUT_M[25] => CH1_DMONITOROUT[25]) = (0:0:0, 0:0:0);
    (CH1_DMONITOROUT_M[26] => CH1_DMONITOROUT[26]) = (0:0:0, 0:0:0);
    (CH1_DMONITOROUT_M[27] => CH1_DMONITOROUT[27]) = (0:0:0, 0:0:0);
    (CH1_DMONITOROUT_M[28] => CH1_DMONITOROUT[28]) = (0:0:0, 0:0:0);
    (CH1_DMONITOROUT_M[29] => CH1_DMONITOROUT[29]) = (0:0:0, 0:0:0);
    (CH1_DMONITOROUT_M[2] => CH1_DMONITOROUT[2]) = (0:0:0, 0:0:0);
    (CH1_DMONITOROUT_M[30] => CH1_DMONITOROUT[30]) = (0:0:0, 0:0:0);
    (CH1_DMONITOROUT_M[31] => CH1_DMONITOROUT[31]) = (0:0:0, 0:0:0);
    (CH1_DMONITOROUT_M[3] => CH1_DMONITOROUT[3]) = (0:0:0, 0:0:0);
    (CH1_DMONITOROUT_M[4] => CH1_DMONITOROUT[4]) = (0:0:0, 0:0:0);
    (CH1_DMONITOROUT_M[5] => CH1_DMONITOROUT[5]) = (0:0:0, 0:0:0);
    (CH1_DMONITOROUT_M[6] => CH1_DMONITOROUT[6]) = (0:0:0, 0:0:0);
    (CH1_DMONITOROUT_M[7] => CH1_DMONITOROUT[7]) = (0:0:0, 0:0:0);
    (CH1_DMONITOROUT_M[8] => CH1_DMONITOROUT[8]) = (0:0:0, 0:0:0);
    (CH1_DMONITOROUT_M[9] => CH1_DMONITOROUT[9]) = (0:0:0, 0:0:0);
    (CH1_EYESCANDATAERROR_M => CH1_EYESCANDATAERROR) = (0:0:0, 0:0:0);
    (CH1_EYESCANTRIGGER => CH1_EYESCANTRIGGER_M) = (0:0:0, 0:0:0);
    (CH1_GTRSVD[0] => CH1_GTRSVD_M[0]) = (0:0:0, 0:0:0);
    (CH1_GTRSVD[10] => CH1_GTRSVD_M[10]) = (0:0:0, 0:0:0);
    (CH1_GTRSVD[11] => CH1_GTRSVD_M[11]) = (0:0:0, 0:0:0);
    (CH1_GTRSVD[12] => CH1_GTRSVD_M[12]) = (0:0:0, 0:0:0);
    (CH1_GTRSVD[13] => CH1_GTRSVD_M[13]) = (0:0:0, 0:0:0);
    (CH1_GTRSVD[14] => CH1_GTRSVD_M[14]) = (0:0:0, 0:0:0);
    (CH1_GTRSVD[15] => CH1_GTRSVD_M[15]) = (0:0:0, 0:0:0);
    (CH1_GTRSVD[1] => CH1_GTRSVD_M[1]) = (0:0:0, 0:0:0);
    (CH1_GTRSVD[2] => CH1_GTRSVD_M[2]) = (0:0:0, 0:0:0);
    (CH1_GTRSVD[3] => CH1_GTRSVD_M[3]) = (0:0:0, 0:0:0);
    (CH1_GTRSVD[4] => CH1_GTRSVD_M[4]) = (0:0:0, 0:0:0);
    (CH1_GTRSVD[5] => CH1_GTRSVD_M[5]) = (0:0:0, 0:0:0);
    (CH1_GTRSVD[6] => CH1_GTRSVD_M[6]) = (0:0:0, 0:0:0);
    (CH1_GTRSVD[7] => CH1_GTRSVD_M[7]) = (0:0:0, 0:0:0);
    (CH1_GTRSVD[8] => CH1_GTRSVD_M[8]) = (0:0:0, 0:0:0);
    (CH1_GTRSVD[9] => CH1_GTRSVD_M[9]) = (0:0:0, 0:0:0);
    (CH1_LOOPBACK[0] => CH1_LOOPBACK_M[0]) = (0:0:0, 0:0:0);
    (CH1_LOOPBACK[1] => CH1_LOOPBACK_M[1]) = (0:0:0, 0:0:0);
    (CH1_LOOPBACK[2] => CH1_LOOPBACK_M[2]) = (0:0:0, 0:0:0);
    (CH1_PCSRSVDIN[0] => CH1_PCSRSVDIN_M[0]) = (0:0:0, 0:0:0);
    (CH1_PCSRSVDIN[10] => CH1_PCSRSVDIN_M[10]) = (0:0:0, 0:0:0);
    (CH1_PCSRSVDIN[11] => CH1_PCSRSVDIN_M[11]) = (0:0:0, 0:0:0);
    (CH1_PCSRSVDIN[12] => CH1_PCSRSVDIN_M[12]) = (0:0:0, 0:0:0);
    (CH1_PCSRSVDIN[13] => CH1_PCSRSVDIN_M[13]) = (0:0:0, 0:0:0);
    (CH1_PCSRSVDIN[14] => CH1_PCSRSVDIN_M[14]) = (0:0:0, 0:0:0);
    (CH1_PCSRSVDIN[15] => CH1_PCSRSVDIN_M[15]) = (0:0:0, 0:0:0);
    (CH1_PCSRSVDIN[1] => CH1_PCSRSVDIN_M[1]) = (0:0:0, 0:0:0);
    (CH1_PCSRSVDIN[2] => CH1_PCSRSVDIN_M[2]) = (0:0:0, 0:0:0);
    (CH1_PCSRSVDIN[3] => CH1_PCSRSVDIN_M[3]) = (0:0:0, 0:0:0);
    (CH1_PCSRSVDIN[4] => CH1_PCSRSVDIN_M[4]) = (0:0:0, 0:0:0);
    (CH1_PCSRSVDIN[5] => CH1_PCSRSVDIN_M[5]) = (0:0:0, 0:0:0);
    (CH1_PCSRSVDIN[6] => CH1_PCSRSVDIN_M[6]) = (0:0:0, 0:0:0);
    (CH1_PCSRSVDIN[7] => CH1_PCSRSVDIN_M[7]) = (0:0:0, 0:0:0);
    (CH1_PCSRSVDIN[8] => CH1_PCSRSVDIN_M[8]) = (0:0:0, 0:0:0);
    (CH1_PCSRSVDIN[9] => CH1_PCSRSVDIN_M[9]) = (0:0:0, 0:0:0);
    (CH1_PCSRSVDOUT_M[0] => CH1_PCSRSVDOUT[0]) = (0:0:0, 0:0:0);
    (CH1_PCSRSVDOUT_M[10] => CH1_PCSRSVDOUT[10]) = (0:0:0, 0:0:0);
    (CH1_PCSRSVDOUT_M[11] => CH1_PCSRSVDOUT[11]) = (0:0:0, 0:0:0);
    (CH1_PCSRSVDOUT_M[12] => CH1_PCSRSVDOUT[12]) = (0:0:0, 0:0:0);
    (CH1_PCSRSVDOUT_M[13] => CH1_PCSRSVDOUT[13]) = (0:0:0, 0:0:0);
    (CH1_PCSRSVDOUT_M[14] => CH1_PCSRSVDOUT[14]) = (0:0:0, 0:0:0);
    (CH1_PCSRSVDOUT_M[15] => CH1_PCSRSVDOUT[15]) = (0:0:0, 0:0:0);
    (CH1_PCSRSVDOUT_M[1] => CH1_PCSRSVDOUT[1]) = (0:0:0, 0:0:0);
    (CH1_PCSRSVDOUT_M[2] => CH1_PCSRSVDOUT[2]) = (0:0:0, 0:0:0);
    (CH1_PCSRSVDOUT_M[3] => CH1_PCSRSVDOUT[3]) = (0:0:0, 0:0:0);
    (CH1_PCSRSVDOUT_M[4] => CH1_PCSRSVDOUT[4]) = (0:0:0, 0:0:0);
    (CH1_PCSRSVDOUT_M[5] => CH1_PCSRSVDOUT[5]) = (0:0:0, 0:0:0);
    (CH1_PCSRSVDOUT_M[6] => CH1_PCSRSVDOUT[6]) = (0:0:0, 0:0:0);
    (CH1_PCSRSVDOUT_M[7] => CH1_PCSRSVDOUT[7]) = (0:0:0, 0:0:0);
    (CH1_PCSRSVDOUT_M[8] => CH1_PCSRSVDOUT[8]) = (0:0:0, 0:0:0);
    (CH1_PCSRSVDOUT_M[9] => CH1_PCSRSVDOUT[9]) = (0:0:0, 0:0:0);
    (CH1_PHYESMADAPTSAVE => CH1_PHYESMADAPTSAVE_M) = (0:0:0, 0:0:0);
    (CH1_PHYREADY_M => CH1_PHYREADY) = (0:0:0, 0:0:0);
    (CH1_PHYSTATUS_M => CH1_PHYSTATUS) = (0:0:0, 0:0:0);
    (CH1_PINRSVDAS_M[0] => CH1_PINRSVDAS[0]) = (0:0:0, 0:0:0);
    (CH1_PINRSVDAS_M[10] => CH1_PINRSVDAS[10]) = (0:0:0, 0:0:0);
    (CH1_PINRSVDAS_M[11] => CH1_PINRSVDAS[11]) = (0:0:0, 0:0:0);
    (CH1_PINRSVDAS_M[12] => CH1_PINRSVDAS[12]) = (0:0:0, 0:0:0);
    (CH1_PINRSVDAS_M[13] => CH1_PINRSVDAS[13]) = (0:0:0, 0:0:0);
    (CH1_PINRSVDAS_M[14] => CH1_PINRSVDAS[14]) = (0:0:0, 0:0:0);
    (CH1_PINRSVDAS_M[15] => CH1_PINRSVDAS[15]) = (0:0:0, 0:0:0);
    (CH1_PINRSVDAS_M[1] => CH1_PINRSVDAS[1]) = (0:0:0, 0:0:0);
    (CH1_PINRSVDAS_M[2] => CH1_PINRSVDAS[2]) = (0:0:0, 0:0:0);
    (CH1_PINRSVDAS_M[3] => CH1_PINRSVDAS[3]) = (0:0:0, 0:0:0);
    (CH1_PINRSVDAS_M[4] => CH1_PINRSVDAS[4]) = (0:0:0, 0:0:0);
    (CH1_PINRSVDAS_M[5] => CH1_PINRSVDAS[5]) = (0:0:0, 0:0:0);
    (CH1_PINRSVDAS_M[6] => CH1_PINRSVDAS[6]) = (0:0:0, 0:0:0);
    (CH1_PINRSVDAS_M[7] => CH1_PINRSVDAS[7]) = (0:0:0, 0:0:0);
    (CH1_PINRSVDAS_M[8] => CH1_PINRSVDAS[8]) = (0:0:0, 0:0:0);
    (CH1_PINRSVDAS_M[9] => CH1_PINRSVDAS[9]) = (0:0:0, 0:0:0);
    (CH1_RX10GSTAT_M[0] => CH1_RX10GSTAT[0]) = (0:0:0, 0:0:0);
    (CH1_RX10GSTAT_M[1] => CH1_RX10GSTAT[1]) = (0:0:0, 0:0:0);
    (CH1_RX10GSTAT_M[2] => CH1_RX10GSTAT[2]) = (0:0:0, 0:0:0);
    (CH1_RX10GSTAT_M[3] => CH1_RX10GSTAT[3]) = (0:0:0, 0:0:0);
    (CH1_RX10GSTAT_M[4] => CH1_RX10GSTAT[4]) = (0:0:0, 0:0:0);
    (CH1_RX10GSTAT_M[5] => CH1_RX10GSTAT[5]) = (0:0:0, 0:0:0);
    (CH1_RX10GSTAT_M[6] => CH1_RX10GSTAT[6]) = (0:0:0, 0:0:0);
    (CH1_RX10GSTAT_M[7] => CH1_RX10GSTAT[7]) = (0:0:0, 0:0:0);
    (CH1_RXBUFSTATUS_M[0] => CH1_RXBUFSTATUS[0]) = (0:0:0, 0:0:0);
    (CH1_RXBUFSTATUS_M[1] => CH1_RXBUFSTATUS[1]) = (0:0:0, 0:0:0);
    (CH1_RXBUFSTATUS_M[2] => CH1_RXBUFSTATUS[2]) = (0:0:0, 0:0:0);
    (CH1_RXBYTEISALIGNED_M => CH1_RXBYTEISALIGNED) = (0:0:0, 0:0:0);
    (CH1_RXBYTEREALIGN_M => CH1_RXBYTEREALIGN) = (0:0:0, 0:0:0);
    (CH1_RXCDRHOLD => CH1_RXCDRHOLD_M) = (0:0:0, 0:0:0);
    (CH1_RXCDRLOCK_M => CH1_RXCDRLOCK) = (0:0:0, 0:0:0);
    (CH1_RXCDROVRDEN => CH1_RXCDROVRDEN_M) = (0:0:0, 0:0:0);
    (CH1_RXCDRPHDONE_M => CH1_RXCDRPHDONE) = (0:0:0, 0:0:0);
    (CH1_RXCHANBONDSEQ_M => CH1_RXCHANBONDSEQ) = (0:0:0, 0:0:0);
    (CH1_RXCHANISALIGNED_M => CH1_RXCHANISALIGNED) = (0:0:0, 0:0:0);
    (CH1_RXCHANREALIGN_M => CH1_RXCHANREALIGN) = (0:0:0, 0:0:0);
    (CH1_RXCHBONDI[0] => CH1_RXCHBONDI_M[0]) = (0:0:0, 0:0:0);
    (CH1_RXCHBONDI[1] => CH1_RXCHBONDI_M[1]) = (0:0:0, 0:0:0);
    (CH1_RXCHBONDI[2] => CH1_RXCHBONDI_M[2]) = (0:0:0, 0:0:0);
    (CH1_RXCHBONDI[3] => CH1_RXCHBONDI_M[3]) = (0:0:0, 0:0:0);
    (CH1_RXCHBONDI[4] => CH1_RXCHBONDI_M[4]) = (0:0:0, 0:0:0);
    (CH1_RXCHBONDO_M[0] => CH1_RXCHBONDO[0]) = (0:0:0, 0:0:0);
    (CH1_RXCHBONDO_M[1] => CH1_RXCHBONDO[1]) = (0:0:0, 0:0:0);
    (CH1_RXCHBONDO_M[2] => CH1_RXCHBONDO[2]) = (0:0:0, 0:0:0);
    (CH1_RXCHBONDO_M[3] => CH1_RXCHBONDO[3]) = (0:0:0, 0:0:0);
    (CH1_RXCHBONDO_M[4] => CH1_RXCHBONDO[4]) = (0:0:0, 0:0:0);
    (CH1_RXCLKCORCNT_M[0] => CH1_RXCLKCORCNT[0]) = (0:0:0, 0:0:0);
    (CH1_RXCLKCORCNT_M[1] => CH1_RXCLKCORCNT[1]) = (0:0:0, 0:0:0);
    (CH1_RXCOMINITDET_M => CH1_RXCOMINITDET) = (0:0:0, 0:0:0);
    (CH1_RXCOMMADET_M => CH1_RXCOMMADET) = (0:0:0, 0:0:0);
    (CH1_RXCOMSASDET_M => CH1_RXCOMSASDET) = (0:0:0, 0:0:0);
    (CH1_RXCOMWAKEDET_M => CH1_RXCOMWAKEDET) = (0:0:0, 0:0:0);
    (CH1_RXCTRL0_M[0] => CH1_RXCTRL0[0]) = (0:0:0, 0:0:0);
    (CH1_RXCTRL0_M[10] => CH1_RXCTRL0[10]) = (0:0:0, 0:0:0);
    (CH1_RXCTRL0_M[11] => CH1_RXCTRL0[11]) = (0:0:0, 0:0:0);
    (CH1_RXCTRL0_M[12] => CH1_RXCTRL0[12]) = (0:0:0, 0:0:0);
    (CH1_RXCTRL0_M[13] => CH1_RXCTRL0[13]) = (0:0:0, 0:0:0);
    (CH1_RXCTRL0_M[14] => CH1_RXCTRL0[14]) = (0:0:0, 0:0:0);
    (CH1_RXCTRL0_M[15] => CH1_RXCTRL0[15]) = (0:0:0, 0:0:0);
    (CH1_RXCTRL0_M[1] => CH1_RXCTRL0[1]) = (0:0:0, 0:0:0);
    (CH1_RXCTRL0_M[2] => CH1_RXCTRL0[2]) = (0:0:0, 0:0:0);
    (CH1_RXCTRL0_M[3] => CH1_RXCTRL0[3]) = (0:0:0, 0:0:0);
    (CH1_RXCTRL0_M[4] => CH1_RXCTRL0[4]) = (0:0:0, 0:0:0);
    (CH1_RXCTRL0_M[5] => CH1_RXCTRL0[5]) = (0:0:0, 0:0:0);
    (CH1_RXCTRL0_M[6] => CH1_RXCTRL0[6]) = (0:0:0, 0:0:0);
    (CH1_RXCTRL0_M[7] => CH1_RXCTRL0[7]) = (0:0:0, 0:0:0);
    (CH1_RXCTRL0_M[8] => CH1_RXCTRL0[8]) = (0:0:0, 0:0:0);
    (CH1_RXCTRL0_M[9] => CH1_RXCTRL0[9]) = (0:0:0, 0:0:0);
    (CH1_RXCTRL1_M[0] => CH1_RXCTRL1[0]) = (0:0:0, 0:0:0);
    (CH1_RXCTRL1_M[10] => CH1_RXCTRL1[10]) = (0:0:0, 0:0:0);
    (CH1_RXCTRL1_M[11] => CH1_RXCTRL1[11]) = (0:0:0, 0:0:0);
    (CH1_RXCTRL1_M[12] => CH1_RXCTRL1[12]) = (0:0:0, 0:0:0);
    (CH1_RXCTRL1_M[13] => CH1_RXCTRL1[13]) = (0:0:0, 0:0:0);
    (CH1_RXCTRL1_M[14] => CH1_RXCTRL1[14]) = (0:0:0, 0:0:0);
    (CH1_RXCTRL1_M[15] => CH1_RXCTRL1[15]) = (0:0:0, 0:0:0);
    (CH1_RXCTRL1_M[1] => CH1_RXCTRL1[1]) = (0:0:0, 0:0:0);
    (CH1_RXCTRL1_M[2] => CH1_RXCTRL1[2]) = (0:0:0, 0:0:0);
    (CH1_RXCTRL1_M[3] => CH1_RXCTRL1[3]) = (0:0:0, 0:0:0);
    (CH1_RXCTRL1_M[4] => CH1_RXCTRL1[4]) = (0:0:0, 0:0:0);
    (CH1_RXCTRL1_M[5] => CH1_RXCTRL1[5]) = (0:0:0, 0:0:0);
    (CH1_RXCTRL1_M[6] => CH1_RXCTRL1[6]) = (0:0:0, 0:0:0);
    (CH1_RXCTRL1_M[7] => CH1_RXCTRL1[7]) = (0:0:0, 0:0:0);
    (CH1_RXCTRL1_M[8] => CH1_RXCTRL1[8]) = (0:0:0, 0:0:0);
    (CH1_RXCTRL1_M[9] => CH1_RXCTRL1[9]) = (0:0:0, 0:0:0);
    (CH1_RXCTRL2_M[0] => CH1_RXCTRL2[0]) = (0:0:0, 0:0:0);
    (CH1_RXCTRL2_M[1] => CH1_RXCTRL2[1]) = (0:0:0, 0:0:0);
    (CH1_RXCTRL2_M[2] => CH1_RXCTRL2[2]) = (0:0:0, 0:0:0);
    (CH1_RXCTRL2_M[3] => CH1_RXCTRL2[3]) = (0:0:0, 0:0:0);
    (CH1_RXCTRL2_M[4] => CH1_RXCTRL2[4]) = (0:0:0, 0:0:0);
    (CH1_RXCTRL2_M[5] => CH1_RXCTRL2[5]) = (0:0:0, 0:0:0);
    (CH1_RXCTRL2_M[6] => CH1_RXCTRL2[6]) = (0:0:0, 0:0:0);
    (CH1_RXCTRL2_M[7] => CH1_RXCTRL2[7]) = (0:0:0, 0:0:0);
    (CH1_RXCTRL3_M[0] => CH1_RXCTRL3[0]) = (0:0:0, 0:0:0);
    (CH1_RXCTRL3_M[1] => CH1_RXCTRL3[1]) = (0:0:0, 0:0:0);
    (CH1_RXCTRL3_M[2] => CH1_RXCTRL3[2]) = (0:0:0, 0:0:0);
    (CH1_RXCTRL3_M[3] => CH1_RXCTRL3[3]) = (0:0:0, 0:0:0);
    (CH1_RXCTRL3_M[4] => CH1_RXCTRL3[4]) = (0:0:0, 0:0:0);
    (CH1_RXCTRL3_M[5] => CH1_RXCTRL3[5]) = (0:0:0, 0:0:0);
    (CH1_RXCTRL3_M[6] => CH1_RXCTRL3[6]) = (0:0:0, 0:0:0);
    (CH1_RXCTRL3_M[7] => CH1_RXCTRL3[7]) = (0:0:0, 0:0:0);
    (CH1_RXDAPICODEOVRDEN => CH1_RXDAPICODEOVRDEN_M) = (0:0:0, 0:0:0);
    (CH1_RXDATAEXTENDRSVD_M[0] => CH1_RXDATAEXTENDRSVD[0]) = (0:0:0, 0:0:0);
    (CH1_RXDATAEXTENDRSVD_M[1] => CH1_RXDATAEXTENDRSVD[1]) = (0:0:0, 0:0:0);
    (CH1_RXDATAEXTENDRSVD_M[2] => CH1_RXDATAEXTENDRSVD[2]) = (0:0:0, 0:0:0);
    (CH1_RXDATAEXTENDRSVD_M[3] => CH1_RXDATAEXTENDRSVD[3]) = (0:0:0, 0:0:0);
    (CH1_RXDATAEXTENDRSVD_M[4] => CH1_RXDATAEXTENDRSVD[4]) = (0:0:0, 0:0:0);
    (CH1_RXDATAEXTENDRSVD_M[5] => CH1_RXDATAEXTENDRSVD[5]) = (0:0:0, 0:0:0);
    (CH1_RXDATAEXTENDRSVD_M[6] => CH1_RXDATAEXTENDRSVD[6]) = (0:0:0, 0:0:0);
    (CH1_RXDATAEXTENDRSVD_M[7] => CH1_RXDATAEXTENDRSVD[7]) = (0:0:0, 0:0:0);
    (CH1_RXDATAVALID_M[0] => CH1_RXDATAVALID[0]) = (0:0:0, 0:0:0);
    (CH1_RXDATAVALID_M[1] => CH1_RXDATAVALID[1]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[0] => CH1_RXDATA[0]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[100] => CH1_RXDATA[100]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[101] => CH1_RXDATA[101]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[102] => CH1_RXDATA[102]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[103] => CH1_RXDATA[103]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[104] => CH1_RXDATA[104]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[105] => CH1_RXDATA[105]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[106] => CH1_RXDATA[106]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[107] => CH1_RXDATA[107]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[108] => CH1_RXDATA[108]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[109] => CH1_RXDATA[109]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[10] => CH1_RXDATA[10]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[110] => CH1_RXDATA[110]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[111] => CH1_RXDATA[111]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[112] => CH1_RXDATA[112]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[113] => CH1_RXDATA[113]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[114] => CH1_RXDATA[114]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[115] => CH1_RXDATA[115]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[116] => CH1_RXDATA[116]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[117] => CH1_RXDATA[117]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[118] => CH1_RXDATA[118]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[119] => CH1_RXDATA[119]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[11] => CH1_RXDATA[11]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[120] => CH1_RXDATA[120]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[121] => CH1_RXDATA[121]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[122] => CH1_RXDATA[122]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[123] => CH1_RXDATA[123]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[124] => CH1_RXDATA[124]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[125] => CH1_RXDATA[125]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[126] => CH1_RXDATA[126]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[127] => CH1_RXDATA[127]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[12] => CH1_RXDATA[12]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[13] => CH1_RXDATA[13]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[14] => CH1_RXDATA[14]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[15] => CH1_RXDATA[15]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[16] => CH1_RXDATA[16]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[17] => CH1_RXDATA[17]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[18] => CH1_RXDATA[18]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[19] => CH1_RXDATA[19]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[1] => CH1_RXDATA[1]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[20] => CH1_RXDATA[20]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[21] => CH1_RXDATA[21]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[22] => CH1_RXDATA[22]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[23] => CH1_RXDATA[23]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[24] => CH1_RXDATA[24]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[25] => CH1_RXDATA[25]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[26] => CH1_RXDATA[26]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[27] => CH1_RXDATA[27]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[28] => CH1_RXDATA[28]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[29] => CH1_RXDATA[29]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[2] => CH1_RXDATA[2]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[30] => CH1_RXDATA[30]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[31] => CH1_RXDATA[31]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[32] => CH1_RXDATA[32]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[33] => CH1_RXDATA[33]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[34] => CH1_RXDATA[34]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[35] => CH1_RXDATA[35]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[36] => CH1_RXDATA[36]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[37] => CH1_RXDATA[37]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[38] => CH1_RXDATA[38]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[39] => CH1_RXDATA[39]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[3] => CH1_RXDATA[3]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[40] => CH1_RXDATA[40]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[41] => CH1_RXDATA[41]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[42] => CH1_RXDATA[42]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[43] => CH1_RXDATA[43]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[44] => CH1_RXDATA[44]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[45] => CH1_RXDATA[45]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[46] => CH1_RXDATA[46]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[47] => CH1_RXDATA[47]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[48] => CH1_RXDATA[48]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[49] => CH1_RXDATA[49]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[4] => CH1_RXDATA[4]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[50] => CH1_RXDATA[50]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[51] => CH1_RXDATA[51]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[52] => CH1_RXDATA[52]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[53] => CH1_RXDATA[53]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[54] => CH1_RXDATA[54]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[55] => CH1_RXDATA[55]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[56] => CH1_RXDATA[56]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[57] => CH1_RXDATA[57]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[58] => CH1_RXDATA[58]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[59] => CH1_RXDATA[59]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[5] => CH1_RXDATA[5]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[60] => CH1_RXDATA[60]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[61] => CH1_RXDATA[61]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[62] => CH1_RXDATA[62]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[63] => CH1_RXDATA[63]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[64] => CH1_RXDATA[64]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[65] => CH1_RXDATA[65]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[66] => CH1_RXDATA[66]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[67] => CH1_RXDATA[67]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[68] => CH1_RXDATA[68]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[69] => CH1_RXDATA[69]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[6] => CH1_RXDATA[6]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[70] => CH1_RXDATA[70]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[71] => CH1_RXDATA[71]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[72] => CH1_RXDATA[72]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[73] => CH1_RXDATA[73]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[74] => CH1_RXDATA[74]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[75] => CH1_RXDATA[75]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[76] => CH1_RXDATA[76]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[77] => CH1_RXDATA[77]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[78] => CH1_RXDATA[78]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[79] => CH1_RXDATA[79]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[7] => CH1_RXDATA[7]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[80] => CH1_RXDATA[80]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[81] => CH1_RXDATA[81]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[82] => CH1_RXDATA[82]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[83] => CH1_RXDATA[83]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[84] => CH1_RXDATA[84]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[85] => CH1_RXDATA[85]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[86] => CH1_RXDATA[86]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[87] => CH1_RXDATA[87]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[88] => CH1_RXDATA[88]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[89] => CH1_RXDATA[89]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[8] => CH1_RXDATA[8]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[90] => CH1_RXDATA[90]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[91] => CH1_RXDATA[91]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[92] => CH1_RXDATA[92]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[93] => CH1_RXDATA[93]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[94] => CH1_RXDATA[94]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[95] => CH1_RXDATA[95]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[96] => CH1_RXDATA[96]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[97] => CH1_RXDATA[97]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[98] => CH1_RXDATA[98]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[99] => CH1_RXDATA[99]) = (0:0:0, 0:0:0);
    (CH1_RXDATA_M[9] => CH1_RXDATA[9]) = (0:0:0, 0:0:0);
    (CH1_RXDCCDONE_M => CH1_RXDCCDONE) = (0:0:0, 0:0:0);
    (CH1_RXDLYALIGNERR_M => CH1_RXDLYALIGNERR) = (0:0:0, 0:0:0);
    (CH1_RXDLYALIGNPROG_M => CH1_RXDLYALIGNPROG) = (0:0:0, 0:0:0);
    (CH1_RXDLYALIGNREQ => CH1_RXDLYALIGNREQ_M) = (0:0:0, 0:0:0);
    (CH1_RXELECIDLE_M => CH1_RXELECIDLE) = (0:0:0, 0:0:0);
    (CH1_RXEQTRAINING => CH1_RXEQTRAINING_M) = (0:0:0, 0:0:0);
    (CH1_RXFINEALIGNDONE_M => CH1_RXFINEALIGNDONE) = (0:0:0, 0:0:0);
    (CH1_RXGEARBOXSLIP => CH1_RXGEARBOXSLIP_M) = (0:0:0, 0:0:0);
    (CH1_RXHEADERVALID_M[0] => CH1_RXHEADERVALID[0]) = (0:0:0, 0:0:0);
    (CH1_RXHEADERVALID_M[1] => CH1_RXHEADERVALID[1]) = (0:0:0, 0:0:0);
    (CH1_RXHEADER_M[0] => CH1_RXHEADER[0]) = (0:0:0, 0:0:0);
    (CH1_RXHEADER_M[1] => CH1_RXHEADER[1]) = (0:0:0, 0:0:0);
    (CH1_RXHEADER_M[2] => CH1_RXHEADER[2]) = (0:0:0, 0:0:0);
    (CH1_RXHEADER_M[3] => CH1_RXHEADER[3]) = (0:0:0, 0:0:0);
    (CH1_RXHEADER_M[4] => CH1_RXHEADER[4]) = (0:0:0, 0:0:0);
    (CH1_RXHEADER_M[5] => CH1_RXHEADER[5]) = (0:0:0, 0:0:0);
    (CH1_RXLATCLK => CH1_RXLATCLK_M) = (0:0:0, 0:0:0);
    (CH1_RXLPMEN => CH1_RXLPMEN_M) = (0:0:0, 0:0:0);
    (CH1_RXMLDCHAINDONE => CH1_RXMLDCHAINDONE_M) = (0:0:0, 0:0:0);
    (CH1_RXMLDCHAINREQ => CH1_RXMLDCHAINREQ_M) = (0:0:0, 0:0:0);
    (CH1_RXMLFINEALIGNREQ => CH1_RXMLFINEALIGNREQ_M) = (0:0:0, 0:0:0);
    (CH1_RXOSINTDONE_M => CH1_RXOSINTDONE) = (0:0:0, 0:0:0);
    (CH1_RXOSINTSTARTED_M => CH1_RXOSINTSTARTED) = (0:0:0, 0:0:0);
    (CH1_RXOSINTSTROBEDONE_M => CH1_RXOSINTSTROBEDONE) = (0:0:0, 0:0:0);
    (CH1_RXOSINTSTROBESTARTED_M => CH1_RXOSINTSTROBESTARTED) = (0:0:0, 0:0:0);
    (CH1_RXPD[0] => CH1_RXPD_M[0]) = (0:0:0, 0:0:0);
    (CH1_RXPD[1] => CH1_RXPD_M[1]) = (0:0:0, 0:0:0);
    (CH1_RXPHALIGNDONE_M => CH1_RXPHALIGNDONE) = (0:0:0, 0:0:0);
    (CH1_RXPHALIGNERR_M => CH1_RXPHALIGNERR) = (0:0:0, 0:0:0);
    (CH1_RXPHALIGNREQ => CH1_RXPHALIGNREQ_M) = (0:0:0, 0:0:0);
    (CH1_RXPHDLYPD => CH1_RXPHDLYPD_M) = (0:0:0, 0:0:0);
    (CH1_RXPHSHIFT180 => CH1_RXPHSHIFT180_M) = (0:0:0, 0:0:0);
    (CH1_RXPHSHIFT180DONE_M => CH1_RXPHSHIFT180DONE) = (0:0:0, 0:0:0);
    (CH1_RXPOLARITY => CH1_RXPOLARITY_M) = (0:0:0, 0:0:0);
    (CH1_RXPRBSERR_M => CH1_RXPRBSERR) = (0:0:0, 0:0:0);
    (CH1_RXPRBSLOCKED_M => CH1_RXPRBSLOCKED) = (0:0:0, 0:0:0);
    (CH1_RXPRBSSEL[0] => CH1_RXPRBSSEL_M[0]) = (0:0:0, 0:0:0);
    (CH1_RXPRBSSEL[1] => CH1_RXPRBSSEL_M[1]) = (0:0:0, 0:0:0);
    (CH1_RXPRBSSEL[2] => CH1_RXPRBSSEL_M[2]) = (0:0:0, 0:0:0);
    (CH1_RXPRBSSEL[3] => CH1_RXPRBSSEL_M[3]) = (0:0:0, 0:0:0);
    (CH1_RXRATE[0] => CH1_RXRATE_M[0]) = (0:0:0, 0:0:0);
    (CH1_RXRATE[1] => CH1_RXRATE_M[1]) = (0:0:0, 0:0:0);
    (CH1_RXRATE[2] => CH1_RXRATE_M[2]) = (0:0:0, 0:0:0);
    (CH1_RXRATE[3] => CH1_RXRATE_M[3]) = (0:0:0, 0:0:0);
    (CH1_RXRATE[4] => CH1_RXRATE_M[4]) = (0:0:0, 0:0:0);
    (CH1_RXRATE[5] => CH1_RXRATE_M[5]) = (0:0:0, 0:0:0);
    (CH1_RXRATE[6] => CH1_RXRATE_M[6]) = (0:0:0, 0:0:0);
    (CH1_RXRATE[7] => CH1_RXRATE_M[7]) = (0:0:0, 0:0:0);
    (CH1_RXSLIDE => CH1_RXSLIDE_M) = (0:0:0, 0:0:0);
    (CH1_RXSLIDERDY_M => CH1_RXSLIDERDY) = (0:0:0, 0:0:0);
    (CH1_RXSTARTOFSEQ_M[0] => CH1_RXSTARTOFSEQ[0]) = (0:0:0, 0:0:0);
    (CH1_RXSTARTOFSEQ_M[1] => CH1_RXSTARTOFSEQ[1]) = (0:0:0, 0:0:0);
    (CH1_RXSTATUS_M[0] => CH1_RXSTATUS[0]) = (0:0:0, 0:0:0);
    (CH1_RXSTATUS_M[1] => CH1_RXSTATUS[1]) = (0:0:0, 0:0:0);
    (CH1_RXSTATUS_M[2] => CH1_RXSTATUS[2]) = (0:0:0, 0:0:0);
    (CH1_RXSYNCALLIN => CH1_RXSYNCALLIN_M) = (0:0:0, 0:0:0);
    (CH1_RXSYNCDONE_M => CH1_RXSYNCDONE) = (0:0:0, 0:0:0);
    (CH1_RXTERMINATION => CH1_RXTERMINATION_M) = (0:0:0, 0:0:0);
    (CH1_RXUSERRDY => CH1_RXUSERRDY_M) = (0:0:0, 0:0:0);
    (CH1_RXUSRCLK => CH1_RXUSRCLK_M) = (0:0:0, 0:0:0);
    (CH1_RXVALID_M => CH1_RXVALID) = (0:0:0, 0:0:0);
    (CH1_TSTCLK0 => CH1_TSTCLK0_M) = (0:0:0, 0:0:0);
    (CH1_TSTCLK1 => CH1_TSTCLK1_M) = (0:0:0, 0:0:0);
    (CH1_TSTIN[0] => CH1_TSTIN_M[0]) = (0:0:0, 0:0:0);
    (CH1_TSTIN[10] => CH1_TSTIN_M[10]) = (0:0:0, 0:0:0);
    (CH1_TSTIN[11] => CH1_TSTIN_M[11]) = (0:0:0, 0:0:0);
    (CH1_TSTIN[12] => CH1_TSTIN_M[12]) = (0:0:0, 0:0:0);
    (CH1_TSTIN[13] => CH1_TSTIN_M[13]) = (0:0:0, 0:0:0);
    (CH1_TSTIN[14] => CH1_TSTIN_M[14]) = (0:0:0, 0:0:0);
    (CH1_TSTIN[15] => CH1_TSTIN_M[15]) = (0:0:0, 0:0:0);
    (CH1_TSTIN[16] => CH1_TSTIN_M[16]) = (0:0:0, 0:0:0);
    (CH1_TSTIN[17] => CH1_TSTIN_M[17]) = (0:0:0, 0:0:0);
    (CH1_TSTIN[18] => CH1_TSTIN_M[18]) = (0:0:0, 0:0:0);
    (CH1_TSTIN[19] => CH1_TSTIN_M[19]) = (0:0:0, 0:0:0);
    (CH1_TSTIN[1] => CH1_TSTIN_M[1]) = (0:0:0, 0:0:0);
    (CH1_TSTIN[2] => CH1_TSTIN_M[2]) = (0:0:0, 0:0:0);
    (CH1_TSTIN[3] => CH1_TSTIN_M[3]) = (0:0:0, 0:0:0);
    (CH1_TSTIN[4] => CH1_TSTIN_M[4]) = (0:0:0, 0:0:0);
    (CH1_TSTIN[5] => CH1_TSTIN_M[5]) = (0:0:0, 0:0:0);
    (CH1_TSTIN[6] => CH1_TSTIN_M[6]) = (0:0:0, 0:0:0);
    (CH1_TSTIN[7] => CH1_TSTIN_M[7]) = (0:0:0, 0:0:0);
    (CH1_TSTIN[8] => CH1_TSTIN_M[8]) = (0:0:0, 0:0:0);
    (CH1_TSTIN[9] => CH1_TSTIN_M[9]) = (0:0:0, 0:0:0);
    (CH1_TX10GSTAT_M => CH1_TX10GSTAT) = (0:0:0, 0:0:0);
    (CH1_TXBUFSTATUS_M[0] => CH1_TXBUFSTATUS[0]) = (0:0:0, 0:0:0);
    (CH1_TXBUFSTATUS_M[1] => CH1_TXBUFSTATUS[1]) = (0:0:0, 0:0:0);
    (CH1_TXCOMFINISH_M => CH1_TXCOMFINISH) = (0:0:0, 0:0:0);
    (CH1_TXCOMINIT => CH1_TXCOMINIT_M) = (0:0:0, 0:0:0);
    (CH1_TXCOMSAS => CH1_TXCOMSAS_M) = (0:0:0, 0:0:0);
    (CH1_TXCOMWAKE => CH1_TXCOMWAKE_M) = (0:0:0, 0:0:0);
    (CH1_TXCTRL0[0] => CH1_TXCTRL0_M[0]) = (0:0:0, 0:0:0);
    (CH1_TXCTRL0[10] => CH1_TXCTRL0_M[10]) = (0:0:0, 0:0:0);
    (CH1_TXCTRL0[11] => CH1_TXCTRL0_M[11]) = (0:0:0, 0:0:0);
    (CH1_TXCTRL0[12] => CH1_TXCTRL0_M[12]) = (0:0:0, 0:0:0);
    (CH1_TXCTRL0[13] => CH1_TXCTRL0_M[13]) = (0:0:0, 0:0:0);
    (CH1_TXCTRL0[14] => CH1_TXCTRL0_M[14]) = (0:0:0, 0:0:0);
    (CH1_TXCTRL0[15] => CH1_TXCTRL0_M[15]) = (0:0:0, 0:0:0);
    (CH1_TXCTRL0[1] => CH1_TXCTRL0_M[1]) = (0:0:0, 0:0:0);
    (CH1_TXCTRL0[2] => CH1_TXCTRL0_M[2]) = (0:0:0, 0:0:0);
    (CH1_TXCTRL0[3] => CH1_TXCTRL0_M[3]) = (0:0:0, 0:0:0);
    (CH1_TXCTRL0[4] => CH1_TXCTRL0_M[4]) = (0:0:0, 0:0:0);
    (CH1_TXCTRL0[5] => CH1_TXCTRL0_M[5]) = (0:0:0, 0:0:0);
    (CH1_TXCTRL0[6] => CH1_TXCTRL0_M[6]) = (0:0:0, 0:0:0);
    (CH1_TXCTRL0[7] => CH1_TXCTRL0_M[7]) = (0:0:0, 0:0:0);
    (CH1_TXCTRL0[8] => CH1_TXCTRL0_M[8]) = (0:0:0, 0:0:0);
    (CH1_TXCTRL0[9] => CH1_TXCTRL0_M[9]) = (0:0:0, 0:0:0);
    (CH1_TXCTRL1[0] => CH1_TXCTRL1_M[0]) = (0:0:0, 0:0:0);
    (CH1_TXCTRL1[10] => CH1_TXCTRL1_M[10]) = (0:0:0, 0:0:0);
    (CH1_TXCTRL1[11] => CH1_TXCTRL1_M[11]) = (0:0:0, 0:0:0);
    (CH1_TXCTRL1[12] => CH1_TXCTRL1_M[12]) = (0:0:0, 0:0:0);
    (CH1_TXCTRL1[13] => CH1_TXCTRL1_M[13]) = (0:0:0, 0:0:0);
    (CH1_TXCTRL1[14] => CH1_TXCTRL1_M[14]) = (0:0:0, 0:0:0);
    (CH1_TXCTRL1[15] => CH1_TXCTRL1_M[15]) = (0:0:0, 0:0:0);
    (CH1_TXCTRL1[1] => CH1_TXCTRL1_M[1]) = (0:0:0, 0:0:0);
    (CH1_TXCTRL1[2] => CH1_TXCTRL1_M[2]) = (0:0:0, 0:0:0);
    (CH1_TXCTRL1[3] => CH1_TXCTRL1_M[3]) = (0:0:0, 0:0:0);
    (CH1_TXCTRL1[4] => CH1_TXCTRL1_M[4]) = (0:0:0, 0:0:0);
    (CH1_TXCTRL1[5] => CH1_TXCTRL1_M[5]) = (0:0:0, 0:0:0);
    (CH1_TXCTRL1[6] => CH1_TXCTRL1_M[6]) = (0:0:0, 0:0:0);
    (CH1_TXCTRL1[7] => CH1_TXCTRL1_M[7]) = (0:0:0, 0:0:0);
    (CH1_TXCTRL1[8] => CH1_TXCTRL1_M[8]) = (0:0:0, 0:0:0);
    (CH1_TXCTRL1[9] => CH1_TXCTRL1_M[9]) = (0:0:0, 0:0:0);
    (CH1_TXCTRL2[0] => CH1_TXCTRL2_M[0]) = (0:0:0, 0:0:0);
    (CH1_TXCTRL2[1] => CH1_TXCTRL2_M[1]) = (0:0:0, 0:0:0);
    (CH1_TXCTRL2[2] => CH1_TXCTRL2_M[2]) = (0:0:0, 0:0:0);
    (CH1_TXCTRL2[3] => CH1_TXCTRL2_M[3]) = (0:0:0, 0:0:0);
    (CH1_TXCTRL2[4] => CH1_TXCTRL2_M[4]) = (0:0:0, 0:0:0);
    (CH1_TXCTRL2[5] => CH1_TXCTRL2_M[5]) = (0:0:0, 0:0:0);
    (CH1_TXCTRL2[6] => CH1_TXCTRL2_M[6]) = (0:0:0, 0:0:0);
    (CH1_TXCTRL2[7] => CH1_TXCTRL2_M[7]) = (0:0:0, 0:0:0);
    (CH1_TXDAPICODEOVRDEN => CH1_TXDAPICODEOVRDEN_M) = (0:0:0, 0:0:0);
    (CH1_TXDATAEXTENDRSVD[0] => CH1_TXDATAEXTENDRSVD_M[0]) = (0:0:0, 0:0:0);
    (CH1_TXDATAEXTENDRSVD[1] => CH1_TXDATAEXTENDRSVD_M[1]) = (0:0:0, 0:0:0);
    (CH1_TXDATAEXTENDRSVD[2] => CH1_TXDATAEXTENDRSVD_M[2]) = (0:0:0, 0:0:0);
    (CH1_TXDATAEXTENDRSVD[3] => CH1_TXDATAEXTENDRSVD_M[3]) = (0:0:0, 0:0:0);
    (CH1_TXDATAEXTENDRSVD[4] => CH1_TXDATAEXTENDRSVD_M[4]) = (0:0:0, 0:0:0);
    (CH1_TXDATAEXTENDRSVD[5] => CH1_TXDATAEXTENDRSVD_M[5]) = (0:0:0, 0:0:0);
    (CH1_TXDATAEXTENDRSVD[6] => CH1_TXDATAEXTENDRSVD_M[6]) = (0:0:0, 0:0:0);
    (CH1_TXDATAEXTENDRSVD[7] => CH1_TXDATAEXTENDRSVD_M[7]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[0] => CH1_TXDATA_M[0]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[100] => CH1_TXDATA_M[100]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[101] => CH1_TXDATA_M[101]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[102] => CH1_TXDATA_M[102]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[103] => CH1_TXDATA_M[103]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[104] => CH1_TXDATA_M[104]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[105] => CH1_TXDATA_M[105]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[106] => CH1_TXDATA_M[106]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[107] => CH1_TXDATA_M[107]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[108] => CH1_TXDATA_M[108]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[109] => CH1_TXDATA_M[109]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[10] => CH1_TXDATA_M[10]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[110] => CH1_TXDATA_M[110]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[111] => CH1_TXDATA_M[111]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[112] => CH1_TXDATA_M[112]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[113] => CH1_TXDATA_M[113]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[114] => CH1_TXDATA_M[114]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[115] => CH1_TXDATA_M[115]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[116] => CH1_TXDATA_M[116]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[117] => CH1_TXDATA_M[117]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[118] => CH1_TXDATA_M[118]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[119] => CH1_TXDATA_M[119]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[11] => CH1_TXDATA_M[11]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[120] => CH1_TXDATA_M[120]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[121] => CH1_TXDATA_M[121]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[122] => CH1_TXDATA_M[122]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[123] => CH1_TXDATA_M[123]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[124] => CH1_TXDATA_M[124]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[125] => CH1_TXDATA_M[125]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[126] => CH1_TXDATA_M[126]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[127] => CH1_TXDATA_M[127]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[12] => CH1_TXDATA_M[12]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[13] => CH1_TXDATA_M[13]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[14] => CH1_TXDATA_M[14]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[15] => CH1_TXDATA_M[15]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[16] => CH1_TXDATA_M[16]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[17] => CH1_TXDATA_M[17]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[18] => CH1_TXDATA_M[18]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[19] => CH1_TXDATA_M[19]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[1] => CH1_TXDATA_M[1]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[20] => CH1_TXDATA_M[20]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[21] => CH1_TXDATA_M[21]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[22] => CH1_TXDATA_M[22]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[23] => CH1_TXDATA_M[23]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[24] => CH1_TXDATA_M[24]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[25] => CH1_TXDATA_M[25]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[26] => CH1_TXDATA_M[26]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[27] => CH1_TXDATA_M[27]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[28] => CH1_TXDATA_M[28]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[29] => CH1_TXDATA_M[29]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[2] => CH1_TXDATA_M[2]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[30] => CH1_TXDATA_M[30]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[31] => CH1_TXDATA_M[31]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[32] => CH1_TXDATA_M[32]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[33] => CH1_TXDATA_M[33]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[34] => CH1_TXDATA_M[34]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[35] => CH1_TXDATA_M[35]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[36] => CH1_TXDATA_M[36]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[37] => CH1_TXDATA_M[37]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[38] => CH1_TXDATA_M[38]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[39] => CH1_TXDATA_M[39]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[3] => CH1_TXDATA_M[3]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[40] => CH1_TXDATA_M[40]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[41] => CH1_TXDATA_M[41]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[42] => CH1_TXDATA_M[42]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[43] => CH1_TXDATA_M[43]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[44] => CH1_TXDATA_M[44]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[45] => CH1_TXDATA_M[45]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[46] => CH1_TXDATA_M[46]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[47] => CH1_TXDATA_M[47]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[48] => CH1_TXDATA_M[48]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[49] => CH1_TXDATA_M[49]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[4] => CH1_TXDATA_M[4]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[50] => CH1_TXDATA_M[50]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[51] => CH1_TXDATA_M[51]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[52] => CH1_TXDATA_M[52]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[53] => CH1_TXDATA_M[53]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[54] => CH1_TXDATA_M[54]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[55] => CH1_TXDATA_M[55]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[56] => CH1_TXDATA_M[56]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[57] => CH1_TXDATA_M[57]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[58] => CH1_TXDATA_M[58]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[59] => CH1_TXDATA_M[59]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[5] => CH1_TXDATA_M[5]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[60] => CH1_TXDATA_M[60]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[61] => CH1_TXDATA_M[61]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[62] => CH1_TXDATA_M[62]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[63] => CH1_TXDATA_M[63]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[64] => CH1_TXDATA_M[64]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[65] => CH1_TXDATA_M[65]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[66] => CH1_TXDATA_M[66]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[67] => CH1_TXDATA_M[67]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[68] => CH1_TXDATA_M[68]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[69] => CH1_TXDATA_M[69]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[6] => CH1_TXDATA_M[6]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[70] => CH1_TXDATA_M[70]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[71] => CH1_TXDATA_M[71]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[72] => CH1_TXDATA_M[72]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[73] => CH1_TXDATA_M[73]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[74] => CH1_TXDATA_M[74]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[75] => CH1_TXDATA_M[75]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[76] => CH1_TXDATA_M[76]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[77] => CH1_TXDATA_M[77]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[78] => CH1_TXDATA_M[78]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[79] => CH1_TXDATA_M[79]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[7] => CH1_TXDATA_M[7]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[80] => CH1_TXDATA_M[80]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[81] => CH1_TXDATA_M[81]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[82] => CH1_TXDATA_M[82]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[83] => CH1_TXDATA_M[83]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[84] => CH1_TXDATA_M[84]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[85] => CH1_TXDATA_M[85]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[86] => CH1_TXDATA_M[86]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[87] => CH1_TXDATA_M[87]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[88] => CH1_TXDATA_M[88]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[89] => CH1_TXDATA_M[89]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[8] => CH1_TXDATA_M[8]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[90] => CH1_TXDATA_M[90]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[91] => CH1_TXDATA_M[91]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[92] => CH1_TXDATA_M[92]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[93] => CH1_TXDATA_M[93]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[94] => CH1_TXDATA_M[94]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[95] => CH1_TXDATA_M[95]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[96] => CH1_TXDATA_M[96]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[97] => CH1_TXDATA_M[97]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[98] => CH1_TXDATA_M[98]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[99] => CH1_TXDATA_M[99]) = (0:0:0, 0:0:0);
    (CH1_TXDATA[9] => CH1_TXDATA_M[9]) = (0:0:0, 0:0:0);
    (CH1_TXDCCDONE_M => CH1_TXDCCDONE) = (0:0:0, 0:0:0);
    (CH1_TXDEEMPH[0] => CH1_TXDEEMPH_M[0]) = (0:0:0, 0:0:0);
    (CH1_TXDEEMPH[1] => CH1_TXDEEMPH_M[1]) = (0:0:0, 0:0:0);
    (CH1_TXDETECTRX => CH1_TXDETECTRX_M) = (0:0:0, 0:0:0);
    (CH1_TXDIFFCTRL[0] => CH1_TXDIFFCTRL_M[0]) = (0:0:0, 0:0:0);
    (CH1_TXDIFFCTRL[1] => CH1_TXDIFFCTRL_M[1]) = (0:0:0, 0:0:0);
    (CH1_TXDIFFCTRL[2] => CH1_TXDIFFCTRL_M[2]) = (0:0:0, 0:0:0);
    (CH1_TXDIFFCTRL[3] => CH1_TXDIFFCTRL_M[3]) = (0:0:0, 0:0:0);
    (CH1_TXDIFFCTRL[4] => CH1_TXDIFFCTRL_M[4]) = (0:0:0, 0:0:0);
    (CH1_TXDLYALIGNERR_M => CH1_TXDLYALIGNERR) = (0:0:0, 0:0:0);
    (CH1_TXDLYALIGNPROG_M => CH1_TXDLYALIGNPROG) = (0:0:0, 0:0:0);
    (CH1_TXDLYALIGNREQ => CH1_TXDLYALIGNREQ_M) = (0:0:0, 0:0:0);
    (CH1_TXELECIDLE => CH1_TXELECIDLE_M) = (0:0:0, 0:0:0);
    (CH1_TXHEADER[0] => CH1_TXHEADER_M[0]) = (0:0:0, 0:0:0);
    (CH1_TXHEADER[1] => CH1_TXHEADER_M[1]) = (0:0:0, 0:0:0);
    (CH1_TXHEADER[2] => CH1_TXHEADER_M[2]) = (0:0:0, 0:0:0);
    (CH1_TXHEADER[3] => CH1_TXHEADER_M[3]) = (0:0:0, 0:0:0);
    (CH1_TXHEADER[4] => CH1_TXHEADER_M[4]) = (0:0:0, 0:0:0);
    (CH1_TXHEADER[5] => CH1_TXHEADER_M[5]) = (0:0:0, 0:0:0);
    (CH1_TXINHIBIT => CH1_TXINHIBIT_M) = (0:0:0, 0:0:0);
    (CH1_TXLATCLK => CH1_TXLATCLK_M) = (0:0:0, 0:0:0);
    (CH1_TXMAINCURSOR[0] => CH1_TXMAINCURSOR_M[0]) = (0:0:0, 0:0:0);
    (CH1_TXMAINCURSOR[1] => CH1_TXMAINCURSOR_M[1]) = (0:0:0, 0:0:0);
    (CH1_TXMAINCURSOR[2] => CH1_TXMAINCURSOR_M[2]) = (0:0:0, 0:0:0);
    (CH1_TXMAINCURSOR[3] => CH1_TXMAINCURSOR_M[3]) = (0:0:0, 0:0:0);
    (CH1_TXMAINCURSOR[4] => CH1_TXMAINCURSOR_M[4]) = (0:0:0, 0:0:0);
    (CH1_TXMAINCURSOR[5] => CH1_TXMAINCURSOR_M[5]) = (0:0:0, 0:0:0);
    (CH1_TXMAINCURSOR[6] => CH1_TXMAINCURSOR_M[6]) = (0:0:0, 0:0:0);
    (CH1_TXMARGIN[0] => CH1_TXMARGIN_M[0]) = (0:0:0, 0:0:0);
    (CH1_TXMARGIN[1] => CH1_TXMARGIN_M[1]) = (0:0:0, 0:0:0);
    (CH1_TXMARGIN[2] => CH1_TXMARGIN_M[2]) = (0:0:0, 0:0:0);
    (CH1_TXMLDCHAINDONE => CH1_TXMLDCHAINDONE_M) = (0:0:0, 0:0:0);
    (CH1_TXMLDCHAINREQ => CH1_TXMLDCHAINREQ_M) = (0:0:0, 0:0:0);
    (CH1_TXONESZEROS => CH1_TXONESZEROS_M) = (0:0:0, 0:0:0);
    (CH1_TXPAUSEDELAYALIGN => CH1_TXPAUSEDELAYALIGN_M) = (0:0:0, 0:0:0);
    (CH1_TXPD[0] => CH1_TXPD_M[0]) = (0:0:0, 0:0:0);
    (CH1_TXPD[1] => CH1_TXPD_M[1]) = (0:0:0, 0:0:0);
    (CH1_TXPHALIGNDONE_M => CH1_TXPHALIGNDONE) = (0:0:0, 0:0:0);
    (CH1_TXPHALIGNERR_M => CH1_TXPHALIGNERR) = (0:0:0, 0:0:0);
    (CH1_TXPHALIGNOUTRSVD_M => CH1_TXPHALIGNOUTRSVD) = (0:0:0, 0:0:0);
    (CH1_TXPHALIGNREQ => CH1_TXPHALIGNREQ_M) = (0:0:0, 0:0:0);
    (CH1_TXPHDLYPD => CH1_TXPHDLYPD_M) = (0:0:0, 0:0:0);
    (CH1_TXPHDLYTSTCLK => CH1_TXPHDLYTSTCLK_M) = (0:0:0, 0:0:0);
    (CH1_TXPHSHIFT180 => CH1_TXPHSHIFT180_M) = (0:0:0, 0:0:0);
    (CH1_TXPHSHIFT180DONE_M => CH1_TXPHSHIFT180DONE) = (0:0:0, 0:0:0);
    (CH1_TXPICODEOVRDEN => CH1_TXPICODEOVRDEN_M) = (0:0:0, 0:0:0);
    (CH1_TXPIPPMEN => CH1_TXPIPPMEN_M) = (0:0:0, 0:0:0);
    (CH1_TXPIPPMSTEPSIZE[0] => CH1_TXPIPPMSTEPSIZE_M[0]) = (0:0:0, 0:0:0);
    (CH1_TXPIPPMSTEPSIZE[1] => CH1_TXPIPPMSTEPSIZE_M[1]) = (0:0:0, 0:0:0);
    (CH1_TXPIPPMSTEPSIZE[2] => CH1_TXPIPPMSTEPSIZE_M[2]) = (0:0:0, 0:0:0);
    (CH1_TXPIPPMSTEPSIZE[3] => CH1_TXPIPPMSTEPSIZE_M[3]) = (0:0:0, 0:0:0);
    (CH1_TXPIPPMSTEPSIZE[4] => CH1_TXPIPPMSTEPSIZE_M[4]) = (0:0:0, 0:0:0);
    (CH1_TXPISOPD => CH1_TXPISOPD_M) = (0:0:0, 0:0:0);
    (CH1_TXPOLARITY => CH1_TXPOLARITY_M) = (0:0:0, 0:0:0);
    (CH1_TXPOSTCURSOR[0] => CH1_TXPOSTCURSOR_M[0]) = (0:0:0, 0:0:0);
    (CH1_TXPOSTCURSOR[1] => CH1_TXPOSTCURSOR_M[1]) = (0:0:0, 0:0:0);
    (CH1_TXPOSTCURSOR[2] => CH1_TXPOSTCURSOR_M[2]) = (0:0:0, 0:0:0);
    (CH1_TXPOSTCURSOR[3] => CH1_TXPOSTCURSOR_M[3]) = (0:0:0, 0:0:0);
    (CH1_TXPOSTCURSOR[4] => CH1_TXPOSTCURSOR_M[4]) = (0:0:0, 0:0:0);
    (CH1_TXPRBSFORCEERR => CH1_TXPRBSFORCEERR_M) = (0:0:0, 0:0:0);
    (CH1_TXPRBSSEL[0] => CH1_TXPRBSSEL_M[0]) = (0:0:0, 0:0:0);
    (CH1_TXPRBSSEL[1] => CH1_TXPRBSSEL_M[1]) = (0:0:0, 0:0:0);
    (CH1_TXPRBSSEL[2] => CH1_TXPRBSSEL_M[2]) = (0:0:0, 0:0:0);
    (CH1_TXPRBSSEL[3] => CH1_TXPRBSSEL_M[3]) = (0:0:0, 0:0:0);
    (CH1_TXRATE[0] => CH1_TXRATE_M[0]) = (0:0:0, 0:0:0);
    (CH1_TXRATE[1] => CH1_TXRATE_M[1]) = (0:0:0, 0:0:0);
    (CH1_TXRATE[2] => CH1_TXRATE_M[2]) = (0:0:0, 0:0:0);
    (CH1_TXRATE[3] => CH1_TXRATE_M[3]) = (0:0:0, 0:0:0);
    (CH1_TXRATE[4] => CH1_TXRATE_M[4]) = (0:0:0, 0:0:0);
    (CH1_TXRATE[5] => CH1_TXRATE_M[5]) = (0:0:0, 0:0:0);
    (CH1_TXRATE[6] => CH1_TXRATE_M[6]) = (0:0:0, 0:0:0);
    (CH1_TXRATE[7] => CH1_TXRATE_M[7]) = (0:0:0, 0:0:0);
    (CH1_TXSEQUENCE[0] => CH1_TXSEQUENCE_M[0]) = (0:0:0, 0:0:0);
    (CH1_TXSEQUENCE[1] => CH1_TXSEQUENCE_M[1]) = (0:0:0, 0:0:0);
    (CH1_TXSEQUENCE[2] => CH1_TXSEQUENCE_M[2]) = (0:0:0, 0:0:0);
    (CH1_TXSEQUENCE[3] => CH1_TXSEQUENCE_M[3]) = (0:0:0, 0:0:0);
    (CH1_TXSEQUENCE[4] => CH1_TXSEQUENCE_M[4]) = (0:0:0, 0:0:0);
    (CH1_TXSEQUENCE[5] => CH1_TXSEQUENCE_M[5]) = (0:0:0, 0:0:0);
    (CH1_TXSEQUENCE[6] => CH1_TXSEQUENCE_M[6]) = (0:0:0, 0:0:0);
    (CH1_TXSWING => CH1_TXSWING_M) = (0:0:0, 0:0:0);
    (CH1_TXSYNCALLIN => CH1_TXSYNCALLIN_M) = (0:0:0, 0:0:0);
    (CH1_TXSYNCDONE_M => CH1_TXSYNCDONE) = (0:0:0, 0:0:0);
    (CH1_TXUSERRDY => CH1_TXUSERRDY_M) = (0:0:0, 0:0:0);
    (CH1_TXUSRCLK => CH1_TXUSRCLK_M) = (0:0:0, 0:0:0);
    (CH2_BUFGTCEMASK_M[0] => CH2_BUFGTCEMASK[0]) = (0:0:0, 0:0:0);
    (CH2_BUFGTCEMASK_M[1] => CH2_BUFGTCEMASK[1]) = (0:0:0, 0:0:0);
    (CH2_BUFGTCEMASK_M[2] => CH2_BUFGTCEMASK[2]) = (0:0:0, 0:0:0);
    (CH2_BUFGTCEMASK_M[3] => CH2_BUFGTCEMASK[3]) = (0:0:0, 0:0:0);
    (CH2_BUFGTCE_M => CH2_BUFGTCE) = (0:0:0, 0:0:0);
    (CH2_BUFGTDIV_M[0] => CH2_BUFGTDIV[0]) = (0:0:0, 0:0:0);
    (CH2_BUFGTDIV_M[10] => CH2_BUFGTDIV[10]) = (0:0:0, 0:0:0);
    (CH2_BUFGTDIV_M[11] => CH2_BUFGTDIV[11]) = (0:0:0, 0:0:0);
    (CH2_BUFGTDIV_M[1] => CH2_BUFGTDIV[1]) = (0:0:0, 0:0:0);
    (CH2_BUFGTDIV_M[2] => CH2_BUFGTDIV[2]) = (0:0:0, 0:0:0);
    (CH2_BUFGTDIV_M[3] => CH2_BUFGTDIV[3]) = (0:0:0, 0:0:0);
    (CH2_BUFGTDIV_M[4] => CH2_BUFGTDIV[4]) = (0:0:0, 0:0:0);
    (CH2_BUFGTDIV_M[5] => CH2_BUFGTDIV[5]) = (0:0:0, 0:0:0);
    (CH2_BUFGTDIV_M[6] => CH2_BUFGTDIV[6]) = (0:0:0, 0:0:0);
    (CH2_BUFGTDIV_M[7] => CH2_BUFGTDIV[7]) = (0:0:0, 0:0:0);
    (CH2_BUFGTDIV_M[8] => CH2_BUFGTDIV[8]) = (0:0:0, 0:0:0);
    (CH2_BUFGTDIV_M[9] => CH2_BUFGTDIV[9]) = (0:0:0, 0:0:0);
    (CH2_CDRBMCDRREQ => CH2_CDRBMCDRREQ_M) = (0:0:0, 0:0:0);
    (CH2_CDRFREQOS => CH2_CDRFREQOS_M) = (0:0:0, 0:0:0);
    (CH2_CDRINCPCTRL => CH2_CDRINCPCTRL_M) = (0:0:0, 0:0:0);
    (CH2_CFOKOVRDFINISH => CH2_CFOKOVRDFINISH_M) = (0:0:0, 0:0:0);
    (CH2_CFOKOVRDPULSE => CH2_CFOKOVRDPULSE_M) = (0:0:0, 0:0:0);
    (CH2_CFOKOVRDRDY0_M => CH2_CFOKOVRDRDY0) = (0:0:0, 0:0:0);
    (CH2_CFOKOVRDRDY1_M => CH2_CFOKOVRDRDY1) = (0:0:0, 0:0:0);
    (CH2_CFOKOVRDSTART => CH2_CFOKOVRDSTART_M) = (0:0:0, 0:0:0);
    (CH2_CLKRSVD0 => CH2_CLKRSVD0_M) = (0:0:0, 0:0:0);
    (CH2_CLKRSVD1 => CH2_CLKRSVD1_M) = (0:0:0, 0:0:0);
    (CH2_DMONITORCLK => CH2_DMONITORCLK_M) = (0:0:0, 0:0:0);
    (CH2_DMONITOROUT_M[0] => CH2_DMONITOROUT[0]) = (0:0:0, 0:0:0);
    (CH2_DMONITOROUT_M[10] => CH2_DMONITOROUT[10]) = (0:0:0, 0:0:0);
    (CH2_DMONITOROUT_M[11] => CH2_DMONITOROUT[11]) = (0:0:0, 0:0:0);
    (CH2_DMONITOROUT_M[12] => CH2_DMONITOROUT[12]) = (0:0:0, 0:0:0);
    (CH2_DMONITOROUT_M[13] => CH2_DMONITOROUT[13]) = (0:0:0, 0:0:0);
    (CH2_DMONITOROUT_M[14] => CH2_DMONITOROUT[14]) = (0:0:0, 0:0:0);
    (CH2_DMONITOROUT_M[15] => CH2_DMONITOROUT[15]) = (0:0:0, 0:0:0);
    (CH2_DMONITOROUT_M[16] => CH2_DMONITOROUT[16]) = (0:0:0, 0:0:0);
    (CH2_DMONITOROUT_M[17] => CH2_DMONITOROUT[17]) = (0:0:0, 0:0:0);
    (CH2_DMONITOROUT_M[18] => CH2_DMONITOROUT[18]) = (0:0:0, 0:0:0);
    (CH2_DMONITOROUT_M[19] => CH2_DMONITOROUT[19]) = (0:0:0, 0:0:0);
    (CH2_DMONITOROUT_M[1] => CH2_DMONITOROUT[1]) = (0:0:0, 0:0:0);
    (CH2_DMONITOROUT_M[20] => CH2_DMONITOROUT[20]) = (0:0:0, 0:0:0);
    (CH2_DMONITOROUT_M[21] => CH2_DMONITOROUT[21]) = (0:0:0, 0:0:0);
    (CH2_DMONITOROUT_M[22] => CH2_DMONITOROUT[22]) = (0:0:0, 0:0:0);
    (CH2_DMONITOROUT_M[23] => CH2_DMONITOROUT[23]) = (0:0:0, 0:0:0);
    (CH2_DMONITOROUT_M[24] => CH2_DMONITOROUT[24]) = (0:0:0, 0:0:0);
    (CH2_DMONITOROUT_M[25] => CH2_DMONITOROUT[25]) = (0:0:0, 0:0:0);
    (CH2_DMONITOROUT_M[26] => CH2_DMONITOROUT[26]) = (0:0:0, 0:0:0);
    (CH2_DMONITOROUT_M[27] => CH2_DMONITOROUT[27]) = (0:0:0, 0:0:0);
    (CH2_DMONITOROUT_M[28] => CH2_DMONITOROUT[28]) = (0:0:0, 0:0:0);
    (CH2_DMONITOROUT_M[29] => CH2_DMONITOROUT[29]) = (0:0:0, 0:0:0);
    (CH2_DMONITOROUT_M[2] => CH2_DMONITOROUT[2]) = (0:0:0, 0:0:0);
    (CH2_DMONITOROUT_M[30] => CH2_DMONITOROUT[30]) = (0:0:0, 0:0:0);
    (CH2_DMONITOROUT_M[31] => CH2_DMONITOROUT[31]) = (0:0:0, 0:0:0);
    (CH2_DMONITOROUT_M[3] => CH2_DMONITOROUT[3]) = (0:0:0, 0:0:0);
    (CH2_DMONITOROUT_M[4] => CH2_DMONITOROUT[4]) = (0:0:0, 0:0:0);
    (CH2_DMONITOROUT_M[5] => CH2_DMONITOROUT[5]) = (0:0:0, 0:0:0);
    (CH2_DMONITOROUT_M[6] => CH2_DMONITOROUT[6]) = (0:0:0, 0:0:0);
    (CH2_DMONITOROUT_M[7] => CH2_DMONITOROUT[7]) = (0:0:0, 0:0:0);
    (CH2_DMONITOROUT_M[8] => CH2_DMONITOROUT[8]) = (0:0:0, 0:0:0);
    (CH2_DMONITOROUT_M[9] => CH2_DMONITOROUT[9]) = (0:0:0, 0:0:0);
    (CH2_EYESCANDATAERROR_M => CH2_EYESCANDATAERROR) = (0:0:0, 0:0:0);
    (CH2_EYESCANTRIGGER => CH2_EYESCANTRIGGER_M) = (0:0:0, 0:0:0);
    (CH2_GTRSVD[0] => CH2_GTRSVD_M[0]) = (0:0:0, 0:0:0);
    (CH2_GTRSVD[10] => CH2_GTRSVD_M[10]) = (0:0:0, 0:0:0);
    (CH2_GTRSVD[11] => CH2_GTRSVD_M[11]) = (0:0:0, 0:0:0);
    (CH2_GTRSVD[12] => CH2_GTRSVD_M[12]) = (0:0:0, 0:0:0);
    (CH2_GTRSVD[13] => CH2_GTRSVD_M[13]) = (0:0:0, 0:0:0);
    (CH2_GTRSVD[14] => CH2_GTRSVD_M[14]) = (0:0:0, 0:0:0);
    (CH2_GTRSVD[15] => CH2_GTRSVD_M[15]) = (0:0:0, 0:0:0);
    (CH2_GTRSVD[1] => CH2_GTRSVD_M[1]) = (0:0:0, 0:0:0);
    (CH2_GTRSVD[2] => CH2_GTRSVD_M[2]) = (0:0:0, 0:0:0);
    (CH2_GTRSVD[3] => CH2_GTRSVD_M[3]) = (0:0:0, 0:0:0);
    (CH2_GTRSVD[4] => CH2_GTRSVD_M[4]) = (0:0:0, 0:0:0);
    (CH2_GTRSVD[5] => CH2_GTRSVD_M[5]) = (0:0:0, 0:0:0);
    (CH2_GTRSVD[6] => CH2_GTRSVD_M[6]) = (0:0:0, 0:0:0);
    (CH2_GTRSVD[7] => CH2_GTRSVD_M[7]) = (0:0:0, 0:0:0);
    (CH2_GTRSVD[8] => CH2_GTRSVD_M[8]) = (0:0:0, 0:0:0);
    (CH2_GTRSVD[9] => CH2_GTRSVD_M[9]) = (0:0:0, 0:0:0);
    (CH2_LOOPBACK[0] => CH2_LOOPBACK_M[0]) = (0:0:0, 0:0:0);
    (CH2_LOOPBACK[1] => CH2_LOOPBACK_M[1]) = (0:0:0, 0:0:0);
    (CH2_LOOPBACK[2] => CH2_LOOPBACK_M[2]) = (0:0:0, 0:0:0);
    (CH2_PCSRSVDIN[0] => CH2_PCSRSVDIN_M[0]) = (0:0:0, 0:0:0);
    (CH2_PCSRSVDIN[10] => CH2_PCSRSVDIN_M[10]) = (0:0:0, 0:0:0);
    (CH2_PCSRSVDIN[11] => CH2_PCSRSVDIN_M[11]) = (0:0:0, 0:0:0);
    (CH2_PCSRSVDIN[12] => CH2_PCSRSVDIN_M[12]) = (0:0:0, 0:0:0);
    (CH2_PCSRSVDIN[13] => CH2_PCSRSVDIN_M[13]) = (0:0:0, 0:0:0);
    (CH2_PCSRSVDIN[14] => CH2_PCSRSVDIN_M[14]) = (0:0:0, 0:0:0);
    (CH2_PCSRSVDIN[15] => CH2_PCSRSVDIN_M[15]) = (0:0:0, 0:0:0);
    (CH2_PCSRSVDIN[1] => CH2_PCSRSVDIN_M[1]) = (0:0:0, 0:0:0);
    (CH2_PCSRSVDIN[2] => CH2_PCSRSVDIN_M[2]) = (0:0:0, 0:0:0);
    (CH2_PCSRSVDIN[3] => CH2_PCSRSVDIN_M[3]) = (0:0:0, 0:0:0);
    (CH2_PCSRSVDIN[4] => CH2_PCSRSVDIN_M[4]) = (0:0:0, 0:0:0);
    (CH2_PCSRSVDIN[5] => CH2_PCSRSVDIN_M[5]) = (0:0:0, 0:0:0);
    (CH2_PCSRSVDIN[6] => CH2_PCSRSVDIN_M[6]) = (0:0:0, 0:0:0);
    (CH2_PCSRSVDIN[7] => CH2_PCSRSVDIN_M[7]) = (0:0:0, 0:0:0);
    (CH2_PCSRSVDIN[8] => CH2_PCSRSVDIN_M[8]) = (0:0:0, 0:0:0);
    (CH2_PCSRSVDIN[9] => CH2_PCSRSVDIN_M[9]) = (0:0:0, 0:0:0);
    (CH2_PCSRSVDOUT_M[0] => CH2_PCSRSVDOUT[0]) = (0:0:0, 0:0:0);
    (CH2_PCSRSVDOUT_M[10] => CH2_PCSRSVDOUT[10]) = (0:0:0, 0:0:0);
    (CH2_PCSRSVDOUT_M[11] => CH2_PCSRSVDOUT[11]) = (0:0:0, 0:0:0);
    (CH2_PCSRSVDOUT_M[12] => CH2_PCSRSVDOUT[12]) = (0:0:0, 0:0:0);
    (CH2_PCSRSVDOUT_M[13] => CH2_PCSRSVDOUT[13]) = (0:0:0, 0:0:0);
    (CH2_PCSRSVDOUT_M[14] => CH2_PCSRSVDOUT[14]) = (0:0:0, 0:0:0);
    (CH2_PCSRSVDOUT_M[15] => CH2_PCSRSVDOUT[15]) = (0:0:0, 0:0:0);
    (CH2_PCSRSVDOUT_M[1] => CH2_PCSRSVDOUT[1]) = (0:0:0, 0:0:0);
    (CH2_PCSRSVDOUT_M[2] => CH2_PCSRSVDOUT[2]) = (0:0:0, 0:0:0);
    (CH2_PCSRSVDOUT_M[3] => CH2_PCSRSVDOUT[3]) = (0:0:0, 0:0:0);
    (CH2_PCSRSVDOUT_M[4] => CH2_PCSRSVDOUT[4]) = (0:0:0, 0:0:0);
    (CH2_PCSRSVDOUT_M[5] => CH2_PCSRSVDOUT[5]) = (0:0:0, 0:0:0);
    (CH2_PCSRSVDOUT_M[6] => CH2_PCSRSVDOUT[6]) = (0:0:0, 0:0:0);
    (CH2_PCSRSVDOUT_M[7] => CH2_PCSRSVDOUT[7]) = (0:0:0, 0:0:0);
    (CH2_PCSRSVDOUT_M[8] => CH2_PCSRSVDOUT[8]) = (0:0:0, 0:0:0);
    (CH2_PCSRSVDOUT_M[9] => CH2_PCSRSVDOUT[9]) = (0:0:0, 0:0:0);
    (CH2_PHYESMADAPTSAVE => CH2_PHYESMADAPTSAVE_M) = (0:0:0, 0:0:0);
    (CH2_PHYREADY_M => CH2_PHYREADY) = (0:0:0, 0:0:0);
    (CH2_PHYSTATUS_M => CH2_PHYSTATUS) = (0:0:0, 0:0:0);
    (CH2_PINRSVDAS_M[0] => CH2_PINRSVDAS[0]) = (0:0:0, 0:0:0);
    (CH2_PINRSVDAS_M[10] => CH2_PINRSVDAS[10]) = (0:0:0, 0:0:0);
    (CH2_PINRSVDAS_M[11] => CH2_PINRSVDAS[11]) = (0:0:0, 0:0:0);
    (CH2_PINRSVDAS_M[12] => CH2_PINRSVDAS[12]) = (0:0:0, 0:0:0);
    (CH2_PINRSVDAS_M[13] => CH2_PINRSVDAS[13]) = (0:0:0, 0:0:0);
    (CH2_PINRSVDAS_M[14] => CH2_PINRSVDAS[14]) = (0:0:0, 0:0:0);
    (CH2_PINRSVDAS_M[15] => CH2_PINRSVDAS[15]) = (0:0:0, 0:0:0);
    (CH2_PINRSVDAS_M[1] => CH2_PINRSVDAS[1]) = (0:0:0, 0:0:0);
    (CH2_PINRSVDAS_M[2] => CH2_PINRSVDAS[2]) = (0:0:0, 0:0:0);
    (CH2_PINRSVDAS_M[3] => CH2_PINRSVDAS[3]) = (0:0:0, 0:0:0);
    (CH2_PINRSVDAS_M[4] => CH2_PINRSVDAS[4]) = (0:0:0, 0:0:0);
    (CH2_PINRSVDAS_M[5] => CH2_PINRSVDAS[5]) = (0:0:0, 0:0:0);
    (CH2_PINRSVDAS_M[6] => CH2_PINRSVDAS[6]) = (0:0:0, 0:0:0);
    (CH2_PINRSVDAS_M[7] => CH2_PINRSVDAS[7]) = (0:0:0, 0:0:0);
    (CH2_PINRSVDAS_M[8] => CH2_PINRSVDAS[8]) = (0:0:0, 0:0:0);
    (CH2_PINRSVDAS_M[9] => CH2_PINRSVDAS[9]) = (0:0:0, 0:0:0);
    (CH2_RX10GSTAT_M[0] => CH2_RX10GSTAT[0]) = (0:0:0, 0:0:0);
    (CH2_RX10GSTAT_M[1] => CH2_RX10GSTAT[1]) = (0:0:0, 0:0:0);
    (CH2_RX10GSTAT_M[2] => CH2_RX10GSTAT[2]) = (0:0:0, 0:0:0);
    (CH2_RX10GSTAT_M[3] => CH2_RX10GSTAT[3]) = (0:0:0, 0:0:0);
    (CH2_RX10GSTAT_M[4] => CH2_RX10GSTAT[4]) = (0:0:0, 0:0:0);
    (CH2_RX10GSTAT_M[5] => CH2_RX10GSTAT[5]) = (0:0:0, 0:0:0);
    (CH2_RX10GSTAT_M[6] => CH2_RX10GSTAT[6]) = (0:0:0, 0:0:0);
    (CH2_RX10GSTAT_M[7] => CH2_RX10GSTAT[7]) = (0:0:0, 0:0:0);
    (CH2_RXBUFSTATUS_M[0] => CH2_RXBUFSTATUS[0]) = (0:0:0, 0:0:0);
    (CH2_RXBUFSTATUS_M[1] => CH2_RXBUFSTATUS[1]) = (0:0:0, 0:0:0);
    (CH2_RXBUFSTATUS_M[2] => CH2_RXBUFSTATUS[2]) = (0:0:0, 0:0:0);
    (CH2_RXBYTEISALIGNED_M => CH2_RXBYTEISALIGNED) = (0:0:0, 0:0:0);
    (CH2_RXBYTEREALIGN_M => CH2_RXBYTEREALIGN) = (0:0:0, 0:0:0);
    (CH2_RXCDRHOLD => CH2_RXCDRHOLD_M) = (0:0:0, 0:0:0);
    (CH2_RXCDRLOCK_M => CH2_RXCDRLOCK) = (0:0:0, 0:0:0);
    (CH2_RXCDROVRDEN => CH2_RXCDROVRDEN_M) = (0:0:0, 0:0:0);
    (CH2_RXCDRPHDONE_M => CH2_RXCDRPHDONE) = (0:0:0, 0:0:0);
    (CH2_RXCHANBONDSEQ_M => CH2_RXCHANBONDSEQ) = (0:0:0, 0:0:0);
    (CH2_RXCHANISALIGNED_M => CH2_RXCHANISALIGNED) = (0:0:0, 0:0:0);
    (CH2_RXCHANREALIGN_M => CH2_RXCHANREALIGN) = (0:0:0, 0:0:0);
    (CH2_RXCHBONDI[0] => CH2_RXCHBONDI_M[0]) = (0:0:0, 0:0:0);
    (CH2_RXCHBONDI[1] => CH2_RXCHBONDI_M[1]) = (0:0:0, 0:0:0);
    (CH2_RXCHBONDI[2] => CH2_RXCHBONDI_M[2]) = (0:0:0, 0:0:0);
    (CH2_RXCHBONDI[3] => CH2_RXCHBONDI_M[3]) = (0:0:0, 0:0:0);
    (CH2_RXCHBONDI[4] => CH2_RXCHBONDI_M[4]) = (0:0:0, 0:0:0);
    (CH2_RXCHBONDO_M[0] => CH2_RXCHBONDO[0]) = (0:0:0, 0:0:0);
    (CH2_RXCHBONDO_M[1] => CH2_RXCHBONDO[1]) = (0:0:0, 0:0:0);
    (CH2_RXCHBONDO_M[2] => CH2_RXCHBONDO[2]) = (0:0:0, 0:0:0);
    (CH2_RXCHBONDO_M[3] => CH2_RXCHBONDO[3]) = (0:0:0, 0:0:0);
    (CH2_RXCHBONDO_M[4] => CH2_RXCHBONDO[4]) = (0:0:0, 0:0:0);
    (CH2_RXCLKCORCNT_M[0] => CH2_RXCLKCORCNT[0]) = (0:0:0, 0:0:0);
    (CH2_RXCLKCORCNT_M[1] => CH2_RXCLKCORCNT[1]) = (0:0:0, 0:0:0);
    (CH2_RXCOMINITDET_M => CH2_RXCOMINITDET) = (0:0:0, 0:0:0);
    (CH2_RXCOMMADET_M => CH2_RXCOMMADET) = (0:0:0, 0:0:0);
    (CH2_RXCOMSASDET_M => CH2_RXCOMSASDET) = (0:0:0, 0:0:0);
    (CH2_RXCOMWAKEDET_M => CH2_RXCOMWAKEDET) = (0:0:0, 0:0:0);
    (CH2_RXCTRL0_M[0] => CH2_RXCTRL0[0]) = (0:0:0, 0:0:0);
    (CH2_RXCTRL0_M[10] => CH2_RXCTRL0[10]) = (0:0:0, 0:0:0);
    (CH2_RXCTRL0_M[11] => CH2_RXCTRL0[11]) = (0:0:0, 0:0:0);
    (CH2_RXCTRL0_M[12] => CH2_RXCTRL0[12]) = (0:0:0, 0:0:0);
    (CH2_RXCTRL0_M[13] => CH2_RXCTRL0[13]) = (0:0:0, 0:0:0);
    (CH2_RXCTRL0_M[14] => CH2_RXCTRL0[14]) = (0:0:0, 0:0:0);
    (CH2_RXCTRL0_M[15] => CH2_RXCTRL0[15]) = (0:0:0, 0:0:0);
    (CH2_RXCTRL0_M[1] => CH2_RXCTRL0[1]) = (0:0:0, 0:0:0);
    (CH2_RXCTRL0_M[2] => CH2_RXCTRL0[2]) = (0:0:0, 0:0:0);
    (CH2_RXCTRL0_M[3] => CH2_RXCTRL0[3]) = (0:0:0, 0:0:0);
    (CH2_RXCTRL0_M[4] => CH2_RXCTRL0[4]) = (0:0:0, 0:0:0);
    (CH2_RXCTRL0_M[5] => CH2_RXCTRL0[5]) = (0:0:0, 0:0:0);
    (CH2_RXCTRL0_M[6] => CH2_RXCTRL0[6]) = (0:0:0, 0:0:0);
    (CH2_RXCTRL0_M[7] => CH2_RXCTRL0[7]) = (0:0:0, 0:0:0);
    (CH2_RXCTRL0_M[8] => CH2_RXCTRL0[8]) = (0:0:0, 0:0:0);
    (CH2_RXCTRL0_M[9] => CH2_RXCTRL0[9]) = (0:0:0, 0:0:0);
    (CH2_RXCTRL1_M[0] => CH2_RXCTRL1[0]) = (0:0:0, 0:0:0);
    (CH2_RXCTRL1_M[10] => CH2_RXCTRL1[10]) = (0:0:0, 0:0:0);
    (CH2_RXCTRL1_M[11] => CH2_RXCTRL1[11]) = (0:0:0, 0:0:0);
    (CH2_RXCTRL1_M[12] => CH2_RXCTRL1[12]) = (0:0:0, 0:0:0);
    (CH2_RXCTRL1_M[13] => CH2_RXCTRL1[13]) = (0:0:0, 0:0:0);
    (CH2_RXCTRL1_M[14] => CH2_RXCTRL1[14]) = (0:0:0, 0:0:0);
    (CH2_RXCTRL1_M[15] => CH2_RXCTRL1[15]) = (0:0:0, 0:0:0);
    (CH2_RXCTRL1_M[1] => CH2_RXCTRL1[1]) = (0:0:0, 0:0:0);
    (CH2_RXCTRL1_M[2] => CH2_RXCTRL1[2]) = (0:0:0, 0:0:0);
    (CH2_RXCTRL1_M[3] => CH2_RXCTRL1[3]) = (0:0:0, 0:0:0);
    (CH2_RXCTRL1_M[4] => CH2_RXCTRL1[4]) = (0:0:0, 0:0:0);
    (CH2_RXCTRL1_M[5] => CH2_RXCTRL1[5]) = (0:0:0, 0:0:0);
    (CH2_RXCTRL1_M[6] => CH2_RXCTRL1[6]) = (0:0:0, 0:0:0);
    (CH2_RXCTRL1_M[7] => CH2_RXCTRL1[7]) = (0:0:0, 0:0:0);
    (CH2_RXCTRL1_M[8] => CH2_RXCTRL1[8]) = (0:0:0, 0:0:0);
    (CH2_RXCTRL1_M[9] => CH2_RXCTRL1[9]) = (0:0:0, 0:0:0);
    (CH2_RXCTRL2_M[0] => CH2_RXCTRL2[0]) = (0:0:0, 0:0:0);
    (CH2_RXCTRL2_M[1] => CH2_RXCTRL2[1]) = (0:0:0, 0:0:0);
    (CH2_RXCTRL2_M[2] => CH2_RXCTRL2[2]) = (0:0:0, 0:0:0);
    (CH2_RXCTRL2_M[3] => CH2_RXCTRL2[3]) = (0:0:0, 0:0:0);
    (CH2_RXCTRL2_M[4] => CH2_RXCTRL2[4]) = (0:0:0, 0:0:0);
    (CH2_RXCTRL2_M[5] => CH2_RXCTRL2[5]) = (0:0:0, 0:0:0);
    (CH2_RXCTRL2_M[6] => CH2_RXCTRL2[6]) = (0:0:0, 0:0:0);
    (CH2_RXCTRL2_M[7] => CH2_RXCTRL2[7]) = (0:0:0, 0:0:0);
    (CH2_RXCTRL3_M[0] => CH2_RXCTRL3[0]) = (0:0:0, 0:0:0);
    (CH2_RXCTRL3_M[1] => CH2_RXCTRL3[1]) = (0:0:0, 0:0:0);
    (CH2_RXCTRL3_M[2] => CH2_RXCTRL3[2]) = (0:0:0, 0:0:0);
    (CH2_RXCTRL3_M[3] => CH2_RXCTRL3[3]) = (0:0:0, 0:0:0);
    (CH2_RXCTRL3_M[4] => CH2_RXCTRL3[4]) = (0:0:0, 0:0:0);
    (CH2_RXCTRL3_M[5] => CH2_RXCTRL3[5]) = (0:0:0, 0:0:0);
    (CH2_RXCTRL3_M[6] => CH2_RXCTRL3[6]) = (0:0:0, 0:0:0);
    (CH2_RXCTRL3_M[7] => CH2_RXCTRL3[7]) = (0:0:0, 0:0:0);
    (CH2_RXDAPICODEOVRDEN => CH2_RXDAPICODEOVRDEN_M) = (0:0:0, 0:0:0);
    (CH2_RXDATAEXTENDRSVD_M[0] => CH2_RXDATAEXTENDRSVD[0]) = (0:0:0, 0:0:0);
    (CH2_RXDATAEXTENDRSVD_M[1] => CH2_RXDATAEXTENDRSVD[1]) = (0:0:0, 0:0:0);
    (CH2_RXDATAEXTENDRSVD_M[2] => CH2_RXDATAEXTENDRSVD[2]) = (0:0:0, 0:0:0);
    (CH2_RXDATAEXTENDRSVD_M[3] => CH2_RXDATAEXTENDRSVD[3]) = (0:0:0, 0:0:0);
    (CH2_RXDATAEXTENDRSVD_M[4] => CH2_RXDATAEXTENDRSVD[4]) = (0:0:0, 0:0:0);
    (CH2_RXDATAEXTENDRSVD_M[5] => CH2_RXDATAEXTENDRSVD[5]) = (0:0:0, 0:0:0);
    (CH2_RXDATAEXTENDRSVD_M[6] => CH2_RXDATAEXTENDRSVD[6]) = (0:0:0, 0:0:0);
    (CH2_RXDATAEXTENDRSVD_M[7] => CH2_RXDATAEXTENDRSVD[7]) = (0:0:0, 0:0:0);
    (CH2_RXDATAVALID_M[0] => CH2_RXDATAVALID[0]) = (0:0:0, 0:0:0);
    (CH2_RXDATAVALID_M[1] => CH2_RXDATAVALID[1]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[0] => CH2_RXDATA[0]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[100] => CH2_RXDATA[100]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[101] => CH2_RXDATA[101]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[102] => CH2_RXDATA[102]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[103] => CH2_RXDATA[103]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[104] => CH2_RXDATA[104]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[105] => CH2_RXDATA[105]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[106] => CH2_RXDATA[106]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[107] => CH2_RXDATA[107]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[108] => CH2_RXDATA[108]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[109] => CH2_RXDATA[109]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[10] => CH2_RXDATA[10]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[110] => CH2_RXDATA[110]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[111] => CH2_RXDATA[111]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[112] => CH2_RXDATA[112]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[113] => CH2_RXDATA[113]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[114] => CH2_RXDATA[114]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[115] => CH2_RXDATA[115]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[116] => CH2_RXDATA[116]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[117] => CH2_RXDATA[117]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[118] => CH2_RXDATA[118]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[119] => CH2_RXDATA[119]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[11] => CH2_RXDATA[11]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[120] => CH2_RXDATA[120]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[121] => CH2_RXDATA[121]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[122] => CH2_RXDATA[122]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[123] => CH2_RXDATA[123]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[124] => CH2_RXDATA[124]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[125] => CH2_RXDATA[125]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[126] => CH2_RXDATA[126]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[127] => CH2_RXDATA[127]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[12] => CH2_RXDATA[12]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[13] => CH2_RXDATA[13]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[14] => CH2_RXDATA[14]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[15] => CH2_RXDATA[15]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[16] => CH2_RXDATA[16]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[17] => CH2_RXDATA[17]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[18] => CH2_RXDATA[18]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[19] => CH2_RXDATA[19]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[1] => CH2_RXDATA[1]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[20] => CH2_RXDATA[20]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[21] => CH2_RXDATA[21]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[22] => CH2_RXDATA[22]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[23] => CH2_RXDATA[23]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[24] => CH2_RXDATA[24]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[25] => CH2_RXDATA[25]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[26] => CH2_RXDATA[26]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[27] => CH2_RXDATA[27]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[28] => CH2_RXDATA[28]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[29] => CH2_RXDATA[29]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[2] => CH2_RXDATA[2]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[30] => CH2_RXDATA[30]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[31] => CH2_RXDATA[31]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[32] => CH2_RXDATA[32]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[33] => CH2_RXDATA[33]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[34] => CH2_RXDATA[34]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[35] => CH2_RXDATA[35]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[36] => CH2_RXDATA[36]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[37] => CH2_RXDATA[37]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[38] => CH2_RXDATA[38]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[39] => CH2_RXDATA[39]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[3] => CH2_RXDATA[3]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[40] => CH2_RXDATA[40]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[41] => CH2_RXDATA[41]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[42] => CH2_RXDATA[42]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[43] => CH2_RXDATA[43]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[44] => CH2_RXDATA[44]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[45] => CH2_RXDATA[45]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[46] => CH2_RXDATA[46]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[47] => CH2_RXDATA[47]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[48] => CH2_RXDATA[48]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[49] => CH2_RXDATA[49]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[4] => CH2_RXDATA[4]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[50] => CH2_RXDATA[50]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[51] => CH2_RXDATA[51]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[52] => CH2_RXDATA[52]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[53] => CH2_RXDATA[53]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[54] => CH2_RXDATA[54]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[55] => CH2_RXDATA[55]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[56] => CH2_RXDATA[56]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[57] => CH2_RXDATA[57]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[58] => CH2_RXDATA[58]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[59] => CH2_RXDATA[59]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[5] => CH2_RXDATA[5]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[60] => CH2_RXDATA[60]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[61] => CH2_RXDATA[61]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[62] => CH2_RXDATA[62]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[63] => CH2_RXDATA[63]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[64] => CH2_RXDATA[64]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[65] => CH2_RXDATA[65]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[66] => CH2_RXDATA[66]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[67] => CH2_RXDATA[67]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[68] => CH2_RXDATA[68]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[69] => CH2_RXDATA[69]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[6] => CH2_RXDATA[6]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[70] => CH2_RXDATA[70]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[71] => CH2_RXDATA[71]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[72] => CH2_RXDATA[72]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[73] => CH2_RXDATA[73]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[74] => CH2_RXDATA[74]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[75] => CH2_RXDATA[75]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[76] => CH2_RXDATA[76]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[77] => CH2_RXDATA[77]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[78] => CH2_RXDATA[78]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[79] => CH2_RXDATA[79]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[7] => CH2_RXDATA[7]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[80] => CH2_RXDATA[80]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[81] => CH2_RXDATA[81]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[82] => CH2_RXDATA[82]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[83] => CH2_RXDATA[83]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[84] => CH2_RXDATA[84]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[85] => CH2_RXDATA[85]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[86] => CH2_RXDATA[86]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[87] => CH2_RXDATA[87]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[88] => CH2_RXDATA[88]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[89] => CH2_RXDATA[89]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[8] => CH2_RXDATA[8]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[90] => CH2_RXDATA[90]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[91] => CH2_RXDATA[91]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[92] => CH2_RXDATA[92]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[93] => CH2_RXDATA[93]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[94] => CH2_RXDATA[94]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[95] => CH2_RXDATA[95]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[96] => CH2_RXDATA[96]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[97] => CH2_RXDATA[97]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[98] => CH2_RXDATA[98]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[99] => CH2_RXDATA[99]) = (0:0:0, 0:0:0);
    (CH2_RXDATA_M[9] => CH2_RXDATA[9]) = (0:0:0, 0:0:0);
    (CH2_RXDCCDONE_M => CH2_RXDCCDONE) = (0:0:0, 0:0:0);
    (CH2_RXDLYALIGNERR_M => CH2_RXDLYALIGNERR) = (0:0:0, 0:0:0);
    (CH2_RXDLYALIGNPROG_M => CH2_RXDLYALIGNPROG) = (0:0:0, 0:0:0);
    (CH2_RXDLYALIGNREQ => CH2_RXDLYALIGNREQ_M) = (0:0:0, 0:0:0);
    (CH2_RXELECIDLE_M => CH2_RXELECIDLE) = (0:0:0, 0:0:0);
    (CH2_RXEQTRAINING => CH2_RXEQTRAINING_M) = (0:0:0, 0:0:0);
    (CH2_RXFINEALIGNDONE_M => CH2_RXFINEALIGNDONE) = (0:0:0, 0:0:0);
    (CH2_RXGEARBOXSLIP => CH2_RXGEARBOXSLIP_M) = (0:0:0, 0:0:0);
    (CH2_RXHEADERVALID_M[0] => CH2_RXHEADERVALID[0]) = (0:0:0, 0:0:0);
    (CH2_RXHEADERVALID_M[1] => CH2_RXHEADERVALID[1]) = (0:0:0, 0:0:0);
    (CH2_RXHEADER_M[0] => CH2_RXHEADER[0]) = (0:0:0, 0:0:0);
    (CH2_RXHEADER_M[1] => CH2_RXHEADER[1]) = (0:0:0, 0:0:0);
    (CH2_RXHEADER_M[2] => CH2_RXHEADER[2]) = (0:0:0, 0:0:0);
    (CH2_RXHEADER_M[3] => CH2_RXHEADER[3]) = (0:0:0, 0:0:0);
    (CH2_RXHEADER_M[4] => CH2_RXHEADER[4]) = (0:0:0, 0:0:0);
    (CH2_RXHEADER_M[5] => CH2_RXHEADER[5]) = (0:0:0, 0:0:0);
    (CH2_RXLATCLK => CH2_RXLATCLK_M) = (0:0:0, 0:0:0);
    (CH2_RXLPMEN => CH2_RXLPMEN_M) = (0:0:0, 0:0:0);
    (CH2_RXMLDCHAINDONE => CH2_RXMLDCHAINDONE_M) = (0:0:0, 0:0:0);
    (CH2_RXMLDCHAINREQ => CH2_RXMLDCHAINREQ_M) = (0:0:0, 0:0:0);
    (CH2_RXMLFINEALIGNREQ => CH2_RXMLFINEALIGNREQ_M) = (0:0:0, 0:0:0);
    (CH2_RXOSINTDONE_M => CH2_RXOSINTDONE) = (0:0:0, 0:0:0);
    (CH2_RXOSINTSTARTED_M => CH2_RXOSINTSTARTED) = (0:0:0, 0:0:0);
    (CH2_RXOSINTSTROBEDONE_M => CH2_RXOSINTSTROBEDONE) = (0:0:0, 0:0:0);
    (CH2_RXOSINTSTROBESTARTED_M => CH2_RXOSINTSTROBESTARTED) = (0:0:0, 0:0:0);
    (CH2_RXPD[0] => CH2_RXPD_M[0]) = (0:0:0, 0:0:0);
    (CH2_RXPD[1] => CH2_RXPD_M[1]) = (0:0:0, 0:0:0);
    (CH2_RXPHALIGNDONE_M => CH2_RXPHALIGNDONE) = (0:0:0, 0:0:0);
    (CH2_RXPHALIGNERR_M => CH2_RXPHALIGNERR) = (0:0:0, 0:0:0);
    (CH2_RXPHALIGNREQ => CH2_RXPHALIGNREQ_M) = (0:0:0, 0:0:0);
    (CH2_RXPHDLYPD => CH2_RXPHDLYPD_M) = (0:0:0, 0:0:0);
    (CH2_RXPHSHIFT180 => CH2_RXPHSHIFT180_M) = (0:0:0, 0:0:0);
    (CH2_RXPHSHIFT180DONE_M => CH2_RXPHSHIFT180DONE) = (0:0:0, 0:0:0);
    (CH2_RXPOLARITY => CH2_RXPOLARITY_M) = (0:0:0, 0:0:0);
    (CH2_RXPRBSERR_M => CH2_RXPRBSERR) = (0:0:0, 0:0:0);
    (CH2_RXPRBSLOCKED_M => CH2_RXPRBSLOCKED) = (0:0:0, 0:0:0);
    (CH2_RXPRBSSEL[0] => CH2_RXPRBSSEL_M[0]) = (0:0:0, 0:0:0);
    (CH2_RXPRBSSEL[1] => CH2_RXPRBSSEL_M[1]) = (0:0:0, 0:0:0);
    (CH2_RXPRBSSEL[2] => CH2_RXPRBSSEL_M[2]) = (0:0:0, 0:0:0);
    (CH2_RXPRBSSEL[3] => CH2_RXPRBSSEL_M[3]) = (0:0:0, 0:0:0);
    (CH2_RXRATE[0] => CH2_RXRATE_M[0]) = (0:0:0, 0:0:0);
    (CH2_RXRATE[1] => CH2_RXRATE_M[1]) = (0:0:0, 0:0:0);
    (CH2_RXRATE[2] => CH2_RXRATE_M[2]) = (0:0:0, 0:0:0);
    (CH2_RXRATE[3] => CH2_RXRATE_M[3]) = (0:0:0, 0:0:0);
    (CH2_RXRATE[4] => CH2_RXRATE_M[4]) = (0:0:0, 0:0:0);
    (CH2_RXRATE[5] => CH2_RXRATE_M[5]) = (0:0:0, 0:0:0);
    (CH2_RXRATE[6] => CH2_RXRATE_M[6]) = (0:0:0, 0:0:0);
    (CH2_RXRATE[7] => CH2_RXRATE_M[7]) = (0:0:0, 0:0:0);
    (CH2_RXSLIDE => CH2_RXSLIDE_M) = (0:0:0, 0:0:0);
    (CH2_RXSLIDERDY_M => CH2_RXSLIDERDY) = (0:0:0, 0:0:0);
    (CH2_RXSTARTOFSEQ_M[0] => CH2_RXSTARTOFSEQ[0]) = (0:0:0, 0:0:0);
    (CH2_RXSTARTOFSEQ_M[1] => CH2_RXSTARTOFSEQ[1]) = (0:0:0, 0:0:0);
    (CH2_RXSTATUS_M[0] => CH2_RXSTATUS[0]) = (0:0:0, 0:0:0);
    (CH2_RXSTATUS_M[1] => CH2_RXSTATUS[1]) = (0:0:0, 0:0:0);
    (CH2_RXSTATUS_M[2] => CH2_RXSTATUS[2]) = (0:0:0, 0:0:0);
    (CH2_RXSYNCALLIN => CH2_RXSYNCALLIN_M) = (0:0:0, 0:0:0);
    (CH2_RXSYNCDONE_M => CH2_RXSYNCDONE) = (0:0:0, 0:0:0);
    (CH2_RXTERMINATION => CH2_RXTERMINATION_M) = (0:0:0, 0:0:0);
    (CH2_RXUSERRDY => CH2_RXUSERRDY_M) = (0:0:0, 0:0:0);
    (CH2_RXUSRCLK => CH2_RXUSRCLK_M) = (0:0:0, 0:0:0);
    (CH2_RXVALID_M => CH2_RXVALID) = (0:0:0, 0:0:0);
    (CH2_TSTCLK0 => CH2_TSTCLK0_M) = (0:0:0, 0:0:0);
    (CH2_TSTCLK1 => CH2_TSTCLK1_M) = (0:0:0, 0:0:0);
    (CH2_TSTIN[0] => CH2_TSTIN_M[0]) = (0:0:0, 0:0:0);
    (CH2_TSTIN[10] => CH2_TSTIN_M[10]) = (0:0:0, 0:0:0);
    (CH2_TSTIN[11] => CH2_TSTIN_M[11]) = (0:0:0, 0:0:0);
    (CH2_TSTIN[12] => CH2_TSTIN_M[12]) = (0:0:0, 0:0:0);
    (CH2_TSTIN[13] => CH2_TSTIN_M[13]) = (0:0:0, 0:0:0);
    (CH2_TSTIN[14] => CH2_TSTIN_M[14]) = (0:0:0, 0:0:0);
    (CH2_TSTIN[15] => CH2_TSTIN_M[15]) = (0:0:0, 0:0:0);
    (CH2_TSTIN[16] => CH2_TSTIN_M[16]) = (0:0:0, 0:0:0);
    (CH2_TSTIN[17] => CH2_TSTIN_M[17]) = (0:0:0, 0:0:0);
    (CH2_TSTIN[18] => CH2_TSTIN_M[18]) = (0:0:0, 0:0:0);
    (CH2_TSTIN[19] => CH2_TSTIN_M[19]) = (0:0:0, 0:0:0);
    (CH2_TSTIN[1] => CH2_TSTIN_M[1]) = (0:0:0, 0:0:0);
    (CH2_TSTIN[2] => CH2_TSTIN_M[2]) = (0:0:0, 0:0:0);
    (CH2_TSTIN[3] => CH2_TSTIN_M[3]) = (0:0:0, 0:0:0);
    (CH2_TSTIN[4] => CH2_TSTIN_M[4]) = (0:0:0, 0:0:0);
    (CH2_TSTIN[5] => CH2_TSTIN_M[5]) = (0:0:0, 0:0:0);
    (CH2_TSTIN[6] => CH2_TSTIN_M[6]) = (0:0:0, 0:0:0);
    (CH2_TSTIN[7] => CH2_TSTIN_M[7]) = (0:0:0, 0:0:0);
    (CH2_TSTIN[8] => CH2_TSTIN_M[8]) = (0:0:0, 0:0:0);
    (CH2_TSTIN[9] => CH2_TSTIN_M[9]) = (0:0:0, 0:0:0);
    (CH2_TX10GSTAT_M => CH2_TX10GSTAT) = (0:0:0, 0:0:0);
    (CH2_TXBUFSTATUS_M[0] => CH2_TXBUFSTATUS[0]) = (0:0:0, 0:0:0);
    (CH2_TXBUFSTATUS_M[1] => CH2_TXBUFSTATUS[1]) = (0:0:0, 0:0:0);
    (CH2_TXCOMFINISH_M => CH2_TXCOMFINISH) = (0:0:0, 0:0:0);
    (CH2_TXCOMINIT => CH2_TXCOMINIT_M) = (0:0:0, 0:0:0);
    (CH2_TXCOMSAS => CH2_TXCOMSAS_M) = (0:0:0, 0:0:0);
    (CH2_TXCOMWAKE => CH2_TXCOMWAKE_M) = (0:0:0, 0:0:0);
    (CH2_TXCTRL0[0] => CH2_TXCTRL0_M[0]) = (0:0:0, 0:0:0);
    (CH2_TXCTRL0[10] => CH2_TXCTRL0_M[10]) = (0:0:0, 0:0:0);
    (CH2_TXCTRL0[11] => CH2_TXCTRL0_M[11]) = (0:0:0, 0:0:0);
    (CH2_TXCTRL0[12] => CH2_TXCTRL0_M[12]) = (0:0:0, 0:0:0);
    (CH2_TXCTRL0[13] => CH2_TXCTRL0_M[13]) = (0:0:0, 0:0:0);
    (CH2_TXCTRL0[14] => CH2_TXCTRL0_M[14]) = (0:0:0, 0:0:0);
    (CH2_TXCTRL0[15] => CH2_TXCTRL0_M[15]) = (0:0:0, 0:0:0);
    (CH2_TXCTRL0[1] => CH2_TXCTRL0_M[1]) = (0:0:0, 0:0:0);
    (CH2_TXCTRL0[2] => CH2_TXCTRL0_M[2]) = (0:0:0, 0:0:0);
    (CH2_TXCTRL0[3] => CH2_TXCTRL0_M[3]) = (0:0:0, 0:0:0);
    (CH2_TXCTRL0[4] => CH2_TXCTRL0_M[4]) = (0:0:0, 0:0:0);
    (CH2_TXCTRL0[5] => CH2_TXCTRL0_M[5]) = (0:0:0, 0:0:0);
    (CH2_TXCTRL0[6] => CH2_TXCTRL0_M[6]) = (0:0:0, 0:0:0);
    (CH2_TXCTRL0[7] => CH2_TXCTRL0_M[7]) = (0:0:0, 0:0:0);
    (CH2_TXCTRL0[8] => CH2_TXCTRL0_M[8]) = (0:0:0, 0:0:0);
    (CH2_TXCTRL0[9] => CH2_TXCTRL0_M[9]) = (0:0:0, 0:0:0);
    (CH2_TXCTRL1[0] => CH2_TXCTRL1_M[0]) = (0:0:0, 0:0:0);
    (CH2_TXCTRL1[10] => CH2_TXCTRL1_M[10]) = (0:0:0, 0:0:0);
    (CH2_TXCTRL1[11] => CH2_TXCTRL1_M[11]) = (0:0:0, 0:0:0);
    (CH2_TXCTRL1[12] => CH2_TXCTRL1_M[12]) = (0:0:0, 0:0:0);
    (CH2_TXCTRL1[13] => CH2_TXCTRL1_M[13]) = (0:0:0, 0:0:0);
    (CH2_TXCTRL1[14] => CH2_TXCTRL1_M[14]) = (0:0:0, 0:0:0);
    (CH2_TXCTRL1[15] => CH2_TXCTRL1_M[15]) = (0:0:0, 0:0:0);
    (CH2_TXCTRL1[1] => CH2_TXCTRL1_M[1]) = (0:0:0, 0:0:0);
    (CH2_TXCTRL1[2] => CH2_TXCTRL1_M[2]) = (0:0:0, 0:0:0);
    (CH2_TXCTRL1[3] => CH2_TXCTRL1_M[3]) = (0:0:0, 0:0:0);
    (CH2_TXCTRL1[4] => CH2_TXCTRL1_M[4]) = (0:0:0, 0:0:0);
    (CH2_TXCTRL1[5] => CH2_TXCTRL1_M[5]) = (0:0:0, 0:0:0);
    (CH2_TXCTRL1[6] => CH2_TXCTRL1_M[6]) = (0:0:0, 0:0:0);
    (CH2_TXCTRL1[7] => CH2_TXCTRL1_M[7]) = (0:0:0, 0:0:0);
    (CH2_TXCTRL1[8] => CH2_TXCTRL1_M[8]) = (0:0:0, 0:0:0);
    (CH2_TXCTRL1[9] => CH2_TXCTRL1_M[9]) = (0:0:0, 0:0:0);
    (CH2_TXCTRL2[0] => CH2_TXCTRL2_M[0]) = (0:0:0, 0:0:0);
    (CH2_TXCTRL2[1] => CH2_TXCTRL2_M[1]) = (0:0:0, 0:0:0);
    (CH2_TXCTRL2[2] => CH2_TXCTRL2_M[2]) = (0:0:0, 0:0:0);
    (CH2_TXCTRL2[3] => CH2_TXCTRL2_M[3]) = (0:0:0, 0:0:0);
    (CH2_TXCTRL2[4] => CH2_TXCTRL2_M[4]) = (0:0:0, 0:0:0);
    (CH2_TXCTRL2[5] => CH2_TXCTRL2_M[5]) = (0:0:0, 0:0:0);
    (CH2_TXCTRL2[6] => CH2_TXCTRL2_M[6]) = (0:0:0, 0:0:0);
    (CH2_TXCTRL2[7] => CH2_TXCTRL2_M[7]) = (0:0:0, 0:0:0);
    (CH2_TXDAPICODEOVRDEN => CH2_TXDAPICODEOVRDEN_M) = (0:0:0, 0:0:0);
    (CH2_TXDATAEXTENDRSVD[0] => CH2_TXDATAEXTENDRSVD_M[0]) = (0:0:0, 0:0:0);
    (CH2_TXDATAEXTENDRSVD[1] => CH2_TXDATAEXTENDRSVD_M[1]) = (0:0:0, 0:0:0);
    (CH2_TXDATAEXTENDRSVD[2] => CH2_TXDATAEXTENDRSVD_M[2]) = (0:0:0, 0:0:0);
    (CH2_TXDATAEXTENDRSVD[3] => CH2_TXDATAEXTENDRSVD_M[3]) = (0:0:0, 0:0:0);
    (CH2_TXDATAEXTENDRSVD[4] => CH2_TXDATAEXTENDRSVD_M[4]) = (0:0:0, 0:0:0);
    (CH2_TXDATAEXTENDRSVD[5] => CH2_TXDATAEXTENDRSVD_M[5]) = (0:0:0, 0:0:0);
    (CH2_TXDATAEXTENDRSVD[6] => CH2_TXDATAEXTENDRSVD_M[6]) = (0:0:0, 0:0:0);
    (CH2_TXDATAEXTENDRSVD[7] => CH2_TXDATAEXTENDRSVD_M[7]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[0] => CH2_TXDATA_M[0]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[100] => CH2_TXDATA_M[100]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[101] => CH2_TXDATA_M[101]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[102] => CH2_TXDATA_M[102]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[103] => CH2_TXDATA_M[103]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[104] => CH2_TXDATA_M[104]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[105] => CH2_TXDATA_M[105]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[106] => CH2_TXDATA_M[106]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[107] => CH2_TXDATA_M[107]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[108] => CH2_TXDATA_M[108]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[109] => CH2_TXDATA_M[109]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[10] => CH2_TXDATA_M[10]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[110] => CH2_TXDATA_M[110]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[111] => CH2_TXDATA_M[111]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[112] => CH2_TXDATA_M[112]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[113] => CH2_TXDATA_M[113]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[114] => CH2_TXDATA_M[114]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[115] => CH2_TXDATA_M[115]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[116] => CH2_TXDATA_M[116]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[117] => CH2_TXDATA_M[117]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[118] => CH2_TXDATA_M[118]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[119] => CH2_TXDATA_M[119]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[11] => CH2_TXDATA_M[11]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[120] => CH2_TXDATA_M[120]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[121] => CH2_TXDATA_M[121]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[122] => CH2_TXDATA_M[122]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[123] => CH2_TXDATA_M[123]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[124] => CH2_TXDATA_M[124]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[125] => CH2_TXDATA_M[125]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[126] => CH2_TXDATA_M[126]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[127] => CH2_TXDATA_M[127]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[12] => CH2_TXDATA_M[12]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[13] => CH2_TXDATA_M[13]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[14] => CH2_TXDATA_M[14]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[15] => CH2_TXDATA_M[15]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[16] => CH2_TXDATA_M[16]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[17] => CH2_TXDATA_M[17]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[18] => CH2_TXDATA_M[18]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[19] => CH2_TXDATA_M[19]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[1] => CH2_TXDATA_M[1]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[20] => CH2_TXDATA_M[20]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[21] => CH2_TXDATA_M[21]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[22] => CH2_TXDATA_M[22]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[23] => CH2_TXDATA_M[23]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[24] => CH2_TXDATA_M[24]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[25] => CH2_TXDATA_M[25]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[26] => CH2_TXDATA_M[26]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[27] => CH2_TXDATA_M[27]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[28] => CH2_TXDATA_M[28]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[29] => CH2_TXDATA_M[29]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[2] => CH2_TXDATA_M[2]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[30] => CH2_TXDATA_M[30]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[31] => CH2_TXDATA_M[31]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[32] => CH2_TXDATA_M[32]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[33] => CH2_TXDATA_M[33]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[34] => CH2_TXDATA_M[34]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[35] => CH2_TXDATA_M[35]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[36] => CH2_TXDATA_M[36]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[37] => CH2_TXDATA_M[37]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[38] => CH2_TXDATA_M[38]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[39] => CH2_TXDATA_M[39]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[3] => CH2_TXDATA_M[3]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[40] => CH2_TXDATA_M[40]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[41] => CH2_TXDATA_M[41]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[42] => CH2_TXDATA_M[42]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[43] => CH2_TXDATA_M[43]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[44] => CH2_TXDATA_M[44]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[45] => CH2_TXDATA_M[45]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[46] => CH2_TXDATA_M[46]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[47] => CH2_TXDATA_M[47]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[48] => CH2_TXDATA_M[48]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[49] => CH2_TXDATA_M[49]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[4] => CH2_TXDATA_M[4]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[50] => CH2_TXDATA_M[50]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[51] => CH2_TXDATA_M[51]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[52] => CH2_TXDATA_M[52]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[53] => CH2_TXDATA_M[53]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[54] => CH2_TXDATA_M[54]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[55] => CH2_TXDATA_M[55]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[56] => CH2_TXDATA_M[56]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[57] => CH2_TXDATA_M[57]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[58] => CH2_TXDATA_M[58]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[59] => CH2_TXDATA_M[59]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[5] => CH2_TXDATA_M[5]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[60] => CH2_TXDATA_M[60]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[61] => CH2_TXDATA_M[61]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[62] => CH2_TXDATA_M[62]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[63] => CH2_TXDATA_M[63]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[64] => CH2_TXDATA_M[64]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[65] => CH2_TXDATA_M[65]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[66] => CH2_TXDATA_M[66]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[67] => CH2_TXDATA_M[67]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[68] => CH2_TXDATA_M[68]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[69] => CH2_TXDATA_M[69]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[6] => CH2_TXDATA_M[6]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[70] => CH2_TXDATA_M[70]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[71] => CH2_TXDATA_M[71]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[72] => CH2_TXDATA_M[72]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[73] => CH2_TXDATA_M[73]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[74] => CH2_TXDATA_M[74]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[75] => CH2_TXDATA_M[75]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[76] => CH2_TXDATA_M[76]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[77] => CH2_TXDATA_M[77]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[78] => CH2_TXDATA_M[78]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[79] => CH2_TXDATA_M[79]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[7] => CH2_TXDATA_M[7]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[80] => CH2_TXDATA_M[80]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[81] => CH2_TXDATA_M[81]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[82] => CH2_TXDATA_M[82]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[83] => CH2_TXDATA_M[83]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[84] => CH2_TXDATA_M[84]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[85] => CH2_TXDATA_M[85]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[86] => CH2_TXDATA_M[86]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[87] => CH2_TXDATA_M[87]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[88] => CH2_TXDATA_M[88]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[89] => CH2_TXDATA_M[89]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[8] => CH2_TXDATA_M[8]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[90] => CH2_TXDATA_M[90]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[91] => CH2_TXDATA_M[91]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[92] => CH2_TXDATA_M[92]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[93] => CH2_TXDATA_M[93]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[94] => CH2_TXDATA_M[94]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[95] => CH2_TXDATA_M[95]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[96] => CH2_TXDATA_M[96]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[97] => CH2_TXDATA_M[97]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[98] => CH2_TXDATA_M[98]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[99] => CH2_TXDATA_M[99]) = (0:0:0, 0:0:0);
    (CH2_TXDATA[9] => CH2_TXDATA_M[9]) = (0:0:0, 0:0:0);
    (CH2_TXDCCDONE_M => CH2_TXDCCDONE) = (0:0:0, 0:0:0);
    (CH2_TXDEEMPH[0] => CH2_TXDEEMPH_M[0]) = (0:0:0, 0:0:0);
    (CH2_TXDEEMPH[1] => CH2_TXDEEMPH_M[1]) = (0:0:0, 0:0:0);
    (CH2_TXDETECTRX => CH2_TXDETECTRX_M) = (0:0:0, 0:0:0);
    (CH2_TXDIFFCTRL[0] => CH2_TXDIFFCTRL_M[0]) = (0:0:0, 0:0:0);
    (CH2_TXDIFFCTRL[1] => CH2_TXDIFFCTRL_M[1]) = (0:0:0, 0:0:0);
    (CH2_TXDIFFCTRL[2] => CH2_TXDIFFCTRL_M[2]) = (0:0:0, 0:0:0);
    (CH2_TXDIFFCTRL[3] => CH2_TXDIFFCTRL_M[3]) = (0:0:0, 0:0:0);
    (CH2_TXDIFFCTRL[4] => CH2_TXDIFFCTRL_M[4]) = (0:0:0, 0:0:0);
    (CH2_TXDLYALIGNERR_M => CH2_TXDLYALIGNERR) = (0:0:0, 0:0:0);
    (CH2_TXDLYALIGNPROG_M => CH2_TXDLYALIGNPROG) = (0:0:0, 0:0:0);
    (CH2_TXDLYALIGNREQ => CH2_TXDLYALIGNREQ_M) = (0:0:0, 0:0:0);
    (CH2_TXELECIDLE => CH2_TXELECIDLE_M) = (0:0:0, 0:0:0);
    (CH2_TXHEADER[0] => CH2_TXHEADER_M[0]) = (0:0:0, 0:0:0);
    (CH2_TXHEADER[1] => CH2_TXHEADER_M[1]) = (0:0:0, 0:0:0);
    (CH2_TXHEADER[2] => CH2_TXHEADER_M[2]) = (0:0:0, 0:0:0);
    (CH2_TXHEADER[3] => CH2_TXHEADER_M[3]) = (0:0:0, 0:0:0);
    (CH2_TXHEADER[4] => CH2_TXHEADER_M[4]) = (0:0:0, 0:0:0);
    (CH2_TXHEADER[5] => CH2_TXHEADER_M[5]) = (0:0:0, 0:0:0);
    (CH2_TXINHIBIT => CH2_TXINHIBIT_M) = (0:0:0, 0:0:0);
    (CH2_TXLATCLK => CH2_TXLATCLK_M) = (0:0:0, 0:0:0);
    (CH2_TXMAINCURSOR[0] => CH2_TXMAINCURSOR_M[0]) = (0:0:0, 0:0:0);
    (CH2_TXMAINCURSOR[1] => CH2_TXMAINCURSOR_M[1]) = (0:0:0, 0:0:0);
    (CH2_TXMAINCURSOR[2] => CH2_TXMAINCURSOR_M[2]) = (0:0:0, 0:0:0);
    (CH2_TXMAINCURSOR[3] => CH2_TXMAINCURSOR_M[3]) = (0:0:0, 0:0:0);
    (CH2_TXMAINCURSOR[4] => CH2_TXMAINCURSOR_M[4]) = (0:0:0, 0:0:0);
    (CH2_TXMAINCURSOR[5] => CH2_TXMAINCURSOR_M[5]) = (0:0:0, 0:0:0);
    (CH2_TXMAINCURSOR[6] => CH2_TXMAINCURSOR_M[6]) = (0:0:0, 0:0:0);
    (CH2_TXMARGIN[0] => CH2_TXMARGIN_M[0]) = (0:0:0, 0:0:0);
    (CH2_TXMARGIN[1] => CH2_TXMARGIN_M[1]) = (0:0:0, 0:0:0);
    (CH2_TXMARGIN[2] => CH2_TXMARGIN_M[2]) = (0:0:0, 0:0:0);
    (CH2_TXMLDCHAINDONE => CH2_TXMLDCHAINDONE_M) = (0:0:0, 0:0:0);
    (CH2_TXMLDCHAINREQ => CH2_TXMLDCHAINREQ_M) = (0:0:0, 0:0:0);
    (CH2_TXONESZEROS => CH2_TXONESZEROS_M) = (0:0:0, 0:0:0);
    (CH2_TXPAUSEDELAYALIGN => CH2_TXPAUSEDELAYALIGN_M) = (0:0:0, 0:0:0);
    (CH2_TXPD[0] => CH2_TXPD_M[0]) = (0:0:0, 0:0:0);
    (CH2_TXPD[1] => CH2_TXPD_M[1]) = (0:0:0, 0:0:0);
    (CH2_TXPHALIGNDONE_M => CH2_TXPHALIGNDONE) = (0:0:0, 0:0:0);
    (CH2_TXPHALIGNERR_M => CH2_TXPHALIGNERR) = (0:0:0, 0:0:0);
    (CH2_TXPHALIGNOUTRSVD_M => CH2_TXPHALIGNOUTRSVD) = (0:0:0, 0:0:0);
    (CH2_TXPHALIGNREQ => CH2_TXPHALIGNREQ_M) = (0:0:0, 0:0:0);
    (CH2_TXPHDLYPD => CH2_TXPHDLYPD_M) = (0:0:0, 0:0:0);
    (CH2_TXPHDLYTSTCLK => CH2_TXPHDLYTSTCLK_M) = (0:0:0, 0:0:0);
    (CH2_TXPHSHIFT180 => CH2_TXPHSHIFT180_M) = (0:0:0, 0:0:0);
    (CH2_TXPHSHIFT180DONE_M => CH2_TXPHSHIFT180DONE) = (0:0:0, 0:0:0);
    (CH2_TXPICODEOVRDEN => CH2_TXPICODEOVRDEN_M) = (0:0:0, 0:0:0);
    (CH2_TXPIPPMEN => CH2_TXPIPPMEN_M) = (0:0:0, 0:0:0);
    (CH2_TXPIPPMSTEPSIZE[0] => CH2_TXPIPPMSTEPSIZE_M[0]) = (0:0:0, 0:0:0);
    (CH2_TXPIPPMSTEPSIZE[1] => CH2_TXPIPPMSTEPSIZE_M[1]) = (0:0:0, 0:0:0);
    (CH2_TXPIPPMSTEPSIZE[2] => CH2_TXPIPPMSTEPSIZE_M[2]) = (0:0:0, 0:0:0);
    (CH2_TXPIPPMSTEPSIZE[3] => CH2_TXPIPPMSTEPSIZE_M[3]) = (0:0:0, 0:0:0);
    (CH2_TXPIPPMSTEPSIZE[4] => CH2_TXPIPPMSTEPSIZE_M[4]) = (0:0:0, 0:0:0);
    (CH2_TXPISOPD => CH2_TXPISOPD_M) = (0:0:0, 0:0:0);
    (CH2_TXPOLARITY => CH2_TXPOLARITY_M) = (0:0:0, 0:0:0);
    (CH2_TXPOSTCURSOR[0] => CH2_TXPOSTCURSOR_M[0]) = (0:0:0, 0:0:0);
    (CH2_TXPOSTCURSOR[1] => CH2_TXPOSTCURSOR_M[1]) = (0:0:0, 0:0:0);
    (CH2_TXPOSTCURSOR[2] => CH2_TXPOSTCURSOR_M[2]) = (0:0:0, 0:0:0);
    (CH2_TXPOSTCURSOR[3] => CH2_TXPOSTCURSOR_M[3]) = (0:0:0, 0:0:0);
    (CH2_TXPOSTCURSOR[4] => CH2_TXPOSTCURSOR_M[4]) = (0:0:0, 0:0:0);
    (CH2_TXPRBSFORCEERR => CH2_TXPRBSFORCEERR_M) = (0:0:0, 0:0:0);
    (CH2_TXPRBSSEL[0] => CH2_TXPRBSSEL_M[0]) = (0:0:0, 0:0:0);
    (CH2_TXPRBSSEL[1] => CH2_TXPRBSSEL_M[1]) = (0:0:0, 0:0:0);
    (CH2_TXPRBSSEL[2] => CH2_TXPRBSSEL_M[2]) = (0:0:0, 0:0:0);
    (CH2_TXPRBSSEL[3] => CH2_TXPRBSSEL_M[3]) = (0:0:0, 0:0:0);
    (CH2_TXRATE[0] => CH2_TXRATE_M[0]) = (0:0:0, 0:0:0);
    (CH2_TXRATE[1] => CH2_TXRATE_M[1]) = (0:0:0, 0:0:0);
    (CH2_TXRATE[2] => CH2_TXRATE_M[2]) = (0:0:0, 0:0:0);
    (CH2_TXRATE[3] => CH2_TXRATE_M[3]) = (0:0:0, 0:0:0);
    (CH2_TXRATE[4] => CH2_TXRATE_M[4]) = (0:0:0, 0:0:0);
    (CH2_TXRATE[5] => CH2_TXRATE_M[5]) = (0:0:0, 0:0:0);
    (CH2_TXRATE[6] => CH2_TXRATE_M[6]) = (0:0:0, 0:0:0);
    (CH2_TXRATE[7] => CH2_TXRATE_M[7]) = (0:0:0, 0:0:0);
    (CH2_TXSEQUENCE[0] => CH2_TXSEQUENCE_M[0]) = (0:0:0, 0:0:0);
    (CH2_TXSEQUENCE[1] => CH2_TXSEQUENCE_M[1]) = (0:0:0, 0:0:0);
    (CH2_TXSEQUENCE[2] => CH2_TXSEQUENCE_M[2]) = (0:0:0, 0:0:0);
    (CH2_TXSEQUENCE[3] => CH2_TXSEQUENCE_M[3]) = (0:0:0, 0:0:0);
    (CH2_TXSEQUENCE[4] => CH2_TXSEQUENCE_M[4]) = (0:0:0, 0:0:0);
    (CH2_TXSEQUENCE[5] => CH2_TXSEQUENCE_M[5]) = (0:0:0, 0:0:0);
    (CH2_TXSEQUENCE[6] => CH2_TXSEQUENCE_M[6]) = (0:0:0, 0:0:0);
    (CH2_TXSWING => CH2_TXSWING_M) = (0:0:0, 0:0:0);
    (CH2_TXSYNCALLIN => CH2_TXSYNCALLIN_M) = (0:0:0, 0:0:0);
    (CH2_TXSYNCDONE_M => CH2_TXSYNCDONE) = (0:0:0, 0:0:0);
    (CH2_TXUSERRDY => CH2_TXUSERRDY_M) = (0:0:0, 0:0:0);
    (CH2_TXUSRCLK => CH2_TXUSRCLK_M) = (0:0:0, 0:0:0);
    (CH3_BUFGTCEMASK_M[0] => CH3_BUFGTCEMASK[0]) = (0:0:0, 0:0:0);
    (CH3_BUFGTCEMASK_M[1] => CH3_BUFGTCEMASK[1]) = (0:0:0, 0:0:0);
    (CH3_BUFGTCEMASK_M[2] => CH3_BUFGTCEMASK[2]) = (0:0:0, 0:0:0);
    (CH3_BUFGTCEMASK_M[3] => CH3_BUFGTCEMASK[3]) = (0:0:0, 0:0:0);
    (CH3_BUFGTCE_M => CH3_BUFGTCE) = (0:0:0, 0:0:0);
    (CH3_BUFGTDIV_M[0] => CH3_BUFGTDIV[0]) = (0:0:0, 0:0:0);
    (CH3_BUFGTDIV_M[10] => CH3_BUFGTDIV[10]) = (0:0:0, 0:0:0);
    (CH3_BUFGTDIV_M[11] => CH3_BUFGTDIV[11]) = (0:0:0, 0:0:0);
    (CH3_BUFGTDIV_M[1] => CH3_BUFGTDIV[1]) = (0:0:0, 0:0:0);
    (CH3_BUFGTDIV_M[2] => CH3_BUFGTDIV[2]) = (0:0:0, 0:0:0);
    (CH3_BUFGTDIV_M[3] => CH3_BUFGTDIV[3]) = (0:0:0, 0:0:0);
    (CH3_BUFGTDIV_M[4] => CH3_BUFGTDIV[4]) = (0:0:0, 0:0:0);
    (CH3_BUFGTDIV_M[5] => CH3_BUFGTDIV[5]) = (0:0:0, 0:0:0);
    (CH3_BUFGTDIV_M[6] => CH3_BUFGTDIV[6]) = (0:0:0, 0:0:0);
    (CH3_BUFGTDIV_M[7] => CH3_BUFGTDIV[7]) = (0:0:0, 0:0:0);
    (CH3_BUFGTDIV_M[8] => CH3_BUFGTDIV[8]) = (0:0:0, 0:0:0);
    (CH3_BUFGTDIV_M[9] => CH3_BUFGTDIV[9]) = (0:0:0, 0:0:0);
    (CH3_CDRBMCDRREQ => CH3_CDRBMCDRREQ_M) = (0:0:0, 0:0:0);
    (CH3_CDRFREQOS => CH3_CDRFREQOS_M) = (0:0:0, 0:0:0);
    (CH3_CDRINCPCTRL => CH3_CDRINCPCTRL_M) = (0:0:0, 0:0:0);
    (CH3_CFOKOVRDFINISH => CH3_CFOKOVRDFINISH_M) = (0:0:0, 0:0:0);
    (CH3_CFOKOVRDPULSE => CH3_CFOKOVRDPULSE_M) = (0:0:0, 0:0:0);
    (CH3_CFOKOVRDRDY0_M => CH3_CFOKOVRDRDY0) = (0:0:0, 0:0:0);
    (CH3_CFOKOVRDRDY1_M => CH3_CFOKOVRDRDY1) = (0:0:0, 0:0:0);
    (CH3_CFOKOVRDSTART => CH3_CFOKOVRDSTART_M) = (0:0:0, 0:0:0);
    (CH3_CLKRSVD0 => CH3_CLKRSVD0_M) = (0:0:0, 0:0:0);
    (CH3_CLKRSVD1 => CH3_CLKRSVD1_M) = (0:0:0, 0:0:0);
    (CH3_DMONITORCLK => CH3_DMONITORCLK_M) = (0:0:0, 0:0:0);
    (CH3_DMONITOROUT_M[0] => CH3_DMONITOROUT[0]) = (0:0:0, 0:0:0);
    (CH3_DMONITOROUT_M[10] => CH3_DMONITOROUT[10]) = (0:0:0, 0:0:0);
    (CH3_DMONITOROUT_M[11] => CH3_DMONITOROUT[11]) = (0:0:0, 0:0:0);
    (CH3_DMONITOROUT_M[12] => CH3_DMONITOROUT[12]) = (0:0:0, 0:0:0);
    (CH3_DMONITOROUT_M[13] => CH3_DMONITOROUT[13]) = (0:0:0, 0:0:0);
    (CH3_DMONITOROUT_M[14] => CH3_DMONITOROUT[14]) = (0:0:0, 0:0:0);
    (CH3_DMONITOROUT_M[15] => CH3_DMONITOROUT[15]) = (0:0:0, 0:0:0);
    (CH3_DMONITOROUT_M[16] => CH3_DMONITOROUT[16]) = (0:0:0, 0:0:0);
    (CH3_DMONITOROUT_M[17] => CH3_DMONITOROUT[17]) = (0:0:0, 0:0:0);
    (CH3_DMONITOROUT_M[18] => CH3_DMONITOROUT[18]) = (0:0:0, 0:0:0);
    (CH3_DMONITOROUT_M[19] => CH3_DMONITOROUT[19]) = (0:0:0, 0:0:0);
    (CH3_DMONITOROUT_M[1] => CH3_DMONITOROUT[1]) = (0:0:0, 0:0:0);
    (CH3_DMONITOROUT_M[20] => CH3_DMONITOROUT[20]) = (0:0:0, 0:0:0);
    (CH3_DMONITOROUT_M[21] => CH3_DMONITOROUT[21]) = (0:0:0, 0:0:0);
    (CH3_DMONITOROUT_M[22] => CH3_DMONITOROUT[22]) = (0:0:0, 0:0:0);
    (CH3_DMONITOROUT_M[23] => CH3_DMONITOROUT[23]) = (0:0:0, 0:0:0);
    (CH3_DMONITOROUT_M[24] => CH3_DMONITOROUT[24]) = (0:0:0, 0:0:0);
    (CH3_DMONITOROUT_M[25] => CH3_DMONITOROUT[25]) = (0:0:0, 0:0:0);
    (CH3_DMONITOROUT_M[26] => CH3_DMONITOROUT[26]) = (0:0:0, 0:0:0);
    (CH3_DMONITOROUT_M[27] => CH3_DMONITOROUT[27]) = (0:0:0, 0:0:0);
    (CH3_DMONITOROUT_M[28] => CH3_DMONITOROUT[28]) = (0:0:0, 0:0:0);
    (CH3_DMONITOROUT_M[29] => CH3_DMONITOROUT[29]) = (0:0:0, 0:0:0);
    (CH3_DMONITOROUT_M[2] => CH3_DMONITOROUT[2]) = (0:0:0, 0:0:0);
    (CH3_DMONITOROUT_M[30] => CH3_DMONITOROUT[30]) = (0:0:0, 0:0:0);
    (CH3_DMONITOROUT_M[31] => CH3_DMONITOROUT[31]) = (0:0:0, 0:0:0);
    (CH3_DMONITOROUT_M[3] => CH3_DMONITOROUT[3]) = (0:0:0, 0:0:0);
    (CH3_DMONITOROUT_M[4] => CH3_DMONITOROUT[4]) = (0:0:0, 0:0:0);
    (CH3_DMONITOROUT_M[5] => CH3_DMONITOROUT[5]) = (0:0:0, 0:0:0);
    (CH3_DMONITOROUT_M[6] => CH3_DMONITOROUT[6]) = (0:0:0, 0:0:0);
    (CH3_DMONITOROUT_M[7] => CH3_DMONITOROUT[7]) = (0:0:0, 0:0:0);
    (CH3_DMONITOROUT_M[8] => CH3_DMONITOROUT[8]) = (0:0:0, 0:0:0);
    (CH3_DMONITOROUT_M[9] => CH3_DMONITOROUT[9]) = (0:0:0, 0:0:0);
    (CH3_EYESCANDATAERROR_M => CH3_EYESCANDATAERROR) = (0:0:0, 0:0:0);
    (CH3_EYESCANTRIGGER => CH3_EYESCANTRIGGER_M) = (0:0:0, 0:0:0);
    (CH3_GTRSVD[0] => CH3_GTRSVD_M[0]) = (0:0:0, 0:0:0);
    (CH3_GTRSVD[10] => CH3_GTRSVD_M[10]) = (0:0:0, 0:0:0);
    (CH3_GTRSVD[11] => CH3_GTRSVD_M[11]) = (0:0:0, 0:0:0);
    (CH3_GTRSVD[12] => CH3_GTRSVD_M[12]) = (0:0:0, 0:0:0);
    (CH3_GTRSVD[13] => CH3_GTRSVD_M[13]) = (0:0:0, 0:0:0);
    (CH3_GTRSVD[14] => CH3_GTRSVD_M[14]) = (0:0:0, 0:0:0);
    (CH3_GTRSVD[15] => CH3_GTRSVD_M[15]) = (0:0:0, 0:0:0);
    (CH3_GTRSVD[1] => CH3_GTRSVD_M[1]) = (0:0:0, 0:0:0);
    (CH3_GTRSVD[2] => CH3_GTRSVD_M[2]) = (0:0:0, 0:0:0);
    (CH3_GTRSVD[3] => CH3_GTRSVD_M[3]) = (0:0:0, 0:0:0);
    (CH3_GTRSVD[4] => CH3_GTRSVD_M[4]) = (0:0:0, 0:0:0);
    (CH3_GTRSVD[5] => CH3_GTRSVD_M[5]) = (0:0:0, 0:0:0);
    (CH3_GTRSVD[6] => CH3_GTRSVD_M[6]) = (0:0:0, 0:0:0);
    (CH3_GTRSVD[7] => CH3_GTRSVD_M[7]) = (0:0:0, 0:0:0);
    (CH3_GTRSVD[8] => CH3_GTRSVD_M[8]) = (0:0:0, 0:0:0);
    (CH3_GTRSVD[9] => CH3_GTRSVD_M[9]) = (0:0:0, 0:0:0);
    (CH3_LOOPBACK[0] => CH3_LOOPBACK_M[0]) = (0:0:0, 0:0:0);
    (CH3_LOOPBACK[1] => CH3_LOOPBACK_M[1]) = (0:0:0, 0:0:0);
    (CH3_LOOPBACK[2] => CH3_LOOPBACK_M[2]) = (0:0:0, 0:0:0);
    (CH3_PCSRSVDIN[0] => CH3_PCSRSVDIN_M[0]) = (0:0:0, 0:0:0);
    (CH3_PCSRSVDIN[10] => CH3_PCSRSVDIN_M[10]) = (0:0:0, 0:0:0);
    (CH3_PCSRSVDIN[11] => CH3_PCSRSVDIN_M[11]) = (0:0:0, 0:0:0);
    (CH3_PCSRSVDIN[12] => CH3_PCSRSVDIN_M[12]) = (0:0:0, 0:0:0);
    (CH3_PCSRSVDIN[13] => CH3_PCSRSVDIN_M[13]) = (0:0:0, 0:0:0);
    (CH3_PCSRSVDIN[14] => CH3_PCSRSVDIN_M[14]) = (0:0:0, 0:0:0);
    (CH3_PCSRSVDIN[15] => CH3_PCSRSVDIN_M[15]) = (0:0:0, 0:0:0);
    (CH3_PCSRSVDIN[1] => CH3_PCSRSVDIN_M[1]) = (0:0:0, 0:0:0);
    (CH3_PCSRSVDIN[2] => CH3_PCSRSVDIN_M[2]) = (0:0:0, 0:0:0);
    (CH3_PCSRSVDIN[3] => CH3_PCSRSVDIN_M[3]) = (0:0:0, 0:0:0);
    (CH3_PCSRSVDIN[4] => CH3_PCSRSVDIN_M[4]) = (0:0:0, 0:0:0);
    (CH3_PCSRSVDIN[5] => CH3_PCSRSVDIN_M[5]) = (0:0:0, 0:0:0);
    (CH3_PCSRSVDIN[6] => CH3_PCSRSVDIN_M[6]) = (0:0:0, 0:0:0);
    (CH3_PCSRSVDIN[7] => CH3_PCSRSVDIN_M[7]) = (0:0:0, 0:0:0);
    (CH3_PCSRSVDIN[8] => CH3_PCSRSVDIN_M[8]) = (0:0:0, 0:0:0);
    (CH3_PCSRSVDIN[9] => CH3_PCSRSVDIN_M[9]) = (0:0:0, 0:0:0);
    (CH3_PCSRSVDOUT_M[0] => CH3_PCSRSVDOUT[0]) = (0:0:0, 0:0:0);
    (CH3_PCSRSVDOUT_M[10] => CH3_PCSRSVDOUT[10]) = (0:0:0, 0:0:0);
    (CH3_PCSRSVDOUT_M[11] => CH3_PCSRSVDOUT[11]) = (0:0:0, 0:0:0);
    (CH3_PCSRSVDOUT_M[12] => CH3_PCSRSVDOUT[12]) = (0:0:0, 0:0:0);
    (CH3_PCSRSVDOUT_M[13] => CH3_PCSRSVDOUT[13]) = (0:0:0, 0:0:0);
    (CH3_PCSRSVDOUT_M[14] => CH3_PCSRSVDOUT[14]) = (0:0:0, 0:0:0);
    (CH3_PCSRSVDOUT_M[15] => CH3_PCSRSVDOUT[15]) = (0:0:0, 0:0:0);
    (CH3_PCSRSVDOUT_M[1] => CH3_PCSRSVDOUT[1]) = (0:0:0, 0:0:0);
    (CH3_PCSRSVDOUT_M[2] => CH3_PCSRSVDOUT[2]) = (0:0:0, 0:0:0);
    (CH3_PCSRSVDOUT_M[3] => CH3_PCSRSVDOUT[3]) = (0:0:0, 0:0:0);
    (CH3_PCSRSVDOUT_M[4] => CH3_PCSRSVDOUT[4]) = (0:0:0, 0:0:0);
    (CH3_PCSRSVDOUT_M[5] => CH3_PCSRSVDOUT[5]) = (0:0:0, 0:0:0);
    (CH3_PCSRSVDOUT_M[6] => CH3_PCSRSVDOUT[6]) = (0:0:0, 0:0:0);
    (CH3_PCSRSVDOUT_M[7] => CH3_PCSRSVDOUT[7]) = (0:0:0, 0:0:0);
    (CH3_PCSRSVDOUT_M[8] => CH3_PCSRSVDOUT[8]) = (0:0:0, 0:0:0);
    (CH3_PCSRSVDOUT_M[9] => CH3_PCSRSVDOUT[9]) = (0:0:0, 0:0:0);
    (CH3_PHYESMADAPTSAVE => CH3_PHYESMADAPTSAVE_M) = (0:0:0, 0:0:0);
    (CH3_PHYREADY_M => CH3_PHYREADY) = (0:0:0, 0:0:0);
    (CH3_PHYSTATUS_M => CH3_PHYSTATUS) = (0:0:0, 0:0:0);
    (CH3_PINRSVDAS_M[0] => CH3_PINRSVDAS[0]) = (0:0:0, 0:0:0);
    (CH3_PINRSVDAS_M[10] => CH3_PINRSVDAS[10]) = (0:0:0, 0:0:0);
    (CH3_PINRSVDAS_M[11] => CH3_PINRSVDAS[11]) = (0:0:0, 0:0:0);
    (CH3_PINRSVDAS_M[12] => CH3_PINRSVDAS[12]) = (0:0:0, 0:0:0);
    (CH3_PINRSVDAS_M[13] => CH3_PINRSVDAS[13]) = (0:0:0, 0:0:0);
    (CH3_PINRSVDAS_M[14] => CH3_PINRSVDAS[14]) = (0:0:0, 0:0:0);
    (CH3_PINRSVDAS_M[15] => CH3_PINRSVDAS[15]) = (0:0:0, 0:0:0);
    (CH3_PINRSVDAS_M[1] => CH3_PINRSVDAS[1]) = (0:0:0, 0:0:0);
    (CH3_PINRSVDAS_M[2] => CH3_PINRSVDAS[2]) = (0:0:0, 0:0:0);
    (CH3_PINRSVDAS_M[3] => CH3_PINRSVDAS[3]) = (0:0:0, 0:0:0);
    (CH3_PINRSVDAS_M[4] => CH3_PINRSVDAS[4]) = (0:0:0, 0:0:0);
    (CH3_PINRSVDAS_M[5] => CH3_PINRSVDAS[5]) = (0:0:0, 0:0:0);
    (CH3_PINRSVDAS_M[6] => CH3_PINRSVDAS[6]) = (0:0:0, 0:0:0);
    (CH3_PINRSVDAS_M[7] => CH3_PINRSVDAS[7]) = (0:0:0, 0:0:0);
    (CH3_PINRSVDAS_M[8] => CH3_PINRSVDAS[8]) = (0:0:0, 0:0:0);
    (CH3_PINRSVDAS_M[9] => CH3_PINRSVDAS[9]) = (0:0:0, 0:0:0);
    (CH3_RX10GSTAT_M[0] => CH3_RX10GSTAT[0]) = (0:0:0, 0:0:0);
    (CH3_RX10GSTAT_M[1] => CH3_RX10GSTAT[1]) = (0:0:0, 0:0:0);
    (CH3_RX10GSTAT_M[2] => CH3_RX10GSTAT[2]) = (0:0:0, 0:0:0);
    (CH3_RX10GSTAT_M[3] => CH3_RX10GSTAT[3]) = (0:0:0, 0:0:0);
    (CH3_RX10GSTAT_M[4] => CH3_RX10GSTAT[4]) = (0:0:0, 0:0:0);
    (CH3_RX10GSTAT_M[5] => CH3_RX10GSTAT[5]) = (0:0:0, 0:0:0);
    (CH3_RX10GSTAT_M[6] => CH3_RX10GSTAT[6]) = (0:0:0, 0:0:0);
    (CH3_RX10GSTAT_M[7] => CH3_RX10GSTAT[7]) = (0:0:0, 0:0:0);
    (CH3_RXBUFSTATUS_M[0] => CH3_RXBUFSTATUS[0]) = (0:0:0, 0:0:0);
    (CH3_RXBUFSTATUS_M[1] => CH3_RXBUFSTATUS[1]) = (0:0:0, 0:0:0);
    (CH3_RXBUFSTATUS_M[2] => CH3_RXBUFSTATUS[2]) = (0:0:0, 0:0:0);
    (CH3_RXBYTEISALIGNED_M => CH3_RXBYTEISALIGNED) = (0:0:0, 0:0:0);
    (CH3_RXBYTEREALIGN_M => CH3_RXBYTEREALIGN) = (0:0:0, 0:0:0);
    (CH3_RXCDRHOLD => CH3_RXCDRHOLD_M) = (0:0:0, 0:0:0);
    (CH3_RXCDRLOCK_M => CH3_RXCDRLOCK) = (0:0:0, 0:0:0);
    (CH3_RXCDROVRDEN => CH3_RXCDROVRDEN_M) = (0:0:0, 0:0:0);
    (CH3_RXCDRPHDONE_M => CH3_RXCDRPHDONE) = (0:0:0, 0:0:0);
    (CH3_RXCHANBONDSEQ_M => CH3_RXCHANBONDSEQ) = (0:0:0, 0:0:0);
    (CH3_RXCHANISALIGNED_M => CH3_RXCHANISALIGNED) = (0:0:0, 0:0:0);
    (CH3_RXCHANREALIGN_M => CH3_RXCHANREALIGN) = (0:0:0, 0:0:0);
    (CH3_RXCHBONDI[0] => CH3_RXCHBONDI_M[0]) = (0:0:0, 0:0:0);
    (CH3_RXCHBONDI[1] => CH3_RXCHBONDI_M[1]) = (0:0:0, 0:0:0);
    (CH3_RXCHBONDI[2] => CH3_RXCHBONDI_M[2]) = (0:0:0, 0:0:0);
    (CH3_RXCHBONDI[3] => CH3_RXCHBONDI_M[3]) = (0:0:0, 0:0:0);
    (CH3_RXCHBONDI[4] => CH3_RXCHBONDI_M[4]) = (0:0:0, 0:0:0);
    (CH3_RXCHBONDO_M[0] => CH3_RXCHBONDO[0]) = (0:0:0, 0:0:0);
    (CH3_RXCHBONDO_M[1] => CH3_RXCHBONDO[1]) = (0:0:0, 0:0:0);
    (CH3_RXCHBONDO_M[2] => CH3_RXCHBONDO[2]) = (0:0:0, 0:0:0);
    (CH3_RXCHBONDO_M[3] => CH3_RXCHBONDO[3]) = (0:0:0, 0:0:0);
    (CH3_RXCHBONDO_M[4] => CH3_RXCHBONDO[4]) = (0:0:0, 0:0:0);
    (CH3_RXCLKCORCNT_M[0] => CH3_RXCLKCORCNT[0]) = (0:0:0, 0:0:0);
    (CH3_RXCLKCORCNT_M[1] => CH3_RXCLKCORCNT[1]) = (0:0:0, 0:0:0);
    (CH3_RXCOMINITDET_M => CH3_RXCOMINITDET) = (0:0:0, 0:0:0);
    (CH3_RXCOMMADET_M => CH3_RXCOMMADET) = (0:0:0, 0:0:0);
    (CH3_RXCOMSASDET_M => CH3_RXCOMSASDET) = (0:0:0, 0:0:0);
    (CH3_RXCOMWAKEDET_M => CH3_RXCOMWAKEDET) = (0:0:0, 0:0:0);
    (CH3_RXCTRL0_M[0] => CH3_RXCTRL0[0]) = (0:0:0, 0:0:0);
    (CH3_RXCTRL0_M[10] => CH3_RXCTRL0[10]) = (0:0:0, 0:0:0);
    (CH3_RXCTRL0_M[11] => CH3_RXCTRL0[11]) = (0:0:0, 0:0:0);
    (CH3_RXCTRL0_M[12] => CH3_RXCTRL0[12]) = (0:0:0, 0:0:0);
    (CH3_RXCTRL0_M[13] => CH3_RXCTRL0[13]) = (0:0:0, 0:0:0);
    (CH3_RXCTRL0_M[14] => CH3_RXCTRL0[14]) = (0:0:0, 0:0:0);
    (CH3_RXCTRL0_M[15] => CH3_RXCTRL0[15]) = (0:0:0, 0:0:0);
    (CH3_RXCTRL0_M[1] => CH3_RXCTRL0[1]) = (0:0:0, 0:0:0);
    (CH3_RXCTRL0_M[2] => CH3_RXCTRL0[2]) = (0:0:0, 0:0:0);
    (CH3_RXCTRL0_M[3] => CH3_RXCTRL0[3]) = (0:0:0, 0:0:0);
    (CH3_RXCTRL0_M[4] => CH3_RXCTRL0[4]) = (0:0:0, 0:0:0);
    (CH3_RXCTRL0_M[5] => CH3_RXCTRL0[5]) = (0:0:0, 0:0:0);
    (CH3_RXCTRL0_M[6] => CH3_RXCTRL0[6]) = (0:0:0, 0:0:0);
    (CH3_RXCTRL0_M[7] => CH3_RXCTRL0[7]) = (0:0:0, 0:0:0);
    (CH3_RXCTRL0_M[8] => CH3_RXCTRL0[8]) = (0:0:0, 0:0:0);
    (CH3_RXCTRL0_M[9] => CH3_RXCTRL0[9]) = (0:0:0, 0:0:0);
    (CH3_RXCTRL1_M[0] => CH3_RXCTRL1[0]) = (0:0:0, 0:0:0);
    (CH3_RXCTRL1_M[10] => CH3_RXCTRL1[10]) = (0:0:0, 0:0:0);
    (CH3_RXCTRL1_M[11] => CH3_RXCTRL1[11]) = (0:0:0, 0:0:0);
    (CH3_RXCTRL1_M[12] => CH3_RXCTRL1[12]) = (0:0:0, 0:0:0);
    (CH3_RXCTRL1_M[13] => CH3_RXCTRL1[13]) = (0:0:0, 0:0:0);
    (CH3_RXCTRL1_M[14] => CH3_RXCTRL1[14]) = (0:0:0, 0:0:0);
    (CH3_RXCTRL1_M[15] => CH3_RXCTRL1[15]) = (0:0:0, 0:0:0);
    (CH3_RXCTRL1_M[1] => CH3_RXCTRL1[1]) = (0:0:0, 0:0:0);
    (CH3_RXCTRL1_M[2] => CH3_RXCTRL1[2]) = (0:0:0, 0:0:0);
    (CH3_RXCTRL1_M[3] => CH3_RXCTRL1[3]) = (0:0:0, 0:0:0);
    (CH3_RXCTRL1_M[4] => CH3_RXCTRL1[4]) = (0:0:0, 0:0:0);
    (CH3_RXCTRL1_M[5] => CH3_RXCTRL1[5]) = (0:0:0, 0:0:0);
    (CH3_RXCTRL1_M[6] => CH3_RXCTRL1[6]) = (0:0:0, 0:0:0);
    (CH3_RXCTRL1_M[7] => CH3_RXCTRL1[7]) = (0:0:0, 0:0:0);
    (CH3_RXCTRL1_M[8] => CH3_RXCTRL1[8]) = (0:0:0, 0:0:0);
    (CH3_RXCTRL1_M[9] => CH3_RXCTRL1[9]) = (0:0:0, 0:0:0);
    (CH3_RXCTRL2_M[0] => CH3_RXCTRL2[0]) = (0:0:0, 0:0:0);
    (CH3_RXCTRL2_M[1] => CH3_RXCTRL2[1]) = (0:0:0, 0:0:0);
    (CH3_RXCTRL2_M[2] => CH3_RXCTRL2[2]) = (0:0:0, 0:0:0);
    (CH3_RXCTRL2_M[3] => CH3_RXCTRL2[3]) = (0:0:0, 0:0:0);
    (CH3_RXCTRL2_M[4] => CH3_RXCTRL2[4]) = (0:0:0, 0:0:0);
    (CH3_RXCTRL2_M[5] => CH3_RXCTRL2[5]) = (0:0:0, 0:0:0);
    (CH3_RXCTRL2_M[6] => CH3_RXCTRL2[6]) = (0:0:0, 0:0:0);
    (CH3_RXCTRL2_M[7] => CH3_RXCTRL2[7]) = (0:0:0, 0:0:0);
    (CH3_RXCTRL3_M[0] => CH3_RXCTRL3[0]) = (0:0:0, 0:0:0);
    (CH3_RXCTRL3_M[1] => CH3_RXCTRL3[1]) = (0:0:0, 0:0:0);
    (CH3_RXCTRL3_M[2] => CH3_RXCTRL3[2]) = (0:0:0, 0:0:0);
    (CH3_RXCTRL3_M[3] => CH3_RXCTRL3[3]) = (0:0:0, 0:0:0);
    (CH3_RXCTRL3_M[4] => CH3_RXCTRL3[4]) = (0:0:0, 0:0:0);
    (CH3_RXCTRL3_M[5] => CH3_RXCTRL3[5]) = (0:0:0, 0:0:0);
    (CH3_RXCTRL3_M[6] => CH3_RXCTRL3[6]) = (0:0:0, 0:0:0);
    (CH3_RXCTRL3_M[7] => CH3_RXCTRL3[7]) = (0:0:0, 0:0:0);
    (CH3_RXDAPICODEOVRDEN => CH3_RXDAPICODEOVRDEN_M) = (0:0:0, 0:0:0);
    (CH3_RXDATAEXTENDRSVD_M[0] => CH3_RXDATAEXTENDRSVD[0]) = (0:0:0, 0:0:0);
    (CH3_RXDATAEXTENDRSVD_M[1] => CH3_RXDATAEXTENDRSVD[1]) = (0:0:0, 0:0:0);
    (CH3_RXDATAEXTENDRSVD_M[2] => CH3_RXDATAEXTENDRSVD[2]) = (0:0:0, 0:0:0);
    (CH3_RXDATAEXTENDRSVD_M[3] => CH3_RXDATAEXTENDRSVD[3]) = (0:0:0, 0:0:0);
    (CH3_RXDATAEXTENDRSVD_M[4] => CH3_RXDATAEXTENDRSVD[4]) = (0:0:0, 0:0:0);
    (CH3_RXDATAEXTENDRSVD_M[5] => CH3_RXDATAEXTENDRSVD[5]) = (0:0:0, 0:0:0);
    (CH3_RXDATAEXTENDRSVD_M[6] => CH3_RXDATAEXTENDRSVD[6]) = (0:0:0, 0:0:0);
    (CH3_RXDATAEXTENDRSVD_M[7] => CH3_RXDATAEXTENDRSVD[7]) = (0:0:0, 0:0:0);
    (CH3_RXDATAVALID_M[0] => CH3_RXDATAVALID[0]) = (0:0:0, 0:0:0);
    (CH3_RXDATAVALID_M[1] => CH3_RXDATAVALID[1]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[0] => CH3_RXDATA[0]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[100] => CH3_RXDATA[100]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[101] => CH3_RXDATA[101]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[102] => CH3_RXDATA[102]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[103] => CH3_RXDATA[103]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[104] => CH3_RXDATA[104]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[105] => CH3_RXDATA[105]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[106] => CH3_RXDATA[106]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[107] => CH3_RXDATA[107]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[108] => CH3_RXDATA[108]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[109] => CH3_RXDATA[109]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[10] => CH3_RXDATA[10]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[110] => CH3_RXDATA[110]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[111] => CH3_RXDATA[111]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[112] => CH3_RXDATA[112]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[113] => CH3_RXDATA[113]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[114] => CH3_RXDATA[114]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[115] => CH3_RXDATA[115]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[116] => CH3_RXDATA[116]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[117] => CH3_RXDATA[117]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[118] => CH3_RXDATA[118]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[119] => CH3_RXDATA[119]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[11] => CH3_RXDATA[11]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[120] => CH3_RXDATA[120]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[121] => CH3_RXDATA[121]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[122] => CH3_RXDATA[122]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[123] => CH3_RXDATA[123]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[124] => CH3_RXDATA[124]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[125] => CH3_RXDATA[125]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[126] => CH3_RXDATA[126]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[127] => CH3_RXDATA[127]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[12] => CH3_RXDATA[12]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[13] => CH3_RXDATA[13]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[14] => CH3_RXDATA[14]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[15] => CH3_RXDATA[15]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[16] => CH3_RXDATA[16]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[17] => CH3_RXDATA[17]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[18] => CH3_RXDATA[18]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[19] => CH3_RXDATA[19]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[1] => CH3_RXDATA[1]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[20] => CH3_RXDATA[20]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[21] => CH3_RXDATA[21]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[22] => CH3_RXDATA[22]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[23] => CH3_RXDATA[23]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[24] => CH3_RXDATA[24]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[25] => CH3_RXDATA[25]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[26] => CH3_RXDATA[26]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[27] => CH3_RXDATA[27]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[28] => CH3_RXDATA[28]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[29] => CH3_RXDATA[29]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[2] => CH3_RXDATA[2]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[30] => CH3_RXDATA[30]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[31] => CH3_RXDATA[31]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[32] => CH3_RXDATA[32]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[33] => CH3_RXDATA[33]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[34] => CH3_RXDATA[34]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[35] => CH3_RXDATA[35]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[36] => CH3_RXDATA[36]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[37] => CH3_RXDATA[37]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[38] => CH3_RXDATA[38]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[39] => CH3_RXDATA[39]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[3] => CH3_RXDATA[3]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[40] => CH3_RXDATA[40]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[41] => CH3_RXDATA[41]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[42] => CH3_RXDATA[42]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[43] => CH3_RXDATA[43]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[44] => CH3_RXDATA[44]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[45] => CH3_RXDATA[45]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[46] => CH3_RXDATA[46]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[47] => CH3_RXDATA[47]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[48] => CH3_RXDATA[48]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[49] => CH3_RXDATA[49]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[4] => CH3_RXDATA[4]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[50] => CH3_RXDATA[50]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[51] => CH3_RXDATA[51]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[52] => CH3_RXDATA[52]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[53] => CH3_RXDATA[53]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[54] => CH3_RXDATA[54]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[55] => CH3_RXDATA[55]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[56] => CH3_RXDATA[56]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[57] => CH3_RXDATA[57]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[58] => CH3_RXDATA[58]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[59] => CH3_RXDATA[59]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[5] => CH3_RXDATA[5]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[60] => CH3_RXDATA[60]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[61] => CH3_RXDATA[61]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[62] => CH3_RXDATA[62]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[63] => CH3_RXDATA[63]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[64] => CH3_RXDATA[64]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[65] => CH3_RXDATA[65]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[66] => CH3_RXDATA[66]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[67] => CH3_RXDATA[67]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[68] => CH3_RXDATA[68]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[69] => CH3_RXDATA[69]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[6] => CH3_RXDATA[6]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[70] => CH3_RXDATA[70]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[71] => CH3_RXDATA[71]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[72] => CH3_RXDATA[72]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[73] => CH3_RXDATA[73]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[74] => CH3_RXDATA[74]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[75] => CH3_RXDATA[75]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[76] => CH3_RXDATA[76]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[77] => CH3_RXDATA[77]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[78] => CH3_RXDATA[78]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[79] => CH3_RXDATA[79]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[7] => CH3_RXDATA[7]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[80] => CH3_RXDATA[80]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[81] => CH3_RXDATA[81]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[82] => CH3_RXDATA[82]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[83] => CH3_RXDATA[83]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[84] => CH3_RXDATA[84]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[85] => CH3_RXDATA[85]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[86] => CH3_RXDATA[86]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[87] => CH3_RXDATA[87]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[88] => CH3_RXDATA[88]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[89] => CH3_RXDATA[89]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[8] => CH3_RXDATA[8]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[90] => CH3_RXDATA[90]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[91] => CH3_RXDATA[91]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[92] => CH3_RXDATA[92]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[93] => CH3_RXDATA[93]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[94] => CH3_RXDATA[94]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[95] => CH3_RXDATA[95]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[96] => CH3_RXDATA[96]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[97] => CH3_RXDATA[97]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[98] => CH3_RXDATA[98]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[99] => CH3_RXDATA[99]) = (0:0:0, 0:0:0);
    (CH3_RXDATA_M[9] => CH3_RXDATA[9]) = (0:0:0, 0:0:0);
    (CH3_RXDCCDONE_M => CH3_RXDCCDONE) = (0:0:0, 0:0:0);
    (CH3_RXDLYALIGNERR_M => CH3_RXDLYALIGNERR) = (0:0:0, 0:0:0);
    (CH3_RXDLYALIGNPROG_M => CH3_RXDLYALIGNPROG) = (0:0:0, 0:0:0);
    (CH3_RXDLYALIGNREQ => CH3_RXDLYALIGNREQ_M) = (0:0:0, 0:0:0);
    (CH3_RXELECIDLE_M => CH3_RXELECIDLE) = (0:0:0, 0:0:0);
    (CH3_RXEQTRAINING => CH3_RXEQTRAINING_M) = (0:0:0, 0:0:0);
    (CH3_RXFINEALIGNDONE_M => CH3_RXFINEALIGNDONE) = (0:0:0, 0:0:0);
    (CH3_RXGEARBOXSLIP => CH3_RXGEARBOXSLIP_M) = (0:0:0, 0:0:0);
    (CH3_RXHEADERVALID_M[0] => CH3_RXHEADERVALID[0]) = (0:0:0, 0:0:0);
    (CH3_RXHEADERVALID_M[1] => CH3_RXHEADERVALID[1]) = (0:0:0, 0:0:0);
    (CH3_RXHEADER_M[0] => CH3_RXHEADER[0]) = (0:0:0, 0:0:0);
    (CH3_RXHEADER_M[1] => CH3_RXHEADER[1]) = (0:0:0, 0:0:0);
    (CH3_RXHEADER_M[2] => CH3_RXHEADER[2]) = (0:0:0, 0:0:0);
    (CH3_RXHEADER_M[3] => CH3_RXHEADER[3]) = (0:0:0, 0:0:0);
    (CH3_RXHEADER_M[4] => CH3_RXHEADER[4]) = (0:0:0, 0:0:0);
    (CH3_RXHEADER_M[5] => CH3_RXHEADER[5]) = (0:0:0, 0:0:0);
    (CH3_RXLATCLK => CH3_RXLATCLK_M) = (0:0:0, 0:0:0);
    (CH3_RXLPMEN => CH3_RXLPMEN_M) = (0:0:0, 0:0:0);
    (CH3_RXMLDCHAINDONE => CH3_RXMLDCHAINDONE_M) = (0:0:0, 0:0:0);
    (CH3_RXMLDCHAINREQ => CH3_RXMLDCHAINREQ_M) = (0:0:0, 0:0:0);
    (CH3_RXMLFINEALIGNREQ => CH3_RXMLFINEALIGNREQ_M) = (0:0:0, 0:0:0);
    (CH3_RXOSINTDONE_M => CH3_RXOSINTDONE) = (0:0:0, 0:0:0);
    (CH3_RXOSINTSTARTED_M => CH3_RXOSINTSTARTED) = (0:0:0, 0:0:0);
    (CH3_RXOSINTSTROBEDONE_M => CH3_RXOSINTSTROBEDONE) = (0:0:0, 0:0:0);
    (CH3_RXOSINTSTROBESTARTED_M => CH3_RXOSINTSTROBESTARTED) = (0:0:0, 0:0:0);
    (CH3_RXPD[0] => CH3_RXPD_M[0]) = (0:0:0, 0:0:0);
    (CH3_RXPD[1] => CH3_RXPD_M[1]) = (0:0:0, 0:0:0);
    (CH3_RXPHALIGNDONE_M => CH3_RXPHALIGNDONE) = (0:0:0, 0:0:0);
    (CH3_RXPHALIGNERR_M => CH3_RXPHALIGNERR) = (0:0:0, 0:0:0);
    (CH3_RXPHALIGNREQ => CH3_RXPHALIGNREQ_M) = (0:0:0, 0:0:0);
    (CH3_RXPHDLYPD => CH3_RXPHDLYPD_M) = (0:0:0, 0:0:0);
    (CH3_RXPHSHIFT180 => CH3_RXPHSHIFT180_M) = (0:0:0, 0:0:0);
    (CH3_RXPHSHIFT180DONE_M => CH3_RXPHSHIFT180DONE) = (0:0:0, 0:0:0);
    (CH3_RXPOLARITY => CH3_RXPOLARITY_M) = (0:0:0, 0:0:0);
    (CH3_RXPRBSERR_M => CH3_RXPRBSERR) = (0:0:0, 0:0:0);
    (CH3_RXPRBSLOCKED_M => CH3_RXPRBSLOCKED) = (0:0:0, 0:0:0);
    (CH3_RXPRBSSEL[0] => CH3_RXPRBSSEL_M[0]) = (0:0:0, 0:0:0);
    (CH3_RXPRBSSEL[1] => CH3_RXPRBSSEL_M[1]) = (0:0:0, 0:0:0);
    (CH3_RXPRBSSEL[2] => CH3_RXPRBSSEL_M[2]) = (0:0:0, 0:0:0);
    (CH3_RXPRBSSEL[3] => CH3_RXPRBSSEL_M[3]) = (0:0:0, 0:0:0);
    (CH3_RXRATE[0] => CH3_RXRATE_M[0]) = (0:0:0, 0:0:0);
    (CH3_RXRATE[1] => CH3_RXRATE_M[1]) = (0:0:0, 0:0:0);
    (CH3_RXRATE[2] => CH3_RXRATE_M[2]) = (0:0:0, 0:0:0);
    (CH3_RXRATE[3] => CH3_RXRATE_M[3]) = (0:0:0, 0:0:0);
    (CH3_RXRATE[4] => CH3_RXRATE_M[4]) = (0:0:0, 0:0:0);
    (CH3_RXRATE[5] => CH3_RXRATE_M[5]) = (0:0:0, 0:0:0);
    (CH3_RXRATE[6] => CH3_RXRATE_M[6]) = (0:0:0, 0:0:0);
    (CH3_RXRATE[7] => CH3_RXRATE_M[7]) = (0:0:0, 0:0:0);
    (CH3_RXSLIDE => CH3_RXSLIDE_M) = (0:0:0, 0:0:0);
    (CH3_RXSLIDERDY_M => CH3_RXSLIDERDY) = (0:0:0, 0:0:0);
    (CH3_RXSTARTOFSEQ_M[0] => CH3_RXSTARTOFSEQ[0]) = (0:0:0, 0:0:0);
    (CH3_RXSTARTOFSEQ_M[1] => CH3_RXSTARTOFSEQ[1]) = (0:0:0, 0:0:0);
    (CH3_RXSTATUS_M[0] => CH3_RXSTATUS[0]) = (0:0:0, 0:0:0);
    (CH3_RXSTATUS_M[1] => CH3_RXSTATUS[1]) = (0:0:0, 0:0:0);
    (CH3_RXSTATUS_M[2] => CH3_RXSTATUS[2]) = (0:0:0, 0:0:0);
    (CH3_RXSYNCALLIN => CH3_RXSYNCALLIN_M) = (0:0:0, 0:0:0);
    (CH3_RXSYNCDONE_M => CH3_RXSYNCDONE) = (0:0:0, 0:0:0);
    (CH3_RXTERMINATION => CH3_RXTERMINATION_M) = (0:0:0, 0:0:0);
    (CH3_RXUSERRDY => CH3_RXUSERRDY_M) = (0:0:0, 0:0:0);
    (CH3_RXUSRCLK => CH3_RXUSRCLK_M) = (0:0:0, 0:0:0);
    (CH3_RXVALID_M => CH3_RXVALID) = (0:0:0, 0:0:0);
    (CH3_TSTCLK0 => CH3_TSTCLK0_M) = (0:0:0, 0:0:0);
    (CH3_TSTCLK1 => CH3_TSTCLK1_M) = (0:0:0, 0:0:0);
    (CH3_TSTIN[0] => CH3_TSTIN_M[0]) = (0:0:0, 0:0:0);
    (CH3_TSTIN[10] => CH3_TSTIN_M[10]) = (0:0:0, 0:0:0);
    (CH3_TSTIN[11] => CH3_TSTIN_M[11]) = (0:0:0, 0:0:0);
    (CH3_TSTIN[12] => CH3_TSTIN_M[12]) = (0:0:0, 0:0:0);
    (CH3_TSTIN[13] => CH3_TSTIN_M[13]) = (0:0:0, 0:0:0);
    (CH3_TSTIN[14] => CH3_TSTIN_M[14]) = (0:0:0, 0:0:0);
    (CH3_TSTIN[15] => CH3_TSTIN_M[15]) = (0:0:0, 0:0:0);
    (CH3_TSTIN[16] => CH3_TSTIN_M[16]) = (0:0:0, 0:0:0);
    (CH3_TSTIN[17] => CH3_TSTIN_M[17]) = (0:0:0, 0:0:0);
    (CH3_TSTIN[18] => CH3_TSTIN_M[18]) = (0:0:0, 0:0:0);
    (CH3_TSTIN[19] => CH3_TSTIN_M[19]) = (0:0:0, 0:0:0);
    (CH3_TSTIN[1] => CH3_TSTIN_M[1]) = (0:0:0, 0:0:0);
    (CH3_TSTIN[2] => CH3_TSTIN_M[2]) = (0:0:0, 0:0:0);
    (CH3_TSTIN[3] => CH3_TSTIN_M[3]) = (0:0:0, 0:0:0);
    (CH3_TSTIN[4] => CH3_TSTIN_M[4]) = (0:0:0, 0:0:0);
    (CH3_TSTIN[5] => CH3_TSTIN_M[5]) = (0:0:0, 0:0:0);
    (CH3_TSTIN[6] => CH3_TSTIN_M[6]) = (0:0:0, 0:0:0);
    (CH3_TSTIN[7] => CH3_TSTIN_M[7]) = (0:0:0, 0:0:0);
    (CH3_TSTIN[8] => CH3_TSTIN_M[8]) = (0:0:0, 0:0:0);
    (CH3_TSTIN[9] => CH3_TSTIN_M[9]) = (0:0:0, 0:0:0);
    (CH3_TX10GSTAT_M => CH3_TX10GSTAT) = (0:0:0, 0:0:0);
    (CH3_TXBUFSTATUS_M[0] => CH3_TXBUFSTATUS[0]) = (0:0:0, 0:0:0);
    (CH3_TXBUFSTATUS_M[1] => CH3_TXBUFSTATUS[1]) = (0:0:0, 0:0:0);
    (CH3_TXCOMFINISH_M => CH3_TXCOMFINISH) = (0:0:0, 0:0:0);
    (CH3_TXCOMINIT => CH3_TXCOMINIT_M) = (0:0:0, 0:0:0);
    (CH3_TXCOMSAS => CH3_TXCOMSAS_M) = (0:0:0, 0:0:0);
    (CH3_TXCOMWAKE => CH3_TXCOMWAKE_M) = (0:0:0, 0:0:0);
    (CH3_TXCTRL0[0] => CH3_TXCTRL0_M[0]) = (0:0:0, 0:0:0);
    (CH3_TXCTRL0[10] => CH3_TXCTRL0_M[10]) = (0:0:0, 0:0:0);
    (CH3_TXCTRL0[11] => CH3_TXCTRL0_M[11]) = (0:0:0, 0:0:0);
    (CH3_TXCTRL0[12] => CH3_TXCTRL0_M[12]) = (0:0:0, 0:0:0);
    (CH3_TXCTRL0[13] => CH3_TXCTRL0_M[13]) = (0:0:0, 0:0:0);
    (CH3_TXCTRL0[14] => CH3_TXCTRL0_M[14]) = (0:0:0, 0:0:0);
    (CH3_TXCTRL0[15] => CH3_TXCTRL0_M[15]) = (0:0:0, 0:0:0);
    (CH3_TXCTRL0[1] => CH3_TXCTRL0_M[1]) = (0:0:0, 0:0:0);
    (CH3_TXCTRL0[2] => CH3_TXCTRL0_M[2]) = (0:0:0, 0:0:0);
    (CH3_TXCTRL0[3] => CH3_TXCTRL0_M[3]) = (0:0:0, 0:0:0);
    (CH3_TXCTRL0[4] => CH3_TXCTRL0_M[4]) = (0:0:0, 0:0:0);
    (CH3_TXCTRL0[5] => CH3_TXCTRL0_M[5]) = (0:0:0, 0:0:0);
    (CH3_TXCTRL0[6] => CH3_TXCTRL0_M[6]) = (0:0:0, 0:0:0);
    (CH3_TXCTRL0[7] => CH3_TXCTRL0_M[7]) = (0:0:0, 0:0:0);
    (CH3_TXCTRL0[8] => CH3_TXCTRL0_M[8]) = (0:0:0, 0:0:0);
    (CH3_TXCTRL0[9] => CH3_TXCTRL0_M[9]) = (0:0:0, 0:0:0);
    (CH3_TXCTRL1[0] => CH3_TXCTRL1_M[0]) = (0:0:0, 0:0:0);
    (CH3_TXCTRL1[10] => CH3_TXCTRL1_M[10]) = (0:0:0, 0:0:0);
    (CH3_TXCTRL1[11] => CH3_TXCTRL1_M[11]) = (0:0:0, 0:0:0);
    (CH3_TXCTRL1[12] => CH3_TXCTRL1_M[12]) = (0:0:0, 0:0:0);
    (CH3_TXCTRL1[13] => CH3_TXCTRL1_M[13]) = (0:0:0, 0:0:0);
    (CH3_TXCTRL1[14] => CH3_TXCTRL1_M[14]) = (0:0:0, 0:0:0);
    (CH3_TXCTRL1[15] => CH3_TXCTRL1_M[15]) = (0:0:0, 0:0:0);
    (CH3_TXCTRL1[1] => CH3_TXCTRL1_M[1]) = (0:0:0, 0:0:0);
    (CH3_TXCTRL1[2] => CH3_TXCTRL1_M[2]) = (0:0:0, 0:0:0);
    (CH3_TXCTRL1[3] => CH3_TXCTRL1_M[3]) = (0:0:0, 0:0:0);
    (CH3_TXCTRL1[4] => CH3_TXCTRL1_M[4]) = (0:0:0, 0:0:0);
    (CH3_TXCTRL1[5] => CH3_TXCTRL1_M[5]) = (0:0:0, 0:0:0);
    (CH3_TXCTRL1[6] => CH3_TXCTRL1_M[6]) = (0:0:0, 0:0:0);
    (CH3_TXCTRL1[7] => CH3_TXCTRL1_M[7]) = (0:0:0, 0:0:0);
    (CH3_TXCTRL1[8] => CH3_TXCTRL1_M[8]) = (0:0:0, 0:0:0);
    (CH3_TXCTRL1[9] => CH3_TXCTRL1_M[9]) = (0:0:0, 0:0:0);
    (CH3_TXCTRL2[0] => CH3_TXCTRL2_M[0]) = (0:0:0, 0:0:0);
    (CH3_TXCTRL2[1] => CH3_TXCTRL2_M[1]) = (0:0:0, 0:0:0);
    (CH3_TXCTRL2[2] => CH3_TXCTRL2_M[2]) = (0:0:0, 0:0:0);
    (CH3_TXCTRL2[3] => CH3_TXCTRL2_M[3]) = (0:0:0, 0:0:0);
    (CH3_TXCTRL2[4] => CH3_TXCTRL2_M[4]) = (0:0:0, 0:0:0);
    (CH3_TXCTRL2[5] => CH3_TXCTRL2_M[5]) = (0:0:0, 0:0:0);
    (CH3_TXCTRL2[6] => CH3_TXCTRL2_M[6]) = (0:0:0, 0:0:0);
    (CH3_TXCTRL2[7] => CH3_TXCTRL2_M[7]) = (0:0:0, 0:0:0);
    (CH3_TXDAPICODEOVRDEN => CH3_TXDAPICODEOVRDEN_M) = (0:0:0, 0:0:0);
    (CH3_TXDATAEXTENDRSVD[0] => CH3_TXDATAEXTENDRSVD_M[0]) = (0:0:0, 0:0:0);
    (CH3_TXDATAEXTENDRSVD[1] => CH3_TXDATAEXTENDRSVD_M[1]) = (0:0:0, 0:0:0);
    (CH3_TXDATAEXTENDRSVD[2] => CH3_TXDATAEXTENDRSVD_M[2]) = (0:0:0, 0:0:0);
    (CH3_TXDATAEXTENDRSVD[3] => CH3_TXDATAEXTENDRSVD_M[3]) = (0:0:0, 0:0:0);
    (CH3_TXDATAEXTENDRSVD[4] => CH3_TXDATAEXTENDRSVD_M[4]) = (0:0:0, 0:0:0);
    (CH3_TXDATAEXTENDRSVD[5] => CH3_TXDATAEXTENDRSVD_M[5]) = (0:0:0, 0:0:0);
    (CH3_TXDATAEXTENDRSVD[6] => CH3_TXDATAEXTENDRSVD_M[6]) = (0:0:0, 0:0:0);
    (CH3_TXDATAEXTENDRSVD[7] => CH3_TXDATAEXTENDRSVD_M[7]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[0] => CH3_TXDATA_M[0]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[100] => CH3_TXDATA_M[100]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[101] => CH3_TXDATA_M[101]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[102] => CH3_TXDATA_M[102]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[103] => CH3_TXDATA_M[103]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[104] => CH3_TXDATA_M[104]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[105] => CH3_TXDATA_M[105]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[106] => CH3_TXDATA_M[106]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[107] => CH3_TXDATA_M[107]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[108] => CH3_TXDATA_M[108]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[109] => CH3_TXDATA_M[109]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[10] => CH3_TXDATA_M[10]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[110] => CH3_TXDATA_M[110]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[111] => CH3_TXDATA_M[111]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[112] => CH3_TXDATA_M[112]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[113] => CH3_TXDATA_M[113]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[114] => CH3_TXDATA_M[114]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[115] => CH3_TXDATA_M[115]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[116] => CH3_TXDATA_M[116]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[117] => CH3_TXDATA_M[117]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[118] => CH3_TXDATA_M[118]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[119] => CH3_TXDATA_M[119]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[11] => CH3_TXDATA_M[11]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[120] => CH3_TXDATA_M[120]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[121] => CH3_TXDATA_M[121]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[122] => CH3_TXDATA_M[122]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[123] => CH3_TXDATA_M[123]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[124] => CH3_TXDATA_M[124]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[125] => CH3_TXDATA_M[125]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[126] => CH3_TXDATA_M[126]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[127] => CH3_TXDATA_M[127]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[12] => CH3_TXDATA_M[12]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[13] => CH3_TXDATA_M[13]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[14] => CH3_TXDATA_M[14]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[15] => CH3_TXDATA_M[15]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[16] => CH3_TXDATA_M[16]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[17] => CH3_TXDATA_M[17]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[18] => CH3_TXDATA_M[18]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[19] => CH3_TXDATA_M[19]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[1] => CH3_TXDATA_M[1]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[20] => CH3_TXDATA_M[20]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[21] => CH3_TXDATA_M[21]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[22] => CH3_TXDATA_M[22]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[23] => CH3_TXDATA_M[23]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[24] => CH3_TXDATA_M[24]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[25] => CH3_TXDATA_M[25]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[26] => CH3_TXDATA_M[26]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[27] => CH3_TXDATA_M[27]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[28] => CH3_TXDATA_M[28]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[29] => CH3_TXDATA_M[29]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[2] => CH3_TXDATA_M[2]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[30] => CH3_TXDATA_M[30]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[31] => CH3_TXDATA_M[31]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[32] => CH3_TXDATA_M[32]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[33] => CH3_TXDATA_M[33]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[34] => CH3_TXDATA_M[34]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[35] => CH3_TXDATA_M[35]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[36] => CH3_TXDATA_M[36]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[37] => CH3_TXDATA_M[37]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[38] => CH3_TXDATA_M[38]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[39] => CH3_TXDATA_M[39]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[3] => CH3_TXDATA_M[3]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[40] => CH3_TXDATA_M[40]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[41] => CH3_TXDATA_M[41]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[42] => CH3_TXDATA_M[42]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[43] => CH3_TXDATA_M[43]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[44] => CH3_TXDATA_M[44]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[45] => CH3_TXDATA_M[45]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[46] => CH3_TXDATA_M[46]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[47] => CH3_TXDATA_M[47]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[48] => CH3_TXDATA_M[48]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[49] => CH3_TXDATA_M[49]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[4] => CH3_TXDATA_M[4]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[50] => CH3_TXDATA_M[50]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[51] => CH3_TXDATA_M[51]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[52] => CH3_TXDATA_M[52]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[53] => CH3_TXDATA_M[53]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[54] => CH3_TXDATA_M[54]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[55] => CH3_TXDATA_M[55]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[56] => CH3_TXDATA_M[56]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[57] => CH3_TXDATA_M[57]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[58] => CH3_TXDATA_M[58]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[59] => CH3_TXDATA_M[59]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[5] => CH3_TXDATA_M[5]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[60] => CH3_TXDATA_M[60]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[61] => CH3_TXDATA_M[61]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[62] => CH3_TXDATA_M[62]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[63] => CH3_TXDATA_M[63]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[64] => CH3_TXDATA_M[64]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[65] => CH3_TXDATA_M[65]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[66] => CH3_TXDATA_M[66]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[67] => CH3_TXDATA_M[67]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[68] => CH3_TXDATA_M[68]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[69] => CH3_TXDATA_M[69]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[6] => CH3_TXDATA_M[6]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[70] => CH3_TXDATA_M[70]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[71] => CH3_TXDATA_M[71]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[72] => CH3_TXDATA_M[72]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[73] => CH3_TXDATA_M[73]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[74] => CH3_TXDATA_M[74]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[75] => CH3_TXDATA_M[75]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[76] => CH3_TXDATA_M[76]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[77] => CH3_TXDATA_M[77]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[78] => CH3_TXDATA_M[78]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[79] => CH3_TXDATA_M[79]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[7] => CH3_TXDATA_M[7]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[80] => CH3_TXDATA_M[80]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[81] => CH3_TXDATA_M[81]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[82] => CH3_TXDATA_M[82]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[83] => CH3_TXDATA_M[83]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[84] => CH3_TXDATA_M[84]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[85] => CH3_TXDATA_M[85]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[86] => CH3_TXDATA_M[86]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[87] => CH3_TXDATA_M[87]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[88] => CH3_TXDATA_M[88]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[89] => CH3_TXDATA_M[89]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[8] => CH3_TXDATA_M[8]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[90] => CH3_TXDATA_M[90]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[91] => CH3_TXDATA_M[91]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[92] => CH3_TXDATA_M[92]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[93] => CH3_TXDATA_M[93]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[94] => CH3_TXDATA_M[94]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[95] => CH3_TXDATA_M[95]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[96] => CH3_TXDATA_M[96]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[97] => CH3_TXDATA_M[97]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[98] => CH3_TXDATA_M[98]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[99] => CH3_TXDATA_M[99]) = (0:0:0, 0:0:0);
    (CH3_TXDATA[9] => CH3_TXDATA_M[9]) = (0:0:0, 0:0:0);
    (CH3_TXDCCDONE_M => CH3_TXDCCDONE) = (0:0:0, 0:0:0);
    (CH3_TXDEEMPH[0] => CH3_TXDEEMPH_M[0]) = (0:0:0, 0:0:0);
    (CH3_TXDEEMPH[1] => CH3_TXDEEMPH_M[1]) = (0:0:0, 0:0:0);
    (CH3_TXDETECTRX => CH3_TXDETECTRX_M) = (0:0:0, 0:0:0);
    (CH3_TXDIFFCTRL[0] => CH3_TXDIFFCTRL_M[0]) = (0:0:0, 0:0:0);
    (CH3_TXDIFFCTRL[1] => CH3_TXDIFFCTRL_M[1]) = (0:0:0, 0:0:0);
    (CH3_TXDIFFCTRL[2] => CH3_TXDIFFCTRL_M[2]) = (0:0:0, 0:0:0);
    (CH3_TXDIFFCTRL[3] => CH3_TXDIFFCTRL_M[3]) = (0:0:0, 0:0:0);
    (CH3_TXDIFFCTRL[4] => CH3_TXDIFFCTRL_M[4]) = (0:0:0, 0:0:0);
    (CH3_TXDLYALIGNERR_M => CH3_TXDLYALIGNERR) = (0:0:0, 0:0:0);
    (CH3_TXDLYALIGNPROG_M => CH3_TXDLYALIGNPROG) = (0:0:0, 0:0:0);
    (CH3_TXDLYALIGNREQ => CH3_TXDLYALIGNREQ_M) = (0:0:0, 0:0:0);
    (CH3_TXELECIDLE => CH3_TXELECIDLE_M) = (0:0:0, 0:0:0);
    (CH3_TXHEADER[0] => CH3_TXHEADER_M[0]) = (0:0:0, 0:0:0);
    (CH3_TXHEADER[1] => CH3_TXHEADER_M[1]) = (0:0:0, 0:0:0);
    (CH3_TXHEADER[2] => CH3_TXHEADER_M[2]) = (0:0:0, 0:0:0);
    (CH3_TXHEADER[3] => CH3_TXHEADER_M[3]) = (0:0:0, 0:0:0);
    (CH3_TXHEADER[4] => CH3_TXHEADER_M[4]) = (0:0:0, 0:0:0);
    (CH3_TXHEADER[5] => CH3_TXHEADER_M[5]) = (0:0:0, 0:0:0);
    (CH3_TXINHIBIT => CH3_TXINHIBIT_M) = (0:0:0, 0:0:0);
    (CH3_TXLATCLK => CH3_TXLATCLK_M) = (0:0:0, 0:0:0);
    (CH3_TXMAINCURSOR[0] => CH3_TXMAINCURSOR_M[0]) = (0:0:0, 0:0:0);
    (CH3_TXMAINCURSOR[1] => CH3_TXMAINCURSOR_M[1]) = (0:0:0, 0:0:0);
    (CH3_TXMAINCURSOR[2] => CH3_TXMAINCURSOR_M[2]) = (0:0:0, 0:0:0);
    (CH3_TXMAINCURSOR[3] => CH3_TXMAINCURSOR_M[3]) = (0:0:0, 0:0:0);
    (CH3_TXMAINCURSOR[4] => CH3_TXMAINCURSOR_M[4]) = (0:0:0, 0:0:0);
    (CH3_TXMAINCURSOR[5] => CH3_TXMAINCURSOR_M[5]) = (0:0:0, 0:0:0);
    (CH3_TXMAINCURSOR[6] => CH3_TXMAINCURSOR_M[6]) = (0:0:0, 0:0:0);
    (CH3_TXMARGIN[0] => CH3_TXMARGIN_M[0]) = (0:0:0, 0:0:0);
    (CH3_TXMARGIN[1] => CH3_TXMARGIN_M[1]) = (0:0:0, 0:0:0);
    (CH3_TXMARGIN[2] => CH3_TXMARGIN_M[2]) = (0:0:0, 0:0:0);
    (CH3_TXMLDCHAINDONE => CH3_TXMLDCHAINDONE_M) = (0:0:0, 0:0:0);
    (CH3_TXMLDCHAINREQ => CH3_TXMLDCHAINREQ_M) = (0:0:0, 0:0:0);
    (CH3_TXONESZEROS => CH3_TXONESZEROS_M) = (0:0:0, 0:0:0);
    (CH3_TXPAUSEDELAYALIGN => CH3_TXPAUSEDELAYALIGN_M) = (0:0:0, 0:0:0);
    (CH3_TXPD[0] => CH3_TXPD_M[0]) = (0:0:0, 0:0:0);
    (CH3_TXPD[1] => CH3_TXPD_M[1]) = (0:0:0, 0:0:0);
    (CH3_TXPHALIGNDONE_M => CH3_TXPHALIGNDONE) = (0:0:0, 0:0:0);
    (CH3_TXPHALIGNERR_M => CH3_TXPHALIGNERR) = (0:0:0, 0:0:0);
    (CH3_TXPHALIGNOUTRSVD_M => CH3_TXPHALIGNOUTRSVD) = (0:0:0, 0:0:0);
    (CH3_TXPHALIGNREQ => CH3_TXPHALIGNREQ_M) = (0:0:0, 0:0:0);
    (CH3_TXPHDLYPD => CH3_TXPHDLYPD_M) = (0:0:0, 0:0:0);
    (CH3_TXPHDLYTSTCLK => CH3_TXPHDLYTSTCLK_M) = (0:0:0, 0:0:0);
    (CH3_TXPHSHIFT180 => CH3_TXPHSHIFT180_M) = (0:0:0, 0:0:0);
    (CH3_TXPHSHIFT180DONE_M => CH3_TXPHSHIFT180DONE) = (0:0:0, 0:0:0);
    (CH3_TXPICODEOVRDEN => CH3_TXPICODEOVRDEN_M) = (0:0:0, 0:0:0);
    (CH3_TXPIPPMEN => CH3_TXPIPPMEN_M) = (0:0:0, 0:0:0);
    (CH3_TXPIPPMSTEPSIZE[0] => CH3_TXPIPPMSTEPSIZE_M[0]) = (0:0:0, 0:0:0);
    (CH3_TXPIPPMSTEPSIZE[1] => CH3_TXPIPPMSTEPSIZE_M[1]) = (0:0:0, 0:0:0);
    (CH3_TXPIPPMSTEPSIZE[2] => CH3_TXPIPPMSTEPSIZE_M[2]) = (0:0:0, 0:0:0);
    (CH3_TXPIPPMSTEPSIZE[3] => CH3_TXPIPPMSTEPSIZE_M[3]) = (0:0:0, 0:0:0);
    (CH3_TXPIPPMSTEPSIZE[4] => CH3_TXPIPPMSTEPSIZE_M[4]) = (0:0:0, 0:0:0);
    (CH3_TXPISOPD => CH3_TXPISOPD_M) = (0:0:0, 0:0:0);
    (CH3_TXPOLARITY => CH3_TXPOLARITY_M) = (0:0:0, 0:0:0);
    (CH3_TXPOSTCURSOR[0] => CH3_TXPOSTCURSOR_M[0]) = (0:0:0, 0:0:0);
    (CH3_TXPOSTCURSOR[1] => CH3_TXPOSTCURSOR_M[1]) = (0:0:0, 0:0:0);
    (CH3_TXPOSTCURSOR[2] => CH3_TXPOSTCURSOR_M[2]) = (0:0:0, 0:0:0);
    (CH3_TXPOSTCURSOR[3] => CH3_TXPOSTCURSOR_M[3]) = (0:0:0, 0:0:0);
    (CH3_TXPOSTCURSOR[4] => CH3_TXPOSTCURSOR_M[4]) = (0:0:0, 0:0:0);
    (CH3_TXPRBSFORCEERR => CH3_TXPRBSFORCEERR_M) = (0:0:0, 0:0:0);
    (CH3_TXPRBSSEL[0] => CH3_TXPRBSSEL_M[0]) = (0:0:0, 0:0:0);
    (CH3_TXPRBSSEL[1] => CH3_TXPRBSSEL_M[1]) = (0:0:0, 0:0:0);
    (CH3_TXPRBSSEL[2] => CH3_TXPRBSSEL_M[2]) = (0:0:0, 0:0:0);
    (CH3_TXPRBSSEL[3] => CH3_TXPRBSSEL_M[3]) = (0:0:0, 0:0:0);
    (CH3_TXRATE[0] => CH3_TXRATE_M[0]) = (0:0:0, 0:0:0);
    (CH3_TXRATE[1] => CH3_TXRATE_M[1]) = (0:0:0, 0:0:0);
    (CH3_TXRATE[2] => CH3_TXRATE_M[2]) = (0:0:0, 0:0:0);
    (CH3_TXRATE[3] => CH3_TXRATE_M[3]) = (0:0:0, 0:0:0);
    (CH3_TXRATE[4] => CH3_TXRATE_M[4]) = (0:0:0, 0:0:0);
    (CH3_TXRATE[5] => CH3_TXRATE_M[5]) = (0:0:0, 0:0:0);
    (CH3_TXRATE[6] => CH3_TXRATE_M[6]) = (0:0:0, 0:0:0);
    (CH3_TXRATE[7] => CH3_TXRATE_M[7]) = (0:0:0, 0:0:0);
    (CH3_TXSEQUENCE[0] => CH3_TXSEQUENCE_M[0]) = (0:0:0, 0:0:0);
    (CH3_TXSEQUENCE[1] => CH3_TXSEQUENCE_M[1]) = (0:0:0, 0:0:0);
    (CH3_TXSEQUENCE[2] => CH3_TXSEQUENCE_M[2]) = (0:0:0, 0:0:0);
    (CH3_TXSEQUENCE[3] => CH3_TXSEQUENCE_M[3]) = (0:0:0, 0:0:0);
    (CH3_TXSEQUENCE[4] => CH3_TXSEQUENCE_M[4]) = (0:0:0, 0:0:0);
    (CH3_TXSEQUENCE[5] => CH3_TXSEQUENCE_M[5]) = (0:0:0, 0:0:0);
    (CH3_TXSEQUENCE[6] => CH3_TXSEQUENCE_M[6]) = (0:0:0, 0:0:0);
    (CH3_TXSWING => CH3_TXSWING_M) = (0:0:0, 0:0:0);
    (CH3_TXSYNCALLIN => CH3_TXSYNCALLIN_M) = (0:0:0, 0:0:0);
    (CH3_TXSYNCDONE_M => CH3_TXSYNCDONE) = (0:0:0, 0:0:0);
    (CH3_TXUSERRDY => CH3_TXUSERRDY_M) = (0:0:0, 0:0:0);
    (CH3_TXUSRCLK => CH3_TXUSRCLK_M) = (0:0:0, 0:0:0);
    (CORRECTERR_M => CORRECTERR) = (0:0:0, 0:0:0);
    (CTRLRSVDIN0[0] => CTRLRSVDIN0_M[0]) = (0:0:0, 0:0:0);
    (CTRLRSVDIN0[10] => CTRLRSVDIN0_M[10]) = (0:0:0, 0:0:0);
    (CTRLRSVDIN0[11] => CTRLRSVDIN0_M[11]) = (0:0:0, 0:0:0);
    (CTRLRSVDIN0[12] => CTRLRSVDIN0_M[12]) = (0:0:0, 0:0:0);
    (CTRLRSVDIN0[13] => CTRLRSVDIN0_M[13]) = (0:0:0, 0:0:0);
    (CTRLRSVDIN0[14] => CTRLRSVDIN0_M[14]) = (0:0:0, 0:0:0);
    (CTRLRSVDIN0[15] => CTRLRSVDIN0_M[15]) = (0:0:0, 0:0:0);
    (CTRLRSVDIN0[1] => CTRLRSVDIN0_M[1]) = (0:0:0, 0:0:0);
    (CTRLRSVDIN0[2] => CTRLRSVDIN0_M[2]) = (0:0:0, 0:0:0);
    (CTRLRSVDIN0[3] => CTRLRSVDIN0_M[3]) = (0:0:0, 0:0:0);
    (CTRLRSVDIN0[4] => CTRLRSVDIN0_M[4]) = (0:0:0, 0:0:0);
    (CTRLRSVDIN0[5] => CTRLRSVDIN0_M[5]) = (0:0:0, 0:0:0);
    (CTRLRSVDIN0[6] => CTRLRSVDIN0_M[6]) = (0:0:0, 0:0:0);
    (CTRLRSVDIN0[7] => CTRLRSVDIN0_M[7]) = (0:0:0, 0:0:0);
    (CTRLRSVDIN0[8] => CTRLRSVDIN0_M[8]) = (0:0:0, 0:0:0);
    (CTRLRSVDIN0[9] => CTRLRSVDIN0_M[9]) = (0:0:0, 0:0:0);
    (CTRLRSVDIN1[0] => CTRLRSVDIN1_M[0]) = (0:0:0, 0:0:0);
    (CTRLRSVDIN1[10] => CTRLRSVDIN1_M[10]) = (0:0:0, 0:0:0);
    (CTRLRSVDIN1[11] => CTRLRSVDIN1_M[11]) = (0:0:0, 0:0:0);
    (CTRLRSVDIN1[12] => CTRLRSVDIN1_M[12]) = (0:0:0, 0:0:0);
    (CTRLRSVDIN1[13] => CTRLRSVDIN1_M[13]) = (0:0:0, 0:0:0);
    (CTRLRSVDIN1[1] => CTRLRSVDIN1_M[1]) = (0:0:0, 0:0:0);
    (CTRLRSVDIN1[2] => CTRLRSVDIN1_M[2]) = (0:0:0, 0:0:0);
    (CTRLRSVDIN1[3] => CTRLRSVDIN1_M[3]) = (0:0:0, 0:0:0);
    (CTRLRSVDIN1[4] => CTRLRSVDIN1_M[4]) = (0:0:0, 0:0:0);
    (CTRLRSVDIN1[5] => CTRLRSVDIN1_M[5]) = (0:0:0, 0:0:0);
    (CTRLRSVDIN1[6] => CTRLRSVDIN1_M[6]) = (0:0:0, 0:0:0);
    (CTRLRSVDIN1[7] => CTRLRSVDIN1_M[7]) = (0:0:0, 0:0:0);
    (CTRLRSVDIN1[8] => CTRLRSVDIN1_M[8]) = (0:0:0, 0:0:0);
    (CTRLRSVDIN1[9] => CTRLRSVDIN1_M[9]) = (0:0:0, 0:0:0);
    (CTRLRSVDOUT_M[0] => CTRLRSVDOUT[0]) = (0:0:0, 0:0:0);
    (CTRLRSVDOUT_M[10] => CTRLRSVDOUT[10]) = (0:0:0, 0:0:0);
    (CTRLRSVDOUT_M[11] => CTRLRSVDOUT[11]) = (0:0:0, 0:0:0);
    (CTRLRSVDOUT_M[12] => CTRLRSVDOUT[12]) = (0:0:0, 0:0:0);
    (CTRLRSVDOUT_M[13] => CTRLRSVDOUT[13]) = (0:0:0, 0:0:0);
    (CTRLRSVDOUT_M[14] => CTRLRSVDOUT[14]) = (0:0:0, 0:0:0);
    (CTRLRSVDOUT_M[15] => CTRLRSVDOUT[15]) = (0:0:0, 0:0:0);
    (CTRLRSVDOUT_M[16] => CTRLRSVDOUT[16]) = (0:0:0, 0:0:0);
    (CTRLRSVDOUT_M[17] => CTRLRSVDOUT[17]) = (0:0:0, 0:0:0);
    (CTRLRSVDOUT_M[18] => CTRLRSVDOUT[18]) = (0:0:0, 0:0:0);
    (CTRLRSVDOUT_M[19] => CTRLRSVDOUT[19]) = (0:0:0, 0:0:0);
    (CTRLRSVDOUT_M[1] => CTRLRSVDOUT[1]) = (0:0:0, 0:0:0);
    (CTRLRSVDOUT_M[20] => CTRLRSVDOUT[20]) = (0:0:0, 0:0:0);
    (CTRLRSVDOUT_M[21] => CTRLRSVDOUT[21]) = (0:0:0, 0:0:0);
    (CTRLRSVDOUT_M[22] => CTRLRSVDOUT[22]) = (0:0:0, 0:0:0);
    (CTRLRSVDOUT_M[23] => CTRLRSVDOUT[23]) = (0:0:0, 0:0:0);
    (CTRLRSVDOUT_M[24] => CTRLRSVDOUT[24]) = (0:0:0, 0:0:0);
    (CTRLRSVDOUT_M[25] => CTRLRSVDOUT[25]) = (0:0:0, 0:0:0);
    (CTRLRSVDOUT_M[26] => CTRLRSVDOUT[26]) = (0:0:0, 0:0:0);
    (CTRLRSVDOUT_M[27] => CTRLRSVDOUT[27]) = (0:0:0, 0:0:0);
    (CTRLRSVDOUT_M[28] => CTRLRSVDOUT[28]) = (0:0:0, 0:0:0);
    (CTRLRSVDOUT_M[29] => CTRLRSVDOUT[29]) = (0:0:0, 0:0:0);
    (CTRLRSVDOUT_M[2] => CTRLRSVDOUT[2]) = (0:0:0, 0:0:0);
    (CTRLRSVDOUT_M[30] => CTRLRSVDOUT[30]) = (0:0:0, 0:0:0);
    (CTRLRSVDOUT_M[31] => CTRLRSVDOUT[31]) = (0:0:0, 0:0:0);
    (CTRLRSVDOUT_M[3] => CTRLRSVDOUT[3]) = (0:0:0, 0:0:0);
    (CTRLRSVDOUT_M[4] => CTRLRSVDOUT[4]) = (0:0:0, 0:0:0);
    (CTRLRSVDOUT_M[5] => CTRLRSVDOUT[5]) = (0:0:0, 0:0:0);
    (CTRLRSVDOUT_M[6] => CTRLRSVDOUT[6]) = (0:0:0, 0:0:0);
    (CTRLRSVDOUT_M[7] => CTRLRSVDOUT[7]) = (0:0:0, 0:0:0);
    (CTRLRSVDOUT_M[8] => CTRLRSVDOUT[8]) = (0:0:0, 0:0:0);
    (CTRLRSVDOUT_M[9] => CTRLRSVDOUT[9]) = (0:0:0, 0:0:0);
    (DEBUGTRACECLK => DEBUGTRACECLK_M) = (0:0:0, 0:0:0);
    (DEBUGTRACEREADY => DEBUGTRACEREADY_M) = (0:0:0, 0:0:0);
    (DEBUGTRACETDATA_M[0] => DEBUGTRACETDATA[0]) = (0:0:0, 0:0:0);
    (DEBUGTRACETDATA_M[10] => DEBUGTRACETDATA[10]) = (0:0:0, 0:0:0);
    (DEBUGTRACETDATA_M[11] => DEBUGTRACETDATA[11]) = (0:0:0, 0:0:0);
    (DEBUGTRACETDATA_M[12] => DEBUGTRACETDATA[12]) = (0:0:0, 0:0:0);
    (DEBUGTRACETDATA_M[13] => DEBUGTRACETDATA[13]) = (0:0:0, 0:0:0);
    (DEBUGTRACETDATA_M[14] => DEBUGTRACETDATA[14]) = (0:0:0, 0:0:0);
    (DEBUGTRACETDATA_M[15] => DEBUGTRACETDATA[15]) = (0:0:0, 0:0:0);
    (DEBUGTRACETDATA_M[1] => DEBUGTRACETDATA[1]) = (0:0:0, 0:0:0);
    (DEBUGTRACETDATA_M[2] => DEBUGTRACETDATA[2]) = (0:0:0, 0:0:0);
    (DEBUGTRACETDATA_M[3] => DEBUGTRACETDATA[3]) = (0:0:0, 0:0:0);
    (DEBUGTRACETDATA_M[4] => DEBUGTRACETDATA[4]) = (0:0:0, 0:0:0);
    (DEBUGTRACETDATA_M[5] => DEBUGTRACETDATA[5]) = (0:0:0, 0:0:0);
    (DEBUGTRACETDATA_M[6] => DEBUGTRACETDATA[6]) = (0:0:0, 0:0:0);
    (DEBUGTRACETDATA_M[7] => DEBUGTRACETDATA[7]) = (0:0:0, 0:0:0);
    (DEBUGTRACETDATA_M[8] => DEBUGTRACETDATA[8]) = (0:0:0, 0:0:0);
    (DEBUGTRACETDATA_M[9] => DEBUGTRACETDATA[9]) = (0:0:0, 0:0:0);
    (DEBUGTRACETVALID_M => DEBUGTRACETVALID) = (0:0:0, 0:0:0);
    (GPI[0] => GPI_M[0]) = (0:0:0, 0:0:0);
    (GPI[10] => GPI_M[10]) = (0:0:0, 0:0:0);
    (GPI[11] => GPI_M[11]) = (0:0:0, 0:0:0);
    (GPI[12] => GPI_M[12]) = (0:0:0, 0:0:0);
    (GPI[13] => GPI_M[13]) = (0:0:0, 0:0:0);
    (GPI[14] => GPI_M[14]) = (0:0:0, 0:0:0);
    (GPI[15] => GPI_M[15]) = (0:0:0, 0:0:0);
    (GPI[1] => GPI_M[1]) = (0:0:0, 0:0:0);
    (GPI[2] => GPI_M[2]) = (0:0:0, 0:0:0);
    (GPI[3] => GPI_M[3]) = (0:0:0, 0:0:0);
    (GPI[4] => GPI_M[4]) = (0:0:0, 0:0:0);
    (GPI[5] => GPI_M[5]) = (0:0:0, 0:0:0);
    (GPI[6] => GPI_M[6]) = (0:0:0, 0:0:0);
    (GPI[7] => GPI_M[7]) = (0:0:0, 0:0:0);
    (GPI[8] => GPI_M[8]) = (0:0:0, 0:0:0);
    (GPI[9] => GPI_M[9]) = (0:0:0, 0:0:0);
    (GPO_M[0] => GPO[0]) = (0:0:0, 0:0:0);
    (GPO_M[10] => GPO[10]) = (0:0:0, 0:0:0);
    (GPO_M[11] => GPO[11]) = (0:0:0, 0:0:0);
    (GPO_M[12] => GPO[12]) = (0:0:0, 0:0:0);
    (GPO_M[13] => GPO[13]) = (0:0:0, 0:0:0);
    (GPO_M[14] => GPO[14]) = (0:0:0, 0:0:0);
    (GPO_M[15] => GPO[15]) = (0:0:0, 0:0:0);
    (GPO_M[1] => GPO[1]) = (0:0:0, 0:0:0);
    (GPO_M[2] => GPO[2]) = (0:0:0, 0:0:0);
    (GPO_M[3] => GPO[3]) = (0:0:0, 0:0:0);
    (GPO_M[4] => GPO[4]) = (0:0:0, 0:0:0);
    (GPO_M[5] => GPO[5]) = (0:0:0, 0:0:0);
    (GPO_M[6] => GPO[6]) = (0:0:0, 0:0:0);
    (GPO_M[7] => GPO[7]) = (0:0:0, 0:0:0);
    (GPO_M[8] => GPO[8]) = (0:0:0, 0:0:0);
    (GPO_M[9] => GPO[9]) = (0:0:0, 0:0:0);
    (GTPOWERGOOD_M => GTPOWERGOOD) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLCLKRSVD0 => HSCLK0_LCPLLCLKRSVD0_M) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLCLKRSVD1 => HSCLK0_LCPLLCLKRSVD1_M) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLFBCLKLOST_M => HSCLK0_LCPLLFBCLKLOST) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLFBDIV[0] => HSCLK0_LCPLLFBDIV_M[0]) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLFBDIV[1] => HSCLK0_LCPLLFBDIV_M[1]) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLFBDIV[2] => HSCLK0_LCPLLFBDIV_M[2]) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLFBDIV[3] => HSCLK0_LCPLLFBDIV_M[3]) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLFBDIV[4] => HSCLK0_LCPLLFBDIV_M[4]) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLFBDIV[5] => HSCLK0_LCPLLFBDIV_M[5]) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLFBDIV[6] => HSCLK0_LCPLLFBDIV_M[6]) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLFBDIV[7] => HSCLK0_LCPLLFBDIV_M[7]) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLGTGREFCLK => HSCLK0_LCPLLGTGREFCLK_M) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLLOCK_M => HSCLK0_LCPLLLOCK) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLPD => HSCLK0_LCPLLPD_M) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLREFCLKLOST_M => HSCLK0_LCPLLREFCLKLOST) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLREFCLKMONITOR_M => HSCLK0_LCPLLREFCLKMONITOR) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLREFCLKSEL[0] => HSCLK0_LCPLLREFCLKSEL_M[0]) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLREFCLKSEL[1] => HSCLK0_LCPLLREFCLKSEL_M[1]) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLREFCLKSEL[2] => HSCLK0_LCPLLREFCLKSEL_M[2]) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLRSVD0[0] => HSCLK0_LCPLLRSVD0_M[0]) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLRSVD0[1] => HSCLK0_LCPLLRSVD0_M[1]) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLRSVD0[2] => HSCLK0_LCPLLRSVD0_M[2]) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLRSVD0[3] => HSCLK0_LCPLLRSVD0_M[3]) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLRSVD0[4] => HSCLK0_LCPLLRSVD0_M[4]) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLRSVD0[5] => HSCLK0_LCPLLRSVD0_M[5]) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLRSVD0[6] => HSCLK0_LCPLLRSVD0_M[6]) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLRSVD0[7] => HSCLK0_LCPLLRSVD0_M[7]) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLRSVD1[0] => HSCLK0_LCPLLRSVD1_M[0]) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLRSVD1[1] => HSCLK0_LCPLLRSVD1_M[1]) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLRSVD1[2] => HSCLK0_LCPLLRSVD1_M[2]) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLRSVD1[3] => HSCLK0_LCPLLRSVD1_M[3]) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLRSVD1[4] => HSCLK0_LCPLLRSVD1_M[4]) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLRSVD1[5] => HSCLK0_LCPLLRSVD1_M[5]) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLRSVD1[6] => HSCLK0_LCPLLRSVD1_M[6]) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLRSVD1[7] => HSCLK0_LCPLLRSVD1_M[7]) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLRSVDOUT_M[0] => HSCLK0_LCPLLRSVDOUT[0]) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLRSVDOUT_M[1] => HSCLK0_LCPLLRSVDOUT[1]) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLRSVDOUT_M[2] => HSCLK0_LCPLLRSVDOUT[2]) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLRSVDOUT_M[3] => HSCLK0_LCPLLRSVDOUT[3]) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLRSVDOUT_M[4] => HSCLK0_LCPLLRSVDOUT[4]) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLRSVDOUT_M[5] => HSCLK0_LCPLLRSVDOUT[5]) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLRSVDOUT_M[6] => HSCLK0_LCPLLRSVDOUT[6]) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLRSVDOUT_M[7] => HSCLK0_LCPLLRSVDOUT[7]) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLSDMDATA[0] => HSCLK0_LCPLLSDMDATA_M[0]) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLSDMDATA[10] => HSCLK0_LCPLLSDMDATA_M[10]) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLSDMDATA[11] => HSCLK0_LCPLLSDMDATA_M[11]) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLSDMDATA[12] => HSCLK0_LCPLLSDMDATA_M[12]) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLSDMDATA[13] => HSCLK0_LCPLLSDMDATA_M[13]) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLSDMDATA[14] => HSCLK0_LCPLLSDMDATA_M[14]) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLSDMDATA[15] => HSCLK0_LCPLLSDMDATA_M[15]) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLSDMDATA[16] => HSCLK0_LCPLLSDMDATA_M[16]) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLSDMDATA[17] => HSCLK0_LCPLLSDMDATA_M[17]) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLSDMDATA[18] => HSCLK0_LCPLLSDMDATA_M[18]) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLSDMDATA[19] => HSCLK0_LCPLLSDMDATA_M[19]) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLSDMDATA[1] => HSCLK0_LCPLLSDMDATA_M[1]) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLSDMDATA[20] => HSCLK0_LCPLLSDMDATA_M[20]) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLSDMDATA[21] => HSCLK0_LCPLLSDMDATA_M[21]) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLSDMDATA[22] => HSCLK0_LCPLLSDMDATA_M[22]) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLSDMDATA[23] => HSCLK0_LCPLLSDMDATA_M[23]) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLSDMDATA[24] => HSCLK0_LCPLLSDMDATA_M[24]) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLSDMDATA[25] => HSCLK0_LCPLLSDMDATA_M[25]) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLSDMDATA[2] => HSCLK0_LCPLLSDMDATA_M[2]) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLSDMDATA[3] => HSCLK0_LCPLLSDMDATA_M[3]) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLSDMDATA[4] => HSCLK0_LCPLLSDMDATA_M[4]) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLSDMDATA[5] => HSCLK0_LCPLLSDMDATA_M[5]) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLSDMDATA[6] => HSCLK0_LCPLLSDMDATA_M[6]) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLSDMDATA[7] => HSCLK0_LCPLLSDMDATA_M[7]) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLSDMDATA[8] => HSCLK0_LCPLLSDMDATA_M[8]) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLSDMDATA[9] => HSCLK0_LCPLLSDMDATA_M[9]) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLSDMTOGGLE => HSCLK0_LCPLLSDMTOGGLE_M) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLCLKRSVD0 => HSCLK0_RPLLCLKRSVD0_M) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLCLKRSVD1 => HSCLK0_RPLLCLKRSVD1_M) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLFBCLKLOST_M => HSCLK0_RPLLFBCLKLOST) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLFBDIV[0] => HSCLK0_RPLLFBDIV_M[0]) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLFBDIV[1] => HSCLK0_RPLLFBDIV_M[1]) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLFBDIV[2] => HSCLK0_RPLLFBDIV_M[2]) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLFBDIV[3] => HSCLK0_RPLLFBDIV_M[3]) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLFBDIV[4] => HSCLK0_RPLLFBDIV_M[4]) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLFBDIV[5] => HSCLK0_RPLLFBDIV_M[5]) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLFBDIV[6] => HSCLK0_RPLLFBDIV_M[6]) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLFBDIV[7] => HSCLK0_RPLLFBDIV_M[7]) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLGTGREFCLK => HSCLK0_RPLLGTGREFCLK_M) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLLOCK_M => HSCLK0_RPLLLOCK) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLPD => HSCLK0_RPLLPD_M) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLREFCLKLOST_M => HSCLK0_RPLLREFCLKLOST) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLREFCLKMONITOR_M => HSCLK0_RPLLREFCLKMONITOR) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLREFCLKSEL[0] => HSCLK0_RPLLREFCLKSEL_M[0]) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLREFCLKSEL[1] => HSCLK0_RPLLREFCLKSEL_M[1]) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLREFCLKSEL[2] => HSCLK0_RPLLREFCLKSEL_M[2]) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLRSVD0[0] => HSCLK0_RPLLRSVD0_M[0]) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLRSVD0[1] => HSCLK0_RPLLRSVD0_M[1]) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLRSVD0[2] => HSCLK0_RPLLRSVD0_M[2]) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLRSVD0[3] => HSCLK0_RPLLRSVD0_M[3]) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLRSVD0[4] => HSCLK0_RPLLRSVD0_M[4]) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLRSVD0[5] => HSCLK0_RPLLRSVD0_M[5]) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLRSVD0[6] => HSCLK0_RPLLRSVD0_M[6]) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLRSVD0[7] => HSCLK0_RPLLRSVD0_M[7]) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLRSVD1[0] => HSCLK0_RPLLRSVD1_M[0]) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLRSVD1[1] => HSCLK0_RPLLRSVD1_M[1]) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLRSVD1[2] => HSCLK0_RPLLRSVD1_M[2]) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLRSVD1[3] => HSCLK0_RPLLRSVD1_M[3]) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLRSVD1[4] => HSCLK0_RPLLRSVD1_M[4]) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLRSVD1[5] => HSCLK0_RPLLRSVD1_M[5]) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLRSVD1[6] => HSCLK0_RPLLRSVD1_M[6]) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLRSVD1[7] => HSCLK0_RPLLRSVD1_M[7]) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLRSVDOUT_M[0] => HSCLK0_RPLLRSVDOUT[0]) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLRSVDOUT_M[1] => HSCLK0_RPLLRSVDOUT[1]) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLRSVDOUT_M[2] => HSCLK0_RPLLRSVDOUT[2]) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLRSVDOUT_M[3] => HSCLK0_RPLLRSVDOUT[3]) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLRSVDOUT_M[4] => HSCLK0_RPLLRSVDOUT[4]) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLRSVDOUT_M[5] => HSCLK0_RPLLRSVDOUT[5]) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLRSVDOUT_M[6] => HSCLK0_RPLLRSVDOUT[6]) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLRSVDOUT_M[7] => HSCLK0_RPLLRSVDOUT[7]) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLSDMDATA[0] => HSCLK0_RPLLSDMDATA_M[0]) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLSDMDATA[10] => HSCLK0_RPLLSDMDATA_M[10]) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLSDMDATA[11] => HSCLK0_RPLLSDMDATA_M[11]) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLSDMDATA[12] => HSCLK0_RPLLSDMDATA_M[12]) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLSDMDATA[13] => HSCLK0_RPLLSDMDATA_M[13]) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLSDMDATA[14] => HSCLK0_RPLLSDMDATA_M[14]) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLSDMDATA[15] => HSCLK0_RPLLSDMDATA_M[15]) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLSDMDATA[16] => HSCLK0_RPLLSDMDATA_M[16]) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLSDMDATA[17] => HSCLK0_RPLLSDMDATA_M[17]) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLSDMDATA[18] => HSCLK0_RPLLSDMDATA_M[18]) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLSDMDATA[19] => HSCLK0_RPLLSDMDATA_M[19]) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLSDMDATA[1] => HSCLK0_RPLLSDMDATA_M[1]) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLSDMDATA[20] => HSCLK0_RPLLSDMDATA_M[20]) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLSDMDATA[21] => HSCLK0_RPLLSDMDATA_M[21]) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLSDMDATA[22] => HSCLK0_RPLLSDMDATA_M[22]) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLSDMDATA[23] => HSCLK0_RPLLSDMDATA_M[23]) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLSDMDATA[24] => HSCLK0_RPLLSDMDATA_M[24]) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLSDMDATA[25] => HSCLK0_RPLLSDMDATA_M[25]) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLSDMDATA[2] => HSCLK0_RPLLSDMDATA_M[2]) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLSDMDATA[3] => HSCLK0_RPLLSDMDATA_M[3]) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLSDMDATA[4] => HSCLK0_RPLLSDMDATA_M[4]) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLSDMDATA[5] => HSCLK0_RPLLSDMDATA_M[5]) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLSDMDATA[6] => HSCLK0_RPLLSDMDATA_M[6]) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLSDMDATA[7] => HSCLK0_RPLLSDMDATA_M[7]) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLSDMDATA[8] => HSCLK0_RPLLSDMDATA_M[8]) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLSDMDATA[9] => HSCLK0_RPLLSDMDATA_M[9]) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLSDMTOGGLE => HSCLK0_RPLLSDMTOGGLE_M) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLCLKRSVD0 => HSCLK1_LCPLLCLKRSVD0_M) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLCLKRSVD1 => HSCLK1_LCPLLCLKRSVD1_M) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLFBCLKLOST_M => HSCLK1_LCPLLFBCLKLOST) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLFBDIV[0] => HSCLK1_LCPLLFBDIV_M[0]) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLFBDIV[1] => HSCLK1_LCPLLFBDIV_M[1]) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLFBDIV[2] => HSCLK1_LCPLLFBDIV_M[2]) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLFBDIV[3] => HSCLK1_LCPLLFBDIV_M[3]) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLFBDIV[4] => HSCLK1_LCPLLFBDIV_M[4]) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLFBDIV[5] => HSCLK1_LCPLLFBDIV_M[5]) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLFBDIV[6] => HSCLK1_LCPLLFBDIV_M[6]) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLFBDIV[7] => HSCLK1_LCPLLFBDIV_M[7]) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLGTGREFCLK => HSCLK1_LCPLLGTGREFCLK_M) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLLOCK_M => HSCLK1_LCPLLLOCK) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLPD => HSCLK1_LCPLLPD_M) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLREFCLKLOST_M => HSCLK1_LCPLLREFCLKLOST) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLREFCLKMONITOR_M => HSCLK1_LCPLLREFCLKMONITOR) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLREFCLKSEL[0] => HSCLK1_LCPLLREFCLKSEL_M[0]) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLREFCLKSEL[1] => HSCLK1_LCPLLREFCLKSEL_M[1]) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLREFCLKSEL[2] => HSCLK1_LCPLLREFCLKSEL_M[2]) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLRSVD0[0] => HSCLK1_LCPLLRSVD0_M[0]) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLRSVD0[1] => HSCLK1_LCPLLRSVD0_M[1]) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLRSVD0[2] => HSCLK1_LCPLLRSVD0_M[2]) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLRSVD0[3] => HSCLK1_LCPLLRSVD0_M[3]) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLRSVD0[4] => HSCLK1_LCPLLRSVD0_M[4]) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLRSVD0[5] => HSCLK1_LCPLLRSVD0_M[5]) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLRSVD0[6] => HSCLK1_LCPLLRSVD0_M[6]) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLRSVD0[7] => HSCLK1_LCPLLRSVD0_M[7]) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLRSVD1[0] => HSCLK1_LCPLLRSVD1_M[0]) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLRSVD1[1] => HSCLK1_LCPLLRSVD1_M[1]) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLRSVD1[2] => HSCLK1_LCPLLRSVD1_M[2]) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLRSVD1[3] => HSCLK1_LCPLLRSVD1_M[3]) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLRSVD1[4] => HSCLK1_LCPLLRSVD1_M[4]) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLRSVD1[5] => HSCLK1_LCPLLRSVD1_M[5]) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLRSVD1[6] => HSCLK1_LCPLLRSVD1_M[6]) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLRSVD1[7] => HSCLK1_LCPLLRSVD1_M[7]) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLRSVDOUT_M[0] => HSCLK1_LCPLLRSVDOUT[0]) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLRSVDOUT_M[1] => HSCLK1_LCPLLRSVDOUT[1]) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLRSVDOUT_M[2] => HSCLK1_LCPLLRSVDOUT[2]) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLRSVDOUT_M[3] => HSCLK1_LCPLLRSVDOUT[3]) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLRSVDOUT_M[4] => HSCLK1_LCPLLRSVDOUT[4]) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLRSVDOUT_M[5] => HSCLK1_LCPLLRSVDOUT[5]) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLRSVDOUT_M[6] => HSCLK1_LCPLLRSVDOUT[6]) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLRSVDOUT_M[7] => HSCLK1_LCPLLRSVDOUT[7]) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLSDMDATA[0] => HSCLK1_LCPLLSDMDATA_M[0]) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLSDMDATA[10] => HSCLK1_LCPLLSDMDATA_M[10]) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLSDMDATA[11] => HSCLK1_LCPLLSDMDATA_M[11]) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLSDMDATA[12] => HSCLK1_LCPLLSDMDATA_M[12]) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLSDMDATA[13] => HSCLK1_LCPLLSDMDATA_M[13]) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLSDMDATA[14] => HSCLK1_LCPLLSDMDATA_M[14]) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLSDMDATA[15] => HSCLK1_LCPLLSDMDATA_M[15]) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLSDMDATA[16] => HSCLK1_LCPLLSDMDATA_M[16]) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLSDMDATA[17] => HSCLK1_LCPLLSDMDATA_M[17]) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLSDMDATA[18] => HSCLK1_LCPLLSDMDATA_M[18]) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLSDMDATA[19] => HSCLK1_LCPLLSDMDATA_M[19]) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLSDMDATA[1] => HSCLK1_LCPLLSDMDATA_M[1]) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLSDMDATA[20] => HSCLK1_LCPLLSDMDATA_M[20]) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLSDMDATA[21] => HSCLK1_LCPLLSDMDATA_M[21]) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLSDMDATA[22] => HSCLK1_LCPLLSDMDATA_M[22]) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLSDMDATA[23] => HSCLK1_LCPLLSDMDATA_M[23]) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLSDMDATA[24] => HSCLK1_LCPLLSDMDATA_M[24]) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLSDMDATA[25] => HSCLK1_LCPLLSDMDATA_M[25]) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLSDMDATA[2] => HSCLK1_LCPLLSDMDATA_M[2]) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLSDMDATA[3] => HSCLK1_LCPLLSDMDATA_M[3]) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLSDMDATA[4] => HSCLK1_LCPLLSDMDATA_M[4]) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLSDMDATA[5] => HSCLK1_LCPLLSDMDATA_M[5]) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLSDMDATA[6] => HSCLK1_LCPLLSDMDATA_M[6]) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLSDMDATA[7] => HSCLK1_LCPLLSDMDATA_M[7]) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLSDMDATA[8] => HSCLK1_LCPLLSDMDATA_M[8]) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLSDMDATA[9] => HSCLK1_LCPLLSDMDATA_M[9]) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLSDMTOGGLE => HSCLK1_LCPLLSDMTOGGLE_M) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLCLKRSVD0 => HSCLK1_RPLLCLKRSVD0_M) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLCLKRSVD1 => HSCLK1_RPLLCLKRSVD1_M) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLFBCLKLOST_M => HSCLK1_RPLLFBCLKLOST) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLFBDIV[0] => HSCLK1_RPLLFBDIV_M[0]) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLFBDIV[1] => HSCLK1_RPLLFBDIV_M[1]) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLFBDIV[2] => HSCLK1_RPLLFBDIV_M[2]) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLFBDIV[3] => HSCLK1_RPLLFBDIV_M[3]) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLFBDIV[4] => HSCLK1_RPLLFBDIV_M[4]) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLFBDIV[5] => HSCLK1_RPLLFBDIV_M[5]) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLFBDIV[6] => HSCLK1_RPLLFBDIV_M[6]) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLFBDIV[7] => HSCLK1_RPLLFBDIV_M[7]) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLGTGREFCLK => HSCLK1_RPLLGTGREFCLK_M) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLLOCK_M => HSCLK1_RPLLLOCK) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLPD => HSCLK1_RPLLPD_M) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLREFCLKLOST_M => HSCLK1_RPLLREFCLKLOST) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLREFCLKMONITOR_M => HSCLK1_RPLLREFCLKMONITOR) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLREFCLKSEL[0] => HSCLK1_RPLLREFCLKSEL_M[0]) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLREFCLKSEL[1] => HSCLK1_RPLLREFCLKSEL_M[1]) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLREFCLKSEL[2] => HSCLK1_RPLLREFCLKSEL_M[2]) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLRSVD0[0] => HSCLK1_RPLLRSVD0_M[0]) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLRSVD0[1] => HSCLK1_RPLLRSVD0_M[1]) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLRSVD0[2] => HSCLK1_RPLLRSVD0_M[2]) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLRSVD0[3] => HSCLK1_RPLLRSVD0_M[3]) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLRSVD0[4] => HSCLK1_RPLLRSVD0_M[4]) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLRSVD0[5] => HSCLK1_RPLLRSVD0_M[5]) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLRSVD0[6] => HSCLK1_RPLLRSVD0_M[6]) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLRSVD0[7] => HSCLK1_RPLLRSVD0_M[7]) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLRSVD1[0] => HSCLK1_RPLLRSVD1_M[0]) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLRSVD1[1] => HSCLK1_RPLLRSVD1_M[1]) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLRSVD1[2] => HSCLK1_RPLLRSVD1_M[2]) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLRSVD1[3] => HSCLK1_RPLLRSVD1_M[3]) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLRSVD1[4] => HSCLK1_RPLLRSVD1_M[4]) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLRSVD1[5] => HSCLK1_RPLLRSVD1_M[5]) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLRSVD1[6] => HSCLK1_RPLLRSVD1_M[6]) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLRSVD1[7] => HSCLK1_RPLLRSVD1_M[7]) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLRSVDOUT_M[0] => HSCLK1_RPLLRSVDOUT[0]) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLRSVDOUT_M[1] => HSCLK1_RPLLRSVDOUT[1]) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLRSVDOUT_M[2] => HSCLK1_RPLLRSVDOUT[2]) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLRSVDOUT_M[3] => HSCLK1_RPLLRSVDOUT[3]) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLRSVDOUT_M[4] => HSCLK1_RPLLRSVDOUT[4]) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLRSVDOUT_M[5] => HSCLK1_RPLLRSVDOUT[5]) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLRSVDOUT_M[6] => HSCLK1_RPLLRSVDOUT[6]) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLRSVDOUT_M[7] => HSCLK1_RPLLRSVDOUT[7]) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLSDMDATA[0] => HSCLK1_RPLLSDMDATA_M[0]) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLSDMDATA[10] => HSCLK1_RPLLSDMDATA_M[10]) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLSDMDATA[11] => HSCLK1_RPLLSDMDATA_M[11]) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLSDMDATA[12] => HSCLK1_RPLLSDMDATA_M[12]) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLSDMDATA[13] => HSCLK1_RPLLSDMDATA_M[13]) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLSDMDATA[14] => HSCLK1_RPLLSDMDATA_M[14]) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLSDMDATA[15] => HSCLK1_RPLLSDMDATA_M[15]) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLSDMDATA[16] => HSCLK1_RPLLSDMDATA_M[16]) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLSDMDATA[17] => HSCLK1_RPLLSDMDATA_M[17]) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLSDMDATA[18] => HSCLK1_RPLLSDMDATA_M[18]) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLSDMDATA[19] => HSCLK1_RPLLSDMDATA_M[19]) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLSDMDATA[1] => HSCLK1_RPLLSDMDATA_M[1]) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLSDMDATA[20] => HSCLK1_RPLLSDMDATA_M[20]) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLSDMDATA[21] => HSCLK1_RPLLSDMDATA_M[21]) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLSDMDATA[22] => HSCLK1_RPLLSDMDATA_M[22]) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLSDMDATA[23] => HSCLK1_RPLLSDMDATA_M[23]) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLSDMDATA[24] => HSCLK1_RPLLSDMDATA_M[24]) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLSDMDATA[25] => HSCLK1_RPLLSDMDATA_M[25]) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLSDMDATA[2] => HSCLK1_RPLLSDMDATA_M[2]) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLSDMDATA[3] => HSCLK1_RPLLSDMDATA_M[3]) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLSDMDATA[4] => HSCLK1_RPLLSDMDATA_M[4]) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLSDMDATA[5] => HSCLK1_RPLLSDMDATA_M[5]) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLSDMDATA[6] => HSCLK1_RPLLSDMDATA_M[6]) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLSDMDATA[7] => HSCLK1_RPLLSDMDATA_M[7]) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLSDMDATA[8] => HSCLK1_RPLLSDMDATA_M[8]) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLSDMDATA[9] => HSCLK1_RPLLSDMDATA_M[9]) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLSDMTOGGLE => HSCLK1_RPLLSDMTOGGLE_M) = (0:0:0, 0:0:0);
    (M0_AXIS_TDATA_M[0] => M0_AXIS_TDATA[0]) = (0:0:0, 0:0:0);
    (M0_AXIS_TDATA_M[10] => M0_AXIS_TDATA[10]) = (0:0:0, 0:0:0);
    (M0_AXIS_TDATA_M[11] => M0_AXIS_TDATA[11]) = (0:0:0, 0:0:0);
    (M0_AXIS_TDATA_M[12] => M0_AXIS_TDATA[12]) = (0:0:0, 0:0:0);
    (M0_AXIS_TDATA_M[13] => M0_AXIS_TDATA[13]) = (0:0:0, 0:0:0);
    (M0_AXIS_TDATA_M[14] => M0_AXIS_TDATA[14]) = (0:0:0, 0:0:0);
    (M0_AXIS_TDATA_M[15] => M0_AXIS_TDATA[15]) = (0:0:0, 0:0:0);
    (M0_AXIS_TDATA_M[16] => M0_AXIS_TDATA[16]) = (0:0:0, 0:0:0);
    (M0_AXIS_TDATA_M[17] => M0_AXIS_TDATA[17]) = (0:0:0, 0:0:0);
    (M0_AXIS_TDATA_M[18] => M0_AXIS_TDATA[18]) = (0:0:0, 0:0:0);
    (M0_AXIS_TDATA_M[19] => M0_AXIS_TDATA[19]) = (0:0:0, 0:0:0);
    (M0_AXIS_TDATA_M[1] => M0_AXIS_TDATA[1]) = (0:0:0, 0:0:0);
    (M0_AXIS_TDATA_M[20] => M0_AXIS_TDATA[20]) = (0:0:0, 0:0:0);
    (M0_AXIS_TDATA_M[21] => M0_AXIS_TDATA[21]) = (0:0:0, 0:0:0);
    (M0_AXIS_TDATA_M[22] => M0_AXIS_TDATA[22]) = (0:0:0, 0:0:0);
    (M0_AXIS_TDATA_M[23] => M0_AXIS_TDATA[23]) = (0:0:0, 0:0:0);
    (M0_AXIS_TDATA_M[24] => M0_AXIS_TDATA[24]) = (0:0:0, 0:0:0);
    (M0_AXIS_TDATA_M[25] => M0_AXIS_TDATA[25]) = (0:0:0, 0:0:0);
    (M0_AXIS_TDATA_M[26] => M0_AXIS_TDATA[26]) = (0:0:0, 0:0:0);
    (M0_AXIS_TDATA_M[27] => M0_AXIS_TDATA[27]) = (0:0:0, 0:0:0);
    (M0_AXIS_TDATA_M[28] => M0_AXIS_TDATA[28]) = (0:0:0, 0:0:0);
    (M0_AXIS_TDATA_M[29] => M0_AXIS_TDATA[29]) = (0:0:0, 0:0:0);
    (M0_AXIS_TDATA_M[2] => M0_AXIS_TDATA[2]) = (0:0:0, 0:0:0);
    (M0_AXIS_TDATA_M[30] => M0_AXIS_TDATA[30]) = (0:0:0, 0:0:0);
    (M0_AXIS_TDATA_M[31] => M0_AXIS_TDATA[31]) = (0:0:0, 0:0:0);
    (M0_AXIS_TDATA_M[3] => M0_AXIS_TDATA[3]) = (0:0:0, 0:0:0);
    (M0_AXIS_TDATA_M[4] => M0_AXIS_TDATA[4]) = (0:0:0, 0:0:0);
    (M0_AXIS_TDATA_M[5] => M0_AXIS_TDATA[5]) = (0:0:0, 0:0:0);
    (M0_AXIS_TDATA_M[6] => M0_AXIS_TDATA[6]) = (0:0:0, 0:0:0);
    (M0_AXIS_TDATA_M[7] => M0_AXIS_TDATA[7]) = (0:0:0, 0:0:0);
    (M0_AXIS_TDATA_M[8] => M0_AXIS_TDATA[8]) = (0:0:0, 0:0:0);
    (M0_AXIS_TDATA_M[9] => M0_AXIS_TDATA[9]) = (0:0:0, 0:0:0);
    (M0_AXIS_TLAST_M => M0_AXIS_TLAST) = (0:0:0, 0:0:0);
    (M0_AXIS_TREADY => M0_AXIS_TREADY_M) = (0:0:0, 0:0:0);
    (M0_AXIS_TVALID_M => M0_AXIS_TVALID) = (0:0:0, 0:0:0);
    (M1_AXIS_TDATA_M[0] => M1_AXIS_TDATA[0]) = (0:0:0, 0:0:0);
    (M1_AXIS_TDATA_M[10] => M1_AXIS_TDATA[10]) = (0:0:0, 0:0:0);
    (M1_AXIS_TDATA_M[11] => M1_AXIS_TDATA[11]) = (0:0:0, 0:0:0);
    (M1_AXIS_TDATA_M[12] => M1_AXIS_TDATA[12]) = (0:0:0, 0:0:0);
    (M1_AXIS_TDATA_M[13] => M1_AXIS_TDATA[13]) = (0:0:0, 0:0:0);
    (M1_AXIS_TDATA_M[14] => M1_AXIS_TDATA[14]) = (0:0:0, 0:0:0);
    (M1_AXIS_TDATA_M[15] => M1_AXIS_TDATA[15]) = (0:0:0, 0:0:0);
    (M1_AXIS_TDATA_M[16] => M1_AXIS_TDATA[16]) = (0:0:0, 0:0:0);
    (M1_AXIS_TDATA_M[17] => M1_AXIS_TDATA[17]) = (0:0:0, 0:0:0);
    (M1_AXIS_TDATA_M[18] => M1_AXIS_TDATA[18]) = (0:0:0, 0:0:0);
    (M1_AXIS_TDATA_M[19] => M1_AXIS_TDATA[19]) = (0:0:0, 0:0:0);
    (M1_AXIS_TDATA_M[1] => M1_AXIS_TDATA[1]) = (0:0:0, 0:0:0);
    (M1_AXIS_TDATA_M[20] => M1_AXIS_TDATA[20]) = (0:0:0, 0:0:0);
    (M1_AXIS_TDATA_M[21] => M1_AXIS_TDATA[21]) = (0:0:0, 0:0:0);
    (M1_AXIS_TDATA_M[22] => M1_AXIS_TDATA[22]) = (0:0:0, 0:0:0);
    (M1_AXIS_TDATA_M[23] => M1_AXIS_TDATA[23]) = (0:0:0, 0:0:0);
    (M1_AXIS_TDATA_M[24] => M1_AXIS_TDATA[24]) = (0:0:0, 0:0:0);
    (M1_AXIS_TDATA_M[25] => M1_AXIS_TDATA[25]) = (0:0:0, 0:0:0);
    (M1_AXIS_TDATA_M[26] => M1_AXIS_TDATA[26]) = (0:0:0, 0:0:0);
    (M1_AXIS_TDATA_M[27] => M1_AXIS_TDATA[27]) = (0:0:0, 0:0:0);
    (M1_AXIS_TDATA_M[28] => M1_AXIS_TDATA[28]) = (0:0:0, 0:0:0);
    (M1_AXIS_TDATA_M[29] => M1_AXIS_TDATA[29]) = (0:0:0, 0:0:0);
    (M1_AXIS_TDATA_M[2] => M1_AXIS_TDATA[2]) = (0:0:0, 0:0:0);
    (M1_AXIS_TDATA_M[30] => M1_AXIS_TDATA[30]) = (0:0:0, 0:0:0);
    (M1_AXIS_TDATA_M[31] => M1_AXIS_TDATA[31]) = (0:0:0, 0:0:0);
    (M1_AXIS_TDATA_M[3] => M1_AXIS_TDATA[3]) = (0:0:0, 0:0:0);
    (M1_AXIS_TDATA_M[4] => M1_AXIS_TDATA[4]) = (0:0:0, 0:0:0);
    (M1_AXIS_TDATA_M[5] => M1_AXIS_TDATA[5]) = (0:0:0, 0:0:0);
    (M1_AXIS_TDATA_M[6] => M1_AXIS_TDATA[6]) = (0:0:0, 0:0:0);
    (M1_AXIS_TDATA_M[7] => M1_AXIS_TDATA[7]) = (0:0:0, 0:0:0);
    (M1_AXIS_TDATA_M[8] => M1_AXIS_TDATA[8]) = (0:0:0, 0:0:0);
    (M1_AXIS_TDATA_M[9] => M1_AXIS_TDATA[9]) = (0:0:0, 0:0:0);
    (M1_AXIS_TLAST_M => M1_AXIS_TLAST) = (0:0:0, 0:0:0);
    (M1_AXIS_TREADY => M1_AXIS_TREADY_M) = (0:0:0, 0:0:0);
    (M1_AXIS_TVALID_M => M1_AXIS_TVALID) = (0:0:0, 0:0:0);
    (M2_AXIS_TDATA_M[0] => M2_AXIS_TDATA[0]) = (0:0:0, 0:0:0);
    (M2_AXIS_TDATA_M[10] => M2_AXIS_TDATA[10]) = (0:0:0, 0:0:0);
    (M2_AXIS_TDATA_M[11] => M2_AXIS_TDATA[11]) = (0:0:0, 0:0:0);
    (M2_AXIS_TDATA_M[12] => M2_AXIS_TDATA[12]) = (0:0:0, 0:0:0);
    (M2_AXIS_TDATA_M[13] => M2_AXIS_TDATA[13]) = (0:0:0, 0:0:0);
    (M2_AXIS_TDATA_M[14] => M2_AXIS_TDATA[14]) = (0:0:0, 0:0:0);
    (M2_AXIS_TDATA_M[15] => M2_AXIS_TDATA[15]) = (0:0:0, 0:0:0);
    (M2_AXIS_TDATA_M[16] => M2_AXIS_TDATA[16]) = (0:0:0, 0:0:0);
    (M2_AXIS_TDATA_M[17] => M2_AXIS_TDATA[17]) = (0:0:0, 0:0:0);
    (M2_AXIS_TDATA_M[18] => M2_AXIS_TDATA[18]) = (0:0:0, 0:0:0);
    (M2_AXIS_TDATA_M[19] => M2_AXIS_TDATA[19]) = (0:0:0, 0:0:0);
    (M2_AXIS_TDATA_M[1] => M2_AXIS_TDATA[1]) = (0:0:0, 0:0:0);
    (M2_AXIS_TDATA_M[20] => M2_AXIS_TDATA[20]) = (0:0:0, 0:0:0);
    (M2_AXIS_TDATA_M[21] => M2_AXIS_TDATA[21]) = (0:0:0, 0:0:0);
    (M2_AXIS_TDATA_M[22] => M2_AXIS_TDATA[22]) = (0:0:0, 0:0:0);
    (M2_AXIS_TDATA_M[23] => M2_AXIS_TDATA[23]) = (0:0:0, 0:0:0);
    (M2_AXIS_TDATA_M[24] => M2_AXIS_TDATA[24]) = (0:0:0, 0:0:0);
    (M2_AXIS_TDATA_M[25] => M2_AXIS_TDATA[25]) = (0:0:0, 0:0:0);
    (M2_AXIS_TDATA_M[26] => M2_AXIS_TDATA[26]) = (0:0:0, 0:0:0);
    (M2_AXIS_TDATA_M[27] => M2_AXIS_TDATA[27]) = (0:0:0, 0:0:0);
    (M2_AXIS_TDATA_M[28] => M2_AXIS_TDATA[28]) = (0:0:0, 0:0:0);
    (M2_AXIS_TDATA_M[29] => M2_AXIS_TDATA[29]) = (0:0:0, 0:0:0);
    (M2_AXIS_TDATA_M[2] => M2_AXIS_TDATA[2]) = (0:0:0, 0:0:0);
    (M2_AXIS_TDATA_M[30] => M2_AXIS_TDATA[30]) = (0:0:0, 0:0:0);
    (M2_AXIS_TDATA_M[31] => M2_AXIS_TDATA[31]) = (0:0:0, 0:0:0);
    (M2_AXIS_TDATA_M[3] => M2_AXIS_TDATA[3]) = (0:0:0, 0:0:0);
    (M2_AXIS_TDATA_M[4] => M2_AXIS_TDATA[4]) = (0:0:0, 0:0:0);
    (M2_AXIS_TDATA_M[5] => M2_AXIS_TDATA[5]) = (0:0:0, 0:0:0);
    (M2_AXIS_TDATA_M[6] => M2_AXIS_TDATA[6]) = (0:0:0, 0:0:0);
    (M2_AXIS_TDATA_M[7] => M2_AXIS_TDATA[7]) = (0:0:0, 0:0:0);
    (M2_AXIS_TDATA_M[8] => M2_AXIS_TDATA[8]) = (0:0:0, 0:0:0);
    (M2_AXIS_TDATA_M[9] => M2_AXIS_TDATA[9]) = (0:0:0, 0:0:0);
    (M2_AXIS_TLAST_M => M2_AXIS_TLAST) = (0:0:0, 0:0:0);
    (M2_AXIS_TREADY => M2_AXIS_TREADY_M) = (0:0:0, 0:0:0);
    (M2_AXIS_TVALID_M => M2_AXIS_TVALID) = (0:0:0, 0:0:0);
    (PCIELINKREACHTARGET => PCIELINKREACHTARGET_M) = (0:0:0, 0:0:0);
    (PCIELTSSM[0] => PCIELTSSM_M[0]) = (0:0:0, 0:0:0);
    (PCIELTSSM[1] => PCIELTSSM_M[1]) = (0:0:0, 0:0:0);
    (PCIELTSSM[2] => PCIELTSSM_M[2]) = (0:0:0, 0:0:0);
    (PCIELTSSM[3] => PCIELTSSM_M[3]) = (0:0:0, 0:0:0);
    (PCIELTSSM[4] => PCIELTSSM_M[4]) = (0:0:0, 0:0:0);
    (PCIELTSSM[5] => PCIELTSSM_M[5]) = (0:0:0, 0:0:0);
    (RCALENB => RCALENB_M) = (0:0:0, 0:0:0);
    (REFCLK0_CLKTESTSIG => REFCLK0_CLKTESTSIG_M) = (0:0:0, 0:0:0);
    (REFCLK0_GTREFCLKPD => REFCLK0_GTREFCLKPD_M) = (0:0:0, 0:0:0);
    (REFCLK1_CLKTESTSIG => REFCLK1_CLKTESTSIG_M) = (0:0:0, 0:0:0);
    (REFCLK1_GTREFCLKPD => REFCLK1_GTREFCLKPD_M) = (0:0:0, 0:0:0);
    (RXMARGINCLK => RXMARGINCLK_M) = (0:0:0, 0:0:0);
    (RXMARGINREQACK_M => RXMARGINREQACK) = (0:0:0, 0:0:0);
    (RXMARGINREQCMD[0] => RXMARGINREQCMD_M[0]) = (0:0:0, 0:0:0);
    (RXMARGINREQCMD[1] => RXMARGINREQCMD_M[1]) = (0:0:0, 0:0:0);
    (RXMARGINREQCMD[2] => RXMARGINREQCMD_M[2]) = (0:0:0, 0:0:0);
    (RXMARGINREQCMD[3] => RXMARGINREQCMD_M[3]) = (0:0:0, 0:0:0);
    (RXMARGINREQLANENUM[0] => RXMARGINREQLANENUM_M[0]) = (0:0:0, 0:0:0);
    (RXMARGINREQLANENUM[1] => RXMARGINREQLANENUM_M[1]) = (0:0:0, 0:0:0);
    (RXMARGINREQPAYLD[0] => RXMARGINREQPAYLD_M[0]) = (0:0:0, 0:0:0);
    (RXMARGINREQPAYLD[1] => RXMARGINREQPAYLD_M[1]) = (0:0:0, 0:0:0);
    (RXMARGINREQPAYLD[2] => RXMARGINREQPAYLD_M[2]) = (0:0:0, 0:0:0);
    (RXMARGINREQPAYLD[3] => RXMARGINREQPAYLD_M[3]) = (0:0:0, 0:0:0);
    (RXMARGINREQPAYLD[4] => RXMARGINREQPAYLD_M[4]) = (0:0:0, 0:0:0);
    (RXMARGINREQPAYLD[5] => RXMARGINREQPAYLD_M[5]) = (0:0:0, 0:0:0);
    (RXMARGINREQPAYLD[6] => RXMARGINREQPAYLD_M[6]) = (0:0:0, 0:0:0);
    (RXMARGINREQPAYLD[7] => RXMARGINREQPAYLD_M[7]) = (0:0:0, 0:0:0);
    (RXMARGINREQREQ => RXMARGINREQREQ_M) = (0:0:0, 0:0:0);
    (RXMARGINRESACK => RXMARGINRESACK_M) = (0:0:0, 0:0:0);
    (RXMARGINRESCMD_M[0] => RXMARGINRESCMD[0]) = (0:0:0, 0:0:0);
    (RXMARGINRESCMD_M[1] => RXMARGINRESCMD[1]) = (0:0:0, 0:0:0);
    (RXMARGINRESCMD_M[2] => RXMARGINRESCMD[2]) = (0:0:0, 0:0:0);
    (RXMARGINRESCMD_M[3] => RXMARGINRESCMD[3]) = (0:0:0, 0:0:0);
    (RXMARGINRESLANENUM_M[0] => RXMARGINRESLANENUM[0]) = (0:0:0, 0:0:0);
    (RXMARGINRESLANENUM_M[1] => RXMARGINRESLANENUM[1]) = (0:0:0, 0:0:0);
    (RXMARGINRESPAYLD_M[0] => RXMARGINRESPAYLD[0]) = (0:0:0, 0:0:0);
    (RXMARGINRESPAYLD_M[1] => RXMARGINRESPAYLD[1]) = (0:0:0, 0:0:0);
    (RXMARGINRESPAYLD_M[2] => RXMARGINRESPAYLD[2]) = (0:0:0, 0:0:0);
    (RXMARGINRESPAYLD_M[3] => RXMARGINRESPAYLD[3]) = (0:0:0, 0:0:0);
    (RXMARGINRESPAYLD_M[4] => RXMARGINRESPAYLD[4]) = (0:0:0, 0:0:0);
    (RXMARGINRESPAYLD_M[5] => RXMARGINRESPAYLD[5]) = (0:0:0, 0:0:0);
    (RXMARGINRESPAYLD_M[6] => RXMARGINRESPAYLD[6]) = (0:0:0, 0:0:0);
    (RXMARGINRESPAYLD_M[7] => RXMARGINRESPAYLD[7]) = (0:0:0, 0:0:0);
    (RXMARGINRESREQ_M => RXMARGINRESREQ) = (0:0:0, 0:0:0);
    (S0_AXIS_TDATA[0] => S0_AXIS_TDATA_M[0]) = (0:0:0, 0:0:0);
    (S0_AXIS_TDATA[10] => S0_AXIS_TDATA_M[10]) = (0:0:0, 0:0:0);
    (S0_AXIS_TDATA[11] => S0_AXIS_TDATA_M[11]) = (0:0:0, 0:0:0);
    (S0_AXIS_TDATA[12] => S0_AXIS_TDATA_M[12]) = (0:0:0, 0:0:0);
    (S0_AXIS_TDATA[13] => S0_AXIS_TDATA_M[13]) = (0:0:0, 0:0:0);
    (S0_AXIS_TDATA[14] => S0_AXIS_TDATA_M[14]) = (0:0:0, 0:0:0);
    (S0_AXIS_TDATA[15] => S0_AXIS_TDATA_M[15]) = (0:0:0, 0:0:0);
    (S0_AXIS_TDATA[16] => S0_AXIS_TDATA_M[16]) = (0:0:0, 0:0:0);
    (S0_AXIS_TDATA[17] => S0_AXIS_TDATA_M[17]) = (0:0:0, 0:0:0);
    (S0_AXIS_TDATA[18] => S0_AXIS_TDATA_M[18]) = (0:0:0, 0:0:0);
    (S0_AXIS_TDATA[19] => S0_AXIS_TDATA_M[19]) = (0:0:0, 0:0:0);
    (S0_AXIS_TDATA[1] => S0_AXIS_TDATA_M[1]) = (0:0:0, 0:0:0);
    (S0_AXIS_TDATA[20] => S0_AXIS_TDATA_M[20]) = (0:0:0, 0:0:0);
    (S0_AXIS_TDATA[21] => S0_AXIS_TDATA_M[21]) = (0:0:0, 0:0:0);
    (S0_AXIS_TDATA[22] => S0_AXIS_TDATA_M[22]) = (0:0:0, 0:0:0);
    (S0_AXIS_TDATA[23] => S0_AXIS_TDATA_M[23]) = (0:0:0, 0:0:0);
    (S0_AXIS_TDATA[24] => S0_AXIS_TDATA_M[24]) = (0:0:0, 0:0:0);
    (S0_AXIS_TDATA[25] => S0_AXIS_TDATA_M[25]) = (0:0:0, 0:0:0);
    (S0_AXIS_TDATA[26] => S0_AXIS_TDATA_M[26]) = (0:0:0, 0:0:0);
    (S0_AXIS_TDATA[27] => S0_AXIS_TDATA_M[27]) = (0:0:0, 0:0:0);
    (S0_AXIS_TDATA[28] => S0_AXIS_TDATA_M[28]) = (0:0:0, 0:0:0);
    (S0_AXIS_TDATA[29] => S0_AXIS_TDATA_M[29]) = (0:0:0, 0:0:0);
    (S0_AXIS_TDATA[2] => S0_AXIS_TDATA_M[2]) = (0:0:0, 0:0:0);
    (S0_AXIS_TDATA[30] => S0_AXIS_TDATA_M[30]) = (0:0:0, 0:0:0);
    (S0_AXIS_TDATA[31] => S0_AXIS_TDATA_M[31]) = (0:0:0, 0:0:0);
    (S0_AXIS_TDATA[3] => S0_AXIS_TDATA_M[3]) = (0:0:0, 0:0:0);
    (S0_AXIS_TDATA[4] => S0_AXIS_TDATA_M[4]) = (0:0:0, 0:0:0);
    (S0_AXIS_TDATA[5] => S0_AXIS_TDATA_M[5]) = (0:0:0, 0:0:0);
    (S0_AXIS_TDATA[6] => S0_AXIS_TDATA_M[6]) = (0:0:0, 0:0:0);
    (S0_AXIS_TDATA[7] => S0_AXIS_TDATA_M[7]) = (0:0:0, 0:0:0);
    (S0_AXIS_TDATA[8] => S0_AXIS_TDATA_M[8]) = (0:0:0, 0:0:0);
    (S0_AXIS_TDATA[9] => S0_AXIS_TDATA_M[9]) = (0:0:0, 0:0:0);
    (S0_AXIS_TLAST => S0_AXIS_TLAST_M) = (0:0:0, 0:0:0);
    (S0_AXIS_TREADY_M => S0_AXIS_TREADY) = (0:0:0, 0:0:0);
    (S0_AXIS_TVALID => S0_AXIS_TVALID_M) = (0:0:0, 0:0:0);
    (S1_AXIS_TDATA[0] => S1_AXIS_TDATA_M[0]) = (0:0:0, 0:0:0);
    (S1_AXIS_TDATA[10] => S1_AXIS_TDATA_M[10]) = (0:0:0, 0:0:0);
    (S1_AXIS_TDATA[11] => S1_AXIS_TDATA_M[11]) = (0:0:0, 0:0:0);
    (S1_AXIS_TDATA[12] => S1_AXIS_TDATA_M[12]) = (0:0:0, 0:0:0);
    (S1_AXIS_TDATA[13] => S1_AXIS_TDATA_M[13]) = (0:0:0, 0:0:0);
    (S1_AXIS_TDATA[14] => S1_AXIS_TDATA_M[14]) = (0:0:0, 0:0:0);
    (S1_AXIS_TDATA[15] => S1_AXIS_TDATA_M[15]) = (0:0:0, 0:0:0);
    (S1_AXIS_TDATA[16] => S1_AXIS_TDATA_M[16]) = (0:0:0, 0:0:0);
    (S1_AXIS_TDATA[17] => S1_AXIS_TDATA_M[17]) = (0:0:0, 0:0:0);
    (S1_AXIS_TDATA[18] => S1_AXIS_TDATA_M[18]) = (0:0:0, 0:0:0);
    (S1_AXIS_TDATA[19] => S1_AXIS_TDATA_M[19]) = (0:0:0, 0:0:0);
    (S1_AXIS_TDATA[1] => S1_AXIS_TDATA_M[1]) = (0:0:0, 0:0:0);
    (S1_AXIS_TDATA[20] => S1_AXIS_TDATA_M[20]) = (0:0:0, 0:0:0);
    (S1_AXIS_TDATA[21] => S1_AXIS_TDATA_M[21]) = (0:0:0, 0:0:0);
    (S1_AXIS_TDATA[22] => S1_AXIS_TDATA_M[22]) = (0:0:0, 0:0:0);
    (S1_AXIS_TDATA[23] => S1_AXIS_TDATA_M[23]) = (0:0:0, 0:0:0);
    (S1_AXIS_TDATA[24] => S1_AXIS_TDATA_M[24]) = (0:0:0, 0:0:0);
    (S1_AXIS_TDATA[25] => S1_AXIS_TDATA_M[25]) = (0:0:0, 0:0:0);
    (S1_AXIS_TDATA[26] => S1_AXIS_TDATA_M[26]) = (0:0:0, 0:0:0);
    (S1_AXIS_TDATA[27] => S1_AXIS_TDATA_M[27]) = (0:0:0, 0:0:0);
    (S1_AXIS_TDATA[28] => S1_AXIS_TDATA_M[28]) = (0:0:0, 0:0:0);
    (S1_AXIS_TDATA[29] => S1_AXIS_TDATA_M[29]) = (0:0:0, 0:0:0);
    (S1_AXIS_TDATA[2] => S1_AXIS_TDATA_M[2]) = (0:0:0, 0:0:0);
    (S1_AXIS_TDATA[30] => S1_AXIS_TDATA_M[30]) = (0:0:0, 0:0:0);
    (S1_AXIS_TDATA[31] => S1_AXIS_TDATA_M[31]) = (0:0:0, 0:0:0);
    (S1_AXIS_TDATA[3] => S1_AXIS_TDATA_M[3]) = (0:0:0, 0:0:0);
    (S1_AXIS_TDATA[4] => S1_AXIS_TDATA_M[4]) = (0:0:0, 0:0:0);
    (S1_AXIS_TDATA[5] => S1_AXIS_TDATA_M[5]) = (0:0:0, 0:0:0);
    (S1_AXIS_TDATA[6] => S1_AXIS_TDATA_M[6]) = (0:0:0, 0:0:0);
    (S1_AXIS_TDATA[7] => S1_AXIS_TDATA_M[7]) = (0:0:0, 0:0:0);
    (S1_AXIS_TDATA[8] => S1_AXIS_TDATA_M[8]) = (0:0:0, 0:0:0);
    (S1_AXIS_TDATA[9] => S1_AXIS_TDATA_M[9]) = (0:0:0, 0:0:0);
    (S1_AXIS_TLAST => S1_AXIS_TLAST_M) = (0:0:0, 0:0:0);
    (S1_AXIS_TREADY_M => S1_AXIS_TREADY) = (0:0:0, 0:0:0);
    (S1_AXIS_TVALID => S1_AXIS_TVALID_M) = (0:0:0, 0:0:0);
    (S2_AXIS_TDATA[0] => S2_AXIS_TDATA_M[0]) = (0:0:0, 0:0:0);
    (S2_AXIS_TDATA[10] => S2_AXIS_TDATA_M[10]) = (0:0:0, 0:0:0);
    (S2_AXIS_TDATA[11] => S2_AXIS_TDATA_M[11]) = (0:0:0, 0:0:0);
    (S2_AXIS_TDATA[12] => S2_AXIS_TDATA_M[12]) = (0:0:0, 0:0:0);
    (S2_AXIS_TDATA[13] => S2_AXIS_TDATA_M[13]) = (0:0:0, 0:0:0);
    (S2_AXIS_TDATA[14] => S2_AXIS_TDATA_M[14]) = (0:0:0, 0:0:0);
    (S2_AXIS_TDATA[15] => S2_AXIS_TDATA_M[15]) = (0:0:0, 0:0:0);
    (S2_AXIS_TDATA[16] => S2_AXIS_TDATA_M[16]) = (0:0:0, 0:0:0);
    (S2_AXIS_TDATA[17] => S2_AXIS_TDATA_M[17]) = (0:0:0, 0:0:0);
    (S2_AXIS_TDATA[18] => S2_AXIS_TDATA_M[18]) = (0:0:0, 0:0:0);
    (S2_AXIS_TDATA[19] => S2_AXIS_TDATA_M[19]) = (0:0:0, 0:0:0);
    (S2_AXIS_TDATA[1] => S2_AXIS_TDATA_M[1]) = (0:0:0, 0:0:0);
    (S2_AXIS_TDATA[20] => S2_AXIS_TDATA_M[20]) = (0:0:0, 0:0:0);
    (S2_AXIS_TDATA[21] => S2_AXIS_TDATA_M[21]) = (0:0:0, 0:0:0);
    (S2_AXIS_TDATA[22] => S2_AXIS_TDATA_M[22]) = (0:0:0, 0:0:0);
    (S2_AXIS_TDATA[23] => S2_AXIS_TDATA_M[23]) = (0:0:0, 0:0:0);
    (S2_AXIS_TDATA[24] => S2_AXIS_TDATA_M[24]) = (0:0:0, 0:0:0);
    (S2_AXIS_TDATA[25] => S2_AXIS_TDATA_M[25]) = (0:0:0, 0:0:0);
    (S2_AXIS_TDATA[26] => S2_AXIS_TDATA_M[26]) = (0:0:0, 0:0:0);
    (S2_AXIS_TDATA[27] => S2_AXIS_TDATA_M[27]) = (0:0:0, 0:0:0);
    (S2_AXIS_TDATA[28] => S2_AXIS_TDATA_M[28]) = (0:0:0, 0:0:0);
    (S2_AXIS_TDATA[29] => S2_AXIS_TDATA_M[29]) = (0:0:0, 0:0:0);
    (S2_AXIS_TDATA[2] => S2_AXIS_TDATA_M[2]) = (0:0:0, 0:0:0);
    (S2_AXIS_TDATA[30] => S2_AXIS_TDATA_M[30]) = (0:0:0, 0:0:0);
    (S2_AXIS_TDATA[31] => S2_AXIS_TDATA_M[31]) = (0:0:0, 0:0:0);
    (S2_AXIS_TDATA[3] => S2_AXIS_TDATA_M[3]) = (0:0:0, 0:0:0);
    (S2_AXIS_TDATA[4] => S2_AXIS_TDATA_M[4]) = (0:0:0, 0:0:0);
    (S2_AXIS_TDATA[5] => S2_AXIS_TDATA_M[5]) = (0:0:0, 0:0:0);
    (S2_AXIS_TDATA[6] => S2_AXIS_TDATA_M[6]) = (0:0:0, 0:0:0);
    (S2_AXIS_TDATA[7] => S2_AXIS_TDATA_M[7]) = (0:0:0, 0:0:0);
    (S2_AXIS_TDATA[8] => S2_AXIS_TDATA_M[8]) = (0:0:0, 0:0:0);
    (S2_AXIS_TDATA[9] => S2_AXIS_TDATA_M[9]) = (0:0:0, 0:0:0);
    (S2_AXIS_TLAST => S2_AXIS_TLAST_M) = (0:0:0, 0:0:0);
    (S2_AXIS_TREADY_M => S2_AXIS_TREADY) = (0:0:0, 0:0:0);
    (S2_AXIS_TVALID => S2_AXIS_TVALID_M) = (0:0:0, 0:0:0);
    (TRIGACKIN0_M => TRIGACKIN0) = (0:0:0, 0:0:0);
    (TRIGACKOUT0 => TRIGACKOUT0_M) = (0:0:0, 0:0:0);
    (TRIGIN0 => TRIGIN0_M) = (0:0:0, 0:0:0);
    (TRIGOUT0_M => TRIGOUT0) = (0:0:0, 0:0:0);
    (UBENABLE => UBENABLE_M) = (0:0:0, 0:0:0);
    (UBINTERRUPT_M => UBINTERRUPT) = (0:0:0, 0:0:0);
    (UBINTR[0] => UBINTR_M[0]) = (0:0:0, 0:0:0);
    (UBINTR[10] => UBINTR_M[10]) = (0:0:0, 0:0:0);
    (UBINTR[11] => UBINTR_M[11]) = (0:0:0, 0:0:0);
    (UBINTR[1] => UBINTR_M[1]) = (0:0:0, 0:0:0);
    (UBINTR[2] => UBINTR_M[2]) = (0:0:0, 0:0:0);
    (UBINTR[3] => UBINTR_M[3]) = (0:0:0, 0:0:0);
    (UBINTR[4] => UBINTR_M[4]) = (0:0:0, 0:0:0);
    (UBINTR[5] => UBINTR_M[5]) = (0:0:0, 0:0:0);
    (UBINTR[6] => UBINTR_M[6]) = (0:0:0, 0:0:0);
    (UBINTR[7] => UBINTR_M[7]) = (0:0:0, 0:0:0);
    (UBINTR[8] => UBINTR_M[8]) = (0:0:0, 0:0:0);
    (UBINTR[9] => UBINTR_M[9]) = (0:0:0, 0:0:0);
    (UBRXUART => UBRXUART_M) = (0:0:0, 0:0:0);
    (UBTXUART_M => UBTXUART) = (0:0:0, 0:0:0);
    (UNCORRECTERR_M => UNCORRECTERR) = (0:0:0, 0:0:0);
    (XPIPE_GT_OUTCLK_M => XPIPE_GT_OUTCLK) = (0:0:0, 0:0:0);
    (XPIPE_GT_OUTCLK_M_1 => XPIPE_GT_OUTCLK_1) = (0:0:0, 0:0:0);
    (XPIPE_GT_PIPECLK => CH0_RXDATA[100]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH0_RXDATA[101]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH0_RXDATA[102]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH0_RXDATA[103]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH0_RXDATA[104]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH0_RXDATA[105]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH0_RXDATA[106]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH0_RXDATA[107]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH0_RXDATA[108]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH0_RXDATA[109]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH0_RXDATA[110]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH0_RXDATA[111]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH0_RXDATA[112]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH0_RXDATA[113]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH0_RXDATA[114]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH0_RXDATA[115]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH0_RXDATA[116]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH0_RXDATA[117]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH0_RXDATA[118]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH0_RXDATA[119]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH0_RXDATA[120]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH0_RXDATA[121]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH0_RXDATA[122]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH0_RXDATA[123]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH0_RXDATA[124]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH0_RXDATA[125]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH0_RXDATA[126]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH0_RXDATA[127]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH0_RXDATA[56]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH0_RXDATA[81]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH0_RXDATA[82]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH0_RXDATA[83]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH0_RXDATA[84]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH0_RXDATA[85]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH0_RXDATA[86]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH0_RXDATA[87]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH0_RXDATA[88]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH0_RXDATA[89]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH0_RXDATA[90]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH0_RXDATA[91]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH0_RXDATA[92]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH0_RXDATA[93]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH0_RXDATA[94]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH0_RXDATA[95]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH0_RXDATA[96]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH0_RXDATA[97]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH0_RXDATA[98]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH0_RXDATA[99]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH0_RXUSRCLK_M) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH0_TXUSRCLK_M) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH1_RXDATA[100]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH1_RXDATA[101]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH1_RXDATA[102]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH1_RXDATA[103]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH1_RXDATA[104]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH1_RXDATA[105]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH1_RXDATA[106]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH1_RXDATA[107]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH1_RXDATA[108]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH1_RXDATA[109]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH1_RXDATA[110]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH1_RXDATA[111]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH1_RXDATA[112]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH1_RXDATA[113]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH1_RXDATA[114]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH1_RXDATA[115]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH1_RXDATA[116]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH1_RXDATA[117]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH1_RXDATA[118]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH1_RXDATA[119]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH1_RXDATA[120]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH1_RXDATA[121]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH1_RXDATA[122]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH1_RXDATA[123]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH1_RXDATA[124]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH1_RXDATA[125]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH1_RXDATA[126]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH1_RXDATA[127]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH1_RXDATA[56]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH1_RXDATA[81]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH1_RXDATA[82]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH1_RXDATA[83]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH1_RXDATA[84]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH1_RXDATA[85]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH1_RXDATA[86]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH1_RXDATA[87]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH1_RXDATA[88]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH1_RXDATA[89]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH1_RXDATA[90]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH1_RXDATA[91]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH1_RXDATA[92]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH1_RXDATA[93]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH1_RXDATA[94]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH1_RXDATA[95]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH1_RXDATA[96]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH1_RXDATA[97]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH1_RXDATA[98]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH1_RXDATA[99]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH1_RXUSRCLK_M) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH1_TXUSRCLK_M) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH2_RXDATA[100]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH2_RXDATA[101]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH2_RXDATA[102]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH2_RXDATA[103]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH2_RXDATA[104]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH2_RXDATA[105]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH2_RXDATA[106]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH2_RXDATA[107]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH2_RXDATA[108]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH2_RXDATA[109]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH2_RXDATA[110]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH2_RXDATA[111]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH2_RXDATA[112]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH2_RXDATA[113]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH2_RXDATA[114]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH2_RXDATA[115]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH2_RXDATA[116]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH2_RXDATA[117]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH2_RXDATA[118]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH2_RXDATA[119]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH2_RXDATA[120]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH2_RXDATA[121]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH2_RXDATA[122]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH2_RXDATA[123]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH2_RXDATA[124]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH2_RXDATA[125]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH2_RXDATA[126]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH2_RXDATA[127]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH2_RXDATA[56]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH2_RXDATA[81]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH2_RXDATA[82]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH2_RXDATA[83]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH2_RXDATA[84]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH2_RXDATA[85]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH2_RXDATA[86]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH2_RXDATA[87]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH2_RXDATA[88]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH2_RXDATA[89]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH2_RXDATA[90]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH2_RXDATA[91]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH2_RXDATA[92]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH2_RXDATA[93]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH2_RXDATA[94]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH2_RXDATA[95]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH2_RXDATA[96]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH2_RXDATA[97]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH2_RXDATA[98]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH2_RXDATA[99]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH2_RXUSRCLK_M) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH2_TXUSRCLK_M) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH3_RXDATA[100]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH3_RXDATA[101]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH3_RXDATA[102]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH3_RXDATA[103]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH3_RXDATA[104]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH3_RXDATA[105]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH3_RXDATA[106]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH3_RXDATA[107]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH3_RXDATA[108]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH3_RXDATA[109]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH3_RXDATA[110]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH3_RXDATA[111]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH3_RXDATA[112]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH3_RXDATA[113]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH3_RXDATA[114]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH3_RXDATA[115]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH3_RXDATA[116]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH3_RXDATA[117]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH3_RXDATA[118]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH3_RXDATA[119]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH3_RXDATA[120]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH3_RXDATA[121]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH3_RXDATA[122]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH3_RXDATA[123]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH3_RXDATA[124]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH3_RXDATA[125]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH3_RXDATA[126]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH3_RXDATA[127]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH3_RXDATA[56]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH3_RXDATA[81]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH3_RXDATA[82]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH3_RXDATA[83]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH3_RXDATA[84]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH3_RXDATA[85]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH3_RXDATA[86]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH3_RXDATA[87]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH3_RXDATA[88]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH3_RXDATA[89]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH3_RXDATA[90]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH3_RXDATA[91]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH3_RXDATA[92]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH3_RXDATA[93]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH3_RXDATA[94]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH3_RXDATA[95]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH3_RXDATA[96]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH3_RXDATA[97]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH3_RXDATA[98]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH3_RXDATA[99]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH3_RXUSRCLK_M) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CH3_TXUSRCLK_M) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CTRLRSVDOUT[0]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CTRLRSVDOUT[10]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CTRLRSVDOUT[11]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CTRLRSVDOUT[12]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CTRLRSVDOUT[13]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CTRLRSVDOUT[14]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CTRLRSVDOUT[15]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CTRLRSVDOUT[16]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CTRLRSVDOUT[17]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CTRLRSVDOUT[18]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CTRLRSVDOUT[19]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CTRLRSVDOUT[1]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CTRLRSVDOUT[20]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CTRLRSVDOUT[21]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CTRLRSVDOUT[22]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CTRLRSVDOUT[2]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CTRLRSVDOUT[3]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CTRLRSVDOUT[4]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CTRLRSVDOUT[5]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CTRLRSVDOUT[6]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CTRLRSVDOUT[7]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CTRLRSVDOUT[8]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => CTRLRSVDOUT[9]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => RXMARGINCLK_M) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK => TXOUTCLKDBG_SOUTH) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH0_RXDATA[100]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH0_RXDATA[101]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH0_RXDATA[102]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH0_RXDATA[103]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH0_RXDATA[104]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH0_RXDATA[105]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH0_RXDATA[106]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH0_RXDATA[107]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH0_RXDATA[108]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH0_RXDATA[109]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH0_RXDATA[110]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH0_RXDATA[111]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH0_RXDATA[112]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH0_RXDATA[113]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH0_RXDATA[114]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH0_RXDATA[115]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH0_RXDATA[116]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH0_RXDATA[117]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH0_RXDATA[118]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH0_RXDATA[119]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH0_RXDATA[120]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH0_RXDATA[121]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH0_RXDATA[122]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH0_RXDATA[123]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH0_RXDATA[124]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH0_RXDATA[125]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH0_RXDATA[126]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH0_RXDATA[127]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH0_RXDATA[56]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH0_RXDATA[81]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH0_RXDATA[82]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH0_RXDATA[83]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH0_RXDATA[84]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH0_RXDATA[85]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH0_RXDATA[86]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH0_RXDATA[87]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH0_RXDATA[88]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH0_RXDATA[89]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH0_RXDATA[90]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH0_RXDATA[91]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH0_RXDATA[92]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH0_RXDATA[93]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH0_RXDATA[94]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH0_RXDATA[95]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH0_RXDATA[96]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH0_RXDATA[97]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH0_RXDATA[98]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH0_RXDATA[99]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH0_RXUSRCLK_M) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH0_TXUSRCLK_M) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH1_RXDATA[100]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH1_RXDATA[101]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH1_RXDATA[102]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH1_RXDATA[103]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH1_RXDATA[104]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH1_RXDATA[105]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH1_RXDATA[106]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH1_RXDATA[107]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH1_RXDATA[108]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH1_RXDATA[109]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH1_RXDATA[110]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH1_RXDATA[111]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH1_RXDATA[112]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH1_RXDATA[113]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH1_RXDATA[114]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH1_RXDATA[115]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH1_RXDATA[116]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH1_RXDATA[117]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH1_RXDATA[118]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH1_RXDATA[119]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH1_RXDATA[120]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH1_RXDATA[121]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH1_RXDATA[122]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH1_RXDATA[123]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH1_RXDATA[124]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH1_RXDATA[125]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH1_RXDATA[126]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH1_RXDATA[127]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH1_RXDATA[56]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH1_RXDATA[81]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH1_RXDATA[82]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH1_RXDATA[83]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH1_RXDATA[84]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH1_RXDATA[85]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH1_RXDATA[86]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH1_RXDATA[87]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH1_RXDATA[88]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH1_RXDATA[89]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH1_RXDATA[90]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH1_RXDATA[91]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH1_RXDATA[92]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH1_RXDATA[93]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH1_RXDATA[94]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH1_RXDATA[95]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH1_RXDATA[96]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH1_RXDATA[97]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH1_RXDATA[98]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH1_RXDATA[99]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH1_RXUSRCLK_M) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH1_TXUSRCLK_M) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH2_RXDATA[100]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH2_RXDATA[101]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH2_RXDATA[102]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH2_RXDATA[103]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH2_RXDATA[104]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH2_RXDATA[105]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH2_RXDATA[106]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH2_RXDATA[107]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH2_RXDATA[108]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH2_RXDATA[109]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH2_RXDATA[110]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH2_RXDATA[111]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH2_RXDATA[112]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH2_RXDATA[113]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH2_RXDATA[114]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH2_RXDATA[115]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH2_RXDATA[116]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH2_RXDATA[117]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH2_RXDATA[118]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH2_RXDATA[119]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH2_RXDATA[120]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH2_RXDATA[121]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH2_RXDATA[122]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH2_RXDATA[123]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH2_RXDATA[124]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH2_RXDATA[125]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH2_RXDATA[126]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH2_RXDATA[127]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH2_RXDATA[56]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH2_RXDATA[81]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH2_RXDATA[82]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH2_RXDATA[83]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH2_RXDATA[84]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH2_RXDATA[85]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH2_RXDATA[86]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH2_RXDATA[87]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH2_RXDATA[88]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH2_RXDATA[89]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH2_RXDATA[90]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH2_RXDATA[91]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH2_RXDATA[92]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH2_RXDATA[93]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH2_RXDATA[94]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH2_RXDATA[95]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH2_RXDATA[96]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH2_RXDATA[97]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH2_RXDATA[98]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH2_RXDATA[99]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH2_RXUSRCLK_M) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH2_TXUSRCLK_M) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH3_RXDATA[100]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH3_RXDATA[101]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH3_RXDATA[102]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH3_RXDATA[103]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH3_RXDATA[104]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH3_RXDATA[105]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH3_RXDATA[106]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH3_RXDATA[107]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH3_RXDATA[108]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH3_RXDATA[109]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH3_RXDATA[110]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH3_RXDATA[111]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH3_RXDATA[112]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH3_RXDATA[113]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH3_RXDATA[114]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH3_RXDATA[115]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH3_RXDATA[116]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH3_RXDATA[117]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH3_RXDATA[118]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH3_RXDATA[119]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH3_RXDATA[120]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH3_RXDATA[121]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH3_RXDATA[122]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH3_RXDATA[123]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH3_RXDATA[124]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH3_RXDATA[125]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH3_RXDATA[126]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH3_RXDATA[127]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH3_RXDATA[56]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH3_RXDATA[81]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH3_RXDATA[82]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH3_RXDATA[83]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH3_RXDATA[84]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH3_RXDATA[85]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH3_RXDATA[86]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH3_RXDATA[87]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH3_RXDATA[88]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH3_RXDATA[89]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH3_RXDATA[90]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH3_RXDATA[91]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH3_RXDATA[92]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH3_RXDATA[93]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH3_RXDATA[94]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH3_RXDATA[95]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH3_RXDATA[96]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH3_RXDATA[97]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH3_RXDATA[98]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH3_RXDATA[99]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH3_RXUSRCLK_M) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CH3_TXUSRCLK_M) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CTRLRSVDOUT[0]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CTRLRSVDOUT[10]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CTRLRSVDOUT[11]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CTRLRSVDOUT[12]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CTRLRSVDOUT[13]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CTRLRSVDOUT[14]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CTRLRSVDOUT[15]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CTRLRSVDOUT[16]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CTRLRSVDOUT[17]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CTRLRSVDOUT[18]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CTRLRSVDOUT[19]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CTRLRSVDOUT[1]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CTRLRSVDOUT[20]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CTRLRSVDOUT[21]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CTRLRSVDOUT[22]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CTRLRSVDOUT[2]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CTRLRSVDOUT[3]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CTRLRSVDOUT[4]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CTRLRSVDOUT[5]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CTRLRSVDOUT[6]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CTRLRSVDOUT[7]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CTRLRSVDOUT[8]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => CTRLRSVDOUT[9]) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => RXMARGINCLK_M) = (100:100:100, 100:100:100);
    (XPIPE_GT_PIPECLK_1 => TXOUTCLKDBG_SOUTH) = (100:100:100, 100:100:100);
    (XPIPE_GT_RXUSRCLK => CH0_RXUSRCLK_M) = (0:0:0, 0:0:0);
    (XPIPE_GT_RXUSRCLK => CH1_RXUSRCLK_M) = (0:0:0, 0:0:0);
    (XPIPE_GT_RXUSRCLK => CH2_RXUSRCLK_M) = (0:0:0, 0:0:0);
    (XPIPE_GT_RXUSRCLK => CH3_RXUSRCLK_M) = (0:0:0, 0:0:0);
    (negedge CH0_BUFGTRSTMASK_M[0] => (CH0_BUFGTRSTMASK[0] +: 0)) = (100:100:100, 100:100:100);
    (negedge CH0_BUFGTRSTMASK_M[1] => (CH0_BUFGTRSTMASK[1] +: 0)) = (100:100:100, 100:100:100);
    (negedge CH0_BUFGTRSTMASK_M[2] => (CH0_BUFGTRSTMASK[2] +: 0)) = (100:100:100, 100:100:100);
    (negedge CH0_BUFGTRSTMASK_M[3] => (CH0_BUFGTRSTMASK[3] +: 0)) = (100:100:100, 100:100:100);
    (negedge CH0_BUFGTRST_M => (CH0_BUFGTRST +: 0)) = (100:100:100, 100:100:100);
    (negedge CH0_CDRSTEPDIR => (CH0_CDRSTEPDIR_M +: 0)) = (100:100:100, 100:100:100);
    (negedge CH0_CDRSTEPSQ => (CH0_CDRSTEPSQ_M +: 0)) = (100:100:100, 100:100:100);
    (negedge CH0_CDRSTEPSX => (CH0_CDRSTEPSX_M +: 0)) = (100:100:100, 100:100:100);
    (negedge CH0_PCIERSTB => (CH0_PCIERSTB_M +: 0)) = (100:100:100, 100:100:100);
    (negedge CH1_BUFGTRSTMASK_M[0] => (CH1_BUFGTRSTMASK[0] +: 0)) = (100:100:100, 100:100:100);
    (negedge CH1_BUFGTRSTMASK_M[1] => (CH1_BUFGTRSTMASK[1] +: 0)) = (100:100:100, 100:100:100);
    (negedge CH1_BUFGTRSTMASK_M[2] => (CH1_BUFGTRSTMASK[2] +: 0)) = (100:100:100, 100:100:100);
    (negedge CH1_BUFGTRSTMASK_M[3] => (CH1_BUFGTRSTMASK[3] +: 0)) = (100:100:100, 100:100:100);
    (negedge CH1_BUFGTRST_M => (CH1_BUFGTRST +: 0)) = (100:100:100, 100:100:100);
    (negedge CH1_CDRSTEPDIR => (CH1_CDRSTEPDIR_M +: 0)) = (100:100:100, 100:100:100);
    (negedge CH1_CDRSTEPSQ => (CH1_CDRSTEPSQ_M +: 0)) = (100:100:100, 100:100:100);
    (negedge CH1_CDRSTEPSX => (CH1_CDRSTEPSX_M +: 0)) = (100:100:100, 100:100:100);
    (negedge CH1_PCIERSTB => (CH1_PCIERSTB_M +: 0)) = (100:100:100, 100:100:100);
    (negedge CH2_BUFGTRSTMASK_M[0] => (CH2_BUFGTRSTMASK[0] +: 0)) = (100:100:100, 100:100:100);
    (negedge CH2_BUFGTRSTMASK_M[1] => (CH2_BUFGTRSTMASK[1] +: 0)) = (100:100:100, 100:100:100);
    (negedge CH2_BUFGTRSTMASK_M[2] => (CH2_BUFGTRSTMASK[2] +: 0)) = (100:100:100, 100:100:100);
    (negedge CH2_BUFGTRSTMASK_M[3] => (CH2_BUFGTRSTMASK[3] +: 0)) = (100:100:100, 100:100:100);
    (negedge CH2_BUFGTRST_M => (CH2_BUFGTRST +: 0)) = (100:100:100, 100:100:100);
    (negedge CH2_CDRSTEPDIR => (CH2_CDRSTEPDIR_M +: 0)) = (100:100:100, 100:100:100);
    (negedge CH2_CDRSTEPSQ => (CH2_CDRSTEPSQ_M +: 0)) = (100:100:100, 100:100:100);
    (negedge CH2_CDRSTEPSX => (CH2_CDRSTEPSX_M +: 0)) = (100:100:100, 100:100:100);
    (negedge CH2_PCIERSTB => (CH2_PCIERSTB_M +: 0)) = (100:100:100, 100:100:100);
    (negedge CH3_BUFGTRSTMASK_M[0] => (CH3_BUFGTRSTMASK[0] +: 0)) = (100:100:100, 100:100:100);
    (negedge CH3_BUFGTRSTMASK_M[1] => (CH3_BUFGTRSTMASK[1] +: 0)) = (100:100:100, 100:100:100);
    (negedge CH3_BUFGTRSTMASK_M[2] => (CH3_BUFGTRSTMASK[2] +: 0)) = (100:100:100, 100:100:100);
    (negedge CH3_BUFGTRSTMASK_M[3] => (CH3_BUFGTRSTMASK[3] +: 0)) = (100:100:100, 100:100:100);
    (negedge CH3_BUFGTRST_M => (CH3_BUFGTRST +: 0)) = (100:100:100, 100:100:100);
    (negedge CH3_CDRSTEPDIR => (CH3_CDRSTEPDIR_M +: 0)) = (100:100:100, 100:100:100);
    (negedge CH3_CDRSTEPSQ => (CH3_CDRSTEPSQ_M +: 0)) = (100:100:100, 100:100:100);
    (negedge CH3_CDRSTEPSX => (CH3_CDRSTEPSX_M +: 0)) = (100:100:100, 100:100:100);
    (negedge CH3_PCIERSTB => (CH3_PCIERSTB_M +: 0)) = (100:100:100, 100:100:100);
    (negedge UBIOLMBRST => (UBIOLMBRST_M +: 0)) = (100:100:100, 100:100:100);
    (negedge UBMBRST => (UBMBRST_M +: 0)) = (100:100:100, 100:100:100);
    (posedge APB3PREADY_M => (APB3PREADY +: 1)) = (100:100:100, 100:100:100);
    (posedge APB3PRESETN => (APB3PRESETN_M +: 1)) = (100:100:100, 100:100:100);
    (posedge CH0_DMONFIFORESET => (CH0_DMONFIFORESET_M +: 1)) = (100:100:100, 100:100:100);
    (posedge CH0_EYESCANRESET => (CH0_EYESCANRESET_M +: 1)) = (100:100:100, 100:100:100);
    (posedge CH0_GTRXRESET => (CH0_GTRXRESET_M +: 1)) = (100:100:100, 100:100:100);
    (posedge CH0_GTTXRESET => (CH0_GTTXRESET_M +: 1)) = (100:100:100, 100:100:100);
    (posedge CH0_HSDPPCSRESET => (CH0_HSDPPCSRESET_M +: 1)) = (100:100:100, 100:100:100);
    (posedge CH0_ILORESET => (CH0_ILORESET_M +: 1)) = (100:100:100, 100:100:100);
    (posedge CH0_ILORESETDONE_M => (CH0_ILORESETDONE +: 1)) = (100:100:100, 100:100:100);
    (posedge CH0_ILORESETMASK => (CH0_ILORESETMASK_M +: 1)) = (100:100:100, 100:100:100);
    (posedge CH0_RESETEXCEPTION_M => (CH0_RESETEXCEPTION +: 1)) = (100:100:100, 100:100:100);
    (posedge CH0_RXCDRRESET => (CH0_RXCDRRESET_M +: 1)) = (100:100:100, 100:100:100);
    (posedge CH0_RXDAPICODERESET => (CH0_RXDAPICODERESET_M +: 1)) = (100:100:100, 100:100:100);
    (posedge CH0_RXOOBRESET => (CH0_RXOOBRESET_M +: 1)) = (100:100:100, 100:100:100);
    (posedge CH0_RXPCSRESETMASK[0] => (CH0_RXPCSRESETMASK_M[0] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH0_RXPCSRESETMASK[1] => (CH0_RXPCSRESETMASK_M[1] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH0_RXPCSRESETMASK[2] => (CH0_RXPCSRESETMASK_M[2] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH0_RXPCSRESETMASK[3] => (CH0_RXPCSRESETMASK_M[3] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH0_RXPCSRESETMASK[4] => (CH0_RXPCSRESETMASK_M[4] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH0_RXPHALIGNRESETMASK[0] => (CH0_RXPHALIGNRESETMASK_M[0] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH0_RXPHALIGNRESETMASK[1] => (CH0_RXPHALIGNRESETMASK_M[1] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH0_RXPHDLYRESET => (CH0_RXPHDLYRESET_M +: 1)) = (100:100:100, 100:100:100);
    (posedge CH0_RXPHDLYRESETDONE_M => (CH0_RXPHDLYRESETDONE +: 1)) = (100:100:100, 100:100:100);
    (posedge CH0_RXPHSETINITDONE_M => (CH0_RXPHSETINITDONE +: 1)) = (100:100:100, 100:100:100);
    (posedge CH0_RXPHSETINITREQ => (CH0_RXPHSETINITREQ_M +: 1)) = (100:100:100, 100:100:100);
    (posedge CH0_RXPMARESETDONE_M => (CH0_RXPMARESETDONE +: 1)) = (100:100:100, 100:100:100);
    (posedge CH0_RXPMARESETMASK[0] => (CH0_RXPMARESETMASK_M[0] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH0_RXPMARESETMASK[1] => (CH0_RXPMARESETMASK_M[1] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH0_RXPMARESETMASK[2] => (CH0_RXPMARESETMASK_M[2] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH0_RXPMARESETMASK[3] => (CH0_RXPMARESETMASK_M[3] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH0_RXPMARESETMASK[4] => (CH0_RXPMARESETMASK_M[4] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH0_RXPMARESETMASK[5] => (CH0_RXPMARESETMASK_M[5] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH0_RXPMARESETMASK[6] => (CH0_RXPMARESETMASK_M[6] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH0_RXPRBSCNTRESET => (CH0_RXPRBSCNTRESET_M +: 1)) = (100:100:100, 100:100:100);
    (posedge CH0_RXPROGDIVRESET => (CH0_RXPROGDIVRESET_M +: 1)) = (100:100:100, 100:100:100);
    (posedge CH0_RXPROGDIVRESETDONE_M => (CH0_RXPROGDIVRESETDONE +: 1)) = (100:100:100, 100:100:100);
    (posedge CH0_RXRESETDONE_M => (CH0_RXRESETDONE +: 1)) = (100:100:100, 100:100:100);
    (posedge CH0_RXRESETMODE[0] => (CH0_RXRESETMODE_M[0] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH0_RXRESETMODE[1] => (CH0_RXRESETMODE_M[1] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH0_TXDAPICODERESET => (CH0_TXDAPICODERESET_M +: 1)) = (100:100:100, 100:100:100);
    (posedge CH0_TXPCSRESETMASK => (CH0_TXPCSRESETMASK_M +: 1)) = (100:100:100, 100:100:100);
    (posedge CH0_TXPHALIGNRESETMASK[0] => (CH0_TXPHALIGNRESETMASK_M[0] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH0_TXPHALIGNRESETMASK[1] => (CH0_TXPHALIGNRESETMASK_M[1] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH0_TXPHDLYRESET => (CH0_TXPHDLYRESET_M +: 1)) = (100:100:100, 100:100:100);
    (posedge CH0_TXPHDLYRESETDONE_M => (CH0_TXPHDLYRESETDONE +: 1)) = (100:100:100, 100:100:100);
    (posedge CH0_TXPHSETINITDONE_M => (CH0_TXPHSETINITDONE +: 1)) = (100:100:100, 100:100:100);
    (posedge CH0_TXPHSETINITREQ => (CH0_TXPHSETINITREQ_M +: 1)) = (100:100:100, 100:100:100);
    (posedge CH0_TXPICODERESET => (CH0_TXPICODERESET_M +: 1)) = (100:100:100, 100:100:100);
    (posedge CH0_TXPMARESETDONE_M => (CH0_TXPMARESETDONE +: 1)) = (100:100:100, 100:100:100);
    (posedge CH0_TXPMARESETMASK[0] => (CH0_TXPMARESETMASK_M[0] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH0_TXPMARESETMASK[1] => (CH0_TXPMARESETMASK_M[1] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH0_TXPMARESETMASK[2] => (CH0_TXPMARESETMASK_M[2] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH0_TXPRECURSOR[0] => (CH0_TXPRECURSOR_M[0] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH0_TXPRECURSOR[1] => (CH0_TXPRECURSOR_M[1] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH0_TXPRECURSOR[2] => (CH0_TXPRECURSOR_M[2] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH0_TXPRECURSOR[3] => (CH0_TXPRECURSOR_M[3] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH0_TXPRECURSOR[4] => (CH0_TXPRECURSOR_M[4] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH0_TXPROGDIVRESET => (CH0_TXPROGDIVRESET_M +: 1)) = (100:100:100, 100:100:100);
    (posedge CH0_TXPROGDIVRESETDONE_M => (CH0_TXPROGDIVRESETDONE +: 1)) = (100:100:100, 100:100:100);
    (posedge CH0_TXRESETDONE_M => (CH0_TXRESETDONE +: 1)) = (100:100:100, 100:100:100);
    (posedge CH0_TXRESETMODE[0] => (CH0_TXRESETMODE_M[0] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH0_TXRESETMODE[1] => (CH0_TXRESETMODE_M[1] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH1_DMONFIFORESET => (CH1_DMONFIFORESET_M +: 1)) = (100:100:100, 100:100:100);
    (posedge CH1_EYESCANRESET => (CH1_EYESCANRESET_M +: 1)) = (100:100:100, 100:100:100);
    (posedge CH1_GTRXRESET => (CH1_GTRXRESET_M +: 1)) = (100:100:100, 100:100:100);
    (posedge CH1_GTTXRESET => (CH1_GTTXRESET_M +: 1)) = (100:100:100, 100:100:100);
    (posedge CH1_HSDPPCSRESET => (CH1_HSDPPCSRESET_M +: 1)) = (100:100:100, 100:100:100);
    (posedge CH1_ILORESET => (CH1_ILORESET_M +: 1)) = (100:100:100, 100:100:100);
    (posedge CH1_ILORESETDONE_M => (CH1_ILORESETDONE +: 1)) = (100:100:100, 100:100:100);
    (posedge CH1_ILORESETMASK => (CH1_ILORESETMASK_M +: 1)) = (100:100:100, 100:100:100);
    (posedge CH1_RESETEXCEPTION_M => (CH1_RESETEXCEPTION +: 1)) = (100:100:100, 100:100:100);
    (posedge CH1_RXCDRRESET => (CH1_RXCDRRESET_M +: 1)) = (100:100:100, 100:100:100);
    (posedge CH1_RXDAPICODERESET => (CH1_RXDAPICODERESET_M +: 1)) = (100:100:100, 100:100:100);
    (posedge CH1_RXOOBRESET => (CH1_RXOOBRESET_M +: 1)) = (100:100:100, 100:100:100);
    (posedge CH1_RXPCSRESETMASK[0] => (CH1_RXPCSRESETMASK_M[0] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH1_RXPCSRESETMASK[1] => (CH1_RXPCSRESETMASK_M[1] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH1_RXPCSRESETMASK[2] => (CH1_RXPCSRESETMASK_M[2] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH1_RXPCSRESETMASK[3] => (CH1_RXPCSRESETMASK_M[3] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH1_RXPCSRESETMASK[4] => (CH1_RXPCSRESETMASK_M[4] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH1_RXPHALIGNRESETMASK[0] => (CH1_RXPHALIGNRESETMASK_M[0] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH1_RXPHALIGNRESETMASK[1] => (CH1_RXPHALIGNRESETMASK_M[1] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH1_RXPHDLYRESET => (CH1_RXPHDLYRESET_M +: 1)) = (100:100:100, 100:100:100);
    (posedge CH1_RXPHDLYRESETDONE_M => (CH1_RXPHDLYRESETDONE +: 1)) = (100:100:100, 100:100:100);
    (posedge CH1_RXPHSETINITDONE_M => (CH1_RXPHSETINITDONE +: 1)) = (100:100:100, 100:100:100);
    (posedge CH1_RXPHSETINITREQ => (CH1_RXPHSETINITREQ_M +: 1)) = (100:100:100, 100:100:100);
    (posedge CH1_RXPMARESETDONE_M => (CH1_RXPMARESETDONE +: 1)) = (100:100:100, 100:100:100);
    (posedge CH1_RXPMARESETMASK[0] => (CH1_RXPMARESETMASK_M[0] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH1_RXPMARESETMASK[1] => (CH1_RXPMARESETMASK_M[1] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH1_RXPMARESETMASK[2] => (CH1_RXPMARESETMASK_M[2] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH1_RXPMARESETMASK[3] => (CH1_RXPMARESETMASK_M[3] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH1_RXPMARESETMASK[4] => (CH1_RXPMARESETMASK_M[4] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH1_RXPMARESETMASK[5] => (CH1_RXPMARESETMASK_M[5] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH1_RXPMARESETMASK[6] => (CH1_RXPMARESETMASK_M[6] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH1_RXPRBSCNTRESET => (CH1_RXPRBSCNTRESET_M +: 1)) = (100:100:100, 100:100:100);
    (posedge CH1_RXPROGDIVRESET => (CH1_RXPROGDIVRESET_M +: 1)) = (100:100:100, 100:100:100);
    (posedge CH1_RXPROGDIVRESETDONE_M => (CH1_RXPROGDIVRESETDONE +: 1)) = (100:100:100, 100:100:100);
    (posedge CH1_RXRESETDONE_M => (CH1_RXRESETDONE +: 1)) = (100:100:100, 100:100:100);
    (posedge CH1_RXRESETMODE[0] => (CH1_RXRESETMODE_M[0] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH1_RXRESETMODE[1] => (CH1_RXRESETMODE_M[1] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH1_TXDAPICODERESET => (CH1_TXDAPICODERESET_M +: 1)) = (100:100:100, 100:100:100);
    (posedge CH1_TXPCSRESETMASK => (CH1_TXPCSRESETMASK_M +: 1)) = (100:100:100, 100:100:100);
    (posedge CH1_TXPHALIGNRESETMASK[0] => (CH1_TXPHALIGNRESETMASK_M[0] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH1_TXPHALIGNRESETMASK[1] => (CH1_TXPHALIGNRESETMASK_M[1] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH1_TXPHDLYRESET => (CH1_TXPHDLYRESET_M +: 1)) = (100:100:100, 100:100:100);
    (posedge CH1_TXPHDLYRESETDONE_M => (CH1_TXPHDLYRESETDONE +: 1)) = (100:100:100, 100:100:100);
    (posedge CH1_TXPHSETINITDONE_M => (CH1_TXPHSETINITDONE +: 1)) = (100:100:100, 100:100:100);
    (posedge CH1_TXPHSETINITREQ => (CH1_TXPHSETINITREQ_M +: 1)) = (100:100:100, 100:100:100);
    (posedge CH1_TXPICODERESET => (CH1_TXPICODERESET_M +: 1)) = (100:100:100, 100:100:100);
    (posedge CH1_TXPMARESETDONE_M => (CH1_TXPMARESETDONE +: 1)) = (100:100:100, 100:100:100);
    (posedge CH1_TXPMARESETMASK[0] => (CH1_TXPMARESETMASK_M[0] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH1_TXPMARESETMASK[1] => (CH1_TXPMARESETMASK_M[1] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH1_TXPMARESETMASK[2] => (CH1_TXPMARESETMASK_M[2] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH1_TXPRECURSOR[0] => (CH1_TXPRECURSOR_M[0] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH1_TXPRECURSOR[1] => (CH1_TXPRECURSOR_M[1] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH1_TXPRECURSOR[2] => (CH1_TXPRECURSOR_M[2] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH1_TXPRECURSOR[3] => (CH1_TXPRECURSOR_M[3] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH1_TXPRECURSOR[4] => (CH1_TXPRECURSOR_M[4] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH1_TXPROGDIVRESET => (CH1_TXPROGDIVRESET_M +: 1)) = (100:100:100, 100:100:100);
    (posedge CH1_TXPROGDIVRESETDONE_M => (CH1_TXPROGDIVRESETDONE +: 1)) = (100:100:100, 100:100:100);
    (posedge CH1_TXRESETDONE_M => (CH1_TXRESETDONE +: 1)) = (100:100:100, 100:100:100);
    (posedge CH1_TXRESETMODE[0] => (CH1_TXRESETMODE_M[0] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH1_TXRESETMODE[1] => (CH1_TXRESETMODE_M[1] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH2_DMONFIFORESET => (CH2_DMONFIFORESET_M +: 1)) = (100:100:100, 100:100:100);
    (posedge CH2_EYESCANRESET => (CH2_EYESCANRESET_M +: 1)) = (100:100:100, 100:100:100);
    (posedge CH2_GTRXRESET => (CH2_GTRXRESET_M +: 1)) = (100:100:100, 100:100:100);
    (posedge CH2_GTTXRESET => (CH2_GTTXRESET_M +: 1)) = (100:100:100, 100:100:100);
    (posedge CH2_HSDPPCSRESET => (CH2_HSDPPCSRESET_M +: 1)) = (100:100:100, 100:100:100);
    (posedge CH2_ILORESET => (CH2_ILORESET_M +: 1)) = (100:100:100, 100:100:100);
    (posedge CH2_ILORESETDONE_M => (CH2_ILORESETDONE +: 1)) = (100:100:100, 100:100:100);
    (posedge CH2_ILORESETMASK => (CH2_ILORESETMASK_M +: 1)) = (100:100:100, 100:100:100);
    (posedge CH2_RESETEXCEPTION_M => (CH2_RESETEXCEPTION +: 1)) = (100:100:100, 100:100:100);
    (posedge CH2_RXCDRRESET => (CH2_RXCDRRESET_M +: 1)) = (100:100:100, 100:100:100);
    (posedge CH2_RXDAPICODERESET => (CH2_RXDAPICODERESET_M +: 1)) = (100:100:100, 100:100:100);
    (posedge CH2_RXOOBRESET => (CH2_RXOOBRESET_M +: 1)) = (100:100:100, 100:100:100);
    (posedge CH2_RXPCSRESETMASK[0] => (CH2_RXPCSRESETMASK_M[0] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH2_RXPCSRESETMASK[1] => (CH2_RXPCSRESETMASK_M[1] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH2_RXPCSRESETMASK[2] => (CH2_RXPCSRESETMASK_M[2] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH2_RXPCSRESETMASK[3] => (CH2_RXPCSRESETMASK_M[3] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH2_RXPCSRESETMASK[4] => (CH2_RXPCSRESETMASK_M[4] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH2_RXPHALIGNRESETMASK[0] => (CH2_RXPHALIGNRESETMASK_M[0] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH2_RXPHALIGNRESETMASK[1] => (CH2_RXPHALIGNRESETMASK_M[1] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH2_RXPHDLYRESET => (CH2_RXPHDLYRESET_M +: 1)) = (100:100:100, 100:100:100);
    (posedge CH2_RXPHDLYRESETDONE_M => (CH2_RXPHDLYRESETDONE +: 1)) = (100:100:100, 100:100:100);
    (posedge CH2_RXPHSETINITDONE_M => (CH2_RXPHSETINITDONE +: 1)) = (100:100:100, 100:100:100);
    (posedge CH2_RXPHSETINITREQ => (CH2_RXPHSETINITREQ_M +: 1)) = (100:100:100, 100:100:100);
    (posedge CH2_RXPMARESETDONE_M => (CH2_RXPMARESETDONE +: 1)) = (100:100:100, 100:100:100);
    (posedge CH2_RXPMARESETMASK[0] => (CH2_RXPMARESETMASK_M[0] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH2_RXPMARESETMASK[1] => (CH2_RXPMARESETMASK_M[1] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH2_RXPMARESETMASK[2] => (CH2_RXPMARESETMASK_M[2] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH2_RXPMARESETMASK[3] => (CH2_RXPMARESETMASK_M[3] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH2_RXPMARESETMASK[4] => (CH2_RXPMARESETMASK_M[4] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH2_RXPMARESETMASK[5] => (CH2_RXPMARESETMASK_M[5] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH2_RXPMARESETMASK[6] => (CH2_RXPMARESETMASK_M[6] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH2_RXPRBSCNTRESET => (CH2_RXPRBSCNTRESET_M +: 1)) = (100:100:100, 100:100:100);
    (posedge CH2_RXPROGDIVRESET => (CH2_RXPROGDIVRESET_M +: 1)) = (100:100:100, 100:100:100);
    (posedge CH2_RXPROGDIVRESETDONE_M => (CH2_RXPROGDIVRESETDONE +: 1)) = (100:100:100, 100:100:100);
    (posedge CH2_RXRESETDONE_M => (CH2_RXRESETDONE +: 1)) = (100:100:100, 100:100:100);
    (posedge CH2_RXRESETMODE[0] => (CH2_RXRESETMODE_M[0] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH2_RXRESETMODE[1] => (CH2_RXRESETMODE_M[1] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH2_TXDAPICODERESET => (CH2_TXDAPICODERESET_M +: 1)) = (100:100:100, 100:100:100);
    (posedge CH2_TXPCSRESETMASK => (CH2_TXPCSRESETMASK_M +: 1)) = (100:100:100, 100:100:100);
    (posedge CH2_TXPHALIGNRESETMASK[0] => (CH2_TXPHALIGNRESETMASK_M[0] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH2_TXPHALIGNRESETMASK[1] => (CH2_TXPHALIGNRESETMASK_M[1] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH2_TXPHDLYRESET => (CH2_TXPHDLYRESET_M +: 1)) = (100:100:100, 100:100:100);
    (posedge CH2_TXPHDLYRESETDONE_M => (CH2_TXPHDLYRESETDONE +: 1)) = (100:100:100, 100:100:100);
    (posedge CH2_TXPHSETINITDONE_M => (CH2_TXPHSETINITDONE +: 1)) = (100:100:100, 100:100:100);
    (posedge CH2_TXPHSETINITREQ => (CH2_TXPHSETINITREQ_M +: 1)) = (100:100:100, 100:100:100);
    (posedge CH2_TXPICODERESET => (CH2_TXPICODERESET_M +: 1)) = (100:100:100, 100:100:100);
    (posedge CH2_TXPMARESETDONE_M => (CH2_TXPMARESETDONE +: 1)) = (100:100:100, 100:100:100);
    (posedge CH2_TXPMARESETMASK[0] => (CH2_TXPMARESETMASK_M[0] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH2_TXPMARESETMASK[1] => (CH2_TXPMARESETMASK_M[1] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH2_TXPMARESETMASK[2] => (CH2_TXPMARESETMASK_M[2] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH2_TXPRECURSOR[0] => (CH2_TXPRECURSOR_M[0] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH2_TXPRECURSOR[1] => (CH2_TXPRECURSOR_M[1] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH2_TXPRECURSOR[2] => (CH2_TXPRECURSOR_M[2] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH2_TXPRECURSOR[3] => (CH2_TXPRECURSOR_M[3] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH2_TXPRECURSOR[4] => (CH2_TXPRECURSOR_M[4] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH2_TXPROGDIVRESET => (CH2_TXPROGDIVRESET_M +: 1)) = (100:100:100, 100:100:100);
    (posedge CH2_TXPROGDIVRESETDONE_M => (CH2_TXPROGDIVRESETDONE +: 1)) = (100:100:100, 100:100:100);
    (posedge CH2_TXRESETDONE_M => (CH2_TXRESETDONE +: 1)) = (100:100:100, 100:100:100);
    (posedge CH2_TXRESETMODE[0] => (CH2_TXRESETMODE_M[0] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH2_TXRESETMODE[1] => (CH2_TXRESETMODE_M[1] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH3_DMONFIFORESET => (CH3_DMONFIFORESET_M +: 1)) = (100:100:100, 100:100:100);
    (posedge CH3_EYESCANRESET => (CH3_EYESCANRESET_M +: 1)) = (100:100:100, 100:100:100);
    (posedge CH3_GTRXRESET => (CH3_GTRXRESET_M +: 1)) = (100:100:100, 100:100:100);
    (posedge CH3_GTTXRESET => (CH3_GTTXRESET_M +: 1)) = (100:100:100, 100:100:100);
    (posedge CH3_HSDPPCSRESET => (CH3_HSDPPCSRESET_M +: 1)) = (100:100:100, 100:100:100);
    (posedge CH3_ILORESET => (CH3_ILORESET_M +: 1)) = (100:100:100, 100:100:100);
    (posedge CH3_ILORESETDONE_M => (CH3_ILORESETDONE +: 1)) = (100:100:100, 100:100:100);
    (posedge CH3_ILORESETMASK => (CH3_ILORESETMASK_M +: 1)) = (100:100:100, 100:100:100);
    (posedge CH3_RESETEXCEPTION_M => (CH3_RESETEXCEPTION +: 1)) = (100:100:100, 100:100:100);
    (posedge CH3_RXCDRRESET => (CH3_RXCDRRESET_M +: 1)) = (100:100:100, 100:100:100);
    (posedge CH3_RXDAPICODERESET => (CH3_RXDAPICODERESET_M +: 1)) = (100:100:100, 100:100:100);
    (posedge CH3_RXOOBRESET => (CH3_RXOOBRESET_M +: 1)) = (100:100:100, 100:100:100);
    (posedge CH3_RXPCSRESETMASK[0] => (CH3_RXPCSRESETMASK_M[0] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH3_RXPCSRESETMASK[1] => (CH3_RXPCSRESETMASK_M[1] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH3_RXPCSRESETMASK[2] => (CH3_RXPCSRESETMASK_M[2] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH3_RXPCSRESETMASK[3] => (CH3_RXPCSRESETMASK_M[3] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH3_RXPCSRESETMASK[4] => (CH3_RXPCSRESETMASK_M[4] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH3_RXPHALIGNRESETMASK[0] => (CH3_RXPHALIGNRESETMASK_M[0] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH3_RXPHALIGNRESETMASK[1] => (CH3_RXPHALIGNRESETMASK_M[1] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH3_RXPHDLYRESET => (CH3_RXPHDLYRESET_M +: 1)) = (100:100:100, 100:100:100);
    (posedge CH3_RXPHDLYRESETDONE_M => (CH3_RXPHDLYRESETDONE +: 1)) = (100:100:100, 100:100:100);
    (posedge CH3_RXPHSETINITDONE_M => (CH3_RXPHSETINITDONE +: 1)) = (100:100:100, 100:100:100);
    (posedge CH3_RXPHSETINITREQ => (CH3_RXPHSETINITREQ_M +: 1)) = (100:100:100, 100:100:100);
    (posedge CH3_RXPMARESETDONE_M => (CH3_RXPMARESETDONE +: 1)) = (100:100:100, 100:100:100);
    (posedge CH3_RXPMARESETMASK[0] => (CH3_RXPMARESETMASK_M[0] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH3_RXPMARESETMASK[1] => (CH3_RXPMARESETMASK_M[1] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH3_RXPMARESETMASK[2] => (CH3_RXPMARESETMASK_M[2] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH3_RXPMARESETMASK[3] => (CH3_RXPMARESETMASK_M[3] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH3_RXPMARESETMASK[4] => (CH3_RXPMARESETMASK_M[4] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH3_RXPMARESETMASK[5] => (CH3_RXPMARESETMASK_M[5] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH3_RXPMARESETMASK[6] => (CH3_RXPMARESETMASK_M[6] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH3_RXPRBSCNTRESET => (CH3_RXPRBSCNTRESET_M +: 1)) = (100:100:100, 100:100:100);
    (posedge CH3_RXPROGDIVRESET => (CH3_RXPROGDIVRESET_M +: 1)) = (100:100:100, 100:100:100);
    (posedge CH3_RXPROGDIVRESETDONE_M => (CH3_RXPROGDIVRESETDONE +: 1)) = (100:100:100, 100:100:100);
    (posedge CH3_RXRESETDONE_M => (CH3_RXRESETDONE +: 1)) = (100:100:100, 100:100:100);
    (posedge CH3_RXRESETMODE[0] => (CH3_RXRESETMODE_M[0] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH3_RXRESETMODE[1] => (CH3_RXRESETMODE_M[1] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH3_TXDAPICODERESET => (CH3_TXDAPICODERESET_M +: 1)) = (100:100:100, 100:100:100);
    (posedge CH3_TXPCSRESETMASK => (CH3_TXPCSRESETMASK_M +: 1)) = (100:100:100, 100:100:100);
    (posedge CH3_TXPHALIGNRESETMASK[0] => (CH3_TXPHALIGNRESETMASK_M[0] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH3_TXPHALIGNRESETMASK[1] => (CH3_TXPHALIGNRESETMASK_M[1] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH3_TXPHDLYRESET => (CH3_TXPHDLYRESET_M +: 1)) = (100:100:100, 100:100:100);
    (posedge CH3_TXPHDLYRESETDONE_M => (CH3_TXPHDLYRESETDONE +: 1)) = (100:100:100, 100:100:100);
    (posedge CH3_TXPHSETINITDONE_M => (CH3_TXPHSETINITDONE +: 1)) = (100:100:100, 100:100:100);
    (posedge CH3_TXPHSETINITREQ => (CH3_TXPHSETINITREQ_M +: 1)) = (100:100:100, 100:100:100);
    (posedge CH3_TXPICODERESET => (CH3_TXPICODERESET_M +: 1)) = (100:100:100, 100:100:100);
    (posedge CH3_TXPMARESETDONE_M => (CH3_TXPMARESETDONE +: 1)) = (100:100:100, 100:100:100);
    (posedge CH3_TXPMARESETMASK[0] => (CH3_TXPMARESETMASK_M[0] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH3_TXPMARESETMASK[1] => (CH3_TXPMARESETMASK_M[1] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH3_TXPMARESETMASK[2] => (CH3_TXPMARESETMASK_M[2] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH3_TXPRECURSOR[0] => (CH3_TXPRECURSOR_M[0] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH3_TXPRECURSOR[1] => (CH3_TXPRECURSOR_M[1] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH3_TXPRECURSOR[2] => (CH3_TXPRECURSOR_M[2] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH3_TXPRECURSOR[3] => (CH3_TXPRECURSOR_M[3] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH3_TXPRECURSOR[4] => (CH3_TXPRECURSOR_M[4] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH3_TXPROGDIVRESET => (CH3_TXPROGDIVRESET_M +: 1)) = (100:100:100, 100:100:100);
    (posedge CH3_TXPROGDIVRESETDONE_M => (CH3_TXPROGDIVRESETDONE +: 1)) = (100:100:100, 100:100:100);
    (posedge CH3_TXRESETDONE_M => (CH3_TXRESETDONE +: 1)) = (100:100:100, 100:100:100);
    (posedge CH3_TXRESETMODE[0] => (CH3_TXRESETMODE_M[0] +: 1)) = (100:100:100, 100:100:100);
    (posedge CH3_TXRESETMODE[1] => (CH3_TXRESETMODE_M[1] +: 1)) = (100:100:100, 100:100:100);
    (posedge HSCLK0_LCPLLRESET => (HSCLK0_LCPLLRESET_M +: 1)) = (100:100:100, 100:100:100);
    (posedge HSCLK0_LCPLLRESETBYPASSMODE => (HSCLK0_LCPLLRESETBYPASSMODE_M +: 1)) = (100:100:100, 100:100:100);
    (posedge HSCLK0_LCPLLRESETMASK[0] => (HSCLK0_LCPLLRESETMASK_M[0] +: 1)) = (100:100:100, 100:100:100);
    (posedge HSCLK0_LCPLLRESETMASK[1] => (HSCLK0_LCPLLRESETMASK_M[1] +: 1)) = (100:100:100, 100:100:100);
    (posedge HSCLK0_RPLLRESET => (HSCLK0_RPLLRESET_M +: 1)) = (100:100:100, 100:100:100);
    (posedge HSCLK0_RPLLRESETBYPASSMODE => (HSCLK0_RPLLRESETBYPASSMODE_M +: 1)) = (100:100:100, 100:100:100);
    (posedge HSCLK0_RPLLRESETMASK[0] => (HSCLK0_RPLLRESETMASK_M[0] +: 1)) = (100:100:100, 100:100:100);
    (posedge HSCLK0_RPLLRESETMASK[1] => (HSCLK0_RPLLRESETMASK_M[1] +: 1)) = (100:100:100, 100:100:100);
    (posedge HSCLK1_LCPLLRESET => (HSCLK1_LCPLLRESET_M +: 1)) = (100:100:100, 100:100:100);
    (posedge HSCLK1_LCPLLRESETBYPASSMODE => (HSCLK1_LCPLLRESETBYPASSMODE_M +: 1)) = (100:100:100, 100:100:100);
    (posedge HSCLK1_LCPLLRESETMASK[0] => (HSCLK1_LCPLLRESETMASK_M[0] +: 1)) = (100:100:100, 100:100:100);
    (posedge HSCLK1_LCPLLRESETMASK[1] => (HSCLK1_LCPLLRESETMASK_M[1] +: 1)) = (100:100:100, 100:100:100);
    (posedge HSCLK1_RPLLRESET => (HSCLK1_RPLLRESET_M +: 1)) = (100:100:100, 100:100:100);
    (posedge HSCLK1_RPLLRESETBYPASSMODE => (HSCLK1_RPLLRESETBYPASSMODE_M +: 1)) = (100:100:100, 100:100:100);
    (posedge HSCLK1_RPLLRESETMASK[0] => (HSCLK1_RPLLRESETMASK_M[0] +: 1)) = (100:100:100, 100:100:100);
    (posedge HSCLK1_RPLLRESETMASK[1] => (HSCLK1_RPLLRESETMASK_M[1] +: 1)) = (100:100:100, 100:100:100);
    (posedge MSTRXRESETDONE_M[0] => (MSTRXRESETDONE[0] +: 1)) = (100:100:100, 100:100:100);
    (posedge MSTRXRESETDONE_M[1] => (MSTRXRESETDONE[1] +: 1)) = (100:100:100, 100:100:100);
    (posedge MSTRXRESETDONE_M[2] => (MSTRXRESETDONE[2] +: 1)) = (100:100:100, 100:100:100);
    (posedge MSTRXRESETDONE_M[3] => (MSTRXRESETDONE[3] +: 1)) = (100:100:100, 100:100:100);
    (posedge MSTRXRESET[0] => (MSTRXRESET_M[0] +: 1)) = (100:100:100, 100:100:100);
    (posedge MSTRXRESET[1] => (MSTRXRESET_M[1] +: 1)) = (100:100:100, 100:100:100);
    (posedge MSTRXRESET[2] => (MSTRXRESET_M[2] +: 1)) = (100:100:100, 100:100:100);
    (posedge MSTRXRESET[3] => (MSTRXRESET_M[3] +: 1)) = (100:100:100, 100:100:100);
    (posedge MSTTXRESETDONE_M[0] => (MSTTXRESETDONE[0] +: 1)) = (100:100:100, 100:100:100);
    (posedge MSTTXRESETDONE_M[1] => (MSTTXRESETDONE[1] +: 1)) = (100:100:100, 100:100:100);
    (posedge MSTTXRESETDONE_M[2] => (MSTTXRESETDONE[2] +: 1)) = (100:100:100, 100:100:100);
    (posedge MSTTXRESETDONE_M[3] => (MSTTXRESETDONE[3] +: 1)) = (100:100:100, 100:100:100);
    (posedge MSTTXRESET[0] => (MSTTXRESET_M[0] +: 1)) = (100:100:100, 100:100:100);
    (posedge MSTTXRESET[1] => (MSTTXRESET_M[1] +: 1)) = (100:100:100, 100:100:100);
    (posedge MSTTXRESET[2] => (MSTTXRESET_M[2] +: 1)) = (100:100:100, 100:100:100);
    (posedge MSTTXRESET[3] => (MSTTXRESET_M[3] +: 1)) = (100:100:100, 100:100:100);
`ifdef XIL_TIMING
    $period (negedge XPIPE_GT_PIPECLK, 0:0:0, notifier);
    $period (negedge XPIPE_GT_PIPECLK_1, 0:0:0, notifier);
    $period (posedge XPIPE_GT_PIPECLK, 0:0:0, notifier);
    $period (posedge XPIPE_GT_PIPECLK_1, 0:0:0, notifier);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH0_TXDATA[100], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH0_TXDATA_delay[100]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH0_TXDATA[101], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH0_TXDATA_delay[101]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH0_TXDATA[102], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH0_TXDATA_delay[102]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH0_TXDATA[103], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH0_TXDATA_delay[103]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH0_TXDATA[104], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH0_TXDATA_delay[104]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH0_TXDATA[105], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH0_TXDATA_delay[105]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH0_TXDATA[106], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH0_TXDATA_delay[106]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH0_TXDATA[107], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH0_TXDATA_delay[107]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH0_TXDATA[108], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH0_TXDATA_delay[108]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH0_TXDATA[109], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH0_TXDATA_delay[109]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH0_TXDATA[110], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH0_TXDATA_delay[110]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH0_TXDATA[111], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH0_TXDATA_delay[111]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH0_TXDATA[112], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH0_TXDATA_delay[112]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH0_TXDATA[113], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH0_TXDATA_delay[113]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH0_TXDATA[114], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH0_TXDATA_delay[114]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH0_TXDATA[115], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH0_TXDATA_delay[115]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH0_TXDATA[116], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH0_TXDATA_delay[116]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH0_TXDATA[117], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH0_TXDATA_delay[117]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH0_TXDATA[118], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH0_TXDATA_delay[118]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH0_TXDATA[119], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH0_TXDATA_delay[119]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH0_TXDATA[120], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH0_TXDATA_delay[120]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH0_TXDATA[121], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH0_TXDATA_delay[121]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH0_TXDATA[122], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH0_TXDATA_delay[122]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH0_TXDATA[123], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH0_TXDATA_delay[123]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH0_TXDATA[124], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH0_TXDATA_delay[124]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH0_TXDATA[125], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH0_TXDATA_delay[125]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH0_TXDATA[126], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH0_TXDATA_delay[126]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH0_TXDATA[127], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH0_TXDATA_delay[127]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH0_TXDATA[85], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH0_TXDATA_delay[85]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH0_TXDATA[86], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH0_TXDATA_delay[86]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH0_TXDATA[87], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH0_TXDATA_delay[87]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH0_TXDATA[88], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH0_TXDATA_delay[88]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH0_TXDATA[89], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH0_TXDATA_delay[89]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH0_TXDATA[90], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH0_TXDATA_delay[90]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH0_TXDATA[91], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH0_TXDATA_delay[91]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH0_TXDATA[92], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH0_TXDATA_delay[92]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH0_TXDATA[93], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH0_TXDATA_delay[93]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH0_TXDATA[94], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH0_TXDATA_delay[94]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH0_TXDATA[95], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH0_TXDATA_delay[95]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH0_TXDATA[96], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH0_TXDATA_delay[96]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH0_TXDATA[97], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH0_TXDATA_delay[97]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH0_TXDATA[98], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH0_TXDATA_delay[98]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH0_TXDATA[99], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH0_TXDATA_delay[99]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH1_TXDATA[100], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH1_TXDATA_delay[100]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH1_TXDATA[101], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH1_TXDATA_delay[101]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH1_TXDATA[102], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH1_TXDATA_delay[102]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH1_TXDATA[103], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH1_TXDATA_delay[103]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH1_TXDATA[104], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH1_TXDATA_delay[104]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH1_TXDATA[105], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH1_TXDATA_delay[105]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH1_TXDATA[106], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH1_TXDATA_delay[106]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH1_TXDATA[107], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH1_TXDATA_delay[107]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH1_TXDATA[108], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH1_TXDATA_delay[108]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH1_TXDATA[109], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH1_TXDATA_delay[109]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH1_TXDATA[110], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH1_TXDATA_delay[110]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH1_TXDATA[111], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH1_TXDATA_delay[111]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH1_TXDATA[112], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH1_TXDATA_delay[112]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH1_TXDATA[113], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH1_TXDATA_delay[113]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH1_TXDATA[114], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH1_TXDATA_delay[114]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH1_TXDATA[115], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH1_TXDATA_delay[115]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH1_TXDATA[116], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH1_TXDATA_delay[116]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH1_TXDATA[117], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH1_TXDATA_delay[117]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH1_TXDATA[118], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH1_TXDATA_delay[118]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH1_TXDATA[119], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH1_TXDATA_delay[119]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH1_TXDATA[120], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH1_TXDATA_delay[120]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH1_TXDATA[121], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH1_TXDATA_delay[121]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH1_TXDATA[122], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH1_TXDATA_delay[122]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH1_TXDATA[123], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH1_TXDATA_delay[123]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH1_TXDATA[124], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH1_TXDATA_delay[124]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH1_TXDATA[125], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH1_TXDATA_delay[125]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH1_TXDATA[126], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH1_TXDATA_delay[126]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH1_TXDATA[127], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH1_TXDATA_delay[127]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH1_TXDATA[85], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH1_TXDATA_delay[85]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH1_TXDATA[86], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH1_TXDATA_delay[86]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH1_TXDATA[87], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH1_TXDATA_delay[87]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH1_TXDATA[88], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH1_TXDATA_delay[88]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH1_TXDATA[89], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH1_TXDATA_delay[89]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH1_TXDATA[90], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH1_TXDATA_delay[90]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH1_TXDATA[91], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH1_TXDATA_delay[91]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH1_TXDATA[92], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH1_TXDATA_delay[92]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH1_TXDATA[93], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH1_TXDATA_delay[93]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH1_TXDATA[94], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH1_TXDATA_delay[94]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH1_TXDATA[95], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH1_TXDATA_delay[95]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH1_TXDATA[96], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH1_TXDATA_delay[96]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH1_TXDATA[97], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH1_TXDATA_delay[97]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH1_TXDATA[98], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH1_TXDATA_delay[98]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH1_TXDATA[99], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH1_TXDATA_delay[99]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH2_TXDATA[100], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH2_TXDATA_delay[100]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH2_TXDATA[101], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH2_TXDATA_delay[101]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH2_TXDATA[102], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH2_TXDATA_delay[102]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH2_TXDATA[103], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH2_TXDATA_delay[103]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH2_TXDATA[104], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH2_TXDATA_delay[104]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH2_TXDATA[105], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH2_TXDATA_delay[105]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH2_TXDATA[106], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH2_TXDATA_delay[106]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH2_TXDATA[107], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH2_TXDATA_delay[107]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH2_TXDATA[108], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH2_TXDATA_delay[108]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH2_TXDATA[109], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH2_TXDATA_delay[109]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH2_TXDATA[110], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH2_TXDATA_delay[110]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH2_TXDATA[111], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH2_TXDATA_delay[111]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH2_TXDATA[112], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH2_TXDATA_delay[112]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH2_TXDATA[113], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH2_TXDATA_delay[113]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH2_TXDATA[114], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH2_TXDATA_delay[114]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH2_TXDATA[115], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH2_TXDATA_delay[115]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH2_TXDATA[116], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH2_TXDATA_delay[116]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH2_TXDATA[117], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH2_TXDATA_delay[117]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH2_TXDATA[118], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH2_TXDATA_delay[118]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH2_TXDATA[119], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH2_TXDATA_delay[119]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH2_TXDATA[120], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH2_TXDATA_delay[120]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH2_TXDATA[121], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH2_TXDATA_delay[121]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH2_TXDATA[122], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH2_TXDATA_delay[122]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH2_TXDATA[123], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH2_TXDATA_delay[123]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH2_TXDATA[124], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH2_TXDATA_delay[124]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH2_TXDATA[125], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH2_TXDATA_delay[125]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH2_TXDATA[126], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH2_TXDATA_delay[126]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH2_TXDATA[127], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH2_TXDATA_delay[127]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH2_TXDATA[85], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH2_TXDATA_delay[85]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH2_TXDATA[86], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH2_TXDATA_delay[86]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH2_TXDATA[87], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH2_TXDATA_delay[87]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH2_TXDATA[88], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH2_TXDATA_delay[88]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH2_TXDATA[89], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH2_TXDATA_delay[89]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH2_TXDATA[90], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH2_TXDATA_delay[90]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH2_TXDATA[91], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH2_TXDATA_delay[91]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH2_TXDATA[92], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH2_TXDATA_delay[92]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH2_TXDATA[93], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH2_TXDATA_delay[93]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH2_TXDATA[94], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH2_TXDATA_delay[94]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH2_TXDATA[95], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH2_TXDATA_delay[95]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH2_TXDATA[96], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH2_TXDATA_delay[96]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH2_TXDATA[97], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH2_TXDATA_delay[97]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH2_TXDATA[98], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH2_TXDATA_delay[98]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH2_TXDATA[99], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH2_TXDATA_delay[99]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH3_TXDATA[100], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH3_TXDATA_delay[100]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH3_TXDATA[101], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH3_TXDATA_delay[101]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH3_TXDATA[102], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH3_TXDATA_delay[102]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH3_TXDATA[103], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH3_TXDATA_delay[103]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH3_TXDATA[104], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH3_TXDATA_delay[104]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH3_TXDATA[105], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH3_TXDATA_delay[105]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH3_TXDATA[106], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH3_TXDATA_delay[106]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH3_TXDATA[107], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH3_TXDATA_delay[107]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH3_TXDATA[108], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH3_TXDATA_delay[108]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH3_TXDATA[109], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH3_TXDATA_delay[109]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH3_TXDATA[110], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH3_TXDATA_delay[110]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH3_TXDATA[111], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH3_TXDATA_delay[111]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH3_TXDATA[112], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH3_TXDATA_delay[112]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH3_TXDATA[113], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH3_TXDATA_delay[113]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH3_TXDATA[114], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH3_TXDATA_delay[114]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH3_TXDATA[115], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH3_TXDATA_delay[115]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH3_TXDATA[116], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH3_TXDATA_delay[116]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH3_TXDATA[117], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH3_TXDATA_delay[117]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH3_TXDATA[118], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH3_TXDATA_delay[118]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH3_TXDATA[119], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH3_TXDATA_delay[119]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH3_TXDATA[120], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH3_TXDATA_delay[120]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH3_TXDATA[121], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH3_TXDATA_delay[121]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH3_TXDATA[122], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH3_TXDATA_delay[122]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH3_TXDATA[123], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH3_TXDATA_delay[123]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH3_TXDATA[124], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH3_TXDATA_delay[124]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH3_TXDATA[125], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH3_TXDATA_delay[125]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH3_TXDATA[126], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH3_TXDATA_delay[126]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH3_TXDATA[127], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH3_TXDATA_delay[127]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH3_TXDATA[85], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH3_TXDATA_delay[85]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH3_TXDATA[86], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH3_TXDATA_delay[86]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH3_TXDATA[87], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH3_TXDATA_delay[87]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH3_TXDATA[88], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH3_TXDATA_delay[88]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH3_TXDATA[89], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH3_TXDATA_delay[89]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH3_TXDATA[90], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH3_TXDATA_delay[90]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH3_TXDATA[91], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH3_TXDATA_delay[91]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH3_TXDATA[92], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH3_TXDATA_delay[92]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH3_TXDATA[93], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH3_TXDATA_delay[93]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH3_TXDATA[94], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH3_TXDATA_delay[94]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH3_TXDATA[95], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH3_TXDATA_delay[95]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH3_TXDATA[96], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH3_TXDATA_delay[96]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH3_TXDATA[97], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH3_TXDATA_delay[97]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH3_TXDATA[98], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH3_TXDATA_delay[98]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CH3_TXDATA[99], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH3_TXDATA_delay[99]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CTRLRSVDIN0[0], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CTRLRSVDIN0_delay[0]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CTRLRSVDIN0[10], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CTRLRSVDIN0_delay[10]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CTRLRSVDIN0[11], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CTRLRSVDIN0_delay[11]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CTRLRSVDIN0[12], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CTRLRSVDIN0_delay[12]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CTRLRSVDIN0[13], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CTRLRSVDIN0_delay[13]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CTRLRSVDIN0[14], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CTRLRSVDIN0_delay[14]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CTRLRSVDIN0[15], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CTRLRSVDIN0_delay[15]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CTRLRSVDIN0[1], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CTRLRSVDIN0_delay[1]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CTRLRSVDIN0[2], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CTRLRSVDIN0_delay[2]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CTRLRSVDIN0[3], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CTRLRSVDIN0_delay[3]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CTRLRSVDIN0[4], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CTRLRSVDIN0_delay[4]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CTRLRSVDIN0[5], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CTRLRSVDIN0_delay[5]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CTRLRSVDIN0[6], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CTRLRSVDIN0_delay[6]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CTRLRSVDIN0[7], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CTRLRSVDIN0_delay[7]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CTRLRSVDIN0[8], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CTRLRSVDIN0_delay[8]);
    $setuphold (posedge XPIPE_GT_PIPECLK, negedge CTRLRSVDIN0[9], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CTRLRSVDIN0_delay[9]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH0_TXDATA[100], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH0_TXDATA_delay[100]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH0_TXDATA[101], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH0_TXDATA_delay[101]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH0_TXDATA[102], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH0_TXDATA_delay[102]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH0_TXDATA[103], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH0_TXDATA_delay[103]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH0_TXDATA[104], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH0_TXDATA_delay[104]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH0_TXDATA[105], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH0_TXDATA_delay[105]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH0_TXDATA[106], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH0_TXDATA_delay[106]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH0_TXDATA[107], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH0_TXDATA_delay[107]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH0_TXDATA[108], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH0_TXDATA_delay[108]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH0_TXDATA[109], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH0_TXDATA_delay[109]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH0_TXDATA[110], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH0_TXDATA_delay[110]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH0_TXDATA[111], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH0_TXDATA_delay[111]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH0_TXDATA[112], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH0_TXDATA_delay[112]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH0_TXDATA[113], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH0_TXDATA_delay[113]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH0_TXDATA[114], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH0_TXDATA_delay[114]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH0_TXDATA[115], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH0_TXDATA_delay[115]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH0_TXDATA[116], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH0_TXDATA_delay[116]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH0_TXDATA[117], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH0_TXDATA_delay[117]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH0_TXDATA[118], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH0_TXDATA_delay[118]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH0_TXDATA[119], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH0_TXDATA_delay[119]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH0_TXDATA[120], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH0_TXDATA_delay[120]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH0_TXDATA[121], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH0_TXDATA_delay[121]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH0_TXDATA[122], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH0_TXDATA_delay[122]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH0_TXDATA[123], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH0_TXDATA_delay[123]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH0_TXDATA[124], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH0_TXDATA_delay[124]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH0_TXDATA[125], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH0_TXDATA_delay[125]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH0_TXDATA[126], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH0_TXDATA_delay[126]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH0_TXDATA[127], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH0_TXDATA_delay[127]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH0_TXDATA[85], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH0_TXDATA_delay[85]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH0_TXDATA[86], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH0_TXDATA_delay[86]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH0_TXDATA[87], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH0_TXDATA_delay[87]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH0_TXDATA[88], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH0_TXDATA_delay[88]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH0_TXDATA[89], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH0_TXDATA_delay[89]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH0_TXDATA[90], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH0_TXDATA_delay[90]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH0_TXDATA[91], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH0_TXDATA_delay[91]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH0_TXDATA[92], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH0_TXDATA_delay[92]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH0_TXDATA[93], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH0_TXDATA_delay[93]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH0_TXDATA[94], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH0_TXDATA_delay[94]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH0_TXDATA[95], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH0_TXDATA_delay[95]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH0_TXDATA[96], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH0_TXDATA_delay[96]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH0_TXDATA[97], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH0_TXDATA_delay[97]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH0_TXDATA[98], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH0_TXDATA_delay[98]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH0_TXDATA[99], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH0_TXDATA_delay[99]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH1_TXDATA[100], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH1_TXDATA_delay[100]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH1_TXDATA[101], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH1_TXDATA_delay[101]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH1_TXDATA[102], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH1_TXDATA_delay[102]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH1_TXDATA[103], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH1_TXDATA_delay[103]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH1_TXDATA[104], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH1_TXDATA_delay[104]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH1_TXDATA[105], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH1_TXDATA_delay[105]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH1_TXDATA[106], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH1_TXDATA_delay[106]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH1_TXDATA[107], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH1_TXDATA_delay[107]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH1_TXDATA[108], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH1_TXDATA_delay[108]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH1_TXDATA[109], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH1_TXDATA_delay[109]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH1_TXDATA[110], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH1_TXDATA_delay[110]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH1_TXDATA[111], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH1_TXDATA_delay[111]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH1_TXDATA[112], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH1_TXDATA_delay[112]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH1_TXDATA[113], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH1_TXDATA_delay[113]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH1_TXDATA[114], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH1_TXDATA_delay[114]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH1_TXDATA[115], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH1_TXDATA_delay[115]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH1_TXDATA[116], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH1_TXDATA_delay[116]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH1_TXDATA[117], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH1_TXDATA_delay[117]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH1_TXDATA[118], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH1_TXDATA_delay[118]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH1_TXDATA[119], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH1_TXDATA_delay[119]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH1_TXDATA[120], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH1_TXDATA_delay[120]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH1_TXDATA[121], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH1_TXDATA_delay[121]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH1_TXDATA[122], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH1_TXDATA_delay[122]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH1_TXDATA[123], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH1_TXDATA_delay[123]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH1_TXDATA[124], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH1_TXDATA_delay[124]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH1_TXDATA[125], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH1_TXDATA_delay[125]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH1_TXDATA[126], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH1_TXDATA_delay[126]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH1_TXDATA[127], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH1_TXDATA_delay[127]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH1_TXDATA[85], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH1_TXDATA_delay[85]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH1_TXDATA[86], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH1_TXDATA_delay[86]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH1_TXDATA[87], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH1_TXDATA_delay[87]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH1_TXDATA[88], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH1_TXDATA_delay[88]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH1_TXDATA[89], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH1_TXDATA_delay[89]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH1_TXDATA[90], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH1_TXDATA_delay[90]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH1_TXDATA[91], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH1_TXDATA_delay[91]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH1_TXDATA[92], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH1_TXDATA_delay[92]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH1_TXDATA[93], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH1_TXDATA_delay[93]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH1_TXDATA[94], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH1_TXDATA_delay[94]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH1_TXDATA[95], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH1_TXDATA_delay[95]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH1_TXDATA[96], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH1_TXDATA_delay[96]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH1_TXDATA[97], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH1_TXDATA_delay[97]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH1_TXDATA[98], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH1_TXDATA_delay[98]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH1_TXDATA[99], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH1_TXDATA_delay[99]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH2_TXDATA[100], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH2_TXDATA_delay[100]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH2_TXDATA[101], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH2_TXDATA_delay[101]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH2_TXDATA[102], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH2_TXDATA_delay[102]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH2_TXDATA[103], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH2_TXDATA_delay[103]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH2_TXDATA[104], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH2_TXDATA_delay[104]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH2_TXDATA[105], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH2_TXDATA_delay[105]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH2_TXDATA[106], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH2_TXDATA_delay[106]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH2_TXDATA[107], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH2_TXDATA_delay[107]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH2_TXDATA[108], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH2_TXDATA_delay[108]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH2_TXDATA[109], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH2_TXDATA_delay[109]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH2_TXDATA[110], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH2_TXDATA_delay[110]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH2_TXDATA[111], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH2_TXDATA_delay[111]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH2_TXDATA[112], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH2_TXDATA_delay[112]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH2_TXDATA[113], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH2_TXDATA_delay[113]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH2_TXDATA[114], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH2_TXDATA_delay[114]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH2_TXDATA[115], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH2_TXDATA_delay[115]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH2_TXDATA[116], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH2_TXDATA_delay[116]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH2_TXDATA[117], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH2_TXDATA_delay[117]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH2_TXDATA[118], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH2_TXDATA_delay[118]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH2_TXDATA[119], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH2_TXDATA_delay[119]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH2_TXDATA[120], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH2_TXDATA_delay[120]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH2_TXDATA[121], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH2_TXDATA_delay[121]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH2_TXDATA[122], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH2_TXDATA_delay[122]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH2_TXDATA[123], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH2_TXDATA_delay[123]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH2_TXDATA[124], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH2_TXDATA_delay[124]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH2_TXDATA[125], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH2_TXDATA_delay[125]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH2_TXDATA[126], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH2_TXDATA_delay[126]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH2_TXDATA[127], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH2_TXDATA_delay[127]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH2_TXDATA[85], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH2_TXDATA_delay[85]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH2_TXDATA[86], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH2_TXDATA_delay[86]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH2_TXDATA[87], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH2_TXDATA_delay[87]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH2_TXDATA[88], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH2_TXDATA_delay[88]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH2_TXDATA[89], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH2_TXDATA_delay[89]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH2_TXDATA[90], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH2_TXDATA_delay[90]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH2_TXDATA[91], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH2_TXDATA_delay[91]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH2_TXDATA[92], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH2_TXDATA_delay[92]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH2_TXDATA[93], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH2_TXDATA_delay[93]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH2_TXDATA[94], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH2_TXDATA_delay[94]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH2_TXDATA[95], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH2_TXDATA_delay[95]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH2_TXDATA[96], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH2_TXDATA_delay[96]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH2_TXDATA[97], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH2_TXDATA_delay[97]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH2_TXDATA[98], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH2_TXDATA_delay[98]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH2_TXDATA[99], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH2_TXDATA_delay[99]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH3_TXDATA[100], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH3_TXDATA_delay[100]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH3_TXDATA[101], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH3_TXDATA_delay[101]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH3_TXDATA[102], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH3_TXDATA_delay[102]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH3_TXDATA[103], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH3_TXDATA_delay[103]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH3_TXDATA[104], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH3_TXDATA_delay[104]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH3_TXDATA[105], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH3_TXDATA_delay[105]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH3_TXDATA[106], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH3_TXDATA_delay[106]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH3_TXDATA[107], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH3_TXDATA_delay[107]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH3_TXDATA[108], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH3_TXDATA_delay[108]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH3_TXDATA[109], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH3_TXDATA_delay[109]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH3_TXDATA[110], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH3_TXDATA_delay[110]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH3_TXDATA[111], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH3_TXDATA_delay[111]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH3_TXDATA[112], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH3_TXDATA_delay[112]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH3_TXDATA[113], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH3_TXDATA_delay[113]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH3_TXDATA[114], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH3_TXDATA_delay[114]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH3_TXDATA[115], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH3_TXDATA_delay[115]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH3_TXDATA[116], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH3_TXDATA_delay[116]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH3_TXDATA[117], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH3_TXDATA_delay[117]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH3_TXDATA[118], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH3_TXDATA_delay[118]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH3_TXDATA[119], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH3_TXDATA_delay[119]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH3_TXDATA[120], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH3_TXDATA_delay[120]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH3_TXDATA[121], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH3_TXDATA_delay[121]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH3_TXDATA[122], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH3_TXDATA_delay[122]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH3_TXDATA[123], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH3_TXDATA_delay[123]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH3_TXDATA[124], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH3_TXDATA_delay[124]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH3_TXDATA[125], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH3_TXDATA_delay[125]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH3_TXDATA[126], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH3_TXDATA_delay[126]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH3_TXDATA[127], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH3_TXDATA_delay[127]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH3_TXDATA[85], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH3_TXDATA_delay[85]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH3_TXDATA[86], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH3_TXDATA_delay[86]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH3_TXDATA[87], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH3_TXDATA_delay[87]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH3_TXDATA[88], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH3_TXDATA_delay[88]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH3_TXDATA[89], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH3_TXDATA_delay[89]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH3_TXDATA[90], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH3_TXDATA_delay[90]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH3_TXDATA[91], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH3_TXDATA_delay[91]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH3_TXDATA[92], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH3_TXDATA_delay[92]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH3_TXDATA[93], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH3_TXDATA_delay[93]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH3_TXDATA[94], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH3_TXDATA_delay[94]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH3_TXDATA[95], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH3_TXDATA_delay[95]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH3_TXDATA[96], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH3_TXDATA_delay[96]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH3_TXDATA[97], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH3_TXDATA_delay[97]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH3_TXDATA[98], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH3_TXDATA_delay[98]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CH3_TXDATA[99], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CH3_TXDATA_delay[99]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CTRLRSVDIN0[0], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CTRLRSVDIN0_delay[0]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CTRLRSVDIN0[10], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CTRLRSVDIN0_delay[10]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CTRLRSVDIN0[11], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CTRLRSVDIN0_delay[11]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CTRLRSVDIN0[12], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CTRLRSVDIN0_delay[12]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CTRLRSVDIN0[13], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CTRLRSVDIN0_delay[13]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CTRLRSVDIN0[14], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CTRLRSVDIN0_delay[14]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CTRLRSVDIN0[15], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CTRLRSVDIN0_delay[15]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CTRLRSVDIN0[1], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CTRLRSVDIN0_delay[1]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CTRLRSVDIN0[2], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CTRLRSVDIN0_delay[2]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CTRLRSVDIN0[3], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CTRLRSVDIN0_delay[3]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CTRLRSVDIN0[4], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CTRLRSVDIN0_delay[4]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CTRLRSVDIN0[5], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CTRLRSVDIN0_delay[5]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CTRLRSVDIN0[6], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CTRLRSVDIN0_delay[6]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CTRLRSVDIN0[7], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CTRLRSVDIN0_delay[7]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CTRLRSVDIN0[8], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CTRLRSVDIN0_delay[8]);
    $setuphold (posedge XPIPE_GT_PIPECLK, posedge CTRLRSVDIN0[9], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_delay, CTRLRSVDIN0_delay[9]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH0_TXDATA[100], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH0_TXDATA_delay[100]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH0_TXDATA[101], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH0_TXDATA_delay[101]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH0_TXDATA[102], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH0_TXDATA_delay[102]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH0_TXDATA[103], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH0_TXDATA_delay[103]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH0_TXDATA[104], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH0_TXDATA_delay[104]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH0_TXDATA[105], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH0_TXDATA_delay[105]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH0_TXDATA[106], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH0_TXDATA_delay[106]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH0_TXDATA[107], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH0_TXDATA_delay[107]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH0_TXDATA[108], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH0_TXDATA_delay[108]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH0_TXDATA[109], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH0_TXDATA_delay[109]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH0_TXDATA[110], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH0_TXDATA_delay[110]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH0_TXDATA[111], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH0_TXDATA_delay[111]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH0_TXDATA[112], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH0_TXDATA_delay[112]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH0_TXDATA[113], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH0_TXDATA_delay[113]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH0_TXDATA[114], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH0_TXDATA_delay[114]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH0_TXDATA[115], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH0_TXDATA_delay[115]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH0_TXDATA[116], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH0_TXDATA_delay[116]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH0_TXDATA[117], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH0_TXDATA_delay[117]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH0_TXDATA[118], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH0_TXDATA_delay[118]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH0_TXDATA[119], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH0_TXDATA_delay[119]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH0_TXDATA[120], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH0_TXDATA_delay[120]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH0_TXDATA[121], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH0_TXDATA_delay[121]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH0_TXDATA[122], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH0_TXDATA_delay[122]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH0_TXDATA[123], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH0_TXDATA_delay[123]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH0_TXDATA[124], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH0_TXDATA_delay[124]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH0_TXDATA[125], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH0_TXDATA_delay[125]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH0_TXDATA[126], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH0_TXDATA_delay[126]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH0_TXDATA[127], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH0_TXDATA_delay[127]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH0_TXDATA[85], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH0_TXDATA_delay[85]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH0_TXDATA[86], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH0_TXDATA_delay[86]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH0_TXDATA[87], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH0_TXDATA_delay[87]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH0_TXDATA[88], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH0_TXDATA_delay[88]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH0_TXDATA[89], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH0_TXDATA_delay[89]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH0_TXDATA[90], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH0_TXDATA_delay[90]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH0_TXDATA[91], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH0_TXDATA_delay[91]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH0_TXDATA[92], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH0_TXDATA_delay[92]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH0_TXDATA[93], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH0_TXDATA_delay[93]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH0_TXDATA[94], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH0_TXDATA_delay[94]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH0_TXDATA[95], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH0_TXDATA_delay[95]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH0_TXDATA[96], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH0_TXDATA_delay[96]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH0_TXDATA[97], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH0_TXDATA_delay[97]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH0_TXDATA[98], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH0_TXDATA_delay[98]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH0_TXDATA[99], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH0_TXDATA_delay[99]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH1_TXDATA[100], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH1_TXDATA_delay[100]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH1_TXDATA[101], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH1_TXDATA_delay[101]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH1_TXDATA[102], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH1_TXDATA_delay[102]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH1_TXDATA[103], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH1_TXDATA_delay[103]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH1_TXDATA[104], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH1_TXDATA_delay[104]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH1_TXDATA[105], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH1_TXDATA_delay[105]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH1_TXDATA[106], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH1_TXDATA_delay[106]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH1_TXDATA[107], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH1_TXDATA_delay[107]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH1_TXDATA[108], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH1_TXDATA_delay[108]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH1_TXDATA[109], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH1_TXDATA_delay[109]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH1_TXDATA[110], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH1_TXDATA_delay[110]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH1_TXDATA[111], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH1_TXDATA_delay[111]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH1_TXDATA[112], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH1_TXDATA_delay[112]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH1_TXDATA[113], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH1_TXDATA_delay[113]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH1_TXDATA[114], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH1_TXDATA_delay[114]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH1_TXDATA[115], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH1_TXDATA_delay[115]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH1_TXDATA[116], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH1_TXDATA_delay[116]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH1_TXDATA[117], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH1_TXDATA_delay[117]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH1_TXDATA[118], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH1_TXDATA_delay[118]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH1_TXDATA[119], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH1_TXDATA_delay[119]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH1_TXDATA[120], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH1_TXDATA_delay[120]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH1_TXDATA[121], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH1_TXDATA_delay[121]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH1_TXDATA[122], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH1_TXDATA_delay[122]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH1_TXDATA[123], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH1_TXDATA_delay[123]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH1_TXDATA[124], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH1_TXDATA_delay[124]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH1_TXDATA[125], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH1_TXDATA_delay[125]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH1_TXDATA[126], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH1_TXDATA_delay[126]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH1_TXDATA[127], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH1_TXDATA_delay[127]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH1_TXDATA[85], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH1_TXDATA_delay[85]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH1_TXDATA[86], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH1_TXDATA_delay[86]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH1_TXDATA[87], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH1_TXDATA_delay[87]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH1_TXDATA[88], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH1_TXDATA_delay[88]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH1_TXDATA[89], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH1_TXDATA_delay[89]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH1_TXDATA[90], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH1_TXDATA_delay[90]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH1_TXDATA[91], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH1_TXDATA_delay[91]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH1_TXDATA[92], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH1_TXDATA_delay[92]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH1_TXDATA[93], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH1_TXDATA_delay[93]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH1_TXDATA[94], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH1_TXDATA_delay[94]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH1_TXDATA[95], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH1_TXDATA_delay[95]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH1_TXDATA[96], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH1_TXDATA_delay[96]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH1_TXDATA[97], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH1_TXDATA_delay[97]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH1_TXDATA[98], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH1_TXDATA_delay[98]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH1_TXDATA[99], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH1_TXDATA_delay[99]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH2_TXDATA[100], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH2_TXDATA_delay[100]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH2_TXDATA[101], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH2_TXDATA_delay[101]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH2_TXDATA[102], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH2_TXDATA_delay[102]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH2_TXDATA[103], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH2_TXDATA_delay[103]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH2_TXDATA[104], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH2_TXDATA_delay[104]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH2_TXDATA[105], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH2_TXDATA_delay[105]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH2_TXDATA[106], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH2_TXDATA_delay[106]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH2_TXDATA[107], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH2_TXDATA_delay[107]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH2_TXDATA[108], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH2_TXDATA_delay[108]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH2_TXDATA[109], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH2_TXDATA_delay[109]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH2_TXDATA[110], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH2_TXDATA_delay[110]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH2_TXDATA[111], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH2_TXDATA_delay[111]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH2_TXDATA[112], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH2_TXDATA_delay[112]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH2_TXDATA[113], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH2_TXDATA_delay[113]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH2_TXDATA[114], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH2_TXDATA_delay[114]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH2_TXDATA[115], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH2_TXDATA_delay[115]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH2_TXDATA[116], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH2_TXDATA_delay[116]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH2_TXDATA[117], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH2_TXDATA_delay[117]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH2_TXDATA[118], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH2_TXDATA_delay[118]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH2_TXDATA[119], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH2_TXDATA_delay[119]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH2_TXDATA[120], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH2_TXDATA_delay[120]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH2_TXDATA[121], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH2_TXDATA_delay[121]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH2_TXDATA[122], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH2_TXDATA_delay[122]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH2_TXDATA[123], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH2_TXDATA_delay[123]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH2_TXDATA[124], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH2_TXDATA_delay[124]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH2_TXDATA[125], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH2_TXDATA_delay[125]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH2_TXDATA[126], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH2_TXDATA_delay[126]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH2_TXDATA[127], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH2_TXDATA_delay[127]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH2_TXDATA[85], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH2_TXDATA_delay[85]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH2_TXDATA[86], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH2_TXDATA_delay[86]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH2_TXDATA[87], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH2_TXDATA_delay[87]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH2_TXDATA[88], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH2_TXDATA_delay[88]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH2_TXDATA[89], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH2_TXDATA_delay[89]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH2_TXDATA[90], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH2_TXDATA_delay[90]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH2_TXDATA[91], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH2_TXDATA_delay[91]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH2_TXDATA[92], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH2_TXDATA_delay[92]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH2_TXDATA[93], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH2_TXDATA_delay[93]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH2_TXDATA[94], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH2_TXDATA_delay[94]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH2_TXDATA[95], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH2_TXDATA_delay[95]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH2_TXDATA[96], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH2_TXDATA_delay[96]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH2_TXDATA[97], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH2_TXDATA_delay[97]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH2_TXDATA[98], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH2_TXDATA_delay[98]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH2_TXDATA[99], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH2_TXDATA_delay[99]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH3_TXDATA[100], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH3_TXDATA_delay[100]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH3_TXDATA[101], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH3_TXDATA_delay[101]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH3_TXDATA[102], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH3_TXDATA_delay[102]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH3_TXDATA[103], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH3_TXDATA_delay[103]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH3_TXDATA[104], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH3_TXDATA_delay[104]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH3_TXDATA[105], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH3_TXDATA_delay[105]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH3_TXDATA[106], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH3_TXDATA_delay[106]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH3_TXDATA[107], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH3_TXDATA_delay[107]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH3_TXDATA[108], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH3_TXDATA_delay[108]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH3_TXDATA[109], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH3_TXDATA_delay[109]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH3_TXDATA[110], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH3_TXDATA_delay[110]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH3_TXDATA[111], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH3_TXDATA_delay[111]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH3_TXDATA[112], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH3_TXDATA_delay[112]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH3_TXDATA[113], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH3_TXDATA_delay[113]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH3_TXDATA[114], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH3_TXDATA_delay[114]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH3_TXDATA[115], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH3_TXDATA_delay[115]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH3_TXDATA[116], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH3_TXDATA_delay[116]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH3_TXDATA[117], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH3_TXDATA_delay[117]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH3_TXDATA[118], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH3_TXDATA_delay[118]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH3_TXDATA[119], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH3_TXDATA_delay[119]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH3_TXDATA[120], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH3_TXDATA_delay[120]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH3_TXDATA[121], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH3_TXDATA_delay[121]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH3_TXDATA[122], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH3_TXDATA_delay[122]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH3_TXDATA[123], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH3_TXDATA_delay[123]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH3_TXDATA[124], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH3_TXDATA_delay[124]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH3_TXDATA[125], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH3_TXDATA_delay[125]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH3_TXDATA[126], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH3_TXDATA_delay[126]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH3_TXDATA[127], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH3_TXDATA_delay[127]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH3_TXDATA[85], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH3_TXDATA_delay[85]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH3_TXDATA[86], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH3_TXDATA_delay[86]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH3_TXDATA[87], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH3_TXDATA_delay[87]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH3_TXDATA[88], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH3_TXDATA_delay[88]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH3_TXDATA[89], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH3_TXDATA_delay[89]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH3_TXDATA[90], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH3_TXDATA_delay[90]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH3_TXDATA[91], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH3_TXDATA_delay[91]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH3_TXDATA[92], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH3_TXDATA_delay[92]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH3_TXDATA[93], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH3_TXDATA_delay[93]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH3_TXDATA[94], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH3_TXDATA_delay[94]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH3_TXDATA[95], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH3_TXDATA_delay[95]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH3_TXDATA[96], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH3_TXDATA_delay[96]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH3_TXDATA[97], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH3_TXDATA_delay[97]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH3_TXDATA[98], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH3_TXDATA_delay[98]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CH3_TXDATA[99], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH3_TXDATA_delay[99]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CTRLRSVDIN0[0], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CTRLRSVDIN0_delay[0]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CTRLRSVDIN0[10], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CTRLRSVDIN0_delay[10]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CTRLRSVDIN0[11], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CTRLRSVDIN0_delay[11]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CTRLRSVDIN0[12], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CTRLRSVDIN0_delay[12]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CTRLRSVDIN0[13], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CTRLRSVDIN0_delay[13]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CTRLRSVDIN0[14], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CTRLRSVDIN0_delay[14]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CTRLRSVDIN0[15], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CTRLRSVDIN0_delay[15]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CTRLRSVDIN0[1], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CTRLRSVDIN0_delay[1]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CTRLRSVDIN0[2], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CTRLRSVDIN0_delay[2]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CTRLRSVDIN0[3], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CTRLRSVDIN0_delay[3]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CTRLRSVDIN0[4], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CTRLRSVDIN0_delay[4]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CTRLRSVDIN0[5], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CTRLRSVDIN0_delay[5]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CTRLRSVDIN0[6], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CTRLRSVDIN0_delay[6]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CTRLRSVDIN0[7], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CTRLRSVDIN0_delay[7]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CTRLRSVDIN0[8], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CTRLRSVDIN0_delay[8]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, negedge CTRLRSVDIN0[9], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CTRLRSVDIN0_delay[9]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH0_TXDATA[100], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH0_TXDATA_delay[100]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH0_TXDATA[101], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH0_TXDATA_delay[101]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH0_TXDATA[102], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH0_TXDATA_delay[102]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH0_TXDATA[103], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH0_TXDATA_delay[103]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH0_TXDATA[104], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH0_TXDATA_delay[104]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH0_TXDATA[105], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH0_TXDATA_delay[105]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH0_TXDATA[106], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH0_TXDATA_delay[106]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH0_TXDATA[107], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH0_TXDATA_delay[107]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH0_TXDATA[108], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH0_TXDATA_delay[108]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH0_TXDATA[109], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH0_TXDATA_delay[109]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH0_TXDATA[110], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH0_TXDATA_delay[110]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH0_TXDATA[111], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH0_TXDATA_delay[111]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH0_TXDATA[112], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH0_TXDATA_delay[112]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH0_TXDATA[113], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH0_TXDATA_delay[113]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH0_TXDATA[114], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH0_TXDATA_delay[114]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH0_TXDATA[115], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH0_TXDATA_delay[115]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH0_TXDATA[116], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH0_TXDATA_delay[116]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH0_TXDATA[117], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH0_TXDATA_delay[117]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH0_TXDATA[118], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH0_TXDATA_delay[118]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH0_TXDATA[119], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH0_TXDATA_delay[119]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH0_TXDATA[120], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH0_TXDATA_delay[120]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH0_TXDATA[121], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH0_TXDATA_delay[121]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH0_TXDATA[122], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH0_TXDATA_delay[122]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH0_TXDATA[123], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH0_TXDATA_delay[123]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH0_TXDATA[124], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH0_TXDATA_delay[124]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH0_TXDATA[125], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH0_TXDATA_delay[125]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH0_TXDATA[126], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH0_TXDATA_delay[126]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH0_TXDATA[127], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH0_TXDATA_delay[127]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH0_TXDATA[85], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH0_TXDATA_delay[85]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH0_TXDATA[86], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH0_TXDATA_delay[86]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH0_TXDATA[87], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH0_TXDATA_delay[87]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH0_TXDATA[88], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH0_TXDATA_delay[88]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH0_TXDATA[89], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH0_TXDATA_delay[89]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH0_TXDATA[90], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH0_TXDATA_delay[90]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH0_TXDATA[91], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH0_TXDATA_delay[91]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH0_TXDATA[92], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH0_TXDATA_delay[92]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH0_TXDATA[93], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH0_TXDATA_delay[93]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH0_TXDATA[94], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH0_TXDATA_delay[94]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH0_TXDATA[95], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH0_TXDATA_delay[95]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH0_TXDATA[96], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH0_TXDATA_delay[96]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH0_TXDATA[97], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH0_TXDATA_delay[97]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH0_TXDATA[98], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH0_TXDATA_delay[98]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH0_TXDATA[99], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH0_TXDATA_delay[99]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH1_TXDATA[100], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH1_TXDATA_delay[100]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH1_TXDATA[101], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH1_TXDATA_delay[101]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH1_TXDATA[102], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH1_TXDATA_delay[102]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH1_TXDATA[103], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH1_TXDATA_delay[103]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH1_TXDATA[104], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH1_TXDATA_delay[104]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH1_TXDATA[105], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH1_TXDATA_delay[105]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH1_TXDATA[106], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH1_TXDATA_delay[106]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH1_TXDATA[107], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH1_TXDATA_delay[107]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH1_TXDATA[108], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH1_TXDATA_delay[108]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH1_TXDATA[109], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH1_TXDATA_delay[109]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH1_TXDATA[110], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH1_TXDATA_delay[110]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH1_TXDATA[111], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH1_TXDATA_delay[111]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH1_TXDATA[112], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH1_TXDATA_delay[112]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH1_TXDATA[113], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH1_TXDATA_delay[113]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH1_TXDATA[114], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH1_TXDATA_delay[114]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH1_TXDATA[115], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH1_TXDATA_delay[115]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH1_TXDATA[116], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH1_TXDATA_delay[116]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH1_TXDATA[117], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH1_TXDATA_delay[117]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH1_TXDATA[118], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH1_TXDATA_delay[118]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH1_TXDATA[119], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH1_TXDATA_delay[119]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH1_TXDATA[120], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH1_TXDATA_delay[120]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH1_TXDATA[121], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH1_TXDATA_delay[121]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH1_TXDATA[122], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH1_TXDATA_delay[122]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH1_TXDATA[123], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH1_TXDATA_delay[123]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH1_TXDATA[124], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH1_TXDATA_delay[124]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH1_TXDATA[125], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH1_TXDATA_delay[125]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH1_TXDATA[126], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH1_TXDATA_delay[126]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH1_TXDATA[127], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH1_TXDATA_delay[127]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH1_TXDATA[85], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH1_TXDATA_delay[85]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH1_TXDATA[86], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH1_TXDATA_delay[86]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH1_TXDATA[87], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH1_TXDATA_delay[87]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH1_TXDATA[88], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH1_TXDATA_delay[88]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH1_TXDATA[89], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH1_TXDATA_delay[89]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH1_TXDATA[90], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH1_TXDATA_delay[90]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH1_TXDATA[91], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH1_TXDATA_delay[91]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH1_TXDATA[92], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH1_TXDATA_delay[92]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH1_TXDATA[93], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH1_TXDATA_delay[93]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH1_TXDATA[94], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH1_TXDATA_delay[94]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH1_TXDATA[95], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH1_TXDATA_delay[95]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH1_TXDATA[96], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH1_TXDATA_delay[96]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH1_TXDATA[97], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH1_TXDATA_delay[97]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH1_TXDATA[98], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH1_TXDATA_delay[98]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH1_TXDATA[99], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH1_TXDATA_delay[99]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH2_TXDATA[100], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH2_TXDATA_delay[100]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH2_TXDATA[101], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH2_TXDATA_delay[101]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH2_TXDATA[102], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH2_TXDATA_delay[102]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH2_TXDATA[103], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH2_TXDATA_delay[103]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH2_TXDATA[104], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH2_TXDATA_delay[104]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH2_TXDATA[105], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH2_TXDATA_delay[105]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH2_TXDATA[106], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH2_TXDATA_delay[106]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH2_TXDATA[107], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH2_TXDATA_delay[107]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH2_TXDATA[108], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH2_TXDATA_delay[108]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH2_TXDATA[109], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH2_TXDATA_delay[109]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH2_TXDATA[110], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH2_TXDATA_delay[110]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH2_TXDATA[111], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH2_TXDATA_delay[111]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH2_TXDATA[112], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH2_TXDATA_delay[112]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH2_TXDATA[113], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH2_TXDATA_delay[113]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH2_TXDATA[114], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH2_TXDATA_delay[114]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH2_TXDATA[115], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH2_TXDATA_delay[115]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH2_TXDATA[116], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH2_TXDATA_delay[116]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH2_TXDATA[117], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH2_TXDATA_delay[117]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH2_TXDATA[118], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH2_TXDATA_delay[118]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH2_TXDATA[119], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH2_TXDATA_delay[119]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH2_TXDATA[120], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH2_TXDATA_delay[120]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH2_TXDATA[121], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH2_TXDATA_delay[121]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH2_TXDATA[122], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH2_TXDATA_delay[122]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH2_TXDATA[123], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH2_TXDATA_delay[123]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH2_TXDATA[124], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH2_TXDATA_delay[124]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH2_TXDATA[125], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH2_TXDATA_delay[125]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH2_TXDATA[126], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH2_TXDATA_delay[126]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH2_TXDATA[127], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH2_TXDATA_delay[127]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH2_TXDATA[85], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH2_TXDATA_delay[85]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH2_TXDATA[86], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH2_TXDATA_delay[86]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH2_TXDATA[87], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH2_TXDATA_delay[87]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH2_TXDATA[88], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH2_TXDATA_delay[88]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH2_TXDATA[89], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH2_TXDATA_delay[89]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH2_TXDATA[90], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH2_TXDATA_delay[90]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH2_TXDATA[91], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH2_TXDATA_delay[91]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH2_TXDATA[92], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH2_TXDATA_delay[92]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH2_TXDATA[93], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH2_TXDATA_delay[93]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH2_TXDATA[94], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH2_TXDATA_delay[94]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH2_TXDATA[95], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH2_TXDATA_delay[95]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH2_TXDATA[96], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH2_TXDATA_delay[96]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH2_TXDATA[97], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH2_TXDATA_delay[97]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH2_TXDATA[98], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH2_TXDATA_delay[98]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH2_TXDATA[99], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH2_TXDATA_delay[99]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH3_TXDATA[100], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH3_TXDATA_delay[100]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH3_TXDATA[101], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH3_TXDATA_delay[101]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH3_TXDATA[102], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH3_TXDATA_delay[102]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH3_TXDATA[103], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH3_TXDATA_delay[103]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH3_TXDATA[104], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH3_TXDATA_delay[104]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH3_TXDATA[105], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH3_TXDATA_delay[105]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH3_TXDATA[106], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH3_TXDATA_delay[106]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH3_TXDATA[107], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH3_TXDATA_delay[107]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH3_TXDATA[108], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH3_TXDATA_delay[108]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH3_TXDATA[109], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH3_TXDATA_delay[109]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH3_TXDATA[110], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH3_TXDATA_delay[110]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH3_TXDATA[111], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH3_TXDATA_delay[111]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH3_TXDATA[112], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH3_TXDATA_delay[112]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH3_TXDATA[113], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH3_TXDATA_delay[113]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH3_TXDATA[114], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH3_TXDATA_delay[114]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH3_TXDATA[115], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH3_TXDATA_delay[115]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH3_TXDATA[116], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH3_TXDATA_delay[116]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH3_TXDATA[117], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH3_TXDATA_delay[117]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH3_TXDATA[118], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH3_TXDATA_delay[118]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH3_TXDATA[119], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH3_TXDATA_delay[119]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH3_TXDATA[120], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH3_TXDATA_delay[120]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH3_TXDATA[121], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH3_TXDATA_delay[121]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH3_TXDATA[122], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH3_TXDATA_delay[122]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH3_TXDATA[123], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH3_TXDATA_delay[123]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH3_TXDATA[124], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH3_TXDATA_delay[124]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH3_TXDATA[125], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH3_TXDATA_delay[125]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH3_TXDATA[126], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH3_TXDATA_delay[126]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH3_TXDATA[127], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH3_TXDATA_delay[127]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH3_TXDATA[85], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH3_TXDATA_delay[85]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH3_TXDATA[86], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH3_TXDATA_delay[86]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH3_TXDATA[87], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH3_TXDATA_delay[87]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH3_TXDATA[88], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH3_TXDATA_delay[88]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH3_TXDATA[89], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH3_TXDATA_delay[89]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH3_TXDATA[90], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH3_TXDATA_delay[90]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH3_TXDATA[91], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH3_TXDATA_delay[91]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH3_TXDATA[92], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH3_TXDATA_delay[92]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH3_TXDATA[93], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH3_TXDATA_delay[93]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH3_TXDATA[94], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH3_TXDATA_delay[94]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH3_TXDATA[95], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH3_TXDATA_delay[95]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH3_TXDATA[96], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH3_TXDATA_delay[96]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH3_TXDATA[97], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH3_TXDATA_delay[97]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH3_TXDATA[98], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH3_TXDATA_delay[98]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CH3_TXDATA[99], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CH3_TXDATA_delay[99]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CTRLRSVDIN0[0], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CTRLRSVDIN0_delay[0]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CTRLRSVDIN0[10], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CTRLRSVDIN0_delay[10]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CTRLRSVDIN0[11], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CTRLRSVDIN0_delay[11]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CTRLRSVDIN0[12], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CTRLRSVDIN0_delay[12]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CTRLRSVDIN0[13], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CTRLRSVDIN0_delay[13]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CTRLRSVDIN0[14], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CTRLRSVDIN0_delay[14]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CTRLRSVDIN0[15], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CTRLRSVDIN0_delay[15]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CTRLRSVDIN0[1], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CTRLRSVDIN0_delay[1]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CTRLRSVDIN0[2], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CTRLRSVDIN0_delay[2]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CTRLRSVDIN0[3], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CTRLRSVDIN0_delay[3]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CTRLRSVDIN0[4], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CTRLRSVDIN0_delay[4]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CTRLRSVDIN0[5], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CTRLRSVDIN0_delay[5]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CTRLRSVDIN0[6], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CTRLRSVDIN0_delay[6]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CTRLRSVDIN0[7], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CTRLRSVDIN0_delay[7]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CTRLRSVDIN0[8], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CTRLRSVDIN0_delay[8]);
    $setuphold (posedge XPIPE_GT_PIPECLK_1, posedge CTRLRSVDIN0[9], 0:0:0, 0:0:0, notifier, , , XPIPE_GT_PIPECLK_1_delay, CTRLRSVDIN0_delay[9]);
    $width (negedge XPIPE_GT_PIPECLK, 0:0:0, 0, notifier);
    $width (negedge XPIPE_GT_PIPECLK_1, 0:0:0, 0, notifier);
    $width (posedge XPIPE_GT_PIPECLK, 0:0:0, 0, notifier);
    $width (posedge XPIPE_GT_PIPECLK_1, 0:0:0, 0, notifier);
`endif
    specparam PATHPULSE$ = 0;
  endspecify
`endif
endmodule

`endcelldefine
