///////////////////////////////////////////////////////////////////////////////
//  Copyright (c) 1995/2022 Xilinx, Inc.
//  All Right Reserved.
///////////////////////////////////////////////////////////////////////////////
//   ____  ____
//  /   /\/   /
// /___/  \  /     Vendor      : Xilinx
// \   \   \/      Version     : 2022.2
//  \   \          Description : Xilinx Unified Simulation Library Component
//  /   /                        GTF_CHANNEL
// /___/   /\      Filename    : GTF_CHANNEL.v
// \   \  /  \
//  \___\/\___\
//
///////////////////////////////////////////////////////////////////////////////
//  Revision:
//
//  End Revision:
///////////////////////////////////////////////////////////////////////////////

`timescale 1 ps / 1 ps

`celldefine

module GTF_CHANNEL #(
`ifdef XIL_TIMING
  parameter LOC = "UNPLACED",
`endif
  parameter [0:0] ACJTAG_DEBUG_MODE = 1'b0,
  parameter [0:0] ACJTAG_MODE = 1'b0,
  parameter [0:0] ACJTAG_RESET = 1'b0,
  parameter [15:0] ADAPT_CFG0 = 16'h9200,
  parameter [15:0] ADAPT_CFG1 = 16'h801C,
  parameter [15:0] ADAPT_CFG2 = 16'h0000,
  parameter [0:0] A_RXOSCALRESET = 1'b0,
  parameter [0:0] A_RXPROGDIVRESET = 1'b0,
  parameter [0:0] A_RXTERMINATION = 1'b1,
  parameter [4:0] A_TXDIFFCTRL = 5'b01100,
  parameter [0:0] A_TXPROGDIVRESET = 1'b0,
  parameter CBCC_DATA_SOURCE_SEL = "DECODED",
  parameter [0:0] CDR_SWAP_MODE_EN = 1'b0,
  parameter [0:0] CFOK_PWRSVE_EN = 1'b1,
  parameter [15:0] CH_HSPMUX = 16'h2424,
  parameter [15:0] CKCAL1_CFG_0 = 16'b1100000011000000,
  parameter [15:0] CKCAL1_CFG_1 = 16'b0101000011000000,
  parameter [15:0] CKCAL1_CFG_2 = 16'b0000000000000000,
  parameter [15:0] CKCAL1_CFG_3 = 16'b0000000000000000,
  parameter [15:0] CKCAL2_CFG_0 = 16'b1100000011000000,
  parameter [15:0] CKCAL2_CFG_1 = 16'b1000000011000000,
  parameter [15:0] CKCAL2_CFG_2 = 16'b0000000000000000,
  parameter [15:0] CKCAL2_CFG_3 = 16'b0000000000000000,
  parameter [15:0] CKCAL2_CFG_4 = 16'b0000000000000000,
  parameter [15:0] CPLL_CFG0 = 16'h01FA,
  parameter [15:0] CPLL_CFG1 = 16'h24A9,
  parameter [15:0] CPLL_CFG2 = 16'h6807,
  parameter [15:0] CPLL_CFG3 = 16'h0000,
  parameter integer CPLL_FBDIV = 4,
  parameter integer CPLL_FBDIV_45 = 4,
  parameter [15:0] CPLL_INIT_CFG0 = 16'h001E,
  parameter [15:0] CPLL_LOCK_CFG = 16'h01E8,
  parameter integer CPLL_REFCLK_DIV = 1,
  parameter [2:0] CTLE3_OCAP_EXT_CTRL = 3'b000,
  parameter [0:0] CTLE3_OCAP_EXT_EN = 1'b0,
  parameter [1:0] DDI_CTRL = 2'b00,
  parameter integer DDI_REALIGN_WAIT = 15,
  parameter [0:0] DELAY_ELEC = 1'b0,
  parameter [9:0] DMONITOR_CFG0 = 10'h000,
  parameter [7:0] DMONITOR_CFG1 = 8'h00,
  parameter [0:0] ES_CLK_PHASE_SEL = 1'b0,
  parameter [5:0] ES_CONTROL = 6'b000000,
  parameter ES_ERRDET_EN = "FALSE",
  parameter ES_EYE_SCAN_EN = "FALSE",
  parameter [11:0] ES_HORZ_OFFSET = 12'h800,
  parameter [4:0] ES_PRESCALE = 5'b00000,
  parameter [15:0] ES_QUALIFIER0 = 16'h0000,
  parameter [15:0] ES_QUALIFIER1 = 16'h0000,
  parameter [15:0] ES_QUALIFIER2 = 16'h0000,
  parameter [15:0] ES_QUALIFIER3 = 16'h0000,
  parameter [15:0] ES_QUALIFIER4 = 16'h0000,
  parameter [15:0] ES_QUALIFIER5 = 16'h0000,
  parameter [15:0] ES_QUALIFIER6 = 16'h0000,
  parameter [15:0] ES_QUALIFIER7 = 16'h0000,
  parameter [15:0] ES_QUALIFIER8 = 16'h0000,
  parameter [15:0] ES_QUALIFIER9 = 16'h0000,
  parameter [15:0] ES_QUAL_MASK0 = 16'h0000,
  parameter [15:0] ES_QUAL_MASK1 = 16'h0000,
  parameter [15:0] ES_QUAL_MASK2 = 16'h0000,
  parameter [15:0] ES_QUAL_MASK3 = 16'h0000,
  parameter [15:0] ES_QUAL_MASK4 = 16'h0000,
  parameter [15:0] ES_QUAL_MASK5 = 16'h0000,
  parameter [15:0] ES_QUAL_MASK6 = 16'h0000,
  parameter [15:0] ES_QUAL_MASK7 = 16'h0000,
  parameter [15:0] ES_QUAL_MASK8 = 16'h0000,
  parameter [15:0] ES_QUAL_MASK9 = 16'h0000,
  parameter [15:0] ES_SDATA_MASK0 = 16'h0000,
  parameter [15:0] ES_SDATA_MASK1 = 16'h0000,
  parameter [15:0] ES_SDATA_MASK2 = 16'h0000,
  parameter [15:0] ES_SDATA_MASK3 = 16'h0000,
  parameter [15:0] ES_SDATA_MASK4 = 16'h0000,
  parameter [15:0] ES_SDATA_MASK5 = 16'h0000,
  parameter [15:0] ES_SDATA_MASK6 = 16'h0000,
  parameter [15:0] ES_SDATA_MASK7 = 16'h0000,
  parameter [15:0] ES_SDATA_MASK8 = 16'h0000,
  parameter [15:0] ES_SDATA_MASK9 = 16'h0000,
  parameter integer EYESCAN_VP_RANGE = 0,
  parameter [0:0] EYE_SCAN_SWAP_EN = 1'b0,
  parameter [3:0] FTS_DESKEW_SEQ_ENABLE = 4'b1111,
  parameter [3:0] FTS_LANE_DESKEW_CFG = 4'b1111,
  parameter FTS_LANE_DESKEW_EN = "FALSE",
  parameter [4:0] GEARBOX_MODE = 5'b00000,
  parameter [0:0] ISCAN_CK_PH_SEL2 = 1'b0,
  parameter [0:0] LOCAL_MASTER = 1'b0,
  parameter integer LPBK_BIAS_CTRL = 4,
  parameter [0:0] LPBK_EN_RCAL_B = 1'b0,
  parameter [3:0] LPBK_EXT_RCAL = 4'b0000,
  parameter integer LPBK_IND_CTRL0 = 5,
  parameter integer LPBK_IND_CTRL1 = 5,
  parameter integer LPBK_IND_CTRL2 = 5,
  parameter integer LPBK_RG_CTRL = 2,
  parameter [15:0] MAC_CFG0 = 16'h0000,
  parameter [15:0] MAC_CFG1 = 16'h0000,
  parameter [15:0] MAC_CFG10 = 16'h00BB,
  parameter [15:0] MAC_CFG11 = 16'h0040,
  parameter [15:0] MAC_CFG12 = 16'h2580,
  parameter [15:0] MAC_CFG13 = 16'h0001,
  parameter [15:0] MAC_CFG14 = 16'h0000,
  parameter [15:0] MAC_CFG15 = 16'h0000,
  parameter [15:0] MAC_CFG2 = 16'h0000,
  parameter [15:0] MAC_CFG3 = 16'h0000,
  parameter [15:0] MAC_CFG4 = 16'h0000,
  parameter [15:0] MAC_CFG5 = 16'h0000,
  parameter [15:0] MAC_CFG6 = 16'h0000,
  parameter [15:0] MAC_CFG7 = 16'h0000,
  parameter [15:0] MAC_CFG8 = 16'h0000,
  parameter [15:0] MAC_CFG9 = 16'h0C03,
  parameter [15:0] PCS_RSVD0 = 16'h0000,
  parameter [11:0] PD_TRANS_TIME_FROM_P2 = 12'h03C,
  parameter [7:0] PD_TRANS_TIME_NONE_P2 = 8'h19,
  parameter [7:0] PD_TRANS_TIME_TO_P2 = 8'h64,
  parameter integer PREIQ_FREQ_BST = 0,
  parameter [15:0] RAW_MAC_CFG = 16'h0000,
  parameter [0:0] RCLK_SIPO_DLY_ENB = 1'b0,
  parameter [0:0] RCLK_SIPO_INV_EN = 1'b0,
  parameter [15:0] RCO_NEW_MAC_CFG0 = 16'h0000,
  parameter [15:0] RCO_NEW_MAC_CFG1 = 16'h0000,
  parameter [15:0] RCO_NEW_MAC_CFG2 = 16'h0000,
  parameter [15:0] RCO_NEW_MAC_CFG3 = 16'h0000,
  parameter [15:0] RCO_NEW_RAW_CFG0 = 16'h0000,
  parameter [15:0] RCO_NEW_RAW_CFG1 = 16'h2020,
  parameter [15:0] RCO_NEW_RAW_CFG2 = 16'h0000,
  parameter [15:0] RCO_NEW_RAW_CFG3 = 16'h0000,
  parameter [2:0] RTX_BUF_CML_CTRL = 3'b010,
  parameter [1:0] RTX_BUF_TERM_CTRL = 2'b00,
  parameter [4:0] RXBUFRESET_TIME = 5'b00001,
  parameter RXBUF_EN = "TRUE",
  parameter [4:0] RXCDRFREQRESET_TIME = 5'b10000,
  parameter [4:0] RXCDRPHRESET_TIME = 5'b00001,
  parameter [15:0] RXCDR_CFG0 = 16'h0003,
  parameter [15:0] RXCDR_CFG1 = 16'h0000,
  parameter [15:0] RXCDR_CFG2 = 16'h0164,
  parameter [15:0] RXCDR_CFG3 = 16'h0024,
  parameter [15:0] RXCDR_CFG4 = 16'h5CF6,
  parameter [15:0] RXCDR_CFG5 = 16'hB46B,
  parameter [0:0] RXCDR_FR_RESET_ON_EIDLE = 1'b0,
  parameter [0:0] RXCDR_HOLD_DURING_EIDLE = 1'b0,
  parameter [15:0] RXCDR_LOCK_CFG0 = 16'h0040,
  parameter [15:0] RXCDR_LOCK_CFG1 = 16'h8000,
  parameter [15:0] RXCDR_LOCK_CFG2 = 16'h0000,
  parameter [15:0] RXCDR_LOCK_CFG3 = 16'h0000,
  parameter [15:0] RXCDR_LOCK_CFG4 = 16'h0000,
  parameter [0:0] RXCDR_PH_RESET_ON_EIDLE = 1'b0,
  parameter [15:0] RXCFOK_CFG0 = 16'h0000,
  parameter [15:0] RXCFOK_CFG1 = 16'h0002,
  parameter [15:0] RXCFOK_CFG2 = 16'h002D,
  parameter [15:0] RXCKCAL1_IQ_LOOP_RST_CFG = 16'h0000,
  parameter [15:0] RXCKCAL1_I_LOOP_RST_CFG = 16'h0000,
  parameter [15:0] RXCKCAL1_Q_LOOP_RST_CFG = 16'h0000,
  parameter [15:0] RXCKCAL2_DX_LOOP_RST_CFG = 16'h0000,
  parameter [15:0] RXCKCAL2_D_LOOP_RST_CFG = 16'h0000,
  parameter [15:0] RXCKCAL2_S_LOOP_RST_CFG = 16'h0000,
  parameter [15:0] RXCKCAL2_X_LOOP_RST_CFG = 16'h0000,
  parameter [6:0] RXDFELPMRESET_TIME = 7'b0001111,
  parameter [15:0] RXDFELPM_KL_CFG0 = 16'h0000,
  parameter [15:0] RXDFELPM_KL_CFG1 = 16'h0022,
  parameter [15:0] RXDFELPM_KL_CFG2 = 16'h0100,
  parameter [15:0] RXDFE_CFG0 = 16'h4000,
  parameter [15:0] RXDFE_CFG1 = 16'h0000,
  parameter [15:0] RXDFE_GC_CFG0 = 16'h0000,
  parameter [15:0] RXDFE_GC_CFG1 = 16'h0000,
  parameter [15:0] RXDFE_GC_CFG2 = 16'h0000,
  parameter [15:0] RXDFE_H2_CFG0 = 16'h0000,
  parameter [15:0] RXDFE_H2_CFG1 = 16'h0002,
  parameter [15:0] RXDFE_H3_CFG0 = 16'h0000,
  parameter [15:0] RXDFE_H3_CFG1 = 16'h0002,
  parameter [15:0] RXDFE_H4_CFG0 = 16'h0000,
  parameter [15:0] RXDFE_H4_CFG1 = 16'h0003,
  parameter [15:0] RXDFE_H5_CFG0 = 16'h0000,
  parameter [15:0] RXDFE_H5_CFG1 = 16'h0002,
  parameter [15:0] RXDFE_H6_CFG0 = 16'h0000,
  parameter [15:0] RXDFE_H6_CFG1 = 16'h0002,
  parameter [15:0] RXDFE_H7_CFG0 = 16'h0000,
  parameter [15:0] RXDFE_H7_CFG1 = 16'h0002,
  parameter [15:0] RXDFE_H8_CFG0 = 16'h0000,
  parameter [15:0] RXDFE_H8_CFG1 = 16'h0002,
  parameter [15:0] RXDFE_H9_CFG0 = 16'h0000,
  parameter [15:0] RXDFE_H9_CFG1 = 16'h0002,
  parameter [15:0] RXDFE_HA_CFG0 = 16'h0000,
  parameter [15:0] RXDFE_HA_CFG1 = 16'h0002,
  parameter [15:0] RXDFE_HB_CFG0 = 16'h0000,
  parameter [15:0] RXDFE_HB_CFG1 = 16'h0002,
  parameter [15:0] RXDFE_HC_CFG0 = 16'h0000,
  parameter [15:0] RXDFE_HC_CFG1 = 16'h0002,
  parameter [15:0] RXDFE_HD_CFG0 = 16'h0000,
  parameter [15:0] RXDFE_HD_CFG1 = 16'h0002,
  parameter [15:0] RXDFE_HE_CFG0 = 16'h0000,
  parameter [15:0] RXDFE_HE_CFG1 = 16'h0002,
  parameter [15:0] RXDFE_HF_CFG0 = 16'h0000,
  parameter [15:0] RXDFE_HF_CFG1 = 16'h0002,
  parameter [15:0] RXDFE_KH_CFG0 = 16'h0000,
  parameter [15:0] RXDFE_KH_CFG1 = 16'h0000,
  parameter [15:0] RXDFE_KH_CFG2 = 16'h0000,
  parameter [15:0] RXDFE_KH_CFG3 = 16'h2000,
  parameter [15:0] RXDFE_OS_CFG0 = 16'h0000,
  parameter [15:0] RXDFE_OS_CFG1 = 16'h0000,
  parameter [15:0] RXDFE_UT_CFG0 = 16'h0000,
  parameter [15:0] RXDFE_UT_CFG1 = 16'h0002,
  parameter [15:0] RXDFE_UT_CFG2 = 16'h0000,
  parameter [15:0] RXDFE_VP_CFG0 = 16'h0000,
  parameter [15:0] RXDFE_VP_CFG1 = 16'h0022,
  parameter [15:0] RXDLY_CFG = 16'h0010,
  parameter [15:0] RXDLY_LCFG = 16'h0030,
  parameter [15:0] RXDLY_RAW_CFG = 16'h0010,
  parameter [15:0] RXDLY_RAW_LCFG = 16'h0000,
  parameter RXELECIDLE_CFG = "SIGCFG_4",
  parameter integer RXGBOX_FIFO_INIT_RD_ADDR = 4,
  parameter RXGEARBOX_EN = "FALSE",
  parameter [4:0] RXISCANRESET_TIME = 5'b00001,
  parameter [15:0] RXLPM_CFG = 16'h0000,
  parameter [15:0] RXLPM_GC_CFG = 16'h1000,
  parameter [15:0] RXLPM_KH_CFG0 = 16'h0000,
  parameter [15:0] RXLPM_KH_CFG1 = 16'h0002,
  parameter [15:0] RXLPM_OS_CFG0 = 16'h0000,
  parameter [15:0] RXLPM_OS_CFG1 = 16'h0000,
  parameter [4:0] RXOSCALRESET_TIME = 5'b00011,
  parameter integer RXOUT_DIV = 4,
  parameter [4:0] RXPCSRESET_TIME = 5'b00001,
  parameter [15:0] RXPHBEACON_CFG = 16'h0000,
  parameter [15:0] RXPHBEACON_RAW_CFG = 16'h0000,
  parameter [15:0] RXPHDLY_CFG = 16'h2020,
  parameter [15:0] RXPHSAMP_CFG = 16'h2100,
  parameter [15:0] RXPHSAMP_RAW_CFG = 16'h2100,
  parameter [15:0] RXPHSLIP_CFG = 16'h9933,
  parameter [15:0] RXPHSLIP_RAW_CFG = 16'h9933,
  parameter [4:0] RXPH_MONITOR_SEL = 5'b00000,
  parameter [15:0] RXPI_CFG0 = 16'h0102,
  parameter [15:0] RXPI_CFG1 = 16'b0000000001010100,
  parameter RXPMACLK_SEL = "DATA",
  parameter [4:0] RXPMARESET_TIME = 5'b00001,
  parameter [0:0] RXPRBS_ERR_LOOPBACK = 1'b0,
  parameter integer RXPRBS_LINKACQ_CNT = 15,
  parameter [0:0] RXREFCLKDIV2_SEL = 1'b0,
  parameter integer RXSLIDE_AUTO_WAIT = 7,
  parameter RXSLIDE_MODE = "OFF",
  parameter [0:0] RXSYNC_MULTILANE = 1'b0,
  parameter [0:0] RXSYNC_OVRD = 1'b0,
  parameter [0:0] RXSYNC_SKIP_DA = 1'b0,
  parameter [0:0] RX_AFE_CM_EN = 1'b0,
  parameter [15:0] RX_BIAS_CFG0 = 16'h12B0,
  parameter [0:0] RX_CAPFF_SARC_ENB = 1'b0,
  parameter integer RX_CLK25_DIV = 8,
  parameter [0:0] RX_CLKMUX_EN = 1'b1,
  parameter [4:0] RX_CLK_SLIP_OVRD = 5'b00000,
  parameter [3:0] RX_CM_BUF_CFG = 4'b1010,
  parameter [0:0] RX_CM_BUF_PD = 1'b0,
  parameter integer RX_CM_SEL = 2,
  parameter integer RX_CM_TRIM = 12,
  parameter [0:0] RX_CTLE_PWR_SAVING = 1'b0,
  parameter [3:0] RX_CTLE_RES_CTRL = 4'b0000,
  parameter integer RX_DATA_WIDTH = 20,
  parameter [5:0] RX_DDI_SEL = 6'b000000,
  parameter [2:0] RX_DEGEN_CTRL = 3'b100,
  parameter integer RX_DFELPM_CFG0 = 10,
  parameter [0:0] RX_DFELPM_CFG1 = 1'b1,
  parameter [0:0] RX_DFELPM_KLKH_AGC_STUP_EN = 1'b1,
  parameter integer RX_DFE_AGC_CFG1 = 4,
  parameter integer RX_DFE_KL_LPM_KH_CFG0 = 1,
  parameter integer RX_DFE_KL_LPM_KH_CFG1 = 2,
  parameter [1:0] RX_DFE_KL_LPM_KL_CFG0 = 2'b01,
  parameter integer RX_DFE_KL_LPM_KL_CFG1 = 4,
  parameter [0:0] RX_DFE_LPM_HOLD_DURING_EIDLE = 1'b0,
  parameter RX_DISPERR_SEQ_MATCH = "TRUE",
  parameter [4:0] RX_DIVRESET_TIME = 5'b00001,
  parameter [0:0] RX_EN_CTLE_RCAL_B = 1'b0,
  parameter integer RX_EN_SUM_RCAL_B = 0,
  parameter [6:0] RX_EYESCAN_VS_CODE = 7'b0000000,
  parameter [0:0] RX_EYESCAN_VS_NEG_DIR = 1'b0,
  parameter [1:0] RX_EYESCAN_VS_RANGE = 2'b10,
  parameter [0:0] RX_EYESCAN_VS_UT_SIGN = 1'b0,
  parameter [0:0] RX_I2V_FILTER_EN = 1'b1,
  parameter integer RX_INT_DATAWIDTH = 1,
  parameter [0:0] RX_PMA_POWER_SAVE = 1'b0,
  parameter [15:0] RX_PMA_RSV0 = 16'h002F,
  parameter real RX_PROGDIV_CFG = 0.0,
  parameter [15:0] RX_PROGDIV_RATE = 16'h0001,
  parameter [3:0] RX_RESLOAD_CTRL = 4'b0000,
  parameter [0:0] RX_RESLOAD_OVRD = 1'b0,
  parameter [2:0] RX_SAMPLE_PERIOD = 3'b101,
  parameter integer RX_SIG_VALID_DLY = 11,
  parameter integer RX_SUM_DEGEN_AVTT_OVERITE = 0,
  parameter [0:0] RX_SUM_DFETAPREP_EN = 1'b0,
  parameter [3:0] RX_SUM_IREF_TUNE = 4'b0000,
  parameter integer RX_SUM_PWR_SAVING = 0,
  parameter [3:0] RX_SUM_RES_CTRL = 4'b0000,
  parameter [3:0] RX_SUM_VCMTUNE = 4'b0011,
  parameter [0:0] RX_SUM_VCM_BIAS_TUNE_EN = 1'b1,
  parameter [0:0] RX_SUM_VCM_OVWR = 1'b0,
  parameter [2:0] RX_SUM_VREF_TUNE = 3'b100,
  parameter [1:0] RX_TUNE_AFE_OS = 2'b00,
  parameter [2:0] RX_VREG_CTRL = 3'b010,
  parameter [0:0] RX_VREG_PDB = 1'b1,
  parameter [1:0] RX_WIDEMODE_CDR = 2'b01,
  parameter [1:0] RX_WIDEMODE_CDR_GEN3 = 2'b01,
  parameter [1:0] RX_WIDEMODE_CDR_GEN4 = 2'b01,
  parameter RX_XCLK_SEL = "RXDES",
  parameter [0:0] RX_XMODE_SEL = 1'b0,
  parameter [0:0] SAMPLE_CLK_PHASE = 1'b0,
  parameter SATA_CPLL_CFG = "VCO_3000MHZ",
  parameter SIM_MODE = "FAST",
  parameter SIM_RESET_SPEEDUP = "TRUE",
  parameter SIM_TX_EIDLE_DRIVE_LEVEL = "Z",
  parameter [0:0] SRSTMODE = 1'b0,
  parameter [1:0] TAPDLY_SET_TX = 2'h0,
  parameter [15:0] TCO_NEW_CFG0 = 16'h0000,
  parameter [15:0] TCO_NEW_CFG1 = 16'h0000,
  parameter [15:0] TCO_NEW_CFG2 = 16'h0000,
  parameter [15:0] TCO_NEW_CFG3 = 16'h0000,
  parameter [15:0] TCO_RSVD1 = 16'h0000,
  parameter [15:0] TCO_RSVD2 = 16'h0000,
  parameter [14:0] TERM_RCAL_CFG = 15'b100001000010000,
  parameter [2:0] TERM_RCAL_OVRD = 3'b000,
  parameter [7:0] TRANS_TIME_RATE = 8'h0E,
  parameter [7:0] TST_RSV0 = 8'h00,
  parameter [7:0] TST_RSV1 = 8'h00,
  parameter TXBUF_EN = "TRUE",
  parameter [15:0] TXDLY_CFG = 16'h0010,
  parameter [15:0] TXDLY_LCFG = 16'h0030,
  parameter integer TXDRV_FREQBAND = 0,
  parameter [15:0] TXFE_CFG0 = 16'h0000,
  parameter [15:0] TXFE_CFG1 = 16'h0000,
  parameter [15:0] TXFE_CFG2 = 16'h0000,
  parameter [15:0] TXFE_CFG3 = 16'h0000,
  parameter TXFIFO_ADDR_CFG = "LOW",
  parameter integer TXGBOX_FIFO_INIT_RD_ADDR = 4,
  parameter integer TXOUT_DIV = 4,
  parameter [4:0] TXPCSRESET_TIME = 5'b00001,
  parameter [15:0] TXPHDLY_CFG0 = 16'h6020,
  parameter [15:0] TXPHDLY_CFG1 = 16'h0002,
  parameter [15:0] TXPH_CFG = 16'h0103,
  parameter [15:0] TXPH_CFG2 = 16'h0000,
  parameter [4:0] TXPH_MONITOR_SEL = 5'b00000,
  parameter [15:0] TXPI_CFG0 = 16'h0100,
  parameter [15:0] TXPI_CFG1 = 16'h0000,
  parameter [0:0] TXPI_GRAY_SEL = 1'b0,
  parameter [0:0] TXPI_INVSTROBE_SEL = 1'b0,
  parameter [0:0] TXPI_PPM = 1'b0,
  parameter [7:0] TXPI_PPM_CFG = 8'b00000000,
  parameter [2:0] TXPI_SYNFREQ_PPM = 3'b000,
  parameter [4:0] TXPMARESET_TIME = 5'b00001,
  parameter [0:0] TXREFCLKDIV2_SEL = 1'b0,
  parameter integer TXSWBST_BST = 1,
  parameter integer TXSWBST_EN = 0,
  parameter integer TXSWBST_MAG = 6,
  parameter [0:0] TXSYNC_MULTILANE = 1'b0,
  parameter [0:0] TXSYNC_OVRD = 1'b0,
  parameter [0:0] TXSYNC_SKIP_DA = 1'b0,
  parameter integer TX_CLK25_DIV = 8,
  parameter [0:0] TX_CLKMUX_EN = 1'b1,
  parameter integer TX_DATA_WIDTH = 20,
  parameter [15:0] TX_DCC_LOOP_RST_CFG = 16'h0000,
  parameter [4:0] TX_DIVRESET_TIME = 5'b00001,
  parameter [2:0] TX_EIDLE_ASSERT_DELAY = 3'b110,
  parameter [2:0] TX_EIDLE_DEASSERT_DELAY = 3'b100,
  parameter [0:0] TX_FABINT_USRCLK_FLOP = 1'b0,
  parameter [0:0] TX_FIFO_BYP_EN = 1'b0,
  parameter [0:0] TX_IDLE_DATA_ZERO = 1'b0,
  parameter integer TX_INT_DATAWIDTH = 0,
  parameter TX_LOOPBACK_DRIVE_HIZ = "FALSE",
  parameter [0:0] TX_MAINCURSOR_SEL = 1'b0,
  parameter [15:0] TX_PHICAL_CFG0 = 16'h0000,
  parameter [15:0] TX_PHICAL_CFG1 = 16'h003F,
  parameter integer TX_PI_BIASSET = 0,
  parameter [0:0] TX_PMADATA_OPT = 1'b0,
  parameter [0:0] TX_PMA_POWER_SAVE = 1'b0,
  parameter [15:0] TX_PMA_RSV0 = 16'h0000,
  parameter [15:0] TX_PMA_RSV1 = 16'h0000,
  parameter TX_PROGCLK_SEL = "POSTPI",
  parameter real TX_PROGDIV_CFG = 0.0,
  parameter [15:0] TX_PROGDIV_RATE = 16'h0001,
  parameter [2:0] TX_SAMPLE_PERIOD = 3'b101,
  parameter [1:0] TX_SW_MEAS = 2'b00,
  parameter [2:0] TX_VREG_CTRL = 3'b000,
  parameter [0:0] TX_VREG_PDB = 1'b0,
  parameter [1:0] TX_VREG_VREFSEL = 2'b00,
  parameter TX_XCLK_SEL = "TXOUT",
  parameter [0:0] USE_PCS_CLK_PHASE_SEL = 1'b0,
  parameter [0:0] USE_RAW_ELEC = 1'b0,
  parameter [0:0] Y_ALL_MODE = 1'b0
)(
  output CPLLFBCLKLOST,
  output CPLLLOCK,
  output CPLLREFCLKLOST,
  output [15:0] DMONITOROUT,
  output DMONITOROUTCLK,
  output [15:0] DRPDO,
  output DRPRDY,
  output EYESCANDATAERROR,
  output GTFTXN,
  output GTFTXP,
  output GTPOWERGOOD,
  output GTREFCLKMONITOR,
  output [15:0] PCSRSVDOUT,
  output [15:0] PINRSRVDAS,
  output RESETEXCEPTION,
  output [63:0] RXAXISTDATA,
  output RXAXISTERR,
  output [7:0] RXAXISTLAST,
  output [7:0] RXAXISTPRE,
  output [1:0] RXAXISTSOF,
  output [4:0] RXAXISTTERM,
  output RXAXISTVALID,
  output RXBITSLIP,
  output RXCDRLOCK,
  output RXCDRPHDONE,
  output RXCKCALDONE,
  output RXDLYSRESETDONE,
  output RXELECIDLE,
  output RXGBSEQSTART,
  output [7:0] RXMONITOROUT,
  output RXOSINTDONE,
  output RXOSINTSTARTED,
  output RXOSINTSTROBEDONE,
  output RXOSINTSTROBESTARTED,
  output RXOUTCLK,
  output RXOUTCLKFABRIC,
  output RXOUTCLKPCS,
  output RXPHALIGNDONE,
  output RXPHALIGNERR,
  output RXPMARESETDONE,
  output RXPRBSERR,
  output RXPRBSLOCKED,
  output RXPRGDIVRESETDONE,
  output RXPTPSOP,
  output RXPTPSOPPOS,
  output [39:0] RXRAWDATA,
  output RXRECCLKOUT,
  output RXRESETDONE,
  output RXSLIPDONE,
  output RXSLIPOUTCLKRDY,
  output RXSLIPPMARDY,
  output RXSYNCDONE,
  output RXSYNCOUT,
  output STATRXBADCODE,
  output STATRXBADFCS,
  output STATRXBADPREAMBLE,
  output STATRXBADSFD,
  output STATRXBLOCKLOCK,
  output STATRXBROADCAST,
  output [3:0] STATRXBYTES,
  output STATRXFCSERR,
  output STATRXFRAMINGERR,
  output STATRXGOTSIGNALOS,
  output STATRXHIBER,
  output STATRXINRANGEERR,
  output STATRXINTERNALLOCALFAULT,
  output STATRXLOCALFAULT,
  output STATRXMULTICAST,
  output [8:0] STATRXPAUSEQUANTA,
  output [8:0] STATRXPAUSEREQ,
  output [8:0] STATRXPAUSEVALID,
  output STATRXPKT,
  output STATRXPKTERR,
  output STATRXRECEIVEDLOCALFAULT,
  output STATRXREMOTEFAULT,
  output STATRXSTATUS,
  output STATRXSTOMPEDFCS,
  output STATRXTESTPATTERNMISMATCH,
  output STATRXTRUNCATED,
  output STATRXUNICAST,
  output STATRXVALIDCTRLCODE,
  output STATRXVLAN,
  output STATTXBADFCS,
  output STATTXBROADCAST,
  output [3:0] STATTXBYTES,
  output STATTXFCSERR,
  output STATTXMULTICAST,
  output [8:0] STATTXPAUSEVALID,
  output STATTXPKT,
  output STATTXPKTERR,
  output STATTXUNICAST,
  output STATTXVLAN,
  output TXAXISTREADY,
  output TXDCCDONE,
  output TXDLYSRESETDONE,
  output TXGBSEQSTART,
  output TXOUTCLK,
  output TXOUTCLKFABRIC,
  output TXOUTCLKPCS,
  output TXPHALIGNDONE,
  output TXPHINITDONE,
  output TXPMARESETDONE,
  output TXPRGDIVRESETDONE,
  output TXPTPSOP,
  output TXPTPSOPPOS,
  output TXRESETDONE,
  output TXSYNCDONE,
  output TXSYNCOUT,
  output TXUNFOUT,

  input CDRSTEPDIR,
  input CDRSTEPSQ,
  input CDRSTEPSX,
  input CFGRESET,
  input CLKRSVD0,
  input CLKRSVD1,
  input CPLLFREQLOCK,
  input CPLLLOCKDETCLK,
  input CPLLLOCKEN,
  input CPLLPD,
  input [2:0] CPLLREFCLKSEL,
  input CPLLRESET,
  input [8:0] CTLRXPAUSEACK,
  input [8:0] CTLTXPAUSEREQ,
  input CTLTXRESENDPAUSE,
  input CTLTXSENDIDLE,
  input CTLTXSENDLFI,
  input CTLTXSENDRFI,
  input DMONFIFORESET,
  input DMONITORCLK,
  input [9:0] DRPADDR,
  input DRPCLK,
  input [15:0] DRPDI,
  input DRPEN,
  input DRPRST,
  input DRPWE,
  input EYESCANRESET,
  input EYESCANTRIGGER,
  input FREQOS,
  input GTFRXN,
  input GTFRXP,
  input GTGREFCLK,
  input GTNORTHREFCLK0,
  input GTNORTHREFCLK1,
  input GTREFCLK0,
  input GTREFCLK1,
  input [15:0] GTRSVD,
  input GTRXRESET,
  input GTRXRESETSEL,
  input GTSOUTHREFCLK0,
  input GTSOUTHREFCLK1,
  input GTTXRESET,
  input GTTXRESETSEL,
  input INCPCTRL,
  input [2:0] LOOPBACK,
  input [15:0] PCSRSVDIN,
  input QPLL0CLK,
  input QPLL0FREQLOCK,
  input QPLL0REFCLK,
  input QPLL1CLK,
  input QPLL1FREQLOCK,
  input QPLL1REFCLK,
  input RESETOVRD,
  input RXAFECFOKEN,
  input RXCDRFREQRESET,
  input RXCDRHOLD,
  input RXCDROVRDEN,
  input RXCDRRESET,
  input RXCKCALRESET,
  input [6:0] RXCKCALSTART,
  input RXDFEAGCHOLD,
  input RXDFEAGCOVRDEN,
  input [3:0] RXDFECFOKFCNUM,
  input RXDFECFOKFEN,
  input RXDFECFOKFPULSE,
  input RXDFECFOKHOLD,
  input RXDFECFOKOVREN,
  input RXDFEKHHOLD,
  input RXDFEKHOVRDEN,
  input RXDFELFHOLD,
  input RXDFELFOVRDEN,
  input RXDFELPMRESET,
  input RXDFETAP10HOLD,
  input RXDFETAP10OVRDEN,
  input RXDFETAP11HOLD,
  input RXDFETAP11OVRDEN,
  input RXDFETAP12HOLD,
  input RXDFETAP12OVRDEN,
  input RXDFETAP13HOLD,
  input RXDFETAP13OVRDEN,
  input RXDFETAP14HOLD,
  input RXDFETAP14OVRDEN,
  input RXDFETAP15HOLD,
  input RXDFETAP15OVRDEN,
  input RXDFETAP2HOLD,
  input RXDFETAP2OVRDEN,
  input RXDFETAP3HOLD,
  input RXDFETAP3OVRDEN,
  input RXDFETAP4HOLD,
  input RXDFETAP4OVRDEN,
  input RXDFETAP5HOLD,
  input RXDFETAP5OVRDEN,
  input RXDFETAP6HOLD,
  input RXDFETAP6OVRDEN,
  input RXDFETAP7HOLD,
  input RXDFETAP7OVRDEN,
  input RXDFETAP8HOLD,
  input RXDFETAP8OVRDEN,
  input RXDFETAP9HOLD,
  input RXDFETAP9OVRDEN,
  input RXDFEUTHOLD,
  input RXDFEUTOVRDEN,
  input RXDFEVPHOLD,
  input RXDFEVPOVRDEN,
  input RXDFEXYDEN,
  input RXDLYBYPASS,
  input RXDLYEN,
  input RXDLYOVRDEN,
  input RXDLYSRESET,
  input [1:0] RXELECIDLEMODE,
  input RXLPMEN,
  input RXLPMGCHOLD,
  input RXLPMGCOVRDEN,
  input RXLPMHFHOLD,
  input RXLPMHFOVRDEN,
  input RXLPMLFHOLD,
  input RXLPMLFKLOVRDEN,
  input RXLPMOSHOLD,
  input RXLPMOSOVRDEN,
  input [1:0] RXMONITORSEL,
  input RXOSCALRESET,
  input RXOSHOLD,
  input RXOSOVRDEN,
  input [2:0] RXOUTCLKSEL,
  input RXPCSRESET,
  input [1:0] RXPD,
  input RXPHALIGN,
  input RXPHALIGNEN,
  input RXPHDLYPD,
  input RXPHDLYRESET,
  input [1:0] RXPLLCLKSEL,
  input RXPMARESET,
  input RXPOLARITY,
  input RXPRBSCNTRESET,
  input [3:0] RXPRBSSEL,
  input RXPROGDIVRESET,
  input RXSLIPOUTCLK,
  input RXSLIPPMA,
  input RXSYNCALLIN,
  input RXSYNCIN,
  input RXSYNCMODE,
  input [1:0] RXSYSCLKSEL,
  input RXTERMINATION,
  input RXUSERRDY,
  input RXUSRCLK,
  input RXUSRCLK2,
  input [19:0] TSTIN,
  input [63:0] TXAXISTDATA,
  input TXAXISTERR,
  input [7:0] TXAXISTLAST,
  input TXAXISTPOISON,
  input [7:0] TXAXISTPRE,
  input [1:0] TXAXISTSOF,
  input [4:0] TXAXISTTERM,
  input TXAXISTVALID,
  input TXDCCFORCESTART,
  input TXDCCRESET,
  input [4:0] TXDIFFCTRL,
  input TXDLYBYPASS,
  input TXDLYEN,
  input TXDLYHOLD,
  input TXDLYOVRDEN,
  input TXDLYSRESET,
  input TXDLYUPDOWN,
  input TXELECIDLE,
  input TXGBSEQSYNC,
  input [6:0] TXMAINCURSOR,
  input TXMUXDCDEXHOLD,
  input TXMUXDCDORWREN,
  input [2:0] TXOUTCLKSEL,
  input TXPCSRESET,
  input [1:0] TXPD,
  input TXPHALIGN,
  input TXPHALIGNEN,
  input TXPHDLYPD,
  input TXPHDLYRESET,
  input TXPHDLYTSTCLK,
  input TXPHINIT,
  input TXPHOVRDEN,
  input TXPIPPMEN,
  input TXPIPPMOVRDEN,
  input TXPIPPMPD,
  input TXPIPPMSEL,
  input [4:0] TXPIPPMSTEPSIZE,
  input TXPISOPD,
  input [1:0] TXPLLCLKSEL,
  input TXPMARESET,
  input TXPOLARITY,
  input [4:0] TXPOSTCURSOR,
  input TXPRBSFORCEERR,
  input [3:0] TXPRBSSEL,
  input [4:0] TXPRECURSOR,
  input TXPROGDIVRESET,
  input [39:0] TXRAWDATA,
  input TXSYNCALLIN,
  input TXSYNCIN,
  input TXSYNCMODE,
  input [1:0] TXSYSCLKSEL,
  input TXUSERRDY,
  input TXUSRCLK,
  input TXUSRCLK2
);

// define constants
  localparam MODULE_NAME = "GTF_CHANNEL";
  
  reg trig_attr;
// include dynamic registers - XILINX test only
`ifdef XIL_DR
  `include "GTF_CHANNEL_dr.v"
`else
  reg [0:0] ACJTAG_DEBUG_MODE_REG = ACJTAG_DEBUG_MODE;
  reg [0:0] ACJTAG_MODE_REG = ACJTAG_MODE;
  reg [0:0] ACJTAG_RESET_REG = ACJTAG_RESET;
  reg [15:0] ADAPT_CFG0_REG = ADAPT_CFG0;
  reg [15:0] ADAPT_CFG1_REG = ADAPT_CFG1;
  reg [15:0] ADAPT_CFG2_REG = ADAPT_CFG2;
  reg [0:0] A_RXOSCALRESET_REG = A_RXOSCALRESET;
  reg [0:0] A_RXPROGDIVRESET_REG = A_RXPROGDIVRESET;
  reg [0:0] A_RXTERMINATION_REG = A_RXTERMINATION;
  reg [4:0] A_TXDIFFCTRL_REG = A_TXDIFFCTRL;
  reg [0:0] A_TXPROGDIVRESET_REG = A_TXPROGDIVRESET;
  reg [56:1] CBCC_DATA_SOURCE_SEL_REG = CBCC_DATA_SOURCE_SEL;
  reg [0:0] CDR_SWAP_MODE_EN_REG = CDR_SWAP_MODE_EN;
  reg [0:0] CFOK_PWRSVE_EN_REG = CFOK_PWRSVE_EN;
  reg [15:0] CH_HSPMUX_REG = CH_HSPMUX;
  reg [15:0] CKCAL1_CFG_0_REG = CKCAL1_CFG_0;
  reg [15:0] CKCAL1_CFG_1_REG = CKCAL1_CFG_1;
  reg [15:0] CKCAL1_CFG_2_REG = CKCAL1_CFG_2;
  reg [15:0] CKCAL1_CFG_3_REG = CKCAL1_CFG_3;
  reg [15:0] CKCAL2_CFG_0_REG = CKCAL2_CFG_0;
  reg [15:0] CKCAL2_CFG_1_REG = CKCAL2_CFG_1;
  reg [15:0] CKCAL2_CFG_2_REG = CKCAL2_CFG_2;
  reg [15:0] CKCAL2_CFG_3_REG = CKCAL2_CFG_3;
  reg [15:0] CKCAL2_CFG_4_REG = CKCAL2_CFG_4;
  reg [15:0] CPLL_CFG0_REG = CPLL_CFG0;
  reg [15:0] CPLL_CFG1_REG = CPLL_CFG1;
  reg [15:0] CPLL_CFG2_REG = CPLL_CFG2;
  reg [15:0] CPLL_CFG3_REG = CPLL_CFG3;
  reg [4:0] CPLL_FBDIV_REG = CPLL_FBDIV;
  reg [2:0] CPLL_FBDIV_45_REG = CPLL_FBDIV_45;
  reg [15:0] CPLL_INIT_CFG0_REG = CPLL_INIT_CFG0;
  reg [15:0] CPLL_LOCK_CFG_REG = CPLL_LOCK_CFG;
  reg [4:0] CPLL_REFCLK_DIV_REG = CPLL_REFCLK_DIV;
  reg [2:0] CTLE3_OCAP_EXT_CTRL_REG = CTLE3_OCAP_EXT_CTRL;
  reg [0:0] CTLE3_OCAP_EXT_EN_REG = CTLE3_OCAP_EXT_EN;
  reg [1:0] DDI_CTRL_REG = DDI_CTRL;
  reg [4:0] DDI_REALIGN_WAIT_REG = DDI_REALIGN_WAIT;
  reg [0:0] DELAY_ELEC_REG = DELAY_ELEC;
  reg [9:0] DMONITOR_CFG0_REG = DMONITOR_CFG0;
  reg [7:0] DMONITOR_CFG1_REG = DMONITOR_CFG1;
  reg [0:0] ES_CLK_PHASE_SEL_REG = ES_CLK_PHASE_SEL;
  reg [5:0] ES_CONTROL_REG = ES_CONTROL;
  reg [40:1] ES_ERRDET_EN_REG = ES_ERRDET_EN;
  reg [40:1] ES_EYE_SCAN_EN_REG = ES_EYE_SCAN_EN;
  reg [11:0] ES_HORZ_OFFSET_REG = ES_HORZ_OFFSET;
  reg [4:0] ES_PRESCALE_REG = ES_PRESCALE;
  reg [15:0] ES_QUALIFIER0_REG = ES_QUALIFIER0;
  reg [15:0] ES_QUALIFIER1_REG = ES_QUALIFIER1;
  reg [15:0] ES_QUALIFIER2_REG = ES_QUALIFIER2;
  reg [15:0] ES_QUALIFIER3_REG = ES_QUALIFIER3;
  reg [15:0] ES_QUALIFIER4_REG = ES_QUALIFIER4;
  reg [15:0] ES_QUALIFIER5_REG = ES_QUALIFIER5;
  reg [15:0] ES_QUALIFIER6_REG = ES_QUALIFIER6;
  reg [15:0] ES_QUALIFIER7_REG = ES_QUALIFIER7;
  reg [15:0] ES_QUALIFIER8_REG = ES_QUALIFIER8;
  reg [15:0] ES_QUALIFIER9_REG = ES_QUALIFIER9;
  reg [15:0] ES_QUAL_MASK0_REG = ES_QUAL_MASK0;
  reg [15:0] ES_QUAL_MASK1_REG = ES_QUAL_MASK1;
  reg [15:0] ES_QUAL_MASK2_REG = ES_QUAL_MASK2;
  reg [15:0] ES_QUAL_MASK3_REG = ES_QUAL_MASK3;
  reg [15:0] ES_QUAL_MASK4_REG = ES_QUAL_MASK4;
  reg [15:0] ES_QUAL_MASK5_REG = ES_QUAL_MASK5;
  reg [15:0] ES_QUAL_MASK6_REG = ES_QUAL_MASK6;
  reg [15:0] ES_QUAL_MASK7_REG = ES_QUAL_MASK7;
  reg [15:0] ES_QUAL_MASK8_REG = ES_QUAL_MASK8;
  reg [15:0] ES_QUAL_MASK9_REG = ES_QUAL_MASK9;
  reg [15:0] ES_SDATA_MASK0_REG = ES_SDATA_MASK0;
  reg [15:0] ES_SDATA_MASK1_REG = ES_SDATA_MASK1;
  reg [15:0] ES_SDATA_MASK2_REG = ES_SDATA_MASK2;
  reg [15:0] ES_SDATA_MASK3_REG = ES_SDATA_MASK3;
  reg [15:0] ES_SDATA_MASK4_REG = ES_SDATA_MASK4;
  reg [15:0] ES_SDATA_MASK5_REG = ES_SDATA_MASK5;
  reg [15:0] ES_SDATA_MASK6_REG = ES_SDATA_MASK6;
  reg [15:0] ES_SDATA_MASK7_REG = ES_SDATA_MASK7;
  reg [15:0] ES_SDATA_MASK8_REG = ES_SDATA_MASK8;
  reg [15:0] ES_SDATA_MASK9_REG = ES_SDATA_MASK9;
  reg [1:0] EYESCAN_VP_RANGE_REG = EYESCAN_VP_RANGE;
  reg [0:0] EYE_SCAN_SWAP_EN_REG = EYE_SCAN_SWAP_EN;
  reg [3:0] FTS_DESKEW_SEQ_ENABLE_REG = FTS_DESKEW_SEQ_ENABLE;
  reg [3:0] FTS_LANE_DESKEW_CFG_REG = FTS_LANE_DESKEW_CFG;
  reg [40:1] FTS_LANE_DESKEW_EN_REG = FTS_LANE_DESKEW_EN;
  reg [4:0] GEARBOX_MODE_REG = GEARBOX_MODE;
  reg [0:0] ISCAN_CK_PH_SEL2_REG = ISCAN_CK_PH_SEL2;
  reg [0:0] LOCAL_MASTER_REG = LOCAL_MASTER;
  reg [2:0] LPBK_BIAS_CTRL_REG = LPBK_BIAS_CTRL;
  reg [0:0] LPBK_EN_RCAL_B_REG = LPBK_EN_RCAL_B;
  reg [3:0] LPBK_EXT_RCAL_REG = LPBK_EXT_RCAL;
  reg [2:0] LPBK_IND_CTRL0_REG = LPBK_IND_CTRL0;
  reg [2:0] LPBK_IND_CTRL1_REG = LPBK_IND_CTRL1;
  reg [2:0] LPBK_IND_CTRL2_REG = LPBK_IND_CTRL2;
  reg [1:0] LPBK_RG_CTRL_REG = LPBK_RG_CTRL;
  reg [15:0] MAC_CFG0_REG = MAC_CFG0;
  reg [15:0] MAC_CFG1_REG = MAC_CFG1;
  reg [15:0] MAC_CFG10_REG = MAC_CFG10;
  reg [15:0] MAC_CFG11_REG = MAC_CFG11;
  reg [15:0] MAC_CFG12_REG = MAC_CFG12;
  reg [15:0] MAC_CFG13_REG = MAC_CFG13;
  reg [15:0] MAC_CFG14_REG = MAC_CFG14;
  reg [15:0] MAC_CFG15_REG = MAC_CFG15;
  reg [15:0] MAC_CFG2_REG = MAC_CFG2;
  reg [15:0] MAC_CFG3_REG = MAC_CFG3;
  reg [15:0] MAC_CFG4_REG = MAC_CFG4;
  reg [15:0] MAC_CFG5_REG = MAC_CFG5;
  reg [15:0] MAC_CFG6_REG = MAC_CFG6;
  reg [15:0] MAC_CFG7_REG = MAC_CFG7;
  reg [15:0] MAC_CFG8_REG = MAC_CFG8;
  reg [15:0] MAC_CFG9_REG = MAC_CFG9;
  reg [15:0] PCS_RSVD0_REG = PCS_RSVD0;
  reg [11:0] PD_TRANS_TIME_FROM_P2_REG = PD_TRANS_TIME_FROM_P2;
  reg [7:0] PD_TRANS_TIME_NONE_P2_REG = PD_TRANS_TIME_NONE_P2;
  reg [7:0] PD_TRANS_TIME_TO_P2_REG = PD_TRANS_TIME_TO_P2;
  reg [1:0] PREIQ_FREQ_BST_REG = PREIQ_FREQ_BST;
  reg [15:0] RAW_MAC_CFG_REG = RAW_MAC_CFG;
  reg [0:0] RCLK_SIPO_DLY_ENB_REG = RCLK_SIPO_DLY_ENB;
  reg [0:0] RCLK_SIPO_INV_EN_REG = RCLK_SIPO_INV_EN;
  reg [15:0] RCO_NEW_MAC_CFG0_REG = RCO_NEW_MAC_CFG0;
  reg [15:0] RCO_NEW_MAC_CFG1_REG = RCO_NEW_MAC_CFG1;
  reg [15:0] RCO_NEW_MAC_CFG2_REG = RCO_NEW_MAC_CFG2;
  reg [15:0] RCO_NEW_MAC_CFG3_REG = RCO_NEW_MAC_CFG3;
  reg [15:0] RCO_NEW_RAW_CFG0_REG = RCO_NEW_RAW_CFG0;
  reg [15:0] RCO_NEW_RAW_CFG1_REG = RCO_NEW_RAW_CFG1;
  reg [15:0] RCO_NEW_RAW_CFG2_REG = RCO_NEW_RAW_CFG2;
  reg [15:0] RCO_NEW_RAW_CFG3_REG = RCO_NEW_RAW_CFG3;
  reg [2:0] RTX_BUF_CML_CTRL_REG = RTX_BUF_CML_CTRL;
  reg [1:0] RTX_BUF_TERM_CTRL_REG = RTX_BUF_TERM_CTRL;
  reg [4:0] RXBUFRESET_TIME_REG = RXBUFRESET_TIME;
  reg [40:1] RXBUF_EN_REG = RXBUF_EN;
  reg [4:0] RXCDRFREQRESET_TIME_REG = RXCDRFREQRESET_TIME;
  reg [4:0] RXCDRPHRESET_TIME_REG = RXCDRPHRESET_TIME;
  reg [15:0] RXCDR_CFG0_REG = RXCDR_CFG0;
  reg [15:0] RXCDR_CFG1_REG = RXCDR_CFG1;
  reg [15:0] RXCDR_CFG2_REG = RXCDR_CFG2;
  reg [15:0] RXCDR_CFG3_REG = RXCDR_CFG3;
  reg [15:0] RXCDR_CFG4_REG = RXCDR_CFG4;
  reg [15:0] RXCDR_CFG5_REG = RXCDR_CFG5;
  reg [0:0] RXCDR_FR_RESET_ON_EIDLE_REG = RXCDR_FR_RESET_ON_EIDLE;
  reg [0:0] RXCDR_HOLD_DURING_EIDLE_REG = RXCDR_HOLD_DURING_EIDLE;
  reg [15:0] RXCDR_LOCK_CFG0_REG = RXCDR_LOCK_CFG0;
  reg [15:0] RXCDR_LOCK_CFG1_REG = RXCDR_LOCK_CFG1;
  reg [15:0] RXCDR_LOCK_CFG2_REG = RXCDR_LOCK_CFG2;
  reg [15:0] RXCDR_LOCK_CFG3_REG = RXCDR_LOCK_CFG3;
  reg [15:0] RXCDR_LOCK_CFG4_REG = RXCDR_LOCK_CFG4;
  reg [0:0] RXCDR_PH_RESET_ON_EIDLE_REG = RXCDR_PH_RESET_ON_EIDLE;
  reg [15:0] RXCFOK_CFG0_REG = RXCFOK_CFG0;
  reg [15:0] RXCFOK_CFG1_REG = RXCFOK_CFG1;
  reg [15:0] RXCFOK_CFG2_REG = RXCFOK_CFG2;
  reg [15:0] RXCKCAL1_IQ_LOOP_RST_CFG_REG = RXCKCAL1_IQ_LOOP_RST_CFG;
  reg [15:0] RXCKCAL1_I_LOOP_RST_CFG_REG = RXCKCAL1_I_LOOP_RST_CFG;
  reg [15:0] RXCKCAL1_Q_LOOP_RST_CFG_REG = RXCKCAL1_Q_LOOP_RST_CFG;
  reg [15:0] RXCKCAL2_DX_LOOP_RST_CFG_REG = RXCKCAL2_DX_LOOP_RST_CFG;
  reg [15:0] RXCKCAL2_D_LOOP_RST_CFG_REG = RXCKCAL2_D_LOOP_RST_CFG;
  reg [15:0] RXCKCAL2_S_LOOP_RST_CFG_REG = RXCKCAL2_S_LOOP_RST_CFG;
  reg [15:0] RXCKCAL2_X_LOOP_RST_CFG_REG = RXCKCAL2_X_LOOP_RST_CFG;
  reg [6:0] RXDFELPMRESET_TIME_REG = RXDFELPMRESET_TIME;
  reg [15:0] RXDFELPM_KL_CFG0_REG = RXDFELPM_KL_CFG0;
  reg [15:0] RXDFELPM_KL_CFG1_REG = RXDFELPM_KL_CFG1;
  reg [15:0] RXDFELPM_KL_CFG2_REG = RXDFELPM_KL_CFG2;
  reg [15:0] RXDFE_CFG0_REG = RXDFE_CFG0;
  reg [15:0] RXDFE_CFG1_REG = RXDFE_CFG1;
  reg [15:0] RXDFE_GC_CFG0_REG = RXDFE_GC_CFG0;
  reg [15:0] RXDFE_GC_CFG1_REG = RXDFE_GC_CFG1;
  reg [15:0] RXDFE_GC_CFG2_REG = RXDFE_GC_CFG2;
  reg [15:0] RXDFE_H2_CFG0_REG = RXDFE_H2_CFG0;
  reg [15:0] RXDFE_H2_CFG1_REG = RXDFE_H2_CFG1;
  reg [15:0] RXDFE_H3_CFG0_REG = RXDFE_H3_CFG0;
  reg [15:0] RXDFE_H3_CFG1_REG = RXDFE_H3_CFG1;
  reg [15:0] RXDFE_H4_CFG0_REG = RXDFE_H4_CFG0;
  reg [15:0] RXDFE_H4_CFG1_REG = RXDFE_H4_CFG1;
  reg [15:0] RXDFE_H5_CFG0_REG = RXDFE_H5_CFG0;
  reg [15:0] RXDFE_H5_CFG1_REG = RXDFE_H5_CFG1;
  reg [15:0] RXDFE_H6_CFG0_REG = RXDFE_H6_CFG0;
  reg [15:0] RXDFE_H6_CFG1_REG = RXDFE_H6_CFG1;
  reg [15:0] RXDFE_H7_CFG0_REG = RXDFE_H7_CFG0;
  reg [15:0] RXDFE_H7_CFG1_REG = RXDFE_H7_CFG1;
  reg [15:0] RXDFE_H8_CFG0_REG = RXDFE_H8_CFG0;
  reg [15:0] RXDFE_H8_CFG1_REG = RXDFE_H8_CFG1;
  reg [15:0] RXDFE_H9_CFG0_REG = RXDFE_H9_CFG0;
  reg [15:0] RXDFE_H9_CFG1_REG = RXDFE_H9_CFG1;
  reg [15:0] RXDFE_HA_CFG0_REG = RXDFE_HA_CFG0;
  reg [15:0] RXDFE_HA_CFG1_REG = RXDFE_HA_CFG1;
  reg [15:0] RXDFE_HB_CFG0_REG = RXDFE_HB_CFG0;
  reg [15:0] RXDFE_HB_CFG1_REG = RXDFE_HB_CFG1;
  reg [15:0] RXDFE_HC_CFG0_REG = RXDFE_HC_CFG0;
  reg [15:0] RXDFE_HC_CFG1_REG = RXDFE_HC_CFG1;
  reg [15:0] RXDFE_HD_CFG0_REG = RXDFE_HD_CFG0;
  reg [15:0] RXDFE_HD_CFG1_REG = RXDFE_HD_CFG1;
  reg [15:0] RXDFE_HE_CFG0_REG = RXDFE_HE_CFG0;
  reg [15:0] RXDFE_HE_CFG1_REG = RXDFE_HE_CFG1;
  reg [15:0] RXDFE_HF_CFG0_REG = RXDFE_HF_CFG0;
  reg [15:0] RXDFE_HF_CFG1_REG = RXDFE_HF_CFG1;
  reg [15:0] RXDFE_KH_CFG0_REG = RXDFE_KH_CFG0;
  reg [15:0] RXDFE_KH_CFG1_REG = RXDFE_KH_CFG1;
  reg [15:0] RXDFE_KH_CFG2_REG = RXDFE_KH_CFG2;
  reg [15:0] RXDFE_KH_CFG3_REG = RXDFE_KH_CFG3;
  reg [15:0] RXDFE_OS_CFG0_REG = RXDFE_OS_CFG0;
  reg [15:0] RXDFE_OS_CFG1_REG = RXDFE_OS_CFG1;
  reg [15:0] RXDFE_UT_CFG0_REG = RXDFE_UT_CFG0;
  reg [15:0] RXDFE_UT_CFG1_REG = RXDFE_UT_CFG1;
  reg [15:0] RXDFE_UT_CFG2_REG = RXDFE_UT_CFG2;
  reg [15:0] RXDFE_VP_CFG0_REG = RXDFE_VP_CFG0;
  reg [15:0] RXDFE_VP_CFG1_REG = RXDFE_VP_CFG1;
  reg [15:0] RXDLY_CFG_REG = RXDLY_CFG;
  reg [15:0] RXDLY_LCFG_REG = RXDLY_LCFG;
  reg [15:0] RXDLY_RAW_CFG_REG = RXDLY_RAW_CFG;
  reg [15:0] RXDLY_RAW_LCFG_REG = RXDLY_RAW_LCFG;
  reg [72:1] RXELECIDLE_CFG_REG = RXELECIDLE_CFG;
  reg [2:0] RXGBOX_FIFO_INIT_RD_ADDR_REG = RXGBOX_FIFO_INIT_RD_ADDR;
  reg [40:1] RXGEARBOX_EN_REG = RXGEARBOX_EN;
  reg [4:0] RXISCANRESET_TIME_REG = RXISCANRESET_TIME;
  reg [15:0] RXLPM_CFG_REG = RXLPM_CFG;
  reg [15:0] RXLPM_GC_CFG_REG = RXLPM_GC_CFG;
  reg [15:0] RXLPM_KH_CFG0_REG = RXLPM_KH_CFG0;
  reg [15:0] RXLPM_KH_CFG1_REG = RXLPM_KH_CFG1;
  reg [15:0] RXLPM_OS_CFG0_REG = RXLPM_OS_CFG0;
  reg [15:0] RXLPM_OS_CFG1_REG = RXLPM_OS_CFG1;
  reg [4:0] RXOSCALRESET_TIME_REG = RXOSCALRESET_TIME;
  reg [5:0] RXOUT_DIV_REG = RXOUT_DIV;
  reg [4:0] RXPCSRESET_TIME_REG = RXPCSRESET_TIME;
  reg [15:0] RXPHBEACON_CFG_REG = RXPHBEACON_CFG;
  reg [15:0] RXPHBEACON_RAW_CFG_REG = RXPHBEACON_RAW_CFG;
  reg [15:0] RXPHDLY_CFG_REG = RXPHDLY_CFG;
  reg [15:0] RXPHSAMP_CFG_REG = RXPHSAMP_CFG;
  reg [15:0] RXPHSAMP_RAW_CFG_REG = RXPHSAMP_RAW_CFG;
  reg [15:0] RXPHSLIP_CFG_REG = RXPHSLIP_CFG;
  reg [15:0] RXPHSLIP_RAW_CFG_REG = RXPHSLIP_RAW_CFG;
  reg [4:0] RXPH_MONITOR_SEL_REG = RXPH_MONITOR_SEL;
  reg [15:0] RXPI_CFG0_REG = RXPI_CFG0;
  reg [15:0] RXPI_CFG1_REG = RXPI_CFG1;
  reg [64:1] RXPMACLK_SEL_REG = RXPMACLK_SEL;
  reg [4:0] RXPMARESET_TIME_REG = RXPMARESET_TIME;
  reg [0:0] RXPRBS_ERR_LOOPBACK_REG = RXPRBS_ERR_LOOPBACK;
  reg [7:0] RXPRBS_LINKACQ_CNT_REG = RXPRBS_LINKACQ_CNT;
  reg [0:0] RXREFCLKDIV2_SEL_REG = RXREFCLKDIV2_SEL;
  reg [3:0] RXSLIDE_AUTO_WAIT_REG = RXSLIDE_AUTO_WAIT;
  reg [32:1] RXSLIDE_MODE_REG = RXSLIDE_MODE;
  reg [0:0] RXSYNC_MULTILANE_REG = RXSYNC_MULTILANE;
  reg [0:0] RXSYNC_OVRD_REG = RXSYNC_OVRD;
  reg [0:0] RXSYNC_SKIP_DA_REG = RXSYNC_SKIP_DA;
  reg [0:0] RX_AFE_CM_EN_REG = RX_AFE_CM_EN;
  reg [15:0] RX_BIAS_CFG0_REG = RX_BIAS_CFG0;
  reg [0:0] RX_CAPFF_SARC_ENB_REG = RX_CAPFF_SARC_ENB;
  reg [5:0] RX_CLK25_DIV_REG = RX_CLK25_DIV;
  reg [0:0] RX_CLKMUX_EN_REG = RX_CLKMUX_EN;
  reg [4:0] RX_CLK_SLIP_OVRD_REG = RX_CLK_SLIP_OVRD;
  reg [3:0] RX_CM_BUF_CFG_REG = RX_CM_BUF_CFG;
  reg [0:0] RX_CM_BUF_PD_REG = RX_CM_BUF_PD;
  reg [1:0] RX_CM_SEL_REG = RX_CM_SEL;
  reg [3:0] RX_CM_TRIM_REG = RX_CM_TRIM;
  reg [0:0] RX_CTLE_PWR_SAVING_REG = RX_CTLE_PWR_SAVING;
  reg [3:0] RX_CTLE_RES_CTRL_REG = RX_CTLE_RES_CTRL;
  reg [7:0] RX_DATA_WIDTH_REG = RX_DATA_WIDTH;
  reg [5:0] RX_DDI_SEL_REG = RX_DDI_SEL;
  reg [2:0] RX_DEGEN_CTRL_REG = RX_DEGEN_CTRL;
  reg [3:0] RX_DFELPM_CFG0_REG = RX_DFELPM_CFG0;
  reg [0:0] RX_DFELPM_CFG1_REG = RX_DFELPM_CFG1;
  reg [0:0] RX_DFELPM_KLKH_AGC_STUP_EN_REG = RX_DFELPM_KLKH_AGC_STUP_EN;
  reg [2:0] RX_DFE_AGC_CFG1_REG = RX_DFE_AGC_CFG1;
  reg [1:0] RX_DFE_KL_LPM_KH_CFG0_REG = RX_DFE_KL_LPM_KH_CFG0;
  reg [2:0] RX_DFE_KL_LPM_KH_CFG1_REG = RX_DFE_KL_LPM_KH_CFG1;
  reg [1:0] RX_DFE_KL_LPM_KL_CFG0_REG = RX_DFE_KL_LPM_KL_CFG0;
  reg [2:0] RX_DFE_KL_LPM_KL_CFG1_REG = RX_DFE_KL_LPM_KL_CFG1;
  reg [0:0] RX_DFE_LPM_HOLD_DURING_EIDLE_REG = RX_DFE_LPM_HOLD_DURING_EIDLE;
  reg [40:1] RX_DISPERR_SEQ_MATCH_REG = RX_DISPERR_SEQ_MATCH;
  reg [4:0] RX_DIVRESET_TIME_REG = RX_DIVRESET_TIME;
  reg [0:0] RX_EN_CTLE_RCAL_B_REG = RX_EN_CTLE_RCAL_B;
  reg [0:0] RX_EN_SUM_RCAL_B_REG = RX_EN_SUM_RCAL_B;
  reg [6:0] RX_EYESCAN_VS_CODE_REG = RX_EYESCAN_VS_CODE;
  reg [0:0] RX_EYESCAN_VS_NEG_DIR_REG = RX_EYESCAN_VS_NEG_DIR;
  reg [1:0] RX_EYESCAN_VS_RANGE_REG = RX_EYESCAN_VS_RANGE;
  reg [0:0] RX_EYESCAN_VS_UT_SIGN_REG = RX_EYESCAN_VS_UT_SIGN;
  reg [0:0] RX_I2V_FILTER_EN_REG = RX_I2V_FILTER_EN;
  reg [1:0] RX_INT_DATAWIDTH_REG = RX_INT_DATAWIDTH;
  reg [0:0] RX_PMA_POWER_SAVE_REG = RX_PMA_POWER_SAVE;
  reg [15:0] RX_PMA_RSV0_REG = RX_PMA_RSV0;
  real RX_PROGDIV_CFG_REG = RX_PROGDIV_CFG;
  reg [15:0] RX_PROGDIV_RATE_REG = RX_PROGDIV_RATE;
  reg [3:0] RX_RESLOAD_CTRL_REG = RX_RESLOAD_CTRL;
  reg [0:0] RX_RESLOAD_OVRD_REG = RX_RESLOAD_OVRD;
  reg [2:0] RX_SAMPLE_PERIOD_REG = RX_SAMPLE_PERIOD;
  reg [5:0] RX_SIG_VALID_DLY_REG = RX_SIG_VALID_DLY;
  reg [0:0] RX_SUM_DEGEN_AVTT_OVERITE_REG = RX_SUM_DEGEN_AVTT_OVERITE;
  reg [0:0] RX_SUM_DFETAPREP_EN_REG = RX_SUM_DFETAPREP_EN;
  reg [3:0] RX_SUM_IREF_TUNE_REG = RX_SUM_IREF_TUNE;
  reg [0:0] RX_SUM_PWR_SAVING_REG = RX_SUM_PWR_SAVING;
  reg [3:0] RX_SUM_RES_CTRL_REG = RX_SUM_RES_CTRL;
  reg [3:0] RX_SUM_VCMTUNE_REG = RX_SUM_VCMTUNE;
  reg [0:0] RX_SUM_VCM_BIAS_TUNE_EN_REG = RX_SUM_VCM_BIAS_TUNE_EN;
  reg [0:0] RX_SUM_VCM_OVWR_REG = RX_SUM_VCM_OVWR;
  reg [2:0] RX_SUM_VREF_TUNE_REG = RX_SUM_VREF_TUNE;
  reg [1:0] RX_TUNE_AFE_OS_REG = RX_TUNE_AFE_OS;
  reg [2:0] RX_VREG_CTRL_REG = RX_VREG_CTRL;
  reg [0:0] RX_VREG_PDB_REG = RX_VREG_PDB;
  reg [1:0] RX_WIDEMODE_CDR_REG = RX_WIDEMODE_CDR;
  reg [1:0] RX_WIDEMODE_CDR_GEN3_REG = RX_WIDEMODE_CDR_GEN3;
  reg [1:0] RX_WIDEMODE_CDR_GEN4_REG = RX_WIDEMODE_CDR_GEN4;
  reg [40:1] RX_XCLK_SEL_REG = RX_XCLK_SEL;
  reg [0:0] RX_XMODE_SEL_REG = RX_XMODE_SEL;
  reg [0:0] SAMPLE_CLK_PHASE_REG = SAMPLE_CLK_PHASE;
  reg [88:1] SATA_CPLL_CFG_REG = SATA_CPLL_CFG;
  reg [48:1] SIM_MODE_REG = SIM_MODE;
  reg [40:1] SIM_RESET_SPEEDUP_REG = SIM_RESET_SPEEDUP;
  reg [32:1] SIM_TX_EIDLE_DRIVE_LEVEL_REG = SIM_TX_EIDLE_DRIVE_LEVEL;
  reg [0:0] SRSTMODE_REG = SRSTMODE;
  reg [1:0] TAPDLY_SET_TX_REG = TAPDLY_SET_TX;
  reg [15:0] TCO_NEW_CFG0_REG = TCO_NEW_CFG0;
  reg [15:0] TCO_NEW_CFG1_REG = TCO_NEW_CFG1;
  reg [15:0] TCO_NEW_CFG2_REG = TCO_NEW_CFG2;
  reg [15:0] TCO_NEW_CFG3_REG = TCO_NEW_CFG3;
  reg [15:0] TCO_RSVD1_REG = TCO_RSVD1;
  reg [15:0] TCO_RSVD2_REG = TCO_RSVD2;
  reg [14:0] TERM_RCAL_CFG_REG = TERM_RCAL_CFG;
  reg [2:0] TERM_RCAL_OVRD_REG = TERM_RCAL_OVRD;
  reg [7:0] TRANS_TIME_RATE_REG = TRANS_TIME_RATE;
  reg [7:0] TST_RSV0_REG = TST_RSV0;
  reg [7:0] TST_RSV1_REG = TST_RSV1;
  reg [40:1] TXBUF_EN_REG = TXBUF_EN;
  reg [15:0] TXDLY_CFG_REG = TXDLY_CFG;
  reg [15:0] TXDLY_LCFG_REG = TXDLY_LCFG;
  reg [1:0] TXDRV_FREQBAND_REG = TXDRV_FREQBAND;
  reg [15:0] TXFE_CFG0_REG = TXFE_CFG0;
  reg [15:0] TXFE_CFG1_REG = TXFE_CFG1;
  reg [15:0] TXFE_CFG2_REG = TXFE_CFG2;
  reg [15:0] TXFE_CFG3_REG = TXFE_CFG3;
  reg [32:1] TXFIFO_ADDR_CFG_REG = TXFIFO_ADDR_CFG;
  reg [2:0] TXGBOX_FIFO_INIT_RD_ADDR_REG = TXGBOX_FIFO_INIT_RD_ADDR;
  reg [5:0] TXOUT_DIV_REG = TXOUT_DIV;
  reg [4:0] TXPCSRESET_TIME_REG = TXPCSRESET_TIME;
  reg [15:0] TXPHDLY_CFG0_REG = TXPHDLY_CFG0;
  reg [15:0] TXPHDLY_CFG1_REG = TXPHDLY_CFG1;
  reg [15:0] TXPH_CFG_REG = TXPH_CFG;
  reg [15:0] TXPH_CFG2_REG = TXPH_CFG2;
  reg [4:0] TXPH_MONITOR_SEL_REG = TXPH_MONITOR_SEL;
  reg [15:0] TXPI_CFG0_REG = TXPI_CFG0;
  reg [15:0] TXPI_CFG1_REG = TXPI_CFG1;
  reg [0:0] TXPI_GRAY_SEL_REG = TXPI_GRAY_SEL;
  reg [0:0] TXPI_INVSTROBE_SEL_REG = TXPI_INVSTROBE_SEL;
  reg [0:0] TXPI_PPM_REG = TXPI_PPM;
  reg [7:0] TXPI_PPM_CFG_REG = TXPI_PPM_CFG;
  reg [2:0] TXPI_SYNFREQ_PPM_REG = TXPI_SYNFREQ_PPM;
  reg [4:0] TXPMARESET_TIME_REG = TXPMARESET_TIME;
  reg [0:0] TXREFCLKDIV2_SEL_REG = TXREFCLKDIV2_SEL;
  reg [1:0] TXSWBST_BST_REG = TXSWBST_BST;
  reg [0:0] TXSWBST_EN_REG = TXSWBST_EN;
  reg [2:0] TXSWBST_MAG_REG = TXSWBST_MAG;
  reg [0:0] TXSYNC_MULTILANE_REG = TXSYNC_MULTILANE;
  reg [0:0] TXSYNC_OVRD_REG = TXSYNC_OVRD;
  reg [0:0] TXSYNC_SKIP_DA_REG = TXSYNC_SKIP_DA;
  reg [5:0] TX_CLK25_DIV_REG = TX_CLK25_DIV;
  reg [0:0] TX_CLKMUX_EN_REG = TX_CLKMUX_EN;
  reg [7:0] TX_DATA_WIDTH_REG = TX_DATA_WIDTH;
  reg [15:0] TX_DCC_LOOP_RST_CFG_REG = TX_DCC_LOOP_RST_CFG;
  reg [4:0] TX_DIVRESET_TIME_REG = TX_DIVRESET_TIME;
  reg [2:0] TX_EIDLE_ASSERT_DELAY_REG = TX_EIDLE_ASSERT_DELAY;
  reg [2:0] TX_EIDLE_DEASSERT_DELAY_REG = TX_EIDLE_DEASSERT_DELAY;
  reg [0:0] TX_FABINT_USRCLK_FLOP_REG = TX_FABINT_USRCLK_FLOP;
  reg [0:0] TX_FIFO_BYP_EN_REG = TX_FIFO_BYP_EN;
  reg [0:0] TX_IDLE_DATA_ZERO_REG = TX_IDLE_DATA_ZERO;
  reg [1:0] TX_INT_DATAWIDTH_REG = TX_INT_DATAWIDTH;
  reg [40:1] TX_LOOPBACK_DRIVE_HIZ_REG = TX_LOOPBACK_DRIVE_HIZ;
  reg [0:0] TX_MAINCURSOR_SEL_REG = TX_MAINCURSOR_SEL;
  reg [15:0] TX_PHICAL_CFG0_REG = TX_PHICAL_CFG0;
  reg [15:0] TX_PHICAL_CFG1_REG = TX_PHICAL_CFG1;
  reg [1:0] TX_PI_BIASSET_REG = TX_PI_BIASSET;
  reg [0:0] TX_PMADATA_OPT_REG = TX_PMADATA_OPT;
  reg [0:0] TX_PMA_POWER_SAVE_REG = TX_PMA_POWER_SAVE;
  reg [15:0] TX_PMA_RSV0_REG = TX_PMA_RSV0;
  reg [15:0] TX_PMA_RSV1_REG = TX_PMA_RSV1;
  reg [48:1] TX_PROGCLK_SEL_REG = TX_PROGCLK_SEL;
  real TX_PROGDIV_CFG_REG = TX_PROGDIV_CFG;
  reg [15:0] TX_PROGDIV_RATE_REG = TX_PROGDIV_RATE;
  reg [2:0] TX_SAMPLE_PERIOD_REG = TX_SAMPLE_PERIOD;
  reg [1:0] TX_SW_MEAS_REG = TX_SW_MEAS;
  reg [2:0] TX_VREG_CTRL_REG = TX_VREG_CTRL;
  reg [0:0] TX_VREG_PDB_REG = TX_VREG_PDB;
  reg [1:0] TX_VREG_VREFSEL_REG = TX_VREG_VREFSEL;
  reg [40:1] TX_XCLK_SEL_REG = TX_XCLK_SEL;
  reg [0:0] USE_PCS_CLK_PHASE_SEL_REG = USE_PCS_CLK_PHASE_SEL;
  reg [0:0] USE_RAW_ELEC_REG = USE_RAW_ELEC;
  reg [0:0] Y_ALL_MODE_REG = Y_ALL_MODE;
`endif

  reg [0:0] AEN_CDRSTEPSEL_REG = 1'b0;
  reg [0:0] AEN_CPLL_REG = 1'b0;
  reg [0:0] AEN_LOOPBACK_REG = 1'b0;
  reg [0:0] AEN_MASTER_REG = 1'b0;
  reg [0:0] AEN_PD_AND_EIDLE_REG = 1'b0;
  reg [0:0] AEN_POLARITY_REG = 1'b0;
  reg [0:0] AEN_PRBS_REG = 1'b0;
  reg [0:0] AEN_RESET_REG = 1'b0;
  reg [0:0] AEN_RXCDR_REG = 1'b0;
  reg [0:0] AEN_RXDFE_REG = 1'b0;
  reg [0:0] AEN_RXDFELPM_REG = 1'b0;
  reg [0:0] AEN_RXOUTCLK_SEL_REG = 1'b0;
  reg [0:0] AEN_RXPHDLY_REG = 1'b0;
  reg [0:0] AEN_RXPLLCLK_SEL_REG = 1'b0;
  reg [0:0] AEN_RXSYSCLK_SEL_REG = 1'b0;
  reg [0:0] AEN_TXMUXDCD_REG = 1'b0;
  reg [0:0] AEN_TXOUTCLK_SEL_REG = 1'b0;
  reg [0:0] AEN_TXPHDLY_REG = 1'b0;
  reg [0:0] AEN_TXPI_PPM_REG = 1'b0;
  reg [0:0] AEN_TXPLLCLK_SEL_REG = 1'b0;
  reg [0:0] AEN_TXSYSCLK_SEL_REG = 1'b0;
  reg [0:0] AEN_TX_DRIVE_MODE_REG = 1'b0;
  reg [15:0] AMONITOR_CFG_REG = 16'h0FC0;
  reg [0:0] A_CPLLLOCKEN_REG = 1'b0;
  reg [0:0] A_CPLLPD_REG = 1'b0;
  reg [0:0] A_CPLLRESET_REG = 1'b0;
  reg [0:0] A_EYESCANRESET_REG = 1'b0;
  reg [0:0] A_GTRESETSEL_REG = 1'b0;
  reg [0:0] A_GTRXRESET_REG = 1'b0;
  reg [0:0] A_GTTXRESET_REG = 1'b0;
  reg [80:1] A_LOOPBACK_REG = "NOLOOPBACK";
  reg [0:0] A_RXAFECFOKEN_REG = 1'b1;
  reg [0:0] A_RXBUFRESET_REG = 1'b0;
  reg [0:0] A_RXCDRFREQRESET_REG = 1'b0;
  reg [0:0] A_RXCDRHOLD_REG = 1'b0;
  reg [0:0] A_RXCDROVRDEN_REG = 1'b0;
  reg [0:0] A_RXCDRRESET_REG = 1'b0;
  reg [0:0] A_RXCKCALRESET_REG = 1'b0;
  reg [0:0] A_RXDFEAGCHOLD_REG = 1'b0;
  reg [0:0] A_RXDFEAGCOVRDEN_REG = 1'b0;
  reg [3:0] A_RXDFECFOKFCNUM_REG = 4'b0000;
  reg [0:0] A_RXDFECFOKFEN_REG = 1'b0;
  reg [0:0] A_RXDFECFOKFPULSE_REG = 1'b0;
  reg [0:0] A_RXDFECFOKHOLD_REG = 1'b0;
  reg [0:0] A_RXDFECFOKOVREN_REG = 1'b0;
  reg [0:0] A_RXDFEKHHOLD_REG = 0;
  reg [0:0] A_RXDFEKHOVRDEN_REG = 1'b0;
  reg [0:0] A_RXDFELFHOLD_REG = 1'b0;
  reg [0:0] A_RXDFELFOVRDEN_REG = 1'b0;
  reg [0:0] A_RXDFELPMRESET_REG = 1'b0;
  reg [0:0] A_RXDFETAP10HOLD_REG = 1'b0;
  reg [0:0] A_RXDFETAP10OVRDEN_REG = 1'b0;
  reg [0:0] A_RXDFETAP11HOLD_REG = 1'b0;
  reg [0:0] A_RXDFETAP11OVRDEN_REG = 1'b0;
  reg [0:0] A_RXDFETAP12HOLD_REG = 1'b0;
  reg [0:0] A_RXDFETAP12OVRDEN_REG = 1'b0;
  reg [0:0] A_RXDFETAP13HOLD_REG = 1'b0;
  reg [0:0] A_RXDFETAP13OVRDEN_REG = 1'b0;
  reg [0:0] A_RXDFETAP14HOLD_REG = 1'b0;
  reg [0:0] A_RXDFETAP14OVRDEN_REG = 1'b0;
  reg [0:0] A_RXDFETAP15HOLD_REG = 1'b0;
  reg [0:0] A_RXDFETAP15OVRDEN_REG = 1'b0;
  reg [0:0] A_RXDFETAP2HOLD_REG = 1'b0;
  reg [0:0] A_RXDFETAP2OVRDEN_REG = 1'b0;
  reg [0:0] A_RXDFETAP3HOLD_REG = 1'b0;
  reg [0:0] A_RXDFETAP3OVRDEN_REG = 1'b0;
  reg [0:0] A_RXDFETAP4HOLD_REG = 1'b0;
  reg [0:0] A_RXDFETAP4OVRDEN_REG = 1'b0;
  reg [0:0] A_RXDFETAP5HOLD_REG = 1'b0;
  reg [0:0] A_RXDFETAP5OVRDEN_REG = 1'b0;
  reg [0:0] A_RXDFETAP6HOLD_REG = 1'b0;
  reg [0:0] A_RXDFETAP6OVRDEN_REG = 1'b0;
  reg [0:0] A_RXDFETAP7HOLD_REG = 1'b0;
  reg [0:0] A_RXDFETAP7OVRDEN_REG = 1'b0;
  reg [0:0] A_RXDFETAP8HOLD_REG = 1'b0;
  reg [0:0] A_RXDFETAP8OVRDEN_REG = 1'b0;
  reg [0:0] A_RXDFETAP9HOLD_REG = 1'b0;
  reg [0:0] A_RXDFETAP9OVRDEN_REG = 1'b0;
  reg [0:0] A_RXDFEUTHOLD_REG = 1'b0;
  reg [0:0] A_RXDFEUTOVRDEN_REG = 1'b0;
  reg [0:0] A_RXDFEVPHOLD_REG = 1'b0;
  reg [0:0] A_RXDFEVPOVRDEN_REG = 1'b0;
  reg [0:0] A_RXDFEXYDEN_REG = 1'b0;
  reg [0:0] A_RXDLYBYPASS_REG = 1'b0;
  reg [0:0] A_RXDLYEN_REG = 1'b0;
  reg [0:0] A_RXDLYOVRDEN_REG = 1'b0;
  reg [0:0] A_RXDLYSRESET_REG = 1'b0;
  reg [0:0] A_RXLPMEN_REG = 1'b0;
  reg [0:0] A_RXLPMGCHOLD_REG = 1'b0;
  reg [0:0] A_RXLPMGCOVRDEN_REG = 1'b0;
  reg [0:0] A_RXLPMHFHOLD_REG = 1'b0;
  reg [0:0] A_RXLPMHFOVRDEN_REG = 1'b0;
  reg [0:0] A_RXLPMLFHOLD_REG = 1'b0;
  reg [0:0] A_RXLPMLFKLOVRDEN_REG = 1'b0;
  reg [0:0] A_RXLPMOSHOLD_REG = 1'b0;
  reg [0:0] A_RXLPMOSOVRDEN_REG = 1'b0;
  reg [1:0] A_RXMONITORSEL_REG = 2'b00;
  reg [0:0] A_RXOSHOLD_REG = 1'b0;
  reg [0:0] A_RXOSOVRDEN_REG = 1'b0;
  reg [128:1] A_RXOUTCLKSEL_REG = "DISABLED";
  reg [0:0] A_RXPCSRESET_REG = 1'b0;
  reg [24:1] A_RXPD_REG = "P0";
  reg [0:0] A_RXPHALIGN_REG = 1'b0;
  reg [0:0] A_RXPHALIGNEN_REG = 1'b0;
  reg [0:0] A_RXPHDLYPD_REG = 1'b0;
  reg [0:0] A_RXPHDLYRESET_REG = 1'b0;
  reg [64:1] A_RXPLLCLKSEL_REG = "QPLLCLK1";
  reg [0:0] A_RXPMARESET_REG = 1'b0;
  reg [0:0] A_RXPOLARITY_REG = 1'b0;
  reg [0:0] A_RXPRBSCNTRESET_REG = 1'b0;
  reg [48:1] A_RXPRBSSEL_REG = "PRBS7";
  reg [88:1] A_RXSYSCLKSEL_REG = "CPLLREFCLK";
  reg [2:0] A_TXBUFDIFFCTRL_REG = 3'b100;
  reg [0:0] A_TXDCCRESET_REG = 1'b0;
  reg [1:0] A_TXDEEMPH_REG = 2'b00;
  reg [0:0] A_TXDLYBYPASS_REG = 1'b0;
  reg [0:0] A_TXDLYEN_REG = 1'b0;
  reg [0:0] A_TXDLYOVRDEN_REG = 1'b0;
  reg [0:0] A_TXDLYSRESET_REG = 1'b0;
  reg [0:0] A_TXELECIDLE_REG = 1'b0;
  reg [0:0] A_TXINHIBIT_REG = 1'b0;
  reg [6:0] A_TXMAINCURSOR_REG = 7'b0000000;
  reg [2:0] A_TXMARGIN_REG = 3'b000;
  reg [0:0] A_TXMUXDCDEXHOLD_REG = 1'b0;
  reg [0:0] A_TXMUXDCDORWREN_REG = 1'b0;
  reg [128:1] A_TXOUTCLKSEL_REG = "DISABLED";
  reg [0:0] A_TXPCSRESET_REG = 1'b0;
  reg [24:1] A_TXPD_REG = "P0";
  reg [0:0] A_TXPHALIGN_REG = 1'b0;
  reg [0:0] A_TXPHALIGNEN_REG = 1'b0;
  reg [0:0] A_TXPHDLYPD_REG = 1'b0;
  reg [0:0] A_TXPHDLYRESET_REG = 1'b0;
  reg [0:0] A_TXPHINIT_REG = 1'b0;
  reg [0:0] A_TXPHOVRDEN_REG = 1'b0;
  reg [0:0] A_TXPIPPMOVRDEN_REG = 1'b0;
  reg [0:0] A_TXPIPPMPD_REG = 1'b0;
  reg [0:0] A_TXPIPPMSEL_REG = 1'b0;
  reg [64:1] A_TXPLLCLKSEL_REG = "QPLLCLK1";
  reg [0:0] A_TXPMARESET_REG = 1'b0;
  reg [0:0] A_TXPOLARITY_REG = 1'b0;
  reg [4:0] A_TXPOSTCURSOR_REG = 5'b00000;
  reg [0:0] A_TXPRBSFORCEERR_REG = 1'b0;
  reg [96:1] A_TXPRBSSEL_REG = "PRBS7";
  reg [4:0] A_TXPRECURSOR_REG = 5'b00000;
  reg [0:0] A_TXRESETSEL_REG = 1'b0;
  reg [88:1] A_TXSYSCLKSEL_REG = "CPLLREFCLK";
  reg [1:0] BSR_ENABLE_REG = 2'b00;
  reg [40:1] GEN_RXUSRCLK_REG = "TRUE";
  reg [40:1] GEN_TXUSRCLK_REG = "TRUE";
  reg [0:0] GT_INSTANTIATED_REG = 1'b1;
  reg [5:0] RX_DFECFOKFCDAC_REG = 6'b000000;
  reg [1:0] RX_VREG_VREFSEL_REG = 2'b01;
  reg [0:0] TXOUTCLKPCS_SEL_REG = 1'b0;
  reg [9:0] TX_USERPATTERN_DATA0_REG = 10'b0101111100;
  reg [9:0] TX_USERPATTERN_DATA1_REG = 10'b0101010101;
  reg [9:0] TX_USERPATTERN_DATA2_REG = 10'b1010000011;
  reg [9:0] TX_USERPATTERN_DATA3_REG = 10'b1010101010;
  reg [9:0] TX_USERPATTERN_DATA4_REG = 10'b0101111100;
  reg [9:0] TX_USERPATTERN_DATA5_REG = 10'b0101010101;
  reg [9:0] TX_USERPATTERN_DATA6_REG = 10'b1010000011;
  reg [9:0] TX_USERPATTERN_DATA7_REG = 10'b1010101010;

`ifdef XIL_XECLIB
  wire [63:0] RX_PROGDIV_CFG_BIN;
  wire [63:0] TX_PROGDIV_CFG_BIN;
`else
  reg [63:0] RX_PROGDIV_CFG_BIN;
  reg [63:0] TX_PROGDIV_CFG_BIN;
`endif

`ifdef XIL_XECLIB
reg glblGSR = 1'b0;
`else
tri0 glblGSR = glbl.GSR;
`endif

  wire CPLLFBCLKLOST_out;
  wire CPLLLOCK_out;
  wire CPLLREFCLKLOST_out;
  wire DMONITOROUTCLK_out;
  wire DRPRDY_out;
  wire EYESCANDATAERROR_out;
  wire GTFTXN_out;
  wire GTFTXP_out;
  wire GTPOWERGOOD_out;
  wire GTREFCLKMONITOR_out;
  wire RESETEXCEPTION_out;
  wire RXAXISTERR_out;
  wire RXAXISTVALID_out;
  wire RXBITSLIP_out;
  wire RXCDRLOCK_out;
  wire RXCDRPHDONE_out;
  wire RXCKCALDONE_out;
  wire RXDLYSRESETDONE_out;
  wire RXELECIDLE_out;
  wire RXGBSEQSTART_out;
  wire RXOSINTDONE_out;
  wire RXOSINTSTARTED_out;
  wire RXOSINTSTROBEDONE_out;
  wire RXOSINTSTROBESTARTED_out;
  wire RXOUTCLKFABRIC_out;
  wire RXOUTCLKPCS_out;
  wire RXOUTCLK_out;
  wire RXPHALIGNDONE_out;
  wire RXPHALIGNERR_out;
  wire RXPMARESETDONE_out;
  wire RXPRBSERR_out;
  wire RXPRBSLOCKED_out;
  wire RXPRGDIVRESETDONE_out;
  wire RXPTPSOPPOS_out;
  wire RXPTPSOP_out;
  wire RXRECCLKOUT_out;
  wire RXRESETDONE_out;
  wire RXSLIPDONE_out;
  wire RXSLIPOUTCLKRDY_out;
  wire RXSLIPPMARDY_out;
  wire RXSYNCDONE_out;
  wire RXSYNCOUT_out;
  wire STATRXBADCODE_out;
  wire STATRXBADFCS_out;
  wire STATRXBADPREAMBLE_out;
  wire STATRXBADSFD_out;
  wire STATRXBLOCKLOCK_out;
  wire STATRXBROADCAST_out;
  wire STATRXFCSERR_out;
  wire STATRXFRAMINGERR_out;
  wire STATRXGOTSIGNALOS_out;
  wire STATRXHIBER_out;
  wire STATRXINRANGEERR_out;
  wire STATRXINTERNALLOCALFAULT_out;
  wire STATRXLOCALFAULT_out;
  wire STATRXMULTICAST_out;
  wire STATRXPKTERR_out;
  wire STATRXPKT_out;
  wire STATRXRECEIVEDLOCALFAULT_out;
  wire STATRXREMOTEFAULT_out;
  wire STATRXSTATUS_out;
  wire STATRXSTOMPEDFCS_out;
  wire STATRXTESTPATTERNMISMATCH_out;
  wire STATRXTRUNCATED_out;
  wire STATRXUNICAST_out;
  wire STATRXVALIDCTRLCODE_out;
  wire STATRXVLAN_out;
  wire STATTXBADFCS_out;
  wire STATTXBROADCAST_out;
  wire STATTXFCSERR_out;
  wire STATTXMULTICAST_out;
  wire STATTXPKTERR_out;
  wire STATTXPKT_out;
  wire STATTXUNICAST_out;
  wire STATTXVLAN_out;
  wire TXAXISTREADY_out;
  wire TXDCCDONE_out;
  wire TXDLYSRESETDONE_out;
  wire TXGBSEQSTART_out;
  wire TXOUTCLKFABRIC_out;
  wire TXOUTCLKPCS_out;
  wire TXOUTCLK_out;
  wire TXPHALIGNDONE_out;
  wire TXPHINITDONE_out;
  wire TXPMARESETDONE_out;
  wire TXPRGDIVRESETDONE_out;
  wire TXPTPSOPPOS_out;
  wire TXPTPSOP_out;
  wire TXRESETDONE_out;
  wire TXSYNCDONE_out;
  wire TXSYNCOUT_out;
  wire TXUNFOUT_out;
  wire [15:0] DMONITOROUT_out;
  wire [15:0] DRPDO_out;
  wire [15:0] PCSRSVDOUT_out;
  wire [15:0] PINRSRVDAS_out;
  wire [17:0] PMASCANOUT_out;
  wire [18:0] SCANOUT_out;
  wire [1:0] RXAXISTSOF_out;
  wire [39:0] RXRAWDATA_out;
  wire [3:0] STATRXBYTES_out;
  wire [3:0] STATTXBYTES_out;
  wire [4:0] RXAXISTTERM_out;
  wire [63:0] RXAXISTDATA_out;
  wire [7:0] RXAXISTLAST_out;
  wire [7:0] RXAXISTPRE_out;
  wire [7:0] RXMONITOROUT_out;
  wire [8:0] STATRXPAUSEQUANTA_out;
  wire [8:0] STATRXPAUSEREQ_out;
  wire [8:0] STATRXPAUSEVALID_out;
  wire [8:0] STATTXPAUSEVALID_out;

  wire BSR_SERIAL_in;
  wire CDRSTEPDIR_in;
  wire CDRSTEPSQ_in;
  wire CDRSTEPSX_in;
  wire CFGRESET_in;
  wire CLKRSVD0_in;
  wire CLKRSVD1_in;
  wire CPLLFREQLOCK_in;
  wire CPLLLOCKDETCLK_in;
  wire CPLLLOCKEN_in;
  wire CPLLPD_in;
  wire CPLLRESET_in;
  wire CTLTXRESENDPAUSE_in;
  wire CTLTXSENDIDLE_in;
  wire CTLTXSENDLFI_in;
  wire CTLTXSENDRFI_in;
  wire DMONFIFORESET_in;
  wire DMONITORCLK_in;
  wire DRPCLK_in;
  wire DRPEN_in;
  wire DRPRST_in;
  wire DRPWE_in;
  wire EYESCANRESET_in;
  wire EYESCANTRIGGER_in;
  wire FREQOS_in;
  wire GTFRXN_in;
  wire GTFRXP_in;
  wire GTGREFCLK_in;
  wire GTNORTHREFCLK0_in;
  wire GTNORTHREFCLK1_in;
  wire GTREFCLK0_in;
  wire GTREFCLK1_in;
  wire GTRXRESETSEL_in;
  wire GTRXRESET_in;
  wire GTSOUTHREFCLK0_in;
  wire GTSOUTHREFCLK1_in;
  wire GTTXRESETSEL_in;
  wire GTTXRESET_in;
  wire INCPCTRL_in;
  wire PMASCANCLK0_in;
  wire PMASCANCLK1_in;
  wire PMASCANCLK2_in;
  wire PMASCANCLK3_in;
  wire PMASCANCLK4_in;
  wire PMASCANCLK5_in;
  wire PMASCANCLK6_in;
  wire PMASCANCLK7_in;
  wire PMASCANCLK8_in;
  wire PMASCANENB_in;
  wire PMASCANMODEB_in;
  wire PMASCANRSTEN_in;
  wire QPLL0CLK_in;
  wire QPLL0FREQLOCK_in;
  wire QPLL0REFCLK_in;
  wire QPLL1CLK_in;
  wire QPLL1FREQLOCK_in;
  wire QPLL1REFCLK_in;
  wire RESETOVRD_in;
  wire RXAFECFOKEN_in;
  wire RXCDRFREQRESET_in;
  wire RXCDRHOLD_in;
  wire RXCDROVRDEN_in;
  wire RXCDRRESET_in;
  wire RXCKCALRESET_in;
  wire RXDFEAGCHOLD_in;
  wire RXDFEAGCOVRDEN_in;
  wire RXDFECFOKFEN_in;
  wire RXDFECFOKFPULSE_in;
  wire RXDFECFOKHOLD_in;
  wire RXDFECFOKOVREN_in;
  wire RXDFEKHHOLD_in;
  wire RXDFEKHOVRDEN_in;
  wire RXDFELFHOLD_in;
  wire RXDFELFOVRDEN_in;
  wire RXDFELPMRESET_in;
  wire RXDFETAP10HOLD_in;
  wire RXDFETAP10OVRDEN_in;
  wire RXDFETAP11HOLD_in;
  wire RXDFETAP11OVRDEN_in;
  wire RXDFETAP12HOLD_in;
  wire RXDFETAP12OVRDEN_in;
  wire RXDFETAP13HOLD_in;
  wire RXDFETAP13OVRDEN_in;
  wire RXDFETAP14HOLD_in;
  wire RXDFETAP14OVRDEN_in;
  wire RXDFETAP15HOLD_in;
  wire RXDFETAP15OVRDEN_in;
  wire RXDFETAP2HOLD_in;
  wire RXDFETAP2OVRDEN_in;
  wire RXDFETAP3HOLD_in;
  wire RXDFETAP3OVRDEN_in;
  wire RXDFETAP4HOLD_in;
  wire RXDFETAP4OVRDEN_in;
  wire RXDFETAP5HOLD_in;
  wire RXDFETAP5OVRDEN_in;
  wire RXDFETAP6HOLD_in;
  wire RXDFETAP6OVRDEN_in;
  wire RXDFETAP7HOLD_in;
  wire RXDFETAP7OVRDEN_in;
  wire RXDFETAP8HOLD_in;
  wire RXDFETAP8OVRDEN_in;
  wire RXDFETAP9HOLD_in;
  wire RXDFETAP9OVRDEN_in;
  wire RXDFEUTHOLD_in;
  wire RXDFEUTOVRDEN_in;
  wire RXDFEVPHOLD_in;
  wire RXDFEVPOVRDEN_in;
  wire RXDFEXYDEN_in;
  wire RXDLYBYPASS_in;
  wire RXDLYEN_in;
  wire RXDLYOVRDEN_in;
  wire RXDLYSRESET_in;
  wire RXLPMEN_in;
  wire RXLPMGCHOLD_in;
  wire RXLPMGCOVRDEN_in;
  wire RXLPMHFHOLD_in;
  wire RXLPMHFOVRDEN_in;
  wire RXLPMLFHOLD_in;
  wire RXLPMLFKLOVRDEN_in;
  wire RXLPMOSHOLD_in;
  wire RXLPMOSOVRDEN_in;
  wire RXOSCALRESET_in;
  wire RXOSHOLD_in;
  wire RXOSOVRDEN_in;
  wire RXPCSRESET_in;
  wire RXPHALIGNEN_in;
  wire RXPHALIGN_in;
  wire RXPHDLYPD_in;
  wire RXPHDLYRESET_in;
  wire RXPMARESET_in;
  wire RXPOLARITY_in;
  wire RXPRBSCNTRESET_in;
  wire RXPROGDIVRESET_in;
  wire RXSLIPOUTCLK_in;
  wire RXSLIPPMA_in;
  wire RXSYNCALLIN_in;
  wire RXSYNCIN_in;
  wire RXSYNCMODE_in;
  wire RXTERMINATION_in;
  wire RXUSERRDY_in;
  wire RXUSRCLK2_in;
  wire RXUSRCLK_in;
  wire SARCCLK_in;
  wire SCANCLK_in;
  wire SCANENB_in;
  wire SCANMODEB_in;
  wire SCANRSTB_in;
  wire SCANRSTEN_in;
  wire TSTCLK0_in;
  wire TSTCLK1_in;
  wire TSTPDOVRDB_in;
  wire TXAXISTERR_in;
  wire TXAXISTPOISON_in;
  wire TXAXISTVALID_in;
  wire TXDCCFORCESTART_in;
  wire TXDCCRESET_in;
  wire TXDLYBYPASS_in;
  wire TXDLYEN_in;
  wire TXDLYHOLD_in;
  wire TXDLYOVRDEN_in;
  wire TXDLYSRESET_in;
  wire TXDLYUPDOWN_in;
  wire TXELECIDLE_in;
  wire TXGBSEQSYNC_in;
  wire TXMUXDCDEXHOLD_in;
  wire TXMUXDCDORWREN_in;
  wire TXPCSRESET_in;
  wire TXPHALIGNEN_in;
  wire TXPHALIGN_in;
  wire TXPHDLYPD_in;
  wire TXPHDLYRESET_in;
  wire TXPHDLYTSTCLK_in;
  wire TXPHINIT_in;
  wire TXPHOVRDEN_in;
  wire TXPIPPMEN_in;
  wire TXPIPPMOVRDEN_in;
  wire TXPIPPMPD_in;
  wire TXPIPPMSEL_in;
  wire TXPISOPD_in;
  wire TXPMARESET_in;
  wire TXPOLARITY_in;
  wire TXPRBSFORCEERR_in;
  wire TXPROGDIVRESET_in;
  wire TXSYNCALLIN_in;
  wire TXSYNCIN_in;
  wire TXSYNCMODE_in;
  wire TXUSERRDY_in;
  wire TXUSRCLK2_in;
  wire TXUSRCLK_in;
  wire [15:0] DRPDI_in;
  wire [15:0] GTRSVD_in;
  wire [15:0] PCSRSVDIN_in;
  wire [17:0] PMASCANIN_in;
  wire [18:0] SCANIN_in;
  wire [19:0] TSTIN_in;
  wire [1:0] RXELECIDLEMODE_in;
  wire [1:0] RXMONITORSEL_in;
  wire [1:0] RXPD_in;
  wire [1:0] RXPLLCLKSEL_in;
  wire [1:0] RXSYSCLKSEL_in;
  wire [1:0] TXAXISTSOF_in;
  wire [1:0] TXPD_in;
  wire [1:0] TXPLLCLKSEL_in;
  wire [1:0] TXSYSCLKSEL_in;
  wire [2:0] CPLLREFCLKSEL_in;
  wire [2:0] LOOPBACK_in;
  wire [2:0] RXOUTCLKSEL_in;
  wire [2:0] TXOUTCLKSEL_in;
  wire [39:0] TXRAWDATA_in;
  wire [3:0] RXDFECFOKFCNUM_in;
  wire [3:0] RXPRBSSEL_in;
  wire [3:0] TXPRBSSEL_in;
  wire [4:0] TSTPD_in;
  wire [4:0] TXAXISTTERM_in;
  wire [4:0] TXDIFFCTRL_in;
  wire [4:0] TXPIPPMSTEPSIZE_in;
  wire [4:0] TXPOSTCURSOR_in;
  wire [4:0] TXPRECURSOR_in;
  wire [63:0] TXAXISTDATA_in;
  wire [6:0] RXCKCALSTART_in;
  wire [6:0] TXMAINCURSOR_in;
  wire [7:0] TXAXISTLAST_in;
  wire [7:0] TXAXISTPRE_in;
  wire [8:0] CTLRXPAUSEACK_in;
  wire [8:0] CTLTXPAUSEREQ_in;
  wire [9:0] DRPADDR_in;

`ifdef XIL_TIMING
  wire CFGRESET_delay;
  wire CPLLPD_delay;
  wire CTLTXRESENDPAUSE_delay;
  wire DMONFIFORESET_delay;
  wire DRPCLK_delay;
  wire DRPEN_delay;
  wire DRPRST_delay;
  wire DRPWE_delay;
  wire RESETOVRD_delay;
  wire RXLPMEN_delay;
  wire RXPHALIGN_delay;
  wire RXUSRCLK_delay;
  wire TXAXISTERR_delay;
  wire TXAXISTPOISON_delay;
  wire TXAXISTVALID_delay;
  wire TXDLYBYPASS_delay;
  wire TXDLYHOLD_delay;
  wire TXDLYUPDOWN_delay;
  wire TXGBSEQSYNC_delay;
  wire TXPHALIGN_delay;
  wire TXPHDLYPD_delay;
  wire TXPHINIT_delay;
  wire TXPIPPMEN_delay;
  wire TXPIPPMOVRDEN_delay;
  wire TXPIPPMPD_delay;
  wire TXPOLARITY_delay;
  wire TXPRBSFORCEERR_delay;
  wire TXUSRCLK_delay;
  wire [15:0] DRPDI_delay;
  wire [15:0] PCSRSVDIN_delay;
  wire [19:0] TSTIN_delay;
  wire [1:0] RXELECIDLEMODE_delay;
  wire [1:0] TXAXISTSOF_delay;
  wire [2:0] LOOPBACK_delay;
  wire [39:0] TXRAWDATA_delay;
  wire [3:0] TXPRBSSEL_delay;
  wire [4:0] TXAXISTTERM_delay;
  wire [4:0] TXPIPPMSTEPSIZE_delay;
  wire [4:0] TXPOSTCURSOR_delay;
  wire [63:0] TXAXISTDATA_delay;
  wire [6:0] TXMAINCURSOR_delay;
  wire [7:0] TXAXISTLAST_delay;
  wire [7:0] TXAXISTPRE_delay;
  wire [8:0] CTLRXPAUSEACK_delay;
  wire [8:0] CTLTXPAUSEREQ_delay;
  wire [9:0] DRPADDR_delay;
`endif

  assign CPLLFBCLKLOST = CPLLFBCLKLOST_out;
  assign CPLLLOCK = CPLLLOCK_out;
  assign CPLLREFCLKLOST = CPLLREFCLKLOST_out;
  assign DMONITOROUT = DMONITOROUT_out;
  assign DMONITOROUTCLK = DMONITOROUTCLK_out;
  assign DRPDO = DRPDO_out;
  assign DRPRDY = DRPRDY_out;
  assign EYESCANDATAERROR = EYESCANDATAERROR_out;
  assign GTFTXN = GTFTXN_out;
  assign GTFTXP = GTFTXP_out;
  assign GTPOWERGOOD = GTPOWERGOOD_out;
  assign GTREFCLKMONITOR = GTREFCLKMONITOR_out;
  assign PCSRSVDOUT = PCSRSVDOUT_out;
  assign PINRSRVDAS = PINRSRVDAS_out;
  assign RESETEXCEPTION = RESETEXCEPTION_out;
  assign RXAXISTDATA = RXAXISTDATA_out;
  assign RXAXISTERR = RXAXISTERR_out;
  assign RXAXISTLAST = RXAXISTLAST_out;
  assign RXAXISTPRE = RXAXISTPRE_out;
  assign RXAXISTSOF = RXAXISTSOF_out;
  assign RXAXISTTERM = RXAXISTTERM_out;
  assign RXAXISTVALID = RXAXISTVALID_out;
  assign RXBITSLIP = RXBITSLIP_out;
  assign RXCDRLOCK = RXCDRLOCK_out;
  assign RXCDRPHDONE = RXCDRPHDONE_out;
  assign RXCKCALDONE = RXCKCALDONE_out;
  assign RXDLYSRESETDONE = RXDLYSRESETDONE_out;
  assign RXELECIDLE = RXELECIDLE_out;
  assign RXGBSEQSTART = RXGBSEQSTART_out;
  assign RXMONITOROUT = RXMONITOROUT_out;
  assign RXOSINTDONE = RXOSINTDONE_out;
  assign RXOSINTSTARTED = RXOSINTSTARTED_out;
  assign RXOSINTSTROBEDONE = RXOSINTSTROBEDONE_out;
  assign RXOSINTSTROBESTARTED = RXOSINTSTROBESTARTED_out;
  assign RXOUTCLK = RXOUTCLK_out;
  assign RXOUTCLKFABRIC = RXOUTCLKFABRIC_out;
  assign RXOUTCLKPCS = RXOUTCLKPCS_out;
  assign RXPHALIGNDONE = RXPHALIGNDONE_out;
  assign RXPHALIGNERR = RXPHALIGNERR_out;
  assign RXPMARESETDONE = RXPMARESETDONE_out;
  assign RXPRBSERR = RXPRBSERR_out;
  assign RXPRBSLOCKED = RXPRBSLOCKED_out;
  assign RXPRGDIVRESETDONE = RXPRGDIVRESETDONE_out;
  assign RXPTPSOP = RXPTPSOP_out;
  assign RXPTPSOPPOS = RXPTPSOPPOS_out;
  assign RXRAWDATA = RXRAWDATA_out;
  assign RXRECCLKOUT = RXRECCLKOUT_out;
  assign RXRESETDONE = RXRESETDONE_out;
  assign RXSLIPDONE = RXSLIPDONE_out;
  assign RXSLIPOUTCLKRDY = RXSLIPOUTCLKRDY_out;
  assign RXSLIPPMARDY = RXSLIPPMARDY_out;
  assign RXSYNCDONE = RXSYNCDONE_out;
  assign RXSYNCOUT = RXSYNCOUT_out;
  assign STATRXBADCODE = STATRXBADCODE_out;
  assign STATRXBADFCS = STATRXBADFCS_out;
  assign STATRXBADPREAMBLE = STATRXBADPREAMBLE_out;
  assign STATRXBADSFD = STATRXBADSFD_out;
  assign STATRXBLOCKLOCK = STATRXBLOCKLOCK_out;
  assign STATRXBROADCAST = STATRXBROADCAST_out;
  assign STATRXBYTES = STATRXBYTES_out;
  assign STATRXFCSERR = STATRXFCSERR_out;
  assign STATRXFRAMINGERR = STATRXFRAMINGERR_out;
  assign STATRXGOTSIGNALOS = STATRXGOTSIGNALOS_out;
  assign STATRXHIBER = STATRXHIBER_out;
  assign STATRXINRANGEERR = STATRXINRANGEERR_out;
  assign STATRXINTERNALLOCALFAULT = STATRXINTERNALLOCALFAULT_out;
  assign STATRXLOCALFAULT = STATRXLOCALFAULT_out;
  assign STATRXMULTICAST = STATRXMULTICAST_out;
  assign STATRXPAUSEQUANTA = STATRXPAUSEQUANTA_out;
  assign STATRXPAUSEREQ = STATRXPAUSEREQ_out;
  assign STATRXPAUSEVALID = STATRXPAUSEVALID_out;
  assign STATRXPKT = STATRXPKT_out;
  assign STATRXPKTERR = STATRXPKTERR_out;
  assign STATRXRECEIVEDLOCALFAULT = STATRXRECEIVEDLOCALFAULT_out;
  assign STATRXREMOTEFAULT = STATRXREMOTEFAULT_out;
  assign STATRXSTATUS = STATRXSTATUS_out;
  assign STATRXSTOMPEDFCS = STATRXSTOMPEDFCS_out;
  assign STATRXTESTPATTERNMISMATCH = STATRXTESTPATTERNMISMATCH_out;
  assign STATRXTRUNCATED = STATRXTRUNCATED_out;
  assign STATRXUNICAST = STATRXUNICAST_out;
  assign STATRXVALIDCTRLCODE = STATRXVALIDCTRLCODE_out;
  assign STATRXVLAN = STATRXVLAN_out;
  assign STATTXBADFCS = STATTXBADFCS_out;
  assign STATTXBROADCAST = STATTXBROADCAST_out;
  assign STATTXBYTES = STATTXBYTES_out;
  assign STATTXFCSERR = STATTXFCSERR_out;
  assign STATTXMULTICAST = STATTXMULTICAST_out;
  assign STATTXPAUSEVALID = STATTXPAUSEVALID_out;
  assign STATTXPKT = STATTXPKT_out;
  assign STATTXPKTERR = STATTXPKTERR_out;
  assign STATTXUNICAST = STATTXUNICAST_out;
  assign STATTXVLAN = STATTXVLAN_out;
  assign TXAXISTREADY = TXAXISTREADY_out;
  assign TXDCCDONE = TXDCCDONE_out;
  assign TXDLYSRESETDONE = TXDLYSRESETDONE_out;
  assign TXGBSEQSTART = TXGBSEQSTART_out;
  assign TXOUTCLK = TXOUTCLK_out;
  assign TXOUTCLKFABRIC = TXOUTCLKFABRIC_out;
  assign TXOUTCLKPCS = TXOUTCLKPCS_out;
  assign TXPHALIGNDONE = TXPHALIGNDONE_out;
  assign TXPHINITDONE = TXPHINITDONE_out;
  assign TXPMARESETDONE = TXPMARESETDONE_out;
  assign TXPRGDIVRESETDONE = TXPRGDIVRESETDONE_out;
  assign TXPTPSOP = TXPTPSOP_out;
  assign TXPTPSOPPOS = TXPTPSOPPOS_out;
  assign TXRESETDONE = TXRESETDONE_out;
  assign TXSYNCDONE = TXSYNCDONE_out;
  assign TXSYNCOUT = TXSYNCOUT_out;
  assign TXUNFOUT = TXUNFOUT_out;

`ifdef XIL_TIMING
  assign CFGRESET_in = (CFGRESET !== 1'bz) && CFGRESET_delay; // rv 0
  assign CPLLPD_in = (CPLLPD !== 1'bz) && CPLLPD_delay; // rv 0
  assign CTLRXPAUSEACK_in = CTLRXPAUSEACK_delay;
  assign CTLTXPAUSEREQ_in = CTLTXPAUSEREQ_delay;
  assign CTLTXRESENDPAUSE_in = CTLTXRESENDPAUSE_delay;
  assign DMONFIFORESET_in = (DMONFIFORESET !== 1'bz) && DMONFIFORESET_delay; // rv 0
  assign DRPADDR_in[0] = (DRPADDR[0] !== 1'bz) && DRPADDR_delay[0]; // rv 0
  assign DRPADDR_in[1] = (DRPADDR[1] !== 1'bz) && DRPADDR_delay[1]; // rv 0
  assign DRPADDR_in[2] = (DRPADDR[2] !== 1'bz) && DRPADDR_delay[2]; // rv 0
  assign DRPADDR_in[3] = (DRPADDR[3] !== 1'bz) && DRPADDR_delay[3]; // rv 0
  assign DRPADDR_in[4] = (DRPADDR[4] !== 1'bz) && DRPADDR_delay[4]; // rv 0
  assign DRPADDR_in[5] = (DRPADDR[5] !== 1'bz) && DRPADDR_delay[5]; // rv 0
  assign DRPADDR_in[6] = (DRPADDR[6] !== 1'bz) && DRPADDR_delay[6]; // rv 0
  assign DRPADDR_in[7] = (DRPADDR[7] !== 1'bz) && DRPADDR_delay[7]; // rv 0
  assign DRPADDR_in[8] = (DRPADDR[8] !== 1'bz) && DRPADDR_delay[8]; // rv 0
  assign DRPADDR_in[9] = (DRPADDR[9] !== 1'bz) && DRPADDR_delay[9]; // rv 0
  assign DRPCLK_in = (DRPCLK !== 1'bz) && DRPCLK_delay; // rv 0
  assign DRPDI_in[0] = (DRPDI[0] !== 1'bz) && DRPDI_delay[0]; // rv 0
  assign DRPDI_in[10] = (DRPDI[10] !== 1'bz) && DRPDI_delay[10]; // rv 0
  assign DRPDI_in[11] = (DRPDI[11] !== 1'bz) && DRPDI_delay[11]; // rv 0
  assign DRPDI_in[12] = (DRPDI[12] !== 1'bz) && DRPDI_delay[12]; // rv 0
  assign DRPDI_in[13] = (DRPDI[13] !== 1'bz) && DRPDI_delay[13]; // rv 0
  assign DRPDI_in[14] = (DRPDI[14] !== 1'bz) && DRPDI_delay[14]; // rv 0
  assign DRPDI_in[15] = (DRPDI[15] !== 1'bz) && DRPDI_delay[15]; // rv 0
  assign DRPDI_in[1] = (DRPDI[1] !== 1'bz) && DRPDI_delay[1]; // rv 0
  assign DRPDI_in[2] = (DRPDI[2] !== 1'bz) && DRPDI_delay[2]; // rv 0
  assign DRPDI_in[3] = (DRPDI[3] !== 1'bz) && DRPDI_delay[3]; // rv 0
  assign DRPDI_in[4] = (DRPDI[4] !== 1'bz) && DRPDI_delay[4]; // rv 0
  assign DRPDI_in[5] = (DRPDI[5] !== 1'bz) && DRPDI_delay[5]; // rv 0
  assign DRPDI_in[6] = (DRPDI[6] !== 1'bz) && DRPDI_delay[6]; // rv 0
  assign DRPDI_in[7] = (DRPDI[7] !== 1'bz) && DRPDI_delay[7]; // rv 0
  assign DRPDI_in[8] = (DRPDI[8] !== 1'bz) && DRPDI_delay[8]; // rv 0
  assign DRPDI_in[9] = (DRPDI[9] !== 1'bz) && DRPDI_delay[9]; // rv 0
  assign DRPEN_in = (DRPEN !== 1'bz) && DRPEN_delay; // rv 0
  assign DRPRST_in = (DRPRST === 1'bz) || DRPRST_delay; // rv 1
  assign DRPWE_in = (DRPWE !== 1'bz) && DRPWE_delay; // rv 0
  assign LOOPBACK_in[0] = (LOOPBACK[0] !== 1'bz) && LOOPBACK_delay[0]; // rv 0
  assign LOOPBACK_in[1] = (LOOPBACK[1] !== 1'bz) && LOOPBACK_delay[1]; // rv 0
  assign LOOPBACK_in[2] = (LOOPBACK[2] !== 1'bz) && LOOPBACK_delay[2]; // rv 0
  assign PCSRSVDIN_in[0] = (PCSRSVDIN[0] === 1'bz) || PCSRSVDIN_delay[0]; // rv 1
  assign PCSRSVDIN_in[10] = (PCSRSVDIN[10] !== 1'bz) && PCSRSVDIN_delay[10]; // rv 0
  assign PCSRSVDIN_in[11] = (PCSRSVDIN[11] !== 1'bz) && PCSRSVDIN_delay[11]; // rv 0
  assign PCSRSVDIN_in[12] = (PCSRSVDIN[12] !== 1'bz) && PCSRSVDIN_delay[12]; // rv 0
  assign PCSRSVDIN_in[13] = (PCSRSVDIN[13] !== 1'bz) && PCSRSVDIN_delay[13]; // rv 0
  assign PCSRSVDIN_in[14] = (PCSRSVDIN[14] !== 1'bz) && PCSRSVDIN_delay[14]; // rv 0
  assign PCSRSVDIN_in[15] = (PCSRSVDIN[15] !== 1'bz) && PCSRSVDIN_delay[15]; // rv 0
  assign PCSRSVDIN_in[1] = (PCSRSVDIN[1] !== 1'bz) && PCSRSVDIN_delay[1]; // rv 0
  assign PCSRSVDIN_in[2] = (PCSRSVDIN[2] !== 1'bz) && PCSRSVDIN_delay[2]; // rv 0
  assign PCSRSVDIN_in[3] = (PCSRSVDIN[3] !== 1'bz) && PCSRSVDIN_delay[3]; // rv 0
  assign PCSRSVDIN_in[4] = (PCSRSVDIN[4] !== 1'bz) && PCSRSVDIN_delay[4]; // rv 0
  assign PCSRSVDIN_in[5] = (PCSRSVDIN[5] !== 1'bz) && PCSRSVDIN_delay[5]; // rv 0
  assign PCSRSVDIN_in[6] = (PCSRSVDIN[6] !== 1'bz) && PCSRSVDIN_delay[6]; // rv 0
  assign PCSRSVDIN_in[7] = (PCSRSVDIN[7] !== 1'bz) && PCSRSVDIN_delay[7]; // rv 0
  assign PCSRSVDIN_in[8] = (PCSRSVDIN[8] !== 1'bz) && PCSRSVDIN_delay[8]; // rv 0
  assign PCSRSVDIN_in[9] = (PCSRSVDIN[9] !== 1'bz) && PCSRSVDIN_delay[9]; // rv 0
  assign RESETOVRD_in = (RESETOVRD !== 1'bz) && RESETOVRD_delay; // rv 0
  assign RXELECIDLEMODE_in = RXELECIDLEMODE_delay;
  assign RXLPMEN_in = (RXLPMEN !== 1'bz) && RXLPMEN_delay; // rv 0
  assign RXPHALIGN_in = (RXPHALIGN !== 1'bz) && RXPHALIGN_delay; // rv 0
  assign RXUSRCLK_in = (RXUSRCLK !== 1'bz) && RXUSRCLK_delay; // rv 0
  assign TSTIN_in[0] = (TSTIN[0] !== 1'bz) && TSTIN_delay[0]; // rv 0
  assign TSTIN_in[10] = (TSTIN[10] !== 1'bz) && TSTIN_delay[10]; // rv 0
  assign TSTIN_in[11] = (TSTIN[11] !== 1'bz) && TSTIN_delay[11]; // rv 0
  assign TSTIN_in[12] = (TSTIN[12] !== 1'bz) && TSTIN_delay[12]; // rv 0
  assign TSTIN_in[13] = (TSTIN[13] !== 1'bz) && TSTIN_delay[13]; // rv 0
  assign TSTIN_in[14] = (TSTIN[14] !== 1'bz) && TSTIN_delay[14]; // rv 0
  assign TSTIN_in[15] = (TSTIN[15] !== 1'bz) && TSTIN_delay[15]; // rv 0
  assign TSTIN_in[16] = (TSTIN[16] !== 1'bz) && TSTIN_delay[16]; // rv 0
  assign TSTIN_in[17] = (TSTIN[17] !== 1'bz) && TSTIN_delay[17]; // rv 0
  assign TSTIN_in[18] = (TSTIN[18] !== 1'bz) && TSTIN_delay[18]; // rv 0
  assign TSTIN_in[19] = (TSTIN[19] !== 1'bz) && TSTIN_delay[19]; // rv 0
  assign TSTIN_in[1] = (TSTIN[1] !== 1'bz) && TSTIN_delay[1]; // rv 0
  assign TSTIN_in[2] = (TSTIN[2] !== 1'bz) && TSTIN_delay[2]; // rv 0
  assign TSTIN_in[3] = (TSTIN[3] !== 1'bz) && TSTIN_delay[3]; // rv 0
  assign TSTIN_in[4] = (TSTIN[4] !== 1'bz) && TSTIN_delay[4]; // rv 0
  assign TSTIN_in[5] = (TSTIN[5] !== 1'bz) && TSTIN_delay[5]; // rv 0
  assign TSTIN_in[6] = (TSTIN[6] !== 1'bz) && TSTIN_delay[6]; // rv 0
  assign TSTIN_in[7] = (TSTIN[7] !== 1'bz) && TSTIN_delay[7]; // rv 0
  assign TSTIN_in[8] = (TSTIN[8] !== 1'bz) && TSTIN_delay[8]; // rv 0
  assign TSTIN_in[9] = (TSTIN[9] !== 1'bz) && TSTIN_delay[9]; // rv 0
  assign TXAXISTDATA_in = TXAXISTDATA_delay;
  assign TXAXISTERR_in = TXAXISTERR_delay;
  assign TXAXISTLAST_in = TXAXISTLAST_delay;
  assign TXAXISTPOISON_in = TXAXISTPOISON_delay;
  assign TXAXISTPRE_in = TXAXISTPRE_delay;
  assign TXAXISTSOF_in = TXAXISTSOF_delay;
  assign TXAXISTTERM_in = TXAXISTTERM_delay;
  assign TXAXISTVALID_in = TXAXISTVALID_delay;
  assign TXDLYBYPASS_in = (TXDLYBYPASS !== 1'bz) && TXDLYBYPASS_delay; // rv 0
  assign TXDLYHOLD_in = (TXDLYHOLD !== 1'bz) && TXDLYHOLD_delay; // rv 0
  assign TXDLYUPDOWN_in = (TXDLYUPDOWN !== 1'bz) && TXDLYUPDOWN_delay; // rv 0
  assign TXGBSEQSYNC_in = TXGBSEQSYNC_delay;
  assign TXMAINCURSOR_in[0] = (TXMAINCURSOR[0] !== 1'bz) && TXMAINCURSOR_delay[0]; // rv 0
  assign TXMAINCURSOR_in[1] = (TXMAINCURSOR[1] !== 1'bz) && TXMAINCURSOR_delay[1]; // rv 0
  assign TXMAINCURSOR_in[2] = (TXMAINCURSOR[2] !== 1'bz) && TXMAINCURSOR_delay[2]; // rv 0
  assign TXMAINCURSOR_in[3] = (TXMAINCURSOR[3] !== 1'bz) && TXMAINCURSOR_delay[3]; // rv 0
  assign TXMAINCURSOR_in[4] = (TXMAINCURSOR[4] !== 1'bz) && TXMAINCURSOR_delay[4]; // rv 0
  assign TXMAINCURSOR_in[5] = (TXMAINCURSOR[5] !== 1'bz) && TXMAINCURSOR_delay[5]; // rv 0
  assign TXMAINCURSOR_in[6] = (TXMAINCURSOR[6] !== 1'bz) && TXMAINCURSOR_delay[6]; // rv 0
  assign TXPHALIGN_in = (TXPHALIGN !== 1'bz) && TXPHALIGN_delay; // rv 0
  assign TXPHDLYPD_in = (TXPHDLYPD !== 1'bz) && TXPHDLYPD_delay; // rv 0
  assign TXPHINIT_in = (TXPHINIT !== 1'bz) && TXPHINIT_delay; // rv 0
  assign TXPIPPMEN_in = (TXPIPPMEN !== 1'bz) && TXPIPPMEN_delay; // rv 0
  assign TXPIPPMOVRDEN_in = (TXPIPPMOVRDEN !== 1'bz) && TXPIPPMOVRDEN_delay; // rv 0
  assign TXPIPPMPD_in = (TXPIPPMPD !== 1'bz) && TXPIPPMPD_delay; // rv 0
  assign TXPIPPMSTEPSIZE_in[0] = (TXPIPPMSTEPSIZE[0] !== 1'bz) && TXPIPPMSTEPSIZE_delay[0]; // rv 0
  assign TXPIPPMSTEPSIZE_in[1] = (TXPIPPMSTEPSIZE[1] !== 1'bz) && TXPIPPMSTEPSIZE_delay[1]; // rv 0
  assign TXPIPPMSTEPSIZE_in[2] = (TXPIPPMSTEPSIZE[2] !== 1'bz) && TXPIPPMSTEPSIZE_delay[2]; // rv 0
  assign TXPIPPMSTEPSIZE_in[3] = (TXPIPPMSTEPSIZE[3] !== 1'bz) && TXPIPPMSTEPSIZE_delay[3]; // rv 0
  assign TXPIPPMSTEPSIZE_in[4] = (TXPIPPMSTEPSIZE[4] !== 1'bz) && TXPIPPMSTEPSIZE_delay[4]; // rv 0
  assign TXPOLARITY_in = (TXPOLARITY !== 1'bz) && TXPOLARITY_delay; // rv 0
  assign TXPOSTCURSOR_in[0] = (TXPOSTCURSOR[0] !== 1'bz) && TXPOSTCURSOR_delay[0]; // rv 0
  assign TXPOSTCURSOR_in[1] = (TXPOSTCURSOR[1] !== 1'bz) && TXPOSTCURSOR_delay[1]; // rv 0
  assign TXPOSTCURSOR_in[2] = (TXPOSTCURSOR[2] !== 1'bz) && TXPOSTCURSOR_delay[2]; // rv 0
  assign TXPOSTCURSOR_in[3] = (TXPOSTCURSOR[3] !== 1'bz) && TXPOSTCURSOR_delay[3]; // rv 0
  assign TXPOSTCURSOR_in[4] = (TXPOSTCURSOR[4] !== 1'bz) && TXPOSTCURSOR_delay[4]; // rv 0
  assign TXPRBSFORCEERR_in = (TXPRBSFORCEERR !== 1'bz) && TXPRBSFORCEERR_delay; // rv 0
  assign TXPRBSSEL_in[0] = (TXPRBSSEL[0] !== 1'bz) && TXPRBSSEL_delay[0]; // rv 0
  assign TXPRBSSEL_in[1] = (TXPRBSSEL[1] !== 1'bz) && TXPRBSSEL_delay[1]; // rv 0
  assign TXPRBSSEL_in[2] = (TXPRBSSEL[2] !== 1'bz) && TXPRBSSEL_delay[2]; // rv 0
  assign TXPRBSSEL_in[3] = (TXPRBSSEL[3] !== 1'bz) && TXPRBSSEL_delay[3]; // rv 0
  assign TXRAWDATA_in[0] = (TXRAWDATA[0] !== 1'bz) && TXRAWDATA_delay[0]; // rv 0
  assign TXRAWDATA_in[10] = (TXRAWDATA[10] !== 1'bz) && TXRAWDATA_delay[10]; // rv 0
  assign TXRAWDATA_in[11] = (TXRAWDATA[11] !== 1'bz) && TXRAWDATA_delay[11]; // rv 0
  assign TXRAWDATA_in[12] = (TXRAWDATA[12] !== 1'bz) && TXRAWDATA_delay[12]; // rv 0
  assign TXRAWDATA_in[13] = (TXRAWDATA[13] !== 1'bz) && TXRAWDATA_delay[13]; // rv 0
  assign TXRAWDATA_in[14] = (TXRAWDATA[14] !== 1'bz) && TXRAWDATA_delay[14]; // rv 0
  assign TXRAWDATA_in[15] = (TXRAWDATA[15] !== 1'bz) && TXRAWDATA_delay[15]; // rv 0
  assign TXRAWDATA_in[16] = (TXRAWDATA[16] !== 1'bz) && TXRAWDATA_delay[16]; // rv 0
  assign TXRAWDATA_in[17] = (TXRAWDATA[17] !== 1'bz) && TXRAWDATA_delay[17]; // rv 0
  assign TXRAWDATA_in[18] = (TXRAWDATA[18] !== 1'bz) && TXRAWDATA_delay[18]; // rv 0
  assign TXRAWDATA_in[19] = (TXRAWDATA[19] !== 1'bz) && TXRAWDATA_delay[19]; // rv 0
  assign TXRAWDATA_in[1] = (TXRAWDATA[1] !== 1'bz) && TXRAWDATA_delay[1]; // rv 0
  assign TXRAWDATA_in[20] = (TXRAWDATA[20] !== 1'bz) && TXRAWDATA_delay[20]; // rv 0
  assign TXRAWDATA_in[21] = (TXRAWDATA[21] !== 1'bz) && TXRAWDATA_delay[21]; // rv 0
  assign TXRAWDATA_in[22] = (TXRAWDATA[22] !== 1'bz) && TXRAWDATA_delay[22]; // rv 0
  assign TXRAWDATA_in[23] = (TXRAWDATA[23] !== 1'bz) && TXRAWDATA_delay[23]; // rv 0
  assign TXRAWDATA_in[24] = (TXRAWDATA[24] !== 1'bz) && TXRAWDATA_delay[24]; // rv 0
  assign TXRAWDATA_in[25] = (TXRAWDATA[25] !== 1'bz) && TXRAWDATA_delay[25]; // rv 0
  assign TXRAWDATA_in[26] = (TXRAWDATA[26] !== 1'bz) && TXRAWDATA_delay[26]; // rv 0
  assign TXRAWDATA_in[27] = (TXRAWDATA[27] !== 1'bz) && TXRAWDATA_delay[27]; // rv 0
  assign TXRAWDATA_in[28] = (TXRAWDATA[28] !== 1'bz) && TXRAWDATA_delay[28]; // rv 0
  assign TXRAWDATA_in[29] = (TXRAWDATA[29] !== 1'bz) && TXRAWDATA_delay[29]; // rv 0
  assign TXRAWDATA_in[2] = (TXRAWDATA[2] !== 1'bz) && TXRAWDATA_delay[2]; // rv 0
  assign TXRAWDATA_in[30] = (TXRAWDATA[30] !== 1'bz) && TXRAWDATA_delay[30]; // rv 0
  assign TXRAWDATA_in[31] = (TXRAWDATA[31] !== 1'bz) && TXRAWDATA_delay[31]; // rv 0
  assign TXRAWDATA_in[32] = (TXRAWDATA[32] !== 1'bz) && TXRAWDATA_delay[32]; // rv 0
  assign TXRAWDATA_in[33] = (TXRAWDATA[33] !== 1'bz) && TXRAWDATA_delay[33]; // rv 0
  assign TXRAWDATA_in[34] = (TXRAWDATA[34] !== 1'bz) && TXRAWDATA_delay[34]; // rv 0
  assign TXRAWDATA_in[35] = (TXRAWDATA[35] !== 1'bz) && TXRAWDATA_delay[35]; // rv 0
  assign TXRAWDATA_in[36] = (TXRAWDATA[36] !== 1'bz) && TXRAWDATA_delay[36]; // rv 0
  assign TXRAWDATA_in[37] = (TXRAWDATA[37] !== 1'bz) && TXRAWDATA_delay[37]; // rv 0
  assign TXRAWDATA_in[38] = (TXRAWDATA[38] !== 1'bz) && TXRAWDATA_delay[38]; // rv 0
  assign TXRAWDATA_in[39] = (TXRAWDATA[39] !== 1'bz) && TXRAWDATA_delay[39]; // rv 0
  assign TXRAWDATA_in[3] = (TXRAWDATA[3] !== 1'bz) && TXRAWDATA_delay[3]; // rv 0
  assign TXRAWDATA_in[4] = (TXRAWDATA[4] !== 1'bz) && TXRAWDATA_delay[4]; // rv 0
  assign TXRAWDATA_in[5] = (TXRAWDATA[5] !== 1'bz) && TXRAWDATA_delay[5]; // rv 0
  assign TXRAWDATA_in[6] = (TXRAWDATA[6] !== 1'bz) && TXRAWDATA_delay[6]; // rv 0
  assign TXRAWDATA_in[7] = (TXRAWDATA[7] !== 1'bz) && TXRAWDATA_delay[7]; // rv 0
  assign TXRAWDATA_in[8] = (TXRAWDATA[8] !== 1'bz) && TXRAWDATA_delay[8]; // rv 0
  assign TXRAWDATA_in[9] = (TXRAWDATA[9] !== 1'bz) && TXRAWDATA_delay[9]; // rv 0
  assign TXUSRCLK_in = (TXUSRCLK !== 1'bz) && TXUSRCLK_delay; // rv 0
`else
  assign CFGRESET_in = (CFGRESET !== 1'bz) && CFGRESET; // rv 0
  assign CPLLPD_in = (CPLLPD !== 1'bz) && CPLLPD; // rv 0
  assign CTLRXPAUSEACK_in = CTLRXPAUSEACK;
  assign CTLTXPAUSEREQ_in = CTLTXPAUSEREQ;
  assign CTLTXRESENDPAUSE_in = CTLTXRESENDPAUSE;
  assign DMONFIFORESET_in = (DMONFIFORESET !== 1'bz) && DMONFIFORESET; // rv 0
  assign DRPADDR_in[0] = (DRPADDR[0] !== 1'bz) && DRPADDR[0]; // rv 0
  assign DRPADDR_in[1] = (DRPADDR[1] !== 1'bz) && DRPADDR[1]; // rv 0
  assign DRPADDR_in[2] = (DRPADDR[2] !== 1'bz) && DRPADDR[2]; // rv 0
  assign DRPADDR_in[3] = (DRPADDR[3] !== 1'bz) && DRPADDR[3]; // rv 0
  assign DRPADDR_in[4] = (DRPADDR[4] !== 1'bz) && DRPADDR[4]; // rv 0
  assign DRPADDR_in[5] = (DRPADDR[5] !== 1'bz) && DRPADDR[5]; // rv 0
  assign DRPADDR_in[6] = (DRPADDR[6] !== 1'bz) && DRPADDR[6]; // rv 0
  assign DRPADDR_in[7] = (DRPADDR[7] !== 1'bz) && DRPADDR[7]; // rv 0
  assign DRPADDR_in[8] = (DRPADDR[8] !== 1'bz) && DRPADDR[8]; // rv 0
  assign DRPADDR_in[9] = (DRPADDR[9] !== 1'bz) && DRPADDR[9]; // rv 0
  assign DRPCLK_in = (DRPCLK !== 1'bz) && DRPCLK; // rv 0
  assign DRPDI_in[0] = (DRPDI[0] !== 1'bz) && DRPDI[0]; // rv 0
  assign DRPDI_in[10] = (DRPDI[10] !== 1'bz) && DRPDI[10]; // rv 0
  assign DRPDI_in[11] = (DRPDI[11] !== 1'bz) && DRPDI[11]; // rv 0
  assign DRPDI_in[12] = (DRPDI[12] !== 1'bz) && DRPDI[12]; // rv 0
  assign DRPDI_in[13] = (DRPDI[13] !== 1'bz) && DRPDI[13]; // rv 0
  assign DRPDI_in[14] = (DRPDI[14] !== 1'bz) && DRPDI[14]; // rv 0
  assign DRPDI_in[15] = (DRPDI[15] !== 1'bz) && DRPDI[15]; // rv 0
  assign DRPDI_in[1] = (DRPDI[1] !== 1'bz) && DRPDI[1]; // rv 0
  assign DRPDI_in[2] = (DRPDI[2] !== 1'bz) && DRPDI[2]; // rv 0
  assign DRPDI_in[3] = (DRPDI[3] !== 1'bz) && DRPDI[3]; // rv 0
  assign DRPDI_in[4] = (DRPDI[4] !== 1'bz) && DRPDI[4]; // rv 0
  assign DRPDI_in[5] = (DRPDI[5] !== 1'bz) && DRPDI[5]; // rv 0
  assign DRPDI_in[6] = (DRPDI[6] !== 1'bz) && DRPDI[6]; // rv 0
  assign DRPDI_in[7] = (DRPDI[7] !== 1'bz) && DRPDI[7]; // rv 0
  assign DRPDI_in[8] = (DRPDI[8] !== 1'bz) && DRPDI[8]; // rv 0
  assign DRPDI_in[9] = (DRPDI[9] !== 1'bz) && DRPDI[9]; // rv 0
  assign DRPEN_in = (DRPEN !== 1'bz) && DRPEN; // rv 0
  assign DRPRST_in = (DRPRST === 1'bz) || DRPRST; // rv 1
  assign DRPWE_in = (DRPWE !== 1'bz) && DRPWE; // rv 0
  assign LOOPBACK_in[0] = (LOOPBACK[0] !== 1'bz) && LOOPBACK[0]; // rv 0
  assign LOOPBACK_in[1] = (LOOPBACK[1] !== 1'bz) && LOOPBACK[1]; // rv 0
  assign LOOPBACK_in[2] = (LOOPBACK[2] !== 1'bz) && LOOPBACK[2]; // rv 0
  assign PCSRSVDIN_in[0] = (PCSRSVDIN[0] === 1'bz) || PCSRSVDIN[0]; // rv 1
  assign PCSRSVDIN_in[10] = (PCSRSVDIN[10] !== 1'bz) && PCSRSVDIN[10]; // rv 0
  assign PCSRSVDIN_in[11] = (PCSRSVDIN[11] !== 1'bz) && PCSRSVDIN[11]; // rv 0
  assign PCSRSVDIN_in[12] = (PCSRSVDIN[12] !== 1'bz) && PCSRSVDIN[12]; // rv 0
  assign PCSRSVDIN_in[13] = (PCSRSVDIN[13] !== 1'bz) && PCSRSVDIN[13]; // rv 0
  assign PCSRSVDIN_in[14] = (PCSRSVDIN[14] !== 1'bz) && PCSRSVDIN[14]; // rv 0
  assign PCSRSVDIN_in[15] = (PCSRSVDIN[15] !== 1'bz) && PCSRSVDIN[15]; // rv 0
  assign PCSRSVDIN_in[1] = (PCSRSVDIN[1] !== 1'bz) && PCSRSVDIN[1]; // rv 0
  assign PCSRSVDIN_in[2] = (PCSRSVDIN[2] !== 1'bz) && PCSRSVDIN[2]; // rv 0
  assign PCSRSVDIN_in[3] = (PCSRSVDIN[3] !== 1'bz) && PCSRSVDIN[3]; // rv 0
  assign PCSRSVDIN_in[4] = (PCSRSVDIN[4] !== 1'bz) && PCSRSVDIN[4]; // rv 0
  assign PCSRSVDIN_in[5] = (PCSRSVDIN[5] !== 1'bz) && PCSRSVDIN[5]; // rv 0
  assign PCSRSVDIN_in[6] = (PCSRSVDIN[6] !== 1'bz) && PCSRSVDIN[6]; // rv 0
  assign PCSRSVDIN_in[7] = (PCSRSVDIN[7] !== 1'bz) && PCSRSVDIN[7]; // rv 0
  assign PCSRSVDIN_in[8] = (PCSRSVDIN[8] !== 1'bz) && PCSRSVDIN[8]; // rv 0
  assign PCSRSVDIN_in[9] = (PCSRSVDIN[9] !== 1'bz) && PCSRSVDIN[9]; // rv 0
  assign RESETOVRD_in = (RESETOVRD !== 1'bz) && RESETOVRD; // rv 0
  assign RXELECIDLEMODE_in = RXELECIDLEMODE;
  assign RXLPMEN_in = (RXLPMEN !== 1'bz) && RXLPMEN; // rv 0
  assign RXPHALIGN_in = (RXPHALIGN !== 1'bz) && RXPHALIGN; // rv 0
  assign RXUSRCLK_in = (RXUSRCLK !== 1'bz) && RXUSRCLK; // rv 0
  assign TSTIN_in[0] = (TSTIN[0] !== 1'bz) && TSTIN[0]; // rv 0
  assign TSTIN_in[10] = (TSTIN[10] !== 1'bz) && TSTIN[10]; // rv 0
  assign TSTIN_in[11] = (TSTIN[11] !== 1'bz) && TSTIN[11]; // rv 0
  assign TSTIN_in[12] = (TSTIN[12] !== 1'bz) && TSTIN[12]; // rv 0
  assign TSTIN_in[13] = (TSTIN[13] !== 1'bz) && TSTIN[13]; // rv 0
  assign TSTIN_in[14] = (TSTIN[14] !== 1'bz) && TSTIN[14]; // rv 0
  assign TSTIN_in[15] = (TSTIN[15] !== 1'bz) && TSTIN[15]; // rv 0
  assign TSTIN_in[16] = (TSTIN[16] !== 1'bz) && TSTIN[16]; // rv 0
  assign TSTIN_in[17] = (TSTIN[17] !== 1'bz) && TSTIN[17]; // rv 0
  assign TSTIN_in[18] = (TSTIN[18] !== 1'bz) && TSTIN[18]; // rv 0
  assign TSTIN_in[19] = (TSTIN[19] !== 1'bz) && TSTIN[19]; // rv 0
  assign TSTIN_in[1] = (TSTIN[1] !== 1'bz) && TSTIN[1]; // rv 0
  assign TSTIN_in[2] = (TSTIN[2] !== 1'bz) && TSTIN[2]; // rv 0
  assign TSTIN_in[3] = (TSTIN[3] !== 1'bz) && TSTIN[3]; // rv 0
  assign TSTIN_in[4] = (TSTIN[4] !== 1'bz) && TSTIN[4]; // rv 0
  assign TSTIN_in[5] = (TSTIN[5] !== 1'bz) && TSTIN[5]; // rv 0
  assign TSTIN_in[6] = (TSTIN[6] !== 1'bz) && TSTIN[6]; // rv 0
  assign TSTIN_in[7] = (TSTIN[7] !== 1'bz) && TSTIN[7]; // rv 0
  assign TSTIN_in[8] = (TSTIN[8] !== 1'bz) && TSTIN[8]; // rv 0
  assign TSTIN_in[9] = (TSTIN[9] !== 1'bz) && TSTIN[9]; // rv 0
  assign TXAXISTDATA_in = TXAXISTDATA;
  assign TXAXISTERR_in = TXAXISTERR;
  assign TXAXISTLAST_in = TXAXISTLAST;
  assign TXAXISTPOISON_in = TXAXISTPOISON;
  assign TXAXISTPRE_in = TXAXISTPRE;
  assign TXAXISTSOF_in = TXAXISTSOF;
  assign TXAXISTTERM_in = TXAXISTTERM;
  assign TXAXISTVALID_in = TXAXISTVALID;
  assign TXDLYBYPASS_in = (TXDLYBYPASS !== 1'bz) && TXDLYBYPASS; // rv 0
  assign TXDLYHOLD_in = (TXDLYHOLD !== 1'bz) && TXDLYHOLD; // rv 0
  assign TXDLYUPDOWN_in = (TXDLYUPDOWN !== 1'bz) && TXDLYUPDOWN; // rv 0
  assign TXGBSEQSYNC_in = TXGBSEQSYNC;
  assign TXMAINCURSOR_in[0] = (TXMAINCURSOR[0] !== 1'bz) && TXMAINCURSOR[0]; // rv 0
  assign TXMAINCURSOR_in[1] = (TXMAINCURSOR[1] !== 1'bz) && TXMAINCURSOR[1]; // rv 0
  assign TXMAINCURSOR_in[2] = (TXMAINCURSOR[2] !== 1'bz) && TXMAINCURSOR[2]; // rv 0
  assign TXMAINCURSOR_in[3] = (TXMAINCURSOR[3] !== 1'bz) && TXMAINCURSOR[3]; // rv 0
  assign TXMAINCURSOR_in[4] = (TXMAINCURSOR[4] !== 1'bz) && TXMAINCURSOR[4]; // rv 0
  assign TXMAINCURSOR_in[5] = (TXMAINCURSOR[5] !== 1'bz) && TXMAINCURSOR[5]; // rv 0
  assign TXMAINCURSOR_in[6] = (TXMAINCURSOR[6] !== 1'bz) && TXMAINCURSOR[6]; // rv 0
  assign TXPHALIGN_in = (TXPHALIGN !== 1'bz) && TXPHALIGN; // rv 0
  assign TXPHDLYPD_in = (TXPHDLYPD !== 1'bz) && TXPHDLYPD; // rv 0
  assign TXPHINIT_in = (TXPHINIT !== 1'bz) && TXPHINIT; // rv 0
  assign TXPIPPMEN_in = (TXPIPPMEN !== 1'bz) && TXPIPPMEN; // rv 0
  assign TXPIPPMOVRDEN_in = (TXPIPPMOVRDEN !== 1'bz) && TXPIPPMOVRDEN; // rv 0
  assign TXPIPPMPD_in = (TXPIPPMPD !== 1'bz) && TXPIPPMPD; // rv 0
  assign TXPIPPMSTEPSIZE_in[0] = (TXPIPPMSTEPSIZE[0] !== 1'bz) && TXPIPPMSTEPSIZE[0]; // rv 0
  assign TXPIPPMSTEPSIZE_in[1] = (TXPIPPMSTEPSIZE[1] !== 1'bz) && TXPIPPMSTEPSIZE[1]; // rv 0
  assign TXPIPPMSTEPSIZE_in[2] = (TXPIPPMSTEPSIZE[2] !== 1'bz) && TXPIPPMSTEPSIZE[2]; // rv 0
  assign TXPIPPMSTEPSIZE_in[3] = (TXPIPPMSTEPSIZE[3] !== 1'bz) && TXPIPPMSTEPSIZE[3]; // rv 0
  assign TXPIPPMSTEPSIZE_in[4] = (TXPIPPMSTEPSIZE[4] !== 1'bz) && TXPIPPMSTEPSIZE[4]; // rv 0
  assign TXPOLARITY_in = (TXPOLARITY !== 1'bz) && TXPOLARITY; // rv 0
  assign TXPOSTCURSOR_in[0] = (TXPOSTCURSOR[0] !== 1'bz) && TXPOSTCURSOR[0]; // rv 0
  assign TXPOSTCURSOR_in[1] = (TXPOSTCURSOR[1] !== 1'bz) && TXPOSTCURSOR[1]; // rv 0
  assign TXPOSTCURSOR_in[2] = (TXPOSTCURSOR[2] !== 1'bz) && TXPOSTCURSOR[2]; // rv 0
  assign TXPOSTCURSOR_in[3] = (TXPOSTCURSOR[3] !== 1'bz) && TXPOSTCURSOR[3]; // rv 0
  assign TXPOSTCURSOR_in[4] = (TXPOSTCURSOR[4] !== 1'bz) && TXPOSTCURSOR[4]; // rv 0
  assign TXPRBSFORCEERR_in = (TXPRBSFORCEERR !== 1'bz) && TXPRBSFORCEERR; // rv 0
  assign TXPRBSSEL_in[0] = (TXPRBSSEL[0] !== 1'bz) && TXPRBSSEL[0]; // rv 0
  assign TXPRBSSEL_in[1] = (TXPRBSSEL[1] !== 1'bz) && TXPRBSSEL[1]; // rv 0
  assign TXPRBSSEL_in[2] = (TXPRBSSEL[2] !== 1'bz) && TXPRBSSEL[2]; // rv 0
  assign TXPRBSSEL_in[3] = (TXPRBSSEL[3] !== 1'bz) && TXPRBSSEL[3]; // rv 0
  assign TXRAWDATA_in[0] = (TXRAWDATA[0] !== 1'bz) && TXRAWDATA[0]; // rv 0
  assign TXRAWDATA_in[10] = (TXRAWDATA[10] !== 1'bz) && TXRAWDATA[10]; // rv 0
  assign TXRAWDATA_in[11] = (TXRAWDATA[11] !== 1'bz) && TXRAWDATA[11]; // rv 0
  assign TXRAWDATA_in[12] = (TXRAWDATA[12] !== 1'bz) && TXRAWDATA[12]; // rv 0
  assign TXRAWDATA_in[13] = (TXRAWDATA[13] !== 1'bz) && TXRAWDATA[13]; // rv 0
  assign TXRAWDATA_in[14] = (TXRAWDATA[14] !== 1'bz) && TXRAWDATA[14]; // rv 0
  assign TXRAWDATA_in[15] = (TXRAWDATA[15] !== 1'bz) && TXRAWDATA[15]; // rv 0
  assign TXRAWDATA_in[16] = (TXRAWDATA[16] !== 1'bz) && TXRAWDATA[16]; // rv 0
  assign TXRAWDATA_in[17] = (TXRAWDATA[17] !== 1'bz) && TXRAWDATA[17]; // rv 0
  assign TXRAWDATA_in[18] = (TXRAWDATA[18] !== 1'bz) && TXRAWDATA[18]; // rv 0
  assign TXRAWDATA_in[19] = (TXRAWDATA[19] !== 1'bz) && TXRAWDATA[19]; // rv 0
  assign TXRAWDATA_in[1] = (TXRAWDATA[1] !== 1'bz) && TXRAWDATA[1]; // rv 0
  assign TXRAWDATA_in[20] = (TXRAWDATA[20] !== 1'bz) && TXRAWDATA[20]; // rv 0
  assign TXRAWDATA_in[21] = (TXRAWDATA[21] !== 1'bz) && TXRAWDATA[21]; // rv 0
  assign TXRAWDATA_in[22] = (TXRAWDATA[22] !== 1'bz) && TXRAWDATA[22]; // rv 0
  assign TXRAWDATA_in[23] = (TXRAWDATA[23] !== 1'bz) && TXRAWDATA[23]; // rv 0
  assign TXRAWDATA_in[24] = (TXRAWDATA[24] !== 1'bz) && TXRAWDATA[24]; // rv 0
  assign TXRAWDATA_in[25] = (TXRAWDATA[25] !== 1'bz) && TXRAWDATA[25]; // rv 0
  assign TXRAWDATA_in[26] = (TXRAWDATA[26] !== 1'bz) && TXRAWDATA[26]; // rv 0
  assign TXRAWDATA_in[27] = (TXRAWDATA[27] !== 1'bz) && TXRAWDATA[27]; // rv 0
  assign TXRAWDATA_in[28] = (TXRAWDATA[28] !== 1'bz) && TXRAWDATA[28]; // rv 0
  assign TXRAWDATA_in[29] = (TXRAWDATA[29] !== 1'bz) && TXRAWDATA[29]; // rv 0
  assign TXRAWDATA_in[2] = (TXRAWDATA[2] !== 1'bz) && TXRAWDATA[2]; // rv 0
  assign TXRAWDATA_in[30] = (TXRAWDATA[30] !== 1'bz) && TXRAWDATA[30]; // rv 0
  assign TXRAWDATA_in[31] = (TXRAWDATA[31] !== 1'bz) && TXRAWDATA[31]; // rv 0
  assign TXRAWDATA_in[32] = (TXRAWDATA[32] !== 1'bz) && TXRAWDATA[32]; // rv 0
  assign TXRAWDATA_in[33] = (TXRAWDATA[33] !== 1'bz) && TXRAWDATA[33]; // rv 0
  assign TXRAWDATA_in[34] = (TXRAWDATA[34] !== 1'bz) && TXRAWDATA[34]; // rv 0
  assign TXRAWDATA_in[35] = (TXRAWDATA[35] !== 1'bz) && TXRAWDATA[35]; // rv 0
  assign TXRAWDATA_in[36] = (TXRAWDATA[36] !== 1'bz) && TXRAWDATA[36]; // rv 0
  assign TXRAWDATA_in[37] = (TXRAWDATA[37] !== 1'bz) && TXRAWDATA[37]; // rv 0
  assign TXRAWDATA_in[38] = (TXRAWDATA[38] !== 1'bz) && TXRAWDATA[38]; // rv 0
  assign TXRAWDATA_in[39] = (TXRAWDATA[39] !== 1'bz) && TXRAWDATA[39]; // rv 0
  assign TXRAWDATA_in[3] = (TXRAWDATA[3] !== 1'bz) && TXRAWDATA[3]; // rv 0
  assign TXRAWDATA_in[4] = (TXRAWDATA[4] !== 1'bz) && TXRAWDATA[4]; // rv 0
  assign TXRAWDATA_in[5] = (TXRAWDATA[5] !== 1'bz) && TXRAWDATA[5]; // rv 0
  assign TXRAWDATA_in[6] = (TXRAWDATA[6] !== 1'bz) && TXRAWDATA[6]; // rv 0
  assign TXRAWDATA_in[7] = (TXRAWDATA[7] !== 1'bz) && TXRAWDATA[7]; // rv 0
  assign TXRAWDATA_in[8] = (TXRAWDATA[8] !== 1'bz) && TXRAWDATA[8]; // rv 0
  assign TXRAWDATA_in[9] = (TXRAWDATA[9] !== 1'bz) && TXRAWDATA[9]; // rv 0
  assign TXUSRCLK_in = (TXUSRCLK !== 1'bz) && TXUSRCLK; // rv 0
`endif

  assign CDRSTEPDIR_in = (CDRSTEPDIR !== 1'bz) && CDRSTEPDIR; // rv 0
  assign CDRSTEPSQ_in = (CDRSTEPSQ !== 1'bz) && CDRSTEPSQ; // rv 0
  assign CDRSTEPSX_in = (CDRSTEPSX !== 1'bz) && CDRSTEPSX; // rv 0
  assign CLKRSVD0_in = (CLKRSVD0 !== 1'bz) && CLKRSVD0; // rv 0
  assign CLKRSVD1_in = (CLKRSVD1 !== 1'bz) && CLKRSVD1; // rv 0
  assign CPLLFREQLOCK_in = (CPLLFREQLOCK !== 1'bz) && CPLLFREQLOCK; // rv 0
  assign CPLLLOCKDETCLK_in = (CPLLLOCKDETCLK !== 1'bz) && CPLLLOCKDETCLK; // rv 0
  assign CPLLLOCKEN_in = (CPLLLOCKEN !== 1'bz) && CPLLLOCKEN; // rv 0
  assign CPLLREFCLKSEL_in[0] = (CPLLREFCLKSEL[0] === 1'bz) || CPLLREFCLKSEL[0]; // rv 1
  assign CPLLREFCLKSEL_in[1] = (CPLLREFCLKSEL[1] !== 1'bz) && CPLLREFCLKSEL[1]; // rv 0
  assign CPLLREFCLKSEL_in[2] = (CPLLREFCLKSEL[2] !== 1'bz) && CPLLREFCLKSEL[2]; // rv 0
  assign CPLLRESET_in = (CPLLRESET !== 1'bz) && CPLLRESET; // rv 0
  assign CTLTXSENDIDLE_in = CTLTXSENDIDLE;
  assign CTLTXSENDLFI_in = CTLTXSENDLFI;
  assign CTLTXSENDRFI_in = CTLTXSENDRFI;
  assign DMONITORCLK_in = (DMONITORCLK !== 1'bz) && DMONITORCLK; // rv 0
  assign EYESCANRESET_in = (EYESCANRESET !== 1'bz) && EYESCANRESET; // rv 0
  assign EYESCANTRIGGER_in = (EYESCANTRIGGER !== 1'bz) && EYESCANTRIGGER; // rv 0
  assign FREQOS_in = (FREQOS !== 1'bz) && FREQOS; // rv 0
  assign GTFRXN_in = GTFRXN;
  assign GTFRXP_in = GTFRXP;
  assign GTGREFCLK_in = GTGREFCLK;
  assign GTNORTHREFCLK0_in = GTNORTHREFCLK0;
  assign GTNORTHREFCLK1_in = GTNORTHREFCLK1;
  assign GTREFCLK0_in = GTREFCLK0;
  assign GTREFCLK1_in = GTREFCLK1;
  assign GTRSVD_in[0] = (GTRSVD[0] !== 1'bz) && GTRSVD[0]; // rv 0
  assign GTRSVD_in[10] = (GTRSVD[10] !== 1'bz) && GTRSVD[10]; // rv 0
  assign GTRSVD_in[11] = (GTRSVD[11] !== 1'bz) && GTRSVD[11]; // rv 0
  assign GTRSVD_in[12] = (GTRSVD[12] !== 1'bz) && GTRSVD[12]; // rv 0
  assign GTRSVD_in[13] = (GTRSVD[13] !== 1'bz) && GTRSVD[13]; // rv 0
  assign GTRSVD_in[14] = (GTRSVD[14] !== 1'bz) && GTRSVD[14]; // rv 0
  assign GTRSVD_in[15] = (GTRSVD[15] !== 1'bz) && GTRSVD[15]; // rv 0
  assign GTRSVD_in[1] = (GTRSVD[1] !== 1'bz) && GTRSVD[1]; // rv 0
  assign GTRSVD_in[2] = (GTRSVD[2] !== 1'bz) && GTRSVD[2]; // rv 0
  assign GTRSVD_in[3] = (GTRSVD[3] !== 1'bz) && GTRSVD[3]; // rv 0
  assign GTRSVD_in[4] = (GTRSVD[4] !== 1'bz) && GTRSVD[4]; // rv 0
  assign GTRSVD_in[5] = (GTRSVD[5] !== 1'bz) && GTRSVD[5]; // rv 0
  assign GTRSVD_in[6] = (GTRSVD[6] !== 1'bz) && GTRSVD[6]; // rv 0
  assign GTRSVD_in[7] = (GTRSVD[7] !== 1'bz) && GTRSVD[7]; // rv 0
  assign GTRSVD_in[8] = (GTRSVD[8] !== 1'bz) && GTRSVD[8]; // rv 0
  assign GTRSVD_in[9] = (GTRSVD[9] !== 1'bz) && GTRSVD[9]; // rv 0
  assign GTRXRESETSEL_in = (GTRXRESETSEL !== 1'bz) && GTRXRESETSEL; // rv 0
  assign GTRXRESET_in = (GTRXRESET !== 1'bz) && GTRXRESET; // rv 0
  assign GTSOUTHREFCLK0_in = GTSOUTHREFCLK0;
  assign GTSOUTHREFCLK1_in = GTSOUTHREFCLK1;
  assign GTTXRESETSEL_in = (GTTXRESETSEL !== 1'bz) && GTTXRESETSEL; // rv 0
  assign GTTXRESET_in = (GTTXRESET !== 1'bz) && GTTXRESET; // rv 0
  assign INCPCTRL_in = (INCPCTRL !== 1'bz) && INCPCTRL; // rv 0
  assign QPLL0CLK_in = QPLL0CLK;
  assign QPLL0FREQLOCK_in = (QPLL0FREQLOCK !== 1'bz) && QPLL0FREQLOCK; // rv 0
  assign QPLL0REFCLK_in = QPLL0REFCLK;
  assign QPLL1CLK_in = QPLL1CLK;
  assign QPLL1FREQLOCK_in = (QPLL1FREQLOCK !== 1'bz) && QPLL1FREQLOCK; // rv 0
  assign QPLL1REFCLK_in = QPLL1REFCLK;
  assign RXAFECFOKEN_in = (RXAFECFOKEN === 1'bz) || RXAFECFOKEN; // rv 1
  assign RXCDRFREQRESET_in = (RXCDRFREQRESET !== 1'bz) && RXCDRFREQRESET; // rv 0
  assign RXCDRHOLD_in = (RXCDRHOLD !== 1'bz) && RXCDRHOLD; // rv 0
  assign RXCDROVRDEN_in = (RXCDROVRDEN !== 1'bz) && RXCDROVRDEN; // rv 0
  assign RXCDRRESET_in = (RXCDRRESET !== 1'bz) && RXCDRRESET; // rv 0
  assign RXCKCALRESET_in = (RXCKCALRESET !== 1'bz) && RXCKCALRESET; // rv 0
  assign RXCKCALSTART_in[0] = (RXCKCALSTART[0] !== 1'bz) && RXCKCALSTART[0]; // rv 0
  assign RXCKCALSTART_in[1] = (RXCKCALSTART[1] !== 1'bz) && RXCKCALSTART[1]; // rv 0
  assign RXCKCALSTART_in[2] = (RXCKCALSTART[2] !== 1'bz) && RXCKCALSTART[2]; // rv 0
  assign RXCKCALSTART_in[3] = (RXCKCALSTART[3] !== 1'bz) && RXCKCALSTART[3]; // rv 0
  assign RXCKCALSTART_in[4] = (RXCKCALSTART[4] !== 1'bz) && RXCKCALSTART[4]; // rv 0
  assign RXCKCALSTART_in[5] = (RXCKCALSTART[5] !== 1'bz) && RXCKCALSTART[5]; // rv 0
  assign RXCKCALSTART_in[6] = (RXCKCALSTART[6] !== 1'bz) && RXCKCALSTART[6]; // rv 0
  assign RXDFEAGCHOLD_in = (RXDFEAGCHOLD !== 1'bz) && RXDFEAGCHOLD; // rv 0
  assign RXDFEAGCOVRDEN_in = (RXDFEAGCOVRDEN !== 1'bz) && RXDFEAGCOVRDEN; // rv 0
  assign RXDFECFOKFCNUM_in[0] = (RXDFECFOKFCNUM[0] !== 1'bz) && RXDFECFOKFCNUM[0]; // rv 0
  assign RXDFECFOKFCNUM_in[1] = (RXDFECFOKFCNUM[1] === 1'bz) || RXDFECFOKFCNUM[1]; // rv 1
  assign RXDFECFOKFCNUM_in[2] = (RXDFECFOKFCNUM[2] === 1'bz) || RXDFECFOKFCNUM[2]; // rv 1
  assign RXDFECFOKFCNUM_in[3] = (RXDFECFOKFCNUM[3] !== 1'bz) && RXDFECFOKFCNUM[3]; // rv 0
  assign RXDFECFOKFEN_in = (RXDFECFOKFEN !== 1'bz) && RXDFECFOKFEN; // rv 0
  assign RXDFECFOKFPULSE_in = (RXDFECFOKFPULSE !== 1'bz) && RXDFECFOKFPULSE; // rv 0
  assign RXDFECFOKHOLD_in = (RXDFECFOKHOLD !== 1'bz) && RXDFECFOKHOLD; // rv 0
  assign RXDFECFOKOVREN_in = (RXDFECFOKOVREN !== 1'bz) && RXDFECFOKOVREN; // rv 0
  assign RXDFEKHHOLD_in = (RXDFEKHHOLD !== 1'bz) && RXDFEKHHOLD; // rv 0
  assign RXDFEKHOVRDEN_in = (RXDFEKHOVRDEN !== 1'bz) && RXDFEKHOVRDEN; // rv 0
  assign RXDFELFHOLD_in = (RXDFELFHOLD !== 1'bz) && RXDFELFHOLD; // rv 0
  assign RXDFELFOVRDEN_in = (RXDFELFOVRDEN !== 1'bz) && RXDFELFOVRDEN; // rv 0
  assign RXDFELPMRESET_in = (RXDFELPMRESET !== 1'bz) && RXDFELPMRESET; // rv 0
  assign RXDFETAP10HOLD_in = (RXDFETAP10HOLD !== 1'bz) && RXDFETAP10HOLD; // rv 0
  assign RXDFETAP10OVRDEN_in = (RXDFETAP10OVRDEN !== 1'bz) && RXDFETAP10OVRDEN; // rv 0
  assign RXDFETAP11HOLD_in = (RXDFETAP11HOLD !== 1'bz) && RXDFETAP11HOLD; // rv 0
  assign RXDFETAP11OVRDEN_in = (RXDFETAP11OVRDEN !== 1'bz) && RXDFETAP11OVRDEN; // rv 0
  assign RXDFETAP12HOLD_in = (RXDFETAP12HOLD !== 1'bz) && RXDFETAP12HOLD; // rv 0
  assign RXDFETAP12OVRDEN_in = (RXDFETAP12OVRDEN !== 1'bz) && RXDFETAP12OVRDEN; // rv 0
  assign RXDFETAP13HOLD_in = (RXDFETAP13HOLD !== 1'bz) && RXDFETAP13HOLD; // rv 0
  assign RXDFETAP13OVRDEN_in = (RXDFETAP13OVRDEN !== 1'bz) && RXDFETAP13OVRDEN; // rv 0
  assign RXDFETAP14HOLD_in = (RXDFETAP14HOLD !== 1'bz) && RXDFETAP14HOLD; // rv 0
  assign RXDFETAP14OVRDEN_in = (RXDFETAP14OVRDEN !== 1'bz) && RXDFETAP14OVRDEN; // rv 0
  assign RXDFETAP15HOLD_in = (RXDFETAP15HOLD !== 1'bz) && RXDFETAP15HOLD; // rv 0
  assign RXDFETAP15OVRDEN_in = (RXDFETAP15OVRDEN !== 1'bz) && RXDFETAP15OVRDEN; // rv 0
  assign RXDFETAP2HOLD_in = (RXDFETAP2HOLD !== 1'bz) && RXDFETAP2HOLD; // rv 0
  assign RXDFETAP2OVRDEN_in = (RXDFETAP2OVRDEN !== 1'bz) && RXDFETAP2OVRDEN; // rv 0
  assign RXDFETAP3HOLD_in = (RXDFETAP3HOLD !== 1'bz) && RXDFETAP3HOLD; // rv 0
  assign RXDFETAP3OVRDEN_in = (RXDFETAP3OVRDEN !== 1'bz) && RXDFETAP3OVRDEN; // rv 0
  assign RXDFETAP4HOLD_in = (RXDFETAP4HOLD !== 1'bz) && RXDFETAP4HOLD; // rv 0
  assign RXDFETAP4OVRDEN_in = (RXDFETAP4OVRDEN !== 1'bz) && RXDFETAP4OVRDEN; // rv 0
  assign RXDFETAP5HOLD_in = (RXDFETAP5HOLD !== 1'bz) && RXDFETAP5HOLD; // rv 0
  assign RXDFETAP5OVRDEN_in = (RXDFETAP5OVRDEN !== 1'bz) && RXDFETAP5OVRDEN; // rv 0
  assign RXDFETAP6HOLD_in = (RXDFETAP6HOLD !== 1'bz) && RXDFETAP6HOLD; // rv 0
  assign RXDFETAP6OVRDEN_in = (RXDFETAP6OVRDEN !== 1'bz) && RXDFETAP6OVRDEN; // rv 0
  assign RXDFETAP7HOLD_in = (RXDFETAP7HOLD !== 1'bz) && RXDFETAP7HOLD; // rv 0
  assign RXDFETAP7OVRDEN_in = (RXDFETAP7OVRDEN !== 1'bz) && RXDFETAP7OVRDEN; // rv 0
  assign RXDFETAP8HOLD_in = (RXDFETAP8HOLD !== 1'bz) && RXDFETAP8HOLD; // rv 0
  assign RXDFETAP8OVRDEN_in = (RXDFETAP8OVRDEN !== 1'bz) && RXDFETAP8OVRDEN; // rv 0
  assign RXDFETAP9HOLD_in = (RXDFETAP9HOLD !== 1'bz) && RXDFETAP9HOLD; // rv 0
  assign RXDFETAP9OVRDEN_in = (RXDFETAP9OVRDEN !== 1'bz) && RXDFETAP9OVRDEN; // rv 0
  assign RXDFEUTHOLD_in = (RXDFEUTHOLD !== 1'bz) && RXDFEUTHOLD; // rv 0
  assign RXDFEUTOVRDEN_in = (RXDFEUTOVRDEN !== 1'bz) && RXDFEUTOVRDEN; // rv 0
  assign RXDFEVPHOLD_in = (RXDFEVPHOLD !== 1'bz) && RXDFEVPHOLD; // rv 0
  assign RXDFEVPOVRDEN_in = (RXDFEVPOVRDEN !== 1'bz) && RXDFEVPOVRDEN; // rv 0
  assign RXDFEXYDEN_in = (RXDFEXYDEN !== 1'bz) && RXDFEXYDEN; // rv 0
  assign RXDLYBYPASS_in = (RXDLYBYPASS !== 1'bz) && RXDLYBYPASS; // rv 0
  assign RXDLYEN_in = (RXDLYEN !== 1'bz) && RXDLYEN; // rv 0
  assign RXDLYOVRDEN_in = (RXDLYOVRDEN !== 1'bz) && RXDLYOVRDEN; // rv 0
  assign RXDLYSRESET_in = (RXDLYSRESET !== 1'bz) && RXDLYSRESET; // rv 0
  assign RXLPMGCHOLD_in = (RXLPMGCHOLD !== 1'bz) && RXLPMGCHOLD; // rv 0
  assign RXLPMGCOVRDEN_in = (RXLPMGCOVRDEN !== 1'bz) && RXLPMGCOVRDEN; // rv 0
  assign RXLPMHFHOLD_in = (RXLPMHFHOLD !== 1'bz) && RXLPMHFHOLD; // rv 0
  assign RXLPMHFOVRDEN_in = (RXLPMHFOVRDEN !== 1'bz) && RXLPMHFOVRDEN; // rv 0
  assign RXLPMLFHOLD_in = (RXLPMLFHOLD !== 1'bz) && RXLPMLFHOLD; // rv 0
  assign RXLPMLFKLOVRDEN_in = (RXLPMLFKLOVRDEN !== 1'bz) && RXLPMLFKLOVRDEN; // rv 0
  assign RXLPMOSHOLD_in = (RXLPMOSHOLD !== 1'bz) && RXLPMOSHOLD; // rv 0
  assign RXLPMOSOVRDEN_in = (RXLPMOSOVRDEN !== 1'bz) && RXLPMOSOVRDEN; // rv 0
  assign RXMONITORSEL_in[0] = (RXMONITORSEL[0] !== 1'bz) && RXMONITORSEL[0]; // rv 0
  assign RXMONITORSEL_in[1] = (RXMONITORSEL[1] !== 1'bz) && RXMONITORSEL[1]; // rv 0
  assign RXOSCALRESET_in = (RXOSCALRESET !== 1'bz) && RXOSCALRESET; // rv 0
  assign RXOSHOLD_in = (RXOSHOLD !== 1'bz) && RXOSHOLD; // rv 0
  assign RXOSOVRDEN_in = (RXOSOVRDEN !== 1'bz) && RXOSOVRDEN; // rv 0
  assign RXOUTCLKSEL_in[0] = (RXOUTCLKSEL[0] !== 1'bz) && RXOUTCLKSEL[0]; // rv 0
  assign RXOUTCLKSEL_in[1] = (RXOUTCLKSEL[1] !== 1'bz) && RXOUTCLKSEL[1]; // rv 0
  assign RXOUTCLKSEL_in[2] = (RXOUTCLKSEL[2] !== 1'bz) && RXOUTCLKSEL[2]; // rv 0
  assign RXPCSRESET_in = (RXPCSRESET !== 1'bz) && RXPCSRESET; // rv 0
  assign RXPD_in[0] = (RXPD[0] !== 1'bz) && RXPD[0]; // rv 0
  assign RXPD_in[1] = (RXPD[1] !== 1'bz) && RXPD[1]; // rv 0
  assign RXPHALIGNEN_in = (RXPHALIGNEN !== 1'bz) && RXPHALIGNEN; // rv 0
  assign RXPHDLYPD_in = (RXPHDLYPD !== 1'bz) && RXPHDLYPD; // rv 0
  assign RXPHDLYRESET_in = (RXPHDLYRESET !== 1'bz) && RXPHDLYRESET; // rv 0
  assign RXPLLCLKSEL_in[0] = (RXPLLCLKSEL[0] !== 1'bz) && RXPLLCLKSEL[0]; // rv 0
  assign RXPLLCLKSEL_in[1] = (RXPLLCLKSEL[1] !== 1'bz) && RXPLLCLKSEL[1]; // rv 0
  assign RXPMARESET_in = (RXPMARESET !== 1'bz) && RXPMARESET; // rv 0
  assign RXPOLARITY_in = (RXPOLARITY !== 1'bz) && RXPOLARITY; // rv 0
  assign RXPRBSCNTRESET_in = (RXPRBSCNTRESET !== 1'bz) && RXPRBSCNTRESET; // rv 0
  assign RXPRBSSEL_in[0] = (RXPRBSSEL[0] !== 1'bz) && RXPRBSSEL[0]; // rv 0
  assign RXPRBSSEL_in[1] = (RXPRBSSEL[1] !== 1'bz) && RXPRBSSEL[1]; // rv 0
  assign RXPRBSSEL_in[2] = (RXPRBSSEL[2] !== 1'bz) && RXPRBSSEL[2]; // rv 0
  assign RXPRBSSEL_in[3] = (RXPRBSSEL[3] !== 1'bz) && RXPRBSSEL[3]; // rv 0
  assign RXPROGDIVRESET_in = (RXPROGDIVRESET !== 1'bz) && RXPROGDIVRESET; // rv 0
  assign RXSLIPOUTCLK_in = (RXSLIPOUTCLK !== 1'bz) && RXSLIPOUTCLK; // rv 0
  assign RXSLIPPMA_in = (RXSLIPPMA !== 1'bz) && RXSLIPPMA; // rv 0
  assign RXSYNCALLIN_in = (RXSYNCALLIN !== 1'bz) && RXSYNCALLIN; // rv 0
  assign RXSYNCIN_in = (RXSYNCIN !== 1'bz) && RXSYNCIN; // rv 0
  assign RXSYNCMODE_in = (RXSYNCMODE === 1'bz) || RXSYNCMODE; // rv 1
  assign RXSYSCLKSEL_in[0] = (RXSYSCLKSEL[0] !== 1'bz) && RXSYSCLKSEL[0]; // rv 0
  assign RXSYSCLKSEL_in[1] = (RXSYSCLKSEL[1] !== 1'bz) && RXSYSCLKSEL[1]; // rv 0
  assign RXTERMINATION_in = (RXTERMINATION !== 1'bz) && RXTERMINATION; // rv 0
  assign RXUSERRDY_in = (RXUSERRDY !== 1'bz) && RXUSERRDY; // rv 0
  assign RXUSRCLK2_in = (RXUSRCLK2 !== 1'bz) && RXUSRCLK2; // rv 0
  assign TXDCCFORCESTART_in = (TXDCCFORCESTART !== 1'bz) && TXDCCFORCESTART; // rv 0
  assign TXDCCRESET_in = (TXDCCRESET !== 1'bz) && TXDCCRESET; // rv 0
  assign TXDIFFCTRL_in[0] = (TXDIFFCTRL[0] !== 1'bz) && TXDIFFCTRL[0]; // rv 0
  assign TXDIFFCTRL_in[1] = (TXDIFFCTRL[1] !== 1'bz) && TXDIFFCTRL[1]; // rv 0
  assign TXDIFFCTRL_in[2] = (TXDIFFCTRL[2] !== 1'bz) && TXDIFFCTRL[2]; // rv 0
  assign TXDIFFCTRL_in[3] = (TXDIFFCTRL[3] !== 1'bz) && TXDIFFCTRL[3]; // rv 0
  assign TXDIFFCTRL_in[4] = (TXDIFFCTRL[4] !== 1'bz) && TXDIFFCTRL[4]; // rv 0
  assign TXDLYEN_in = (TXDLYEN !== 1'bz) && TXDLYEN; // rv 0
  assign TXDLYOVRDEN_in = (TXDLYOVRDEN !== 1'bz) && TXDLYOVRDEN; // rv 0
  assign TXDLYSRESET_in = (TXDLYSRESET !== 1'bz) && TXDLYSRESET; // rv 0
  assign TXELECIDLE_in = (TXELECIDLE !== 1'bz) && TXELECIDLE; // rv 0
  assign TXMUXDCDEXHOLD_in = (TXMUXDCDEXHOLD !== 1'bz) && TXMUXDCDEXHOLD; // rv 0
  assign TXMUXDCDORWREN_in = (TXMUXDCDORWREN !== 1'bz) && TXMUXDCDORWREN; // rv 0
  assign TXOUTCLKSEL_in[0] = (TXOUTCLKSEL[0] !== 1'bz) && TXOUTCLKSEL[0]; // rv 0
  assign TXOUTCLKSEL_in[1] = (TXOUTCLKSEL[1] !== 1'bz) && TXOUTCLKSEL[1]; // rv 0
  assign TXOUTCLKSEL_in[2] = (TXOUTCLKSEL[2] !== 1'bz) && TXOUTCLKSEL[2]; // rv 0
  assign TXPCSRESET_in = (TXPCSRESET !== 1'bz) && TXPCSRESET; // rv 0
  assign TXPD_in[0] = (TXPD[0] !== 1'bz) && TXPD[0]; // rv 0
  assign TXPD_in[1] = (TXPD[1] !== 1'bz) && TXPD[1]; // rv 0
  assign TXPHALIGNEN_in = (TXPHALIGNEN !== 1'bz) && TXPHALIGNEN; // rv 0
  assign TXPHDLYRESET_in = (TXPHDLYRESET !== 1'bz) && TXPHDLYRESET; // rv 0
  assign TXPHDLYTSTCLK_in = (TXPHDLYTSTCLK !== 1'bz) && TXPHDLYTSTCLK; // rv 0
  assign TXPHOVRDEN_in = (TXPHOVRDEN !== 1'bz) && TXPHOVRDEN; // rv 0
  assign TXPIPPMSEL_in = (TXPIPPMSEL !== 1'bz) && TXPIPPMSEL; // rv 0
  assign TXPISOPD_in = (TXPISOPD !== 1'bz) && TXPISOPD; // rv 0
  assign TXPLLCLKSEL_in[0] = (TXPLLCLKSEL[0] !== 1'bz) && TXPLLCLKSEL[0]; // rv 0
  assign TXPLLCLKSEL_in[1] = (TXPLLCLKSEL[1] !== 1'bz) && TXPLLCLKSEL[1]; // rv 0
  assign TXPMARESET_in = (TXPMARESET !== 1'bz) && TXPMARESET; // rv 0
  assign TXPRECURSOR_in[0] = (TXPRECURSOR[0] !== 1'bz) && TXPRECURSOR[0]; // rv 0
  assign TXPRECURSOR_in[1] = (TXPRECURSOR[1] !== 1'bz) && TXPRECURSOR[1]; // rv 0
  assign TXPRECURSOR_in[2] = (TXPRECURSOR[2] !== 1'bz) && TXPRECURSOR[2]; // rv 0
  assign TXPRECURSOR_in[3] = (TXPRECURSOR[3] !== 1'bz) && TXPRECURSOR[3]; // rv 0
  assign TXPRECURSOR_in[4] = (TXPRECURSOR[4] !== 1'bz) && TXPRECURSOR[4]; // rv 0
  assign TXPROGDIVRESET_in = (TXPROGDIVRESET !== 1'bz) && TXPROGDIVRESET; // rv 0
  assign TXSYNCALLIN_in = (TXSYNCALLIN !== 1'bz) && TXSYNCALLIN; // rv 0
  assign TXSYNCIN_in = (TXSYNCIN !== 1'bz) && TXSYNCIN; // rv 0
  assign TXSYNCMODE_in = (TXSYNCMODE === 1'bz) || TXSYNCMODE; // rv 1
  assign TXSYSCLKSEL_in[0] = (TXSYSCLKSEL[0] !== 1'bz) && TXSYSCLKSEL[0]; // rv 0
  assign TXSYSCLKSEL_in[1] = (TXSYSCLKSEL[1] !== 1'bz) && TXSYSCLKSEL[1]; // rv 0
  assign TXUSERRDY_in = (TXUSERRDY !== 1'bz) && TXUSERRDY; // rv 0
  assign TXUSRCLK2_in = (TXUSRCLK2 !== 1'bz) && TXUSRCLK2; // rv 0

`ifndef XIL_XECLIB
  reg attr_test;
  reg attr_err;
  
  initial begin
  trig_attr = 1'b0;
  `ifdef XIL_ATTR_TEST
    attr_test = 1'b1;
  `else
    attr_test = 1'b0;
  `endif
    attr_err = 1'b0;
    #1;
    trig_attr = ~trig_attr;
  end
`endif

`ifdef XIL_XECLIB
  assign RX_PROGDIV_CFG_BIN = RX_PROGDIV_CFG_REG * 1000;
  
  assign TX_PROGDIV_CFG_BIN = TX_PROGDIV_CFG_REG * 1000;
  
`else
  always @ (trig_attr) begin
  #1;
  RX_PROGDIV_CFG_BIN = RX_PROGDIV_CFG_REG * 1000;
  
  TX_PROGDIV_CFG_BIN = TX_PROGDIV_CFG_REG * 1000;
  
  end
`endif

`ifndef XIL_XECLIB
  always @ (trig_attr) begin
    #1;
    if ((attr_test == 1'b1) ||
        ((CBCC_DATA_SOURCE_SEL_REG != "DECODED") &&
         (CBCC_DATA_SOURCE_SEL_REG != "ENCODED"))) begin
      $display("Error: [Unisim %s-259] CBCC_DATA_SOURCE_SEL attribute is set to %s.  Legal values for this attribute are DECODED or ENCODED. Instance: %m", MODULE_NAME, CBCC_DATA_SOURCE_SEL_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((CPLL_FBDIV_REG != 4) &&
         (CPLL_FBDIV_REG != 1) &&
         (CPLL_FBDIV_REG != 2) &&
         (CPLL_FBDIV_REG != 3) &&
         (CPLL_FBDIV_REG != 5) &&
         (CPLL_FBDIV_REG != 6) &&
         (CPLL_FBDIV_REG != 8) &&
         (CPLL_FBDIV_REG != 10) &&
         (CPLL_FBDIV_REG != 12) &&
         (CPLL_FBDIV_REG != 16) &&
         (CPLL_FBDIV_REG != 20))) begin
      $display("Error: [Unisim %s-276] CPLL_FBDIV attribute is set to %d.  Legal values for this attribute are 4, 1, 2, 3, 5, 6, 8, 10, 12, 16 or 20. Instance: %m", MODULE_NAME, CPLL_FBDIV_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((CPLL_FBDIV_45_REG != 4) &&
         (CPLL_FBDIV_45_REG != 5))) begin
      $display("Error: [Unisim %s-277] CPLL_FBDIV_45 attribute is set to %d.  Legal values for this attribute are 4 or 5. Instance: %m", MODULE_NAME, CPLL_FBDIV_45_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((CPLL_REFCLK_DIV_REG != 1) &&
         (CPLL_REFCLK_DIV_REG != 2) &&
         (CPLL_REFCLK_DIV_REG != 3) &&
         (CPLL_REFCLK_DIV_REG != 4) &&
         (CPLL_REFCLK_DIV_REG != 5) &&
         (CPLL_REFCLK_DIV_REG != 6) &&
         (CPLL_REFCLK_DIV_REG != 8) &&
         (CPLL_REFCLK_DIV_REG != 10) &&
         (CPLL_REFCLK_DIV_REG != 12) &&
         (CPLL_REFCLK_DIV_REG != 16) &&
         (CPLL_REFCLK_DIV_REG != 20))) begin
      $display("Error: [Unisim %s-280] CPLL_REFCLK_DIV attribute is set to %d.  Legal values for this attribute are 1, 2, 3, 4, 5, 6, 8, 10, 12, 16 or 20. Instance: %m", MODULE_NAME, CPLL_REFCLK_DIV_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((DDI_REALIGN_WAIT_REG < 0) || (DDI_REALIGN_WAIT_REG > 31))) begin
      $display("Error: [Unisim %s-284] DDI_REALIGN_WAIT attribute is set to %d.  Legal values for this attribute are 0 to 31. Instance: %m", MODULE_NAME, DDI_REALIGN_WAIT_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((ES_ERRDET_EN_REG != "FALSE") &&
         (ES_ERRDET_EN_REG != "TRUE"))) begin
      $display("Error: [Unisim %s-290] ES_ERRDET_EN attribute is set to %s.  Legal values for this attribute are FALSE or TRUE. Instance: %m", MODULE_NAME, ES_ERRDET_EN_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((ES_EYE_SCAN_EN_REG != "FALSE") &&
         (ES_EYE_SCAN_EN_REG != "TRUE"))) begin
      $display("Error: [Unisim %s-291] ES_EYE_SCAN_EN attribute is set to %s.  Legal values for this attribute are FALSE or TRUE. Instance: %m", MODULE_NAME, ES_EYE_SCAN_EN_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((EYESCAN_VP_RANGE_REG != 0) &&
         (EYESCAN_VP_RANGE_REG != 1) &&
         (EYESCAN_VP_RANGE_REG != 2) &&
         (EYESCAN_VP_RANGE_REG != 3))) begin
      $display("Error: [Unisim %s-324] EYESCAN_VP_RANGE attribute is set to %d.  Legal values for this attribute are 0, 1, 2 or 3. Instance: %m", MODULE_NAME, EYESCAN_VP_RANGE_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((FTS_LANE_DESKEW_EN_REG != "FALSE") &&
         (FTS_LANE_DESKEW_EN_REG != "TRUE"))) begin
      $display("Error: [Unisim %s-328] FTS_LANE_DESKEW_EN attribute is set to %s.  Legal values for this attribute are FALSE or TRUE. Instance: %m", MODULE_NAME, FTS_LANE_DESKEW_EN_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((LPBK_BIAS_CTRL_REG != 4) &&
         (LPBK_BIAS_CTRL_REG != 0) &&
         (LPBK_BIAS_CTRL_REG != 1) &&
         (LPBK_BIAS_CTRL_REG != 2) &&
         (LPBK_BIAS_CTRL_REG != 3) &&
         (LPBK_BIAS_CTRL_REG != 5) &&
         (LPBK_BIAS_CTRL_REG != 6) &&
         (LPBK_BIAS_CTRL_REG != 7))) begin
      $display("Error: [Unisim %s-335] LPBK_BIAS_CTRL attribute is set to %d.  Legal values for this attribute are 4, 0, 1, 2, 3, 5, 6 or 7. Instance: %m", MODULE_NAME, LPBK_BIAS_CTRL_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((LPBK_IND_CTRL0_REG != 5) &&
         (LPBK_IND_CTRL0_REG != 0) &&
         (LPBK_IND_CTRL0_REG != 1) &&
         (LPBK_IND_CTRL0_REG != 2) &&
         (LPBK_IND_CTRL0_REG != 3) &&
         (LPBK_IND_CTRL0_REG != 4) &&
         (LPBK_IND_CTRL0_REG != 6) &&
         (LPBK_IND_CTRL0_REG != 7))) begin
      $display("Error: [Unisim %s-338] LPBK_IND_CTRL0 attribute is set to %d.  Legal values for this attribute are 5, 0, 1, 2, 3, 4, 6 or 7. Instance: %m", MODULE_NAME, LPBK_IND_CTRL0_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((LPBK_IND_CTRL1_REG != 5) &&
         (LPBK_IND_CTRL1_REG != 0) &&
         (LPBK_IND_CTRL1_REG != 1) &&
         (LPBK_IND_CTRL1_REG != 2) &&
         (LPBK_IND_CTRL1_REG != 3) &&
         (LPBK_IND_CTRL1_REG != 4) &&
         (LPBK_IND_CTRL1_REG != 6) &&
         (LPBK_IND_CTRL1_REG != 7))) begin
      $display("Error: [Unisim %s-339] LPBK_IND_CTRL1 attribute is set to %d.  Legal values for this attribute are 5, 0, 1, 2, 3, 4, 6 or 7. Instance: %m", MODULE_NAME, LPBK_IND_CTRL1_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((LPBK_IND_CTRL2_REG != 5) &&
         (LPBK_IND_CTRL2_REG != 0) &&
         (LPBK_IND_CTRL2_REG != 1) &&
         (LPBK_IND_CTRL2_REG != 2) &&
         (LPBK_IND_CTRL2_REG != 3) &&
         (LPBK_IND_CTRL2_REG != 4) &&
         (LPBK_IND_CTRL2_REG != 6) &&
         (LPBK_IND_CTRL2_REG != 7))) begin
      $display("Error: [Unisim %s-340] LPBK_IND_CTRL2 attribute is set to %d.  Legal values for this attribute are 5, 0, 1, 2, 3, 4, 6 or 7. Instance: %m", MODULE_NAME, LPBK_IND_CTRL2_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((LPBK_RG_CTRL_REG != 2) &&
         (LPBK_RG_CTRL_REG != 0) &&
         (LPBK_RG_CTRL_REG != 1) &&
         (LPBK_RG_CTRL_REG != 3))) begin
      $display("Error: [Unisim %s-341] LPBK_RG_CTRL attribute is set to %d.  Legal values for this attribute are 2, 0, 1 or 3. Instance: %m", MODULE_NAME, LPBK_RG_CTRL_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((PREIQ_FREQ_BST_REG != 0) &&
         (PREIQ_FREQ_BST_REG != 1) &&
         (PREIQ_FREQ_BST_REG != 2) &&
         (PREIQ_FREQ_BST_REG != 3))) begin
      $display("Error: [Unisim %s-362] PREIQ_FREQ_BST attribute is set to %d.  Legal values for this attribute are 0, 1, 2 or 3. Instance: %m", MODULE_NAME, PREIQ_FREQ_BST_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((RXBUF_EN_REG != "TRUE") &&
         (RXBUF_EN_REG != "FALSE"))) begin
      $display("Error: [Unisim %s-377] RXBUF_EN attribute is set to %s.  Legal values for this attribute are TRUE or FALSE. Instance: %m", MODULE_NAME, RXBUF_EN_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((RXELECIDLE_CFG_REG != "SIGCFG_4") &&
         (RXELECIDLE_CFG_REG != "SIGCFG_1") &&
         (RXELECIDLE_CFG_REG != "SIGCFG_2") &&
         (RXELECIDLE_CFG_REG != "SIGCFG_3") &&
         (RXELECIDLE_CFG_REG != "SIGCFG_6") &&
         (RXELECIDLE_CFG_REG != "SIGCFG_8") &&
         (RXELECIDLE_CFG_REG != "SIGCFG_12") &&
         (RXELECIDLE_CFG_REG != "SIGCFG_16"))) begin
      $display("Error: [Unisim %s-456] RXELECIDLE_CFG attribute is set to %s.  Legal values for this attribute are SIGCFG_4, SIGCFG_1, SIGCFG_2, SIGCFG_3, SIGCFG_6, SIGCFG_8, SIGCFG_12 or SIGCFG_16. Instance: %m", MODULE_NAME, RXELECIDLE_CFG_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((RXGBOX_FIFO_INIT_RD_ADDR_REG != 4) &&
         (RXGBOX_FIFO_INIT_RD_ADDR_REG != 2) &&
         (RXGBOX_FIFO_INIT_RD_ADDR_REG != 3) &&
         (RXGBOX_FIFO_INIT_RD_ADDR_REG != 5))) begin
      $display("Error: [Unisim %s-457] RXGBOX_FIFO_INIT_RD_ADDR attribute is set to %d.  Legal values for this attribute are 4, 2, 3 or 5. Instance: %m", MODULE_NAME, RXGBOX_FIFO_INIT_RD_ADDR_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((RXGEARBOX_EN_REG != "FALSE") &&
         (RXGEARBOX_EN_REG != "TRUE"))) begin
      $display("Error: [Unisim %s-458] RXGEARBOX_EN attribute is set to %s.  Legal values for this attribute are FALSE or TRUE. Instance: %m", MODULE_NAME, RXGEARBOX_EN_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((RXOUT_DIV_REG != 4) &&
         (RXOUT_DIV_REG != 1) &&
         (RXOUT_DIV_REG != 2) &&
         (RXOUT_DIV_REG != 8) &&
         (RXOUT_DIV_REG != 16) &&
         (RXOUT_DIV_REG != 32))) begin
      $display("Error: [Unisim %s-467] RXOUT_DIV attribute is set to %d.  Legal values for this attribute are 4, 1, 2, 8, 16 or 32. Instance: %m", MODULE_NAME, RXOUT_DIV_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((RXPMACLK_SEL_REG != "DATA") &&
         (RXPMACLK_SEL_REG != "CROSSING") &&
         (RXPMACLK_SEL_REG != "EYESCAN"))) begin
      $display("Error: [Unisim %s-479] RXPMACLK_SEL attribute is set to %s.  Legal values for this attribute are DATA, CROSSING or EYESCAN. Instance: %m", MODULE_NAME, RXPMACLK_SEL_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((RXPRBS_LINKACQ_CNT_REG < 15) || (RXPRBS_LINKACQ_CNT_REG > 255))) begin
      $display("Error: [Unisim %s-482] RXPRBS_LINKACQ_CNT attribute is set to %d.  Legal values for this attribute are 15 to 255. Instance: %m", MODULE_NAME, RXPRBS_LINKACQ_CNT_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((RXSLIDE_AUTO_WAIT_REG != 7) &&
         (RXSLIDE_AUTO_WAIT_REG != 1) &&
         (RXSLIDE_AUTO_WAIT_REG != 2) &&
         (RXSLIDE_AUTO_WAIT_REG != 3) &&
         (RXSLIDE_AUTO_WAIT_REG != 4) &&
         (RXSLIDE_AUTO_WAIT_REG != 5) &&
         (RXSLIDE_AUTO_WAIT_REG != 6) &&
         (RXSLIDE_AUTO_WAIT_REG != 8) &&
         (RXSLIDE_AUTO_WAIT_REG != 9) &&
         (RXSLIDE_AUTO_WAIT_REG != 10) &&
         (RXSLIDE_AUTO_WAIT_REG != 11) &&
         (RXSLIDE_AUTO_WAIT_REG != 12) &&
         (RXSLIDE_AUTO_WAIT_REG != 13) &&
         (RXSLIDE_AUTO_WAIT_REG != 14) &&
         (RXSLIDE_AUTO_WAIT_REG != 15))) begin
      $display("Error: [Unisim %s-484] RXSLIDE_AUTO_WAIT attribute is set to %d.  Legal values for this attribute are 7, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14 or 15. Instance: %m", MODULE_NAME, RXSLIDE_AUTO_WAIT_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((RXSLIDE_MODE_REG != "OFF") &&
         (RXSLIDE_MODE_REG != "AUTO") &&
         (RXSLIDE_MODE_REG != "PCS") &&
         (RXSLIDE_MODE_REG != "PMA"))) begin
      $display("Error: [Unisim %s-485] RXSLIDE_MODE attribute is set to %s.  Legal values for this attribute are OFF, AUTO, PCS or PMA. Instance: %m", MODULE_NAME, RXSLIDE_MODE_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((RX_CLK25_DIV_REG < 1) || (RX_CLK25_DIV_REG > 32))) begin
      $display("Error: [Unisim %s-492] RX_CLK25_DIV attribute is set to %d.  Legal values for this attribute are 1 to 32. Instance: %m", MODULE_NAME, RX_CLK25_DIV_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((RX_CM_SEL_REG != 2) &&
         (RX_CM_SEL_REG != 0) &&
         (RX_CM_SEL_REG != 1) &&
         (RX_CM_SEL_REG != 3))) begin
      $display("Error: [Unisim %s-497] RX_CM_SEL attribute is set to %d.  Legal values for this attribute are 2, 0, 1 or 3. Instance: %m", MODULE_NAME, RX_CM_SEL_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((RX_CM_TRIM_REG != 12) &&
         (RX_CM_TRIM_REG != 0) &&
         (RX_CM_TRIM_REG != 1) &&
         (RX_CM_TRIM_REG != 2) &&
         (RX_CM_TRIM_REG != 3) &&
         (RX_CM_TRIM_REG != 4) &&
         (RX_CM_TRIM_REG != 5) &&
         (RX_CM_TRIM_REG != 6) &&
         (RX_CM_TRIM_REG != 7) &&
         (RX_CM_TRIM_REG != 8) &&
         (RX_CM_TRIM_REG != 9) &&
         (RX_CM_TRIM_REG != 10) &&
         (RX_CM_TRIM_REG != 11) &&
         (RX_CM_TRIM_REG != 13) &&
         (RX_CM_TRIM_REG != 14) &&
         (RX_CM_TRIM_REG != 15))) begin
      $display("Error: [Unisim %s-498] RX_CM_TRIM attribute is set to %d.  Legal values for this attribute are 12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14 or 15. Instance: %m", MODULE_NAME, RX_CM_TRIM_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((RX_DATA_WIDTH_REG != 20) &&
         (RX_DATA_WIDTH_REG != 16) &&
         (RX_DATA_WIDTH_REG != 32) &&
         (RX_DATA_WIDTH_REG != 40) &&
         (RX_DATA_WIDTH_REG != 64) &&
         (RX_DATA_WIDTH_REG != 80) &&
         (RX_DATA_WIDTH_REG != 128) &&
         (RX_DATA_WIDTH_REG != 160))) begin
      $display("Error: [Unisim %s-501] RX_DATA_WIDTH attribute is set to %d.  Legal values for this attribute are 20, 16, 32, 40, 64, 80, 128 or 160. Instance: %m", MODULE_NAME, RX_DATA_WIDTH_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((RX_DFELPM_CFG0_REG != 10) &&
         (RX_DFELPM_CFG0_REG != 0) &&
         (RX_DFELPM_CFG0_REG != 1) &&
         (RX_DFELPM_CFG0_REG != 11) &&
         (RX_DFELPM_CFG0_REG != 12) &&
         (RX_DFELPM_CFG0_REG != 13) &&
         (RX_DFELPM_CFG0_REG != 14) &&
         (RX_DFELPM_CFG0_REG != 15))) begin
      $display("Error: [Unisim %s-505] RX_DFELPM_CFG0 attribute is set to %d.  Legal values for this attribute are 10, 0, 1, 11, 12, 13, 14 or 15. Instance: %m", MODULE_NAME, RX_DFELPM_CFG0_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((RX_DFE_AGC_CFG1_REG != 4) &&
         (RX_DFE_AGC_CFG1_REG != 0) &&
         (RX_DFE_AGC_CFG1_REG != 1) &&
         (RX_DFE_AGC_CFG1_REG != 2) &&
         (RX_DFE_AGC_CFG1_REG != 3) &&
         (RX_DFE_AGC_CFG1_REG != 5) &&
         (RX_DFE_AGC_CFG1_REG != 6) &&
         (RX_DFE_AGC_CFG1_REG != 7))) begin
      $display("Error: [Unisim %s-508] RX_DFE_AGC_CFG1 attribute is set to %d.  Legal values for this attribute are 4, 0, 1, 2, 3, 5, 6 or 7. Instance: %m", MODULE_NAME, RX_DFE_AGC_CFG1_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((RX_DFE_KL_LPM_KH_CFG0_REG != 1) &&
         (RX_DFE_KL_LPM_KH_CFG0_REG != 0) &&
         (RX_DFE_KL_LPM_KH_CFG0_REG != 2) &&
         (RX_DFE_KL_LPM_KH_CFG0_REG != 3))) begin
      $display("Error: [Unisim %s-509] RX_DFE_KL_LPM_KH_CFG0 attribute is set to %d.  Legal values for this attribute are 1, 0, 2 or 3. Instance: %m", MODULE_NAME, RX_DFE_KL_LPM_KH_CFG0_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((RX_DFE_KL_LPM_KH_CFG1_REG != 2) &&
         (RX_DFE_KL_LPM_KH_CFG1_REG != 0) &&
         (RX_DFE_KL_LPM_KH_CFG1_REG != 1) &&
         (RX_DFE_KL_LPM_KH_CFG1_REG != 3) &&
         (RX_DFE_KL_LPM_KH_CFG1_REG != 4) &&
         (RX_DFE_KL_LPM_KH_CFG1_REG != 5) &&
         (RX_DFE_KL_LPM_KH_CFG1_REG != 6) &&
         (RX_DFE_KL_LPM_KH_CFG1_REG != 7))) begin
      $display("Error: [Unisim %s-510] RX_DFE_KL_LPM_KH_CFG1 attribute is set to %d.  Legal values for this attribute are 2, 0, 1, 3, 4, 5, 6 or 7. Instance: %m", MODULE_NAME, RX_DFE_KL_LPM_KH_CFG1_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((RX_DFE_KL_LPM_KL_CFG1_REG != 4) &&
         (RX_DFE_KL_LPM_KL_CFG1_REG != 0) &&
         (RX_DFE_KL_LPM_KL_CFG1_REG != 1) &&
         (RX_DFE_KL_LPM_KL_CFG1_REG != 2) &&
         (RX_DFE_KL_LPM_KL_CFG1_REG != 3) &&
         (RX_DFE_KL_LPM_KL_CFG1_REG != 5) &&
         (RX_DFE_KL_LPM_KL_CFG1_REG != 6) &&
         (RX_DFE_KL_LPM_KL_CFG1_REG != 7))) begin
      $display("Error: [Unisim %s-512] RX_DFE_KL_LPM_KL_CFG1 attribute is set to %d.  Legal values for this attribute are 4, 0, 1, 2, 3, 5, 6 or 7. Instance: %m", MODULE_NAME, RX_DFE_KL_LPM_KL_CFG1_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((RX_DISPERR_SEQ_MATCH_REG != "TRUE") &&
         (RX_DISPERR_SEQ_MATCH_REG != "FALSE"))) begin
      $display("Error: [Unisim %s-514] RX_DISPERR_SEQ_MATCH attribute is set to %s.  Legal values for this attribute are TRUE or FALSE. Instance: %m", MODULE_NAME, RX_DISPERR_SEQ_MATCH_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((RX_EN_SUM_RCAL_B_REG != 0) &&
         (RX_EN_SUM_RCAL_B_REG != 1))) begin
      $display("Error: [Unisim %s-517] RX_EN_SUM_RCAL_B attribute is set to %d.  Legal values for this attribute are 0 or 1. Instance: %m", MODULE_NAME, RX_EN_SUM_RCAL_B_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((RX_INT_DATAWIDTH_REG != 1) &&
         (RX_INT_DATAWIDTH_REG != 0) &&
         (RX_INT_DATAWIDTH_REG != 2))) begin
      $display("Error: [Unisim %s-523] RX_INT_DATAWIDTH attribute is set to %d.  Legal values for this attribute are 1, 0 or 2. Instance: %m", MODULE_NAME, RX_INT_DATAWIDTH_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
       ((RX_PROGDIV_CFG_REG != 0.0) &&
        (RX_PROGDIV_CFG_REG != 4.0) &&
        (RX_PROGDIV_CFG_REG != 5.0) &&
        (RX_PROGDIV_CFG_REG != 8.0) &&
        (RX_PROGDIV_CFG_REG != 10.0) &&
        (RX_PROGDIV_CFG_REG != 16.0) &&
        (RX_PROGDIV_CFG_REG != 16.5) &&
        (RX_PROGDIV_CFG_REG != 20.0) &&
        (RX_PROGDIV_CFG_REG != 32.0) &&
        (RX_PROGDIV_CFG_REG != 33.0) &&
        (RX_PROGDIV_CFG_REG != 40.0) &&
        (RX_PROGDIV_CFG_REG != 64.0) &&
        (RX_PROGDIV_CFG_REG != 66.0) &&
        (RX_PROGDIV_CFG_REG != 80.0) &&
        (RX_PROGDIV_CFG_REG != 100.0) &&
        (RX_PROGDIV_CFG_REG != 128.0) &&
        (RX_PROGDIV_CFG_REG != 132.0))) begin
      $display("Error: [Unisim %s-526] RX_PROGDIV_CFG attribute is set to %f.  Legal values for this attribute are 0.0, 4.0, 5.0, 8.0, 10.0, 16.0, 16.5, 20.0, 32.0, 33.0, 40.0, 64.0, 66.0, 80.0, 100.0, 128.0 or 132.0. Instance: %m", MODULE_NAME, RX_PROGDIV_CFG_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((RX_SIG_VALID_DLY_REG < 1) || (RX_SIG_VALID_DLY_REG > 32))) begin
      $display("Error: [Unisim %s-531] RX_SIG_VALID_DLY attribute is set to %d.  Legal values for this attribute are 1 to 32. Instance: %m", MODULE_NAME, RX_SIG_VALID_DLY_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((RX_SUM_DEGEN_AVTT_OVERITE_REG != 0) &&
         (RX_SUM_DEGEN_AVTT_OVERITE_REG != 1))) begin
      $display("Error: [Unisim %s-532] RX_SUM_DEGEN_AVTT_OVERITE attribute is set to %d.  Legal values for this attribute are 0 or 1. Instance: %m", MODULE_NAME, RX_SUM_DEGEN_AVTT_OVERITE_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((RX_SUM_PWR_SAVING_REG != 0) &&
         (RX_SUM_PWR_SAVING_REG != 1))) begin
      $display("Error: [Unisim %s-535] RX_SUM_PWR_SAVING attribute is set to %d.  Legal values for this attribute are 0 or 1. Instance: %m", MODULE_NAME, RX_SUM_PWR_SAVING_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((RX_XCLK_SEL_REG != "RXDES") &&
         (RX_XCLK_SEL_REG != "RXPMA") &&
         (RX_XCLK_SEL_REG != "RXUSR"))) begin
      $display("Error: [Unisim %s-548] RX_XCLK_SEL attribute is set to %s.  Legal values for this attribute are RXDES, RXPMA or RXUSR. Instance: %m", MODULE_NAME, RX_XCLK_SEL_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((SATA_CPLL_CFG_REG != "VCO_3000MHZ") &&
         (SATA_CPLL_CFG_REG != "VCO_750MHZ") &&
         (SATA_CPLL_CFG_REG != "VCO_1500MHZ") &&
         (SATA_CPLL_CFG_REG != "VCO_6000MHZ"))) begin
      $display("Error: [Unisim %s-551] SATA_CPLL_CFG attribute is set to %s.  Legal values for this attribute are VCO_3000MHZ, VCO_750MHZ, VCO_1500MHZ or VCO_6000MHZ. Instance: %m", MODULE_NAME, SATA_CPLL_CFG_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((SIM_MODE_REG != "FAST") &&
         (SIM_MODE_REG != "LEGACY"))) begin
      $display("Error: [Unisim %s-552] SIM_MODE attribute is set to %s.  Legal values for this attribute are FAST or LEGACY. Instance: %m", MODULE_NAME, SIM_MODE_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((SIM_RESET_SPEEDUP_REG != "TRUE") &&
         (SIM_RESET_SPEEDUP_REG != "FALSE"))) begin
      $display("Error: [Unisim %s-553] SIM_RESET_SPEEDUP attribute is set to %s.  Legal values for this attribute are TRUE or FALSE. Instance: %m", MODULE_NAME, SIM_RESET_SPEEDUP_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((SIM_TX_EIDLE_DRIVE_LEVEL_REG != "Z") &&
         (SIM_TX_EIDLE_DRIVE_LEVEL_REG != "HIGH") &&
         (SIM_TX_EIDLE_DRIVE_LEVEL_REG != "LOW") &&
         (SIM_TX_EIDLE_DRIVE_LEVEL_REG != "X"))) begin
      $display("Error: [Unisim %s-554] SIM_TX_EIDLE_DRIVE_LEVEL attribute is set to %s.  Legal values for this attribute are Z, HIGH, LOW or X. Instance: %m", MODULE_NAME, SIM_TX_EIDLE_DRIVE_LEVEL_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((TXBUF_EN_REG != "TRUE") &&
         (TXBUF_EN_REG != "FALSE"))) begin
      $display("Error: [Unisim %s-568] TXBUF_EN attribute is set to %s.  Legal values for this attribute are TRUE or FALSE. Instance: %m", MODULE_NAME, TXBUF_EN_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((TXDRV_FREQBAND_REG != 0) &&
         (TXDRV_FREQBAND_REG != 1) &&
         (TXDRV_FREQBAND_REG != 2) &&
         (TXDRV_FREQBAND_REG != 3))) begin
      $display("Error: [Unisim %s-571] TXDRV_FREQBAND attribute is set to %d.  Legal values for this attribute are 0, 1, 2 or 3. Instance: %m", MODULE_NAME, TXDRV_FREQBAND_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((TXFIFO_ADDR_CFG_REG != "LOW") &&
         (TXFIFO_ADDR_CFG_REG != "HIGH"))) begin
      $display("Error: [Unisim %s-576] TXFIFO_ADDR_CFG attribute is set to %s.  Legal values for this attribute are LOW or HIGH. Instance: %m", MODULE_NAME, TXFIFO_ADDR_CFG_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((TXGBOX_FIFO_INIT_RD_ADDR_REG != 4) &&
         (TXGBOX_FIFO_INIT_RD_ADDR_REG != 2) &&
         (TXGBOX_FIFO_INIT_RD_ADDR_REG != 3) &&
         (TXGBOX_FIFO_INIT_RD_ADDR_REG != 5) &&
         (TXGBOX_FIFO_INIT_RD_ADDR_REG != 6))) begin
      $display("Error: [Unisim %s-577] TXGBOX_FIFO_INIT_RD_ADDR attribute is set to %d.  Legal values for this attribute are 4, 2, 3, 5 or 6. Instance: %m", MODULE_NAME, TXGBOX_FIFO_INIT_RD_ADDR_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((TXOUT_DIV_REG != 4) &&
         (TXOUT_DIV_REG != 1) &&
         (TXOUT_DIV_REG != 2) &&
         (TXOUT_DIV_REG != 8) &&
         (TXOUT_DIV_REG != 16) &&
         (TXOUT_DIV_REG != 32))) begin
      $display("Error: [Unisim %s-579] TXOUT_DIV attribute is set to %d.  Legal values for this attribute are 4, 1, 2, 8, 16 or 32. Instance: %m", MODULE_NAME, TXOUT_DIV_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((TXSWBST_BST_REG != 1) &&
         (TXSWBST_BST_REG != 0) &&
         (TXSWBST_BST_REG != 2) &&
         (TXSWBST_BST_REG != 3))) begin
      $display("Error: [Unisim %s-595] TXSWBST_BST attribute is set to %d.  Legal values for this attribute are 1, 0, 2 or 3. Instance: %m", MODULE_NAME, TXSWBST_BST_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((TXSWBST_EN_REG != 0) &&
         (TXSWBST_EN_REG != 1))) begin
      $display("Error: [Unisim %s-596] TXSWBST_EN attribute is set to %d.  Legal values for this attribute are 0 or 1. Instance: %m", MODULE_NAME, TXSWBST_EN_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((TXSWBST_MAG_REG != 6) &&
         (TXSWBST_MAG_REG != 0) &&
         (TXSWBST_MAG_REG != 1) &&
         (TXSWBST_MAG_REG != 2) &&
         (TXSWBST_MAG_REG != 3) &&
         (TXSWBST_MAG_REG != 4) &&
         (TXSWBST_MAG_REG != 5) &&
         (TXSWBST_MAG_REG != 7))) begin
      $display("Error: [Unisim %s-597] TXSWBST_MAG attribute is set to %d.  Legal values for this attribute are 6, 0, 1, 2, 3, 4, 5 or 7. Instance: %m", MODULE_NAME, TXSWBST_MAG_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((TX_CLK25_DIV_REG < 1) || (TX_CLK25_DIV_REG > 32))) begin
      $display("Error: [Unisim %s-601] TX_CLK25_DIV attribute is set to %d.  Legal values for this attribute are 1 to 32. Instance: %m", MODULE_NAME, TX_CLK25_DIV_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((TX_DATA_WIDTH_REG != 20) &&
         (TX_DATA_WIDTH_REG != 16) &&
         (TX_DATA_WIDTH_REG != 32) &&
         (TX_DATA_WIDTH_REG != 40) &&
         (TX_DATA_WIDTH_REG != 64) &&
         (TX_DATA_WIDTH_REG != 80) &&
         (TX_DATA_WIDTH_REG != 128) &&
         (TX_DATA_WIDTH_REG != 160))) begin
      $display("Error: [Unisim %s-603] TX_DATA_WIDTH attribute is set to %d.  Legal values for this attribute are 20, 16, 32, 40, 64, 80, 128 or 160. Instance: %m", MODULE_NAME, TX_DATA_WIDTH_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((TX_INT_DATAWIDTH_REG != 0) &&
         (TX_INT_DATAWIDTH_REG != 1) &&
         (TX_INT_DATAWIDTH_REG != 2))) begin
      $display("Error: [Unisim %s-611] TX_INT_DATAWIDTH attribute is set to %d.  Legal values for this attribute are 0, 1 or 2. Instance: %m", MODULE_NAME, TX_INT_DATAWIDTH_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((TX_LOOPBACK_DRIVE_HIZ_REG != "FALSE") &&
         (TX_LOOPBACK_DRIVE_HIZ_REG != "TRUE"))) begin
      $display("Error: [Unisim %s-612] TX_LOOPBACK_DRIVE_HIZ attribute is set to %s.  Legal values for this attribute are FALSE or TRUE. Instance: %m", MODULE_NAME, TX_LOOPBACK_DRIVE_HIZ_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((TX_PI_BIASSET_REG != 0) &&
         (TX_PI_BIASSET_REG != 1) &&
         (TX_PI_BIASSET_REG != 2) &&
         (TX_PI_BIASSET_REG != 3))) begin
      $display("Error: [Unisim %s-616] TX_PI_BIASSET attribute is set to %d.  Legal values for this attribute are 0, 1, 2 or 3. Instance: %m", MODULE_NAME, TX_PI_BIASSET_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((TX_PROGCLK_SEL_REG != "POSTPI") &&
         (TX_PROGCLK_SEL_REG != "CPLL") &&
         (TX_PROGCLK_SEL_REG != "PREPI"))) begin
      $display("Error: [Unisim %s-621] TX_PROGCLK_SEL attribute is set to %s.  Legal values for this attribute are POSTPI, CPLL or PREPI. Instance: %m", MODULE_NAME, TX_PROGCLK_SEL_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
       ((TX_PROGDIV_CFG_REG != 0.0) &&
        (TX_PROGDIV_CFG_REG != 4.0) &&
        (TX_PROGDIV_CFG_REG != 5.0) &&
        (TX_PROGDIV_CFG_REG != 8.0) &&
        (TX_PROGDIV_CFG_REG != 10.0) &&
        (TX_PROGDIV_CFG_REG != 16.0) &&
        (TX_PROGDIV_CFG_REG != 16.5) &&
        (TX_PROGDIV_CFG_REG != 20.0) &&
        (TX_PROGDIV_CFG_REG != 32.0) &&
        (TX_PROGDIV_CFG_REG != 33.0) &&
        (TX_PROGDIV_CFG_REG != 40.0) &&
        (TX_PROGDIV_CFG_REG != 64.0) &&
        (TX_PROGDIV_CFG_REG != 66.0) &&
        (TX_PROGDIV_CFG_REG != 80.0) &&
        (TX_PROGDIV_CFG_REG != 100.0) &&
        (TX_PROGDIV_CFG_REG != 128.0) &&
        (TX_PROGDIV_CFG_REG != 132.0))) begin
      $display("Error: [Unisim %s-622] TX_PROGDIV_CFG attribute is set to %f.  Legal values for this attribute are 0.0, 4.0, 5.0, 8.0, 10.0, 16.0, 16.5, 20.0, 32.0, 33.0, 40.0, 64.0, 66.0, 80.0, 100.0, 128.0 or 132.0. Instance: %m", MODULE_NAME, TX_PROGDIV_CFG_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((TX_XCLK_SEL_REG != "TXOUT") &&
         (TX_XCLK_SEL_REG != "TXUSR"))) begin
      $display("Error: [Unisim %s-637] TX_XCLK_SEL attribute is set to %s.  Legal values for this attribute are TXOUT or TXUSR. Instance: %m", MODULE_NAME, TX_XCLK_SEL_REG);
      attr_err = 1'b1;
    end
    
    if (attr_err == 1'b1) #1 $finish;
  end
`endif


assign PMASCANCLK0_in = 1'b1; // tie off
assign PMASCANCLK1_in = 1'b1; // tie off
assign PMASCANCLK2_in = 1'b1; // tie off
assign PMASCANCLK3_in = 1'b1; // tie off
assign PMASCANCLK4_in = 1'b1; // tie off
assign PMASCANCLK5_in = 1'b1; // tie off
assign PMASCANCLK6_in = 1'b1; // tie off
assign PMASCANCLK7_in = 1'b1; // tie off
assign PMASCANCLK8_in = 1'b1; // tie off
assign SCANCLK_in = 1'b1; // tie off
assign TSTCLK0_in = 1'b1; // tie off
assign TSTCLK1_in = 1'b1; // tie off

assign BSR_SERIAL_in = 1'b1; // tie off
assign PMASCANENB_in = 1'b1; // tie off
assign PMASCANIN_in = 18'b111111111111111111; // tie off
assign PMASCANMODEB_in = 1'b1; // tie off
assign PMASCANRSTEN_in = 1'b1; // tie off
assign SARCCLK_in = 1'b1; // tie off
assign SCANENB_in = 1'b1; // tie off
assign SCANIN_in = 19'b1111111111111111111; // tie off
assign SCANMODEB_in = 1'b1; // tie off
assign SCANRSTB_in = 1'b1; // tie off
assign SCANRSTEN_in = 1'b1; // tie off
assign TSTPDOVRDB_in = 1'b1; // tie off
assign TSTPD_in = 5'b11111; // tie off

  SIP_GTF_CHANNEL SIP_GTF_CHANNEL_INST (
    .ACJTAG_DEBUG_MODE (ACJTAG_DEBUG_MODE_REG),
    .ACJTAG_MODE (ACJTAG_MODE_REG),
    .ACJTAG_RESET (ACJTAG_RESET_REG),
    .ADAPT_CFG0 (ADAPT_CFG0_REG),
    .ADAPT_CFG1 (ADAPT_CFG1_REG),
    .ADAPT_CFG2 (ADAPT_CFG2_REG),
    .AEN_CDRSTEPSEL (AEN_CDRSTEPSEL_REG),
    .AEN_CPLL (AEN_CPLL_REG),
    .AEN_LOOPBACK (AEN_LOOPBACK_REG),
    .AEN_MASTER (AEN_MASTER_REG),
    .AEN_PD_AND_EIDLE (AEN_PD_AND_EIDLE_REG),
    .AEN_POLARITY (AEN_POLARITY_REG),
    .AEN_PRBS (AEN_PRBS_REG),
    .AEN_RESET (AEN_RESET_REG),
    .AEN_RXCDR (AEN_RXCDR_REG),
    .AEN_RXDFE (AEN_RXDFE_REG),
    .AEN_RXDFELPM (AEN_RXDFELPM_REG),
    .AEN_RXOUTCLK_SEL (AEN_RXOUTCLK_SEL_REG),
    .AEN_RXPHDLY (AEN_RXPHDLY_REG),
    .AEN_RXPLLCLK_SEL (AEN_RXPLLCLK_SEL_REG),
    .AEN_RXSYSCLK_SEL (AEN_RXSYSCLK_SEL_REG),
    .AEN_TXMUXDCD (AEN_TXMUXDCD_REG),
    .AEN_TXOUTCLK_SEL (AEN_TXOUTCLK_SEL_REG),
    .AEN_TXPHDLY (AEN_TXPHDLY_REG),
    .AEN_TXPI_PPM (AEN_TXPI_PPM_REG),
    .AEN_TXPLLCLK_SEL (AEN_TXPLLCLK_SEL_REG),
    .AEN_TXSYSCLK_SEL (AEN_TXSYSCLK_SEL_REG),
    .AEN_TX_DRIVE_MODE (AEN_TX_DRIVE_MODE_REG),
    .AMONITOR_CFG (AMONITOR_CFG_REG),
    .A_CPLLLOCKEN (A_CPLLLOCKEN_REG),
    .A_CPLLPD (A_CPLLPD_REG),
    .A_CPLLRESET (A_CPLLRESET_REG),
    .A_EYESCANRESET (A_EYESCANRESET_REG),
    .A_GTRESETSEL (A_GTRESETSEL_REG),
    .A_GTRXRESET (A_GTRXRESET_REG),
    .A_GTTXRESET (A_GTTXRESET_REG),
    .A_LOOPBACK (A_LOOPBACK_REG),
    .A_RXAFECFOKEN (A_RXAFECFOKEN_REG),
    .A_RXBUFRESET (A_RXBUFRESET_REG),
    .A_RXCDRFREQRESET (A_RXCDRFREQRESET_REG),
    .A_RXCDRHOLD (A_RXCDRHOLD_REG),
    .A_RXCDROVRDEN (A_RXCDROVRDEN_REG),
    .A_RXCDRRESET (A_RXCDRRESET_REG),
    .A_RXCKCALRESET (A_RXCKCALRESET_REG),
    .A_RXDFEAGCHOLD (A_RXDFEAGCHOLD_REG),
    .A_RXDFEAGCOVRDEN (A_RXDFEAGCOVRDEN_REG),
    .A_RXDFECFOKFCNUM (A_RXDFECFOKFCNUM_REG),
    .A_RXDFECFOKFEN (A_RXDFECFOKFEN_REG),
    .A_RXDFECFOKFPULSE (A_RXDFECFOKFPULSE_REG),
    .A_RXDFECFOKHOLD (A_RXDFECFOKHOLD_REG),
    .A_RXDFECFOKOVREN (A_RXDFECFOKOVREN_REG),
    .A_RXDFEKHHOLD (A_RXDFEKHHOLD_REG),
    .A_RXDFEKHOVRDEN (A_RXDFEKHOVRDEN_REG),
    .A_RXDFELFHOLD (A_RXDFELFHOLD_REG),
    .A_RXDFELFOVRDEN (A_RXDFELFOVRDEN_REG),
    .A_RXDFELPMRESET (A_RXDFELPMRESET_REG),
    .A_RXDFETAP10HOLD (A_RXDFETAP10HOLD_REG),
    .A_RXDFETAP10OVRDEN (A_RXDFETAP10OVRDEN_REG),
    .A_RXDFETAP11HOLD (A_RXDFETAP11HOLD_REG),
    .A_RXDFETAP11OVRDEN (A_RXDFETAP11OVRDEN_REG),
    .A_RXDFETAP12HOLD (A_RXDFETAP12HOLD_REG),
    .A_RXDFETAP12OVRDEN (A_RXDFETAP12OVRDEN_REG),
    .A_RXDFETAP13HOLD (A_RXDFETAP13HOLD_REG),
    .A_RXDFETAP13OVRDEN (A_RXDFETAP13OVRDEN_REG),
    .A_RXDFETAP14HOLD (A_RXDFETAP14HOLD_REG),
    .A_RXDFETAP14OVRDEN (A_RXDFETAP14OVRDEN_REG),
    .A_RXDFETAP15HOLD (A_RXDFETAP15HOLD_REG),
    .A_RXDFETAP15OVRDEN (A_RXDFETAP15OVRDEN_REG),
    .A_RXDFETAP2HOLD (A_RXDFETAP2HOLD_REG),
    .A_RXDFETAP2OVRDEN (A_RXDFETAP2OVRDEN_REG),
    .A_RXDFETAP3HOLD (A_RXDFETAP3HOLD_REG),
    .A_RXDFETAP3OVRDEN (A_RXDFETAP3OVRDEN_REG),
    .A_RXDFETAP4HOLD (A_RXDFETAP4HOLD_REG),
    .A_RXDFETAP4OVRDEN (A_RXDFETAP4OVRDEN_REG),
    .A_RXDFETAP5HOLD (A_RXDFETAP5HOLD_REG),
    .A_RXDFETAP5OVRDEN (A_RXDFETAP5OVRDEN_REG),
    .A_RXDFETAP6HOLD (A_RXDFETAP6HOLD_REG),
    .A_RXDFETAP6OVRDEN (A_RXDFETAP6OVRDEN_REG),
    .A_RXDFETAP7HOLD (A_RXDFETAP7HOLD_REG),
    .A_RXDFETAP7OVRDEN (A_RXDFETAP7OVRDEN_REG),
    .A_RXDFETAP8HOLD (A_RXDFETAP8HOLD_REG),
    .A_RXDFETAP8OVRDEN (A_RXDFETAP8OVRDEN_REG),
    .A_RXDFETAP9HOLD (A_RXDFETAP9HOLD_REG),
    .A_RXDFETAP9OVRDEN (A_RXDFETAP9OVRDEN_REG),
    .A_RXDFEUTHOLD (A_RXDFEUTHOLD_REG),
    .A_RXDFEUTOVRDEN (A_RXDFEUTOVRDEN_REG),
    .A_RXDFEVPHOLD (A_RXDFEVPHOLD_REG),
    .A_RXDFEVPOVRDEN (A_RXDFEVPOVRDEN_REG),
    .A_RXDFEXYDEN (A_RXDFEXYDEN_REG),
    .A_RXDLYBYPASS (A_RXDLYBYPASS_REG),
    .A_RXDLYEN (A_RXDLYEN_REG),
    .A_RXDLYOVRDEN (A_RXDLYOVRDEN_REG),
    .A_RXDLYSRESET (A_RXDLYSRESET_REG),
    .A_RXLPMEN (A_RXLPMEN_REG),
    .A_RXLPMGCHOLD (A_RXLPMGCHOLD_REG),
    .A_RXLPMGCOVRDEN (A_RXLPMGCOVRDEN_REG),
    .A_RXLPMHFHOLD (A_RXLPMHFHOLD_REG),
    .A_RXLPMHFOVRDEN (A_RXLPMHFOVRDEN_REG),
    .A_RXLPMLFHOLD (A_RXLPMLFHOLD_REG),
    .A_RXLPMLFKLOVRDEN (A_RXLPMLFKLOVRDEN_REG),
    .A_RXLPMOSHOLD (A_RXLPMOSHOLD_REG),
    .A_RXLPMOSOVRDEN (A_RXLPMOSOVRDEN_REG),
    .A_RXMONITORSEL (A_RXMONITORSEL_REG),
    .A_RXOSCALRESET (A_RXOSCALRESET_REG),
    .A_RXOSHOLD (A_RXOSHOLD_REG),
    .A_RXOSOVRDEN (A_RXOSOVRDEN_REG),
    .A_RXOUTCLKSEL (A_RXOUTCLKSEL_REG),
    .A_RXPCSRESET (A_RXPCSRESET_REG),
    .A_RXPD (A_RXPD_REG),
    .A_RXPHALIGN (A_RXPHALIGN_REG),
    .A_RXPHALIGNEN (A_RXPHALIGNEN_REG),
    .A_RXPHDLYPD (A_RXPHDLYPD_REG),
    .A_RXPHDLYRESET (A_RXPHDLYRESET_REG),
    .A_RXPLLCLKSEL (A_RXPLLCLKSEL_REG),
    .A_RXPMARESET (A_RXPMARESET_REG),
    .A_RXPOLARITY (A_RXPOLARITY_REG),
    .A_RXPRBSCNTRESET (A_RXPRBSCNTRESET_REG),
    .A_RXPRBSSEL (A_RXPRBSSEL_REG),
    .A_RXPROGDIVRESET (A_RXPROGDIVRESET_REG),
    .A_RXSYSCLKSEL (A_RXSYSCLKSEL_REG),
    .A_RXTERMINATION (A_RXTERMINATION_REG),
    .A_TXBUFDIFFCTRL (A_TXBUFDIFFCTRL_REG),
    .A_TXDCCRESET (A_TXDCCRESET_REG),
    .A_TXDEEMPH (A_TXDEEMPH_REG),
    .A_TXDIFFCTRL (A_TXDIFFCTRL_REG),
    .A_TXDLYBYPASS (A_TXDLYBYPASS_REG),
    .A_TXDLYEN (A_TXDLYEN_REG),
    .A_TXDLYOVRDEN (A_TXDLYOVRDEN_REG),
    .A_TXDLYSRESET (A_TXDLYSRESET_REG),
    .A_TXELECIDLE (A_TXELECIDLE_REG),
    .A_TXINHIBIT (A_TXINHIBIT_REG),
    .A_TXMAINCURSOR (A_TXMAINCURSOR_REG),
    .A_TXMARGIN (A_TXMARGIN_REG),
    .A_TXMUXDCDEXHOLD (A_TXMUXDCDEXHOLD_REG),
    .A_TXMUXDCDORWREN (A_TXMUXDCDORWREN_REG),
    .A_TXOUTCLKSEL (A_TXOUTCLKSEL_REG),
    .A_TXPCSRESET (A_TXPCSRESET_REG),
    .A_TXPD (A_TXPD_REG),
    .A_TXPHALIGN (A_TXPHALIGN_REG),
    .A_TXPHALIGNEN (A_TXPHALIGNEN_REG),
    .A_TXPHDLYPD (A_TXPHDLYPD_REG),
    .A_TXPHDLYRESET (A_TXPHDLYRESET_REG),
    .A_TXPHINIT (A_TXPHINIT_REG),
    .A_TXPHOVRDEN (A_TXPHOVRDEN_REG),
    .A_TXPIPPMOVRDEN (A_TXPIPPMOVRDEN_REG),
    .A_TXPIPPMPD (A_TXPIPPMPD_REG),
    .A_TXPIPPMSEL (A_TXPIPPMSEL_REG),
    .A_TXPLLCLKSEL (A_TXPLLCLKSEL_REG),
    .A_TXPMARESET (A_TXPMARESET_REG),
    .A_TXPOLARITY (A_TXPOLARITY_REG),
    .A_TXPOSTCURSOR (A_TXPOSTCURSOR_REG),
    .A_TXPRBSFORCEERR (A_TXPRBSFORCEERR_REG),
    .A_TXPRBSSEL (A_TXPRBSSEL_REG),
    .A_TXPRECURSOR (A_TXPRECURSOR_REG),
    .A_TXPROGDIVRESET (A_TXPROGDIVRESET_REG),
    .A_TXRESETSEL (A_TXRESETSEL_REG),
    .A_TXSYSCLKSEL (A_TXSYSCLKSEL_REG),
    .BSR_ENABLE (BSR_ENABLE_REG),
    .CBCC_DATA_SOURCE_SEL (CBCC_DATA_SOURCE_SEL_REG),
    .CDR_SWAP_MODE_EN (CDR_SWAP_MODE_EN_REG),
    .CFOK_PWRSVE_EN (CFOK_PWRSVE_EN_REG),
    .CH_HSPMUX (CH_HSPMUX_REG),
    .CKCAL1_CFG_0 (CKCAL1_CFG_0_REG),
    .CKCAL1_CFG_1 (CKCAL1_CFG_1_REG),
    .CKCAL1_CFG_2 (CKCAL1_CFG_2_REG),
    .CKCAL1_CFG_3 (CKCAL1_CFG_3_REG),
    .CKCAL2_CFG_0 (CKCAL2_CFG_0_REG),
    .CKCAL2_CFG_1 (CKCAL2_CFG_1_REG),
    .CKCAL2_CFG_2 (CKCAL2_CFG_2_REG),
    .CKCAL2_CFG_3 (CKCAL2_CFG_3_REG),
    .CKCAL2_CFG_4 (CKCAL2_CFG_4_REG),
    .CPLL_CFG0 (CPLL_CFG0_REG),
    .CPLL_CFG1 (CPLL_CFG1_REG),
    .CPLL_CFG2 (CPLL_CFG2_REG),
    .CPLL_CFG3 (CPLL_CFG3_REG),
    .CPLL_FBDIV (CPLL_FBDIV_REG),
    .CPLL_FBDIV_45 (CPLL_FBDIV_45_REG),
    .CPLL_INIT_CFG0 (CPLL_INIT_CFG0_REG),
    .CPLL_LOCK_CFG (CPLL_LOCK_CFG_REG),
    .CPLL_REFCLK_DIV (CPLL_REFCLK_DIV_REG),
    .CTLE3_OCAP_EXT_CTRL (CTLE3_OCAP_EXT_CTRL_REG),
    .CTLE3_OCAP_EXT_EN (CTLE3_OCAP_EXT_EN_REG),
    .DDI_CTRL (DDI_CTRL_REG),
    .DDI_REALIGN_WAIT (DDI_REALIGN_WAIT_REG),
    .DELAY_ELEC (DELAY_ELEC_REG),
    .DMONITOR_CFG0 (DMONITOR_CFG0_REG),
    .DMONITOR_CFG1 (DMONITOR_CFG1_REG),
    .ES_CLK_PHASE_SEL (ES_CLK_PHASE_SEL_REG),
    .ES_CONTROL (ES_CONTROL_REG),
    .ES_ERRDET_EN (ES_ERRDET_EN_REG),
    .ES_EYE_SCAN_EN (ES_EYE_SCAN_EN_REG),
    .ES_HORZ_OFFSET (ES_HORZ_OFFSET_REG),
    .ES_PRESCALE (ES_PRESCALE_REG),
    .ES_QUALIFIER0 (ES_QUALIFIER0_REG),
    .ES_QUALIFIER1 (ES_QUALIFIER1_REG),
    .ES_QUALIFIER2 (ES_QUALIFIER2_REG),
    .ES_QUALIFIER3 (ES_QUALIFIER3_REG),
    .ES_QUALIFIER4 (ES_QUALIFIER4_REG),
    .ES_QUALIFIER5 (ES_QUALIFIER5_REG),
    .ES_QUALIFIER6 (ES_QUALIFIER6_REG),
    .ES_QUALIFIER7 (ES_QUALIFIER7_REG),
    .ES_QUALIFIER8 (ES_QUALIFIER8_REG),
    .ES_QUALIFIER9 (ES_QUALIFIER9_REG),
    .ES_QUAL_MASK0 (ES_QUAL_MASK0_REG),
    .ES_QUAL_MASK1 (ES_QUAL_MASK1_REG),
    .ES_QUAL_MASK2 (ES_QUAL_MASK2_REG),
    .ES_QUAL_MASK3 (ES_QUAL_MASK3_REG),
    .ES_QUAL_MASK4 (ES_QUAL_MASK4_REG),
    .ES_QUAL_MASK5 (ES_QUAL_MASK5_REG),
    .ES_QUAL_MASK6 (ES_QUAL_MASK6_REG),
    .ES_QUAL_MASK7 (ES_QUAL_MASK7_REG),
    .ES_QUAL_MASK8 (ES_QUAL_MASK8_REG),
    .ES_QUAL_MASK9 (ES_QUAL_MASK9_REG),
    .ES_SDATA_MASK0 (ES_SDATA_MASK0_REG),
    .ES_SDATA_MASK1 (ES_SDATA_MASK1_REG),
    .ES_SDATA_MASK2 (ES_SDATA_MASK2_REG),
    .ES_SDATA_MASK3 (ES_SDATA_MASK3_REG),
    .ES_SDATA_MASK4 (ES_SDATA_MASK4_REG),
    .ES_SDATA_MASK5 (ES_SDATA_MASK5_REG),
    .ES_SDATA_MASK6 (ES_SDATA_MASK6_REG),
    .ES_SDATA_MASK7 (ES_SDATA_MASK7_REG),
    .ES_SDATA_MASK8 (ES_SDATA_MASK8_REG),
    .ES_SDATA_MASK9 (ES_SDATA_MASK9_REG),
    .EYESCAN_VP_RANGE (EYESCAN_VP_RANGE_REG),
    .EYE_SCAN_SWAP_EN (EYE_SCAN_SWAP_EN_REG),
    .FTS_DESKEW_SEQ_ENABLE (FTS_DESKEW_SEQ_ENABLE_REG),
    .FTS_LANE_DESKEW_CFG (FTS_LANE_DESKEW_CFG_REG),
    .FTS_LANE_DESKEW_EN (FTS_LANE_DESKEW_EN_REG),
    .GEARBOX_MODE (GEARBOX_MODE_REG),
    .GEN_RXUSRCLK (GEN_RXUSRCLK_REG),
    .GEN_TXUSRCLK (GEN_TXUSRCLK_REG),
    .GT_INSTANTIATED (GT_INSTANTIATED_REG),
    .ISCAN_CK_PH_SEL2 (ISCAN_CK_PH_SEL2_REG),
    .LOCAL_MASTER (LOCAL_MASTER_REG),
    .LPBK_BIAS_CTRL (LPBK_BIAS_CTRL_REG),
    .LPBK_EN_RCAL_B (LPBK_EN_RCAL_B_REG),
    .LPBK_EXT_RCAL (LPBK_EXT_RCAL_REG),
    .LPBK_IND_CTRL0 (LPBK_IND_CTRL0_REG),
    .LPBK_IND_CTRL1 (LPBK_IND_CTRL1_REG),
    .LPBK_IND_CTRL2 (LPBK_IND_CTRL2_REG),
    .LPBK_RG_CTRL (LPBK_RG_CTRL_REG),
    .MAC_CFG0 (MAC_CFG0_REG),
    .MAC_CFG1 (MAC_CFG1_REG),
    .MAC_CFG10 (MAC_CFG10_REG),
    .MAC_CFG11 (MAC_CFG11_REG),
    .MAC_CFG12 (MAC_CFG12_REG),
    .MAC_CFG13 (MAC_CFG13_REG),
    .MAC_CFG14 (MAC_CFG14_REG),
    .MAC_CFG15 (MAC_CFG15_REG),
    .MAC_CFG2 (MAC_CFG2_REG),
    .MAC_CFG3 (MAC_CFG3_REG),
    .MAC_CFG4 (MAC_CFG4_REG),
    .MAC_CFG5 (MAC_CFG5_REG),
    .MAC_CFG6 (MAC_CFG6_REG),
    .MAC_CFG7 (MAC_CFG7_REG),
    .MAC_CFG8 (MAC_CFG8_REG),
    .MAC_CFG9 (MAC_CFG9_REG),
    .PCS_RSVD0 (PCS_RSVD0_REG),
    .PD_TRANS_TIME_FROM_P2 (PD_TRANS_TIME_FROM_P2_REG),
    .PD_TRANS_TIME_NONE_P2 (PD_TRANS_TIME_NONE_P2_REG),
    .PD_TRANS_TIME_TO_P2 (PD_TRANS_TIME_TO_P2_REG),
    .PREIQ_FREQ_BST (PREIQ_FREQ_BST_REG),
    .RAW_MAC_CFG (RAW_MAC_CFG_REG),
    .RCLK_SIPO_DLY_ENB (RCLK_SIPO_DLY_ENB_REG),
    .RCLK_SIPO_INV_EN (RCLK_SIPO_INV_EN_REG),
    .RCO_NEW_MAC_CFG0 (RCO_NEW_MAC_CFG0_REG),
    .RCO_NEW_MAC_CFG1 (RCO_NEW_MAC_CFG1_REG),
    .RCO_NEW_MAC_CFG2 (RCO_NEW_MAC_CFG2_REG),
    .RCO_NEW_MAC_CFG3 (RCO_NEW_MAC_CFG3_REG),
    .RCO_NEW_RAW_CFG0 (RCO_NEW_RAW_CFG0_REG),
    .RCO_NEW_RAW_CFG1 (RCO_NEW_RAW_CFG1_REG),
    .RCO_NEW_RAW_CFG2 (RCO_NEW_RAW_CFG2_REG),
    .RCO_NEW_RAW_CFG3 (RCO_NEW_RAW_CFG3_REG),
    .RTX_BUF_CML_CTRL (RTX_BUF_CML_CTRL_REG),
    .RTX_BUF_TERM_CTRL (RTX_BUF_TERM_CTRL_REG),
    .RXBUFRESET_TIME (RXBUFRESET_TIME_REG),
    .RXBUF_EN (RXBUF_EN_REG),
    .RXCDRFREQRESET_TIME (RXCDRFREQRESET_TIME_REG),
    .RXCDRPHRESET_TIME (RXCDRPHRESET_TIME_REG),
    .RXCDR_CFG0 (RXCDR_CFG0_REG),
    .RXCDR_CFG1 (RXCDR_CFG1_REG),
    .RXCDR_CFG2 (RXCDR_CFG2_REG),
    .RXCDR_CFG3 (RXCDR_CFG3_REG),
    .RXCDR_CFG4 (RXCDR_CFG4_REG),
    .RXCDR_CFG5 (RXCDR_CFG5_REG),
    .RXCDR_FR_RESET_ON_EIDLE (RXCDR_FR_RESET_ON_EIDLE_REG),
    .RXCDR_HOLD_DURING_EIDLE (RXCDR_HOLD_DURING_EIDLE_REG),
    .RXCDR_LOCK_CFG0 (RXCDR_LOCK_CFG0_REG),
    .RXCDR_LOCK_CFG1 (RXCDR_LOCK_CFG1_REG),
    .RXCDR_LOCK_CFG2 (RXCDR_LOCK_CFG2_REG),
    .RXCDR_LOCK_CFG3 (RXCDR_LOCK_CFG3_REG),
    .RXCDR_LOCK_CFG4 (RXCDR_LOCK_CFG4_REG),
    .RXCDR_PH_RESET_ON_EIDLE (RXCDR_PH_RESET_ON_EIDLE_REG),
    .RXCFOK_CFG0 (RXCFOK_CFG0_REG),
    .RXCFOK_CFG1 (RXCFOK_CFG1_REG),
    .RXCFOK_CFG2 (RXCFOK_CFG2_REG),
    .RXCKCAL1_IQ_LOOP_RST_CFG (RXCKCAL1_IQ_LOOP_RST_CFG_REG),
    .RXCKCAL1_I_LOOP_RST_CFG (RXCKCAL1_I_LOOP_RST_CFG_REG),
    .RXCKCAL1_Q_LOOP_RST_CFG (RXCKCAL1_Q_LOOP_RST_CFG_REG),
    .RXCKCAL2_DX_LOOP_RST_CFG (RXCKCAL2_DX_LOOP_RST_CFG_REG),
    .RXCKCAL2_D_LOOP_RST_CFG (RXCKCAL2_D_LOOP_RST_CFG_REG),
    .RXCKCAL2_S_LOOP_RST_CFG (RXCKCAL2_S_LOOP_RST_CFG_REG),
    .RXCKCAL2_X_LOOP_RST_CFG (RXCKCAL2_X_LOOP_RST_CFG_REG),
    .RXDFELPMRESET_TIME (RXDFELPMRESET_TIME_REG),
    .RXDFELPM_KL_CFG0 (RXDFELPM_KL_CFG0_REG),
    .RXDFELPM_KL_CFG1 (RXDFELPM_KL_CFG1_REG),
    .RXDFELPM_KL_CFG2 (RXDFELPM_KL_CFG2_REG),
    .RXDFE_CFG0 (RXDFE_CFG0_REG),
    .RXDFE_CFG1 (RXDFE_CFG1_REG),
    .RXDFE_GC_CFG0 (RXDFE_GC_CFG0_REG),
    .RXDFE_GC_CFG1 (RXDFE_GC_CFG1_REG),
    .RXDFE_GC_CFG2 (RXDFE_GC_CFG2_REG),
    .RXDFE_H2_CFG0 (RXDFE_H2_CFG0_REG),
    .RXDFE_H2_CFG1 (RXDFE_H2_CFG1_REG),
    .RXDFE_H3_CFG0 (RXDFE_H3_CFG0_REG),
    .RXDFE_H3_CFG1 (RXDFE_H3_CFG1_REG),
    .RXDFE_H4_CFG0 (RXDFE_H4_CFG0_REG),
    .RXDFE_H4_CFG1 (RXDFE_H4_CFG1_REG),
    .RXDFE_H5_CFG0 (RXDFE_H5_CFG0_REG),
    .RXDFE_H5_CFG1 (RXDFE_H5_CFG1_REG),
    .RXDFE_H6_CFG0 (RXDFE_H6_CFG0_REG),
    .RXDFE_H6_CFG1 (RXDFE_H6_CFG1_REG),
    .RXDFE_H7_CFG0 (RXDFE_H7_CFG0_REG),
    .RXDFE_H7_CFG1 (RXDFE_H7_CFG1_REG),
    .RXDFE_H8_CFG0 (RXDFE_H8_CFG0_REG),
    .RXDFE_H8_CFG1 (RXDFE_H8_CFG1_REG),
    .RXDFE_H9_CFG0 (RXDFE_H9_CFG0_REG),
    .RXDFE_H9_CFG1 (RXDFE_H9_CFG1_REG),
    .RXDFE_HA_CFG0 (RXDFE_HA_CFG0_REG),
    .RXDFE_HA_CFG1 (RXDFE_HA_CFG1_REG),
    .RXDFE_HB_CFG0 (RXDFE_HB_CFG0_REG),
    .RXDFE_HB_CFG1 (RXDFE_HB_CFG1_REG),
    .RXDFE_HC_CFG0 (RXDFE_HC_CFG0_REG),
    .RXDFE_HC_CFG1 (RXDFE_HC_CFG1_REG),
    .RXDFE_HD_CFG0 (RXDFE_HD_CFG0_REG),
    .RXDFE_HD_CFG1 (RXDFE_HD_CFG1_REG),
    .RXDFE_HE_CFG0 (RXDFE_HE_CFG0_REG),
    .RXDFE_HE_CFG1 (RXDFE_HE_CFG1_REG),
    .RXDFE_HF_CFG0 (RXDFE_HF_CFG0_REG),
    .RXDFE_HF_CFG1 (RXDFE_HF_CFG1_REG),
    .RXDFE_KH_CFG0 (RXDFE_KH_CFG0_REG),
    .RXDFE_KH_CFG1 (RXDFE_KH_CFG1_REG),
    .RXDFE_KH_CFG2 (RXDFE_KH_CFG2_REG),
    .RXDFE_KH_CFG3 (RXDFE_KH_CFG3_REG),
    .RXDFE_OS_CFG0 (RXDFE_OS_CFG0_REG),
    .RXDFE_OS_CFG1 (RXDFE_OS_CFG1_REG),
    .RXDFE_UT_CFG0 (RXDFE_UT_CFG0_REG),
    .RXDFE_UT_CFG1 (RXDFE_UT_CFG1_REG),
    .RXDFE_UT_CFG2 (RXDFE_UT_CFG2_REG),
    .RXDFE_VP_CFG0 (RXDFE_VP_CFG0_REG),
    .RXDFE_VP_CFG1 (RXDFE_VP_CFG1_REG),
    .RXDLY_CFG (RXDLY_CFG_REG),
    .RXDLY_LCFG (RXDLY_LCFG_REG),
    .RXDLY_RAW_CFG (RXDLY_RAW_CFG_REG),
    .RXDLY_RAW_LCFG (RXDLY_RAW_LCFG_REG),
    .RXELECIDLE_CFG (RXELECIDLE_CFG_REG),
    .RXGBOX_FIFO_INIT_RD_ADDR (RXGBOX_FIFO_INIT_RD_ADDR_REG),
    .RXGEARBOX_EN (RXGEARBOX_EN_REG),
    .RXISCANRESET_TIME (RXISCANRESET_TIME_REG),
    .RXLPM_CFG (RXLPM_CFG_REG),
    .RXLPM_GC_CFG (RXLPM_GC_CFG_REG),
    .RXLPM_KH_CFG0 (RXLPM_KH_CFG0_REG),
    .RXLPM_KH_CFG1 (RXLPM_KH_CFG1_REG),
    .RXLPM_OS_CFG0 (RXLPM_OS_CFG0_REG),
    .RXLPM_OS_CFG1 (RXLPM_OS_CFG1_REG),
    .RXOSCALRESET_TIME (RXOSCALRESET_TIME_REG),
    .RXOUT_DIV (RXOUT_DIV_REG),
    .RXPCSRESET_TIME (RXPCSRESET_TIME_REG),
    .RXPHBEACON_CFG (RXPHBEACON_CFG_REG),
    .RXPHBEACON_RAW_CFG (RXPHBEACON_RAW_CFG_REG),
    .RXPHDLY_CFG (RXPHDLY_CFG_REG),
    .RXPHSAMP_CFG (RXPHSAMP_CFG_REG),
    .RXPHSAMP_RAW_CFG (RXPHSAMP_RAW_CFG_REG),
    .RXPHSLIP_CFG (RXPHSLIP_CFG_REG),
    .RXPHSLIP_RAW_CFG (RXPHSLIP_RAW_CFG_REG),
    .RXPH_MONITOR_SEL (RXPH_MONITOR_SEL_REG),
    .RXPI_CFG0 (RXPI_CFG0_REG),
    .RXPI_CFG1 (RXPI_CFG1_REG),
    .RXPMACLK_SEL (RXPMACLK_SEL_REG),
    .RXPMARESET_TIME (RXPMARESET_TIME_REG),
    .RXPRBS_ERR_LOOPBACK (RXPRBS_ERR_LOOPBACK_REG),
    .RXPRBS_LINKACQ_CNT (RXPRBS_LINKACQ_CNT_REG),
    .RXREFCLKDIV2_SEL (RXREFCLKDIV2_SEL_REG),
    .RXSLIDE_AUTO_WAIT (RXSLIDE_AUTO_WAIT_REG),
    .RXSLIDE_MODE (RXSLIDE_MODE_REG),
    .RXSYNC_MULTILANE (RXSYNC_MULTILANE_REG),
    .RXSYNC_OVRD (RXSYNC_OVRD_REG),
    .RXSYNC_SKIP_DA (RXSYNC_SKIP_DA_REG),
    .RX_AFE_CM_EN (RX_AFE_CM_EN_REG),
    .RX_BIAS_CFG0 (RX_BIAS_CFG0_REG),
    .RX_CAPFF_SARC_ENB (RX_CAPFF_SARC_ENB_REG),
    .RX_CLK25_DIV (RX_CLK25_DIV_REG),
    .RX_CLKMUX_EN (RX_CLKMUX_EN_REG),
    .RX_CLK_SLIP_OVRD (RX_CLK_SLIP_OVRD_REG),
    .RX_CM_BUF_CFG (RX_CM_BUF_CFG_REG),
    .RX_CM_BUF_PD (RX_CM_BUF_PD_REG),
    .RX_CM_SEL (RX_CM_SEL_REG),
    .RX_CM_TRIM (RX_CM_TRIM_REG),
    .RX_CTLE_PWR_SAVING (RX_CTLE_PWR_SAVING_REG),
    .RX_CTLE_RES_CTRL (RX_CTLE_RES_CTRL_REG),
    .RX_DATA_WIDTH (RX_DATA_WIDTH_REG),
    .RX_DDI_SEL (RX_DDI_SEL_REG),
    .RX_DEGEN_CTRL (RX_DEGEN_CTRL_REG),
    .RX_DFECFOKFCDAC (RX_DFECFOKFCDAC_REG),
    .RX_DFELPM_CFG0 (RX_DFELPM_CFG0_REG),
    .RX_DFELPM_CFG1 (RX_DFELPM_CFG1_REG),
    .RX_DFELPM_KLKH_AGC_STUP_EN (RX_DFELPM_KLKH_AGC_STUP_EN_REG),
    .RX_DFE_AGC_CFG1 (RX_DFE_AGC_CFG1_REG),
    .RX_DFE_KL_LPM_KH_CFG0 (RX_DFE_KL_LPM_KH_CFG0_REG),
    .RX_DFE_KL_LPM_KH_CFG1 (RX_DFE_KL_LPM_KH_CFG1_REG),
    .RX_DFE_KL_LPM_KL_CFG0 (RX_DFE_KL_LPM_KL_CFG0_REG),
    .RX_DFE_KL_LPM_KL_CFG1 (RX_DFE_KL_LPM_KL_CFG1_REG),
    .RX_DFE_LPM_HOLD_DURING_EIDLE (RX_DFE_LPM_HOLD_DURING_EIDLE_REG),
    .RX_DISPERR_SEQ_MATCH (RX_DISPERR_SEQ_MATCH_REG),
    .RX_DIVRESET_TIME (RX_DIVRESET_TIME_REG),
    .RX_EN_CTLE_RCAL_B (RX_EN_CTLE_RCAL_B_REG),
    .RX_EN_SUM_RCAL_B (RX_EN_SUM_RCAL_B_REG),
    .RX_EYESCAN_VS_CODE (RX_EYESCAN_VS_CODE_REG),
    .RX_EYESCAN_VS_NEG_DIR (RX_EYESCAN_VS_NEG_DIR_REG),
    .RX_EYESCAN_VS_RANGE (RX_EYESCAN_VS_RANGE_REG),
    .RX_EYESCAN_VS_UT_SIGN (RX_EYESCAN_VS_UT_SIGN_REG),
    .RX_I2V_FILTER_EN (RX_I2V_FILTER_EN_REG),
    .RX_INT_DATAWIDTH (RX_INT_DATAWIDTH_REG),
    .RX_PMA_POWER_SAVE (RX_PMA_POWER_SAVE_REG),
    .RX_PMA_RSV0 (RX_PMA_RSV0_REG),
    .RX_PROGDIV_CFG (RX_PROGDIV_CFG_BIN),
    .RX_PROGDIV_RATE (RX_PROGDIV_RATE_REG),
    .RX_RESLOAD_CTRL (RX_RESLOAD_CTRL_REG),
    .RX_RESLOAD_OVRD (RX_RESLOAD_OVRD_REG),
    .RX_SAMPLE_PERIOD (RX_SAMPLE_PERIOD_REG),
    .RX_SIG_VALID_DLY (RX_SIG_VALID_DLY_REG),
    .RX_SUM_DEGEN_AVTT_OVERITE (RX_SUM_DEGEN_AVTT_OVERITE_REG),
    .RX_SUM_DFETAPREP_EN (RX_SUM_DFETAPREP_EN_REG),
    .RX_SUM_IREF_TUNE (RX_SUM_IREF_TUNE_REG),
    .RX_SUM_PWR_SAVING (RX_SUM_PWR_SAVING_REG),
    .RX_SUM_RES_CTRL (RX_SUM_RES_CTRL_REG),
    .RX_SUM_VCMTUNE (RX_SUM_VCMTUNE_REG),
    .RX_SUM_VCM_BIAS_TUNE_EN (RX_SUM_VCM_BIAS_TUNE_EN_REG),
    .RX_SUM_VCM_OVWR (RX_SUM_VCM_OVWR_REG),
    .RX_SUM_VREF_TUNE (RX_SUM_VREF_TUNE_REG),
    .RX_TUNE_AFE_OS (RX_TUNE_AFE_OS_REG),
    .RX_VREG_CTRL (RX_VREG_CTRL_REG),
    .RX_VREG_PDB (RX_VREG_PDB_REG),
    .RX_VREG_VREFSEL (RX_VREG_VREFSEL_REG),
    .RX_WIDEMODE_CDR (RX_WIDEMODE_CDR_REG),
    .RX_WIDEMODE_CDR_GEN3 (RX_WIDEMODE_CDR_GEN3_REG),
    .RX_WIDEMODE_CDR_GEN4 (RX_WIDEMODE_CDR_GEN4_REG),
    .RX_XCLK_SEL (RX_XCLK_SEL_REG),
    .RX_XMODE_SEL (RX_XMODE_SEL_REG),
    .SAMPLE_CLK_PHASE (SAMPLE_CLK_PHASE_REG),
    .SATA_CPLL_CFG (SATA_CPLL_CFG_REG),
    .SIM_MODE (SIM_MODE_REG),
    .SIM_RESET_SPEEDUP (SIM_RESET_SPEEDUP_REG),
    .SIM_TX_EIDLE_DRIVE_LEVEL (SIM_TX_EIDLE_DRIVE_LEVEL_REG),
    .SRSTMODE (SRSTMODE_REG),
    .TAPDLY_SET_TX (TAPDLY_SET_TX_REG),
    .TCO_NEW_CFG0 (TCO_NEW_CFG0_REG),
    .TCO_NEW_CFG1 (TCO_NEW_CFG1_REG),
    .TCO_NEW_CFG2 (TCO_NEW_CFG2_REG),
    .TCO_NEW_CFG3 (TCO_NEW_CFG3_REG),
    .TCO_RSVD1 (TCO_RSVD1_REG),
    .TCO_RSVD2 (TCO_RSVD2_REG),
    .TERM_RCAL_CFG (TERM_RCAL_CFG_REG),
    .TERM_RCAL_OVRD (TERM_RCAL_OVRD_REG),
    .TRANS_TIME_RATE (TRANS_TIME_RATE_REG),
    .TST_RSV0 (TST_RSV0_REG),
    .TST_RSV1 (TST_RSV1_REG),
    .TXBUF_EN (TXBUF_EN_REG),
    .TXDLY_CFG (TXDLY_CFG_REG),
    .TXDLY_LCFG (TXDLY_LCFG_REG),
    .TXDRV_FREQBAND (TXDRV_FREQBAND_REG),
    .TXFE_CFG0 (TXFE_CFG0_REG),
    .TXFE_CFG1 (TXFE_CFG1_REG),
    .TXFE_CFG2 (TXFE_CFG2_REG),
    .TXFE_CFG3 (TXFE_CFG3_REG),
    .TXFIFO_ADDR_CFG (TXFIFO_ADDR_CFG_REG),
    .TXGBOX_FIFO_INIT_RD_ADDR (TXGBOX_FIFO_INIT_RD_ADDR_REG),
    .TXOUTCLKPCS_SEL (TXOUTCLKPCS_SEL_REG),
    .TXOUT_DIV (TXOUT_DIV_REG),
    .TXPCSRESET_TIME (TXPCSRESET_TIME_REG),
    .TXPHDLY_CFG0 (TXPHDLY_CFG0_REG),
    .TXPHDLY_CFG1 (TXPHDLY_CFG1_REG),
    .TXPH_CFG (TXPH_CFG_REG),
    .TXPH_CFG2 (TXPH_CFG2_REG),
    .TXPH_MONITOR_SEL (TXPH_MONITOR_SEL_REG),
    .TXPI_CFG0 (TXPI_CFG0_REG),
    .TXPI_CFG1 (TXPI_CFG1_REG),
    .TXPI_GRAY_SEL (TXPI_GRAY_SEL_REG),
    .TXPI_INVSTROBE_SEL (TXPI_INVSTROBE_SEL_REG),
    .TXPI_PPM (TXPI_PPM_REG),
    .TXPI_PPM_CFG (TXPI_PPM_CFG_REG),
    .TXPI_SYNFREQ_PPM (TXPI_SYNFREQ_PPM_REG),
    .TXPMARESET_TIME (TXPMARESET_TIME_REG),
    .TXREFCLKDIV2_SEL (TXREFCLKDIV2_SEL_REG),
    .TXSWBST_BST (TXSWBST_BST_REG),
    .TXSWBST_EN (TXSWBST_EN_REG),
    .TXSWBST_MAG (TXSWBST_MAG_REG),
    .TXSYNC_MULTILANE (TXSYNC_MULTILANE_REG),
    .TXSYNC_OVRD (TXSYNC_OVRD_REG),
    .TXSYNC_SKIP_DA (TXSYNC_SKIP_DA_REG),
    .TX_CLK25_DIV (TX_CLK25_DIV_REG),
    .TX_CLKMUX_EN (TX_CLKMUX_EN_REG),
    .TX_DATA_WIDTH (TX_DATA_WIDTH_REG),
    .TX_DCC_LOOP_RST_CFG (TX_DCC_LOOP_RST_CFG_REG),
    .TX_DIVRESET_TIME (TX_DIVRESET_TIME_REG),
    .TX_EIDLE_ASSERT_DELAY (TX_EIDLE_ASSERT_DELAY_REG),
    .TX_EIDLE_DEASSERT_DELAY (TX_EIDLE_DEASSERT_DELAY_REG),
    .TX_FABINT_USRCLK_FLOP (TX_FABINT_USRCLK_FLOP_REG),
    .TX_FIFO_BYP_EN (TX_FIFO_BYP_EN_REG),
    .TX_IDLE_DATA_ZERO (TX_IDLE_DATA_ZERO_REG),
    .TX_INT_DATAWIDTH (TX_INT_DATAWIDTH_REG),
    .TX_LOOPBACK_DRIVE_HIZ (TX_LOOPBACK_DRIVE_HIZ_REG),
    .TX_MAINCURSOR_SEL (TX_MAINCURSOR_SEL_REG),
    .TX_PHICAL_CFG0 (TX_PHICAL_CFG0_REG),
    .TX_PHICAL_CFG1 (TX_PHICAL_CFG1_REG),
    .TX_PI_BIASSET (TX_PI_BIASSET_REG),
    .TX_PMADATA_OPT (TX_PMADATA_OPT_REG),
    .TX_PMA_POWER_SAVE (TX_PMA_POWER_SAVE_REG),
    .TX_PMA_RSV0 (TX_PMA_RSV0_REG),
    .TX_PMA_RSV1 (TX_PMA_RSV1_REG),
    .TX_PROGCLK_SEL (TX_PROGCLK_SEL_REG),
    .TX_PROGDIV_CFG (TX_PROGDIV_CFG_BIN),
    .TX_PROGDIV_RATE (TX_PROGDIV_RATE_REG),
    .TX_SAMPLE_PERIOD (TX_SAMPLE_PERIOD_REG),
    .TX_SW_MEAS (TX_SW_MEAS_REG),
    .TX_USERPATTERN_DATA0 (TX_USERPATTERN_DATA0_REG),
    .TX_USERPATTERN_DATA1 (TX_USERPATTERN_DATA1_REG),
    .TX_USERPATTERN_DATA2 (TX_USERPATTERN_DATA2_REG),
    .TX_USERPATTERN_DATA3 (TX_USERPATTERN_DATA3_REG),
    .TX_USERPATTERN_DATA4 (TX_USERPATTERN_DATA4_REG),
    .TX_USERPATTERN_DATA5 (TX_USERPATTERN_DATA5_REG),
    .TX_USERPATTERN_DATA6 (TX_USERPATTERN_DATA6_REG),
    .TX_USERPATTERN_DATA7 (TX_USERPATTERN_DATA7_REG),
    .TX_VREG_CTRL (TX_VREG_CTRL_REG),
    .TX_VREG_PDB (TX_VREG_PDB_REG),
    .TX_VREG_VREFSEL (TX_VREG_VREFSEL_REG),
    .TX_XCLK_SEL (TX_XCLK_SEL_REG),
    .USE_PCS_CLK_PHASE_SEL (USE_PCS_CLK_PHASE_SEL_REG),
    .USE_RAW_ELEC (USE_RAW_ELEC_REG),
    .Y_ALL_MODE (Y_ALL_MODE_REG),
    .CPLLFBCLKLOST (CPLLFBCLKLOST_out),
    .CPLLLOCK (CPLLLOCK_out),
    .CPLLREFCLKLOST (CPLLREFCLKLOST_out),
    .DMONITOROUT (DMONITOROUT_out),
    .DMONITOROUTCLK (DMONITOROUTCLK_out),
    .DRPDO (DRPDO_out),
    .DRPRDY (DRPRDY_out),
    .EYESCANDATAERROR (EYESCANDATAERROR_out),
    .GTFTXN (GTFTXN_out),
    .GTFTXP (GTFTXP_out),
    .GTPOWERGOOD (GTPOWERGOOD_out),
    .GTREFCLKMONITOR (GTREFCLKMONITOR_out),
    .PCSRSVDOUT (PCSRSVDOUT_out),
    .PINRSRVDAS (PINRSRVDAS_out),
    .PMASCANOUT (PMASCANOUT_out),
    .RESETEXCEPTION (RESETEXCEPTION_out),
    .RXAXISTDATA (RXAXISTDATA_out),
    .RXAXISTERR (RXAXISTERR_out),
    .RXAXISTLAST (RXAXISTLAST_out),
    .RXAXISTPRE (RXAXISTPRE_out),
    .RXAXISTSOF (RXAXISTSOF_out),
    .RXAXISTTERM (RXAXISTTERM_out),
    .RXAXISTVALID (RXAXISTVALID_out),
    .RXBITSLIP (RXBITSLIP_out),
    .RXCDRLOCK (RXCDRLOCK_out),
    .RXCDRPHDONE (RXCDRPHDONE_out),
    .RXCKCALDONE (RXCKCALDONE_out),
    .RXDLYSRESETDONE (RXDLYSRESETDONE_out),
    .RXELECIDLE (RXELECIDLE_out),
    .RXGBSEQSTART (RXGBSEQSTART_out),
    .RXMONITOROUT (RXMONITOROUT_out),
    .RXOSINTDONE (RXOSINTDONE_out),
    .RXOSINTSTARTED (RXOSINTSTARTED_out),
    .RXOSINTSTROBEDONE (RXOSINTSTROBEDONE_out),
    .RXOSINTSTROBESTARTED (RXOSINTSTROBESTARTED_out),
    .RXOUTCLK (RXOUTCLK_out),
    .RXOUTCLKFABRIC (RXOUTCLKFABRIC_out),
    .RXOUTCLKPCS (RXOUTCLKPCS_out),
    .RXPHALIGNDONE (RXPHALIGNDONE_out),
    .RXPHALIGNERR (RXPHALIGNERR_out),
    .RXPMARESETDONE (RXPMARESETDONE_out),
    .RXPRBSERR (RXPRBSERR_out),
    .RXPRBSLOCKED (RXPRBSLOCKED_out),
    .RXPRGDIVRESETDONE (RXPRGDIVRESETDONE_out),
    .RXPTPSOP (RXPTPSOP_out),
    .RXPTPSOPPOS (RXPTPSOPPOS_out),
    .RXRAWDATA (RXRAWDATA_out),
    .RXRECCLKOUT (RXRECCLKOUT_out),
    .RXRESETDONE (RXRESETDONE_out),
    .RXSLIPDONE (RXSLIPDONE_out),
    .RXSLIPOUTCLKRDY (RXSLIPOUTCLKRDY_out),
    .RXSLIPPMARDY (RXSLIPPMARDY_out),
    .RXSYNCDONE (RXSYNCDONE_out),
    .RXSYNCOUT (RXSYNCOUT_out),
    .SCANOUT (SCANOUT_out),
    .STATRXBADCODE (STATRXBADCODE_out),
    .STATRXBADFCS (STATRXBADFCS_out),
    .STATRXBADPREAMBLE (STATRXBADPREAMBLE_out),
    .STATRXBADSFD (STATRXBADSFD_out),
    .STATRXBLOCKLOCK (STATRXBLOCKLOCK_out),
    .STATRXBROADCAST (STATRXBROADCAST_out),
    .STATRXBYTES (STATRXBYTES_out),
    .STATRXFCSERR (STATRXFCSERR_out),
    .STATRXFRAMINGERR (STATRXFRAMINGERR_out),
    .STATRXGOTSIGNALOS (STATRXGOTSIGNALOS_out),
    .STATRXHIBER (STATRXHIBER_out),
    .STATRXINRANGEERR (STATRXINRANGEERR_out),
    .STATRXINTERNALLOCALFAULT (STATRXINTERNALLOCALFAULT_out),
    .STATRXLOCALFAULT (STATRXLOCALFAULT_out),
    .STATRXMULTICAST (STATRXMULTICAST_out),
    .STATRXPAUSEQUANTA (STATRXPAUSEQUANTA_out),
    .STATRXPAUSEREQ (STATRXPAUSEREQ_out),
    .STATRXPAUSEVALID (STATRXPAUSEVALID_out),
    .STATRXPKT (STATRXPKT_out),
    .STATRXPKTERR (STATRXPKTERR_out),
    .STATRXRECEIVEDLOCALFAULT (STATRXRECEIVEDLOCALFAULT_out),
    .STATRXREMOTEFAULT (STATRXREMOTEFAULT_out),
    .STATRXSTATUS (STATRXSTATUS_out),
    .STATRXSTOMPEDFCS (STATRXSTOMPEDFCS_out),
    .STATRXTESTPATTERNMISMATCH (STATRXTESTPATTERNMISMATCH_out),
    .STATRXTRUNCATED (STATRXTRUNCATED_out),
    .STATRXUNICAST (STATRXUNICAST_out),
    .STATRXVALIDCTRLCODE (STATRXVALIDCTRLCODE_out),
    .STATRXVLAN (STATRXVLAN_out),
    .STATTXBADFCS (STATTXBADFCS_out),
    .STATTXBROADCAST (STATTXBROADCAST_out),
    .STATTXBYTES (STATTXBYTES_out),
    .STATTXFCSERR (STATTXFCSERR_out),
    .STATTXMULTICAST (STATTXMULTICAST_out),
    .STATTXPAUSEVALID (STATTXPAUSEVALID_out),
    .STATTXPKT (STATTXPKT_out),
    .STATTXPKTERR (STATTXPKTERR_out),
    .STATTXUNICAST (STATTXUNICAST_out),
    .STATTXVLAN (STATTXVLAN_out),
    .TXAXISTREADY (TXAXISTREADY_out),
    .TXDCCDONE (TXDCCDONE_out),
    .TXDLYSRESETDONE (TXDLYSRESETDONE_out),
    .TXGBSEQSTART (TXGBSEQSTART_out),
    .TXOUTCLK (TXOUTCLK_out),
    .TXOUTCLKFABRIC (TXOUTCLKFABRIC_out),
    .TXOUTCLKPCS (TXOUTCLKPCS_out),
    .TXPHALIGNDONE (TXPHALIGNDONE_out),
    .TXPHINITDONE (TXPHINITDONE_out),
    .TXPMARESETDONE (TXPMARESETDONE_out),
    .TXPRGDIVRESETDONE (TXPRGDIVRESETDONE_out),
    .TXPTPSOP (TXPTPSOP_out),
    .TXPTPSOPPOS (TXPTPSOPPOS_out),
    .TXRESETDONE (TXRESETDONE_out),
    .TXSYNCDONE (TXSYNCDONE_out),
    .TXSYNCOUT (TXSYNCOUT_out),
    .TXUNFOUT (TXUNFOUT_out),
    .BSR_SERIAL (BSR_SERIAL_in),
    .CDRSTEPDIR (CDRSTEPDIR_in),
    .CDRSTEPSQ (CDRSTEPSQ_in),
    .CDRSTEPSX (CDRSTEPSX_in),
    .CFGRESET (CFGRESET_in),
    .CLKRSVD0 (CLKRSVD0_in),
    .CLKRSVD1 (CLKRSVD1_in),
    .CPLLFREQLOCK (CPLLFREQLOCK_in),
    .CPLLLOCKDETCLK (CPLLLOCKDETCLK_in),
    .CPLLLOCKEN (CPLLLOCKEN_in),
    .CPLLPD (CPLLPD_in),
    .CPLLREFCLKSEL (CPLLREFCLKSEL_in),
    .CPLLRESET (CPLLRESET_in),
    .CTLRXPAUSEACK (CTLRXPAUSEACK_in),
    .CTLTXPAUSEREQ (CTLTXPAUSEREQ_in),
    .CTLTXRESENDPAUSE (CTLTXRESENDPAUSE_in),
    .CTLTXSENDIDLE (CTLTXSENDIDLE_in),
    .CTLTXSENDLFI (CTLTXSENDLFI_in),
    .CTLTXSENDRFI (CTLTXSENDRFI_in),
    .DMONFIFORESET (DMONFIFORESET_in),
    .DMONITORCLK (DMONITORCLK_in),
    .DRPADDR (DRPADDR_in),
    .DRPCLK (DRPCLK_in),
    .DRPDI (DRPDI_in),
    .DRPEN (DRPEN_in),
    .DRPRST (DRPRST_in),
    .DRPWE (DRPWE_in),
    .EYESCANRESET (EYESCANRESET_in),
    .EYESCANTRIGGER (EYESCANTRIGGER_in),
    .FREQOS (FREQOS_in),
    .GTFRXN (GTFRXN_in),
    .GTFRXP (GTFRXP_in),
    .GTGREFCLK (GTGREFCLK_in),
    .GTNORTHREFCLK0 (GTNORTHREFCLK0_in),
    .GTNORTHREFCLK1 (GTNORTHREFCLK1_in),
    .GTREFCLK0 (GTREFCLK0_in),
    .GTREFCLK1 (GTREFCLK1_in),
    .GTRSVD (GTRSVD_in),
    .GTRXRESET (GTRXRESET_in),
    .GTRXRESETSEL (GTRXRESETSEL_in),
    .GTSOUTHREFCLK0 (GTSOUTHREFCLK0_in),
    .GTSOUTHREFCLK1 (GTSOUTHREFCLK1_in),
    .GTTXRESET (GTTXRESET_in),
    .GTTXRESETSEL (GTTXRESETSEL_in),
    .INCPCTRL (INCPCTRL_in),
    .LOOPBACK (LOOPBACK_in),
    .PCSRSVDIN (PCSRSVDIN_in),
    .PMASCANCLK0 (PMASCANCLK0_in),
    .PMASCANCLK1 (PMASCANCLK1_in),
    .PMASCANCLK2 (PMASCANCLK2_in),
    .PMASCANCLK3 (PMASCANCLK3_in),
    .PMASCANCLK4 (PMASCANCLK4_in),
    .PMASCANCLK5 (PMASCANCLK5_in),
    .PMASCANCLK6 (PMASCANCLK6_in),
    .PMASCANCLK7 (PMASCANCLK7_in),
    .PMASCANCLK8 (PMASCANCLK8_in),
    .PMASCANENB (PMASCANENB_in),
    .PMASCANIN (PMASCANIN_in),
    .PMASCANMODEB (PMASCANMODEB_in),
    .PMASCANRSTEN (PMASCANRSTEN_in),
    .QPLL0CLK (QPLL0CLK_in),
    .QPLL0FREQLOCK (QPLL0FREQLOCK_in),
    .QPLL0REFCLK (QPLL0REFCLK_in),
    .QPLL1CLK (QPLL1CLK_in),
    .QPLL1FREQLOCK (QPLL1FREQLOCK_in),
    .QPLL1REFCLK (QPLL1REFCLK_in),
    .RESETOVRD (RESETOVRD_in),
    .RXAFECFOKEN (RXAFECFOKEN_in),
    .RXCDRFREQRESET (RXCDRFREQRESET_in),
    .RXCDRHOLD (RXCDRHOLD_in),
    .RXCDROVRDEN (RXCDROVRDEN_in),
    .RXCDRRESET (RXCDRRESET_in),
    .RXCKCALRESET (RXCKCALRESET_in),
    .RXCKCALSTART (RXCKCALSTART_in),
    .RXDFEAGCHOLD (RXDFEAGCHOLD_in),
    .RXDFEAGCOVRDEN (RXDFEAGCOVRDEN_in),
    .RXDFECFOKFCNUM (RXDFECFOKFCNUM_in),
    .RXDFECFOKFEN (RXDFECFOKFEN_in),
    .RXDFECFOKFPULSE (RXDFECFOKFPULSE_in),
    .RXDFECFOKHOLD (RXDFECFOKHOLD_in),
    .RXDFECFOKOVREN (RXDFECFOKOVREN_in),
    .RXDFEKHHOLD (RXDFEKHHOLD_in),
    .RXDFEKHOVRDEN (RXDFEKHOVRDEN_in),
    .RXDFELFHOLD (RXDFELFHOLD_in),
    .RXDFELFOVRDEN (RXDFELFOVRDEN_in),
    .RXDFELPMRESET (RXDFELPMRESET_in),
    .RXDFETAP10HOLD (RXDFETAP10HOLD_in),
    .RXDFETAP10OVRDEN (RXDFETAP10OVRDEN_in),
    .RXDFETAP11HOLD (RXDFETAP11HOLD_in),
    .RXDFETAP11OVRDEN (RXDFETAP11OVRDEN_in),
    .RXDFETAP12HOLD (RXDFETAP12HOLD_in),
    .RXDFETAP12OVRDEN (RXDFETAP12OVRDEN_in),
    .RXDFETAP13HOLD (RXDFETAP13HOLD_in),
    .RXDFETAP13OVRDEN (RXDFETAP13OVRDEN_in),
    .RXDFETAP14HOLD (RXDFETAP14HOLD_in),
    .RXDFETAP14OVRDEN (RXDFETAP14OVRDEN_in),
    .RXDFETAP15HOLD (RXDFETAP15HOLD_in),
    .RXDFETAP15OVRDEN (RXDFETAP15OVRDEN_in),
    .RXDFETAP2HOLD (RXDFETAP2HOLD_in),
    .RXDFETAP2OVRDEN (RXDFETAP2OVRDEN_in),
    .RXDFETAP3HOLD (RXDFETAP3HOLD_in),
    .RXDFETAP3OVRDEN (RXDFETAP3OVRDEN_in),
    .RXDFETAP4HOLD (RXDFETAP4HOLD_in),
    .RXDFETAP4OVRDEN (RXDFETAP4OVRDEN_in),
    .RXDFETAP5HOLD (RXDFETAP5HOLD_in),
    .RXDFETAP5OVRDEN (RXDFETAP5OVRDEN_in),
    .RXDFETAP6HOLD (RXDFETAP6HOLD_in),
    .RXDFETAP6OVRDEN (RXDFETAP6OVRDEN_in),
    .RXDFETAP7HOLD (RXDFETAP7HOLD_in),
    .RXDFETAP7OVRDEN (RXDFETAP7OVRDEN_in),
    .RXDFETAP8HOLD (RXDFETAP8HOLD_in),
    .RXDFETAP8OVRDEN (RXDFETAP8OVRDEN_in),
    .RXDFETAP9HOLD (RXDFETAP9HOLD_in),
    .RXDFETAP9OVRDEN (RXDFETAP9OVRDEN_in),
    .RXDFEUTHOLD (RXDFEUTHOLD_in),
    .RXDFEUTOVRDEN (RXDFEUTOVRDEN_in),
    .RXDFEVPHOLD (RXDFEVPHOLD_in),
    .RXDFEVPOVRDEN (RXDFEVPOVRDEN_in),
    .RXDFEXYDEN (RXDFEXYDEN_in),
    .RXDLYBYPASS (RXDLYBYPASS_in),
    .RXDLYEN (RXDLYEN_in),
    .RXDLYOVRDEN (RXDLYOVRDEN_in),
    .RXDLYSRESET (RXDLYSRESET_in),
    .RXELECIDLEMODE (RXELECIDLEMODE_in),
    .RXLPMEN (RXLPMEN_in),
    .RXLPMGCHOLD (RXLPMGCHOLD_in),
    .RXLPMGCOVRDEN (RXLPMGCOVRDEN_in),
    .RXLPMHFHOLD (RXLPMHFHOLD_in),
    .RXLPMHFOVRDEN (RXLPMHFOVRDEN_in),
    .RXLPMLFHOLD (RXLPMLFHOLD_in),
    .RXLPMLFKLOVRDEN (RXLPMLFKLOVRDEN_in),
    .RXLPMOSHOLD (RXLPMOSHOLD_in),
    .RXLPMOSOVRDEN (RXLPMOSOVRDEN_in),
    .RXMONITORSEL (RXMONITORSEL_in),
    .RXOSCALRESET (RXOSCALRESET_in),
    .RXOSHOLD (RXOSHOLD_in),
    .RXOSOVRDEN (RXOSOVRDEN_in),
    .RXOUTCLKSEL (RXOUTCLKSEL_in),
    .RXPCSRESET (RXPCSRESET_in),
    .RXPD (RXPD_in),
    .RXPHALIGN (RXPHALIGN_in),
    .RXPHALIGNEN (RXPHALIGNEN_in),
    .RXPHDLYPD (RXPHDLYPD_in),
    .RXPHDLYRESET (RXPHDLYRESET_in),
    .RXPLLCLKSEL (RXPLLCLKSEL_in),
    .RXPMARESET (RXPMARESET_in),
    .RXPOLARITY (RXPOLARITY_in),
    .RXPRBSCNTRESET (RXPRBSCNTRESET_in),
    .RXPRBSSEL (RXPRBSSEL_in),
    .RXPROGDIVRESET (RXPROGDIVRESET_in),
    .RXSLIPOUTCLK (RXSLIPOUTCLK_in),
    .RXSLIPPMA (RXSLIPPMA_in),
    .RXSYNCALLIN (RXSYNCALLIN_in),
    .RXSYNCIN (RXSYNCIN_in),
    .RXSYNCMODE (RXSYNCMODE_in),
    .RXSYSCLKSEL (RXSYSCLKSEL_in),
    .RXTERMINATION (RXTERMINATION_in),
    .RXUSERRDY (RXUSERRDY_in),
    .RXUSRCLK (RXUSRCLK_in),
    .RXUSRCLK2 (RXUSRCLK2_in),
    .SARCCLK (SARCCLK_in),
    .SCANCLK (SCANCLK_in),
    .SCANENB (SCANENB_in),
    .SCANIN (SCANIN_in),
    .SCANMODEB (SCANMODEB_in),
    .SCANRSTB (SCANRSTB_in),
    .SCANRSTEN (SCANRSTEN_in),
    .TSTCLK0 (TSTCLK0_in),
    .TSTCLK1 (TSTCLK1_in),
    .TSTIN (TSTIN_in),
    .TSTPD (TSTPD_in),
    .TSTPDOVRDB (TSTPDOVRDB_in),
    .TXAXISTDATA (TXAXISTDATA_in),
    .TXAXISTERR (TXAXISTERR_in),
    .TXAXISTLAST (TXAXISTLAST_in),
    .TXAXISTPOISON (TXAXISTPOISON_in),
    .TXAXISTPRE (TXAXISTPRE_in),
    .TXAXISTSOF (TXAXISTSOF_in),
    .TXAXISTTERM (TXAXISTTERM_in),
    .TXAXISTVALID (TXAXISTVALID_in),
    .TXDCCFORCESTART (TXDCCFORCESTART_in),
    .TXDCCRESET (TXDCCRESET_in),
    .TXDIFFCTRL (TXDIFFCTRL_in),
    .TXDLYBYPASS (TXDLYBYPASS_in),
    .TXDLYEN (TXDLYEN_in),
    .TXDLYHOLD (TXDLYHOLD_in),
    .TXDLYOVRDEN (TXDLYOVRDEN_in),
    .TXDLYSRESET (TXDLYSRESET_in),
    .TXDLYUPDOWN (TXDLYUPDOWN_in),
    .TXELECIDLE (TXELECIDLE_in),
    .TXGBSEQSYNC (TXGBSEQSYNC_in),
    .TXMAINCURSOR (TXMAINCURSOR_in),
    .TXMUXDCDEXHOLD (TXMUXDCDEXHOLD_in),
    .TXMUXDCDORWREN (TXMUXDCDORWREN_in),
    .TXOUTCLKSEL (TXOUTCLKSEL_in),
    .TXPCSRESET (TXPCSRESET_in),
    .TXPD (TXPD_in),
    .TXPHALIGN (TXPHALIGN_in),
    .TXPHALIGNEN (TXPHALIGNEN_in),
    .TXPHDLYPD (TXPHDLYPD_in),
    .TXPHDLYRESET (TXPHDLYRESET_in),
    .TXPHDLYTSTCLK (TXPHDLYTSTCLK_in),
    .TXPHINIT (TXPHINIT_in),
    .TXPHOVRDEN (TXPHOVRDEN_in),
    .TXPIPPMEN (TXPIPPMEN_in),
    .TXPIPPMOVRDEN (TXPIPPMOVRDEN_in),
    .TXPIPPMPD (TXPIPPMPD_in),
    .TXPIPPMSEL (TXPIPPMSEL_in),
    .TXPIPPMSTEPSIZE (TXPIPPMSTEPSIZE_in),
    .TXPISOPD (TXPISOPD_in),
    .TXPLLCLKSEL (TXPLLCLKSEL_in),
    .TXPMARESET (TXPMARESET_in),
    .TXPOLARITY (TXPOLARITY_in),
    .TXPOSTCURSOR (TXPOSTCURSOR_in),
    .TXPRBSFORCEERR (TXPRBSFORCEERR_in),
    .TXPRBSSEL (TXPRBSSEL_in),
    .TXPRECURSOR (TXPRECURSOR_in),
    .TXPROGDIVRESET (TXPROGDIVRESET_in),
    .TXRAWDATA (TXRAWDATA_in),
    .TXSYNCALLIN (TXSYNCALLIN_in),
    .TXSYNCIN (TXSYNCIN_in),
    .TXSYNCMODE (TXSYNCMODE_in),
    .TXSYSCLKSEL (TXSYSCLKSEL_in),
    .TXUSERRDY (TXUSERRDY_in),
    .TXUSRCLK (TXUSRCLK_in),
    .TXUSRCLK2 (TXUSRCLK2_in),
    .GSR (glblGSR)
  );

`ifdef XIL_TIMING
  reg notifier;
`endif

`ifndef XIL_XECLIB
  // begin timing section
  specify
    (DMONITORCLK => DMONITOROUT[0]) = (0:0:0, 0:0:0);
    (DMONITORCLK => DMONITOROUT[10]) = (0:0:0, 0:0:0);
    (DMONITORCLK => DMONITOROUT[11]) = (0:0:0, 0:0:0);
    (DMONITORCLK => DMONITOROUT[12]) = (0:0:0, 0:0:0);
    (DMONITORCLK => DMONITOROUT[13]) = (0:0:0, 0:0:0);
    (DMONITORCLK => DMONITOROUT[14]) = (0:0:0, 0:0:0);
    (DMONITORCLK => DMONITOROUT[15]) = (0:0:0, 0:0:0);
    (DMONITORCLK => DMONITOROUT[1]) = (0:0:0, 0:0:0);
    (DMONITORCLK => DMONITOROUT[2]) = (0:0:0, 0:0:0);
    (DMONITORCLK => DMONITOROUT[3]) = (0:0:0, 0:0:0);
    (DMONITORCLK => DMONITOROUT[4]) = (0:0:0, 0:0:0);
    (DMONITORCLK => DMONITOROUT[5]) = (0:0:0, 0:0:0);
    (DMONITORCLK => DMONITOROUT[6]) = (0:0:0, 0:0:0);
    (DMONITORCLK => DMONITOROUT[7]) = (0:0:0, 0:0:0);
    (DMONITORCLK => DMONITOROUT[8]) = (0:0:0, 0:0:0);
    (DMONITORCLK => DMONITOROUT[9]) = (0:0:0, 0:0:0);
    (DRPCLK => DRPDO[0]) = (100:100:100, 100:100:100);
    (DRPCLK => DRPDO[10]) = (100:100:100, 100:100:100);
    (DRPCLK => DRPDO[11]) = (100:100:100, 100:100:100);
    (DRPCLK => DRPDO[12]) = (100:100:100, 100:100:100);
    (DRPCLK => DRPDO[13]) = (100:100:100, 100:100:100);
    (DRPCLK => DRPDO[14]) = (100:100:100, 100:100:100);
    (DRPCLK => DRPDO[15]) = (100:100:100, 100:100:100);
    (DRPCLK => DRPDO[1]) = (100:100:100, 100:100:100);
    (DRPCLK => DRPDO[2]) = (100:100:100, 100:100:100);
    (DRPCLK => DRPDO[3]) = (100:100:100, 100:100:100);
    (DRPCLK => DRPDO[4]) = (100:100:100, 100:100:100);
    (DRPCLK => DRPDO[5]) = (100:100:100, 100:100:100);
    (DRPCLK => DRPDO[6]) = (100:100:100, 100:100:100);
    (DRPCLK => DRPDO[7]) = (100:100:100, 100:100:100);
    (DRPCLK => DRPDO[8]) = (100:100:100, 100:100:100);
    (DRPCLK => DRPDO[9]) = (100:100:100, 100:100:100);
    (DRPCLK => DRPRDY) = (100:100:100, 100:100:100);
    (GTGREFCLK => GTREFCLKMONITOR) = (0:0:0, 0:0:0);
    (GTNORTHREFCLK0 => GTREFCLKMONITOR) = (0:0:0, 0:0:0);
    (GTNORTHREFCLK1 => GTREFCLKMONITOR) = (0:0:0, 0:0:0);
    (GTREFCLK0 => GTREFCLKMONITOR) = (0:0:0, 0:0:0);
    (GTREFCLK1 => GTREFCLKMONITOR) = (0:0:0, 0:0:0);
    (GTSOUTHREFCLK0 => GTREFCLKMONITOR) = (0:0:0, 0:0:0);
    (GTSOUTHREFCLK1 => GTREFCLKMONITOR) = (0:0:0, 0:0:0);
    (RXUSRCLK => DMONITOROUT[0]) = (100:100:100, 100:100:100);
    (RXUSRCLK => DMONITOROUT[1]) = (100:100:100, 100:100:100);
    (RXUSRCLK => DMONITOROUT[2]) = (100:100:100, 100:100:100);
    (RXUSRCLK => DMONITOROUT[3]) = (100:100:100, 100:100:100);
    (RXUSRCLK => DMONITOROUT[4]) = (100:100:100, 100:100:100);
    (RXUSRCLK => DMONITOROUT[5]) = (100:100:100, 100:100:100);
    (RXUSRCLK => DMONITOROUT[6]) = (100:100:100, 100:100:100);
    (RXUSRCLK => DMONITOROUT[7]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXAXISTDATA[0]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXAXISTDATA[10]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXAXISTDATA[11]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXAXISTDATA[12]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXAXISTDATA[13]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXAXISTDATA[14]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXAXISTDATA[15]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXAXISTDATA[16]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXAXISTDATA[17]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXAXISTDATA[18]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXAXISTDATA[19]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXAXISTDATA[1]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXAXISTDATA[20]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXAXISTDATA[21]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXAXISTDATA[22]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXAXISTDATA[23]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXAXISTDATA[24]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXAXISTDATA[25]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXAXISTDATA[26]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXAXISTDATA[27]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXAXISTDATA[28]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXAXISTDATA[29]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXAXISTDATA[2]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXAXISTDATA[30]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXAXISTDATA[31]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXAXISTDATA[32]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXAXISTDATA[33]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXAXISTDATA[34]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXAXISTDATA[35]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXAXISTDATA[36]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXAXISTDATA[37]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXAXISTDATA[38]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXAXISTDATA[39]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXAXISTDATA[3]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXAXISTDATA[40]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXAXISTDATA[41]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXAXISTDATA[42]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXAXISTDATA[43]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXAXISTDATA[44]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXAXISTDATA[45]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXAXISTDATA[46]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXAXISTDATA[47]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXAXISTDATA[48]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXAXISTDATA[49]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXAXISTDATA[4]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXAXISTDATA[50]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXAXISTDATA[51]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXAXISTDATA[52]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXAXISTDATA[53]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXAXISTDATA[54]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXAXISTDATA[55]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXAXISTDATA[56]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXAXISTDATA[57]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXAXISTDATA[58]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXAXISTDATA[59]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXAXISTDATA[5]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXAXISTDATA[60]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXAXISTDATA[61]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXAXISTDATA[62]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXAXISTDATA[63]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXAXISTDATA[6]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXAXISTDATA[7]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXAXISTDATA[8]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXAXISTDATA[9]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXAXISTERR) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXAXISTLAST[0]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXAXISTLAST[1]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXAXISTLAST[2]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXAXISTLAST[3]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXAXISTLAST[4]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXAXISTLAST[5]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXAXISTLAST[6]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXAXISTLAST[7]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXAXISTPRE[0]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXAXISTPRE[1]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXAXISTPRE[2]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXAXISTPRE[3]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXAXISTPRE[4]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXAXISTPRE[5]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXAXISTPRE[6]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXAXISTPRE[7]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXAXISTSOF[0]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXAXISTSOF[1]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXAXISTTERM[0]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXAXISTTERM[1]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXAXISTTERM[2]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXAXISTTERM[3]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXAXISTTERM[4]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXAXISTVALID) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXBITSLIP) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXGBSEQSTART) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXPTPSOP) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXPTPSOPPOS) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXRAWDATA[0]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXRAWDATA[10]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXRAWDATA[11]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXRAWDATA[12]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXRAWDATA[13]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXRAWDATA[14]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXRAWDATA[15]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXRAWDATA[16]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXRAWDATA[17]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXRAWDATA[18]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXRAWDATA[19]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXRAWDATA[1]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXRAWDATA[20]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXRAWDATA[21]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXRAWDATA[22]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXRAWDATA[23]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXRAWDATA[24]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXRAWDATA[25]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXRAWDATA[26]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXRAWDATA[27]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXRAWDATA[28]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXRAWDATA[29]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXRAWDATA[2]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXRAWDATA[30]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXRAWDATA[31]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXRAWDATA[32]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXRAWDATA[33]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXRAWDATA[34]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXRAWDATA[35]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXRAWDATA[36]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXRAWDATA[37]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXRAWDATA[38]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXRAWDATA[39]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXRAWDATA[3]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXRAWDATA[4]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXRAWDATA[5]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXRAWDATA[6]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXRAWDATA[7]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXRAWDATA[8]) = (100:100:100, 100:100:100);
    (RXUSRCLK => RXRAWDATA[9]) = (100:100:100, 100:100:100);
    (RXUSRCLK => STATRXBADCODE) = (100:100:100, 100:100:100);
    (RXUSRCLK => STATRXBADFCS) = (100:100:100, 100:100:100);
    (RXUSRCLK => STATRXBADPREAMBLE) = (100:100:100, 100:100:100);
    (RXUSRCLK => STATRXBADSFD) = (100:100:100, 100:100:100);
    (RXUSRCLK => STATRXBLOCKLOCK) = (100:100:100, 100:100:100);
    (RXUSRCLK => STATRXBROADCAST) = (100:100:100, 100:100:100);
    (RXUSRCLK => STATRXBYTES[0]) = (100:100:100, 100:100:100);
    (RXUSRCLK => STATRXBYTES[1]) = (100:100:100, 100:100:100);
    (RXUSRCLK => STATRXBYTES[2]) = (100:100:100, 100:100:100);
    (RXUSRCLK => STATRXBYTES[3]) = (100:100:100, 100:100:100);
    (RXUSRCLK => STATRXFCSERR) = (100:100:100, 100:100:100);
    (RXUSRCLK => STATRXFRAMINGERR) = (100:100:100, 100:100:100);
    (RXUSRCLK => STATRXGOTSIGNALOS) = (100:100:100, 100:100:100);
    (RXUSRCLK => STATRXHIBER) = (100:100:100, 100:100:100);
    (RXUSRCLK => STATRXINRANGEERR) = (100:100:100, 100:100:100);
    (RXUSRCLK => STATRXINTERNALLOCALFAULT) = (100:100:100, 100:100:100);
    (RXUSRCLK => STATRXLOCALFAULT) = (100:100:100, 100:100:100);
    (RXUSRCLK => STATRXMULTICAST) = (100:100:100, 100:100:100);
    (RXUSRCLK => STATRXPAUSEQUANTA[0]) = (100:100:100, 100:100:100);
    (RXUSRCLK => STATRXPAUSEQUANTA[1]) = (100:100:100, 100:100:100);
    (RXUSRCLK => STATRXPAUSEQUANTA[2]) = (100:100:100, 100:100:100);
    (RXUSRCLK => STATRXPAUSEQUANTA[3]) = (100:100:100, 100:100:100);
    (RXUSRCLK => STATRXPAUSEQUANTA[4]) = (100:100:100, 100:100:100);
    (RXUSRCLK => STATRXPAUSEQUANTA[5]) = (100:100:100, 100:100:100);
    (RXUSRCLK => STATRXPAUSEQUANTA[6]) = (100:100:100, 100:100:100);
    (RXUSRCLK => STATRXPAUSEQUANTA[7]) = (100:100:100, 100:100:100);
    (RXUSRCLK => STATRXPAUSEQUANTA[8]) = (100:100:100, 100:100:100);
    (RXUSRCLK => STATRXPAUSEREQ[0]) = (100:100:100, 100:100:100);
    (RXUSRCLK => STATRXPAUSEREQ[1]) = (100:100:100, 100:100:100);
    (RXUSRCLK => STATRXPAUSEREQ[2]) = (100:100:100, 100:100:100);
    (RXUSRCLK => STATRXPAUSEREQ[3]) = (100:100:100, 100:100:100);
    (RXUSRCLK => STATRXPAUSEREQ[4]) = (100:100:100, 100:100:100);
    (RXUSRCLK => STATRXPAUSEREQ[5]) = (100:100:100, 100:100:100);
    (RXUSRCLK => STATRXPAUSEREQ[6]) = (100:100:100, 100:100:100);
    (RXUSRCLK => STATRXPAUSEREQ[7]) = (100:100:100, 100:100:100);
    (RXUSRCLK => STATRXPAUSEREQ[8]) = (100:100:100, 100:100:100);
    (RXUSRCLK => STATRXPAUSEVALID[0]) = (100:100:100, 100:100:100);
    (RXUSRCLK => STATRXPAUSEVALID[1]) = (100:100:100, 100:100:100);
    (RXUSRCLK => STATRXPAUSEVALID[2]) = (100:100:100, 100:100:100);
    (RXUSRCLK => STATRXPAUSEVALID[3]) = (100:100:100, 100:100:100);
    (RXUSRCLK => STATRXPAUSEVALID[4]) = (100:100:100, 100:100:100);
    (RXUSRCLK => STATRXPAUSEVALID[5]) = (100:100:100, 100:100:100);
    (RXUSRCLK => STATRXPAUSEVALID[6]) = (100:100:100, 100:100:100);
    (RXUSRCLK => STATRXPAUSEVALID[7]) = (100:100:100, 100:100:100);
    (RXUSRCLK => STATRXPAUSEVALID[8]) = (100:100:100, 100:100:100);
    (RXUSRCLK => STATRXPKT) = (100:100:100, 100:100:100);
    (RXUSRCLK => STATRXPKTERR) = (100:100:100, 100:100:100);
    (RXUSRCLK => STATRXRECEIVEDLOCALFAULT) = (100:100:100, 100:100:100);
    (RXUSRCLK => STATRXREMOTEFAULT) = (100:100:100, 100:100:100);
    (RXUSRCLK => STATRXSTATUS) = (100:100:100, 100:100:100);
    (RXUSRCLK => STATRXSTOMPEDFCS) = (100:100:100, 100:100:100);
    (RXUSRCLK => STATRXTESTPATTERNMISMATCH) = (100:100:100, 100:100:100);
    (RXUSRCLK => STATRXTRUNCATED) = (100:100:100, 100:100:100);
    (RXUSRCLK => STATRXUNICAST) = (100:100:100, 100:100:100);
    (RXUSRCLK => STATRXVALIDCTRLCODE) = (100:100:100, 100:100:100);
    (RXUSRCLK => STATRXVLAN) = (100:100:100, 100:100:100);
    (TXUSRCLK => PCSRSVDOUT[2]) = (100:100:100, 100:100:100);
    (TXUSRCLK => STATTXBADFCS) = (100:100:100, 100:100:100);
    (TXUSRCLK => STATTXBROADCAST) = (100:100:100, 100:100:100);
    (TXUSRCLK => STATTXBYTES[0]) = (100:100:100, 100:100:100);
    (TXUSRCLK => STATTXBYTES[1]) = (100:100:100, 100:100:100);
    (TXUSRCLK => STATTXBYTES[2]) = (100:100:100, 100:100:100);
    (TXUSRCLK => STATTXBYTES[3]) = (100:100:100, 100:100:100);
    (TXUSRCLK => STATTXFCSERR) = (100:100:100, 100:100:100);
    (TXUSRCLK => STATTXMULTICAST) = (100:100:100, 100:100:100);
    (TXUSRCLK => STATTXPAUSEVALID[0]) = (100:100:100, 100:100:100);
    (TXUSRCLK => STATTXPAUSEVALID[1]) = (100:100:100, 100:100:100);
    (TXUSRCLK => STATTXPAUSEVALID[2]) = (100:100:100, 100:100:100);
    (TXUSRCLK => STATTXPAUSEVALID[3]) = (100:100:100, 100:100:100);
    (TXUSRCLK => STATTXPAUSEVALID[4]) = (100:100:100, 100:100:100);
    (TXUSRCLK => STATTXPAUSEVALID[5]) = (100:100:100, 100:100:100);
    (TXUSRCLK => STATTXPAUSEVALID[6]) = (100:100:100, 100:100:100);
    (TXUSRCLK => STATTXPAUSEVALID[7]) = (100:100:100, 100:100:100);
    (TXUSRCLK => STATTXPAUSEVALID[8]) = (100:100:100, 100:100:100);
    (TXUSRCLK => STATTXPKT) = (100:100:100, 100:100:100);
    (TXUSRCLK => STATTXPKTERR) = (100:100:100, 100:100:100);
    (TXUSRCLK => STATTXUNICAST) = (100:100:100, 100:100:100);
    (TXUSRCLK => STATTXVLAN) = (100:100:100, 100:100:100);
    (TXUSRCLK => TXAXISTREADY) = (100:100:100, 100:100:100);
    (TXUSRCLK => TXGBSEQSTART) = (100:100:100, 100:100:100);
    (TXUSRCLK => TXPTPSOP) = (100:100:100, 100:100:100);
    (TXUSRCLK => TXPTPSOPPOS) = (100:100:100, 100:100:100);
    (TXUSRCLK => TXUNFOUT) = (100:100:100, 100:100:100);
`ifdef XIL_TIMING
    $period (negedge DMONITORCLK, 0:0:0, notifier);
    $period (negedge DRPCLK, 0:0:0, notifier);
    $period (negedge RXUSRCLK, 0:0:0, notifier);
    $period (negedge TXUSRCLK, 0:0:0, notifier);
    $period (posedge DMONITORCLK, 0:0:0, notifier);
    $period (posedge DRPCLK, 0:0:0, notifier);
    $period (posedge RXUSRCLK, 0:0:0, notifier);
    $period (posedge TXUSRCLK, 0:0:0, notifier);
    $recrem (negedge CFGRESET, negedge RXUSRCLK, 0:0:0, 0:0:0, notifier, , , CFGRESET_delay, RXUSRCLK_delay);
    $recrem (negedge CFGRESET, posedge RXUSRCLK, 0:0:0, 0:0:0, notifier, , , CFGRESET_delay, RXUSRCLK_delay);
    $recrem (negedge CFGRESET, posedge TXUSRCLK, 0:0:0, 0:0:0, notifier, , , CFGRESET_delay, TXUSRCLK_delay);
    $recrem (negedge DMONFIFORESET, posedge RXUSRCLK, 0:0:0, 0:0:0, notifier, , , DMONFIFORESET_delay, RXUSRCLK_delay);
    $recrem (negedge DRPRST, posedge DRPCLK, 0:0:0, 0:0:0, notifier, , , DRPRST_delay, DRPCLK_delay);
    $recrem (negedge DRPRST, posedge RXUSRCLK, 0:0:0, 0:0:0, notifier, , , DRPRST_delay, RXUSRCLK_delay);
    $recrem (negedge DRPRST, posedge TXUSRCLK, 0:0:0, 0:0:0, notifier, , , DRPRST_delay, TXUSRCLK_delay);
    $recrem (negedge RESETOVRD, negedge RXUSRCLK, 0:0:0, 0:0:0, notifier, , , RESETOVRD_delay, RXUSRCLK_delay);
    $recrem (negedge RESETOVRD, posedge RXUSRCLK, 0:0:0, 0:0:0, notifier, , , RESETOVRD_delay, RXUSRCLK_delay);
    $recrem (negedge RESETOVRD, posedge TXUSRCLK, 0:0:0, 0:0:0, notifier, , , RESETOVRD_delay, TXUSRCLK_delay);
    $recrem (negedge TXPIPPMPD, posedge TXUSRCLK, 0:0:0, 0:0:0, notifier, , , TXPIPPMPD_delay, TXUSRCLK_delay);
    $recrem (posedge CFGRESET, negedge RXUSRCLK, 0:0:0, 0:0:0, notifier, , , CFGRESET_delay, RXUSRCLK_delay);
    $recrem (posedge CFGRESET, posedge RXUSRCLK, 0:0:0, 0:0:0, notifier, , , CFGRESET_delay, RXUSRCLK_delay);
    $recrem (posedge CFGRESET, posedge TXUSRCLK, 0:0:0, 0:0:0, notifier, , , CFGRESET_delay, TXUSRCLK_delay);
    $recrem (posedge DMONFIFORESET, posedge RXUSRCLK, 0:0:0, 0:0:0, notifier, , , DMONFIFORESET_delay, RXUSRCLK_delay);
    $recrem (posedge DRPRST, posedge DRPCLK, 0:0:0, 0:0:0, notifier, , , DRPRST_delay, DRPCLK_delay);
    $recrem (posedge DRPRST, posedge RXUSRCLK, 0:0:0, 0:0:0, notifier, , , DRPRST_delay, RXUSRCLK_delay);
    $recrem (posedge DRPRST, posedge TXUSRCLK, 0:0:0, 0:0:0, notifier, , , DRPRST_delay, TXUSRCLK_delay);
    $recrem (posedge RESETOVRD, negedge RXUSRCLK, 0:0:0, 0:0:0, notifier, , , RESETOVRD_delay, RXUSRCLK_delay);
    $recrem (posedge RESETOVRD, posedge RXUSRCLK, 0:0:0, 0:0:0, notifier, , , RESETOVRD_delay, RXUSRCLK_delay);
    $recrem (posedge RESETOVRD, posedge TXUSRCLK, 0:0:0, 0:0:0, notifier, , , RESETOVRD_delay, TXUSRCLK_delay);
    $recrem (posedge TXPIPPMPD, posedge TXUSRCLK, 0:0:0, 0:0:0, notifier, , , TXPIPPMPD_delay, TXUSRCLK_delay);
    $setuphold (posedge DRPCLK, negedge CFGRESET, 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, CFGRESET_delay);
    $setuphold (posedge DRPCLK, negedge CPLLPD, 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, CPLLPD_delay);
    $setuphold (posedge DRPCLK, negedge DRPADDR[0], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, DRPADDR_delay[0]);
    $setuphold (posedge DRPCLK, negedge DRPADDR[1], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, DRPADDR_delay[1]);
    $setuphold (posedge DRPCLK, negedge DRPADDR[2], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, DRPADDR_delay[2]);
    $setuphold (posedge DRPCLK, negedge DRPADDR[3], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, DRPADDR_delay[3]);
    $setuphold (posedge DRPCLK, negedge DRPADDR[4], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, DRPADDR_delay[4]);
    $setuphold (posedge DRPCLK, negedge DRPADDR[5], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, DRPADDR_delay[5]);
    $setuphold (posedge DRPCLK, negedge DRPADDR[6], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, DRPADDR_delay[6]);
    $setuphold (posedge DRPCLK, negedge DRPADDR[7], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, DRPADDR_delay[7]);
    $setuphold (posedge DRPCLK, negedge DRPADDR[8], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, DRPADDR_delay[8]);
    $setuphold (posedge DRPCLK, negedge DRPADDR[9], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, DRPADDR_delay[9]);
    $setuphold (posedge DRPCLK, negedge DRPDI[0], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, DRPDI_delay[0]);
    $setuphold (posedge DRPCLK, negedge DRPDI[10], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, DRPDI_delay[10]);
    $setuphold (posedge DRPCLK, negedge DRPDI[11], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, DRPDI_delay[11]);
    $setuphold (posedge DRPCLK, negedge DRPDI[12], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, DRPDI_delay[12]);
    $setuphold (posedge DRPCLK, negedge DRPDI[13], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, DRPDI_delay[13]);
    $setuphold (posedge DRPCLK, negedge DRPDI[14], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, DRPDI_delay[14]);
    $setuphold (posedge DRPCLK, negedge DRPDI[15], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, DRPDI_delay[15]);
    $setuphold (posedge DRPCLK, negedge DRPDI[1], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, DRPDI_delay[1]);
    $setuphold (posedge DRPCLK, negedge DRPDI[2], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, DRPDI_delay[2]);
    $setuphold (posedge DRPCLK, negedge DRPDI[3], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, DRPDI_delay[3]);
    $setuphold (posedge DRPCLK, negedge DRPDI[4], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, DRPDI_delay[4]);
    $setuphold (posedge DRPCLK, negedge DRPDI[5], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, DRPDI_delay[5]);
    $setuphold (posedge DRPCLK, negedge DRPDI[6], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, DRPDI_delay[6]);
    $setuphold (posedge DRPCLK, negedge DRPDI[7], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, DRPDI_delay[7]);
    $setuphold (posedge DRPCLK, negedge DRPDI[8], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, DRPDI_delay[8]);
    $setuphold (posedge DRPCLK, negedge DRPDI[9], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, DRPDI_delay[9]);
    $setuphold (posedge DRPCLK, negedge DRPEN, 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, DRPEN_delay);
    $setuphold (posedge DRPCLK, negedge DRPWE, 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, DRPWE_delay);
    $setuphold (posedge DRPCLK, negedge RESETOVRD, 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, RESETOVRD_delay);
    $setuphold (posedge DRPCLK, negedge RXELECIDLEMODE[0], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, RXELECIDLEMODE_delay[0]);
    $setuphold (posedge DRPCLK, negedge RXLPMEN, 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, RXLPMEN_delay);
    $setuphold (posedge DRPCLK, negedge RXPHALIGN, 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, RXPHALIGN_delay);
    $setuphold (posedge DRPCLK, negedge TSTIN[0], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, TSTIN_delay[0]);
    $setuphold (posedge DRPCLK, negedge TSTIN[10], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, TSTIN_delay[10]);
    $setuphold (posedge DRPCLK, negedge TSTIN[1], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, TSTIN_delay[1]);
    $setuphold (posedge DRPCLK, negedge TSTIN[2], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, TSTIN_delay[2]);
    $setuphold (posedge DRPCLK, negedge TSTIN[3], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, TSTIN_delay[3]);
    $setuphold (posedge DRPCLK, negedge TSTIN[4], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, TSTIN_delay[4]);
    $setuphold (posedge DRPCLK, negedge TSTIN[5], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, TSTIN_delay[5]);
    $setuphold (posedge DRPCLK, negedge TSTIN[6], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, TSTIN_delay[6]);
    $setuphold (posedge DRPCLK, negedge TSTIN[7], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, TSTIN_delay[7]);
    $setuphold (posedge DRPCLK, negedge TSTIN[8], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, TSTIN_delay[8]);
    $setuphold (posedge DRPCLK, negedge TSTIN[9], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, TSTIN_delay[9]);
    $setuphold (posedge DRPCLK, negedge TXDLYBYPASS, 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, TXDLYBYPASS_delay);
    $setuphold (posedge DRPCLK, negedge TXMAINCURSOR[0], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, TXMAINCURSOR_delay[0]);
    $setuphold (posedge DRPCLK, negedge TXMAINCURSOR[1], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, TXMAINCURSOR_delay[1]);
    $setuphold (posedge DRPCLK, negedge TXMAINCURSOR[2], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, TXMAINCURSOR_delay[2]);
    $setuphold (posedge DRPCLK, negedge TXMAINCURSOR[3], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, TXMAINCURSOR_delay[3]);
    $setuphold (posedge DRPCLK, negedge TXMAINCURSOR[4], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, TXMAINCURSOR_delay[4]);
    $setuphold (posedge DRPCLK, negedge TXMAINCURSOR[5], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, TXMAINCURSOR_delay[5]);
    $setuphold (posedge DRPCLK, negedge TXMAINCURSOR[6], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, TXMAINCURSOR_delay[6]);
    $setuphold (posedge DRPCLK, negedge TXPHALIGN, 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, TXPHALIGN_delay);
    $setuphold (posedge DRPCLK, negedge TXPHDLYPD, 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, TXPHDLYPD_delay);
    $setuphold (posedge DRPCLK, negedge TXPHINIT, 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, TXPHINIT_delay);
    $setuphold (posedge DRPCLK, negedge TXPOSTCURSOR[0], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, TXPOSTCURSOR_delay[0]);
    $setuphold (posedge DRPCLK, negedge TXPOSTCURSOR[1], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, TXPOSTCURSOR_delay[1]);
    $setuphold (posedge DRPCLK, negedge TXPOSTCURSOR[2], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, TXPOSTCURSOR_delay[2]);
    $setuphold (posedge DRPCLK, negedge TXPOSTCURSOR[3], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, TXPOSTCURSOR_delay[3]);
    $setuphold (posedge DRPCLK, negedge TXPOSTCURSOR[4], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, TXPOSTCURSOR_delay[4]);
    $setuphold (posedge DRPCLK, posedge CFGRESET, 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, CFGRESET_delay);
    $setuphold (posedge DRPCLK, posedge CPLLPD, 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, CPLLPD_delay);
    $setuphold (posedge DRPCLK, posedge DRPADDR[0], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, DRPADDR_delay[0]);
    $setuphold (posedge DRPCLK, posedge DRPADDR[1], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, DRPADDR_delay[1]);
    $setuphold (posedge DRPCLK, posedge DRPADDR[2], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, DRPADDR_delay[2]);
    $setuphold (posedge DRPCLK, posedge DRPADDR[3], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, DRPADDR_delay[3]);
    $setuphold (posedge DRPCLK, posedge DRPADDR[4], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, DRPADDR_delay[4]);
    $setuphold (posedge DRPCLK, posedge DRPADDR[5], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, DRPADDR_delay[5]);
    $setuphold (posedge DRPCLK, posedge DRPADDR[6], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, DRPADDR_delay[6]);
    $setuphold (posedge DRPCLK, posedge DRPADDR[7], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, DRPADDR_delay[7]);
    $setuphold (posedge DRPCLK, posedge DRPADDR[8], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, DRPADDR_delay[8]);
    $setuphold (posedge DRPCLK, posedge DRPADDR[9], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, DRPADDR_delay[9]);
    $setuphold (posedge DRPCLK, posedge DRPDI[0], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, DRPDI_delay[0]);
    $setuphold (posedge DRPCLK, posedge DRPDI[10], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, DRPDI_delay[10]);
    $setuphold (posedge DRPCLK, posedge DRPDI[11], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, DRPDI_delay[11]);
    $setuphold (posedge DRPCLK, posedge DRPDI[12], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, DRPDI_delay[12]);
    $setuphold (posedge DRPCLK, posedge DRPDI[13], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, DRPDI_delay[13]);
    $setuphold (posedge DRPCLK, posedge DRPDI[14], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, DRPDI_delay[14]);
    $setuphold (posedge DRPCLK, posedge DRPDI[15], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, DRPDI_delay[15]);
    $setuphold (posedge DRPCLK, posedge DRPDI[1], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, DRPDI_delay[1]);
    $setuphold (posedge DRPCLK, posedge DRPDI[2], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, DRPDI_delay[2]);
    $setuphold (posedge DRPCLK, posedge DRPDI[3], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, DRPDI_delay[3]);
    $setuphold (posedge DRPCLK, posedge DRPDI[4], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, DRPDI_delay[4]);
    $setuphold (posedge DRPCLK, posedge DRPDI[5], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, DRPDI_delay[5]);
    $setuphold (posedge DRPCLK, posedge DRPDI[6], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, DRPDI_delay[6]);
    $setuphold (posedge DRPCLK, posedge DRPDI[7], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, DRPDI_delay[7]);
    $setuphold (posedge DRPCLK, posedge DRPDI[8], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, DRPDI_delay[8]);
    $setuphold (posedge DRPCLK, posedge DRPDI[9], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, DRPDI_delay[9]);
    $setuphold (posedge DRPCLK, posedge DRPEN, 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, DRPEN_delay);
    $setuphold (posedge DRPCLK, posedge DRPWE, 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, DRPWE_delay);
    $setuphold (posedge DRPCLK, posedge RESETOVRD, 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, RESETOVRD_delay);
    $setuphold (posedge DRPCLK, posedge RXELECIDLEMODE[0], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, RXELECIDLEMODE_delay[0]);
    $setuphold (posedge DRPCLK, posedge RXLPMEN, 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, RXLPMEN_delay);
    $setuphold (posedge DRPCLK, posedge RXPHALIGN, 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, RXPHALIGN_delay);
    $setuphold (posedge DRPCLK, posedge TSTIN[0], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, TSTIN_delay[0]);
    $setuphold (posedge DRPCLK, posedge TSTIN[10], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, TSTIN_delay[10]);
    $setuphold (posedge DRPCLK, posedge TSTIN[1], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, TSTIN_delay[1]);
    $setuphold (posedge DRPCLK, posedge TSTIN[2], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, TSTIN_delay[2]);
    $setuphold (posedge DRPCLK, posedge TSTIN[3], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, TSTIN_delay[3]);
    $setuphold (posedge DRPCLK, posedge TSTIN[4], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, TSTIN_delay[4]);
    $setuphold (posedge DRPCLK, posedge TSTIN[5], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, TSTIN_delay[5]);
    $setuphold (posedge DRPCLK, posedge TSTIN[6], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, TSTIN_delay[6]);
    $setuphold (posedge DRPCLK, posedge TSTIN[7], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, TSTIN_delay[7]);
    $setuphold (posedge DRPCLK, posedge TSTIN[8], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, TSTIN_delay[8]);
    $setuphold (posedge DRPCLK, posedge TSTIN[9], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, TSTIN_delay[9]);
    $setuphold (posedge DRPCLK, posedge TXDLYBYPASS, 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, TXDLYBYPASS_delay);
    $setuphold (posedge DRPCLK, posedge TXMAINCURSOR[0], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, TXMAINCURSOR_delay[0]);
    $setuphold (posedge DRPCLK, posedge TXMAINCURSOR[1], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, TXMAINCURSOR_delay[1]);
    $setuphold (posedge DRPCLK, posedge TXMAINCURSOR[2], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, TXMAINCURSOR_delay[2]);
    $setuphold (posedge DRPCLK, posedge TXMAINCURSOR[3], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, TXMAINCURSOR_delay[3]);
    $setuphold (posedge DRPCLK, posedge TXMAINCURSOR[4], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, TXMAINCURSOR_delay[4]);
    $setuphold (posedge DRPCLK, posedge TXMAINCURSOR[5], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, TXMAINCURSOR_delay[5]);
    $setuphold (posedge DRPCLK, posedge TXMAINCURSOR[6], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, TXMAINCURSOR_delay[6]);
    $setuphold (posedge DRPCLK, posedge TXPHALIGN, 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, TXPHALIGN_delay);
    $setuphold (posedge DRPCLK, posedge TXPHDLYPD, 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, TXPHDLYPD_delay);
    $setuphold (posedge DRPCLK, posedge TXPHINIT, 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, TXPHINIT_delay);
    $setuphold (posedge DRPCLK, posedge TXPOSTCURSOR[0], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, TXPOSTCURSOR_delay[0]);
    $setuphold (posedge DRPCLK, posedge TXPOSTCURSOR[1], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, TXPOSTCURSOR_delay[1]);
    $setuphold (posedge DRPCLK, posedge TXPOSTCURSOR[2], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, TXPOSTCURSOR_delay[2]);
    $setuphold (posedge DRPCLK, posedge TXPOSTCURSOR[3], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, TXPOSTCURSOR_delay[3]);
    $setuphold (posedge DRPCLK, posedge TXPOSTCURSOR[4], 0:0:0, 0:0:0, notifier, , , DRPCLK_delay, TXPOSTCURSOR_delay[4]);
    $setuphold (posedge RXUSRCLK, negedge CTLRXPAUSEACK[0], 0:0:0, 0:0:0, notifier, , , RXUSRCLK_delay, CTLRXPAUSEACK_delay[0]);
    $setuphold (posedge RXUSRCLK, negedge CTLRXPAUSEACK[1], 0:0:0, 0:0:0, notifier, , , RXUSRCLK_delay, CTLRXPAUSEACK_delay[1]);
    $setuphold (posedge RXUSRCLK, negedge CTLRXPAUSEACK[2], 0:0:0, 0:0:0, notifier, , , RXUSRCLK_delay, CTLRXPAUSEACK_delay[2]);
    $setuphold (posedge RXUSRCLK, negedge CTLRXPAUSEACK[3], 0:0:0, 0:0:0, notifier, , , RXUSRCLK_delay, CTLRXPAUSEACK_delay[3]);
    $setuphold (posedge RXUSRCLK, negedge CTLRXPAUSEACK[4], 0:0:0, 0:0:0, notifier, , , RXUSRCLK_delay, CTLRXPAUSEACK_delay[4]);
    $setuphold (posedge RXUSRCLK, negedge CTLRXPAUSEACK[5], 0:0:0, 0:0:0, notifier, , , RXUSRCLK_delay, CTLRXPAUSEACK_delay[5]);
    $setuphold (posedge RXUSRCLK, negedge CTLRXPAUSEACK[6], 0:0:0, 0:0:0, notifier, , , RXUSRCLK_delay, CTLRXPAUSEACK_delay[6]);
    $setuphold (posedge RXUSRCLK, negedge CTLRXPAUSEACK[7], 0:0:0, 0:0:0, notifier, , , RXUSRCLK_delay, CTLRXPAUSEACK_delay[7]);
    $setuphold (posedge RXUSRCLK, negedge CTLRXPAUSEACK[8], 0:0:0, 0:0:0, notifier, , , RXUSRCLK_delay, CTLRXPAUSEACK_delay[8]);
    $setuphold (posedge RXUSRCLK, negedge PCSRSVDIN[0], 0:0:0, 0:0:0, notifier, , , RXUSRCLK_delay, PCSRSVDIN_delay[0]);
    $setuphold (posedge RXUSRCLK, negedge PCSRSVDIN[2], 0:0:0, 0:0:0, notifier, , , RXUSRCLK_delay, PCSRSVDIN_delay[2]);
    $setuphold (posedge RXUSRCLK, negedge TSTIN[0], 0:0:0, 0:0:0, notifier, , , RXUSRCLK_delay, TSTIN_delay[0]);
    $setuphold (posedge RXUSRCLK, negedge TSTIN[1], 0:0:0, 0:0:0, notifier, , , RXUSRCLK_delay, TSTIN_delay[1]);
    $setuphold (posedge RXUSRCLK, negedge TSTIN[2], 0:0:0, 0:0:0, notifier, , , RXUSRCLK_delay, TSTIN_delay[2]);
    $setuphold (posedge RXUSRCLK, negedge TSTIN[3], 0:0:0, 0:0:0, notifier, , , RXUSRCLK_delay, TSTIN_delay[3]);
    $setuphold (posedge RXUSRCLK, negedge TSTIN[4], 0:0:0, 0:0:0, notifier, , , RXUSRCLK_delay, TSTIN_delay[4]);
    $setuphold (posedge RXUSRCLK, negedge TSTIN[5], 0:0:0, 0:0:0, notifier, , , RXUSRCLK_delay, TSTIN_delay[5]);
    $setuphold (posedge RXUSRCLK, negedge TSTIN[6], 0:0:0, 0:0:0, notifier, , , RXUSRCLK_delay, TSTIN_delay[6]);
    $setuphold (posedge RXUSRCLK, negedge TSTIN[7], 0:0:0, 0:0:0, notifier, , , RXUSRCLK_delay, TSTIN_delay[7]);
    $setuphold (posedge RXUSRCLK, negedge TSTIN[8], 0:0:0, 0:0:0, notifier, , , RXUSRCLK_delay, TSTIN_delay[8]);
    $setuphold (posedge RXUSRCLK, negedge TSTIN[9], 0:0:0, 0:0:0, notifier, , , RXUSRCLK_delay, TSTIN_delay[9]);
    $setuphold (posedge RXUSRCLK, negedge TXDLYBYPASS, 0:0:0, 0:0:0, notifier, , , RXUSRCLK_delay, TXDLYBYPASS_delay);
    $setuphold (posedge RXUSRCLK, negedge TXDLYHOLD, 0:0:0, 0:0:0, notifier, , , RXUSRCLK_delay, TXDLYHOLD_delay);
    $setuphold (posedge RXUSRCLK, negedge TXDLYUPDOWN, 0:0:0, 0:0:0, notifier, , , RXUSRCLK_delay, TXDLYUPDOWN_delay);
    $setuphold (posedge RXUSRCLK, negedge TXPHDLYPD, 0:0:0, 0:0:0, notifier, , , RXUSRCLK_delay, TXPHDLYPD_delay);
    $setuphold (posedge RXUSRCLK, posedge CTLRXPAUSEACK[0], 0:0:0, 0:0:0, notifier, , , RXUSRCLK_delay, CTLRXPAUSEACK_delay[0]);
    $setuphold (posedge RXUSRCLK, posedge CTLRXPAUSEACK[1], 0:0:0, 0:0:0, notifier, , , RXUSRCLK_delay, CTLRXPAUSEACK_delay[1]);
    $setuphold (posedge RXUSRCLK, posedge CTLRXPAUSEACK[2], 0:0:0, 0:0:0, notifier, , , RXUSRCLK_delay, CTLRXPAUSEACK_delay[2]);
    $setuphold (posedge RXUSRCLK, posedge CTLRXPAUSEACK[3], 0:0:0, 0:0:0, notifier, , , RXUSRCLK_delay, CTLRXPAUSEACK_delay[3]);
    $setuphold (posedge RXUSRCLK, posedge CTLRXPAUSEACK[4], 0:0:0, 0:0:0, notifier, , , RXUSRCLK_delay, CTLRXPAUSEACK_delay[4]);
    $setuphold (posedge RXUSRCLK, posedge CTLRXPAUSEACK[5], 0:0:0, 0:0:0, notifier, , , RXUSRCLK_delay, CTLRXPAUSEACK_delay[5]);
    $setuphold (posedge RXUSRCLK, posedge CTLRXPAUSEACK[6], 0:0:0, 0:0:0, notifier, , , RXUSRCLK_delay, CTLRXPAUSEACK_delay[6]);
    $setuphold (posedge RXUSRCLK, posedge CTLRXPAUSEACK[7], 0:0:0, 0:0:0, notifier, , , RXUSRCLK_delay, CTLRXPAUSEACK_delay[7]);
    $setuphold (posedge RXUSRCLK, posedge CTLRXPAUSEACK[8], 0:0:0, 0:0:0, notifier, , , RXUSRCLK_delay, CTLRXPAUSEACK_delay[8]);
    $setuphold (posedge RXUSRCLK, posedge PCSRSVDIN[0], 0:0:0, 0:0:0, notifier, , , RXUSRCLK_delay, PCSRSVDIN_delay[0]);
    $setuphold (posedge RXUSRCLK, posedge PCSRSVDIN[2], 0:0:0, 0:0:0, notifier, , , RXUSRCLK_delay, PCSRSVDIN_delay[2]);
    $setuphold (posedge RXUSRCLK, posedge TSTIN[0], 0:0:0, 0:0:0, notifier, , , RXUSRCLK_delay, TSTIN_delay[0]);
    $setuphold (posedge RXUSRCLK, posedge TSTIN[1], 0:0:0, 0:0:0, notifier, , , RXUSRCLK_delay, TSTIN_delay[1]);
    $setuphold (posedge RXUSRCLK, posedge TSTIN[2], 0:0:0, 0:0:0, notifier, , , RXUSRCLK_delay, TSTIN_delay[2]);
    $setuphold (posedge RXUSRCLK, posedge TSTIN[3], 0:0:0, 0:0:0, notifier, , , RXUSRCLK_delay, TSTIN_delay[3]);
    $setuphold (posedge RXUSRCLK, posedge TSTIN[4], 0:0:0, 0:0:0, notifier, , , RXUSRCLK_delay, TSTIN_delay[4]);
    $setuphold (posedge RXUSRCLK, posedge TSTIN[5], 0:0:0, 0:0:0, notifier, , , RXUSRCLK_delay, TSTIN_delay[5]);
    $setuphold (posedge RXUSRCLK, posedge TSTIN[6], 0:0:0, 0:0:0, notifier, , , RXUSRCLK_delay, TSTIN_delay[6]);
    $setuphold (posedge RXUSRCLK, posedge TSTIN[7], 0:0:0, 0:0:0, notifier, , , RXUSRCLK_delay, TSTIN_delay[7]);
    $setuphold (posedge RXUSRCLK, posedge TSTIN[8], 0:0:0, 0:0:0, notifier, , , RXUSRCLK_delay, TSTIN_delay[8]);
    $setuphold (posedge RXUSRCLK, posedge TSTIN[9], 0:0:0, 0:0:0, notifier, , , RXUSRCLK_delay, TSTIN_delay[9]);
    $setuphold (posedge RXUSRCLK, posedge TXDLYBYPASS, 0:0:0, 0:0:0, notifier, , , RXUSRCLK_delay, TXDLYBYPASS_delay);
    $setuphold (posedge RXUSRCLK, posedge TXDLYHOLD, 0:0:0, 0:0:0, notifier, , , RXUSRCLK_delay, TXDLYHOLD_delay);
    $setuphold (posedge RXUSRCLK, posedge TXDLYUPDOWN, 0:0:0, 0:0:0, notifier, , , RXUSRCLK_delay, TXDLYUPDOWN_delay);
    $setuphold (posedge RXUSRCLK, posedge TXPHDLYPD, 0:0:0, 0:0:0, notifier, , , RXUSRCLK_delay, TXPHDLYPD_delay);
    $setuphold (posedge TXUSRCLK, negedge CTLTXPAUSEREQ[0], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, CTLTXPAUSEREQ_delay[0]);
    $setuphold (posedge TXUSRCLK, negedge CTLTXPAUSEREQ[1], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, CTLTXPAUSEREQ_delay[1]);
    $setuphold (posedge TXUSRCLK, negedge CTLTXPAUSEREQ[2], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, CTLTXPAUSEREQ_delay[2]);
    $setuphold (posedge TXUSRCLK, negedge CTLTXPAUSEREQ[3], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, CTLTXPAUSEREQ_delay[3]);
    $setuphold (posedge TXUSRCLK, negedge CTLTXPAUSEREQ[4], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, CTLTXPAUSEREQ_delay[4]);
    $setuphold (posedge TXUSRCLK, negedge CTLTXPAUSEREQ[5], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, CTLTXPAUSEREQ_delay[5]);
    $setuphold (posedge TXUSRCLK, negedge CTLTXPAUSEREQ[6], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, CTLTXPAUSEREQ_delay[6]);
    $setuphold (posedge TXUSRCLK, negedge CTLTXPAUSEREQ[7], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, CTLTXPAUSEREQ_delay[7]);
    $setuphold (posedge TXUSRCLK, negedge CTLTXPAUSEREQ[8], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, CTLTXPAUSEREQ_delay[8]);
    $setuphold (posedge TXUSRCLK, negedge CTLTXRESENDPAUSE, 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, CTLTXRESENDPAUSE_delay);
    $setuphold (posedge TXUSRCLK, negedge LOOPBACK[0], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, LOOPBACK_delay[0]);
    $setuphold (posedge TXUSRCLK, negedge LOOPBACK[1], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, LOOPBACK_delay[1]);
    $setuphold (posedge TXUSRCLK, negedge LOOPBACK[2], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, LOOPBACK_delay[2]);
    $setuphold (posedge TXUSRCLK, negedge TSTIN[0], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TSTIN_delay[0]);
    $setuphold (posedge TXUSRCLK, negedge TSTIN[1], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TSTIN_delay[1]);
    $setuphold (posedge TXUSRCLK, negedge TSTIN[2], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TSTIN_delay[2]);
    $setuphold (posedge TXUSRCLK, negedge TSTIN[3], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TSTIN_delay[3]);
    $setuphold (posedge TXUSRCLK, negedge TSTIN[4], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TSTIN_delay[4]);
    $setuphold (posedge TXUSRCLK, negedge TSTIN[5], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TSTIN_delay[5]);
    $setuphold (posedge TXUSRCLK, negedge TSTIN[6], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TSTIN_delay[6]);
    $setuphold (posedge TXUSRCLK, negedge TSTIN[7], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TSTIN_delay[7]);
    $setuphold (posedge TXUSRCLK, negedge TSTIN[8], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TSTIN_delay[8]);
    $setuphold (posedge TXUSRCLK, negedge TSTIN[9], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TSTIN_delay[9]);
    $setuphold (posedge TXUSRCLK, negedge TXAXISTDATA[0], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[0]);
    $setuphold (posedge TXUSRCLK, negedge TXAXISTDATA[10], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[10]);
    $setuphold (posedge TXUSRCLK, negedge TXAXISTDATA[11], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[11]);
    $setuphold (posedge TXUSRCLK, negedge TXAXISTDATA[12], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[12]);
    $setuphold (posedge TXUSRCLK, negedge TXAXISTDATA[13], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[13]);
    $setuphold (posedge TXUSRCLK, negedge TXAXISTDATA[14], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[14]);
    $setuphold (posedge TXUSRCLK, negedge TXAXISTDATA[15], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[15]);
    $setuphold (posedge TXUSRCLK, negedge TXAXISTDATA[16], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[16]);
    $setuphold (posedge TXUSRCLK, negedge TXAXISTDATA[17], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[17]);
    $setuphold (posedge TXUSRCLK, negedge TXAXISTDATA[18], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[18]);
    $setuphold (posedge TXUSRCLK, negedge TXAXISTDATA[19], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[19]);
    $setuphold (posedge TXUSRCLK, negedge TXAXISTDATA[1], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[1]);
    $setuphold (posedge TXUSRCLK, negedge TXAXISTDATA[20], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[20]);
    $setuphold (posedge TXUSRCLK, negedge TXAXISTDATA[21], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[21]);
    $setuphold (posedge TXUSRCLK, negedge TXAXISTDATA[22], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[22]);
    $setuphold (posedge TXUSRCLK, negedge TXAXISTDATA[23], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[23]);
    $setuphold (posedge TXUSRCLK, negedge TXAXISTDATA[24], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[24]);
    $setuphold (posedge TXUSRCLK, negedge TXAXISTDATA[25], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[25]);
    $setuphold (posedge TXUSRCLK, negedge TXAXISTDATA[26], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[26]);
    $setuphold (posedge TXUSRCLK, negedge TXAXISTDATA[27], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[27]);
    $setuphold (posedge TXUSRCLK, negedge TXAXISTDATA[28], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[28]);
    $setuphold (posedge TXUSRCLK, negedge TXAXISTDATA[29], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[29]);
    $setuphold (posedge TXUSRCLK, negedge TXAXISTDATA[2], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[2]);
    $setuphold (posedge TXUSRCLK, negedge TXAXISTDATA[30], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[30]);
    $setuphold (posedge TXUSRCLK, negedge TXAXISTDATA[31], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[31]);
    $setuphold (posedge TXUSRCLK, negedge TXAXISTDATA[32], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[32]);
    $setuphold (posedge TXUSRCLK, negedge TXAXISTDATA[33], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[33]);
    $setuphold (posedge TXUSRCLK, negedge TXAXISTDATA[34], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[34]);
    $setuphold (posedge TXUSRCLK, negedge TXAXISTDATA[35], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[35]);
    $setuphold (posedge TXUSRCLK, negedge TXAXISTDATA[36], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[36]);
    $setuphold (posedge TXUSRCLK, negedge TXAXISTDATA[37], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[37]);
    $setuphold (posedge TXUSRCLK, negedge TXAXISTDATA[38], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[38]);
    $setuphold (posedge TXUSRCLK, negedge TXAXISTDATA[39], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[39]);
    $setuphold (posedge TXUSRCLK, negedge TXAXISTDATA[3], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[3]);
    $setuphold (posedge TXUSRCLK, negedge TXAXISTDATA[40], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[40]);
    $setuphold (posedge TXUSRCLK, negedge TXAXISTDATA[41], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[41]);
    $setuphold (posedge TXUSRCLK, negedge TXAXISTDATA[42], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[42]);
    $setuphold (posedge TXUSRCLK, negedge TXAXISTDATA[43], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[43]);
    $setuphold (posedge TXUSRCLK, negedge TXAXISTDATA[44], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[44]);
    $setuphold (posedge TXUSRCLK, negedge TXAXISTDATA[45], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[45]);
    $setuphold (posedge TXUSRCLK, negedge TXAXISTDATA[46], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[46]);
    $setuphold (posedge TXUSRCLK, negedge TXAXISTDATA[47], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[47]);
    $setuphold (posedge TXUSRCLK, negedge TXAXISTDATA[48], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[48]);
    $setuphold (posedge TXUSRCLK, negedge TXAXISTDATA[49], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[49]);
    $setuphold (posedge TXUSRCLK, negedge TXAXISTDATA[4], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[4]);
    $setuphold (posedge TXUSRCLK, negedge TXAXISTDATA[50], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[50]);
    $setuphold (posedge TXUSRCLK, negedge TXAXISTDATA[51], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[51]);
    $setuphold (posedge TXUSRCLK, negedge TXAXISTDATA[52], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[52]);
    $setuphold (posedge TXUSRCLK, negedge TXAXISTDATA[53], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[53]);
    $setuphold (posedge TXUSRCLK, negedge TXAXISTDATA[54], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[54]);
    $setuphold (posedge TXUSRCLK, negedge TXAXISTDATA[55], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[55]);
    $setuphold (posedge TXUSRCLK, negedge TXAXISTDATA[56], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[56]);
    $setuphold (posedge TXUSRCLK, negedge TXAXISTDATA[57], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[57]);
    $setuphold (posedge TXUSRCLK, negedge TXAXISTDATA[58], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[58]);
    $setuphold (posedge TXUSRCLK, negedge TXAXISTDATA[59], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[59]);
    $setuphold (posedge TXUSRCLK, negedge TXAXISTDATA[5], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[5]);
    $setuphold (posedge TXUSRCLK, negedge TXAXISTDATA[60], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[60]);
    $setuphold (posedge TXUSRCLK, negedge TXAXISTDATA[61], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[61]);
    $setuphold (posedge TXUSRCLK, negedge TXAXISTDATA[62], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[62]);
    $setuphold (posedge TXUSRCLK, negedge TXAXISTDATA[63], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[63]);
    $setuphold (posedge TXUSRCLK, negedge TXAXISTDATA[6], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[6]);
    $setuphold (posedge TXUSRCLK, negedge TXAXISTDATA[7], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[7]);
    $setuphold (posedge TXUSRCLK, negedge TXAXISTDATA[8], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[8]);
    $setuphold (posedge TXUSRCLK, negedge TXAXISTDATA[9], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[9]);
    $setuphold (posedge TXUSRCLK, negedge TXAXISTERR, 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTERR_delay);
    $setuphold (posedge TXUSRCLK, negedge TXAXISTLAST[0], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTLAST_delay[0]);
    $setuphold (posedge TXUSRCLK, negedge TXAXISTLAST[1], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTLAST_delay[1]);
    $setuphold (posedge TXUSRCLK, negedge TXAXISTLAST[2], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTLAST_delay[2]);
    $setuphold (posedge TXUSRCLK, negedge TXAXISTLAST[3], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTLAST_delay[3]);
    $setuphold (posedge TXUSRCLK, negedge TXAXISTLAST[4], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTLAST_delay[4]);
    $setuphold (posedge TXUSRCLK, negedge TXAXISTLAST[5], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTLAST_delay[5]);
    $setuphold (posedge TXUSRCLK, negedge TXAXISTLAST[6], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTLAST_delay[6]);
    $setuphold (posedge TXUSRCLK, negedge TXAXISTLAST[7], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTLAST_delay[7]);
    $setuphold (posedge TXUSRCLK, negedge TXAXISTPOISON, 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTPOISON_delay);
    $setuphold (posedge TXUSRCLK, negedge TXAXISTPRE[0], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTPRE_delay[0]);
    $setuphold (posedge TXUSRCLK, negedge TXAXISTPRE[1], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTPRE_delay[1]);
    $setuphold (posedge TXUSRCLK, negedge TXAXISTPRE[2], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTPRE_delay[2]);
    $setuphold (posedge TXUSRCLK, negedge TXAXISTPRE[3], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTPRE_delay[3]);
    $setuphold (posedge TXUSRCLK, negedge TXAXISTPRE[4], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTPRE_delay[4]);
    $setuphold (posedge TXUSRCLK, negedge TXAXISTPRE[5], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTPRE_delay[5]);
    $setuphold (posedge TXUSRCLK, negedge TXAXISTPRE[6], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTPRE_delay[6]);
    $setuphold (posedge TXUSRCLK, negedge TXAXISTPRE[7], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTPRE_delay[7]);
    $setuphold (posedge TXUSRCLK, negedge TXAXISTSOF[0], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTSOF_delay[0]);
    $setuphold (posedge TXUSRCLK, negedge TXAXISTSOF[1], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTSOF_delay[1]);
    $setuphold (posedge TXUSRCLK, negedge TXAXISTTERM[0], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTTERM_delay[0]);
    $setuphold (posedge TXUSRCLK, negedge TXAXISTTERM[1], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTTERM_delay[1]);
    $setuphold (posedge TXUSRCLK, negedge TXAXISTTERM[2], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTTERM_delay[2]);
    $setuphold (posedge TXUSRCLK, negedge TXAXISTTERM[3], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTTERM_delay[3]);
    $setuphold (posedge TXUSRCLK, negedge TXAXISTTERM[4], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTTERM_delay[4]);
    $setuphold (posedge TXUSRCLK, negedge TXAXISTVALID, 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTVALID_delay);
    $setuphold (posedge TXUSRCLK, negedge TXGBSEQSYNC, 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXGBSEQSYNC_delay);
    $setuphold (posedge TXUSRCLK, negedge TXPIPPMEN, 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXPIPPMEN_delay);
    $setuphold (posedge TXUSRCLK, negedge TXPIPPMOVRDEN, 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXPIPPMOVRDEN_delay);
    $setuphold (posedge TXUSRCLK, negedge TXPIPPMSTEPSIZE[0], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXPIPPMSTEPSIZE_delay[0]);
    $setuphold (posedge TXUSRCLK, negedge TXPIPPMSTEPSIZE[1], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXPIPPMSTEPSIZE_delay[1]);
    $setuphold (posedge TXUSRCLK, negedge TXPIPPMSTEPSIZE[2], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXPIPPMSTEPSIZE_delay[2]);
    $setuphold (posedge TXUSRCLK, negedge TXPIPPMSTEPSIZE[3], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXPIPPMSTEPSIZE_delay[3]);
    $setuphold (posedge TXUSRCLK, negedge TXPIPPMSTEPSIZE[4], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXPIPPMSTEPSIZE_delay[4]);
    $setuphold (posedge TXUSRCLK, negedge TXPOLARITY, 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXPOLARITY_delay);
    $setuphold (posedge TXUSRCLK, negedge TXPRBSFORCEERR, 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXPRBSFORCEERR_delay);
    $setuphold (posedge TXUSRCLK, negedge TXPRBSSEL[0], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXPRBSSEL_delay[0]);
    $setuphold (posedge TXUSRCLK, negedge TXPRBSSEL[1], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXPRBSSEL_delay[1]);
    $setuphold (posedge TXUSRCLK, negedge TXPRBSSEL[2], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXPRBSSEL_delay[2]);
    $setuphold (posedge TXUSRCLK, negedge TXPRBSSEL[3], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXPRBSSEL_delay[3]);
    $setuphold (posedge TXUSRCLK, negedge TXRAWDATA[0], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXRAWDATA_delay[0]);
    $setuphold (posedge TXUSRCLK, negedge TXRAWDATA[10], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXRAWDATA_delay[10]);
    $setuphold (posedge TXUSRCLK, negedge TXRAWDATA[11], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXRAWDATA_delay[11]);
    $setuphold (posedge TXUSRCLK, negedge TXRAWDATA[12], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXRAWDATA_delay[12]);
    $setuphold (posedge TXUSRCLK, negedge TXRAWDATA[13], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXRAWDATA_delay[13]);
    $setuphold (posedge TXUSRCLK, negedge TXRAWDATA[14], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXRAWDATA_delay[14]);
    $setuphold (posedge TXUSRCLK, negedge TXRAWDATA[15], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXRAWDATA_delay[15]);
    $setuphold (posedge TXUSRCLK, negedge TXRAWDATA[16], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXRAWDATA_delay[16]);
    $setuphold (posedge TXUSRCLK, negedge TXRAWDATA[17], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXRAWDATA_delay[17]);
    $setuphold (posedge TXUSRCLK, negedge TXRAWDATA[18], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXRAWDATA_delay[18]);
    $setuphold (posedge TXUSRCLK, negedge TXRAWDATA[19], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXRAWDATA_delay[19]);
    $setuphold (posedge TXUSRCLK, negedge TXRAWDATA[1], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXRAWDATA_delay[1]);
    $setuphold (posedge TXUSRCLK, negedge TXRAWDATA[20], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXRAWDATA_delay[20]);
    $setuphold (posedge TXUSRCLK, negedge TXRAWDATA[21], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXRAWDATA_delay[21]);
    $setuphold (posedge TXUSRCLK, negedge TXRAWDATA[22], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXRAWDATA_delay[22]);
    $setuphold (posedge TXUSRCLK, negedge TXRAWDATA[23], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXRAWDATA_delay[23]);
    $setuphold (posedge TXUSRCLK, negedge TXRAWDATA[24], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXRAWDATA_delay[24]);
    $setuphold (posedge TXUSRCLK, negedge TXRAWDATA[25], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXRAWDATA_delay[25]);
    $setuphold (posedge TXUSRCLK, negedge TXRAWDATA[26], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXRAWDATA_delay[26]);
    $setuphold (posedge TXUSRCLK, negedge TXRAWDATA[27], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXRAWDATA_delay[27]);
    $setuphold (posedge TXUSRCLK, negedge TXRAWDATA[28], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXRAWDATA_delay[28]);
    $setuphold (posedge TXUSRCLK, negedge TXRAWDATA[29], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXRAWDATA_delay[29]);
    $setuphold (posedge TXUSRCLK, negedge TXRAWDATA[2], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXRAWDATA_delay[2]);
    $setuphold (posedge TXUSRCLK, negedge TXRAWDATA[30], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXRAWDATA_delay[30]);
    $setuphold (posedge TXUSRCLK, negedge TXRAWDATA[31], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXRAWDATA_delay[31]);
    $setuphold (posedge TXUSRCLK, negedge TXRAWDATA[32], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXRAWDATA_delay[32]);
    $setuphold (posedge TXUSRCLK, negedge TXRAWDATA[33], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXRAWDATA_delay[33]);
    $setuphold (posedge TXUSRCLK, negedge TXRAWDATA[34], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXRAWDATA_delay[34]);
    $setuphold (posedge TXUSRCLK, negedge TXRAWDATA[35], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXRAWDATA_delay[35]);
    $setuphold (posedge TXUSRCLK, negedge TXRAWDATA[36], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXRAWDATA_delay[36]);
    $setuphold (posedge TXUSRCLK, negedge TXRAWDATA[37], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXRAWDATA_delay[37]);
    $setuphold (posedge TXUSRCLK, negedge TXRAWDATA[38], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXRAWDATA_delay[38]);
    $setuphold (posedge TXUSRCLK, negedge TXRAWDATA[39], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXRAWDATA_delay[39]);
    $setuphold (posedge TXUSRCLK, negedge TXRAWDATA[3], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXRAWDATA_delay[3]);
    $setuphold (posedge TXUSRCLK, negedge TXRAWDATA[4], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXRAWDATA_delay[4]);
    $setuphold (posedge TXUSRCLK, negedge TXRAWDATA[5], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXRAWDATA_delay[5]);
    $setuphold (posedge TXUSRCLK, negedge TXRAWDATA[6], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXRAWDATA_delay[6]);
    $setuphold (posedge TXUSRCLK, negedge TXRAWDATA[7], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXRAWDATA_delay[7]);
    $setuphold (posedge TXUSRCLK, negedge TXRAWDATA[8], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXRAWDATA_delay[8]);
    $setuphold (posedge TXUSRCLK, negedge TXRAWDATA[9], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXRAWDATA_delay[9]);
    $setuphold (posedge TXUSRCLK, posedge CTLTXPAUSEREQ[0], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, CTLTXPAUSEREQ_delay[0]);
    $setuphold (posedge TXUSRCLK, posedge CTLTXPAUSEREQ[1], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, CTLTXPAUSEREQ_delay[1]);
    $setuphold (posedge TXUSRCLK, posedge CTLTXPAUSEREQ[2], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, CTLTXPAUSEREQ_delay[2]);
    $setuphold (posedge TXUSRCLK, posedge CTLTXPAUSEREQ[3], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, CTLTXPAUSEREQ_delay[3]);
    $setuphold (posedge TXUSRCLK, posedge CTLTXPAUSEREQ[4], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, CTLTXPAUSEREQ_delay[4]);
    $setuphold (posedge TXUSRCLK, posedge CTLTXPAUSEREQ[5], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, CTLTXPAUSEREQ_delay[5]);
    $setuphold (posedge TXUSRCLK, posedge CTLTXPAUSEREQ[6], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, CTLTXPAUSEREQ_delay[6]);
    $setuphold (posedge TXUSRCLK, posedge CTLTXPAUSEREQ[7], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, CTLTXPAUSEREQ_delay[7]);
    $setuphold (posedge TXUSRCLK, posedge CTLTXPAUSEREQ[8], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, CTLTXPAUSEREQ_delay[8]);
    $setuphold (posedge TXUSRCLK, posedge CTLTXRESENDPAUSE, 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, CTLTXRESENDPAUSE_delay);
    $setuphold (posedge TXUSRCLK, posedge LOOPBACK[0], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, LOOPBACK_delay[0]);
    $setuphold (posedge TXUSRCLK, posedge LOOPBACK[1], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, LOOPBACK_delay[1]);
    $setuphold (posedge TXUSRCLK, posedge LOOPBACK[2], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, LOOPBACK_delay[2]);
    $setuphold (posedge TXUSRCLK, posedge TSTIN[0], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TSTIN_delay[0]);
    $setuphold (posedge TXUSRCLK, posedge TSTIN[1], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TSTIN_delay[1]);
    $setuphold (posedge TXUSRCLK, posedge TSTIN[2], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TSTIN_delay[2]);
    $setuphold (posedge TXUSRCLK, posedge TSTIN[3], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TSTIN_delay[3]);
    $setuphold (posedge TXUSRCLK, posedge TSTIN[4], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TSTIN_delay[4]);
    $setuphold (posedge TXUSRCLK, posedge TSTIN[5], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TSTIN_delay[5]);
    $setuphold (posedge TXUSRCLK, posedge TSTIN[6], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TSTIN_delay[6]);
    $setuphold (posedge TXUSRCLK, posedge TSTIN[7], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TSTIN_delay[7]);
    $setuphold (posedge TXUSRCLK, posedge TSTIN[8], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TSTIN_delay[8]);
    $setuphold (posedge TXUSRCLK, posedge TSTIN[9], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TSTIN_delay[9]);
    $setuphold (posedge TXUSRCLK, posedge TXAXISTDATA[0], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[0]);
    $setuphold (posedge TXUSRCLK, posedge TXAXISTDATA[10], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[10]);
    $setuphold (posedge TXUSRCLK, posedge TXAXISTDATA[11], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[11]);
    $setuphold (posedge TXUSRCLK, posedge TXAXISTDATA[12], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[12]);
    $setuphold (posedge TXUSRCLK, posedge TXAXISTDATA[13], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[13]);
    $setuphold (posedge TXUSRCLK, posedge TXAXISTDATA[14], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[14]);
    $setuphold (posedge TXUSRCLK, posedge TXAXISTDATA[15], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[15]);
    $setuphold (posedge TXUSRCLK, posedge TXAXISTDATA[16], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[16]);
    $setuphold (posedge TXUSRCLK, posedge TXAXISTDATA[17], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[17]);
    $setuphold (posedge TXUSRCLK, posedge TXAXISTDATA[18], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[18]);
    $setuphold (posedge TXUSRCLK, posedge TXAXISTDATA[19], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[19]);
    $setuphold (posedge TXUSRCLK, posedge TXAXISTDATA[1], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[1]);
    $setuphold (posedge TXUSRCLK, posedge TXAXISTDATA[20], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[20]);
    $setuphold (posedge TXUSRCLK, posedge TXAXISTDATA[21], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[21]);
    $setuphold (posedge TXUSRCLK, posedge TXAXISTDATA[22], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[22]);
    $setuphold (posedge TXUSRCLK, posedge TXAXISTDATA[23], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[23]);
    $setuphold (posedge TXUSRCLK, posedge TXAXISTDATA[24], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[24]);
    $setuphold (posedge TXUSRCLK, posedge TXAXISTDATA[25], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[25]);
    $setuphold (posedge TXUSRCLK, posedge TXAXISTDATA[26], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[26]);
    $setuphold (posedge TXUSRCLK, posedge TXAXISTDATA[27], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[27]);
    $setuphold (posedge TXUSRCLK, posedge TXAXISTDATA[28], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[28]);
    $setuphold (posedge TXUSRCLK, posedge TXAXISTDATA[29], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[29]);
    $setuphold (posedge TXUSRCLK, posedge TXAXISTDATA[2], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[2]);
    $setuphold (posedge TXUSRCLK, posedge TXAXISTDATA[30], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[30]);
    $setuphold (posedge TXUSRCLK, posedge TXAXISTDATA[31], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[31]);
    $setuphold (posedge TXUSRCLK, posedge TXAXISTDATA[32], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[32]);
    $setuphold (posedge TXUSRCLK, posedge TXAXISTDATA[33], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[33]);
    $setuphold (posedge TXUSRCLK, posedge TXAXISTDATA[34], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[34]);
    $setuphold (posedge TXUSRCLK, posedge TXAXISTDATA[35], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[35]);
    $setuphold (posedge TXUSRCLK, posedge TXAXISTDATA[36], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[36]);
    $setuphold (posedge TXUSRCLK, posedge TXAXISTDATA[37], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[37]);
    $setuphold (posedge TXUSRCLK, posedge TXAXISTDATA[38], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[38]);
    $setuphold (posedge TXUSRCLK, posedge TXAXISTDATA[39], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[39]);
    $setuphold (posedge TXUSRCLK, posedge TXAXISTDATA[3], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[3]);
    $setuphold (posedge TXUSRCLK, posedge TXAXISTDATA[40], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[40]);
    $setuphold (posedge TXUSRCLK, posedge TXAXISTDATA[41], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[41]);
    $setuphold (posedge TXUSRCLK, posedge TXAXISTDATA[42], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[42]);
    $setuphold (posedge TXUSRCLK, posedge TXAXISTDATA[43], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[43]);
    $setuphold (posedge TXUSRCLK, posedge TXAXISTDATA[44], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[44]);
    $setuphold (posedge TXUSRCLK, posedge TXAXISTDATA[45], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[45]);
    $setuphold (posedge TXUSRCLK, posedge TXAXISTDATA[46], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[46]);
    $setuphold (posedge TXUSRCLK, posedge TXAXISTDATA[47], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[47]);
    $setuphold (posedge TXUSRCLK, posedge TXAXISTDATA[48], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[48]);
    $setuphold (posedge TXUSRCLK, posedge TXAXISTDATA[49], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[49]);
    $setuphold (posedge TXUSRCLK, posedge TXAXISTDATA[4], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[4]);
    $setuphold (posedge TXUSRCLK, posedge TXAXISTDATA[50], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[50]);
    $setuphold (posedge TXUSRCLK, posedge TXAXISTDATA[51], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[51]);
    $setuphold (posedge TXUSRCLK, posedge TXAXISTDATA[52], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[52]);
    $setuphold (posedge TXUSRCLK, posedge TXAXISTDATA[53], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[53]);
    $setuphold (posedge TXUSRCLK, posedge TXAXISTDATA[54], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[54]);
    $setuphold (posedge TXUSRCLK, posedge TXAXISTDATA[55], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[55]);
    $setuphold (posedge TXUSRCLK, posedge TXAXISTDATA[56], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[56]);
    $setuphold (posedge TXUSRCLK, posedge TXAXISTDATA[57], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[57]);
    $setuphold (posedge TXUSRCLK, posedge TXAXISTDATA[58], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[58]);
    $setuphold (posedge TXUSRCLK, posedge TXAXISTDATA[59], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[59]);
    $setuphold (posedge TXUSRCLK, posedge TXAXISTDATA[5], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[5]);
    $setuphold (posedge TXUSRCLK, posedge TXAXISTDATA[60], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[60]);
    $setuphold (posedge TXUSRCLK, posedge TXAXISTDATA[61], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[61]);
    $setuphold (posedge TXUSRCLK, posedge TXAXISTDATA[62], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[62]);
    $setuphold (posedge TXUSRCLK, posedge TXAXISTDATA[63], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[63]);
    $setuphold (posedge TXUSRCLK, posedge TXAXISTDATA[6], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[6]);
    $setuphold (posedge TXUSRCLK, posedge TXAXISTDATA[7], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[7]);
    $setuphold (posedge TXUSRCLK, posedge TXAXISTDATA[8], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[8]);
    $setuphold (posedge TXUSRCLK, posedge TXAXISTDATA[9], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTDATA_delay[9]);
    $setuphold (posedge TXUSRCLK, posedge TXAXISTERR, 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTERR_delay);
    $setuphold (posedge TXUSRCLK, posedge TXAXISTLAST[0], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTLAST_delay[0]);
    $setuphold (posedge TXUSRCLK, posedge TXAXISTLAST[1], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTLAST_delay[1]);
    $setuphold (posedge TXUSRCLK, posedge TXAXISTLAST[2], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTLAST_delay[2]);
    $setuphold (posedge TXUSRCLK, posedge TXAXISTLAST[3], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTLAST_delay[3]);
    $setuphold (posedge TXUSRCLK, posedge TXAXISTLAST[4], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTLAST_delay[4]);
    $setuphold (posedge TXUSRCLK, posedge TXAXISTLAST[5], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTLAST_delay[5]);
    $setuphold (posedge TXUSRCLK, posedge TXAXISTLAST[6], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTLAST_delay[6]);
    $setuphold (posedge TXUSRCLK, posedge TXAXISTLAST[7], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTLAST_delay[7]);
    $setuphold (posedge TXUSRCLK, posedge TXAXISTPOISON, 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTPOISON_delay);
    $setuphold (posedge TXUSRCLK, posedge TXAXISTPRE[0], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTPRE_delay[0]);
    $setuphold (posedge TXUSRCLK, posedge TXAXISTPRE[1], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTPRE_delay[1]);
    $setuphold (posedge TXUSRCLK, posedge TXAXISTPRE[2], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTPRE_delay[2]);
    $setuphold (posedge TXUSRCLK, posedge TXAXISTPRE[3], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTPRE_delay[3]);
    $setuphold (posedge TXUSRCLK, posedge TXAXISTPRE[4], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTPRE_delay[4]);
    $setuphold (posedge TXUSRCLK, posedge TXAXISTPRE[5], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTPRE_delay[5]);
    $setuphold (posedge TXUSRCLK, posedge TXAXISTPRE[6], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTPRE_delay[6]);
    $setuphold (posedge TXUSRCLK, posedge TXAXISTPRE[7], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTPRE_delay[7]);
    $setuphold (posedge TXUSRCLK, posedge TXAXISTSOF[0], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTSOF_delay[0]);
    $setuphold (posedge TXUSRCLK, posedge TXAXISTSOF[1], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTSOF_delay[1]);
    $setuphold (posedge TXUSRCLK, posedge TXAXISTTERM[0], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTTERM_delay[0]);
    $setuphold (posedge TXUSRCLK, posedge TXAXISTTERM[1], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTTERM_delay[1]);
    $setuphold (posedge TXUSRCLK, posedge TXAXISTTERM[2], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTTERM_delay[2]);
    $setuphold (posedge TXUSRCLK, posedge TXAXISTTERM[3], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTTERM_delay[3]);
    $setuphold (posedge TXUSRCLK, posedge TXAXISTTERM[4], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTTERM_delay[4]);
    $setuphold (posedge TXUSRCLK, posedge TXAXISTVALID, 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXAXISTVALID_delay);
    $setuphold (posedge TXUSRCLK, posedge TXGBSEQSYNC, 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXGBSEQSYNC_delay);
    $setuphold (posedge TXUSRCLK, posedge TXPIPPMEN, 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXPIPPMEN_delay);
    $setuphold (posedge TXUSRCLK, posedge TXPIPPMOVRDEN, 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXPIPPMOVRDEN_delay);
    $setuphold (posedge TXUSRCLK, posedge TXPIPPMSTEPSIZE[0], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXPIPPMSTEPSIZE_delay[0]);
    $setuphold (posedge TXUSRCLK, posedge TXPIPPMSTEPSIZE[1], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXPIPPMSTEPSIZE_delay[1]);
    $setuphold (posedge TXUSRCLK, posedge TXPIPPMSTEPSIZE[2], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXPIPPMSTEPSIZE_delay[2]);
    $setuphold (posedge TXUSRCLK, posedge TXPIPPMSTEPSIZE[3], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXPIPPMSTEPSIZE_delay[3]);
    $setuphold (posedge TXUSRCLK, posedge TXPIPPMSTEPSIZE[4], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXPIPPMSTEPSIZE_delay[4]);
    $setuphold (posedge TXUSRCLK, posedge TXPOLARITY, 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXPOLARITY_delay);
    $setuphold (posedge TXUSRCLK, posedge TXPRBSFORCEERR, 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXPRBSFORCEERR_delay);
    $setuphold (posedge TXUSRCLK, posedge TXPRBSSEL[0], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXPRBSSEL_delay[0]);
    $setuphold (posedge TXUSRCLK, posedge TXPRBSSEL[1], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXPRBSSEL_delay[1]);
    $setuphold (posedge TXUSRCLK, posedge TXPRBSSEL[2], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXPRBSSEL_delay[2]);
    $setuphold (posedge TXUSRCLK, posedge TXPRBSSEL[3], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXPRBSSEL_delay[3]);
    $setuphold (posedge TXUSRCLK, posedge TXRAWDATA[0], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXRAWDATA_delay[0]);
    $setuphold (posedge TXUSRCLK, posedge TXRAWDATA[10], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXRAWDATA_delay[10]);
    $setuphold (posedge TXUSRCLK, posedge TXRAWDATA[11], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXRAWDATA_delay[11]);
    $setuphold (posedge TXUSRCLK, posedge TXRAWDATA[12], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXRAWDATA_delay[12]);
    $setuphold (posedge TXUSRCLK, posedge TXRAWDATA[13], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXRAWDATA_delay[13]);
    $setuphold (posedge TXUSRCLK, posedge TXRAWDATA[14], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXRAWDATA_delay[14]);
    $setuphold (posedge TXUSRCLK, posedge TXRAWDATA[15], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXRAWDATA_delay[15]);
    $setuphold (posedge TXUSRCLK, posedge TXRAWDATA[16], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXRAWDATA_delay[16]);
    $setuphold (posedge TXUSRCLK, posedge TXRAWDATA[17], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXRAWDATA_delay[17]);
    $setuphold (posedge TXUSRCLK, posedge TXRAWDATA[18], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXRAWDATA_delay[18]);
    $setuphold (posedge TXUSRCLK, posedge TXRAWDATA[19], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXRAWDATA_delay[19]);
    $setuphold (posedge TXUSRCLK, posedge TXRAWDATA[1], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXRAWDATA_delay[1]);
    $setuphold (posedge TXUSRCLK, posedge TXRAWDATA[20], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXRAWDATA_delay[20]);
    $setuphold (posedge TXUSRCLK, posedge TXRAWDATA[21], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXRAWDATA_delay[21]);
    $setuphold (posedge TXUSRCLK, posedge TXRAWDATA[22], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXRAWDATA_delay[22]);
    $setuphold (posedge TXUSRCLK, posedge TXRAWDATA[23], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXRAWDATA_delay[23]);
    $setuphold (posedge TXUSRCLK, posedge TXRAWDATA[24], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXRAWDATA_delay[24]);
    $setuphold (posedge TXUSRCLK, posedge TXRAWDATA[25], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXRAWDATA_delay[25]);
    $setuphold (posedge TXUSRCLK, posedge TXRAWDATA[26], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXRAWDATA_delay[26]);
    $setuphold (posedge TXUSRCLK, posedge TXRAWDATA[27], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXRAWDATA_delay[27]);
    $setuphold (posedge TXUSRCLK, posedge TXRAWDATA[28], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXRAWDATA_delay[28]);
    $setuphold (posedge TXUSRCLK, posedge TXRAWDATA[29], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXRAWDATA_delay[29]);
    $setuphold (posedge TXUSRCLK, posedge TXRAWDATA[2], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXRAWDATA_delay[2]);
    $setuphold (posedge TXUSRCLK, posedge TXRAWDATA[30], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXRAWDATA_delay[30]);
    $setuphold (posedge TXUSRCLK, posedge TXRAWDATA[31], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXRAWDATA_delay[31]);
    $setuphold (posedge TXUSRCLK, posedge TXRAWDATA[32], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXRAWDATA_delay[32]);
    $setuphold (posedge TXUSRCLK, posedge TXRAWDATA[33], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXRAWDATA_delay[33]);
    $setuphold (posedge TXUSRCLK, posedge TXRAWDATA[34], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXRAWDATA_delay[34]);
    $setuphold (posedge TXUSRCLK, posedge TXRAWDATA[35], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXRAWDATA_delay[35]);
    $setuphold (posedge TXUSRCLK, posedge TXRAWDATA[36], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXRAWDATA_delay[36]);
    $setuphold (posedge TXUSRCLK, posedge TXRAWDATA[37], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXRAWDATA_delay[37]);
    $setuphold (posedge TXUSRCLK, posedge TXRAWDATA[38], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXRAWDATA_delay[38]);
    $setuphold (posedge TXUSRCLK, posedge TXRAWDATA[39], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXRAWDATA_delay[39]);
    $setuphold (posedge TXUSRCLK, posedge TXRAWDATA[3], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXRAWDATA_delay[3]);
    $setuphold (posedge TXUSRCLK, posedge TXRAWDATA[4], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXRAWDATA_delay[4]);
    $setuphold (posedge TXUSRCLK, posedge TXRAWDATA[5], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXRAWDATA_delay[5]);
    $setuphold (posedge TXUSRCLK, posedge TXRAWDATA[6], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXRAWDATA_delay[6]);
    $setuphold (posedge TXUSRCLK, posedge TXRAWDATA[7], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXRAWDATA_delay[7]);
    $setuphold (posedge TXUSRCLK, posedge TXRAWDATA[8], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXRAWDATA_delay[8]);
    $setuphold (posedge TXUSRCLK, posedge TXRAWDATA[9], 0:0:0, 0:0:0, notifier, , , TXUSRCLK_delay, TXRAWDATA_delay[9]);
    $width (negedge DMONITORCLK, 0:0:0, 0, notifier);
    $width (negedge DRPCLK, 0:0:0, 0, notifier);
    $width (negedge RXUSRCLK, 0:0:0, 0, notifier);
    $width (negedge TXUSRCLK, 0:0:0, 0, notifier);
    $width (posedge DMONITORCLK, 0:0:0, 0, notifier);
    $width (posedge DRPCLK, 0:0:0, 0, notifier);
    $width (posedge RXUSRCLK, 0:0:0, 0, notifier);
    $width (posedge TXUSRCLK, 0:0:0, 0, notifier);
`endif
    specparam PATHPULSE$ = 0;
  endspecify
   // end timing section 
`endif
endmodule

`endcelldefine
