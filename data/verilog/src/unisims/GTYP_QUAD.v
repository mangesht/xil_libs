///////////////////////////////////////////////////////////////////////////////
//  Copyright (c) 1995/2021 Xilinx, Inc.
//  All Right Reserved.
///////////////////////////////////////////////////////////////////////////////
//   ____  ____
//  /   /\/   /
// /___/  \  /     Vendor      : Xilinx
// \   \   \/      Version     : 2021.2
//  \   \          Description : Xilinx Unified Simulation Library Component
//  /   /                        GTYP_QUAD
// /___/   /\      Filename    : GTYP_QUAD.v
// \   \  /  \
//  \___\/\___\
//
///////////////////////////////////////////////////////////////////////////////
//  Revision:
//
//  End Revision:
///////////////////////////////////////////////////////////////////////////////

`timescale 1 ps / 1 ps

`celldefine

module GTYP_QUAD #(
`ifdef XIL_TIMING
  parameter LOC = "UNPLACED",
`endif
  parameter [31:0] A_CFG0 = 32'h0000007C,
  parameter [31:0] A_CFG1 = 32'h40404040,
  parameter [31:0] A_CFG2 = 32'h00000000,
  parameter [31:0] A_CFG3 = 32'h00000000,
  parameter [31:0] A_CFG4 = 32'h00000000,
  parameter [31:0] A_CFG5 = 32'h00000000,
  parameter [31:0] CH0_ADAPT_APT_CFG = 32'h00000000,
  parameter [31:0] CH0_ADAPT_CAL_CFG = 32'h01E76400,
  parameter [31:0] CH0_ADAPT_DFE_CFG = 32'h00000000,
  parameter [31:0] CH0_ADAPT_GC_CFG0 = 32'h009010E8,
  parameter [31:0] CH0_ADAPT_GC_CFG1 = 32'h14A007E0,
  parameter [31:0] CH0_ADAPT_GC_CFG2 = 32'h002000E8,
  parameter [31:0] CH0_ADAPT_GC_CFG3 = 32'h14A003E0,
  parameter [31:0] CH0_ADAPT_GEN_CFG0 = 32'h00000000,
  parameter [31:0] CH0_ADAPT_GEN_CFG1 = 32'h00000000,
  parameter [31:0] CH0_ADAPT_GEN_CFG2 = 32'h80000000,
  parameter [31:0] CH0_ADAPT_GEN_CFG3 = 32'h10000000,
  parameter [31:0] CH0_ADAPT_H01_CFG = 32'h03A003A0,
  parameter [31:0] CH0_ADAPT_H23_CFG = 32'h03A003A0,
  parameter [31:0] CH0_ADAPT_H45_CFG = 32'h03A003A0,
  parameter [31:0] CH0_ADAPT_H67_CFG = 32'h03A003A0,
  parameter [31:0] CH0_ADAPT_H89_CFG = 32'h03A003A0,
  parameter [31:0] CH0_ADAPT_HAB_CFG = 32'h03A003A0,
  parameter [31:0] CH0_ADAPT_HCD_CFG = 32'h03A003A0,
  parameter [31:0] CH0_ADAPT_HEF_CFG = 32'h03A003A0,
  parameter [31:0] CH0_ADAPT_KH_CFG0 = 32'h10087BBF,
  parameter [31:0] CH0_ADAPT_KH_CFG1 = 32'h00000000,
  parameter [31:0] CH0_ADAPT_KH_CFG2 = 32'h00003BA0,
  parameter [31:0] CH0_ADAPT_KH_CFG3 = 32'h00000000,
  parameter [31:0] CH0_ADAPT_KH_CFG4 = 32'h00007BA0,
  parameter [31:0] CH0_ADAPT_KH_CFG5 = 32'h00000000,
  parameter [31:0] CH0_ADAPT_KL_CFG0 = 32'h00007BA0,
  parameter [31:0] CH0_ADAPT_KL_CFG1 = 32'h00003BA0,
  parameter [31:0] CH0_ADAPT_LCK_CFG0 = 32'h00004000,
  parameter [31:0] CH0_ADAPT_LCK_CFG1 = 32'h00004000,
  parameter [31:0] CH0_ADAPT_LCK_CFG2 = 32'h00000000,
  parameter [31:0] CH0_ADAPT_LCK_CFG3 = 32'h00000000,
  parameter [31:0] CH0_ADAPT_LOP_CFG = 32'hEE000660,
  parameter [31:0] CH0_ADAPT_OS_CFG = 32'h800003A0,
  parameter [31:0] CH0_CHCLK_ILO_CFG = 32'h00600033,
  parameter [31:0] CH0_CHCLK_MISC_CFG = 32'h78805C1F,
  parameter [31:0] CH0_CHCLK_RSV_CFG = 32'h00000000,
  parameter [31:0] CH0_CHCLK_RXCAL_CFG = 32'h083C4000,
  parameter [31:0] CH0_CHCLK_RXCAL_CFG1 = 32'h00000000,
  parameter [31:0] CH0_CHCLK_RXCAL_CFG2 = 32'h00000000,
  parameter [31:0] CH0_CHCLK_RXPI_CFG = 32'h00160830,
  parameter [31:0] CH0_CHCLK_TXCAL_CFG = 32'h00400020,
  parameter [31:0] CH0_CHCLK_TXPI_CFG0 = 32'h0047083F,
  parameter [31:0] CH0_CHL_RSV_CFG0 = 32'hC6000009,
  parameter [31:0] CH0_CHL_RSV_CFG1 = 32'h00000000,
  parameter [31:0] CH0_CHL_RSV_CFG2 = 32'h00000000,
  parameter [31:0] CH0_CHL_RSV_CFG3 = 32'h00000000,
  parameter [31:0] CH0_CHL_RSV_CFG4 = 32'h00000000,
  parameter [31:0] CH0_DA_CFG = 32'h00000000,
  parameter [31:0] CH0_EYESCAN_CFG0 = 32'h00000800,
  parameter [31:0] CH0_EYESCAN_CFG1 = 32'h00000000,
  parameter [31:0] CH0_EYESCAN_CFG10 = 32'h00000000,
  parameter [31:0] CH0_EYESCAN_CFG11 = 32'h00000000,
  parameter [31:0] CH0_EYESCAN_CFG12 = 32'h00000000,
  parameter [31:0] CH0_EYESCAN_CFG13 = 32'h00000000,
  parameter [31:0] CH0_EYESCAN_CFG14 = 32'h00000000,
  parameter [31:0] CH0_EYESCAN_CFG15 = 32'h00000000,
  parameter [31:0] CH0_EYESCAN_CFG16 = 32'h00000000,
  parameter [31:0] CH0_EYESCAN_CFG2 = 32'h00000000,
  parameter [31:0] CH0_EYESCAN_CFG3 = 32'h00000000,
  parameter [31:0] CH0_EYESCAN_CFG4 = 32'h00000000,
  parameter [31:0] CH0_EYESCAN_CFG5 = 32'h00000000,
  parameter [31:0] CH0_EYESCAN_CFG6 = 32'h00000000,
  parameter [31:0] CH0_EYESCAN_CFG7 = 32'h00000000,
  parameter [31:0] CH0_EYESCAN_CFG8 = 32'h00000000,
  parameter [31:0] CH0_EYESCAN_CFG9 = 32'h00000000,
  parameter [31:0] CH0_FABRIC_INTF_CFG0 = 32'h00000000,
  parameter [31:0] CH0_FABRIC_INTF_CFG1 = 32'h00000400,
  parameter [31:0] CH0_FABRIC_INTF_CFG2 = 32'h00000000,
  parameter [31:0] CH0_FABRIC_INTF_CFG3 = 32'h00000000,
  parameter [31:0] CH0_FABRIC_INTF_CFG4 = 32'h00000000,
  parameter [31:0] CH0_FABRIC_INTF_CFG5 = 32'h00000000,
  parameter [0:0] CH0_INSTANTIATED = 1'b1,
  parameter [31:0] CH0_MONITOR_CFG = 32'h00000000,
  parameter [31:0] CH0_PIPE_CTRL_CFG0 = 32'h00040000,
  parameter [31:0] CH0_PIPE_CTRL_CFG1 = 32'h00000290,
  parameter [31:0] CH0_PIPE_CTRL_CFG10 = 32'h051FFFEF,
  parameter [31:0] CH0_PIPE_CTRL_CFG2 = 32'h00978000,
  parameter [31:0] CH0_PIPE_CTRL_CFG3 = 32'h00125F2F,
  parameter [31:0] CH0_PIPE_CTRL_CFG4 = 32'h00440000,
  parameter [31:0] CH0_PIPE_CTRL_CFG5 = 32'h00000000,
  parameter [31:0] CH0_PIPE_CTRL_CFG6 = 32'h3C000000,
  parameter [31:0] CH0_PIPE_CTRL_CFG7 = 32'h00000000,
  parameter [31:0] CH0_PIPE_CTRL_CFG8 = 32'h02600000,
  parameter [31:0] CH0_PIPE_CTRL_CFG9 = 32'h00000000,
  parameter [31:0] CH0_PIPE_TX_EQ_CFG0 = 32'h085164CE,
  parameter [31:0] CH0_PIPE_TX_EQ_CFG1 = 32'h08512340,
  parameter [31:0] CH0_PIPE_TX_EQ_CFG2 = 32'h00002040,
  parameter [31:0] CH0_PIPE_TX_EQ_CFG3 = 32'h00000000,
  parameter [31:0] CH0_RESET_BYP_HDSHK_CFG = 32'h00FF0000,
  parameter [31:0] CH0_RESET_CFG = 32'h08100005,
  parameter [31:0] CH0_RESET_LOOPER_ID_CFG = 32'h00204060,
  parameter [31:0] CH0_RESET_LOOP_ID_CFG0 = 32'h00000210,
  parameter [31:0] CH0_RESET_LOOP_ID_CFG1 = 32'h06543210,
  parameter [31:0] CH0_RESET_LOOP_ID_CFG2 = 32'h00004321,
  parameter [31:0] CH0_RESET_TIME_CFG0 = 32'h02108401,
  parameter [31:0] CH0_RESET_TIME_CFG1 = 32'h02108421,
  parameter [31:0] CH0_RESET_TIME_CFG2 = 32'h02108421,
  parameter [31:0] CH0_RESET_TIME_CFG3 = 32'h4A102421,
  parameter real CH0_RXOUTCLK_FREQ = 322.2656250,
  parameter real CH0_RXOUTCLK_REF_FREQ = 156.2500000,
  parameter CH0_RXOUTCLK_REF_SOURCE = "HSCLK0_LCPLLGTGREFCLK",
  parameter [31:0] CH0_RX_CDR_CFG0 = 32'h00000001,
  parameter [31:0] CH0_RX_CDR_CFG1 = 32'h60000100,
  parameter [31:0] CH0_RX_CDR_CFG2 = 32'h08009164,
  parameter [31:0] CH0_RX_CDR_CFG3 = 32'h000B5CF6,
  parameter [31:0] CH0_RX_CDR_CFG4 = 32'h043C3000,
  parameter [31:0] CH0_RX_CRC_CFG0 = 32'h00007880,
  parameter [31:0] CH0_RX_CRC_CFG1 = 32'h1E1E1E1E,
  parameter [31:0] CH0_RX_CRC_CFG2 = 32'h1E1E1E1E,
  parameter [31:0] CH0_RX_CRC_CFG3 = 32'hFFFFFFFF,
  parameter [31:0] CH0_RX_CTLE_CFG0 = 32'h01DC0100,
  parameter [31:0] CH0_RX_CTLE_CFG1 = 32'h40000000,
  parameter [31:0] CH0_RX_DACI2V_CFG0 = 32'h04008ECA,
  parameter real CH0_RX_DATA_RATE = 8.00,
  parameter [31:0] CH0_RX_DFE_CFG0 = 32'hF0025408,
  parameter [31:0] CH0_RX_ELASTIC_BUF_CFG0 = 32'h00000000,
  parameter [31:0] CH0_RX_ELASTIC_BUF_CFG1 = 32'h00000470,
  parameter [31:0] CH0_RX_ELASTIC_BUF_CFG2 = 32'h50040000,
  parameter [31:0] CH0_RX_ELASTIC_BUF_CFG3 = 32'hC1E40100,
  parameter [31:0] CH0_RX_ELASTIC_BUF_CFG4 = 32'h000005F1,
  parameter [31:0] CH0_RX_ELASTIC_BUF_CFG5 = 32'h10040000,
  parameter [31:0] CH0_RX_ELASTIC_BUF_CFG6 = 32'hFFF40100,
  parameter [31:0] CH0_RX_ELASTIC_BUF_CFG7 = 32'h0400001C,
  parameter [31:0] CH0_RX_ELASTIC_BUF_CFG8 = 32'h001F0590,
  parameter [31:0] CH0_RX_ELASTIC_BUF_CFG9 = 32'h001F0590,
  parameter [31:0] CH0_RX_MISC_CFG0 = 32'h00000000,
  parameter [31:0] CH0_RX_OOB_CFG0 = 32'h2454C204,
  parameter [31:0] CH0_RX_OOB_CFG1 = 32'h010241C4,
  parameter [31:0] CH0_RX_PAD_CFG0 = 32'h00000000,
  parameter [31:0] CH0_RX_PAD_CFG1 = 32'h1044497A,
  parameter [31:0] CH0_RX_PCS_CFG0 = 32'h00000000,
  parameter [31:0] CH0_RX_PCS_CFG1 = 32'h00000000,
  parameter [31:0] CH0_RX_PCS_CFG2 = 32'h00000000,
  parameter [31:0] CH0_RX_PCS_CFG3 = 32'h1C190F00,
  parameter [31:0] CH0_RX_PCS_CFG4 = 32'hC0500802,
  parameter [31:0] CH0_RX_PHALIGN_CFG0 = 32'h00080003,
  parameter [31:0] CH0_RX_PHALIGN_CFG1 = 32'h00838000,
  parameter [31:0] CH0_RX_PHALIGN_CFG2 = 32'h01E1EA00,
  parameter [31:0] CH0_RX_PHALIGN_CFG3 = 32'h00038000,
  parameter [31:0] CH0_RX_PHALIGN_CFG4 = 32'h0000020A,
  parameter [31:0] CH0_RX_PHALIGN_CFG5 = 32'h00020000,
  parameter CH0_SIM_MODE = "FAST",
  parameter CH0_SIM_RECEIVER_DETECT_PASS = "TRUE",
  parameter CH0_SIM_RESET_SPEEDUP = "TRUE",
  parameter CH0_SIM_TX_EIDLE_DRIVE_LEVEL = "Z",
  parameter real CH0_TXOUTCLK_FREQ = 322.2656250,
  parameter real CH0_TXOUTCLK_REF_FREQ = 156.2500000,
  parameter CH0_TXOUTCLK_REF_SOURCE = "HSCLK0_LCPLLGTGREFCLK",
  parameter [31:0] CH0_TX_10G_CFG0 = 32'h00000000,
  parameter [31:0] CH0_TX_10G_CFG1 = 32'h40000000,
  parameter [31:0] CH0_TX_10G_CFG2 = 32'h00000000,
  parameter [31:0] CH0_TX_10G_CFG3 = 32'h00000000,
  parameter [31:0] CH0_TX_ANA_CFG0 = 32'h000000D0,
  parameter [31:0] CH0_TX_CRC_CFG0 = 32'h00007800,
  parameter [31:0] CH0_TX_CRC_CFG1 = 32'h1E1E1E1E,
  parameter [31:0] CH0_TX_CRC_CFG2 = 32'h1E1E1E1E,
  parameter [31:0] CH0_TX_CRC_CFG3 = 32'hFFFFFFFF,
  parameter real CH0_TX_DATA_RATE = 8.00,
  parameter [31:0] CH0_TX_DRV_CFG0 = 32'h00000000,
  parameter [31:0] CH0_TX_DRV_CFG1 = 32'h00001800,
  parameter [31:0] CH0_TX_PCS_CFG0 = 32'h00000000,
  parameter [31:0] CH0_TX_PCS_CFG1 = 32'h2835557C,
  parameter [31:0] CH0_TX_PCS_CFG2 = 32'h1555F2AA,
  parameter [31:0] CH0_TX_PCS_CFG3 = 32'h000AAA83,
  parameter [31:0] CH0_TX_PHALIGN_CFG0 = 32'h00080000,
  parameter [31:0] CH0_TX_PHALIGN_CFG1 = 32'h00C47000,
  parameter [31:0] CH0_TX_PHALIGN_CFG2 = 32'h00000038,
  parameter [31:0] CH0_TX_PHALIGN_CFG3 = 32'h00000000,
  parameter [31:0] CH0_TX_PHALIGN_CFG4 = 32'h180000E0,
  parameter [31:0] CH0_TX_PHALIGN_CFG5 = 32'h00000000,
  parameter [31:0] CH0_TX_PIPPM_CFG = 32'h00000000,
  parameter [31:0] CH0_TX_SER_CFG0 = 32'h00000000,
  parameter [31:0] CH1_ADAPT_APT_CFG = 32'h00000000,
  parameter [31:0] CH1_ADAPT_CAL_CFG = 32'h01E76400,
  parameter [31:0] CH1_ADAPT_DFE_CFG = 32'h00000000,
  parameter [31:0] CH1_ADAPT_GC_CFG0 = 32'h009010E8,
  parameter [31:0] CH1_ADAPT_GC_CFG1 = 32'h14A007E0,
  parameter [31:0] CH1_ADAPT_GC_CFG2 = 32'h002000E8,
  parameter [31:0] CH1_ADAPT_GC_CFG3 = 32'h14A003E0,
  parameter [31:0] CH1_ADAPT_GEN_CFG0 = 32'h00000000,
  parameter [31:0] CH1_ADAPT_GEN_CFG1 = 32'h00000000,
  parameter [31:0] CH1_ADAPT_GEN_CFG2 = 32'h80000000,
  parameter [31:0] CH1_ADAPT_GEN_CFG3 = 32'h10000000,
  parameter [31:0] CH1_ADAPT_H01_CFG = 32'h03A003A0,
  parameter [31:0] CH1_ADAPT_H23_CFG = 32'h03A003A0,
  parameter [31:0] CH1_ADAPT_H45_CFG = 32'h03A003A0,
  parameter [31:0] CH1_ADAPT_H67_CFG = 32'h03A003A0,
  parameter [31:0] CH1_ADAPT_H89_CFG = 32'h03A003A0,
  parameter [31:0] CH1_ADAPT_HAB_CFG = 32'h03A003A0,
  parameter [31:0] CH1_ADAPT_HCD_CFG = 32'h03A003A0,
  parameter [31:0] CH1_ADAPT_HEF_CFG = 32'h03A003A0,
  parameter [31:0] CH1_ADAPT_KH_CFG0 = 32'h10087BBF,
  parameter [31:0] CH1_ADAPT_KH_CFG1 = 32'h00000000,
  parameter [31:0] CH1_ADAPT_KH_CFG2 = 32'h00003BA0,
  parameter [31:0] CH1_ADAPT_KH_CFG3 = 32'h00000000,
  parameter [31:0] CH1_ADAPT_KH_CFG4 = 32'h00007BA0,
  parameter [31:0] CH1_ADAPT_KH_CFG5 = 32'h00000000,
  parameter [31:0] CH1_ADAPT_KL_CFG0 = 32'h00007BA0,
  parameter [31:0] CH1_ADAPT_KL_CFG1 = 32'h00003BA0,
  parameter [31:0] CH1_ADAPT_LCK_CFG0 = 32'h00004000,
  parameter [31:0] CH1_ADAPT_LCK_CFG1 = 32'h00004000,
  parameter [31:0] CH1_ADAPT_LCK_CFG2 = 32'h00000000,
  parameter [31:0] CH1_ADAPT_LCK_CFG3 = 32'h00000000,
  parameter [31:0] CH1_ADAPT_LOP_CFG = 32'hEE000660,
  parameter [31:0] CH1_ADAPT_OS_CFG = 32'h800003A0,
  parameter [31:0] CH1_CHCLK_ILO_CFG = 32'h00600033,
  parameter [31:0] CH1_CHCLK_MISC_CFG = 32'h78805C1F,
  parameter [31:0] CH1_CHCLK_RSV_CFG = 32'h00000000,
  parameter [31:0] CH1_CHCLK_RXCAL_CFG = 32'h083C4000,
  parameter [31:0] CH1_CHCLK_RXCAL_CFG1 = 32'h00000000,
  parameter [31:0] CH1_CHCLK_RXCAL_CFG2 = 32'h00000000,
  parameter [31:0] CH1_CHCLK_RXPI_CFG = 32'h00160830,
  parameter [31:0] CH1_CHCLK_TXCAL_CFG = 32'h00400020,
  parameter [31:0] CH1_CHCLK_TXPI_CFG0 = 32'h0047083F,
  parameter [31:0] CH1_CHL_RSV_CFG0 = 32'hC6000009,
  parameter [31:0] CH1_CHL_RSV_CFG1 = 32'h00000000,
  parameter [31:0] CH1_CHL_RSV_CFG2 = 32'h00000000,
  parameter [31:0] CH1_CHL_RSV_CFG3 = 32'h00000000,
  parameter [31:0] CH1_CHL_RSV_CFG4 = 32'h00000000,
  parameter [31:0] CH1_DA_CFG = 32'h00000000,
  parameter [31:0] CH1_EYESCAN_CFG0 = 32'h00000800,
  parameter [31:0] CH1_EYESCAN_CFG1 = 32'h00000000,
  parameter [31:0] CH1_EYESCAN_CFG10 = 32'h00000000,
  parameter [31:0] CH1_EYESCAN_CFG11 = 32'h00000000,
  parameter [31:0] CH1_EYESCAN_CFG12 = 32'h00000000,
  parameter [31:0] CH1_EYESCAN_CFG13 = 32'h00000000,
  parameter [31:0] CH1_EYESCAN_CFG14 = 32'h00000000,
  parameter [31:0] CH1_EYESCAN_CFG15 = 32'h00000000,
  parameter [31:0] CH1_EYESCAN_CFG16 = 32'h00000000,
  parameter [31:0] CH1_EYESCAN_CFG2 = 32'h00000000,
  parameter [31:0] CH1_EYESCAN_CFG3 = 32'h00000000,
  parameter [31:0] CH1_EYESCAN_CFG4 = 32'h00000000,
  parameter [31:0] CH1_EYESCAN_CFG5 = 32'h00000000,
  parameter [31:0] CH1_EYESCAN_CFG6 = 32'h00000000,
  parameter [31:0] CH1_EYESCAN_CFG7 = 32'h00000000,
  parameter [31:0] CH1_EYESCAN_CFG8 = 32'h00000000,
  parameter [31:0] CH1_EYESCAN_CFG9 = 32'h00000000,
  parameter [31:0] CH1_FABRIC_INTF_CFG0 = 32'h00000000,
  parameter [31:0] CH1_FABRIC_INTF_CFG1 = 32'h00000400,
  parameter [31:0] CH1_FABRIC_INTF_CFG2 = 32'h00000000,
  parameter [31:0] CH1_FABRIC_INTF_CFG3 = 32'h00000000,
  parameter [31:0] CH1_FABRIC_INTF_CFG4 = 32'h00000000,
  parameter [31:0] CH1_FABRIC_INTF_CFG5 = 32'h00000000,
  parameter [0:0] CH1_INSTANTIATED = 1'b1,
  parameter [31:0] CH1_MONITOR_CFG = 32'h00000000,
  parameter [31:0] CH1_PIPE_CTRL_CFG0 = 32'h00040000,
  parameter [31:0] CH1_PIPE_CTRL_CFG1 = 32'h00000290,
  parameter [31:0] CH1_PIPE_CTRL_CFG10 = 32'h051FFFEF,
  parameter [31:0] CH1_PIPE_CTRL_CFG2 = 32'h00978000,
  parameter [31:0] CH1_PIPE_CTRL_CFG3 = 32'h00125F2F,
  parameter [31:0] CH1_PIPE_CTRL_CFG4 = 32'h00440000,
  parameter [31:0] CH1_PIPE_CTRL_CFG5 = 32'h00000000,
  parameter [31:0] CH1_PIPE_CTRL_CFG6 = 32'h3C000000,
  parameter [31:0] CH1_PIPE_CTRL_CFG7 = 32'h00000000,
  parameter [31:0] CH1_PIPE_CTRL_CFG8 = 32'h02600000,
  parameter [31:0] CH1_PIPE_CTRL_CFG9 = 32'h00000000,
  parameter [31:0] CH1_PIPE_TX_EQ_CFG0 = 32'h085164CE,
  parameter [31:0] CH1_PIPE_TX_EQ_CFG1 = 32'h08512340,
  parameter [31:0] CH1_PIPE_TX_EQ_CFG2 = 32'h00002040,
  parameter [31:0] CH1_PIPE_TX_EQ_CFG3 = 32'h00000000,
  parameter [31:0] CH1_RESET_BYP_HDSHK_CFG = 32'h00FF0000,
  parameter [31:0] CH1_RESET_CFG = 32'h08100005,
  parameter [31:0] CH1_RESET_LOOPER_ID_CFG = 32'h00204060,
  parameter [31:0] CH1_RESET_LOOP_ID_CFG0 = 32'h00000210,
  parameter [31:0] CH1_RESET_LOOP_ID_CFG1 = 32'h06543210,
  parameter [31:0] CH1_RESET_LOOP_ID_CFG2 = 32'h00004321,
  parameter [31:0] CH1_RESET_TIME_CFG0 = 32'h02108401,
  parameter [31:0] CH1_RESET_TIME_CFG1 = 32'h02108421,
  parameter [31:0] CH1_RESET_TIME_CFG2 = 32'h02108421,
  parameter [31:0] CH1_RESET_TIME_CFG3 = 32'h4A102421,
  parameter real CH1_RXOUTCLK_FREQ = 322.2656250,
  parameter real CH1_RXOUTCLK_REF_FREQ = 156.2500000,
  parameter CH1_RXOUTCLK_REF_SOURCE = "HSCLK0_LCPLLGTGREFCLK",
  parameter [31:0] CH1_RX_CDR_CFG0 = 32'h00000001,
  parameter [31:0] CH1_RX_CDR_CFG1 = 32'h60000100,
  parameter [31:0] CH1_RX_CDR_CFG2 = 32'h08009164,
  parameter [31:0] CH1_RX_CDR_CFG3 = 32'h000B5CF6,
  parameter [31:0] CH1_RX_CDR_CFG4 = 32'h043C3000,
  parameter [31:0] CH1_RX_CRC_CFG0 = 32'h00007880,
  parameter [31:0] CH1_RX_CRC_CFG1 = 32'h1E1E1E1E,
  parameter [31:0] CH1_RX_CRC_CFG2 = 32'h1E1E1E1E,
  parameter [31:0] CH1_RX_CRC_CFG3 = 32'hFFFFFFFF,
  parameter [31:0] CH1_RX_CTLE_CFG0 = 32'h01DC0100,
  parameter [31:0] CH1_RX_CTLE_CFG1 = 32'h40000000,
  parameter [31:0] CH1_RX_DACI2V_CFG0 = 32'h04008ECA,
  parameter real CH1_RX_DATA_RATE = 8.00,
  parameter [31:0] CH1_RX_DFE_CFG0 = 32'hF0025408,
  parameter [31:0] CH1_RX_ELASTIC_BUF_CFG0 = 32'h00000000,
  parameter [31:0] CH1_RX_ELASTIC_BUF_CFG1 = 32'h00000470,
  parameter [31:0] CH1_RX_ELASTIC_BUF_CFG2 = 32'h50040000,
  parameter [31:0] CH1_RX_ELASTIC_BUF_CFG3 = 32'hC1E40100,
  parameter [31:0] CH1_RX_ELASTIC_BUF_CFG4 = 32'h000005F1,
  parameter [31:0] CH1_RX_ELASTIC_BUF_CFG5 = 32'h10040000,
  parameter [31:0] CH1_RX_ELASTIC_BUF_CFG6 = 32'hFFF40100,
  parameter [31:0] CH1_RX_ELASTIC_BUF_CFG7 = 32'h0400001C,
  parameter [31:0] CH1_RX_ELASTIC_BUF_CFG8 = 32'h001F0590,
  parameter [31:0] CH1_RX_ELASTIC_BUF_CFG9 = 32'h001F0590,
  parameter [31:0] CH1_RX_MISC_CFG0 = 32'h00000000,
  parameter [31:0] CH1_RX_OOB_CFG0 = 32'h2454C204,
  parameter [31:0] CH1_RX_OOB_CFG1 = 32'h010241C4,
  parameter [31:0] CH1_RX_PAD_CFG0 = 32'h00000000,
  parameter [31:0] CH1_RX_PAD_CFG1 = 32'h1044497A,
  parameter [31:0] CH1_RX_PCS_CFG0 = 32'h00000000,
  parameter [31:0] CH1_RX_PCS_CFG1 = 32'h00000000,
  parameter [31:0] CH1_RX_PCS_CFG2 = 32'h00000000,
  parameter [31:0] CH1_RX_PCS_CFG3 = 32'h1C190F00,
  parameter [31:0] CH1_RX_PCS_CFG4 = 32'hC0500802,
  parameter [31:0] CH1_RX_PHALIGN_CFG0 = 32'h00080003,
  parameter [31:0] CH1_RX_PHALIGN_CFG1 = 32'h00838000,
  parameter [31:0] CH1_RX_PHALIGN_CFG2 = 32'h01E1EA00,
  parameter [31:0] CH1_RX_PHALIGN_CFG3 = 32'h00038000,
  parameter [31:0] CH1_RX_PHALIGN_CFG4 = 32'h0000020A,
  parameter [31:0] CH1_RX_PHALIGN_CFG5 = 32'h00020000,
  parameter CH1_SIM_MODE = "FAST",
  parameter CH1_SIM_RECEIVER_DETECT_PASS = "TRUE",
  parameter CH1_SIM_RESET_SPEEDUP = "TRUE",
  parameter CH1_SIM_TX_EIDLE_DRIVE_LEVEL = "Z",
  parameter real CH1_TXOUTCLK_FREQ = 322.2656250,
  parameter real CH1_TXOUTCLK_REF_FREQ = 156.2500000,
  parameter CH1_TXOUTCLK_REF_SOURCE = "HSCLK0_LCPLLGTGREFCLK",
  parameter [31:0] CH1_TX_10G_CFG0 = 32'h00000000,
  parameter [31:0] CH1_TX_10G_CFG1 = 32'h40000000,
  parameter [31:0] CH1_TX_10G_CFG2 = 32'h00000000,
  parameter [31:0] CH1_TX_10G_CFG3 = 32'h00000000,
  parameter [31:0] CH1_TX_ANA_CFG0 = 32'h000000D0,
  parameter [31:0] CH1_TX_CRC_CFG0 = 32'h00007800,
  parameter [31:0] CH1_TX_CRC_CFG1 = 32'h1E1E1E1E,
  parameter [31:0] CH1_TX_CRC_CFG2 = 32'h1E1E1E1E,
  parameter [31:0] CH1_TX_CRC_CFG3 = 32'hFFFFFFFF,
  parameter real CH1_TX_DATA_RATE = 8.00,
  parameter [31:0] CH1_TX_DRV_CFG0 = 32'h00000000,
  parameter [31:0] CH1_TX_DRV_CFG1 = 32'h00001800,
  parameter [31:0] CH1_TX_PCS_CFG0 = 32'h00000000,
  parameter [31:0] CH1_TX_PCS_CFG1 = 32'h2835557C,
  parameter [31:0] CH1_TX_PCS_CFG2 = 32'h1555F2AA,
  parameter [31:0] CH1_TX_PCS_CFG3 = 32'h000AAA83,
  parameter [31:0] CH1_TX_PHALIGN_CFG0 = 32'h00080000,
  parameter [31:0] CH1_TX_PHALIGN_CFG1 = 32'h00C47000,
  parameter [31:0] CH1_TX_PHALIGN_CFG2 = 32'h00000038,
  parameter [31:0] CH1_TX_PHALIGN_CFG3 = 32'h00000000,
  parameter [31:0] CH1_TX_PHALIGN_CFG4 = 32'h180000E0,
  parameter [31:0] CH1_TX_PHALIGN_CFG5 = 32'h00000000,
  parameter [31:0] CH1_TX_PIPPM_CFG = 32'h00000000,
  parameter [31:0] CH1_TX_SER_CFG0 = 32'h00000000,
  parameter [31:0] CH2_ADAPT_APT_CFG = 32'h00000000,
  parameter [31:0] CH2_ADAPT_CAL_CFG = 32'h01E76400,
  parameter [31:0] CH2_ADAPT_DFE_CFG = 32'h00000000,
  parameter [31:0] CH2_ADAPT_GC_CFG0 = 32'h009010E8,
  parameter [31:0] CH2_ADAPT_GC_CFG1 = 32'h14A007E0,
  parameter [31:0] CH2_ADAPT_GC_CFG2 = 32'h002000E8,
  parameter [31:0] CH2_ADAPT_GC_CFG3 = 32'h14A003E0,
  parameter [31:0] CH2_ADAPT_GEN_CFG0 = 32'h00000000,
  parameter [31:0] CH2_ADAPT_GEN_CFG1 = 32'h00000000,
  parameter [31:0] CH2_ADAPT_GEN_CFG2 = 32'h80000000,
  parameter [31:0] CH2_ADAPT_GEN_CFG3 = 32'h10000000,
  parameter [31:0] CH2_ADAPT_H01_CFG = 32'h03A003A0,
  parameter [31:0] CH2_ADAPT_H23_CFG = 32'h03A003A0,
  parameter [31:0] CH2_ADAPT_H45_CFG = 32'h03A003A0,
  parameter [31:0] CH2_ADAPT_H67_CFG = 32'h03A003A0,
  parameter [31:0] CH2_ADAPT_H89_CFG = 32'h03A003A0,
  parameter [31:0] CH2_ADAPT_HAB_CFG = 32'h03A003A0,
  parameter [31:0] CH2_ADAPT_HCD_CFG = 32'h03A003A0,
  parameter [31:0] CH2_ADAPT_HEF_CFG = 32'h03A003A0,
  parameter [31:0] CH2_ADAPT_KH_CFG0 = 32'h10087BBF,
  parameter [31:0] CH2_ADAPT_KH_CFG1 = 32'h00000000,
  parameter [31:0] CH2_ADAPT_KH_CFG2 = 32'h00003BA0,
  parameter [31:0] CH2_ADAPT_KH_CFG3 = 32'h00000000,
  parameter [31:0] CH2_ADAPT_KH_CFG4 = 32'h00007BA0,
  parameter [31:0] CH2_ADAPT_KH_CFG5 = 32'h00000000,
  parameter [31:0] CH2_ADAPT_KL_CFG0 = 32'h00007BA0,
  parameter [31:0] CH2_ADAPT_KL_CFG1 = 32'h00003BA0,
  parameter [31:0] CH2_ADAPT_LCK_CFG0 = 32'h00004000,
  parameter [31:0] CH2_ADAPT_LCK_CFG1 = 32'h00004000,
  parameter [31:0] CH2_ADAPT_LCK_CFG2 = 32'h00000000,
  parameter [31:0] CH2_ADAPT_LCK_CFG3 = 32'h00000000,
  parameter [31:0] CH2_ADAPT_LOP_CFG = 32'hEE000660,
  parameter [31:0] CH2_ADAPT_OS_CFG = 32'h800003A0,
  parameter [31:0] CH2_CHCLK_ILO_CFG = 32'h00600033,
  parameter [31:0] CH2_CHCLK_MISC_CFG = 32'h78805C1F,
  parameter [31:0] CH2_CHCLK_RSV_CFG = 32'h00000000,
  parameter [31:0] CH2_CHCLK_RXCAL_CFG = 32'h083C4000,
  parameter [31:0] CH2_CHCLK_RXCAL_CFG1 = 32'h00000000,
  parameter [31:0] CH2_CHCLK_RXCAL_CFG2 = 32'h00000000,
  parameter [31:0] CH2_CHCLK_RXPI_CFG = 32'h00160830,
  parameter [31:0] CH2_CHCLK_TXCAL_CFG = 32'h00400020,
  parameter [31:0] CH2_CHCLK_TXPI_CFG0 = 32'h0047083F,
  parameter [31:0] CH2_CHL_RSV_CFG0 = 32'hC6000009,
  parameter [31:0] CH2_CHL_RSV_CFG1 = 32'h00000000,
  parameter [31:0] CH2_CHL_RSV_CFG2 = 32'h00000000,
  parameter [31:0] CH2_CHL_RSV_CFG3 = 32'h00000000,
  parameter [31:0] CH2_CHL_RSV_CFG4 = 32'h00000000,
  parameter [31:0] CH2_DA_CFG = 32'h00000000,
  parameter [31:0] CH2_EYESCAN_CFG0 = 32'h00000800,
  parameter [31:0] CH2_EYESCAN_CFG1 = 32'h00000000,
  parameter [31:0] CH2_EYESCAN_CFG10 = 32'h00000000,
  parameter [31:0] CH2_EYESCAN_CFG11 = 32'h00000000,
  parameter [31:0] CH2_EYESCAN_CFG12 = 32'h00000000,
  parameter [31:0] CH2_EYESCAN_CFG13 = 32'h00000000,
  parameter [31:0] CH2_EYESCAN_CFG14 = 32'h00000000,
  parameter [31:0] CH2_EYESCAN_CFG15 = 32'h00000000,
  parameter [31:0] CH2_EYESCAN_CFG16 = 32'h00000000,
  parameter [31:0] CH2_EYESCAN_CFG2 = 32'h00000000,
  parameter [31:0] CH2_EYESCAN_CFG3 = 32'h00000000,
  parameter [31:0] CH2_EYESCAN_CFG4 = 32'h00000000,
  parameter [31:0] CH2_EYESCAN_CFG5 = 32'h00000000,
  parameter [31:0] CH2_EYESCAN_CFG6 = 32'h00000000,
  parameter [31:0] CH2_EYESCAN_CFG7 = 32'h00000000,
  parameter [31:0] CH2_EYESCAN_CFG8 = 32'h00000000,
  parameter [31:0] CH2_EYESCAN_CFG9 = 32'h00000000,
  parameter [31:0] CH2_FABRIC_INTF_CFG0 = 32'h00000000,
  parameter [31:0] CH2_FABRIC_INTF_CFG1 = 32'h00000400,
  parameter [31:0] CH2_FABRIC_INTF_CFG2 = 32'h00000000,
  parameter [31:0] CH2_FABRIC_INTF_CFG3 = 32'h00000000,
  parameter [31:0] CH2_FABRIC_INTF_CFG4 = 32'h00000000,
  parameter [31:0] CH2_FABRIC_INTF_CFG5 = 32'h00000000,
  parameter [0:0] CH2_INSTANTIATED = 1'b1,
  parameter [31:0] CH2_MONITOR_CFG = 32'h00000000,
  parameter [31:0] CH2_PIPE_CTRL_CFG0 = 32'h00040000,
  parameter [31:0] CH2_PIPE_CTRL_CFG1 = 32'h00000290,
  parameter [31:0] CH2_PIPE_CTRL_CFG10 = 32'h051FFFEF,
  parameter [31:0] CH2_PIPE_CTRL_CFG2 = 32'h00978000,
  parameter [31:0] CH2_PIPE_CTRL_CFG3 = 32'h00125F2F,
  parameter [31:0] CH2_PIPE_CTRL_CFG4 = 32'h00440000,
  parameter [31:0] CH2_PIPE_CTRL_CFG5 = 32'h00000000,
  parameter [31:0] CH2_PIPE_CTRL_CFG6 = 32'h3C000000,
  parameter [31:0] CH2_PIPE_CTRL_CFG7 = 32'h00000000,
  parameter [31:0] CH2_PIPE_CTRL_CFG8 = 32'h02600000,
  parameter [31:0] CH2_PIPE_CTRL_CFG9 = 32'h00000000,
  parameter [31:0] CH2_PIPE_TX_EQ_CFG0 = 32'h085164CE,
  parameter [31:0] CH2_PIPE_TX_EQ_CFG1 = 32'h08512340,
  parameter [31:0] CH2_PIPE_TX_EQ_CFG2 = 32'h00002040,
  parameter [31:0] CH2_PIPE_TX_EQ_CFG3 = 32'h00000000,
  parameter [31:0] CH2_RESET_BYP_HDSHK_CFG = 32'h00FF0000,
  parameter [31:0] CH2_RESET_CFG = 32'h08100005,
  parameter [31:0] CH2_RESET_LOOPER_ID_CFG = 32'h00204060,
  parameter [31:0] CH2_RESET_LOOP_ID_CFG0 = 32'h00000210,
  parameter [31:0] CH2_RESET_LOOP_ID_CFG1 = 32'h06543210,
  parameter [31:0] CH2_RESET_LOOP_ID_CFG2 = 32'h00004321,
  parameter [31:0] CH2_RESET_TIME_CFG0 = 32'h02108401,
  parameter [31:0] CH2_RESET_TIME_CFG1 = 32'h02108421,
  parameter [31:0] CH2_RESET_TIME_CFG2 = 32'h02108421,
  parameter [31:0] CH2_RESET_TIME_CFG3 = 32'h4A102421,
  parameter real CH2_RXOUTCLK_FREQ = 322.2656250,
  parameter real CH2_RXOUTCLK_REF_FREQ = 156.2500000,
  parameter CH2_RXOUTCLK_REF_SOURCE = "HSCLK0_LCPLLGTGREFCLK",
  parameter [31:0] CH2_RX_CDR_CFG0 = 32'h00000001,
  parameter [31:0] CH2_RX_CDR_CFG1 = 32'h60000100,
  parameter [31:0] CH2_RX_CDR_CFG2 = 32'h08009164,
  parameter [31:0] CH2_RX_CDR_CFG3 = 32'h000B5CF6,
  parameter [31:0] CH2_RX_CDR_CFG4 = 32'h043C3000,
  parameter [31:0] CH2_RX_CRC_CFG0 = 32'h00007880,
  parameter [31:0] CH2_RX_CRC_CFG1 = 32'h1E1E1E1E,
  parameter [31:0] CH2_RX_CRC_CFG2 = 32'h1E1E1E1E,
  parameter [31:0] CH2_RX_CRC_CFG3 = 32'hFFFFFFFF,
  parameter [31:0] CH2_RX_CTLE_CFG0 = 32'h01DC0100,
  parameter [31:0] CH2_RX_CTLE_CFG1 = 32'h40000000,
  parameter [31:0] CH2_RX_DACI2V_CFG0 = 32'h04008ECA,
  parameter real CH2_RX_DATA_RATE = 8.00,
  parameter [31:0] CH2_RX_DFE_CFG0 = 32'hF0025408,
  parameter [31:0] CH2_RX_ELASTIC_BUF_CFG0 = 32'h00000000,
  parameter [31:0] CH2_RX_ELASTIC_BUF_CFG1 = 32'h00000470,
  parameter [31:0] CH2_RX_ELASTIC_BUF_CFG2 = 32'h50040000,
  parameter [31:0] CH2_RX_ELASTIC_BUF_CFG3 = 32'hC1E40100,
  parameter [31:0] CH2_RX_ELASTIC_BUF_CFG4 = 32'h000005F1,
  parameter [31:0] CH2_RX_ELASTIC_BUF_CFG5 = 32'h10040000,
  parameter [31:0] CH2_RX_ELASTIC_BUF_CFG6 = 32'hFFF40100,
  parameter [31:0] CH2_RX_ELASTIC_BUF_CFG7 = 32'h0400001C,
  parameter [31:0] CH2_RX_ELASTIC_BUF_CFG8 = 32'h001F0590,
  parameter [31:0] CH2_RX_ELASTIC_BUF_CFG9 = 32'h001F0590,
  parameter [31:0] CH2_RX_MISC_CFG0 = 32'h00000000,
  parameter [31:0] CH2_RX_OOB_CFG0 = 32'h2454C204,
  parameter [31:0] CH2_RX_OOB_CFG1 = 32'h010241C4,
  parameter [31:0] CH2_RX_PAD_CFG0 = 32'h00000000,
  parameter [31:0] CH2_RX_PAD_CFG1 = 32'h1044497A,
  parameter [31:0] CH2_RX_PCS_CFG0 = 32'h00000000,
  parameter [31:0] CH2_RX_PCS_CFG1 = 32'h00000000,
  parameter [31:0] CH2_RX_PCS_CFG2 = 32'h00000000,
  parameter [31:0] CH2_RX_PCS_CFG3 = 32'h1C190F00,
  parameter [31:0] CH2_RX_PCS_CFG4 = 32'hC0500802,
  parameter [31:0] CH2_RX_PHALIGN_CFG0 = 32'h00080003,
  parameter [31:0] CH2_RX_PHALIGN_CFG1 = 32'h00838000,
  parameter [31:0] CH2_RX_PHALIGN_CFG2 = 32'h01E1EA00,
  parameter [31:0] CH2_RX_PHALIGN_CFG3 = 32'h00038000,
  parameter [31:0] CH2_RX_PHALIGN_CFG4 = 32'h0000020A,
  parameter [31:0] CH2_RX_PHALIGN_CFG5 = 32'h00020000,
  parameter CH2_SIM_MODE = "FAST",
  parameter CH2_SIM_RECEIVER_DETECT_PASS = "TRUE",
  parameter CH2_SIM_RESET_SPEEDUP = "TRUE",
  parameter CH2_SIM_TX_EIDLE_DRIVE_LEVEL = "Z",
  parameter real CH2_TXOUTCLK_FREQ = 322.2656250,
  parameter real CH2_TXOUTCLK_REF_FREQ = 156.2500000,
  parameter CH2_TXOUTCLK_REF_SOURCE = "HSCLK0_LCPLLGTGREFCLK",
  parameter [31:0] CH2_TX_10G_CFG0 = 32'h00000000,
  parameter [31:0] CH2_TX_10G_CFG1 = 32'h40000000,
  parameter [31:0] CH2_TX_10G_CFG2 = 32'h00000000,
  parameter [31:0] CH2_TX_10G_CFG3 = 32'h00000000,
  parameter [31:0] CH2_TX_ANA_CFG0 = 32'h000000D0,
  parameter [31:0] CH2_TX_CRC_CFG0 = 32'h00007800,
  parameter [31:0] CH2_TX_CRC_CFG1 = 32'h1E1E1E1E,
  parameter [31:0] CH2_TX_CRC_CFG2 = 32'h1E1E1E1E,
  parameter [31:0] CH2_TX_CRC_CFG3 = 32'hFFFFFFFF,
  parameter real CH2_TX_DATA_RATE = 8.00,
  parameter [31:0] CH2_TX_DRV_CFG0 = 32'h00000000,
  parameter [31:0] CH2_TX_DRV_CFG1 = 32'h00001800,
  parameter [31:0] CH2_TX_PCS_CFG0 = 32'h00000000,
  parameter [31:0] CH2_TX_PCS_CFG1 = 32'h2835557C,
  parameter [31:0] CH2_TX_PCS_CFG2 = 32'h1555F2AA,
  parameter [31:0] CH2_TX_PCS_CFG3 = 32'h000AAA83,
  parameter [31:0] CH2_TX_PHALIGN_CFG0 = 32'h00080000,
  parameter [31:0] CH2_TX_PHALIGN_CFG1 = 32'h00C47000,
  parameter [31:0] CH2_TX_PHALIGN_CFG2 = 32'h00000038,
  parameter [31:0] CH2_TX_PHALIGN_CFG3 = 32'h00000000,
  parameter [31:0] CH2_TX_PHALIGN_CFG4 = 32'h180000E0,
  parameter [31:0] CH2_TX_PHALIGN_CFG5 = 32'h00000000,
  parameter [31:0] CH2_TX_PIPPM_CFG = 32'h00000000,
  parameter [31:0] CH2_TX_SER_CFG0 = 32'h00000000,
  parameter [31:0] CH3_ADAPT_APT_CFG = 32'h00000000,
  parameter [31:0] CH3_ADAPT_CAL_CFG = 32'h01E76400,
  parameter [31:0] CH3_ADAPT_DFE_CFG = 32'h00000000,
  parameter [31:0] CH3_ADAPT_GC_CFG0 = 32'h009010E8,
  parameter [31:0] CH3_ADAPT_GC_CFG1 = 32'h14A007E0,
  parameter [31:0] CH3_ADAPT_GC_CFG2 = 32'h002000E8,
  parameter [31:0] CH3_ADAPT_GC_CFG3 = 32'h14A003E0,
  parameter [31:0] CH3_ADAPT_GEN_CFG0 = 32'h00000000,
  parameter [31:0] CH3_ADAPT_GEN_CFG1 = 32'h00000000,
  parameter [31:0] CH3_ADAPT_GEN_CFG2 = 32'h80000000,
  parameter [31:0] CH3_ADAPT_GEN_CFG3 = 32'h10000000,
  parameter [31:0] CH3_ADAPT_H01_CFG = 32'h03A003A0,
  parameter [31:0] CH3_ADAPT_H23_CFG = 32'h03A003A0,
  parameter [31:0] CH3_ADAPT_H45_CFG = 32'h03A003A0,
  parameter [31:0] CH3_ADAPT_H67_CFG = 32'h03A003A0,
  parameter [31:0] CH3_ADAPT_H89_CFG = 32'h03A003A0,
  parameter [31:0] CH3_ADAPT_HAB_CFG = 32'h03A003A0,
  parameter [31:0] CH3_ADAPT_HCD_CFG = 32'h03A003A0,
  parameter [31:0] CH3_ADAPT_HEF_CFG = 32'h03A003A0,
  parameter [31:0] CH3_ADAPT_KH_CFG0 = 32'h10087BBF,
  parameter [31:0] CH3_ADAPT_KH_CFG1 = 32'h00000000,
  parameter [31:0] CH3_ADAPT_KH_CFG2 = 32'h00003BA0,
  parameter [31:0] CH3_ADAPT_KH_CFG3 = 32'h00000000,
  parameter [31:0] CH3_ADAPT_KH_CFG4 = 32'h00007BA0,
  parameter [31:0] CH3_ADAPT_KH_CFG5 = 32'h00000000,
  parameter [31:0] CH3_ADAPT_KL_CFG0 = 32'h00007BA0,
  parameter [31:0] CH3_ADAPT_KL_CFG1 = 32'h00003BA0,
  parameter [31:0] CH3_ADAPT_LCK_CFG0 = 32'h00004000,
  parameter [31:0] CH3_ADAPT_LCK_CFG1 = 32'h00004000,
  parameter [31:0] CH3_ADAPT_LCK_CFG2 = 32'h00000000,
  parameter [31:0] CH3_ADAPT_LCK_CFG3 = 32'h00000000,
  parameter [31:0] CH3_ADAPT_LOP_CFG = 32'hEE000660,
  parameter [31:0] CH3_ADAPT_OS_CFG = 32'h800003A0,
  parameter [31:0] CH3_CHCLK_ILO_CFG = 32'h00600033,
  parameter [31:0] CH3_CHCLK_MISC_CFG = 32'h78805C1F,
  parameter [31:0] CH3_CHCLK_RSV_CFG = 32'h00000000,
  parameter [31:0] CH3_CHCLK_RXCAL_CFG = 32'h083C4000,
  parameter [31:0] CH3_CHCLK_RXCAL_CFG1 = 32'h00000000,
  parameter [31:0] CH3_CHCLK_RXCAL_CFG2 = 32'h00000000,
  parameter [31:0] CH3_CHCLK_RXPI_CFG = 32'h00160830,
  parameter [31:0] CH3_CHCLK_TXCAL_CFG = 32'h00400020,
  parameter [31:0] CH3_CHCLK_TXPI_CFG0 = 32'h0047083F,
  parameter [31:0] CH3_CHL_RSV_CFG0 = 32'hC6000009,
  parameter [31:0] CH3_CHL_RSV_CFG1 = 32'h00000000,
  parameter [31:0] CH3_CHL_RSV_CFG2 = 32'h00000000,
  parameter [31:0] CH3_CHL_RSV_CFG3 = 32'h00000000,
  parameter [31:0] CH3_CHL_RSV_CFG4 = 32'h00000000,
  parameter [31:0] CH3_DA_CFG = 32'h00000000,
  parameter [31:0] CH3_EYESCAN_CFG0 = 32'h00000800,
  parameter [31:0] CH3_EYESCAN_CFG1 = 32'h00000000,
  parameter [31:0] CH3_EYESCAN_CFG10 = 32'h00000000,
  parameter [31:0] CH3_EYESCAN_CFG11 = 32'h00000000,
  parameter [31:0] CH3_EYESCAN_CFG12 = 32'h00000000,
  parameter [31:0] CH3_EYESCAN_CFG13 = 32'h00000000,
  parameter [31:0] CH3_EYESCAN_CFG14 = 32'h00000000,
  parameter [31:0] CH3_EYESCAN_CFG15 = 32'h00000000,
  parameter [31:0] CH3_EYESCAN_CFG16 = 32'h00000000,
  parameter [31:0] CH3_EYESCAN_CFG2 = 32'h00000000,
  parameter [31:0] CH3_EYESCAN_CFG3 = 32'h00000000,
  parameter [31:0] CH3_EYESCAN_CFG4 = 32'h00000000,
  parameter [31:0] CH3_EYESCAN_CFG5 = 32'h00000000,
  parameter [31:0] CH3_EYESCAN_CFG6 = 32'h00000000,
  parameter [31:0] CH3_EYESCAN_CFG7 = 32'h00000000,
  parameter [31:0] CH3_EYESCAN_CFG8 = 32'h00000000,
  parameter [31:0] CH3_EYESCAN_CFG9 = 32'h00000000,
  parameter [31:0] CH3_FABRIC_INTF_CFG0 = 32'h00000000,
  parameter [31:0] CH3_FABRIC_INTF_CFG1 = 32'h00000400,
  parameter [31:0] CH3_FABRIC_INTF_CFG2 = 32'h00000000,
  parameter [31:0] CH3_FABRIC_INTF_CFG3 = 32'h00000000,
  parameter [31:0] CH3_FABRIC_INTF_CFG4 = 32'h00000000,
  parameter [31:0] CH3_FABRIC_INTF_CFG5 = 32'h00000000,
  parameter [0:0] CH3_INSTANTIATED = 1'b1,
  parameter [31:0] CH3_MONITOR_CFG = 32'h00000000,
  parameter [31:0] CH3_PIPE_CTRL_CFG0 = 32'h00040000,
  parameter [31:0] CH3_PIPE_CTRL_CFG1 = 32'h00000290,
  parameter [31:0] CH3_PIPE_CTRL_CFG10 = 32'h051FFFEF,
  parameter [31:0] CH3_PIPE_CTRL_CFG2 = 32'h00978000,
  parameter [31:0] CH3_PIPE_CTRL_CFG3 = 32'h00125F2F,
  parameter [31:0] CH3_PIPE_CTRL_CFG4 = 32'h00440000,
  parameter [31:0] CH3_PIPE_CTRL_CFG5 = 32'h00000000,
  parameter [31:0] CH3_PIPE_CTRL_CFG6 = 32'h3C000000,
  parameter [31:0] CH3_PIPE_CTRL_CFG7 = 32'h00000000,
  parameter [31:0] CH3_PIPE_CTRL_CFG8 = 32'h02600000,
  parameter [31:0] CH3_PIPE_CTRL_CFG9 = 32'h00000000,
  parameter [31:0] CH3_PIPE_TX_EQ_CFG0 = 32'h085164CE,
  parameter [31:0] CH3_PIPE_TX_EQ_CFG1 = 32'h08512340,
  parameter [31:0] CH3_PIPE_TX_EQ_CFG2 = 32'h00002040,
  parameter [31:0] CH3_PIPE_TX_EQ_CFG3 = 32'h00000000,
  parameter [31:0] CH3_RESET_BYP_HDSHK_CFG = 32'h00FF0000,
  parameter [31:0] CH3_RESET_CFG = 32'h08100005,
  parameter [31:0] CH3_RESET_LOOPER_ID_CFG = 32'h00204060,
  parameter [31:0] CH3_RESET_LOOP_ID_CFG0 = 32'h00000210,
  parameter [31:0] CH3_RESET_LOOP_ID_CFG1 = 32'h06543210,
  parameter [31:0] CH3_RESET_LOOP_ID_CFG2 = 32'h00004321,
  parameter [31:0] CH3_RESET_TIME_CFG0 = 32'h02108401,
  parameter [31:0] CH3_RESET_TIME_CFG1 = 32'h02108421,
  parameter [31:0] CH3_RESET_TIME_CFG2 = 32'h02108421,
  parameter [31:0] CH3_RESET_TIME_CFG3 = 32'h4A102421,
  parameter real CH3_RXOUTCLK_FREQ = 322.2656250,
  parameter real CH3_RXOUTCLK_REF_FREQ = 156.2500000,
  parameter CH3_RXOUTCLK_REF_SOURCE = "HSCLK0_LCPLLGTGREFCLK",
  parameter [31:0] CH3_RX_CDR_CFG0 = 32'h00000001,
  parameter [31:0] CH3_RX_CDR_CFG1 = 32'h60000100,
  parameter [31:0] CH3_RX_CDR_CFG2 = 32'h08009164,
  parameter [31:0] CH3_RX_CDR_CFG3 = 32'h000B5CF6,
  parameter [31:0] CH3_RX_CDR_CFG4 = 32'h043C3000,
  parameter [31:0] CH3_RX_CRC_CFG0 = 32'h00007880,
  parameter [31:0] CH3_RX_CRC_CFG1 = 32'h1E1E1E1E,
  parameter [31:0] CH3_RX_CRC_CFG2 = 32'h1E1E1E1E,
  parameter [31:0] CH3_RX_CRC_CFG3 = 32'hFFFFFFFF,
  parameter [31:0] CH3_RX_CTLE_CFG0 = 32'h01DC0100,
  parameter [31:0] CH3_RX_CTLE_CFG1 = 32'h40000000,
  parameter [31:0] CH3_RX_DACI2V_CFG0 = 32'h04008ECA,
  parameter real CH3_RX_DATA_RATE = 8.00,
  parameter [31:0] CH3_RX_DFE_CFG0 = 32'hF0025408,
  parameter [31:0] CH3_RX_ELASTIC_BUF_CFG0 = 32'h00000000,
  parameter [31:0] CH3_RX_ELASTIC_BUF_CFG1 = 32'h00000470,
  parameter [31:0] CH3_RX_ELASTIC_BUF_CFG2 = 32'h50040000,
  parameter [31:0] CH3_RX_ELASTIC_BUF_CFG3 = 32'hC1E40100,
  parameter [31:0] CH3_RX_ELASTIC_BUF_CFG4 = 32'h000005F1,
  parameter [31:0] CH3_RX_ELASTIC_BUF_CFG5 = 32'h10040000,
  parameter [31:0] CH3_RX_ELASTIC_BUF_CFG6 = 32'hFFF40100,
  parameter [31:0] CH3_RX_ELASTIC_BUF_CFG7 = 32'h0400001C,
  parameter [31:0] CH3_RX_ELASTIC_BUF_CFG8 = 32'h001F0590,
  parameter [31:0] CH3_RX_ELASTIC_BUF_CFG9 = 32'h001F0590,
  parameter [31:0] CH3_RX_MISC_CFG0 = 32'h00000000,
  parameter [31:0] CH3_RX_OOB_CFG0 = 32'h2454C204,
  parameter [31:0] CH3_RX_OOB_CFG1 = 32'h010241C4,
  parameter [31:0] CH3_RX_PAD_CFG0 = 32'h00000000,
  parameter [31:0] CH3_RX_PAD_CFG1 = 32'h1044497A,
  parameter [31:0] CH3_RX_PCS_CFG0 = 32'h00000000,
  parameter [31:0] CH3_RX_PCS_CFG1 = 32'h00000000,
  parameter [31:0] CH3_RX_PCS_CFG2 = 32'h00000000,
  parameter [31:0] CH3_RX_PCS_CFG3 = 32'h1C190F00,
  parameter [31:0] CH3_RX_PCS_CFG4 = 32'hC0500802,
  parameter [31:0] CH3_RX_PHALIGN_CFG0 = 32'h00080003,
  parameter [31:0] CH3_RX_PHALIGN_CFG1 = 32'h00838000,
  parameter [31:0] CH3_RX_PHALIGN_CFG2 = 32'h01E1EA00,
  parameter [31:0] CH3_RX_PHALIGN_CFG3 = 32'h00038000,
  parameter [31:0] CH3_RX_PHALIGN_CFG4 = 32'h0000020A,
  parameter [31:0] CH3_RX_PHALIGN_CFG5 = 32'h00020000,
  parameter CH3_SIM_MODE = "FAST",
  parameter CH3_SIM_RECEIVER_DETECT_PASS = "TRUE",
  parameter CH3_SIM_RESET_SPEEDUP = "TRUE",
  parameter CH3_SIM_TX_EIDLE_DRIVE_LEVEL = "Z",
  parameter real CH3_TXOUTCLK_FREQ = 322.2656250,
  parameter real CH3_TXOUTCLK_REF_FREQ = 156.2500000,
  parameter CH3_TXOUTCLK_REF_SOURCE = "HSCLK0_LCPLLGTGREFCLK",
  parameter [31:0] CH3_TX_10G_CFG0 = 32'h00000000,
  parameter [31:0] CH3_TX_10G_CFG1 = 32'h40000000,
  parameter [31:0] CH3_TX_10G_CFG2 = 32'h00000000,
  parameter [31:0] CH3_TX_10G_CFG3 = 32'h00000000,
  parameter [31:0] CH3_TX_ANA_CFG0 = 32'h000000D0,
  parameter [31:0] CH3_TX_CRC_CFG0 = 32'h00007800,
  parameter [31:0] CH3_TX_CRC_CFG1 = 32'h1E1E1E1E,
  parameter [31:0] CH3_TX_CRC_CFG2 = 32'h1E1E1E1E,
  parameter [31:0] CH3_TX_CRC_CFG3 = 32'hFFFFFFFF,
  parameter real CH3_TX_DATA_RATE = 8.00,
  parameter [31:0] CH3_TX_DRV_CFG0 = 32'h00000000,
  parameter [31:0] CH3_TX_DRV_CFG1 = 32'h00001800,
  parameter [31:0] CH3_TX_PCS_CFG0 = 32'h00000000,
  parameter [31:0] CH3_TX_PCS_CFG1 = 32'h2835557C,
  parameter [31:0] CH3_TX_PCS_CFG2 = 32'h1555F2AA,
  parameter [31:0] CH3_TX_PCS_CFG3 = 32'h000AAA83,
  parameter [31:0] CH3_TX_PHALIGN_CFG0 = 32'h00080000,
  parameter [31:0] CH3_TX_PHALIGN_CFG1 = 32'h00C47000,
  parameter [31:0] CH3_TX_PHALIGN_CFG2 = 32'h00000038,
  parameter [31:0] CH3_TX_PHALIGN_CFG3 = 32'h00000000,
  parameter [31:0] CH3_TX_PHALIGN_CFG4 = 32'h180000E0,
  parameter [31:0] CH3_TX_PHALIGN_CFG5 = 32'h00000000,
  parameter [31:0] CH3_TX_PIPPM_CFG = 32'h00000000,
  parameter [31:0] CH3_TX_SER_CFG0 = 32'h00000000,
  parameter CHANNEL_CONNECTIVITY = "NONE",
  parameter [31:0] CTRL_RSV_CFG0 = 32'h00000018,
  parameter [31:0] CTRL_RSV_CFG1 = 32'h00000000,
  parameter [0:0] HS0_LCPLL_IPS_PIN_EN = 1'b0,
  parameter integer HS0_LCPLL_IPS_REFCLK_SEL = 0,
  parameter [2:0] HS0_LCPLL_REFCLK_MAP0 = 3'h0,
  parameter [2:0] HS0_LCPLL_REFCLK_MAP1 = 3'h1,
  parameter [2:0] HS0_LCPLL_REFCLK_MAP2 = 3'h2,
  parameter [2:0] HS0_LCPLL_REFCLK_MAP3 = 3'h3,
  parameter [2:0] HS0_LCPLL_REFCLK_MAP4 = 3'h4,
  parameter [2:0] HS0_LCPLL_REFCLK_MAP5 = 3'h5,
  parameter [2:0] HS0_LCPLL_REFCLK_MAP6 = 3'h6,
  parameter [2:0] HS0_LCPLL_REFCLK_MAP7 = 3'h7,
  parameter [0:0] HS0_RPLL_IPS_PIN_EN = 1'b0,
  parameter integer HS0_RPLL_IPS_REFCLK_SEL = 0,
  parameter [2:0] HS0_RPLL_REFCLK_MAP0 = 3'h0,
  parameter [2:0] HS0_RPLL_REFCLK_MAP1 = 3'h1,
  parameter [2:0] HS0_RPLL_REFCLK_MAP2 = 3'h2,
  parameter [2:0] HS0_RPLL_REFCLK_MAP3 = 3'h3,
  parameter [2:0] HS0_RPLL_REFCLK_MAP4 = 3'h4,
  parameter [2:0] HS0_RPLL_REFCLK_MAP5 = 3'h5,
  parameter [2:0] HS0_RPLL_REFCLK_MAP6 = 3'h6,
  parameter [2:0] HS0_RPLL_REFCLK_MAP7 = 3'h7,
  parameter [0:0] HS1_LCPLL_IPS_PIN_EN = 1'b0,
  parameter integer HS1_LCPLL_IPS_REFCLK_SEL = 0,
  parameter [2:0] HS1_LCPLL_REFCLK_MAP0 = 3'h0,
  parameter [2:0] HS1_LCPLL_REFCLK_MAP1 = 3'h2,
  parameter [2:0] HS1_LCPLL_REFCLK_MAP2 = 3'h1,
  parameter [2:0] HS1_LCPLL_REFCLK_MAP3 = 3'h3,
  parameter [2:0] HS1_LCPLL_REFCLK_MAP4 = 3'h4,
  parameter [2:0] HS1_LCPLL_REFCLK_MAP5 = 3'h5,
  parameter [2:0] HS1_LCPLL_REFCLK_MAP6 = 3'h6,
  parameter [2:0] HS1_LCPLL_REFCLK_MAP7 = 3'h7,
  parameter [0:0] HS1_RPLL_IPS_PIN_EN = 1'b0,
  parameter integer HS1_RPLL_IPS_REFCLK_SEL = 0,
  parameter [2:0] HS1_RPLL_REFCLK_MAP0 = 3'h0,
  parameter [2:0] HS1_RPLL_REFCLK_MAP1 = 3'h2,
  parameter [2:0] HS1_RPLL_REFCLK_MAP2 = 3'h1,
  parameter [2:0] HS1_RPLL_REFCLK_MAP3 = 3'h3,
  parameter [2:0] HS1_RPLL_REFCLK_MAP4 = 3'h4,
  parameter [2:0] HS1_RPLL_REFCLK_MAP5 = 3'h5,
  parameter [2:0] HS1_RPLL_REFCLK_MAP6 = 3'h6,
  parameter [2:0] HS1_RPLL_REFCLK_MAP7 = 3'h7,
  parameter [31:0] HSCLK0_HSDIST_CFG = 32'h0000001E,
  parameter [0:0] HSCLK0_INSTANTIATED = 1'b1,
  parameter [31:0] HSCLK0_LCPLL_CFG0 = 32'h00401F04,
  parameter [31:0] HSCLK0_LCPLL_CFG1 = 32'h00184F00,
  parameter [31:0] HSCLK0_LCPLL_CFG2 = 32'h82380208,
  parameter [31:0] HSCLK0_LCPLL_LGC_CFG0 = 32'hE5D48B10,
  parameter [31:0] HSCLK0_LCPLL_LGC_CFG1 = 32'h00121840,
  parameter [31:0] HSCLK0_LCPLL_LGC_CFG2 = 32'h00000037,
  parameter [31:0] HSCLK0_RPLL_CFG0 = 32'h80000FC4,
  parameter [31:0] HSCLK0_RPLL_CFG1 = 32'h00223F28,
  parameter [31:0] HSCLK0_RPLL_CFG2 = 32'h000303C8,
  parameter [31:0] HSCLK0_RPLL_LGC_CFG0 = 32'hE5D48B10,
  parameter [31:0] HSCLK0_RPLL_LGC_CFG1 = 32'h94121840,
  parameter [31:0] HSCLK0_RPLL_LGC_CFG2 = 32'h00000037,
  parameter [1:0] HSCLK0_RXRECCLK_SEL = 2'h0,
  parameter [31:0] HSCLK1_HSDIST_CFG = 32'h0000001E,
  parameter [0:0] HSCLK1_INSTANTIATED = 1'b1,
  parameter [31:0] HSCLK1_LCPLL_CFG0 = 32'h00401F04,
  parameter [31:0] HSCLK1_LCPLL_CFG1 = 32'h00184F00,
  parameter [31:0] HSCLK1_LCPLL_CFG2 = 32'h82380208,
  parameter [31:0] HSCLK1_LCPLL_LGC_CFG0 = 32'hE5D48B10,
  parameter [31:0] HSCLK1_LCPLL_LGC_CFG1 = 32'h00121840,
  parameter [31:0] HSCLK1_LCPLL_LGC_CFG2 = 32'h00000037,
  parameter [31:0] HSCLK1_RPLL_CFG0 = 32'h80000FC4,
  parameter [31:0] HSCLK1_RPLL_CFG1 = 32'h00223F28,
  parameter [31:0] HSCLK1_RPLL_CFG2 = 32'h000303C8,
  parameter [31:0] HSCLK1_RPLL_LGC_CFG0 = 32'hE5D48B10,
  parameter [31:0] HSCLK1_RPLL_LGC_CFG1 = 32'h94121840,
  parameter [31:0] HSCLK1_RPLL_LGC_CFG2 = 32'h00000037,
  parameter [1:0] HSCLK1_RXRECCLK_SEL = 2'h0,
  parameter MEMORY_INIT_FILE = "NONE",
  parameter [31:0] MST_RESET_CFG = 32'h00000000,
  parameter [31:0] PIN_CFG0 = 32'h00000000,
  parameter [31:0] POR_CFG = 32'h00044300,
  parameter [0:0] QUAD_INSTANTIATED = 1'b1,
  parameter QUAD_SIM_MODE = "FAST",
  parameter QUAD_SIM_RESET_SPEEDUP = "TRUE",
  parameter [31:0] RCALBG0_CFG0 = 32'h00000000,
  parameter [31:0] RCALBG0_CFG1 = 32'h00000000,
  parameter [31:0] RCALBG0_CFG2 = 32'h00000000,
  parameter [31:0] RCALBG0_CFG3 = 32'h00000000,
  parameter [31:0] RCALBG0_CFG4 = 32'h00000000,
  parameter [31:0] RCALBG0_CFG5 = 32'h00000000,
  parameter [31:0] RCALBG1_CFG0 = 32'h00000000,
  parameter [31:0] RCALBG1_CFG1 = 32'h00000000,
  parameter [31:0] RCALBG1_CFG2 = 32'h00000000,
  parameter [31:0] RCALBG1_CFG3 = 32'h00000000,
  parameter [31:0] RCALBG1_CFG4 = 32'h00000000,
  parameter [31:0] RCALBG1_CFG5 = 32'h00000000,
  parameter [31:0] RXRSTDONE_DIST_SEL = 32'h00000000,
  parameter integer SIM_VERSION = 1,
  parameter STAT_NPI_REG_LIST = "NONE",
  parameter [31:0] TERMPROG_CFG = 32'h00000000,
  parameter [31:0] TXRSTDONE_DIST_SEL = 32'h00000000,
  parameter [31:0] UB_CFG0 = 32'h73400000
)(
  output [31:0] APB3PRDATA,
  output APB3PREADY,
  output APB3PSLVERR,
  output CH0_BUFGTCE,
  output [3:0] CH0_BUFGTCEMASK,
  output [11:0] CH0_BUFGTDIV,
  output CH0_BUFGTRST,
  output [3:0] CH0_BUFGTRSTMASK,
  output [31:0] CH0_DMONITOROUT,
  output CH0_DMONITOROUTCLK,
  output CH0_EYESCANDATAERROR,
  output CH0_GTYPTXN,
  output CH0_GTYPTXP,
  output CH0_ILORESETDONE,
  output [15:0] CH0_PCSRSVDOUT,
  output CH0_PHYREADY,
  output CH0_PHYSTATUS,
  output [15:0] CH0_PINRSVDAS,
  output [1:0] CH0_REFDEBUGOUT,
  output CH0_RESETEXCEPTION,
  output [7:0] CH0_RX10GSTAT,
  output [2:0] CH0_RXBUFSTATUS,
  output CH0_RXBYTEISALIGNED,
  output CH0_RXBYTEREALIGN,
  output CH0_RXCDRLOCK,
  output CH0_RXCDRPHDONE,
  output CH0_RXCHANBONDSEQ,
  output CH0_RXCHANISALIGNED,
  output CH0_RXCHANREALIGN,
  output [4:0] CH0_RXCHBONDO,
  output [1:0] CH0_RXCLKCORCNT,
  output CH0_RXCOMINITDET,
  output CH0_RXCOMMADET,
  output CH0_RXCOMSASDET,
  output CH0_RXCOMWAKEDET,
  output [15:0] CH0_RXCTRL0,
  output [15:0] CH0_RXCTRL1,
  output [7:0] CH0_RXCTRL2,
  output [7:0] CH0_RXCTRL3,
  output CH0_RXDAPIRESETDONE,
  output [127:0] CH0_RXDATA,
  output [1:0] CH0_RXDATAVALID,
  output CH0_RXDEBUGPCSOUT,
  output CH0_RXDLYALIGNERR,
  output CH0_RXDLYALIGNPROG,
  output CH0_RXELECIDLE,
  output CH0_RXFINEALIGNDONE,
  output [5:0] CH0_RXHEADER,
  output [1:0] CH0_RXHEADERVALID,
  output CH0_RXOSINTDONE,
  output CH0_RXOUTCLK,
  output CH0_RXPHALIGNDONE,
  output CH0_RXPHALIGNERR,
  output CH0_RXPHDLYRESETDONE,
  output CH0_RXPHSETINITDONE,
  output CH0_RXPHSHIFT180DONE,
  output CH0_RXPKDET,
  output CH0_RXPMARESETDONE,
  output CH0_RXPRBSERR,
  output CH0_RXPRBSLOCKED,
  output CH0_RXPROGDIVRESETDONE,
  output CH0_RXQPISENN,
  output CH0_RXQPISENP,
  output CH0_RXRESETDONE,
  output CH0_RXSIMPLEXPHYSTATUS,
  output CH0_RXSLIDERDY,
  output CH0_RXSLIPDONE,
  output [1:0] CH0_RXSTARTOFSEQ,
  output [2:0] CH0_RXSTATUS,
  output CH0_RXSYNCDONE,
  output CH0_RXVALID,
  output CH0_TX10GSTAT,
  output [1:0] CH0_TXBUFSTATUS,
  output CH0_TXCOMFINISH,
  output CH0_TXDAPIRESETDONE,
  output CH0_TXDCCDONE,
  output CH0_TXDEBUGPCSOUT,
  output CH0_TXDLYALIGNERR,
  output CH0_TXDLYALIGNPROG,
  output CH0_TXOUTCLK,
  output CH0_TXPHALIGNDONE,
  output CH0_TXPHALIGNERR,
  output CH0_TXPHALIGNOUTRSVD,
  output CH0_TXPHDLYRESETDONE,
  output CH0_TXPHSETINITDONE,
  output CH0_TXPHSHIFT180DONE,
  output CH0_TXPMARESETDONE,
  output CH0_TXPROGDIVRESETDONE,
  output CH0_TXQPISENN,
  output CH0_TXQPISENP,
  output CH0_TXRESETDONE,
  output CH0_TXSIMPLEXPHYSTATUS,
  output CH0_TXSWINGOUTHIGH,
  output CH0_TXSWINGOUTLOW,
  output CH0_TXSYNCDONE,
  output CH0_XPIPE5_PIPELINE_EN,
  output CH1_BUFGTCE,
  output [3:0] CH1_BUFGTCEMASK,
  output [11:0] CH1_BUFGTDIV,
  output CH1_BUFGTRST,
  output [3:0] CH1_BUFGTRSTMASK,
  output [31:0] CH1_DMONITOROUT,
  output CH1_DMONITOROUTCLK,
  output CH1_EYESCANDATAERROR,
  output CH1_GTYPTXN,
  output CH1_GTYPTXP,
  output CH1_ILORESETDONE,
  output [15:0] CH1_PCSRSVDOUT,
  output CH1_PHYREADY,
  output CH1_PHYSTATUS,
  output [15:0] CH1_PINRSVDAS,
  output [1:0] CH1_REFDEBUGOUT,
  output CH1_RESETEXCEPTION,
  output [7:0] CH1_RX10GSTAT,
  output [2:0] CH1_RXBUFSTATUS,
  output CH1_RXBYTEISALIGNED,
  output CH1_RXBYTEREALIGN,
  output CH1_RXCDRLOCK,
  output CH1_RXCDRPHDONE,
  output CH1_RXCHANBONDSEQ,
  output CH1_RXCHANISALIGNED,
  output CH1_RXCHANREALIGN,
  output [4:0] CH1_RXCHBONDO,
  output [1:0] CH1_RXCLKCORCNT,
  output CH1_RXCOMINITDET,
  output CH1_RXCOMMADET,
  output CH1_RXCOMSASDET,
  output CH1_RXCOMWAKEDET,
  output [15:0] CH1_RXCTRL0,
  output [15:0] CH1_RXCTRL1,
  output [7:0] CH1_RXCTRL2,
  output [7:0] CH1_RXCTRL3,
  output CH1_RXDAPIRESETDONE,
  output [127:0] CH1_RXDATA,
  output [1:0] CH1_RXDATAVALID,
  output CH1_RXDEBUGPCSOUT,
  output CH1_RXDLYALIGNERR,
  output CH1_RXDLYALIGNPROG,
  output CH1_RXELECIDLE,
  output CH1_RXFINEALIGNDONE,
  output [5:0] CH1_RXHEADER,
  output [1:0] CH1_RXHEADERVALID,
  output CH1_RXOSINTDONE,
  output CH1_RXOUTCLK,
  output CH1_RXPHALIGNDONE,
  output CH1_RXPHALIGNERR,
  output CH1_RXPHDLYRESETDONE,
  output CH1_RXPHSETINITDONE,
  output CH1_RXPHSHIFT180DONE,
  output CH1_RXPKDET,
  output CH1_RXPMARESETDONE,
  output CH1_RXPRBSERR,
  output CH1_RXPRBSLOCKED,
  output CH1_RXPROGDIVRESETDONE,
  output CH1_RXQPISENN,
  output CH1_RXQPISENP,
  output CH1_RXRESETDONE,
  output CH1_RXSIMPLEXPHYSTATUS,
  output CH1_RXSLIDERDY,
  output CH1_RXSLIPDONE,
  output [1:0] CH1_RXSTARTOFSEQ,
  output [2:0] CH1_RXSTATUS,
  output CH1_RXSYNCDONE,
  output CH1_RXVALID,
  output CH1_TX10GSTAT,
  output [1:0] CH1_TXBUFSTATUS,
  output CH1_TXCOMFINISH,
  output CH1_TXDAPIRESETDONE,
  output CH1_TXDCCDONE,
  output CH1_TXDEBUGPCSOUT,
  output CH1_TXDLYALIGNERR,
  output CH1_TXDLYALIGNPROG,
  output CH1_TXOUTCLK,
  output CH1_TXPHALIGNDONE,
  output CH1_TXPHALIGNERR,
  output CH1_TXPHALIGNOUTRSVD,
  output CH1_TXPHDLYRESETDONE,
  output CH1_TXPHSETINITDONE,
  output CH1_TXPHSHIFT180DONE,
  output CH1_TXPMARESETDONE,
  output CH1_TXPROGDIVRESETDONE,
  output CH1_TXQPISENN,
  output CH1_TXQPISENP,
  output CH1_TXRESETDONE,
  output CH1_TXSIMPLEXPHYSTATUS,
  output CH1_TXSWINGOUTHIGH,
  output CH1_TXSWINGOUTLOW,
  output CH1_TXSYNCDONE,
  output CH1_XPIPE5_PIPELINE_EN,
  output CH2_BUFGTCE,
  output [3:0] CH2_BUFGTCEMASK,
  output [11:0] CH2_BUFGTDIV,
  output CH2_BUFGTRST,
  output [3:0] CH2_BUFGTRSTMASK,
  output [31:0] CH2_DMONITOROUT,
  output CH2_DMONITOROUTCLK,
  output CH2_EYESCANDATAERROR,
  output CH2_GTYPTXN,
  output CH2_GTYPTXP,
  output CH2_ILORESETDONE,
  output [15:0] CH2_PCSRSVDOUT,
  output CH2_PHYREADY,
  output CH2_PHYSTATUS,
  output [15:0] CH2_PINRSVDAS,
  output [1:0] CH2_REFDEBUGOUT,
  output CH2_RESETEXCEPTION,
  output [7:0] CH2_RX10GSTAT,
  output [2:0] CH2_RXBUFSTATUS,
  output CH2_RXBYTEISALIGNED,
  output CH2_RXBYTEREALIGN,
  output CH2_RXCDRLOCK,
  output CH2_RXCDRPHDONE,
  output CH2_RXCHANBONDSEQ,
  output CH2_RXCHANISALIGNED,
  output CH2_RXCHANREALIGN,
  output [4:0] CH2_RXCHBONDO,
  output [1:0] CH2_RXCLKCORCNT,
  output CH2_RXCOMINITDET,
  output CH2_RXCOMMADET,
  output CH2_RXCOMSASDET,
  output CH2_RXCOMWAKEDET,
  output [15:0] CH2_RXCTRL0,
  output [15:0] CH2_RXCTRL1,
  output [7:0] CH2_RXCTRL2,
  output [7:0] CH2_RXCTRL3,
  output CH2_RXDAPIRESETDONE,
  output [127:0] CH2_RXDATA,
  output [1:0] CH2_RXDATAVALID,
  output CH2_RXDEBUGPCSOUT,
  output CH2_RXDLYALIGNERR,
  output CH2_RXDLYALIGNPROG,
  output CH2_RXELECIDLE,
  output CH2_RXFINEALIGNDONE,
  output [5:0] CH2_RXHEADER,
  output [1:0] CH2_RXHEADERVALID,
  output CH2_RXOSINTDONE,
  output CH2_RXOUTCLK,
  output CH2_RXPHALIGNDONE,
  output CH2_RXPHALIGNERR,
  output CH2_RXPHDLYRESETDONE,
  output CH2_RXPHSETINITDONE,
  output CH2_RXPHSHIFT180DONE,
  output CH2_RXPKDET,
  output CH2_RXPMARESETDONE,
  output CH2_RXPRBSERR,
  output CH2_RXPRBSLOCKED,
  output CH2_RXPROGDIVRESETDONE,
  output CH2_RXQPISENN,
  output CH2_RXQPISENP,
  output CH2_RXRESETDONE,
  output CH2_RXSIMPLEXPHYSTATUS,
  output CH2_RXSLIDERDY,
  output CH2_RXSLIPDONE,
  output [1:0] CH2_RXSTARTOFSEQ,
  output [2:0] CH2_RXSTATUS,
  output CH2_RXSYNCDONE,
  output CH2_RXVALID,
  output CH2_TX10GSTAT,
  output [1:0] CH2_TXBUFSTATUS,
  output CH2_TXCOMFINISH,
  output CH2_TXDAPIRESETDONE,
  output CH2_TXDCCDONE,
  output CH2_TXDEBUGPCSOUT,
  output CH2_TXDLYALIGNERR,
  output CH2_TXDLYALIGNPROG,
  output CH2_TXOUTCLK,
  output CH2_TXPHALIGNDONE,
  output CH2_TXPHALIGNERR,
  output CH2_TXPHALIGNOUTRSVD,
  output CH2_TXPHDLYRESETDONE,
  output CH2_TXPHSETINITDONE,
  output CH2_TXPHSHIFT180DONE,
  output CH2_TXPMARESETDONE,
  output CH2_TXPROGDIVRESETDONE,
  output CH2_TXQPISENN,
  output CH2_TXQPISENP,
  output CH2_TXRESETDONE,
  output CH2_TXSIMPLEXPHYSTATUS,
  output CH2_TXSWINGOUTHIGH,
  output CH2_TXSWINGOUTLOW,
  output CH2_TXSYNCDONE,
  output CH2_XPIPE5_PIPELINE_EN,
  output CH3_BUFGTCE,
  output [3:0] CH3_BUFGTCEMASK,
  output [11:0] CH3_BUFGTDIV,
  output CH3_BUFGTRST,
  output [3:0] CH3_BUFGTRSTMASK,
  output [31:0] CH3_DMONITOROUT,
  output CH3_DMONITOROUTCLK,
  output CH3_EYESCANDATAERROR,
  output CH3_GTYPTXN,
  output CH3_GTYPTXP,
  output CH3_ILORESETDONE,
  output [15:0] CH3_PCSRSVDOUT,
  output CH3_PHYREADY,
  output CH3_PHYSTATUS,
  output [15:0] CH3_PINRSVDAS,
  output [1:0] CH3_REFDEBUGOUT,
  output CH3_RESETEXCEPTION,
  output [7:0] CH3_RX10GSTAT,
  output [2:0] CH3_RXBUFSTATUS,
  output CH3_RXBYTEISALIGNED,
  output CH3_RXBYTEREALIGN,
  output CH3_RXCDRLOCK,
  output CH3_RXCDRPHDONE,
  output CH3_RXCHANBONDSEQ,
  output CH3_RXCHANISALIGNED,
  output CH3_RXCHANREALIGN,
  output [4:0] CH3_RXCHBONDO,
  output [1:0] CH3_RXCLKCORCNT,
  output CH3_RXCOMINITDET,
  output CH3_RXCOMMADET,
  output CH3_RXCOMSASDET,
  output CH3_RXCOMWAKEDET,
  output [15:0] CH3_RXCTRL0,
  output [15:0] CH3_RXCTRL1,
  output [7:0] CH3_RXCTRL2,
  output [7:0] CH3_RXCTRL3,
  output CH3_RXDAPIRESETDONE,
  output [127:0] CH3_RXDATA,
  output [1:0] CH3_RXDATAVALID,
  output CH3_RXDEBUGPCSOUT,
  output CH3_RXDLYALIGNERR,
  output CH3_RXDLYALIGNPROG,
  output CH3_RXELECIDLE,
  output CH3_RXFINEALIGNDONE,
  output [5:0] CH3_RXHEADER,
  output [1:0] CH3_RXHEADERVALID,
  output CH3_RXOSINTDONE,
  output CH3_RXOUTCLK,
  output CH3_RXPHALIGNDONE,
  output CH3_RXPHALIGNERR,
  output CH3_RXPHDLYRESETDONE,
  output CH3_RXPHSETINITDONE,
  output CH3_RXPHSHIFT180DONE,
  output CH3_RXPKDET,
  output CH3_RXPMARESETDONE,
  output CH3_RXPRBSERR,
  output CH3_RXPRBSLOCKED,
  output CH3_RXPROGDIVRESETDONE,
  output CH3_RXQPISENN,
  output CH3_RXQPISENP,
  output CH3_RXRESETDONE,
  output CH3_RXSIMPLEXPHYSTATUS,
  output CH3_RXSLIDERDY,
  output CH3_RXSLIPDONE,
  output [1:0] CH3_RXSTARTOFSEQ,
  output [2:0] CH3_RXSTATUS,
  output CH3_RXSYNCDONE,
  output CH3_RXVALID,
  output CH3_TX10GSTAT,
  output [1:0] CH3_TXBUFSTATUS,
  output CH3_TXCOMFINISH,
  output CH3_TXDAPIRESETDONE,
  output CH3_TXDCCDONE,
  output CH3_TXDEBUGPCSOUT,
  output CH3_TXDLYALIGNERR,
  output CH3_TXDLYALIGNPROG,
  output CH3_TXOUTCLK,
  output CH3_TXPHALIGNDONE,
  output CH3_TXPHALIGNERR,
  output CH3_TXPHALIGNOUTRSVD,
  output CH3_TXPHDLYRESETDONE,
  output CH3_TXPHSETINITDONE,
  output CH3_TXPHSHIFT180DONE,
  output CH3_TXPMARESETDONE,
  output CH3_TXPROGDIVRESETDONE,
  output CH3_TXQPISENN,
  output CH3_TXQPISENP,
  output CH3_TXRESETDONE,
  output CH3_TXSIMPLEXPHYSTATUS,
  output CH3_TXSWINGOUTHIGH,
  output CH3_TXSWINGOUTLOW,
  output CH3_TXSYNCDONE,
  output CH3_XPIPE5_PIPELINE_EN,
  output CORRECTERR,
  output [7:0] CTRLRSVDOUT,
  output [15:0] DEBUGTRACETDATA,
  output DEBUGTRACETVALID,
  output [31:0] GPO,
  output GTPOWERGOOD,
  output HSCLK0_LCPLLFBCLKLOST,
  output HSCLK0_LCPLLLOCK,
  output HSCLK0_LCPLLREFCLKLOST,
  output HSCLK0_LCPLLREFCLKMONITOR,
  output HSCLK0_RPLLFBCLKLOST,
  output HSCLK0_RPLLLOCK,
  output HSCLK0_RPLLREFCLKLOST,
  output HSCLK0_RPLLREFCLKMONITOR,
  output HSCLK0_RXRECCLKOUT0,
  output HSCLK0_RXRECCLKOUT1,
  output [1:0] HSCLK0_RXRECCLKSEL,
  output HSCLK1_LCPLLFBCLKLOST,
  output HSCLK1_LCPLLLOCK,
  output HSCLK1_LCPLLREFCLKLOST,
  output HSCLK1_LCPLLREFCLKMONITOR,
  output HSCLK1_RPLLFBCLKLOST,
  output HSCLK1_RPLLLOCK,
  output HSCLK1_RPLLREFCLKLOST,
  output HSCLK1_RPLLREFCLKMONITOR,
  output HSCLK1_RXRECCLKOUT0,
  output HSCLK1_RXRECCLKOUT1,
  output [1:0] HSCLK1_RXRECCLKSEL,
  output [31:0] M0_AXIS_TDATA,
  output M0_AXIS_TLAST,
  output M0_AXIS_TVALID,
  output [31:0] M1_AXIS_TDATA,
  output M1_AXIS_TLAST,
  output M1_AXIS_TVALID,
  output [31:0] M2_AXIS_TDATA,
  output M2_AXIS_TLAST,
  output M2_AXIS_TVALID,
  output [3:0] MSTRXRESETDONE,
  output [3:0] MSTTXRESETDONE,
  output [5:0] PIPENORTHOUT,
  output [5:0] PIPESOUTHOUT,
  output REFCLK0_CLKTESTSIGINT,
  output REFCLK0_GTREFCLKPDINT,
  output REFCLK1_CLKTESTSIGINT,
  output REFCLK1_GTREFCLKPDINT,
  output [1:0] RESETDONE_NORTHOUT,
  output [1:0] RESETDONE_SOUTHOUT,
  output RXMARGINREQACK,
  output [3:0] RXMARGINRESCMD,
  output [1:0] RXMARGINRESLANENUM,
  output [7:0] RXMARGINRESPAYLD,
  output RXMARGINRESREQ,
  output [3:0] RXPINORTHOUT,
  output [3:0] RXPISOUTHOUT,
  output S0_AXIS_TREADY,
  output S1_AXIS_TREADY,
  output S2_AXIS_TREADY,
  output TRIGACKIN0,
  output TRIGOUT0,
  output [3:0] TXPINORTHOUT,
  output [3:0] TXPISOUTHOUT,
  output UBINTERRUPT,
  output UBTXUART,
  output UNCORRECTERR,

  input APB3CLK,
  input [15:0] APB3PADDR,
  input APB3PENABLE,
  input APB3PRESETN,
  input APB3PSEL,
  input [31:0] APB3PWDATA,
  input APB3PWRITE,
  input AXISCLK,
  input BGBYPASSB,
  input BGMONITORENB,
  input BGPDB,
  input [4:0] BGRCALOVRD,
  input BGRCALOVRDENB,
  input CH0_CDRBMCDRREQ,
  input CH0_CDRFREQOS,
  input CH0_CDRINCPCTRL,
  input CH0_CDRSTEPDIR,
  input CH0_CDRSTEPSQ,
  input CH0_CDRSTEPSX,
  input CH0_CLKRSVD0,
  input CH0_CLKRSVD1,
  input CH0_DFEHOLD,
  input CH0_DFEOVRD,
  input CH0_DMONFIFORESET,
  input CH0_DMONITORCLK,
  input CH0_EYESCANRESET,
  input CH0_EYESCANTRIGGER,
  input [15:0] CH0_GTRSVD,
  input CH0_GTRXRESET,
  input CH0_GTTXRESET,
  input CH0_GTYPRXN,
  input CH0_GTYPRXP,
  input CH0_HSDPPCSRESET,
  input CH0_ILORESET,
  input CH0_ILORESETMASK,
  input [2:0] CH0_LOOPBACK,
  input CH0_PCIERSTB,
  input [15:0] CH0_PCSRSVDIN,
  input CH0_PHYESMADAPTSAVE,
  input CH0_RXCDRHOLD,
  input CH0_RXCDROVRDEN,
  input CH0_RXCDRRESET,
  input [4:0] CH0_RXCHBONDI,
  input CH0_RXDAPICODEOVRDEN,
  input CH0_RXDAPICODERESET,
  input CH0_RXDAPIRESET,
  input [1:0] CH0_RXDAPIRESETMASK,
  input CH0_RXDLYALIGNREQ,
  input CH0_RXEQTRAINING,
  input CH0_RXGEARBOXSLIP,
  input CH0_RXLATCLK,
  input CH0_RXLPMEN,
  input CH0_RXMLDCHAINDONE,
  input CH0_RXMLDCHAINREQ,
  input CH0_RXMLFINEALIGNREQ,
  input CH0_RXOOBRESET,
  input [4:0] CH0_RXPCSRESETMASK,
  input [1:0] CH0_RXPD,
  input CH0_RXPHALIGNREQ,
  input [1:0] CH0_RXPHALIGNRESETMASK,
  input CH0_RXPHDLYPD,
  input CH0_RXPHDLYRESET,
  input CH0_RXPHSETINITREQ,
  input CH0_RXPHSHIFT180,
  input [6:0] CH0_RXPMARESETMASK,
  input CH0_RXPOLARITY,
  input CH0_RXPRBSCNTRESET,
  input [3:0] CH0_RXPRBSSEL,
  input CH0_RXPROGDIVRESET,
  input CH0_RXQPIEN,
  input [7:0] CH0_RXRATE,
  input [1:0] CH0_RXRESETMODE,
  input CH0_RXSLIDE,
  input CH0_RXSYNCALLIN,
  input CH0_RXTERMINATION,
  input CH0_RXUSERRDY,
  input CH0_RXUSRCLK,
  input CH0_TSTCLK0,
  input CH0_TSTCLK1,
  input CH0_TXCOMINIT,
  input CH0_TXCOMSAS,
  input CH0_TXCOMWAKE,
  input [15:0] CH0_TXCTRL0,
  input [15:0] CH0_TXCTRL1,
  input [7:0] CH0_TXCTRL2,
  input CH0_TXDAPICODEOVRDEN,
  input CH0_TXDAPICODERESET,
  input CH0_TXDAPIRESET,
  input [1:0] CH0_TXDAPIRESETMASK,
  input [127:0] CH0_TXDATA,
  input [1:0] CH0_TXDEEMPH,
  input CH0_TXDETECTRX,
  input [4:0] CH0_TXDIFFCTRL,
  input CH0_TXDLYALIGNREQ,
  input CH0_TXELECIDLE,
  input [5:0] CH0_TXHEADER,
  input CH0_TXINHIBIT,
  input CH0_TXLATCLK,
  input [6:0] CH0_TXMAINCURSOR,
  input [2:0] CH0_TXMARGIN,
  input CH0_TXMLDCHAINDONE,
  input CH0_TXMLDCHAINREQ,
  input CH0_TXONESZEROS,
  input CH0_TXPAUSEDELAYALIGN,
  input CH0_TXPCSRESETMASK,
  input [1:0] CH0_TXPD,
  input CH0_TXPHALIGNREQ,
  input [1:0] CH0_TXPHALIGNRESETMASK,
  input CH0_TXPHDLYPD,
  input CH0_TXPHDLYRESET,
  input CH0_TXPHDLYTSTCLK,
  input CH0_TXPHSETINITREQ,
  input CH0_TXPHSHIFT180,
  input CH0_TXPICODEOVRDEN,
  input CH0_TXPICODERESET,
  input CH0_TXPIPPMEN,
  input [4:0] CH0_TXPIPPMSTEPSIZE,
  input CH0_TXPISOPD,
  input [2:0] CH0_TXPMARESETMASK,
  input CH0_TXPOLARITY,
  input [4:0] CH0_TXPOSTCURSOR,
  input CH0_TXPRBSFORCEERR,
  input [3:0] CH0_TXPRBSSEL,
  input [4:0] CH0_TXPRECURSOR,
  input CH0_TXPROGDIVRESET,
  input CH0_TXQPIBIASEN,
  input CH0_TXQPIWEAKPU,
  input [7:0] CH0_TXRATE,
  input [1:0] CH0_TXRESETMODE,
  input [6:0] CH0_TXSEQUENCE,
  input CH0_TXSWING,
  input CH0_TXSYNCALLIN,
  input CH0_TXUSERRDY,
  input CH0_TXUSRCLK,
  input CH1_CDRBMCDRREQ,
  input CH1_CDRFREQOS,
  input CH1_CDRINCPCTRL,
  input CH1_CDRSTEPDIR,
  input CH1_CDRSTEPSQ,
  input CH1_CDRSTEPSX,
  input CH1_CLKRSVD0,
  input CH1_CLKRSVD1,
  input CH1_DFEHOLD,
  input CH1_DFEOVRD,
  input CH1_DMONFIFORESET,
  input CH1_DMONITORCLK,
  input CH1_EYESCANRESET,
  input CH1_EYESCANTRIGGER,
  input [15:0] CH1_GTRSVD,
  input CH1_GTRXRESET,
  input CH1_GTTXRESET,
  input CH1_GTYPRXN,
  input CH1_GTYPRXP,
  input CH1_HSDPPCSRESET,
  input CH1_ILORESET,
  input CH1_ILORESETMASK,
  input [2:0] CH1_LOOPBACK,
  input CH1_PCIERSTB,
  input [15:0] CH1_PCSRSVDIN,
  input CH1_PHYESMADAPTSAVE,
  input CH1_RXCDRHOLD,
  input CH1_RXCDROVRDEN,
  input CH1_RXCDRRESET,
  input [4:0] CH1_RXCHBONDI,
  input CH1_RXDAPICODEOVRDEN,
  input CH1_RXDAPICODERESET,
  input CH1_RXDAPIRESET,
  input [1:0] CH1_RXDAPIRESETMASK,
  input CH1_RXDLYALIGNREQ,
  input CH1_RXEQTRAINING,
  input CH1_RXGEARBOXSLIP,
  input CH1_RXLATCLK,
  input CH1_RXLPMEN,
  input CH1_RXMLDCHAINDONE,
  input CH1_RXMLDCHAINREQ,
  input CH1_RXMLFINEALIGNREQ,
  input CH1_RXOOBRESET,
  input [4:0] CH1_RXPCSRESETMASK,
  input [1:0] CH1_RXPD,
  input CH1_RXPHALIGNREQ,
  input [1:0] CH1_RXPHALIGNRESETMASK,
  input CH1_RXPHDLYPD,
  input CH1_RXPHDLYRESET,
  input CH1_RXPHSETINITREQ,
  input CH1_RXPHSHIFT180,
  input [6:0] CH1_RXPMARESETMASK,
  input CH1_RXPOLARITY,
  input CH1_RXPRBSCNTRESET,
  input [3:0] CH1_RXPRBSSEL,
  input CH1_RXPROGDIVRESET,
  input CH1_RXQPIEN,
  input [7:0] CH1_RXRATE,
  input [1:0] CH1_RXRESETMODE,
  input CH1_RXSLIDE,
  input CH1_RXSYNCALLIN,
  input CH1_RXTERMINATION,
  input CH1_RXUSERRDY,
  input CH1_RXUSRCLK,
  input CH1_TSTCLK0,
  input CH1_TSTCLK1,
  input CH1_TXCOMINIT,
  input CH1_TXCOMSAS,
  input CH1_TXCOMWAKE,
  input [15:0] CH1_TXCTRL0,
  input [15:0] CH1_TXCTRL1,
  input [7:0] CH1_TXCTRL2,
  input CH1_TXDAPICODEOVRDEN,
  input CH1_TXDAPICODERESET,
  input CH1_TXDAPIRESET,
  input [1:0] CH1_TXDAPIRESETMASK,
  input [127:0] CH1_TXDATA,
  input [1:0] CH1_TXDEEMPH,
  input CH1_TXDETECTRX,
  input [4:0] CH1_TXDIFFCTRL,
  input CH1_TXDLYALIGNREQ,
  input CH1_TXELECIDLE,
  input [5:0] CH1_TXHEADER,
  input CH1_TXINHIBIT,
  input CH1_TXLATCLK,
  input [6:0] CH1_TXMAINCURSOR,
  input [2:0] CH1_TXMARGIN,
  input CH1_TXMLDCHAINDONE,
  input CH1_TXMLDCHAINREQ,
  input CH1_TXONESZEROS,
  input CH1_TXPAUSEDELAYALIGN,
  input CH1_TXPCSRESETMASK,
  input [1:0] CH1_TXPD,
  input CH1_TXPHALIGNREQ,
  input [1:0] CH1_TXPHALIGNRESETMASK,
  input CH1_TXPHDLYPD,
  input CH1_TXPHDLYRESET,
  input CH1_TXPHDLYTSTCLK,
  input CH1_TXPHSETINITREQ,
  input CH1_TXPHSHIFT180,
  input CH1_TXPICODEOVRDEN,
  input CH1_TXPICODERESET,
  input CH1_TXPIPPMEN,
  input [4:0] CH1_TXPIPPMSTEPSIZE,
  input CH1_TXPISOPD,
  input [2:0] CH1_TXPMARESETMASK,
  input CH1_TXPOLARITY,
  input [4:0] CH1_TXPOSTCURSOR,
  input CH1_TXPRBSFORCEERR,
  input [3:0] CH1_TXPRBSSEL,
  input [4:0] CH1_TXPRECURSOR,
  input CH1_TXPROGDIVRESET,
  input CH1_TXQPIBIASEN,
  input CH1_TXQPIWEAKPU,
  input [7:0] CH1_TXRATE,
  input [1:0] CH1_TXRESETMODE,
  input [6:0] CH1_TXSEQUENCE,
  input CH1_TXSWING,
  input CH1_TXSYNCALLIN,
  input CH1_TXUSERRDY,
  input CH1_TXUSRCLK,
  input CH2_CDRBMCDRREQ,
  input CH2_CDRFREQOS,
  input CH2_CDRINCPCTRL,
  input CH2_CDRSTEPDIR,
  input CH2_CDRSTEPSQ,
  input CH2_CDRSTEPSX,
  input CH2_CLKRSVD0,
  input CH2_CLKRSVD1,
  input CH2_DFEHOLD,
  input CH2_DFEOVRD,
  input CH2_DMONFIFORESET,
  input CH2_DMONITORCLK,
  input CH2_EYESCANRESET,
  input CH2_EYESCANTRIGGER,
  input [15:0] CH2_GTRSVD,
  input CH2_GTRXRESET,
  input CH2_GTTXRESET,
  input CH2_GTYPRXN,
  input CH2_GTYPRXP,
  input CH2_HSDPPCSRESET,
  input CH2_ILORESET,
  input CH2_ILORESETMASK,
  input [2:0] CH2_LOOPBACK,
  input CH2_PCIERSTB,
  input [15:0] CH2_PCSRSVDIN,
  input CH2_PHYESMADAPTSAVE,
  input CH2_RXCDRHOLD,
  input CH2_RXCDROVRDEN,
  input CH2_RXCDRRESET,
  input [4:0] CH2_RXCHBONDI,
  input CH2_RXDAPICODEOVRDEN,
  input CH2_RXDAPICODERESET,
  input CH2_RXDAPIRESET,
  input [1:0] CH2_RXDAPIRESETMASK,
  input CH2_RXDLYALIGNREQ,
  input CH2_RXEQTRAINING,
  input CH2_RXGEARBOXSLIP,
  input CH2_RXLATCLK,
  input CH2_RXLPMEN,
  input CH2_RXMLDCHAINDONE,
  input CH2_RXMLDCHAINREQ,
  input CH2_RXMLFINEALIGNREQ,
  input CH2_RXOOBRESET,
  input [4:0] CH2_RXPCSRESETMASK,
  input [1:0] CH2_RXPD,
  input CH2_RXPHALIGNREQ,
  input [1:0] CH2_RXPHALIGNRESETMASK,
  input CH2_RXPHDLYPD,
  input CH2_RXPHDLYRESET,
  input CH2_RXPHSETINITREQ,
  input CH2_RXPHSHIFT180,
  input [6:0] CH2_RXPMARESETMASK,
  input CH2_RXPOLARITY,
  input CH2_RXPRBSCNTRESET,
  input [3:0] CH2_RXPRBSSEL,
  input CH2_RXPROGDIVRESET,
  input CH2_RXQPIEN,
  input [7:0] CH2_RXRATE,
  input [1:0] CH2_RXRESETMODE,
  input CH2_RXSLIDE,
  input CH2_RXSYNCALLIN,
  input CH2_RXTERMINATION,
  input CH2_RXUSERRDY,
  input CH2_RXUSRCLK,
  input CH2_TSTCLK0,
  input CH2_TSTCLK1,
  input CH2_TXCOMINIT,
  input CH2_TXCOMSAS,
  input CH2_TXCOMWAKE,
  input [15:0] CH2_TXCTRL0,
  input [15:0] CH2_TXCTRL1,
  input [7:0] CH2_TXCTRL2,
  input CH2_TXDAPICODEOVRDEN,
  input CH2_TXDAPICODERESET,
  input CH2_TXDAPIRESET,
  input [1:0] CH2_TXDAPIRESETMASK,
  input [127:0] CH2_TXDATA,
  input [1:0] CH2_TXDEEMPH,
  input CH2_TXDETECTRX,
  input [4:0] CH2_TXDIFFCTRL,
  input CH2_TXDLYALIGNREQ,
  input CH2_TXELECIDLE,
  input [5:0] CH2_TXHEADER,
  input CH2_TXINHIBIT,
  input CH2_TXLATCLK,
  input [6:0] CH2_TXMAINCURSOR,
  input [2:0] CH2_TXMARGIN,
  input CH2_TXMLDCHAINDONE,
  input CH2_TXMLDCHAINREQ,
  input CH2_TXONESZEROS,
  input CH2_TXPAUSEDELAYALIGN,
  input CH2_TXPCSRESETMASK,
  input [1:0] CH2_TXPD,
  input CH2_TXPHALIGNREQ,
  input [1:0] CH2_TXPHALIGNRESETMASK,
  input CH2_TXPHDLYPD,
  input CH2_TXPHDLYRESET,
  input CH2_TXPHDLYTSTCLK,
  input CH2_TXPHSETINITREQ,
  input CH2_TXPHSHIFT180,
  input CH2_TXPICODEOVRDEN,
  input CH2_TXPICODERESET,
  input CH2_TXPIPPMEN,
  input [4:0] CH2_TXPIPPMSTEPSIZE,
  input CH2_TXPISOPD,
  input [2:0] CH2_TXPMARESETMASK,
  input CH2_TXPOLARITY,
  input [4:0] CH2_TXPOSTCURSOR,
  input CH2_TXPRBSFORCEERR,
  input [3:0] CH2_TXPRBSSEL,
  input [4:0] CH2_TXPRECURSOR,
  input CH2_TXPROGDIVRESET,
  input CH2_TXQPIBIASEN,
  input CH2_TXQPIWEAKPU,
  input [7:0] CH2_TXRATE,
  input [1:0] CH2_TXRESETMODE,
  input [6:0] CH2_TXSEQUENCE,
  input CH2_TXSWING,
  input CH2_TXSYNCALLIN,
  input CH2_TXUSERRDY,
  input CH2_TXUSRCLK,
  input CH3_CDRBMCDRREQ,
  input CH3_CDRFREQOS,
  input CH3_CDRINCPCTRL,
  input CH3_CDRSTEPDIR,
  input CH3_CDRSTEPSQ,
  input CH3_CDRSTEPSX,
  input CH3_CLKRSVD0,
  input CH3_CLKRSVD1,
  input CH3_DFEHOLD,
  input CH3_DFEOVRD,
  input CH3_DMONFIFORESET,
  input CH3_DMONITORCLK,
  input CH3_EYESCANRESET,
  input CH3_EYESCANTRIGGER,
  input [15:0] CH3_GTRSVD,
  input CH3_GTRXRESET,
  input CH3_GTTXRESET,
  input CH3_GTYPRXN,
  input CH3_GTYPRXP,
  input CH3_HSDPPCSRESET,
  input CH3_ILORESET,
  input CH3_ILORESETMASK,
  input [2:0] CH3_LOOPBACK,
  input CH3_PCIERSTB,
  input [15:0] CH3_PCSRSVDIN,
  input CH3_PHYESMADAPTSAVE,
  input CH3_RXCDRHOLD,
  input CH3_RXCDROVRDEN,
  input CH3_RXCDRRESET,
  input [4:0] CH3_RXCHBONDI,
  input CH3_RXDAPICODEOVRDEN,
  input CH3_RXDAPICODERESET,
  input CH3_RXDAPIRESET,
  input [1:0] CH3_RXDAPIRESETMASK,
  input CH3_RXDLYALIGNREQ,
  input CH3_RXEQTRAINING,
  input CH3_RXGEARBOXSLIP,
  input CH3_RXLATCLK,
  input CH3_RXLPMEN,
  input CH3_RXMLDCHAINDONE,
  input CH3_RXMLDCHAINREQ,
  input CH3_RXMLFINEALIGNREQ,
  input CH3_RXOOBRESET,
  input [4:0] CH3_RXPCSRESETMASK,
  input [1:0] CH3_RXPD,
  input CH3_RXPHALIGNREQ,
  input [1:0] CH3_RXPHALIGNRESETMASK,
  input CH3_RXPHDLYPD,
  input CH3_RXPHDLYRESET,
  input CH3_RXPHSETINITREQ,
  input CH3_RXPHSHIFT180,
  input [6:0] CH3_RXPMARESETMASK,
  input CH3_RXPOLARITY,
  input CH3_RXPRBSCNTRESET,
  input [3:0] CH3_RXPRBSSEL,
  input CH3_RXPROGDIVRESET,
  input CH3_RXQPIEN,
  input [7:0] CH3_RXRATE,
  input [1:0] CH3_RXRESETMODE,
  input CH3_RXSLIDE,
  input CH3_RXSYNCALLIN,
  input CH3_RXTERMINATION,
  input CH3_RXUSERRDY,
  input CH3_RXUSRCLK,
  input CH3_TSTCLK0,
  input CH3_TSTCLK1,
  input CH3_TXCOMINIT,
  input CH3_TXCOMSAS,
  input CH3_TXCOMWAKE,
  input [15:0] CH3_TXCTRL0,
  input [15:0] CH3_TXCTRL1,
  input [7:0] CH3_TXCTRL2,
  input CH3_TXDAPICODEOVRDEN,
  input CH3_TXDAPICODERESET,
  input CH3_TXDAPIRESET,
  input [1:0] CH3_TXDAPIRESETMASK,
  input [127:0] CH3_TXDATA,
  input [1:0] CH3_TXDEEMPH,
  input CH3_TXDETECTRX,
  input [4:0] CH3_TXDIFFCTRL,
  input CH3_TXDLYALIGNREQ,
  input CH3_TXELECIDLE,
  input [5:0] CH3_TXHEADER,
  input CH3_TXINHIBIT,
  input CH3_TXLATCLK,
  input [6:0] CH3_TXMAINCURSOR,
  input [2:0] CH3_TXMARGIN,
  input CH3_TXMLDCHAINDONE,
  input CH3_TXMLDCHAINREQ,
  input CH3_TXONESZEROS,
  input CH3_TXPAUSEDELAYALIGN,
  input CH3_TXPCSRESETMASK,
  input [1:0] CH3_TXPD,
  input CH3_TXPHALIGNREQ,
  input [1:0] CH3_TXPHALIGNRESETMASK,
  input CH3_TXPHDLYPD,
  input CH3_TXPHDLYRESET,
  input CH3_TXPHDLYTSTCLK,
  input CH3_TXPHSETINITREQ,
  input CH3_TXPHSHIFT180,
  input CH3_TXPICODEOVRDEN,
  input CH3_TXPICODERESET,
  input CH3_TXPIPPMEN,
  input [4:0] CH3_TXPIPPMSTEPSIZE,
  input CH3_TXPISOPD,
  input [2:0] CH3_TXPMARESETMASK,
  input CH3_TXPOLARITY,
  input [4:0] CH3_TXPOSTCURSOR,
  input CH3_TXPRBSFORCEERR,
  input [3:0] CH3_TXPRBSSEL,
  input [4:0] CH3_TXPRECURSOR,
  input CH3_TXPROGDIVRESET,
  input CH3_TXQPIBIASEN,
  input CH3_TXQPIWEAKPU,
  input [7:0] CH3_TXRATE,
  input [1:0] CH3_TXRESETMODE,
  input [6:0] CH3_TXSEQUENCE,
  input CH3_TXSWING,
  input CH3_TXSYNCALLIN,
  input CH3_TXUSERRDY,
  input CH3_TXUSRCLK,
  input COESTATUSDEBUG,
  input [7:0] CTRLRSVDIN,
  input DEBUGTRACECLK,
  input DEBUGTRACEREADY,
  input [31:0] GPI,
  input [7:0] HSCLK0_LCPLLFBDIV,
  input HSCLK0_LCPLLGTGREFCLK,
  input HSCLK0_LCPLLGTREFCLK0,
  input HSCLK0_LCPLLGTREFCLK1,
  input HSCLK0_LCPLLNORTHREFCLK0,
  input HSCLK0_LCPLLNORTHREFCLK1,
  input HSCLK0_LCPLLPD,
  input [2:0] HSCLK0_LCPLLREFCLKSEL,
  input HSCLK0_LCPLLRESET,
  input HSCLK0_LCPLLRESETBYPASSMODE,
  input [1:0] HSCLK0_LCPLLRESETMASK,
  input [25:0] HSCLK0_LCPLLSDMDATA,
  input HSCLK0_LCPLLSDMTOGGLE,
  input HSCLK0_LCPLLSOUTHREFCLK0,
  input HSCLK0_LCPLLSOUTHREFCLK1,
  input [7:0] HSCLK0_RPLLFBDIV,
  input HSCLK0_RPLLGTGREFCLK,
  input HSCLK0_RPLLGTREFCLK0,
  input HSCLK0_RPLLGTREFCLK1,
  input HSCLK0_RPLLNORTHREFCLK0,
  input HSCLK0_RPLLNORTHREFCLK1,
  input HSCLK0_RPLLPD,
  input [2:0] HSCLK0_RPLLREFCLKSEL,
  input HSCLK0_RPLLRESET,
  input HSCLK0_RPLLRESETBYPASSMODE,
  input [1:0] HSCLK0_RPLLRESETMASK,
  input [25:0] HSCLK0_RPLLSDMDATA,
  input HSCLK0_RPLLSDMTOGGLE,
  input HSCLK0_RPLLSOUTHREFCLK0,
  input HSCLK0_RPLLSOUTHREFCLK1,
  input [7:0] HSCLK1_LCPLLFBDIV,
  input HSCLK1_LCPLLGTGREFCLK,
  input HSCLK1_LCPLLGTREFCLK0,
  input HSCLK1_LCPLLGTREFCLK1,
  input HSCLK1_LCPLLNORTHREFCLK0,
  input HSCLK1_LCPLLNORTHREFCLK1,
  input HSCLK1_LCPLLPD,
  input [2:0] HSCLK1_LCPLLREFCLKSEL,
  input HSCLK1_LCPLLRESET,
  input HSCLK1_LCPLLRESETBYPASSMODE,
  input [1:0] HSCLK1_LCPLLRESETMASK,
  input [25:0] HSCLK1_LCPLLSDMDATA,
  input HSCLK1_LCPLLSDMTOGGLE,
  input HSCLK1_LCPLLSOUTHREFCLK0,
  input HSCLK1_LCPLLSOUTHREFCLK1,
  input [7:0] HSCLK1_RPLLFBDIV,
  input HSCLK1_RPLLGTGREFCLK,
  input HSCLK1_RPLLGTREFCLK0,
  input HSCLK1_RPLLGTREFCLK1,
  input HSCLK1_RPLLNORTHREFCLK0,
  input HSCLK1_RPLLNORTHREFCLK1,
  input HSCLK1_RPLLPD,
  input [2:0] HSCLK1_RPLLREFCLKSEL,
  input HSCLK1_RPLLRESET,
  input HSCLK1_RPLLRESETBYPASSMODE,
  input [1:0] HSCLK1_RPLLRESETMASK,
  input [25:0] HSCLK1_RPLLSDMDATA,
  input HSCLK1_RPLLSDMTOGGLE,
  input HSCLK1_RPLLSOUTHREFCLK0,
  input HSCLK1_RPLLSOUTHREFCLK1,
  input M0_AXIS_TREADY,
  input M1_AXIS_TREADY,
  input M2_AXIS_TREADY,
  input [3:0] MSTRXRESET,
  input [3:0] MSTTXRESET,
  input PCIELINKREACHTARGET,
  input [5:0] PCIELTSSM,
  input [5:0] PIPENORTHIN,
  input [5:0] PIPESOUTHIN,
  input RCALENB,
  input REFCLK0_CLKTESTSIG,
  input REFCLK0_GTREFCLKPD,
  input REFCLK1_CLKTESTSIG,
  input REFCLK1_GTREFCLKPD,
  input [1:0] RESETDONE_NORTHIN,
  input [1:0] RESETDONE_SOUTHIN,
  input RXMARGINCLK,
  input [3:0] RXMARGINREQCMD,
  input [1:0] RXMARGINREQLANENUM,
  input [7:0] RXMARGINREQPAYLD,
  input RXMARGINREQREQ,
  input RXMARGINRESACK,
  input [3:0] RXPINORTHIN,
  input [3:0] RXPISOUTHIN,
  input [31:0] S0_AXIS_TDATA,
  input S0_AXIS_TLAST,
  input S0_AXIS_TVALID,
  input [31:0] S1_AXIS_TDATA,
  input S1_AXIS_TLAST,
  input S1_AXIS_TVALID,
  input [31:0] S2_AXIS_TDATA,
  input S2_AXIS_TLAST,
  input S2_AXIS_TVALID,
  input TRIGACKOUT0,
  input TRIGIN0,
  input [3:0] TXPINORTHIN,
  input [3:0] TXPISOUTHIN,
  input UBENABLE,
  input [11:0] UBINTR,
  input UBIOLMBRST,
  input UBMBRST,
  input UBRXUART
);

// define constants
  localparam MODULE_NAME = "GTYP_QUAD";
  
  reg trig_attr;
// include dynamic registers - XILINX test only
`ifdef XIL_DR
  `include "GTYP_QUAD_dr.v"
`else
  reg [31:0] A_CFG0_REG = A_CFG0;
  reg [31:0] A_CFG1_REG = A_CFG1;
  reg [31:0] A_CFG2_REG = A_CFG2;
  reg [31:0] A_CFG3_REG = A_CFG3;
  reg [31:0] A_CFG4_REG = A_CFG4;
  reg [31:0] A_CFG5_REG = A_CFG5;
  reg [31:0] CH0_ADAPT_APT_CFG_REG = CH0_ADAPT_APT_CFG;
  reg [31:0] CH0_ADAPT_CAL_CFG_REG = CH0_ADAPT_CAL_CFG;
  reg [31:0] CH0_ADAPT_DFE_CFG_REG = CH0_ADAPT_DFE_CFG;
  reg [31:0] CH0_ADAPT_GC_CFG0_REG = CH0_ADAPT_GC_CFG0;
  reg [31:0] CH0_ADAPT_GC_CFG1_REG = CH0_ADAPT_GC_CFG1;
  reg [31:0] CH0_ADAPT_GC_CFG2_REG = CH0_ADAPT_GC_CFG2;
  reg [31:0] CH0_ADAPT_GC_CFG3_REG = CH0_ADAPT_GC_CFG3;
  reg [31:0] CH0_ADAPT_GEN_CFG0_REG = CH0_ADAPT_GEN_CFG0;
  reg [31:0] CH0_ADAPT_GEN_CFG1_REG = CH0_ADAPT_GEN_CFG1;
  reg [31:0] CH0_ADAPT_GEN_CFG2_REG = CH0_ADAPT_GEN_CFG2;
  reg [31:0] CH0_ADAPT_GEN_CFG3_REG = CH0_ADAPT_GEN_CFG3;
  reg [31:0] CH0_ADAPT_H01_CFG_REG = CH0_ADAPT_H01_CFG;
  reg [31:0] CH0_ADAPT_H23_CFG_REG = CH0_ADAPT_H23_CFG;
  reg [31:0] CH0_ADAPT_H45_CFG_REG = CH0_ADAPT_H45_CFG;
  reg [31:0] CH0_ADAPT_H67_CFG_REG = CH0_ADAPT_H67_CFG;
  reg [31:0] CH0_ADAPT_H89_CFG_REG = CH0_ADAPT_H89_CFG;
  reg [31:0] CH0_ADAPT_HAB_CFG_REG = CH0_ADAPT_HAB_CFG;
  reg [31:0] CH0_ADAPT_HCD_CFG_REG = CH0_ADAPT_HCD_CFG;
  reg [31:0] CH0_ADAPT_HEF_CFG_REG = CH0_ADAPT_HEF_CFG;
  reg [31:0] CH0_ADAPT_KH_CFG0_REG = CH0_ADAPT_KH_CFG0;
  reg [31:0] CH0_ADAPT_KH_CFG1_REG = CH0_ADAPT_KH_CFG1;
  reg [31:0] CH0_ADAPT_KH_CFG2_REG = CH0_ADAPT_KH_CFG2;
  reg [31:0] CH0_ADAPT_KH_CFG3_REG = CH0_ADAPT_KH_CFG3;
  reg [31:0] CH0_ADAPT_KH_CFG4_REG = CH0_ADAPT_KH_CFG4;
  reg [31:0] CH0_ADAPT_KH_CFG5_REG = CH0_ADAPT_KH_CFG5;
  reg [31:0] CH0_ADAPT_KL_CFG0_REG = CH0_ADAPT_KL_CFG0;
  reg [31:0] CH0_ADAPT_KL_CFG1_REG = CH0_ADAPT_KL_CFG1;
  reg [31:0] CH0_ADAPT_LCK_CFG0_REG = CH0_ADAPT_LCK_CFG0;
  reg [31:0] CH0_ADAPT_LCK_CFG1_REG = CH0_ADAPT_LCK_CFG1;
  reg [31:0] CH0_ADAPT_LCK_CFG2_REG = CH0_ADAPT_LCK_CFG2;
  reg [31:0] CH0_ADAPT_LCK_CFG3_REG = CH0_ADAPT_LCK_CFG3;
  reg [31:0] CH0_ADAPT_LOP_CFG_REG = CH0_ADAPT_LOP_CFG;
  reg [31:0] CH0_ADAPT_OS_CFG_REG = CH0_ADAPT_OS_CFG;
  reg [31:0] CH0_CHCLK_ILO_CFG_REG = CH0_CHCLK_ILO_CFG;
  reg [31:0] CH0_CHCLK_MISC_CFG_REG = CH0_CHCLK_MISC_CFG;
  reg [31:0] CH0_CHCLK_RSV_CFG_REG = CH0_CHCLK_RSV_CFG;
  reg [31:0] CH0_CHCLK_RXCAL_CFG_REG = CH0_CHCLK_RXCAL_CFG;
  reg [31:0] CH0_CHCLK_RXCAL_CFG1_REG = CH0_CHCLK_RXCAL_CFG1;
  reg [31:0] CH0_CHCLK_RXCAL_CFG2_REG = CH0_CHCLK_RXCAL_CFG2;
  reg [31:0] CH0_CHCLK_RXPI_CFG_REG = CH0_CHCLK_RXPI_CFG;
  reg [31:0] CH0_CHCLK_TXCAL_CFG_REG = CH0_CHCLK_TXCAL_CFG;
  reg [31:0] CH0_CHCLK_TXPI_CFG0_REG = CH0_CHCLK_TXPI_CFG0;
  reg [31:0] CH0_CHL_RSV_CFG0_REG = CH0_CHL_RSV_CFG0;
  reg [31:0] CH0_CHL_RSV_CFG1_REG = CH0_CHL_RSV_CFG1;
  reg [31:0] CH0_CHL_RSV_CFG2_REG = CH0_CHL_RSV_CFG2;
  reg [31:0] CH0_CHL_RSV_CFG3_REG = CH0_CHL_RSV_CFG3;
  reg [31:0] CH0_CHL_RSV_CFG4_REG = CH0_CHL_RSV_CFG4;
  reg [31:0] CH0_DA_CFG_REG = CH0_DA_CFG;
  reg [31:0] CH0_EYESCAN_CFG0_REG = CH0_EYESCAN_CFG0;
  reg [31:0] CH0_EYESCAN_CFG1_REG = CH0_EYESCAN_CFG1;
  reg [31:0] CH0_EYESCAN_CFG10_REG = CH0_EYESCAN_CFG10;
  reg [31:0] CH0_EYESCAN_CFG11_REG = CH0_EYESCAN_CFG11;
  reg [31:0] CH0_EYESCAN_CFG12_REG = CH0_EYESCAN_CFG12;
  reg [31:0] CH0_EYESCAN_CFG13_REG = CH0_EYESCAN_CFG13;
  reg [31:0] CH0_EYESCAN_CFG14_REG = CH0_EYESCAN_CFG14;
  reg [31:0] CH0_EYESCAN_CFG15_REG = CH0_EYESCAN_CFG15;
  reg [31:0] CH0_EYESCAN_CFG16_REG = CH0_EYESCAN_CFG16;
  reg [31:0] CH0_EYESCAN_CFG2_REG = CH0_EYESCAN_CFG2;
  reg [31:0] CH0_EYESCAN_CFG3_REG = CH0_EYESCAN_CFG3;
  reg [31:0] CH0_EYESCAN_CFG4_REG = CH0_EYESCAN_CFG4;
  reg [31:0] CH0_EYESCAN_CFG5_REG = CH0_EYESCAN_CFG5;
  reg [31:0] CH0_EYESCAN_CFG6_REG = CH0_EYESCAN_CFG6;
  reg [31:0] CH0_EYESCAN_CFG7_REG = CH0_EYESCAN_CFG7;
  reg [31:0] CH0_EYESCAN_CFG8_REG = CH0_EYESCAN_CFG8;
  reg [31:0] CH0_EYESCAN_CFG9_REG = CH0_EYESCAN_CFG9;
  reg [31:0] CH0_FABRIC_INTF_CFG0_REG = CH0_FABRIC_INTF_CFG0;
  reg [31:0] CH0_FABRIC_INTF_CFG1_REG = CH0_FABRIC_INTF_CFG1;
  reg [31:0] CH0_FABRIC_INTF_CFG2_REG = CH0_FABRIC_INTF_CFG2;
  reg [31:0] CH0_FABRIC_INTF_CFG3_REG = CH0_FABRIC_INTF_CFG3;
  reg [31:0] CH0_FABRIC_INTF_CFG4_REG = CH0_FABRIC_INTF_CFG4;
  reg [31:0] CH0_FABRIC_INTF_CFG5_REG = CH0_FABRIC_INTF_CFG5;
  reg [0:0] CH0_INSTANTIATED_REG = CH0_INSTANTIATED;
  reg [31:0] CH0_MONITOR_CFG_REG = CH0_MONITOR_CFG;
  reg [31:0] CH0_PIPE_CTRL_CFG0_REG = CH0_PIPE_CTRL_CFG0;
  reg [31:0] CH0_PIPE_CTRL_CFG1_REG = CH0_PIPE_CTRL_CFG1;
  reg [31:0] CH0_PIPE_CTRL_CFG10_REG = CH0_PIPE_CTRL_CFG10;
  reg [31:0] CH0_PIPE_CTRL_CFG2_REG = CH0_PIPE_CTRL_CFG2;
  reg [31:0] CH0_PIPE_CTRL_CFG3_REG = CH0_PIPE_CTRL_CFG3;
  reg [31:0] CH0_PIPE_CTRL_CFG4_REG = CH0_PIPE_CTRL_CFG4;
  reg [31:0] CH0_PIPE_CTRL_CFG5_REG = CH0_PIPE_CTRL_CFG5;
  reg [31:0] CH0_PIPE_CTRL_CFG6_REG = CH0_PIPE_CTRL_CFG6;
  reg [31:0] CH0_PIPE_CTRL_CFG7_REG = CH0_PIPE_CTRL_CFG7;
  reg [31:0] CH0_PIPE_CTRL_CFG8_REG = CH0_PIPE_CTRL_CFG8;
  reg [31:0] CH0_PIPE_CTRL_CFG9_REG = CH0_PIPE_CTRL_CFG9;
  reg [31:0] CH0_PIPE_TX_EQ_CFG0_REG = CH0_PIPE_TX_EQ_CFG0;
  reg [31:0] CH0_PIPE_TX_EQ_CFG1_REG = CH0_PIPE_TX_EQ_CFG1;
  reg [31:0] CH0_PIPE_TX_EQ_CFG2_REG = CH0_PIPE_TX_EQ_CFG2;
  reg [31:0] CH0_PIPE_TX_EQ_CFG3_REG = CH0_PIPE_TX_EQ_CFG3;
  reg [31:0] CH0_RESET_BYP_HDSHK_CFG_REG = CH0_RESET_BYP_HDSHK_CFG;
  reg [31:0] CH0_RESET_CFG_REG = CH0_RESET_CFG;
  reg [31:0] CH0_RESET_LOOPER_ID_CFG_REG = CH0_RESET_LOOPER_ID_CFG;
  reg [31:0] CH0_RESET_LOOP_ID_CFG0_REG = CH0_RESET_LOOP_ID_CFG0;
  reg [31:0] CH0_RESET_LOOP_ID_CFG1_REG = CH0_RESET_LOOP_ID_CFG1;
  reg [31:0] CH0_RESET_LOOP_ID_CFG2_REG = CH0_RESET_LOOP_ID_CFG2;
  reg [31:0] CH0_RESET_TIME_CFG0_REG = CH0_RESET_TIME_CFG0;
  reg [31:0] CH0_RESET_TIME_CFG1_REG = CH0_RESET_TIME_CFG1;
  reg [31:0] CH0_RESET_TIME_CFG2_REG = CH0_RESET_TIME_CFG2;
  reg [31:0] CH0_RESET_TIME_CFG3_REG = CH0_RESET_TIME_CFG3;
  real CH0_RXOUTCLK_FREQ_REG = CH0_RXOUTCLK_FREQ;
  real CH0_RXOUTCLK_REF_FREQ_REG = CH0_RXOUTCLK_REF_FREQ;
  reg [192:1] CH0_RXOUTCLK_REF_SOURCE_REG = CH0_RXOUTCLK_REF_SOURCE;
  reg [31:0] CH0_RX_CDR_CFG0_REG = CH0_RX_CDR_CFG0;
  reg [31:0] CH0_RX_CDR_CFG1_REG = CH0_RX_CDR_CFG1;
  reg [31:0] CH0_RX_CDR_CFG2_REG = CH0_RX_CDR_CFG2;
  reg [31:0] CH0_RX_CDR_CFG3_REG = CH0_RX_CDR_CFG3;
  reg [31:0] CH0_RX_CDR_CFG4_REG = CH0_RX_CDR_CFG4;
  reg [31:0] CH0_RX_CRC_CFG0_REG = CH0_RX_CRC_CFG0;
  reg [31:0] CH0_RX_CRC_CFG1_REG = CH0_RX_CRC_CFG1;
  reg [31:0] CH0_RX_CRC_CFG2_REG = CH0_RX_CRC_CFG2;
  reg [31:0] CH0_RX_CRC_CFG3_REG = CH0_RX_CRC_CFG3;
  reg [31:0] CH0_RX_CTLE_CFG0_REG = CH0_RX_CTLE_CFG0;
  reg [31:0] CH0_RX_CTLE_CFG1_REG = CH0_RX_CTLE_CFG1;
  reg [31:0] CH0_RX_DACI2V_CFG0_REG = CH0_RX_DACI2V_CFG0;
  real CH0_RX_DATA_RATE_REG = CH0_RX_DATA_RATE;
  reg [31:0] CH0_RX_DFE_CFG0_REG = CH0_RX_DFE_CFG0;
  reg [31:0] CH0_RX_ELASTIC_BUF_CFG0_REG = CH0_RX_ELASTIC_BUF_CFG0;
  reg [31:0] CH0_RX_ELASTIC_BUF_CFG1_REG = CH0_RX_ELASTIC_BUF_CFG1;
  reg [31:0] CH0_RX_ELASTIC_BUF_CFG2_REG = CH0_RX_ELASTIC_BUF_CFG2;
  reg [31:0] CH0_RX_ELASTIC_BUF_CFG3_REG = CH0_RX_ELASTIC_BUF_CFG3;
  reg [31:0] CH0_RX_ELASTIC_BUF_CFG4_REG = CH0_RX_ELASTIC_BUF_CFG4;
  reg [31:0] CH0_RX_ELASTIC_BUF_CFG5_REG = CH0_RX_ELASTIC_BUF_CFG5;
  reg [31:0] CH0_RX_ELASTIC_BUF_CFG6_REG = CH0_RX_ELASTIC_BUF_CFG6;
  reg [31:0] CH0_RX_ELASTIC_BUF_CFG7_REG = CH0_RX_ELASTIC_BUF_CFG7;
  reg [31:0] CH0_RX_ELASTIC_BUF_CFG8_REG = CH0_RX_ELASTIC_BUF_CFG8;
  reg [31:0] CH0_RX_ELASTIC_BUF_CFG9_REG = CH0_RX_ELASTIC_BUF_CFG9;
  reg [31:0] CH0_RX_MISC_CFG0_REG = CH0_RX_MISC_CFG0;
  reg [31:0] CH0_RX_OOB_CFG0_REG = CH0_RX_OOB_CFG0;
  reg [31:0] CH0_RX_OOB_CFG1_REG = CH0_RX_OOB_CFG1;
  reg [31:0] CH0_RX_PAD_CFG0_REG = CH0_RX_PAD_CFG0;
  reg [31:0] CH0_RX_PAD_CFG1_REG = CH0_RX_PAD_CFG1;
  reg [31:0] CH0_RX_PCS_CFG0_REG = CH0_RX_PCS_CFG0;
  reg [31:0] CH0_RX_PCS_CFG1_REG = CH0_RX_PCS_CFG1;
  reg [31:0] CH0_RX_PCS_CFG2_REG = CH0_RX_PCS_CFG2;
  reg [31:0] CH0_RX_PCS_CFG3_REG = CH0_RX_PCS_CFG3;
  reg [31:0] CH0_RX_PCS_CFG4_REG = CH0_RX_PCS_CFG4;
  reg [31:0] CH0_RX_PHALIGN_CFG0_REG = CH0_RX_PHALIGN_CFG0;
  reg [31:0] CH0_RX_PHALIGN_CFG1_REG = CH0_RX_PHALIGN_CFG1;
  reg [31:0] CH0_RX_PHALIGN_CFG2_REG = CH0_RX_PHALIGN_CFG2;
  reg [31:0] CH0_RX_PHALIGN_CFG3_REG = CH0_RX_PHALIGN_CFG3;
  reg [31:0] CH0_RX_PHALIGN_CFG4_REG = CH0_RX_PHALIGN_CFG4;
  reg [31:0] CH0_RX_PHALIGN_CFG5_REG = CH0_RX_PHALIGN_CFG5;
  reg [48:1] CH0_SIM_MODE_REG = CH0_SIM_MODE;
  reg [40:1] CH0_SIM_RECEIVER_DETECT_PASS_REG = CH0_SIM_RECEIVER_DETECT_PASS;
  reg [40:1] CH0_SIM_RESET_SPEEDUP_REG = CH0_SIM_RESET_SPEEDUP;
  reg [32:1] CH0_SIM_TX_EIDLE_DRIVE_LEVEL_REG = CH0_SIM_TX_EIDLE_DRIVE_LEVEL;
  real CH0_TXOUTCLK_FREQ_REG = CH0_TXOUTCLK_FREQ;
  real CH0_TXOUTCLK_REF_FREQ_REG = CH0_TXOUTCLK_REF_FREQ;
  reg [192:1] CH0_TXOUTCLK_REF_SOURCE_REG = CH0_TXOUTCLK_REF_SOURCE;
  reg [31:0] CH0_TX_10G_CFG0_REG = CH0_TX_10G_CFG0;
  reg [31:0] CH0_TX_10G_CFG1_REG = CH0_TX_10G_CFG1;
  reg [31:0] CH0_TX_10G_CFG2_REG = CH0_TX_10G_CFG2;
  reg [31:0] CH0_TX_10G_CFG3_REG = CH0_TX_10G_CFG3;
  reg [31:0] CH0_TX_ANA_CFG0_REG = CH0_TX_ANA_CFG0;
  reg [31:0] CH0_TX_CRC_CFG0_REG = CH0_TX_CRC_CFG0;
  reg [31:0] CH0_TX_CRC_CFG1_REG = CH0_TX_CRC_CFG1;
  reg [31:0] CH0_TX_CRC_CFG2_REG = CH0_TX_CRC_CFG2;
  reg [31:0] CH0_TX_CRC_CFG3_REG = CH0_TX_CRC_CFG3;
  real CH0_TX_DATA_RATE_REG = CH0_TX_DATA_RATE;
  reg [31:0] CH0_TX_DRV_CFG0_REG = CH0_TX_DRV_CFG0;
  reg [31:0] CH0_TX_DRV_CFG1_REG = CH0_TX_DRV_CFG1;
  reg [31:0] CH0_TX_PCS_CFG0_REG = CH0_TX_PCS_CFG0;
  reg [31:0] CH0_TX_PCS_CFG1_REG = CH0_TX_PCS_CFG1;
  reg [31:0] CH0_TX_PCS_CFG2_REG = CH0_TX_PCS_CFG2;
  reg [31:0] CH0_TX_PCS_CFG3_REG = CH0_TX_PCS_CFG3;
  reg [31:0] CH0_TX_PHALIGN_CFG0_REG = CH0_TX_PHALIGN_CFG0;
  reg [31:0] CH0_TX_PHALIGN_CFG1_REG = CH0_TX_PHALIGN_CFG1;
  reg [31:0] CH0_TX_PHALIGN_CFG2_REG = CH0_TX_PHALIGN_CFG2;
  reg [31:0] CH0_TX_PHALIGN_CFG3_REG = CH0_TX_PHALIGN_CFG3;
  reg [31:0] CH0_TX_PHALIGN_CFG4_REG = CH0_TX_PHALIGN_CFG4;
  reg [31:0] CH0_TX_PHALIGN_CFG5_REG = CH0_TX_PHALIGN_CFG5;
  reg [31:0] CH0_TX_PIPPM_CFG_REG = CH0_TX_PIPPM_CFG;
  reg [31:0] CH0_TX_SER_CFG0_REG = CH0_TX_SER_CFG0;
  reg [31:0] CH1_ADAPT_APT_CFG_REG = CH1_ADAPT_APT_CFG;
  reg [31:0] CH1_ADAPT_CAL_CFG_REG = CH1_ADAPT_CAL_CFG;
  reg [31:0] CH1_ADAPT_DFE_CFG_REG = CH1_ADAPT_DFE_CFG;
  reg [31:0] CH1_ADAPT_GC_CFG0_REG = CH1_ADAPT_GC_CFG0;
  reg [31:0] CH1_ADAPT_GC_CFG1_REG = CH1_ADAPT_GC_CFG1;
  reg [31:0] CH1_ADAPT_GC_CFG2_REG = CH1_ADAPT_GC_CFG2;
  reg [31:0] CH1_ADAPT_GC_CFG3_REG = CH1_ADAPT_GC_CFG3;
  reg [31:0] CH1_ADAPT_GEN_CFG0_REG = CH1_ADAPT_GEN_CFG0;
  reg [31:0] CH1_ADAPT_GEN_CFG1_REG = CH1_ADAPT_GEN_CFG1;
  reg [31:0] CH1_ADAPT_GEN_CFG2_REG = CH1_ADAPT_GEN_CFG2;
  reg [31:0] CH1_ADAPT_GEN_CFG3_REG = CH1_ADAPT_GEN_CFG3;
  reg [31:0] CH1_ADAPT_H01_CFG_REG = CH1_ADAPT_H01_CFG;
  reg [31:0] CH1_ADAPT_H23_CFG_REG = CH1_ADAPT_H23_CFG;
  reg [31:0] CH1_ADAPT_H45_CFG_REG = CH1_ADAPT_H45_CFG;
  reg [31:0] CH1_ADAPT_H67_CFG_REG = CH1_ADAPT_H67_CFG;
  reg [31:0] CH1_ADAPT_H89_CFG_REG = CH1_ADAPT_H89_CFG;
  reg [31:0] CH1_ADAPT_HAB_CFG_REG = CH1_ADAPT_HAB_CFG;
  reg [31:0] CH1_ADAPT_HCD_CFG_REG = CH1_ADAPT_HCD_CFG;
  reg [31:0] CH1_ADAPT_HEF_CFG_REG = CH1_ADAPT_HEF_CFG;
  reg [31:0] CH1_ADAPT_KH_CFG0_REG = CH1_ADAPT_KH_CFG0;
  reg [31:0] CH1_ADAPT_KH_CFG1_REG = CH1_ADAPT_KH_CFG1;
  reg [31:0] CH1_ADAPT_KH_CFG2_REG = CH1_ADAPT_KH_CFG2;
  reg [31:0] CH1_ADAPT_KH_CFG3_REG = CH1_ADAPT_KH_CFG3;
  reg [31:0] CH1_ADAPT_KH_CFG4_REG = CH1_ADAPT_KH_CFG4;
  reg [31:0] CH1_ADAPT_KH_CFG5_REG = CH1_ADAPT_KH_CFG5;
  reg [31:0] CH1_ADAPT_KL_CFG0_REG = CH1_ADAPT_KL_CFG0;
  reg [31:0] CH1_ADAPT_KL_CFG1_REG = CH1_ADAPT_KL_CFG1;
  reg [31:0] CH1_ADAPT_LCK_CFG0_REG = CH1_ADAPT_LCK_CFG0;
  reg [31:0] CH1_ADAPT_LCK_CFG1_REG = CH1_ADAPT_LCK_CFG1;
  reg [31:0] CH1_ADAPT_LCK_CFG2_REG = CH1_ADAPT_LCK_CFG2;
  reg [31:0] CH1_ADAPT_LCK_CFG3_REG = CH1_ADAPT_LCK_CFG3;
  reg [31:0] CH1_ADAPT_LOP_CFG_REG = CH1_ADAPT_LOP_CFG;
  reg [31:0] CH1_ADAPT_OS_CFG_REG = CH1_ADAPT_OS_CFG;
  reg [31:0] CH1_CHCLK_ILO_CFG_REG = CH1_CHCLK_ILO_CFG;
  reg [31:0] CH1_CHCLK_MISC_CFG_REG = CH1_CHCLK_MISC_CFG;
  reg [31:0] CH1_CHCLK_RSV_CFG_REG = CH1_CHCLK_RSV_CFG;
  reg [31:0] CH1_CHCLK_RXCAL_CFG_REG = CH1_CHCLK_RXCAL_CFG;
  reg [31:0] CH1_CHCLK_RXCAL_CFG1_REG = CH1_CHCLK_RXCAL_CFG1;
  reg [31:0] CH1_CHCLK_RXCAL_CFG2_REG = CH1_CHCLK_RXCAL_CFG2;
  reg [31:0] CH1_CHCLK_RXPI_CFG_REG = CH1_CHCLK_RXPI_CFG;
  reg [31:0] CH1_CHCLK_TXCAL_CFG_REG = CH1_CHCLK_TXCAL_CFG;
  reg [31:0] CH1_CHCLK_TXPI_CFG0_REG = CH1_CHCLK_TXPI_CFG0;
  reg [31:0] CH1_CHL_RSV_CFG0_REG = CH1_CHL_RSV_CFG0;
  reg [31:0] CH1_CHL_RSV_CFG1_REG = CH1_CHL_RSV_CFG1;
  reg [31:0] CH1_CHL_RSV_CFG2_REG = CH1_CHL_RSV_CFG2;
  reg [31:0] CH1_CHL_RSV_CFG3_REG = CH1_CHL_RSV_CFG3;
  reg [31:0] CH1_CHL_RSV_CFG4_REG = CH1_CHL_RSV_CFG4;
  reg [31:0] CH1_DA_CFG_REG = CH1_DA_CFG;
  reg [31:0] CH1_EYESCAN_CFG0_REG = CH1_EYESCAN_CFG0;
  reg [31:0] CH1_EYESCAN_CFG1_REG = CH1_EYESCAN_CFG1;
  reg [31:0] CH1_EYESCAN_CFG10_REG = CH1_EYESCAN_CFG10;
  reg [31:0] CH1_EYESCAN_CFG11_REG = CH1_EYESCAN_CFG11;
  reg [31:0] CH1_EYESCAN_CFG12_REG = CH1_EYESCAN_CFG12;
  reg [31:0] CH1_EYESCAN_CFG13_REG = CH1_EYESCAN_CFG13;
  reg [31:0] CH1_EYESCAN_CFG14_REG = CH1_EYESCAN_CFG14;
  reg [31:0] CH1_EYESCAN_CFG15_REG = CH1_EYESCAN_CFG15;
  reg [31:0] CH1_EYESCAN_CFG16_REG = CH1_EYESCAN_CFG16;
  reg [31:0] CH1_EYESCAN_CFG2_REG = CH1_EYESCAN_CFG2;
  reg [31:0] CH1_EYESCAN_CFG3_REG = CH1_EYESCAN_CFG3;
  reg [31:0] CH1_EYESCAN_CFG4_REG = CH1_EYESCAN_CFG4;
  reg [31:0] CH1_EYESCAN_CFG5_REG = CH1_EYESCAN_CFG5;
  reg [31:0] CH1_EYESCAN_CFG6_REG = CH1_EYESCAN_CFG6;
  reg [31:0] CH1_EYESCAN_CFG7_REG = CH1_EYESCAN_CFG7;
  reg [31:0] CH1_EYESCAN_CFG8_REG = CH1_EYESCAN_CFG8;
  reg [31:0] CH1_EYESCAN_CFG9_REG = CH1_EYESCAN_CFG9;
  reg [31:0] CH1_FABRIC_INTF_CFG0_REG = CH1_FABRIC_INTF_CFG0;
  reg [31:0] CH1_FABRIC_INTF_CFG1_REG = CH1_FABRIC_INTF_CFG1;
  reg [31:0] CH1_FABRIC_INTF_CFG2_REG = CH1_FABRIC_INTF_CFG2;
  reg [31:0] CH1_FABRIC_INTF_CFG3_REG = CH1_FABRIC_INTF_CFG3;
  reg [31:0] CH1_FABRIC_INTF_CFG4_REG = CH1_FABRIC_INTF_CFG4;
  reg [31:0] CH1_FABRIC_INTF_CFG5_REG = CH1_FABRIC_INTF_CFG5;
  reg [0:0] CH1_INSTANTIATED_REG = CH1_INSTANTIATED;
  reg [31:0] CH1_MONITOR_CFG_REG = CH1_MONITOR_CFG;
  reg [31:0] CH1_PIPE_CTRL_CFG0_REG = CH1_PIPE_CTRL_CFG0;
  reg [31:0] CH1_PIPE_CTRL_CFG1_REG = CH1_PIPE_CTRL_CFG1;
  reg [31:0] CH1_PIPE_CTRL_CFG10_REG = CH1_PIPE_CTRL_CFG10;
  reg [31:0] CH1_PIPE_CTRL_CFG2_REG = CH1_PIPE_CTRL_CFG2;
  reg [31:0] CH1_PIPE_CTRL_CFG3_REG = CH1_PIPE_CTRL_CFG3;
  reg [31:0] CH1_PIPE_CTRL_CFG4_REG = CH1_PIPE_CTRL_CFG4;
  reg [31:0] CH1_PIPE_CTRL_CFG5_REG = CH1_PIPE_CTRL_CFG5;
  reg [31:0] CH1_PIPE_CTRL_CFG6_REG = CH1_PIPE_CTRL_CFG6;
  reg [31:0] CH1_PIPE_CTRL_CFG7_REG = CH1_PIPE_CTRL_CFG7;
  reg [31:0] CH1_PIPE_CTRL_CFG8_REG = CH1_PIPE_CTRL_CFG8;
  reg [31:0] CH1_PIPE_CTRL_CFG9_REG = CH1_PIPE_CTRL_CFG9;
  reg [31:0] CH1_PIPE_TX_EQ_CFG0_REG = CH1_PIPE_TX_EQ_CFG0;
  reg [31:0] CH1_PIPE_TX_EQ_CFG1_REG = CH1_PIPE_TX_EQ_CFG1;
  reg [31:0] CH1_PIPE_TX_EQ_CFG2_REG = CH1_PIPE_TX_EQ_CFG2;
  reg [31:0] CH1_PIPE_TX_EQ_CFG3_REG = CH1_PIPE_TX_EQ_CFG3;
  reg [31:0] CH1_RESET_BYP_HDSHK_CFG_REG = CH1_RESET_BYP_HDSHK_CFG;
  reg [31:0] CH1_RESET_CFG_REG = CH1_RESET_CFG;
  reg [31:0] CH1_RESET_LOOPER_ID_CFG_REG = CH1_RESET_LOOPER_ID_CFG;
  reg [31:0] CH1_RESET_LOOP_ID_CFG0_REG = CH1_RESET_LOOP_ID_CFG0;
  reg [31:0] CH1_RESET_LOOP_ID_CFG1_REG = CH1_RESET_LOOP_ID_CFG1;
  reg [31:0] CH1_RESET_LOOP_ID_CFG2_REG = CH1_RESET_LOOP_ID_CFG2;
  reg [31:0] CH1_RESET_TIME_CFG0_REG = CH1_RESET_TIME_CFG0;
  reg [31:0] CH1_RESET_TIME_CFG1_REG = CH1_RESET_TIME_CFG1;
  reg [31:0] CH1_RESET_TIME_CFG2_REG = CH1_RESET_TIME_CFG2;
  reg [31:0] CH1_RESET_TIME_CFG3_REG = CH1_RESET_TIME_CFG3;
  real CH1_RXOUTCLK_FREQ_REG = CH1_RXOUTCLK_FREQ;
  real CH1_RXOUTCLK_REF_FREQ_REG = CH1_RXOUTCLK_REF_FREQ;
  reg [192:1] CH1_RXOUTCLK_REF_SOURCE_REG = CH1_RXOUTCLK_REF_SOURCE;
  reg [31:0] CH1_RX_CDR_CFG0_REG = CH1_RX_CDR_CFG0;
  reg [31:0] CH1_RX_CDR_CFG1_REG = CH1_RX_CDR_CFG1;
  reg [31:0] CH1_RX_CDR_CFG2_REG = CH1_RX_CDR_CFG2;
  reg [31:0] CH1_RX_CDR_CFG3_REG = CH1_RX_CDR_CFG3;
  reg [31:0] CH1_RX_CDR_CFG4_REG = CH1_RX_CDR_CFG4;
  reg [31:0] CH1_RX_CRC_CFG0_REG = CH1_RX_CRC_CFG0;
  reg [31:0] CH1_RX_CRC_CFG1_REG = CH1_RX_CRC_CFG1;
  reg [31:0] CH1_RX_CRC_CFG2_REG = CH1_RX_CRC_CFG2;
  reg [31:0] CH1_RX_CRC_CFG3_REG = CH1_RX_CRC_CFG3;
  reg [31:0] CH1_RX_CTLE_CFG0_REG = CH1_RX_CTLE_CFG0;
  reg [31:0] CH1_RX_CTLE_CFG1_REG = CH1_RX_CTLE_CFG1;
  reg [31:0] CH1_RX_DACI2V_CFG0_REG = CH1_RX_DACI2V_CFG0;
  real CH1_RX_DATA_RATE_REG = CH1_RX_DATA_RATE;
  reg [31:0] CH1_RX_DFE_CFG0_REG = CH1_RX_DFE_CFG0;
  reg [31:0] CH1_RX_ELASTIC_BUF_CFG0_REG = CH1_RX_ELASTIC_BUF_CFG0;
  reg [31:0] CH1_RX_ELASTIC_BUF_CFG1_REG = CH1_RX_ELASTIC_BUF_CFG1;
  reg [31:0] CH1_RX_ELASTIC_BUF_CFG2_REG = CH1_RX_ELASTIC_BUF_CFG2;
  reg [31:0] CH1_RX_ELASTIC_BUF_CFG3_REG = CH1_RX_ELASTIC_BUF_CFG3;
  reg [31:0] CH1_RX_ELASTIC_BUF_CFG4_REG = CH1_RX_ELASTIC_BUF_CFG4;
  reg [31:0] CH1_RX_ELASTIC_BUF_CFG5_REG = CH1_RX_ELASTIC_BUF_CFG5;
  reg [31:0] CH1_RX_ELASTIC_BUF_CFG6_REG = CH1_RX_ELASTIC_BUF_CFG6;
  reg [31:0] CH1_RX_ELASTIC_BUF_CFG7_REG = CH1_RX_ELASTIC_BUF_CFG7;
  reg [31:0] CH1_RX_ELASTIC_BUF_CFG8_REG = CH1_RX_ELASTIC_BUF_CFG8;
  reg [31:0] CH1_RX_ELASTIC_BUF_CFG9_REG = CH1_RX_ELASTIC_BUF_CFG9;
  reg [31:0] CH1_RX_MISC_CFG0_REG = CH1_RX_MISC_CFG0;
  reg [31:0] CH1_RX_OOB_CFG0_REG = CH1_RX_OOB_CFG0;
  reg [31:0] CH1_RX_OOB_CFG1_REG = CH1_RX_OOB_CFG1;
  reg [31:0] CH1_RX_PAD_CFG0_REG = CH1_RX_PAD_CFG0;
  reg [31:0] CH1_RX_PAD_CFG1_REG = CH1_RX_PAD_CFG1;
  reg [31:0] CH1_RX_PCS_CFG0_REG = CH1_RX_PCS_CFG0;
  reg [31:0] CH1_RX_PCS_CFG1_REG = CH1_RX_PCS_CFG1;
  reg [31:0] CH1_RX_PCS_CFG2_REG = CH1_RX_PCS_CFG2;
  reg [31:0] CH1_RX_PCS_CFG3_REG = CH1_RX_PCS_CFG3;
  reg [31:0] CH1_RX_PCS_CFG4_REG = CH1_RX_PCS_CFG4;
  reg [31:0] CH1_RX_PHALIGN_CFG0_REG = CH1_RX_PHALIGN_CFG0;
  reg [31:0] CH1_RX_PHALIGN_CFG1_REG = CH1_RX_PHALIGN_CFG1;
  reg [31:0] CH1_RX_PHALIGN_CFG2_REG = CH1_RX_PHALIGN_CFG2;
  reg [31:0] CH1_RX_PHALIGN_CFG3_REG = CH1_RX_PHALIGN_CFG3;
  reg [31:0] CH1_RX_PHALIGN_CFG4_REG = CH1_RX_PHALIGN_CFG4;
  reg [31:0] CH1_RX_PHALIGN_CFG5_REG = CH1_RX_PHALIGN_CFG5;
  reg [48:1] CH1_SIM_MODE_REG = CH1_SIM_MODE;
  reg [40:1] CH1_SIM_RECEIVER_DETECT_PASS_REG = CH1_SIM_RECEIVER_DETECT_PASS;
  reg [40:1] CH1_SIM_RESET_SPEEDUP_REG = CH1_SIM_RESET_SPEEDUP;
  reg [32:1] CH1_SIM_TX_EIDLE_DRIVE_LEVEL_REG = CH1_SIM_TX_EIDLE_DRIVE_LEVEL;
  real CH1_TXOUTCLK_FREQ_REG = CH1_TXOUTCLK_FREQ;
  real CH1_TXOUTCLK_REF_FREQ_REG = CH1_TXOUTCLK_REF_FREQ;
  reg [192:1] CH1_TXOUTCLK_REF_SOURCE_REG = CH1_TXOUTCLK_REF_SOURCE;
  reg [31:0] CH1_TX_10G_CFG0_REG = CH1_TX_10G_CFG0;
  reg [31:0] CH1_TX_10G_CFG1_REG = CH1_TX_10G_CFG1;
  reg [31:0] CH1_TX_10G_CFG2_REG = CH1_TX_10G_CFG2;
  reg [31:0] CH1_TX_10G_CFG3_REG = CH1_TX_10G_CFG3;
  reg [31:0] CH1_TX_ANA_CFG0_REG = CH1_TX_ANA_CFG0;
  reg [31:0] CH1_TX_CRC_CFG0_REG = CH1_TX_CRC_CFG0;
  reg [31:0] CH1_TX_CRC_CFG1_REG = CH1_TX_CRC_CFG1;
  reg [31:0] CH1_TX_CRC_CFG2_REG = CH1_TX_CRC_CFG2;
  reg [31:0] CH1_TX_CRC_CFG3_REG = CH1_TX_CRC_CFG3;
  real CH1_TX_DATA_RATE_REG = CH1_TX_DATA_RATE;
  reg [31:0] CH1_TX_DRV_CFG0_REG = CH1_TX_DRV_CFG0;
  reg [31:0] CH1_TX_DRV_CFG1_REG = CH1_TX_DRV_CFG1;
  reg [31:0] CH1_TX_PCS_CFG0_REG = CH1_TX_PCS_CFG0;
  reg [31:0] CH1_TX_PCS_CFG1_REG = CH1_TX_PCS_CFG1;
  reg [31:0] CH1_TX_PCS_CFG2_REG = CH1_TX_PCS_CFG2;
  reg [31:0] CH1_TX_PCS_CFG3_REG = CH1_TX_PCS_CFG3;
  reg [31:0] CH1_TX_PHALIGN_CFG0_REG = CH1_TX_PHALIGN_CFG0;
  reg [31:0] CH1_TX_PHALIGN_CFG1_REG = CH1_TX_PHALIGN_CFG1;
  reg [31:0] CH1_TX_PHALIGN_CFG2_REG = CH1_TX_PHALIGN_CFG2;
  reg [31:0] CH1_TX_PHALIGN_CFG3_REG = CH1_TX_PHALIGN_CFG3;
  reg [31:0] CH1_TX_PHALIGN_CFG4_REG = CH1_TX_PHALIGN_CFG4;
  reg [31:0] CH1_TX_PHALIGN_CFG5_REG = CH1_TX_PHALIGN_CFG5;
  reg [31:0] CH1_TX_PIPPM_CFG_REG = CH1_TX_PIPPM_CFG;
  reg [31:0] CH1_TX_SER_CFG0_REG = CH1_TX_SER_CFG0;
  reg [31:0] CH2_ADAPT_APT_CFG_REG = CH2_ADAPT_APT_CFG;
  reg [31:0] CH2_ADAPT_CAL_CFG_REG = CH2_ADAPT_CAL_CFG;
  reg [31:0] CH2_ADAPT_DFE_CFG_REG = CH2_ADAPT_DFE_CFG;
  reg [31:0] CH2_ADAPT_GC_CFG0_REG = CH2_ADAPT_GC_CFG0;
  reg [31:0] CH2_ADAPT_GC_CFG1_REG = CH2_ADAPT_GC_CFG1;
  reg [31:0] CH2_ADAPT_GC_CFG2_REG = CH2_ADAPT_GC_CFG2;
  reg [31:0] CH2_ADAPT_GC_CFG3_REG = CH2_ADAPT_GC_CFG3;
  reg [31:0] CH2_ADAPT_GEN_CFG0_REG = CH2_ADAPT_GEN_CFG0;
  reg [31:0] CH2_ADAPT_GEN_CFG1_REG = CH2_ADAPT_GEN_CFG1;
  reg [31:0] CH2_ADAPT_GEN_CFG2_REG = CH2_ADAPT_GEN_CFG2;
  reg [31:0] CH2_ADAPT_GEN_CFG3_REG = CH2_ADAPT_GEN_CFG3;
  reg [31:0] CH2_ADAPT_H01_CFG_REG = CH2_ADAPT_H01_CFG;
  reg [31:0] CH2_ADAPT_H23_CFG_REG = CH2_ADAPT_H23_CFG;
  reg [31:0] CH2_ADAPT_H45_CFG_REG = CH2_ADAPT_H45_CFG;
  reg [31:0] CH2_ADAPT_H67_CFG_REG = CH2_ADAPT_H67_CFG;
  reg [31:0] CH2_ADAPT_H89_CFG_REG = CH2_ADAPT_H89_CFG;
  reg [31:0] CH2_ADAPT_HAB_CFG_REG = CH2_ADAPT_HAB_CFG;
  reg [31:0] CH2_ADAPT_HCD_CFG_REG = CH2_ADAPT_HCD_CFG;
  reg [31:0] CH2_ADAPT_HEF_CFG_REG = CH2_ADAPT_HEF_CFG;
  reg [31:0] CH2_ADAPT_KH_CFG0_REG = CH2_ADAPT_KH_CFG0;
  reg [31:0] CH2_ADAPT_KH_CFG1_REG = CH2_ADAPT_KH_CFG1;
  reg [31:0] CH2_ADAPT_KH_CFG2_REG = CH2_ADAPT_KH_CFG2;
  reg [31:0] CH2_ADAPT_KH_CFG3_REG = CH2_ADAPT_KH_CFG3;
  reg [31:0] CH2_ADAPT_KH_CFG4_REG = CH2_ADAPT_KH_CFG4;
  reg [31:0] CH2_ADAPT_KH_CFG5_REG = CH2_ADAPT_KH_CFG5;
  reg [31:0] CH2_ADAPT_KL_CFG0_REG = CH2_ADAPT_KL_CFG0;
  reg [31:0] CH2_ADAPT_KL_CFG1_REG = CH2_ADAPT_KL_CFG1;
  reg [31:0] CH2_ADAPT_LCK_CFG0_REG = CH2_ADAPT_LCK_CFG0;
  reg [31:0] CH2_ADAPT_LCK_CFG1_REG = CH2_ADAPT_LCK_CFG1;
  reg [31:0] CH2_ADAPT_LCK_CFG2_REG = CH2_ADAPT_LCK_CFG2;
  reg [31:0] CH2_ADAPT_LCK_CFG3_REG = CH2_ADAPT_LCK_CFG3;
  reg [31:0] CH2_ADAPT_LOP_CFG_REG = CH2_ADAPT_LOP_CFG;
  reg [31:0] CH2_ADAPT_OS_CFG_REG = CH2_ADAPT_OS_CFG;
  reg [31:0] CH2_CHCLK_ILO_CFG_REG = CH2_CHCLK_ILO_CFG;
  reg [31:0] CH2_CHCLK_MISC_CFG_REG = CH2_CHCLK_MISC_CFG;
  reg [31:0] CH2_CHCLK_RSV_CFG_REG = CH2_CHCLK_RSV_CFG;
  reg [31:0] CH2_CHCLK_RXCAL_CFG_REG = CH2_CHCLK_RXCAL_CFG;
  reg [31:0] CH2_CHCLK_RXCAL_CFG1_REG = CH2_CHCLK_RXCAL_CFG1;
  reg [31:0] CH2_CHCLK_RXCAL_CFG2_REG = CH2_CHCLK_RXCAL_CFG2;
  reg [31:0] CH2_CHCLK_RXPI_CFG_REG = CH2_CHCLK_RXPI_CFG;
  reg [31:0] CH2_CHCLK_TXCAL_CFG_REG = CH2_CHCLK_TXCAL_CFG;
  reg [31:0] CH2_CHCLK_TXPI_CFG0_REG = CH2_CHCLK_TXPI_CFG0;
  reg [31:0] CH2_CHL_RSV_CFG0_REG = CH2_CHL_RSV_CFG0;
  reg [31:0] CH2_CHL_RSV_CFG1_REG = CH2_CHL_RSV_CFG1;
  reg [31:0] CH2_CHL_RSV_CFG2_REG = CH2_CHL_RSV_CFG2;
  reg [31:0] CH2_CHL_RSV_CFG3_REG = CH2_CHL_RSV_CFG3;
  reg [31:0] CH2_CHL_RSV_CFG4_REG = CH2_CHL_RSV_CFG4;
  reg [31:0] CH2_DA_CFG_REG = CH2_DA_CFG;
  reg [31:0] CH2_EYESCAN_CFG0_REG = CH2_EYESCAN_CFG0;
  reg [31:0] CH2_EYESCAN_CFG1_REG = CH2_EYESCAN_CFG1;
  reg [31:0] CH2_EYESCAN_CFG10_REG = CH2_EYESCAN_CFG10;
  reg [31:0] CH2_EYESCAN_CFG11_REG = CH2_EYESCAN_CFG11;
  reg [31:0] CH2_EYESCAN_CFG12_REG = CH2_EYESCAN_CFG12;
  reg [31:0] CH2_EYESCAN_CFG13_REG = CH2_EYESCAN_CFG13;
  reg [31:0] CH2_EYESCAN_CFG14_REG = CH2_EYESCAN_CFG14;
  reg [31:0] CH2_EYESCAN_CFG15_REG = CH2_EYESCAN_CFG15;
  reg [31:0] CH2_EYESCAN_CFG16_REG = CH2_EYESCAN_CFG16;
  reg [31:0] CH2_EYESCAN_CFG2_REG = CH2_EYESCAN_CFG2;
  reg [31:0] CH2_EYESCAN_CFG3_REG = CH2_EYESCAN_CFG3;
  reg [31:0] CH2_EYESCAN_CFG4_REG = CH2_EYESCAN_CFG4;
  reg [31:0] CH2_EYESCAN_CFG5_REG = CH2_EYESCAN_CFG5;
  reg [31:0] CH2_EYESCAN_CFG6_REG = CH2_EYESCAN_CFG6;
  reg [31:0] CH2_EYESCAN_CFG7_REG = CH2_EYESCAN_CFG7;
  reg [31:0] CH2_EYESCAN_CFG8_REG = CH2_EYESCAN_CFG8;
  reg [31:0] CH2_EYESCAN_CFG9_REG = CH2_EYESCAN_CFG9;
  reg [31:0] CH2_FABRIC_INTF_CFG0_REG = CH2_FABRIC_INTF_CFG0;
  reg [31:0] CH2_FABRIC_INTF_CFG1_REG = CH2_FABRIC_INTF_CFG1;
  reg [31:0] CH2_FABRIC_INTF_CFG2_REG = CH2_FABRIC_INTF_CFG2;
  reg [31:0] CH2_FABRIC_INTF_CFG3_REG = CH2_FABRIC_INTF_CFG3;
  reg [31:0] CH2_FABRIC_INTF_CFG4_REG = CH2_FABRIC_INTF_CFG4;
  reg [31:0] CH2_FABRIC_INTF_CFG5_REG = CH2_FABRIC_INTF_CFG5;
  reg [0:0] CH2_INSTANTIATED_REG = CH2_INSTANTIATED;
  reg [31:0] CH2_MONITOR_CFG_REG = CH2_MONITOR_CFG;
  reg [31:0] CH2_PIPE_CTRL_CFG0_REG = CH2_PIPE_CTRL_CFG0;
  reg [31:0] CH2_PIPE_CTRL_CFG1_REG = CH2_PIPE_CTRL_CFG1;
  reg [31:0] CH2_PIPE_CTRL_CFG10_REG = CH2_PIPE_CTRL_CFG10;
  reg [31:0] CH2_PIPE_CTRL_CFG2_REG = CH2_PIPE_CTRL_CFG2;
  reg [31:0] CH2_PIPE_CTRL_CFG3_REG = CH2_PIPE_CTRL_CFG3;
  reg [31:0] CH2_PIPE_CTRL_CFG4_REG = CH2_PIPE_CTRL_CFG4;
  reg [31:0] CH2_PIPE_CTRL_CFG5_REG = CH2_PIPE_CTRL_CFG5;
  reg [31:0] CH2_PIPE_CTRL_CFG6_REG = CH2_PIPE_CTRL_CFG6;
  reg [31:0] CH2_PIPE_CTRL_CFG7_REG = CH2_PIPE_CTRL_CFG7;
  reg [31:0] CH2_PIPE_CTRL_CFG8_REG = CH2_PIPE_CTRL_CFG8;
  reg [31:0] CH2_PIPE_CTRL_CFG9_REG = CH2_PIPE_CTRL_CFG9;
  reg [31:0] CH2_PIPE_TX_EQ_CFG0_REG = CH2_PIPE_TX_EQ_CFG0;
  reg [31:0] CH2_PIPE_TX_EQ_CFG1_REG = CH2_PIPE_TX_EQ_CFG1;
  reg [31:0] CH2_PIPE_TX_EQ_CFG2_REG = CH2_PIPE_TX_EQ_CFG2;
  reg [31:0] CH2_PIPE_TX_EQ_CFG3_REG = CH2_PIPE_TX_EQ_CFG3;
  reg [31:0] CH2_RESET_BYP_HDSHK_CFG_REG = CH2_RESET_BYP_HDSHK_CFG;
  reg [31:0] CH2_RESET_CFG_REG = CH2_RESET_CFG;
  reg [31:0] CH2_RESET_LOOPER_ID_CFG_REG = CH2_RESET_LOOPER_ID_CFG;
  reg [31:0] CH2_RESET_LOOP_ID_CFG0_REG = CH2_RESET_LOOP_ID_CFG0;
  reg [31:0] CH2_RESET_LOOP_ID_CFG1_REG = CH2_RESET_LOOP_ID_CFG1;
  reg [31:0] CH2_RESET_LOOP_ID_CFG2_REG = CH2_RESET_LOOP_ID_CFG2;
  reg [31:0] CH2_RESET_TIME_CFG0_REG = CH2_RESET_TIME_CFG0;
  reg [31:0] CH2_RESET_TIME_CFG1_REG = CH2_RESET_TIME_CFG1;
  reg [31:0] CH2_RESET_TIME_CFG2_REG = CH2_RESET_TIME_CFG2;
  reg [31:0] CH2_RESET_TIME_CFG3_REG = CH2_RESET_TIME_CFG3;
  real CH2_RXOUTCLK_FREQ_REG = CH2_RXOUTCLK_FREQ;
  real CH2_RXOUTCLK_REF_FREQ_REG = CH2_RXOUTCLK_REF_FREQ;
  reg [192:1] CH2_RXOUTCLK_REF_SOURCE_REG = CH2_RXOUTCLK_REF_SOURCE;
  reg [31:0] CH2_RX_CDR_CFG0_REG = CH2_RX_CDR_CFG0;
  reg [31:0] CH2_RX_CDR_CFG1_REG = CH2_RX_CDR_CFG1;
  reg [31:0] CH2_RX_CDR_CFG2_REG = CH2_RX_CDR_CFG2;
  reg [31:0] CH2_RX_CDR_CFG3_REG = CH2_RX_CDR_CFG3;
  reg [31:0] CH2_RX_CDR_CFG4_REG = CH2_RX_CDR_CFG4;
  reg [31:0] CH2_RX_CRC_CFG0_REG = CH2_RX_CRC_CFG0;
  reg [31:0] CH2_RX_CRC_CFG1_REG = CH2_RX_CRC_CFG1;
  reg [31:0] CH2_RX_CRC_CFG2_REG = CH2_RX_CRC_CFG2;
  reg [31:0] CH2_RX_CRC_CFG3_REG = CH2_RX_CRC_CFG3;
  reg [31:0] CH2_RX_CTLE_CFG0_REG = CH2_RX_CTLE_CFG0;
  reg [31:0] CH2_RX_CTLE_CFG1_REG = CH2_RX_CTLE_CFG1;
  reg [31:0] CH2_RX_DACI2V_CFG0_REG = CH2_RX_DACI2V_CFG0;
  real CH2_RX_DATA_RATE_REG = CH2_RX_DATA_RATE;
  reg [31:0] CH2_RX_DFE_CFG0_REG = CH2_RX_DFE_CFG0;
  reg [31:0] CH2_RX_ELASTIC_BUF_CFG0_REG = CH2_RX_ELASTIC_BUF_CFG0;
  reg [31:0] CH2_RX_ELASTIC_BUF_CFG1_REG = CH2_RX_ELASTIC_BUF_CFG1;
  reg [31:0] CH2_RX_ELASTIC_BUF_CFG2_REG = CH2_RX_ELASTIC_BUF_CFG2;
  reg [31:0] CH2_RX_ELASTIC_BUF_CFG3_REG = CH2_RX_ELASTIC_BUF_CFG3;
  reg [31:0] CH2_RX_ELASTIC_BUF_CFG4_REG = CH2_RX_ELASTIC_BUF_CFG4;
  reg [31:0] CH2_RX_ELASTIC_BUF_CFG5_REG = CH2_RX_ELASTIC_BUF_CFG5;
  reg [31:0] CH2_RX_ELASTIC_BUF_CFG6_REG = CH2_RX_ELASTIC_BUF_CFG6;
  reg [31:0] CH2_RX_ELASTIC_BUF_CFG7_REG = CH2_RX_ELASTIC_BUF_CFG7;
  reg [31:0] CH2_RX_ELASTIC_BUF_CFG8_REG = CH2_RX_ELASTIC_BUF_CFG8;
  reg [31:0] CH2_RX_ELASTIC_BUF_CFG9_REG = CH2_RX_ELASTIC_BUF_CFG9;
  reg [31:0] CH2_RX_MISC_CFG0_REG = CH2_RX_MISC_CFG0;
  reg [31:0] CH2_RX_OOB_CFG0_REG = CH2_RX_OOB_CFG0;
  reg [31:0] CH2_RX_OOB_CFG1_REG = CH2_RX_OOB_CFG1;
  reg [31:0] CH2_RX_PAD_CFG0_REG = CH2_RX_PAD_CFG0;
  reg [31:0] CH2_RX_PAD_CFG1_REG = CH2_RX_PAD_CFG1;
  reg [31:0] CH2_RX_PCS_CFG0_REG = CH2_RX_PCS_CFG0;
  reg [31:0] CH2_RX_PCS_CFG1_REG = CH2_RX_PCS_CFG1;
  reg [31:0] CH2_RX_PCS_CFG2_REG = CH2_RX_PCS_CFG2;
  reg [31:0] CH2_RX_PCS_CFG3_REG = CH2_RX_PCS_CFG3;
  reg [31:0] CH2_RX_PCS_CFG4_REG = CH2_RX_PCS_CFG4;
  reg [31:0] CH2_RX_PHALIGN_CFG0_REG = CH2_RX_PHALIGN_CFG0;
  reg [31:0] CH2_RX_PHALIGN_CFG1_REG = CH2_RX_PHALIGN_CFG1;
  reg [31:0] CH2_RX_PHALIGN_CFG2_REG = CH2_RX_PHALIGN_CFG2;
  reg [31:0] CH2_RX_PHALIGN_CFG3_REG = CH2_RX_PHALIGN_CFG3;
  reg [31:0] CH2_RX_PHALIGN_CFG4_REG = CH2_RX_PHALIGN_CFG4;
  reg [31:0] CH2_RX_PHALIGN_CFG5_REG = CH2_RX_PHALIGN_CFG5;
  reg [48:1] CH2_SIM_MODE_REG = CH2_SIM_MODE;
  reg [40:1] CH2_SIM_RECEIVER_DETECT_PASS_REG = CH2_SIM_RECEIVER_DETECT_PASS;
  reg [40:1] CH2_SIM_RESET_SPEEDUP_REG = CH2_SIM_RESET_SPEEDUP;
  reg [32:1] CH2_SIM_TX_EIDLE_DRIVE_LEVEL_REG = CH2_SIM_TX_EIDLE_DRIVE_LEVEL;
  real CH2_TXOUTCLK_FREQ_REG = CH2_TXOUTCLK_FREQ;
  real CH2_TXOUTCLK_REF_FREQ_REG = CH2_TXOUTCLK_REF_FREQ;
  reg [192:1] CH2_TXOUTCLK_REF_SOURCE_REG = CH2_TXOUTCLK_REF_SOURCE;
  reg [31:0] CH2_TX_10G_CFG0_REG = CH2_TX_10G_CFG0;
  reg [31:0] CH2_TX_10G_CFG1_REG = CH2_TX_10G_CFG1;
  reg [31:0] CH2_TX_10G_CFG2_REG = CH2_TX_10G_CFG2;
  reg [31:0] CH2_TX_10G_CFG3_REG = CH2_TX_10G_CFG3;
  reg [31:0] CH2_TX_ANA_CFG0_REG = CH2_TX_ANA_CFG0;
  reg [31:0] CH2_TX_CRC_CFG0_REG = CH2_TX_CRC_CFG0;
  reg [31:0] CH2_TX_CRC_CFG1_REG = CH2_TX_CRC_CFG1;
  reg [31:0] CH2_TX_CRC_CFG2_REG = CH2_TX_CRC_CFG2;
  reg [31:0] CH2_TX_CRC_CFG3_REG = CH2_TX_CRC_CFG3;
  real CH2_TX_DATA_RATE_REG = CH2_TX_DATA_RATE;
  reg [31:0] CH2_TX_DRV_CFG0_REG = CH2_TX_DRV_CFG0;
  reg [31:0] CH2_TX_DRV_CFG1_REG = CH2_TX_DRV_CFG1;
  reg [31:0] CH2_TX_PCS_CFG0_REG = CH2_TX_PCS_CFG0;
  reg [31:0] CH2_TX_PCS_CFG1_REG = CH2_TX_PCS_CFG1;
  reg [31:0] CH2_TX_PCS_CFG2_REG = CH2_TX_PCS_CFG2;
  reg [31:0] CH2_TX_PCS_CFG3_REG = CH2_TX_PCS_CFG3;
  reg [31:0] CH2_TX_PHALIGN_CFG0_REG = CH2_TX_PHALIGN_CFG0;
  reg [31:0] CH2_TX_PHALIGN_CFG1_REG = CH2_TX_PHALIGN_CFG1;
  reg [31:0] CH2_TX_PHALIGN_CFG2_REG = CH2_TX_PHALIGN_CFG2;
  reg [31:0] CH2_TX_PHALIGN_CFG3_REG = CH2_TX_PHALIGN_CFG3;
  reg [31:0] CH2_TX_PHALIGN_CFG4_REG = CH2_TX_PHALIGN_CFG4;
  reg [31:0] CH2_TX_PHALIGN_CFG5_REG = CH2_TX_PHALIGN_CFG5;
  reg [31:0] CH2_TX_PIPPM_CFG_REG = CH2_TX_PIPPM_CFG;
  reg [31:0] CH2_TX_SER_CFG0_REG = CH2_TX_SER_CFG0;
  reg [31:0] CH3_ADAPT_APT_CFG_REG = CH3_ADAPT_APT_CFG;
  reg [31:0] CH3_ADAPT_CAL_CFG_REG = CH3_ADAPT_CAL_CFG;
  reg [31:0] CH3_ADAPT_DFE_CFG_REG = CH3_ADAPT_DFE_CFG;
  reg [31:0] CH3_ADAPT_GC_CFG0_REG = CH3_ADAPT_GC_CFG0;
  reg [31:0] CH3_ADAPT_GC_CFG1_REG = CH3_ADAPT_GC_CFG1;
  reg [31:0] CH3_ADAPT_GC_CFG2_REG = CH3_ADAPT_GC_CFG2;
  reg [31:0] CH3_ADAPT_GC_CFG3_REG = CH3_ADAPT_GC_CFG3;
  reg [31:0] CH3_ADAPT_GEN_CFG0_REG = CH3_ADAPT_GEN_CFG0;
  reg [31:0] CH3_ADAPT_GEN_CFG1_REG = CH3_ADAPT_GEN_CFG1;
  reg [31:0] CH3_ADAPT_GEN_CFG2_REG = CH3_ADAPT_GEN_CFG2;
  reg [31:0] CH3_ADAPT_GEN_CFG3_REG = CH3_ADAPT_GEN_CFG3;
  reg [31:0] CH3_ADAPT_H01_CFG_REG = CH3_ADAPT_H01_CFG;
  reg [31:0] CH3_ADAPT_H23_CFG_REG = CH3_ADAPT_H23_CFG;
  reg [31:0] CH3_ADAPT_H45_CFG_REG = CH3_ADAPT_H45_CFG;
  reg [31:0] CH3_ADAPT_H67_CFG_REG = CH3_ADAPT_H67_CFG;
  reg [31:0] CH3_ADAPT_H89_CFG_REG = CH3_ADAPT_H89_CFG;
  reg [31:0] CH3_ADAPT_HAB_CFG_REG = CH3_ADAPT_HAB_CFG;
  reg [31:0] CH3_ADAPT_HCD_CFG_REG = CH3_ADAPT_HCD_CFG;
  reg [31:0] CH3_ADAPT_HEF_CFG_REG = CH3_ADAPT_HEF_CFG;
  reg [31:0] CH3_ADAPT_KH_CFG0_REG = CH3_ADAPT_KH_CFG0;
  reg [31:0] CH3_ADAPT_KH_CFG1_REG = CH3_ADAPT_KH_CFG1;
  reg [31:0] CH3_ADAPT_KH_CFG2_REG = CH3_ADAPT_KH_CFG2;
  reg [31:0] CH3_ADAPT_KH_CFG3_REG = CH3_ADAPT_KH_CFG3;
  reg [31:0] CH3_ADAPT_KH_CFG4_REG = CH3_ADAPT_KH_CFG4;
  reg [31:0] CH3_ADAPT_KH_CFG5_REG = CH3_ADAPT_KH_CFG5;
  reg [31:0] CH3_ADAPT_KL_CFG0_REG = CH3_ADAPT_KL_CFG0;
  reg [31:0] CH3_ADAPT_KL_CFG1_REG = CH3_ADAPT_KL_CFG1;
  reg [31:0] CH3_ADAPT_LCK_CFG0_REG = CH3_ADAPT_LCK_CFG0;
  reg [31:0] CH3_ADAPT_LCK_CFG1_REG = CH3_ADAPT_LCK_CFG1;
  reg [31:0] CH3_ADAPT_LCK_CFG2_REG = CH3_ADAPT_LCK_CFG2;
  reg [31:0] CH3_ADAPT_LCK_CFG3_REG = CH3_ADAPT_LCK_CFG3;
  reg [31:0] CH3_ADAPT_LOP_CFG_REG = CH3_ADAPT_LOP_CFG;
  reg [31:0] CH3_ADAPT_OS_CFG_REG = CH3_ADAPT_OS_CFG;
  reg [31:0] CH3_CHCLK_ILO_CFG_REG = CH3_CHCLK_ILO_CFG;
  reg [31:0] CH3_CHCLK_MISC_CFG_REG = CH3_CHCLK_MISC_CFG;
  reg [31:0] CH3_CHCLK_RSV_CFG_REG = CH3_CHCLK_RSV_CFG;
  reg [31:0] CH3_CHCLK_RXCAL_CFG_REG = CH3_CHCLK_RXCAL_CFG;
  reg [31:0] CH3_CHCLK_RXCAL_CFG1_REG = CH3_CHCLK_RXCAL_CFG1;
  reg [31:0] CH3_CHCLK_RXCAL_CFG2_REG = CH3_CHCLK_RXCAL_CFG2;
  reg [31:0] CH3_CHCLK_RXPI_CFG_REG = CH3_CHCLK_RXPI_CFG;
  reg [31:0] CH3_CHCLK_TXCAL_CFG_REG = CH3_CHCLK_TXCAL_CFG;
  reg [31:0] CH3_CHCLK_TXPI_CFG0_REG = CH3_CHCLK_TXPI_CFG0;
  reg [31:0] CH3_CHL_RSV_CFG0_REG = CH3_CHL_RSV_CFG0;
  reg [31:0] CH3_CHL_RSV_CFG1_REG = CH3_CHL_RSV_CFG1;
  reg [31:0] CH3_CHL_RSV_CFG2_REG = CH3_CHL_RSV_CFG2;
  reg [31:0] CH3_CHL_RSV_CFG3_REG = CH3_CHL_RSV_CFG3;
  reg [31:0] CH3_CHL_RSV_CFG4_REG = CH3_CHL_RSV_CFG4;
  reg [31:0] CH3_DA_CFG_REG = CH3_DA_CFG;
  reg [31:0] CH3_EYESCAN_CFG0_REG = CH3_EYESCAN_CFG0;
  reg [31:0] CH3_EYESCAN_CFG1_REG = CH3_EYESCAN_CFG1;
  reg [31:0] CH3_EYESCAN_CFG10_REG = CH3_EYESCAN_CFG10;
  reg [31:0] CH3_EYESCAN_CFG11_REG = CH3_EYESCAN_CFG11;
  reg [31:0] CH3_EYESCAN_CFG12_REG = CH3_EYESCAN_CFG12;
  reg [31:0] CH3_EYESCAN_CFG13_REG = CH3_EYESCAN_CFG13;
  reg [31:0] CH3_EYESCAN_CFG14_REG = CH3_EYESCAN_CFG14;
  reg [31:0] CH3_EYESCAN_CFG15_REG = CH3_EYESCAN_CFG15;
  reg [31:0] CH3_EYESCAN_CFG16_REG = CH3_EYESCAN_CFG16;
  reg [31:0] CH3_EYESCAN_CFG2_REG = CH3_EYESCAN_CFG2;
  reg [31:0] CH3_EYESCAN_CFG3_REG = CH3_EYESCAN_CFG3;
  reg [31:0] CH3_EYESCAN_CFG4_REG = CH3_EYESCAN_CFG4;
  reg [31:0] CH3_EYESCAN_CFG5_REG = CH3_EYESCAN_CFG5;
  reg [31:0] CH3_EYESCAN_CFG6_REG = CH3_EYESCAN_CFG6;
  reg [31:0] CH3_EYESCAN_CFG7_REG = CH3_EYESCAN_CFG7;
  reg [31:0] CH3_EYESCAN_CFG8_REG = CH3_EYESCAN_CFG8;
  reg [31:0] CH3_EYESCAN_CFG9_REG = CH3_EYESCAN_CFG9;
  reg [31:0] CH3_FABRIC_INTF_CFG0_REG = CH3_FABRIC_INTF_CFG0;
  reg [31:0] CH3_FABRIC_INTF_CFG1_REG = CH3_FABRIC_INTF_CFG1;
  reg [31:0] CH3_FABRIC_INTF_CFG2_REG = CH3_FABRIC_INTF_CFG2;
  reg [31:0] CH3_FABRIC_INTF_CFG3_REG = CH3_FABRIC_INTF_CFG3;
  reg [31:0] CH3_FABRIC_INTF_CFG4_REG = CH3_FABRIC_INTF_CFG4;
  reg [31:0] CH3_FABRIC_INTF_CFG5_REG = CH3_FABRIC_INTF_CFG5;
  reg [0:0] CH3_INSTANTIATED_REG = CH3_INSTANTIATED;
  reg [31:0] CH3_MONITOR_CFG_REG = CH3_MONITOR_CFG;
  reg [31:0] CH3_PIPE_CTRL_CFG0_REG = CH3_PIPE_CTRL_CFG0;
  reg [31:0] CH3_PIPE_CTRL_CFG1_REG = CH3_PIPE_CTRL_CFG1;
  reg [31:0] CH3_PIPE_CTRL_CFG10_REG = CH3_PIPE_CTRL_CFG10;
  reg [31:0] CH3_PIPE_CTRL_CFG2_REG = CH3_PIPE_CTRL_CFG2;
  reg [31:0] CH3_PIPE_CTRL_CFG3_REG = CH3_PIPE_CTRL_CFG3;
  reg [31:0] CH3_PIPE_CTRL_CFG4_REG = CH3_PIPE_CTRL_CFG4;
  reg [31:0] CH3_PIPE_CTRL_CFG5_REG = CH3_PIPE_CTRL_CFG5;
  reg [31:0] CH3_PIPE_CTRL_CFG6_REG = CH3_PIPE_CTRL_CFG6;
  reg [31:0] CH3_PIPE_CTRL_CFG7_REG = CH3_PIPE_CTRL_CFG7;
  reg [31:0] CH3_PIPE_CTRL_CFG8_REG = CH3_PIPE_CTRL_CFG8;
  reg [31:0] CH3_PIPE_CTRL_CFG9_REG = CH3_PIPE_CTRL_CFG9;
  reg [31:0] CH3_PIPE_TX_EQ_CFG0_REG = CH3_PIPE_TX_EQ_CFG0;
  reg [31:0] CH3_PIPE_TX_EQ_CFG1_REG = CH3_PIPE_TX_EQ_CFG1;
  reg [31:0] CH3_PIPE_TX_EQ_CFG2_REG = CH3_PIPE_TX_EQ_CFG2;
  reg [31:0] CH3_PIPE_TX_EQ_CFG3_REG = CH3_PIPE_TX_EQ_CFG3;
  reg [31:0] CH3_RESET_BYP_HDSHK_CFG_REG = CH3_RESET_BYP_HDSHK_CFG;
  reg [31:0] CH3_RESET_CFG_REG = CH3_RESET_CFG;
  reg [31:0] CH3_RESET_LOOPER_ID_CFG_REG = CH3_RESET_LOOPER_ID_CFG;
  reg [31:0] CH3_RESET_LOOP_ID_CFG0_REG = CH3_RESET_LOOP_ID_CFG0;
  reg [31:0] CH3_RESET_LOOP_ID_CFG1_REG = CH3_RESET_LOOP_ID_CFG1;
  reg [31:0] CH3_RESET_LOOP_ID_CFG2_REG = CH3_RESET_LOOP_ID_CFG2;
  reg [31:0] CH3_RESET_TIME_CFG0_REG = CH3_RESET_TIME_CFG0;
  reg [31:0] CH3_RESET_TIME_CFG1_REG = CH3_RESET_TIME_CFG1;
  reg [31:0] CH3_RESET_TIME_CFG2_REG = CH3_RESET_TIME_CFG2;
  reg [31:0] CH3_RESET_TIME_CFG3_REG = CH3_RESET_TIME_CFG3;
  real CH3_RXOUTCLK_FREQ_REG = CH3_RXOUTCLK_FREQ;
  real CH3_RXOUTCLK_REF_FREQ_REG = CH3_RXOUTCLK_REF_FREQ;
  reg [192:1] CH3_RXOUTCLK_REF_SOURCE_REG = CH3_RXOUTCLK_REF_SOURCE;
  reg [31:0] CH3_RX_CDR_CFG0_REG = CH3_RX_CDR_CFG0;
  reg [31:0] CH3_RX_CDR_CFG1_REG = CH3_RX_CDR_CFG1;
  reg [31:0] CH3_RX_CDR_CFG2_REG = CH3_RX_CDR_CFG2;
  reg [31:0] CH3_RX_CDR_CFG3_REG = CH3_RX_CDR_CFG3;
  reg [31:0] CH3_RX_CDR_CFG4_REG = CH3_RX_CDR_CFG4;
  reg [31:0] CH3_RX_CRC_CFG0_REG = CH3_RX_CRC_CFG0;
  reg [31:0] CH3_RX_CRC_CFG1_REG = CH3_RX_CRC_CFG1;
  reg [31:0] CH3_RX_CRC_CFG2_REG = CH3_RX_CRC_CFG2;
  reg [31:0] CH3_RX_CRC_CFG3_REG = CH3_RX_CRC_CFG3;
  reg [31:0] CH3_RX_CTLE_CFG0_REG = CH3_RX_CTLE_CFG0;
  reg [31:0] CH3_RX_CTLE_CFG1_REG = CH3_RX_CTLE_CFG1;
  reg [31:0] CH3_RX_DACI2V_CFG0_REG = CH3_RX_DACI2V_CFG0;
  real CH3_RX_DATA_RATE_REG = CH3_RX_DATA_RATE;
  reg [31:0] CH3_RX_DFE_CFG0_REG = CH3_RX_DFE_CFG0;
  reg [31:0] CH3_RX_ELASTIC_BUF_CFG0_REG = CH3_RX_ELASTIC_BUF_CFG0;
  reg [31:0] CH3_RX_ELASTIC_BUF_CFG1_REG = CH3_RX_ELASTIC_BUF_CFG1;
  reg [31:0] CH3_RX_ELASTIC_BUF_CFG2_REG = CH3_RX_ELASTIC_BUF_CFG2;
  reg [31:0] CH3_RX_ELASTIC_BUF_CFG3_REG = CH3_RX_ELASTIC_BUF_CFG3;
  reg [31:0] CH3_RX_ELASTIC_BUF_CFG4_REG = CH3_RX_ELASTIC_BUF_CFG4;
  reg [31:0] CH3_RX_ELASTIC_BUF_CFG5_REG = CH3_RX_ELASTIC_BUF_CFG5;
  reg [31:0] CH3_RX_ELASTIC_BUF_CFG6_REG = CH3_RX_ELASTIC_BUF_CFG6;
  reg [31:0] CH3_RX_ELASTIC_BUF_CFG7_REG = CH3_RX_ELASTIC_BUF_CFG7;
  reg [31:0] CH3_RX_ELASTIC_BUF_CFG8_REG = CH3_RX_ELASTIC_BUF_CFG8;
  reg [31:0] CH3_RX_ELASTIC_BUF_CFG9_REG = CH3_RX_ELASTIC_BUF_CFG9;
  reg [31:0] CH3_RX_MISC_CFG0_REG = CH3_RX_MISC_CFG0;
  reg [31:0] CH3_RX_OOB_CFG0_REG = CH3_RX_OOB_CFG0;
  reg [31:0] CH3_RX_OOB_CFG1_REG = CH3_RX_OOB_CFG1;
  reg [31:0] CH3_RX_PAD_CFG0_REG = CH3_RX_PAD_CFG0;
  reg [31:0] CH3_RX_PAD_CFG1_REG = CH3_RX_PAD_CFG1;
  reg [31:0] CH3_RX_PCS_CFG0_REG = CH3_RX_PCS_CFG0;
  reg [31:0] CH3_RX_PCS_CFG1_REG = CH3_RX_PCS_CFG1;
  reg [31:0] CH3_RX_PCS_CFG2_REG = CH3_RX_PCS_CFG2;
  reg [31:0] CH3_RX_PCS_CFG3_REG = CH3_RX_PCS_CFG3;
  reg [31:0] CH3_RX_PCS_CFG4_REG = CH3_RX_PCS_CFG4;
  reg [31:0] CH3_RX_PHALIGN_CFG0_REG = CH3_RX_PHALIGN_CFG0;
  reg [31:0] CH3_RX_PHALIGN_CFG1_REG = CH3_RX_PHALIGN_CFG1;
  reg [31:0] CH3_RX_PHALIGN_CFG2_REG = CH3_RX_PHALIGN_CFG2;
  reg [31:0] CH3_RX_PHALIGN_CFG3_REG = CH3_RX_PHALIGN_CFG3;
  reg [31:0] CH3_RX_PHALIGN_CFG4_REG = CH3_RX_PHALIGN_CFG4;
  reg [31:0] CH3_RX_PHALIGN_CFG5_REG = CH3_RX_PHALIGN_CFG5;
  reg [48:1] CH3_SIM_MODE_REG = CH3_SIM_MODE;
  reg [40:1] CH3_SIM_RECEIVER_DETECT_PASS_REG = CH3_SIM_RECEIVER_DETECT_PASS;
  reg [40:1] CH3_SIM_RESET_SPEEDUP_REG = CH3_SIM_RESET_SPEEDUP;
  reg [32:1] CH3_SIM_TX_EIDLE_DRIVE_LEVEL_REG = CH3_SIM_TX_EIDLE_DRIVE_LEVEL;
  real CH3_TXOUTCLK_FREQ_REG = CH3_TXOUTCLK_FREQ;
  real CH3_TXOUTCLK_REF_FREQ_REG = CH3_TXOUTCLK_REF_FREQ;
  reg [192:1] CH3_TXOUTCLK_REF_SOURCE_REG = CH3_TXOUTCLK_REF_SOURCE;
  reg [31:0] CH3_TX_10G_CFG0_REG = CH3_TX_10G_CFG0;
  reg [31:0] CH3_TX_10G_CFG1_REG = CH3_TX_10G_CFG1;
  reg [31:0] CH3_TX_10G_CFG2_REG = CH3_TX_10G_CFG2;
  reg [31:0] CH3_TX_10G_CFG3_REG = CH3_TX_10G_CFG3;
  reg [31:0] CH3_TX_ANA_CFG0_REG = CH3_TX_ANA_CFG0;
  reg [31:0] CH3_TX_CRC_CFG0_REG = CH3_TX_CRC_CFG0;
  reg [31:0] CH3_TX_CRC_CFG1_REG = CH3_TX_CRC_CFG1;
  reg [31:0] CH3_TX_CRC_CFG2_REG = CH3_TX_CRC_CFG2;
  reg [31:0] CH3_TX_CRC_CFG3_REG = CH3_TX_CRC_CFG3;
  real CH3_TX_DATA_RATE_REG = CH3_TX_DATA_RATE;
  reg [31:0] CH3_TX_DRV_CFG0_REG = CH3_TX_DRV_CFG0;
  reg [31:0] CH3_TX_DRV_CFG1_REG = CH3_TX_DRV_CFG1;
  reg [31:0] CH3_TX_PCS_CFG0_REG = CH3_TX_PCS_CFG0;
  reg [31:0] CH3_TX_PCS_CFG1_REG = CH3_TX_PCS_CFG1;
  reg [31:0] CH3_TX_PCS_CFG2_REG = CH3_TX_PCS_CFG2;
  reg [31:0] CH3_TX_PCS_CFG3_REG = CH3_TX_PCS_CFG3;
  reg [31:0] CH3_TX_PHALIGN_CFG0_REG = CH3_TX_PHALIGN_CFG0;
  reg [31:0] CH3_TX_PHALIGN_CFG1_REG = CH3_TX_PHALIGN_CFG1;
  reg [31:0] CH3_TX_PHALIGN_CFG2_REG = CH3_TX_PHALIGN_CFG2;
  reg [31:0] CH3_TX_PHALIGN_CFG3_REG = CH3_TX_PHALIGN_CFG3;
  reg [31:0] CH3_TX_PHALIGN_CFG4_REG = CH3_TX_PHALIGN_CFG4;
  reg [31:0] CH3_TX_PHALIGN_CFG5_REG = CH3_TX_PHALIGN_CFG5;
  reg [31:0] CH3_TX_PIPPM_CFG_REG = CH3_TX_PIPPM_CFG;
  reg [31:0] CH3_TX_SER_CFG0_REG = CH3_TX_SER_CFG0;
  reg [32:1] CHANNEL_CONNECTIVITY_REG = CHANNEL_CONNECTIVITY;
  reg [31:0] CTRL_RSV_CFG0_REG = CTRL_RSV_CFG0;
  reg [31:0] CTRL_RSV_CFG1_REG = CTRL_RSV_CFG1;
  reg [0:0] HS0_LCPLL_IPS_PIN_EN_REG = HS0_LCPLL_IPS_PIN_EN;
  reg [2:0] HS0_LCPLL_IPS_REFCLK_SEL_REG = HS0_LCPLL_IPS_REFCLK_SEL;
  reg [2:0] HS0_LCPLL_REFCLK_MAP0_REG = HS0_LCPLL_REFCLK_MAP0;
  reg [2:0] HS0_LCPLL_REFCLK_MAP1_REG = HS0_LCPLL_REFCLK_MAP1;
  reg [2:0] HS0_LCPLL_REFCLK_MAP2_REG = HS0_LCPLL_REFCLK_MAP2;
  reg [2:0] HS0_LCPLL_REFCLK_MAP3_REG = HS0_LCPLL_REFCLK_MAP3;
  reg [2:0] HS0_LCPLL_REFCLK_MAP4_REG = HS0_LCPLL_REFCLK_MAP4;
  reg [2:0] HS0_LCPLL_REFCLK_MAP5_REG = HS0_LCPLL_REFCLK_MAP5;
  reg [2:0] HS0_LCPLL_REFCLK_MAP6_REG = HS0_LCPLL_REFCLK_MAP6;
  reg [2:0] HS0_LCPLL_REFCLK_MAP7_REG = HS0_LCPLL_REFCLK_MAP7;
  reg [0:0] HS0_RPLL_IPS_PIN_EN_REG = HS0_RPLL_IPS_PIN_EN;
  reg [2:0] HS0_RPLL_IPS_REFCLK_SEL_REG = HS0_RPLL_IPS_REFCLK_SEL;
  reg [2:0] HS0_RPLL_REFCLK_MAP0_REG = HS0_RPLL_REFCLK_MAP0;
  reg [2:0] HS0_RPLL_REFCLK_MAP1_REG = HS0_RPLL_REFCLK_MAP1;
  reg [2:0] HS0_RPLL_REFCLK_MAP2_REG = HS0_RPLL_REFCLK_MAP2;
  reg [2:0] HS0_RPLL_REFCLK_MAP3_REG = HS0_RPLL_REFCLK_MAP3;
  reg [2:0] HS0_RPLL_REFCLK_MAP4_REG = HS0_RPLL_REFCLK_MAP4;
  reg [2:0] HS0_RPLL_REFCLK_MAP5_REG = HS0_RPLL_REFCLK_MAP5;
  reg [2:0] HS0_RPLL_REFCLK_MAP6_REG = HS0_RPLL_REFCLK_MAP6;
  reg [2:0] HS0_RPLL_REFCLK_MAP7_REG = HS0_RPLL_REFCLK_MAP7;
  reg [0:0] HS1_LCPLL_IPS_PIN_EN_REG = HS1_LCPLL_IPS_PIN_EN;
  reg [2:0] HS1_LCPLL_IPS_REFCLK_SEL_REG = HS1_LCPLL_IPS_REFCLK_SEL;
  reg [2:0] HS1_LCPLL_REFCLK_MAP0_REG = HS1_LCPLL_REFCLK_MAP0;
  reg [2:0] HS1_LCPLL_REFCLK_MAP1_REG = HS1_LCPLL_REFCLK_MAP1;
  reg [2:0] HS1_LCPLL_REFCLK_MAP2_REG = HS1_LCPLL_REFCLK_MAP2;
  reg [2:0] HS1_LCPLL_REFCLK_MAP3_REG = HS1_LCPLL_REFCLK_MAP3;
  reg [2:0] HS1_LCPLL_REFCLK_MAP4_REG = HS1_LCPLL_REFCLK_MAP4;
  reg [2:0] HS1_LCPLL_REFCLK_MAP5_REG = HS1_LCPLL_REFCLK_MAP5;
  reg [2:0] HS1_LCPLL_REFCLK_MAP6_REG = HS1_LCPLL_REFCLK_MAP6;
  reg [2:0] HS1_LCPLL_REFCLK_MAP7_REG = HS1_LCPLL_REFCLK_MAP7;
  reg [0:0] HS1_RPLL_IPS_PIN_EN_REG = HS1_RPLL_IPS_PIN_EN;
  reg [2:0] HS1_RPLL_IPS_REFCLK_SEL_REG = HS1_RPLL_IPS_REFCLK_SEL;
  reg [2:0] HS1_RPLL_REFCLK_MAP0_REG = HS1_RPLL_REFCLK_MAP0;
  reg [2:0] HS1_RPLL_REFCLK_MAP1_REG = HS1_RPLL_REFCLK_MAP1;
  reg [2:0] HS1_RPLL_REFCLK_MAP2_REG = HS1_RPLL_REFCLK_MAP2;
  reg [2:0] HS1_RPLL_REFCLK_MAP3_REG = HS1_RPLL_REFCLK_MAP3;
  reg [2:0] HS1_RPLL_REFCLK_MAP4_REG = HS1_RPLL_REFCLK_MAP4;
  reg [2:0] HS1_RPLL_REFCLK_MAP5_REG = HS1_RPLL_REFCLK_MAP5;
  reg [2:0] HS1_RPLL_REFCLK_MAP6_REG = HS1_RPLL_REFCLK_MAP6;
  reg [2:0] HS1_RPLL_REFCLK_MAP7_REG = HS1_RPLL_REFCLK_MAP7;
  reg [31:0] HSCLK0_HSDIST_CFG_REG = HSCLK0_HSDIST_CFG;
  reg [0:0] HSCLK0_INSTANTIATED_REG = HSCLK0_INSTANTIATED;
  reg [31:0] HSCLK0_LCPLL_CFG0_REG = HSCLK0_LCPLL_CFG0;
  reg [31:0] HSCLK0_LCPLL_CFG1_REG = HSCLK0_LCPLL_CFG1;
  reg [31:0] HSCLK0_LCPLL_CFG2_REG = HSCLK0_LCPLL_CFG2;
  reg [31:0] HSCLK0_LCPLL_LGC_CFG0_REG = HSCLK0_LCPLL_LGC_CFG0;
  reg [31:0] HSCLK0_LCPLL_LGC_CFG1_REG = HSCLK0_LCPLL_LGC_CFG1;
  reg [31:0] HSCLK0_LCPLL_LGC_CFG2_REG = HSCLK0_LCPLL_LGC_CFG2;
  reg [31:0] HSCLK0_RPLL_CFG0_REG = HSCLK0_RPLL_CFG0;
  reg [31:0] HSCLK0_RPLL_CFG1_REG = HSCLK0_RPLL_CFG1;
  reg [31:0] HSCLK0_RPLL_CFG2_REG = HSCLK0_RPLL_CFG2;
  reg [31:0] HSCLK0_RPLL_LGC_CFG0_REG = HSCLK0_RPLL_LGC_CFG0;
  reg [31:0] HSCLK0_RPLL_LGC_CFG1_REG = HSCLK0_RPLL_LGC_CFG1;
  reg [31:0] HSCLK0_RPLL_LGC_CFG2_REG = HSCLK0_RPLL_LGC_CFG2;
  reg [1:0] HSCLK0_RXRECCLK_SEL_REG = HSCLK0_RXRECCLK_SEL;
  reg [31:0] HSCLK1_HSDIST_CFG_REG = HSCLK1_HSDIST_CFG;
  reg [0:0] HSCLK1_INSTANTIATED_REG = HSCLK1_INSTANTIATED;
  reg [31:0] HSCLK1_LCPLL_CFG0_REG = HSCLK1_LCPLL_CFG0;
  reg [31:0] HSCLK1_LCPLL_CFG1_REG = HSCLK1_LCPLL_CFG1;
  reg [31:0] HSCLK1_LCPLL_CFG2_REG = HSCLK1_LCPLL_CFG2;
  reg [31:0] HSCLK1_LCPLL_LGC_CFG0_REG = HSCLK1_LCPLL_LGC_CFG0;
  reg [31:0] HSCLK1_LCPLL_LGC_CFG1_REG = HSCLK1_LCPLL_LGC_CFG1;
  reg [31:0] HSCLK1_LCPLL_LGC_CFG2_REG = HSCLK1_LCPLL_LGC_CFG2;
  reg [31:0] HSCLK1_RPLL_CFG0_REG = HSCLK1_RPLL_CFG0;
  reg [31:0] HSCLK1_RPLL_CFG1_REG = HSCLK1_RPLL_CFG1;
  reg [31:0] HSCLK1_RPLL_CFG2_REG = HSCLK1_RPLL_CFG2;
  reg [31:0] HSCLK1_RPLL_LGC_CFG0_REG = HSCLK1_RPLL_LGC_CFG0;
  reg [31:0] HSCLK1_RPLL_LGC_CFG1_REG = HSCLK1_RPLL_LGC_CFG1;
  reg [31:0] HSCLK1_RPLL_LGC_CFG2_REG = HSCLK1_RPLL_LGC_CFG2;
  reg [1:0] HSCLK1_RXRECCLK_SEL_REG = HSCLK1_RXRECCLK_SEL;
  reg [32:1] MEMORY_INIT_FILE_REG = MEMORY_INIT_FILE;
  reg [31:0] MST_RESET_CFG_REG = MST_RESET_CFG;
  reg [31:0] PIN_CFG0_REG = PIN_CFG0;
  reg [31:0] POR_CFG_REG = POR_CFG;
  reg [0:0] QUAD_INSTANTIATED_REG = QUAD_INSTANTIATED;
  reg [48:1] QUAD_SIM_MODE_REG = QUAD_SIM_MODE;
  reg [40:1] QUAD_SIM_RESET_SPEEDUP_REG = QUAD_SIM_RESET_SPEEDUP;
  reg [31:0] RCALBG0_CFG0_REG = RCALBG0_CFG0;
  reg [31:0] RCALBG0_CFG1_REG = RCALBG0_CFG1;
  reg [31:0] RCALBG0_CFG2_REG = RCALBG0_CFG2;
  reg [31:0] RCALBG0_CFG3_REG = RCALBG0_CFG3;
  reg [31:0] RCALBG0_CFG4_REG = RCALBG0_CFG4;
  reg [31:0] RCALBG0_CFG5_REG = RCALBG0_CFG5;
  reg [31:0] RCALBG1_CFG0_REG = RCALBG1_CFG0;
  reg [31:0] RCALBG1_CFG1_REG = RCALBG1_CFG1;
  reg [31:0] RCALBG1_CFG2_REG = RCALBG1_CFG2;
  reg [31:0] RCALBG1_CFG3_REG = RCALBG1_CFG3;
  reg [31:0] RCALBG1_CFG4_REG = RCALBG1_CFG4;
  reg [31:0] RCALBG1_CFG5_REG = RCALBG1_CFG5;
  reg [31:0] RXRSTDONE_DIST_SEL_REG = RXRSTDONE_DIST_SEL;
  reg [1:0] SIM_VERSION_REG = SIM_VERSION;
  reg [32:1] STAT_NPI_REG_LIST_REG = STAT_NPI_REG_LIST;
  reg [31:0] TERMPROG_CFG_REG = TERMPROG_CFG;
  reg [31:0] TXRSTDONE_DIST_SEL_REG = TXRSTDONE_DIST_SEL;
  reg [31:0] UB_CFG0_REG = UB_CFG0;
`endif

`ifdef XIL_XECLIB
  wire [63:0] CH0_RXOUTCLK_FREQ_BIN;
  wire [63:0] CH0_RXOUTCLK_REF_FREQ_BIN;
  wire [63:0] CH0_RX_DATA_RATE_BIN;
  wire [63:0] CH0_TXOUTCLK_FREQ_BIN;
  wire [63:0] CH0_TXOUTCLK_REF_FREQ_BIN;
  wire [63:0] CH0_TX_DATA_RATE_BIN;
  wire [63:0] CH1_RXOUTCLK_FREQ_BIN;
  wire [63:0] CH1_RXOUTCLK_REF_FREQ_BIN;
  wire [63:0] CH1_RX_DATA_RATE_BIN;
  wire [63:0] CH1_TXOUTCLK_FREQ_BIN;
  wire [63:0] CH1_TXOUTCLK_REF_FREQ_BIN;
  wire [63:0] CH1_TX_DATA_RATE_BIN;
  wire [63:0] CH2_RXOUTCLK_FREQ_BIN;
  wire [63:0] CH2_RXOUTCLK_REF_FREQ_BIN;
  wire [63:0] CH2_RX_DATA_RATE_BIN;
  wire [63:0] CH2_TXOUTCLK_FREQ_BIN;
  wire [63:0] CH2_TXOUTCLK_REF_FREQ_BIN;
  wire [63:0] CH2_TX_DATA_RATE_BIN;
  wire [63:0] CH3_RXOUTCLK_FREQ_BIN;
  wire [63:0] CH3_RXOUTCLK_REF_FREQ_BIN;
  wire [63:0] CH3_RX_DATA_RATE_BIN;
  wire [63:0] CH3_TXOUTCLK_FREQ_BIN;
  wire [63:0] CH3_TXOUTCLK_REF_FREQ_BIN;
  wire [63:0] CH3_TX_DATA_RATE_BIN;
`else
  reg [63:0] CH0_RXOUTCLK_FREQ_BIN;
  reg [63:0] CH0_RXOUTCLK_REF_FREQ_BIN;
  reg [63:0] CH0_RX_DATA_RATE_BIN;
  reg [63:0] CH0_TXOUTCLK_FREQ_BIN;
  reg [63:0] CH0_TXOUTCLK_REF_FREQ_BIN;
  reg [63:0] CH0_TX_DATA_RATE_BIN;
  reg [63:0] CH1_RXOUTCLK_FREQ_BIN;
  reg [63:0] CH1_RXOUTCLK_REF_FREQ_BIN;
  reg [63:0] CH1_RX_DATA_RATE_BIN;
  reg [63:0] CH1_TXOUTCLK_FREQ_BIN;
  reg [63:0] CH1_TXOUTCLK_REF_FREQ_BIN;
  reg [63:0] CH1_TX_DATA_RATE_BIN;
  reg [63:0] CH2_RXOUTCLK_FREQ_BIN;
  reg [63:0] CH2_RXOUTCLK_REF_FREQ_BIN;
  reg [63:0] CH2_RX_DATA_RATE_BIN;
  reg [63:0] CH2_TXOUTCLK_FREQ_BIN;
  reg [63:0] CH2_TXOUTCLK_REF_FREQ_BIN;
  reg [63:0] CH2_TX_DATA_RATE_BIN;
  reg [63:0] CH3_RXOUTCLK_FREQ_BIN;
  reg [63:0] CH3_RXOUTCLK_REF_FREQ_BIN;
  reg [63:0] CH3_RX_DATA_RATE_BIN;
  reg [63:0] CH3_TXOUTCLK_FREQ_BIN;
  reg [63:0] CH3_TXOUTCLK_REF_FREQ_BIN;
  reg [63:0] CH3_TX_DATA_RATE_BIN;
`endif

  wire APB3PREADY_out;
  wire APB3PSLVERR_out;
  wire CH0_BUFGTCE_out;
  wire CH0_BUFGTRST_out;
  wire CH0_DMONITOROUTCLK_out;
  wire CH0_EYESCANDATAERROR_out;
  wire CH0_GTYPTXN_out;
  wire CH0_GTYPTXP_out;
  wire CH0_ILORESETDONE_out;
  wire CH0_PHYREADY_out;
  wire CH0_PHYSTATUS_out;
  wire CH0_RESETEXCEPTION_out;
  wire CH0_RXBYTEISALIGNED_out;
  wire CH0_RXBYTEREALIGN_out;
  wire CH0_RXCDRLOCK_out;
  wire CH0_RXCDRPHDONE_out;
  wire CH0_RXCHANBONDSEQ_out;
  wire CH0_RXCHANISALIGNED_out;
  wire CH0_RXCHANREALIGN_out;
  wire CH0_RXCOMINITDET_out;
  wire CH0_RXCOMMADET_out;
  wire CH0_RXCOMSASDET_out;
  wire CH0_RXCOMWAKEDET_out;
  wire CH0_RXDAPIRESETDONE_out;
  wire CH0_RXDEBUGPCSOUT_out;
  wire CH0_RXDLYALIGNERR_out;
  wire CH0_RXDLYALIGNPROG_out;
  wire CH0_RXELECIDLE_out;
  wire CH0_RXFINEALIGNDONE_out;
  wire CH0_RXOSINTDONE_out;
  wire CH0_RXOUTCLK_out;
  wire CH0_RXPHALIGNDONE_out;
  wire CH0_RXPHALIGNERR_out;
  wire CH0_RXPHDLYRESETDONE_out;
  wire CH0_RXPHSETINITDONE_out;
  wire CH0_RXPHSHIFT180DONE_out;
  wire CH0_RXPKDET_out;
  wire CH0_RXPMARESETDONE_out;
  wire CH0_RXPRBSERR_out;
  wire CH0_RXPRBSLOCKED_out;
  wire CH0_RXPROGDIVRESETDONE_out;
  wire CH0_RXQPISENN_out;
  wire CH0_RXQPISENP_out;
  wire CH0_RXRESETDONE_out;
  wire CH0_RXSIMPLEXPHYSTATUS_out;
  wire CH0_RXSLIDERDY_out;
  wire CH0_RXSLIPDONE_out;
  wire CH0_RXSYNCDONE_out;
  wire CH0_RXVALID_out;
  wire CH0_SCANCNTRLOUT_out;
  wire CH0_TX10GSTAT_out;
  wire CH0_TXCOMFINISH_out;
  wire CH0_TXDAPIRESETDONE_out;
  wire CH0_TXDCCDONE_out;
  wire CH0_TXDEBUGPCSOUT_out;
  wire CH0_TXDLYALIGNERR_out;
  wire CH0_TXDLYALIGNPROG_out;
  wire CH0_TXOUTCLK_out;
  wire CH0_TXPHALIGNDONE_out;
  wire CH0_TXPHALIGNERR_out;
  wire CH0_TXPHALIGNOUTRSVD_out;
  wire CH0_TXPHDLYRESETDONE_out;
  wire CH0_TXPHSETINITDONE_out;
  wire CH0_TXPHSHIFT180DONE_out;
  wire CH0_TXPMARESETDONE_out;
  wire CH0_TXPROGDIVRESETDONE_out;
  wire CH0_TXQPISENN_out;
  wire CH0_TXQPISENP_out;
  wire CH0_TXRESETDONE_out;
  wire CH0_TXSIMPLEXPHYSTATUS_out;
  wire CH0_TXSWINGOUTHIGH_out;
  wire CH0_TXSWINGOUTLOW_out;
  wire CH0_TXSYNCDONE_out;
  wire CH0_XPIPE5_PIPELINE_EN_out;
  wire CH1_BUFGTCE_out;
  wire CH1_BUFGTRST_out;
  wire CH1_DMONITOROUTCLK_out;
  wire CH1_EYESCANDATAERROR_out;
  wire CH1_GTYPTXN_out;
  wire CH1_GTYPTXP_out;
  wire CH1_ILORESETDONE_out;
  wire CH1_PHYREADY_out;
  wire CH1_PHYSTATUS_out;
  wire CH1_RESETEXCEPTION_out;
  wire CH1_RXBYTEISALIGNED_out;
  wire CH1_RXBYTEREALIGN_out;
  wire CH1_RXCDRLOCK_out;
  wire CH1_RXCDRPHDONE_out;
  wire CH1_RXCHANBONDSEQ_out;
  wire CH1_RXCHANISALIGNED_out;
  wire CH1_RXCHANREALIGN_out;
  wire CH1_RXCOMINITDET_out;
  wire CH1_RXCOMMADET_out;
  wire CH1_RXCOMSASDET_out;
  wire CH1_RXCOMWAKEDET_out;
  wire CH1_RXDAPIRESETDONE_out;
  wire CH1_RXDEBUGPCSOUT_out;
  wire CH1_RXDLYALIGNERR_out;
  wire CH1_RXDLYALIGNPROG_out;
  wire CH1_RXELECIDLE_out;
  wire CH1_RXFINEALIGNDONE_out;
  wire CH1_RXOSINTDONE_out;
  wire CH1_RXOUTCLK_out;
  wire CH1_RXPHALIGNDONE_out;
  wire CH1_RXPHALIGNERR_out;
  wire CH1_RXPHDLYRESETDONE_out;
  wire CH1_RXPHSETINITDONE_out;
  wire CH1_RXPHSHIFT180DONE_out;
  wire CH1_RXPKDET_out;
  wire CH1_RXPMARESETDONE_out;
  wire CH1_RXPRBSERR_out;
  wire CH1_RXPRBSLOCKED_out;
  wire CH1_RXPROGDIVRESETDONE_out;
  wire CH1_RXQPISENN_out;
  wire CH1_RXQPISENP_out;
  wire CH1_RXRESETDONE_out;
  wire CH1_RXSIMPLEXPHYSTATUS_out;
  wire CH1_RXSLIDERDY_out;
  wire CH1_RXSLIPDONE_out;
  wire CH1_RXSYNCDONE_out;
  wire CH1_RXVALID_out;
  wire CH1_SCANCNTRLOUT_out;
  wire CH1_TX10GSTAT_out;
  wire CH1_TXCOMFINISH_out;
  wire CH1_TXDAPIRESETDONE_out;
  wire CH1_TXDCCDONE_out;
  wire CH1_TXDEBUGPCSOUT_out;
  wire CH1_TXDLYALIGNERR_out;
  wire CH1_TXDLYALIGNPROG_out;
  wire CH1_TXOUTCLK_out;
  wire CH1_TXPHALIGNDONE_out;
  wire CH1_TXPHALIGNERR_out;
  wire CH1_TXPHALIGNOUTRSVD_out;
  wire CH1_TXPHDLYRESETDONE_out;
  wire CH1_TXPHSETINITDONE_out;
  wire CH1_TXPHSHIFT180DONE_out;
  wire CH1_TXPMARESETDONE_out;
  wire CH1_TXPROGDIVRESETDONE_out;
  wire CH1_TXQPISENN_out;
  wire CH1_TXQPISENP_out;
  wire CH1_TXRESETDONE_out;
  wire CH1_TXSIMPLEXPHYSTATUS_out;
  wire CH1_TXSWINGOUTHIGH_out;
  wire CH1_TXSWINGOUTLOW_out;
  wire CH1_TXSYNCDONE_out;
  wire CH1_XPIPE5_PIPELINE_EN_out;
  wire CH2_BUFGTCE_out;
  wire CH2_BUFGTRST_out;
  wire CH2_DMONITOROUTCLK_out;
  wire CH2_EYESCANDATAERROR_out;
  wire CH2_GTYPTXN_out;
  wire CH2_GTYPTXP_out;
  wire CH2_ILORESETDONE_out;
  wire CH2_PHYREADY_out;
  wire CH2_PHYSTATUS_out;
  wire CH2_RESETEXCEPTION_out;
  wire CH2_RXBYTEISALIGNED_out;
  wire CH2_RXBYTEREALIGN_out;
  wire CH2_RXCDRLOCK_out;
  wire CH2_RXCDRPHDONE_out;
  wire CH2_RXCHANBONDSEQ_out;
  wire CH2_RXCHANISALIGNED_out;
  wire CH2_RXCHANREALIGN_out;
  wire CH2_RXCOMINITDET_out;
  wire CH2_RXCOMMADET_out;
  wire CH2_RXCOMSASDET_out;
  wire CH2_RXCOMWAKEDET_out;
  wire CH2_RXDAPIRESETDONE_out;
  wire CH2_RXDEBUGPCSOUT_out;
  wire CH2_RXDLYALIGNERR_out;
  wire CH2_RXDLYALIGNPROG_out;
  wire CH2_RXELECIDLE_out;
  wire CH2_RXFINEALIGNDONE_out;
  wire CH2_RXOSINTDONE_out;
  wire CH2_RXOUTCLK_out;
  wire CH2_RXPHALIGNDONE_out;
  wire CH2_RXPHALIGNERR_out;
  wire CH2_RXPHDLYRESETDONE_out;
  wire CH2_RXPHSETINITDONE_out;
  wire CH2_RXPHSHIFT180DONE_out;
  wire CH2_RXPKDET_out;
  wire CH2_RXPMARESETDONE_out;
  wire CH2_RXPRBSERR_out;
  wire CH2_RXPRBSLOCKED_out;
  wire CH2_RXPROGDIVRESETDONE_out;
  wire CH2_RXQPISENN_out;
  wire CH2_RXQPISENP_out;
  wire CH2_RXRESETDONE_out;
  wire CH2_RXSIMPLEXPHYSTATUS_out;
  wire CH2_RXSLIDERDY_out;
  wire CH2_RXSLIPDONE_out;
  wire CH2_RXSYNCDONE_out;
  wire CH2_RXVALID_out;
  wire CH2_SCANCNTRLOUT_out;
  wire CH2_TX10GSTAT_out;
  wire CH2_TXCOMFINISH_out;
  wire CH2_TXDAPIRESETDONE_out;
  wire CH2_TXDCCDONE_out;
  wire CH2_TXDEBUGPCSOUT_out;
  wire CH2_TXDLYALIGNERR_out;
  wire CH2_TXDLYALIGNPROG_out;
  wire CH2_TXOUTCLK_out;
  wire CH2_TXPHALIGNDONE_out;
  wire CH2_TXPHALIGNERR_out;
  wire CH2_TXPHALIGNOUTRSVD_out;
  wire CH2_TXPHDLYRESETDONE_out;
  wire CH2_TXPHSETINITDONE_out;
  wire CH2_TXPHSHIFT180DONE_out;
  wire CH2_TXPMARESETDONE_out;
  wire CH2_TXPROGDIVRESETDONE_out;
  wire CH2_TXQPISENN_out;
  wire CH2_TXQPISENP_out;
  wire CH2_TXRESETDONE_out;
  wire CH2_TXSIMPLEXPHYSTATUS_out;
  wire CH2_TXSWINGOUTHIGH_out;
  wire CH2_TXSWINGOUTLOW_out;
  wire CH2_TXSYNCDONE_out;
  wire CH2_XPIPE5_PIPELINE_EN_out;
  wire CH3_BUFGTCE_out;
  wire CH3_BUFGTRST_out;
  wire CH3_DMONITOROUTCLK_out;
  wire CH3_EYESCANDATAERROR_out;
  wire CH3_GTYPTXN_out;
  wire CH3_GTYPTXP_out;
  wire CH3_ILORESETDONE_out;
  wire CH3_PHYREADY_out;
  wire CH3_PHYSTATUS_out;
  wire CH3_RESETEXCEPTION_out;
  wire CH3_RXBYTEISALIGNED_out;
  wire CH3_RXBYTEREALIGN_out;
  wire CH3_RXCDRLOCK_out;
  wire CH3_RXCDRPHDONE_out;
  wire CH3_RXCHANBONDSEQ_out;
  wire CH3_RXCHANISALIGNED_out;
  wire CH3_RXCHANREALIGN_out;
  wire CH3_RXCOMINITDET_out;
  wire CH3_RXCOMMADET_out;
  wire CH3_RXCOMSASDET_out;
  wire CH3_RXCOMWAKEDET_out;
  wire CH3_RXDAPIRESETDONE_out;
  wire CH3_RXDEBUGPCSOUT_out;
  wire CH3_RXDLYALIGNERR_out;
  wire CH3_RXDLYALIGNPROG_out;
  wire CH3_RXELECIDLE_out;
  wire CH3_RXFINEALIGNDONE_out;
  wire CH3_RXOSINTDONE_out;
  wire CH3_RXOUTCLK_out;
  wire CH3_RXPHALIGNDONE_out;
  wire CH3_RXPHALIGNERR_out;
  wire CH3_RXPHDLYRESETDONE_out;
  wire CH3_RXPHSETINITDONE_out;
  wire CH3_RXPHSHIFT180DONE_out;
  wire CH3_RXPKDET_out;
  wire CH3_RXPMARESETDONE_out;
  wire CH3_RXPRBSERR_out;
  wire CH3_RXPRBSLOCKED_out;
  wire CH3_RXPROGDIVRESETDONE_out;
  wire CH3_RXQPISENN_out;
  wire CH3_RXQPISENP_out;
  wire CH3_RXRESETDONE_out;
  wire CH3_RXSIMPLEXPHYSTATUS_out;
  wire CH3_RXSLIDERDY_out;
  wire CH3_RXSLIPDONE_out;
  wire CH3_RXSYNCDONE_out;
  wire CH3_RXVALID_out;
  wire CH3_SCANCNTRLOUT_out;
  wire CH3_TX10GSTAT_out;
  wire CH3_TXCOMFINISH_out;
  wire CH3_TXDAPIRESETDONE_out;
  wire CH3_TXDCCDONE_out;
  wire CH3_TXDEBUGPCSOUT_out;
  wire CH3_TXDLYALIGNERR_out;
  wire CH3_TXDLYALIGNPROG_out;
  wire CH3_TXOUTCLK_out;
  wire CH3_TXPHALIGNDONE_out;
  wire CH3_TXPHALIGNERR_out;
  wire CH3_TXPHALIGNOUTRSVD_out;
  wire CH3_TXPHDLYRESETDONE_out;
  wire CH3_TXPHSETINITDONE_out;
  wire CH3_TXPHSHIFT180DONE_out;
  wire CH3_TXPMARESETDONE_out;
  wire CH3_TXPROGDIVRESETDONE_out;
  wire CH3_TXQPISENN_out;
  wire CH3_TXQPISENP_out;
  wire CH3_TXRESETDONE_out;
  wire CH3_TXSIMPLEXPHYSTATUS_out;
  wire CH3_TXSWINGOUTHIGH_out;
  wire CH3_TXSWINGOUTLOW_out;
  wire CH3_TXSYNCDONE_out;
  wire CH3_XPIPE5_PIPELINE_EN_out;
  wire CORRECTERR_out;
  wire DEBUGTRACETVALID_out;
  wire GTPOWERGOOD_out;
  wire HSCLK0_LCPLLFBCLKLOST_out;
  wire HSCLK0_LCPLLLOCK_out;
  wire HSCLK0_LCPLLREFCLKLOST_out;
  wire HSCLK0_LCPLLREFCLKMONITOR_out;
  wire HSCLK0_RPLLFBCLKLOST_out;
  wire HSCLK0_RPLLLOCK_out;
  wire HSCLK0_RPLLREFCLKLOST_out;
  wire HSCLK0_RPLLREFCLKMONITOR_out;
  wire HSCLK0_RXRECCLKOUT0_out;
  wire HSCLK0_RXRECCLKOUT1_out;
  wire HSCLK1_LCPLLFBCLKLOST_out;
  wire HSCLK1_LCPLLLOCK_out;
  wire HSCLK1_LCPLLREFCLKLOST_out;
  wire HSCLK1_LCPLLREFCLKMONITOR_out;
  wire HSCLK1_RPLLFBCLKLOST_out;
  wire HSCLK1_RPLLLOCK_out;
  wire HSCLK1_RPLLREFCLKLOST_out;
  wire HSCLK1_RPLLREFCLKMONITOR_out;
  wire HSCLK1_RXRECCLKOUT0_out;
  wire HSCLK1_RXRECCLKOUT1_out;
  wire M0_AXIS_TLAST_out;
  wire M0_AXIS_TVALID_out;
  wire M1_AXIS_TLAST_out;
  wire M1_AXIS_TVALID_out;
  wire M2_AXIS_TLAST_out;
  wire M2_AXIS_TVALID_out;
  wire RCALCMP_out;
  wire REFCLK0_CLKTESTSIGINT_out;
  wire REFCLK0_GTREFCLKPDINT_out;
  wire REFCLK1_CLKTESTSIGINT_out;
  wire REFCLK1_GTREFCLKPDINT_out;
  wire RXMARGINREQACK_out;
  wire RXMARGINRESREQ_out;
  wire S0_AXIS_TREADY_out;
  wire S1_AXIS_TREADY_out;
  wire S2_AXIS_TREADY_out;
  wire SCANCNTRLOUT_out;
  wire TRIGACKIN0_out;
  wire TRIGOUT0_out;
  wire UBINTERRUPT_out;
  wire UBTXUART_out;
  wire UNCORRECTERR_out;
  wire [11:0] CH0_BUFGTDIV_out;
  wire [11:0] CH1_BUFGTDIV_out;
  wire [11:0] CH2_BUFGTDIV_out;
  wire [11:0] CH3_BUFGTDIV_out;
  wire [127:0] CH0_RXDATA_out;
  wire [127:0] CH1_RXDATA_out;
  wire [127:0] CH2_RXDATA_out;
  wire [127:0] CH3_RXDATA_out;
  wire [15:0] CH0_PCSRSVDOUT_out;
  wire [15:0] CH0_PINRSVDAS_out;
  wire [15:0] CH0_RXCTRL0_out;
  wire [15:0] CH0_RXCTRL1_out;
  wire [15:0] CH1_PCSRSVDOUT_out;
  wire [15:0] CH1_PINRSVDAS_out;
  wire [15:0] CH1_RXCTRL0_out;
  wire [15:0] CH1_RXCTRL1_out;
  wire [15:0] CH2_PCSRSVDOUT_out;
  wire [15:0] CH2_PINRSVDAS_out;
  wire [15:0] CH2_RXCTRL0_out;
  wire [15:0] CH2_RXCTRL1_out;
  wire [15:0] CH3_PCSRSVDOUT_out;
  wire [15:0] CH3_PINRSVDAS_out;
  wire [15:0] CH3_RXCTRL0_out;
  wire [15:0] CH3_RXCTRL1_out;
  wire [15:0] DEBUGTRACETDATA_out;
  wire [1:0] CH0_REFDEBUGOUT_out;
  wire [1:0] CH0_RXCLKCORCNT_out;
  wire [1:0] CH0_RXDATAVALID_out;
  wire [1:0] CH0_RXHEADERVALID_out;
  wire [1:0] CH0_RXSTARTOFSEQ_out;
  wire [1:0] CH0_TXBUFSTATUS_out;
  wire [1:0] CH1_REFDEBUGOUT_out;
  wire [1:0] CH1_RXCLKCORCNT_out;
  wire [1:0] CH1_RXDATAVALID_out;
  wire [1:0] CH1_RXHEADERVALID_out;
  wire [1:0] CH1_RXSTARTOFSEQ_out;
  wire [1:0] CH1_TXBUFSTATUS_out;
  wire [1:0] CH2_REFDEBUGOUT_out;
  wire [1:0] CH2_RXCLKCORCNT_out;
  wire [1:0] CH2_RXDATAVALID_out;
  wire [1:0] CH2_RXHEADERVALID_out;
  wire [1:0] CH2_RXSTARTOFSEQ_out;
  wire [1:0] CH2_TXBUFSTATUS_out;
  wire [1:0] CH3_REFDEBUGOUT_out;
  wire [1:0] CH3_RXCLKCORCNT_out;
  wire [1:0] CH3_RXDATAVALID_out;
  wire [1:0] CH3_RXHEADERVALID_out;
  wire [1:0] CH3_RXSTARTOFSEQ_out;
  wire [1:0] CH3_TXBUFSTATUS_out;
  wire [1:0] HSCLK0_RXRECCLKSEL_out;
  wire [1:0] HSCLK1_RXRECCLKSEL_out;
  wire [1:0] RESETDONE_NORTHOUT_out;
  wire [1:0] RESETDONE_SOUTHOUT_out;
  wire [1:0] RXMARGINRESLANENUM_out;
  wire [2:0] CH0_RXBUFSTATUS_out;
  wire [2:0] CH0_RXSTATUS_out;
  wire [2:0] CH1_RXBUFSTATUS_out;
  wire [2:0] CH1_RXSTATUS_out;
  wire [2:0] CH2_RXBUFSTATUS_out;
  wire [2:0] CH2_RXSTATUS_out;
  wire [2:0] CH3_RXBUFSTATUS_out;
  wire [2:0] CH3_RXSTATUS_out;
  wire [31:0] APB3PRDATA_out;
  wire [31:0] CH0_DMONITOROUT_out;
  wire [31:0] CH1_DMONITOROUT_out;
  wire [31:0] CH2_DMONITOROUT_out;
  wire [31:0] CH3_DMONITOROUT_out;
  wire [31:0] GPO_out;
  wire [31:0] M0_AXIS_TDATA_out;
  wire [31:0] M1_AXIS_TDATA_out;
  wire [31:0] M2_AXIS_TDATA_out;
  wire [3:0] CH0_BUFGTCEMASK_out;
  wire [3:0] CH0_BUFGTRSTMASK_out;
  wire [3:0] CH0_SCANOUT_out;
  wire [3:0] CH1_BUFGTCEMASK_out;
  wire [3:0] CH1_BUFGTRSTMASK_out;
  wire [3:0] CH1_SCANOUT_out;
  wire [3:0] CH2_BUFGTCEMASK_out;
  wire [3:0] CH2_BUFGTRSTMASK_out;
  wire [3:0] CH2_SCANOUT_out;
  wire [3:0] CH3_BUFGTCEMASK_out;
  wire [3:0] CH3_BUFGTRSTMASK_out;
  wire [3:0] CH3_SCANOUT_out;
  wire [3:0] MSTRXRESETDONE_out;
  wire [3:0] MSTTXRESETDONE_out;
  wire [3:0] RXMARGINRESCMD_out;
  wire [3:0] RXPINORTHOUT_out;
  wire [3:0] RXPISOUTHOUT_out;
  wire [3:0] SCANOUT_out;
  wire [3:0] TXPINORTHOUT_out;
  wire [3:0] TXPISOUTHOUT_out;
  wire [4:0] CH0_RXCHBONDO_out;
  wire [4:0] CH1_RXCHBONDO_out;
  wire [4:0] CH2_RXCHBONDO_out;
  wire [4:0] CH3_RXCHBONDO_out;
  wire [4:0] RCALOUT_out;
  wire [5:0] CH0_RXHEADER_out;
  wire [5:0] CH1_RXHEADER_out;
  wire [5:0] CH2_RXHEADER_out;
  wire [5:0] CH3_RXHEADER_out;
  wire [5:0] PIPENORTHOUT_out;
  wire [5:0] PIPESOUTHOUT_out;
  wire [7:0] CH0_RX10GSTAT_out;
  wire [7:0] CH0_RXCTRL2_out;
  wire [7:0] CH0_RXCTRL3_out;
  wire [7:0] CH1_RX10GSTAT_out;
  wire [7:0] CH1_RXCTRL2_out;
  wire [7:0] CH1_RXCTRL3_out;
  wire [7:0] CH2_RX10GSTAT_out;
  wire [7:0] CH2_RXCTRL2_out;
  wire [7:0] CH2_RXCTRL3_out;
  wire [7:0] CH3_RX10GSTAT_out;
  wire [7:0] CH3_RXCTRL2_out;
  wire [7:0] CH3_RXCTRL3_out;
  wire [7:0] CTRLRSVDOUT_out;
  wire [7:0] RXMARGINRESPAYLD_out;

  wire APB3CLK_in;
  wire APB3PENABLE_in;
  wire APB3PRESETN_in;
  wire APB3PSEL_in;
  wire APB3PWRITE_in;
  wire AXISCLK_in;
  wire BGBYPASSB_in;
  wire BGMONITORENB_in;
  wire BGPDB_in;
  wire BGRCALOVRDENB_in;
  wire CH0_BSR_SERIAL_in;
  wire CH0_CDRBMCDRREQ_in;
  wire CH0_CDRFREQOS_in;
  wire CH0_CDRINCPCTRL_in;
  wire CH0_CDRSTEPDIR_in;
  wire CH0_CDRSTEPSQ_in;
  wire CH0_CDRSTEPSX_in;
  wire CH0_CLKRSVD0_in;
  wire CH0_CLKRSVD1_in;
  wire CH0_CSSDSTOPCLK_in;
  wire CH0_DFEHOLD_in;
  wire CH0_DFEOVRD_in;
  wire CH0_DMONFIFORESET_in;
  wire CH0_DMONITORCLK_in;
  wire CH0_EDTUPDATEB_in;
  wire CH0_EYESCANRESET_in;
  wire CH0_EYESCANTRIGGER_in;
  wire CH0_GTRXRESET_in;
  wire CH0_GTTXRESET_in;
  wire CH0_GTYPRXN_in;
  wire CH0_GTYPRXP_in;
  wire CH0_HSDPPCSRESET_in;
  wire CH0_ILORESETMASK_in;
  wire CH0_ILORESET_in;
  wire CH0_PCIERSTB_in;
  wire CH0_PHYESMADAPTSAVE_in;
  wire CH0_RXCDRHOLD_in;
  wire CH0_RXCDROVRDEN_in;
  wire CH0_RXCDRRESET_in;
  wire CH0_RXDAPICODEOVRDEN_in;
  wire CH0_RXDAPICODERESET_in;
  wire CH0_RXDAPIRESET_in;
  wire CH0_RXDLYALIGNREQ_in;
  wire CH0_RXEQTRAINING_in;
  wire CH0_RXGEARBOXSLIP_in;
  wire CH0_RXLATCLK_in;
  wire CH0_RXLPMEN_in;
  wire CH0_RXMLDCHAINDONE_in;
  wire CH0_RXMLDCHAINREQ_in;
  wire CH0_RXMLFINEALIGNREQ_in;
  wire CH0_RXOOBRESET_in;
  wire CH0_RXPHALIGNREQ_in;
  wire CH0_RXPHDLYPD_in;
  wire CH0_RXPHDLYRESET_in;
  wire CH0_RXPHSETINITREQ_in;
  wire CH0_RXPHSHIFT180_in;
  wire CH0_RXPOLARITY_in;
  wire CH0_RXPRBSCNTRESET_in;
  wire CH0_RXPROGDIVRESET_in;
  wire CH0_RXQPIEN_in;
  wire CH0_RXSLIDE_in;
  wire CH0_RXSYNCALLIN_in;
  wire CH0_RXTERMINATION_in;
  wire CH0_RXUSERRDY_in;
  wire CH0_RXUSRCLK_in;
  wire CH0_SCANCLKB_in;
  wire CH0_SCANCNTRLIN_in;
  wire CH0_SCANENB_in;
  wire CH0_SCANRSTB_in;
  wire CH0_TSTCLK0_in;
  wire CH0_TSTCLK1_in;
  wire CH0_TXCOMINIT_in;
  wire CH0_TXCOMSAS_in;
  wire CH0_TXCOMWAKE_in;
  wire CH0_TXDAPICODEOVRDEN_in;
  wire CH0_TXDAPICODERESET_in;
  wire CH0_TXDAPIRESET_in;
  wire CH0_TXDETECTRX_in;
  wire CH0_TXDLYALIGNREQ_in;
  wire CH0_TXELECIDLE_in;
  wire CH0_TXINHIBIT_in;
  wire CH0_TXLATCLK_in;
  wire CH0_TXMLDCHAINDONE_in;
  wire CH0_TXMLDCHAINREQ_in;
  wire CH0_TXONESZEROS_in;
  wire CH0_TXPAUSEDELAYALIGN_in;
  wire CH0_TXPCSRESETMASK_in;
  wire CH0_TXPHALIGNREQ_in;
  wire CH0_TXPHDLYPD_in;
  wire CH0_TXPHDLYRESET_in;
  wire CH0_TXPHDLYTSTCLK_in;
  wire CH0_TXPHSETINITREQ_in;
  wire CH0_TXPHSHIFT180_in;
  wire CH0_TXPICODEOVRDEN_in;
  wire CH0_TXPICODERESET_in;
  wire CH0_TXPIPPMEN_in;
  wire CH0_TXPISOPD_in;
  wire CH0_TXPOLARITY_in;
  wire CH0_TXPRBSFORCEERR_in;
  wire CH0_TXPROGDIVRESET_in;
  wire CH0_TXQPIBIASEN_in;
  wire CH0_TXQPIWEAKPU_in;
  wire CH0_TXSWING_in;
  wire CH0_TXSYNCALLIN_in;
  wire CH0_TXUSERRDY_in;
  wire CH0_TXUSRCLK_in;
  wire CH1_BSR_SERIAL_in;
  wire CH1_CDRBMCDRREQ_in;
  wire CH1_CDRFREQOS_in;
  wire CH1_CDRINCPCTRL_in;
  wire CH1_CDRSTEPDIR_in;
  wire CH1_CDRSTEPSQ_in;
  wire CH1_CDRSTEPSX_in;
  wire CH1_CLKRSVD0_in;
  wire CH1_CLKRSVD1_in;
  wire CH1_CSSDSTOPCLK_in;
  wire CH1_DFEHOLD_in;
  wire CH1_DFEOVRD_in;
  wire CH1_DMONFIFORESET_in;
  wire CH1_DMONITORCLK_in;
  wire CH1_EDTUPDATEB_in;
  wire CH1_EYESCANRESET_in;
  wire CH1_EYESCANTRIGGER_in;
  wire CH1_GTRXRESET_in;
  wire CH1_GTTXRESET_in;
  wire CH1_GTYPRXN_in;
  wire CH1_GTYPRXP_in;
  wire CH1_HSDPPCSRESET_in;
  wire CH1_ILORESETMASK_in;
  wire CH1_ILORESET_in;
  wire CH1_PCIERSTB_in;
  wire CH1_PHYESMADAPTSAVE_in;
  wire CH1_RXCDRHOLD_in;
  wire CH1_RXCDROVRDEN_in;
  wire CH1_RXCDRRESET_in;
  wire CH1_RXDAPICODEOVRDEN_in;
  wire CH1_RXDAPICODERESET_in;
  wire CH1_RXDAPIRESET_in;
  wire CH1_RXDLYALIGNREQ_in;
  wire CH1_RXEQTRAINING_in;
  wire CH1_RXGEARBOXSLIP_in;
  wire CH1_RXLATCLK_in;
  wire CH1_RXLPMEN_in;
  wire CH1_RXMLDCHAINDONE_in;
  wire CH1_RXMLDCHAINREQ_in;
  wire CH1_RXMLFINEALIGNREQ_in;
  wire CH1_RXOOBRESET_in;
  wire CH1_RXPHALIGNREQ_in;
  wire CH1_RXPHDLYPD_in;
  wire CH1_RXPHDLYRESET_in;
  wire CH1_RXPHSETINITREQ_in;
  wire CH1_RXPHSHIFT180_in;
  wire CH1_RXPOLARITY_in;
  wire CH1_RXPRBSCNTRESET_in;
  wire CH1_RXPROGDIVRESET_in;
  wire CH1_RXQPIEN_in;
  wire CH1_RXSLIDE_in;
  wire CH1_RXSYNCALLIN_in;
  wire CH1_RXTERMINATION_in;
  wire CH1_RXUSERRDY_in;
  wire CH1_RXUSRCLK_in;
  wire CH1_SCANCLKB_in;
  wire CH1_SCANCNTRLIN_in;
  wire CH1_SCANENB_in;
  wire CH1_SCANRSTB_in;
  wire CH1_TSTCLK0_in;
  wire CH1_TSTCLK1_in;
  wire CH1_TXCOMINIT_in;
  wire CH1_TXCOMSAS_in;
  wire CH1_TXCOMWAKE_in;
  wire CH1_TXDAPICODEOVRDEN_in;
  wire CH1_TXDAPICODERESET_in;
  wire CH1_TXDAPIRESET_in;
  wire CH1_TXDETECTRX_in;
  wire CH1_TXDLYALIGNREQ_in;
  wire CH1_TXELECIDLE_in;
  wire CH1_TXINHIBIT_in;
  wire CH1_TXLATCLK_in;
  wire CH1_TXMLDCHAINDONE_in;
  wire CH1_TXMLDCHAINREQ_in;
  wire CH1_TXONESZEROS_in;
  wire CH1_TXPAUSEDELAYALIGN_in;
  wire CH1_TXPCSRESETMASK_in;
  wire CH1_TXPHALIGNREQ_in;
  wire CH1_TXPHDLYPD_in;
  wire CH1_TXPHDLYRESET_in;
  wire CH1_TXPHDLYTSTCLK_in;
  wire CH1_TXPHSETINITREQ_in;
  wire CH1_TXPHSHIFT180_in;
  wire CH1_TXPICODEOVRDEN_in;
  wire CH1_TXPICODERESET_in;
  wire CH1_TXPIPPMEN_in;
  wire CH1_TXPISOPD_in;
  wire CH1_TXPOLARITY_in;
  wire CH1_TXPRBSFORCEERR_in;
  wire CH1_TXPROGDIVRESET_in;
  wire CH1_TXQPIBIASEN_in;
  wire CH1_TXQPIWEAKPU_in;
  wire CH1_TXSWING_in;
  wire CH1_TXSYNCALLIN_in;
  wire CH1_TXUSERRDY_in;
  wire CH1_TXUSRCLK_in;
  wire CH2_BSR_SERIAL_in;
  wire CH2_CDRBMCDRREQ_in;
  wire CH2_CDRFREQOS_in;
  wire CH2_CDRINCPCTRL_in;
  wire CH2_CDRSTEPDIR_in;
  wire CH2_CDRSTEPSQ_in;
  wire CH2_CDRSTEPSX_in;
  wire CH2_CLKRSVD0_in;
  wire CH2_CLKRSVD1_in;
  wire CH2_CSSDSTOPCLK_in;
  wire CH2_DFEHOLD_in;
  wire CH2_DFEOVRD_in;
  wire CH2_DMONFIFORESET_in;
  wire CH2_DMONITORCLK_in;
  wire CH2_EDTUPDATEB_in;
  wire CH2_EYESCANRESET_in;
  wire CH2_EYESCANTRIGGER_in;
  wire CH2_GTRXRESET_in;
  wire CH2_GTTXRESET_in;
  wire CH2_GTYPRXN_in;
  wire CH2_GTYPRXP_in;
  wire CH2_HSDPPCSRESET_in;
  wire CH2_ILORESETMASK_in;
  wire CH2_ILORESET_in;
  wire CH2_PCIERSTB_in;
  wire CH2_PHYESMADAPTSAVE_in;
  wire CH2_RXCDRHOLD_in;
  wire CH2_RXCDROVRDEN_in;
  wire CH2_RXCDRRESET_in;
  wire CH2_RXDAPICODEOVRDEN_in;
  wire CH2_RXDAPICODERESET_in;
  wire CH2_RXDAPIRESET_in;
  wire CH2_RXDLYALIGNREQ_in;
  wire CH2_RXEQTRAINING_in;
  wire CH2_RXGEARBOXSLIP_in;
  wire CH2_RXLATCLK_in;
  wire CH2_RXLPMEN_in;
  wire CH2_RXMLDCHAINDONE_in;
  wire CH2_RXMLDCHAINREQ_in;
  wire CH2_RXMLFINEALIGNREQ_in;
  wire CH2_RXOOBRESET_in;
  wire CH2_RXPHALIGNREQ_in;
  wire CH2_RXPHDLYPD_in;
  wire CH2_RXPHDLYRESET_in;
  wire CH2_RXPHSETINITREQ_in;
  wire CH2_RXPHSHIFT180_in;
  wire CH2_RXPOLARITY_in;
  wire CH2_RXPRBSCNTRESET_in;
  wire CH2_RXPROGDIVRESET_in;
  wire CH2_RXQPIEN_in;
  wire CH2_RXSLIDE_in;
  wire CH2_RXSYNCALLIN_in;
  wire CH2_RXTERMINATION_in;
  wire CH2_RXUSERRDY_in;
  wire CH2_RXUSRCLK_in;
  wire CH2_SCANCLKB_in;
  wire CH2_SCANCNTRLIN_in;
  wire CH2_SCANENB_in;
  wire CH2_SCANRSTB_in;
  wire CH2_TSTCLK0_in;
  wire CH2_TSTCLK1_in;
  wire CH2_TXCOMINIT_in;
  wire CH2_TXCOMSAS_in;
  wire CH2_TXCOMWAKE_in;
  wire CH2_TXDAPICODEOVRDEN_in;
  wire CH2_TXDAPICODERESET_in;
  wire CH2_TXDAPIRESET_in;
  wire CH2_TXDETECTRX_in;
  wire CH2_TXDLYALIGNREQ_in;
  wire CH2_TXELECIDLE_in;
  wire CH2_TXINHIBIT_in;
  wire CH2_TXLATCLK_in;
  wire CH2_TXMLDCHAINDONE_in;
  wire CH2_TXMLDCHAINREQ_in;
  wire CH2_TXONESZEROS_in;
  wire CH2_TXPAUSEDELAYALIGN_in;
  wire CH2_TXPCSRESETMASK_in;
  wire CH2_TXPHALIGNREQ_in;
  wire CH2_TXPHDLYPD_in;
  wire CH2_TXPHDLYRESET_in;
  wire CH2_TXPHDLYTSTCLK_in;
  wire CH2_TXPHSETINITREQ_in;
  wire CH2_TXPHSHIFT180_in;
  wire CH2_TXPICODEOVRDEN_in;
  wire CH2_TXPICODERESET_in;
  wire CH2_TXPIPPMEN_in;
  wire CH2_TXPISOPD_in;
  wire CH2_TXPOLARITY_in;
  wire CH2_TXPRBSFORCEERR_in;
  wire CH2_TXPROGDIVRESET_in;
  wire CH2_TXQPIBIASEN_in;
  wire CH2_TXQPIWEAKPU_in;
  wire CH2_TXSWING_in;
  wire CH2_TXSYNCALLIN_in;
  wire CH2_TXUSERRDY_in;
  wire CH2_TXUSRCLK_in;
  wire CH3_BSR_SERIAL_in;
  wire CH3_CDRBMCDRREQ_in;
  wire CH3_CDRFREQOS_in;
  wire CH3_CDRINCPCTRL_in;
  wire CH3_CDRSTEPDIR_in;
  wire CH3_CDRSTEPSQ_in;
  wire CH3_CDRSTEPSX_in;
  wire CH3_CLKRSVD0_in;
  wire CH3_CLKRSVD1_in;
  wire CH3_CSSDSTOPCLK_in;
  wire CH3_DFEHOLD_in;
  wire CH3_DFEOVRD_in;
  wire CH3_DMONFIFORESET_in;
  wire CH3_DMONITORCLK_in;
  wire CH3_EDTUPDATEB_in;
  wire CH3_EYESCANRESET_in;
  wire CH3_EYESCANTRIGGER_in;
  wire CH3_GTRXRESET_in;
  wire CH3_GTTXRESET_in;
  wire CH3_GTYPRXN_in;
  wire CH3_GTYPRXP_in;
  wire CH3_HSDPPCSRESET_in;
  wire CH3_ILORESETMASK_in;
  wire CH3_ILORESET_in;
  wire CH3_PCIERSTB_in;
  wire CH3_PHYESMADAPTSAVE_in;
  wire CH3_RXCDRHOLD_in;
  wire CH3_RXCDROVRDEN_in;
  wire CH3_RXCDRRESET_in;
  wire CH3_RXDAPICODEOVRDEN_in;
  wire CH3_RXDAPICODERESET_in;
  wire CH3_RXDAPIRESET_in;
  wire CH3_RXDLYALIGNREQ_in;
  wire CH3_RXEQTRAINING_in;
  wire CH3_RXGEARBOXSLIP_in;
  wire CH3_RXLATCLK_in;
  wire CH3_RXLPMEN_in;
  wire CH3_RXMLDCHAINDONE_in;
  wire CH3_RXMLDCHAINREQ_in;
  wire CH3_RXMLFINEALIGNREQ_in;
  wire CH3_RXOOBRESET_in;
  wire CH3_RXPHALIGNREQ_in;
  wire CH3_RXPHDLYPD_in;
  wire CH3_RXPHDLYRESET_in;
  wire CH3_RXPHSETINITREQ_in;
  wire CH3_RXPHSHIFT180_in;
  wire CH3_RXPOLARITY_in;
  wire CH3_RXPRBSCNTRESET_in;
  wire CH3_RXPROGDIVRESET_in;
  wire CH3_RXQPIEN_in;
  wire CH3_RXSLIDE_in;
  wire CH3_RXSYNCALLIN_in;
  wire CH3_RXTERMINATION_in;
  wire CH3_RXUSERRDY_in;
  wire CH3_RXUSRCLK_in;
  wire CH3_SCANCLKB_in;
  wire CH3_SCANCNTRLIN_in;
  wire CH3_SCANENB_in;
  wire CH3_SCANRSTB_in;
  wire CH3_TSTCLK0_in;
  wire CH3_TSTCLK1_in;
  wire CH3_TXCOMINIT_in;
  wire CH3_TXCOMSAS_in;
  wire CH3_TXCOMWAKE_in;
  wire CH3_TXDAPICODEOVRDEN_in;
  wire CH3_TXDAPICODERESET_in;
  wire CH3_TXDAPIRESET_in;
  wire CH3_TXDETECTRX_in;
  wire CH3_TXDLYALIGNREQ_in;
  wire CH3_TXELECIDLE_in;
  wire CH3_TXINHIBIT_in;
  wire CH3_TXLATCLK_in;
  wire CH3_TXMLDCHAINDONE_in;
  wire CH3_TXMLDCHAINREQ_in;
  wire CH3_TXONESZEROS_in;
  wire CH3_TXPAUSEDELAYALIGN_in;
  wire CH3_TXPCSRESETMASK_in;
  wire CH3_TXPHALIGNREQ_in;
  wire CH3_TXPHDLYPD_in;
  wire CH3_TXPHDLYRESET_in;
  wire CH3_TXPHDLYTSTCLK_in;
  wire CH3_TXPHSETINITREQ_in;
  wire CH3_TXPHSHIFT180_in;
  wire CH3_TXPICODEOVRDEN_in;
  wire CH3_TXPICODERESET_in;
  wire CH3_TXPIPPMEN_in;
  wire CH3_TXPISOPD_in;
  wire CH3_TXPOLARITY_in;
  wire CH3_TXPRBSFORCEERR_in;
  wire CH3_TXPROGDIVRESET_in;
  wire CH3_TXQPIBIASEN_in;
  wire CH3_TXQPIWEAKPU_in;
  wire CH3_TXSWING_in;
  wire CH3_TXSYNCALLIN_in;
  wire CH3_TXUSERRDY_in;
  wire CH3_TXUSRCLK_in;
  wire COESTATUSDEBUG_in;
  wire CSSDSTOPCLK_in;
  wire DEBUGTRACECLK_in;
  wire DEBUGTRACEREADY_in;
  wire EDTUPDATEB_in;
  wire HSCLK0_LCPLLGTGREFCLK_in;
  wire HSCLK0_LCPLLGTREFCLK0_in;
  wire HSCLK0_LCPLLGTREFCLK1_in;
  wire HSCLK0_LCPLLNORTHREFCLK0_in;
  wire HSCLK0_LCPLLNORTHREFCLK1_in;
  wire HSCLK0_LCPLLPD_in;
  wire HSCLK0_LCPLLRESETBYPASSMODE_in;
  wire HSCLK0_LCPLLRESET_in;
  wire HSCLK0_LCPLLSDMTOGGLE_in;
  wire HSCLK0_LCPLLSOUTHREFCLK0_in;
  wire HSCLK0_LCPLLSOUTHREFCLK1_in;
  wire HSCLK0_RPLLGTGREFCLK_in;
  wire HSCLK0_RPLLGTREFCLK0_in;
  wire HSCLK0_RPLLGTREFCLK1_in;
  wire HSCLK0_RPLLNORTHREFCLK0_in;
  wire HSCLK0_RPLLNORTHREFCLK1_in;
  wire HSCLK0_RPLLPD_in;
  wire HSCLK0_RPLLRESETBYPASSMODE_in;
  wire HSCLK0_RPLLRESET_in;
  wire HSCLK0_RPLLSDMTOGGLE_in;
  wire HSCLK0_RPLLSOUTHREFCLK0_in;
  wire HSCLK0_RPLLSOUTHREFCLK1_in;
  wire HSCLK1_LCPLLGTGREFCLK_in;
  wire HSCLK1_LCPLLGTREFCLK0_in;
  wire HSCLK1_LCPLLGTREFCLK1_in;
  wire HSCLK1_LCPLLNORTHREFCLK0_in;
  wire HSCLK1_LCPLLNORTHREFCLK1_in;
  wire HSCLK1_LCPLLPD_in;
  wire HSCLK1_LCPLLRESETBYPASSMODE_in;
  wire HSCLK1_LCPLLRESET_in;
  wire HSCLK1_LCPLLSDMTOGGLE_in;
  wire HSCLK1_LCPLLSOUTHREFCLK0_in;
  wire HSCLK1_LCPLLSOUTHREFCLK1_in;
  wire HSCLK1_RPLLGTGREFCLK_in;
  wire HSCLK1_RPLLGTREFCLK0_in;
  wire HSCLK1_RPLLGTREFCLK1_in;
  wire HSCLK1_RPLLNORTHREFCLK0_in;
  wire HSCLK1_RPLLNORTHREFCLK1_in;
  wire HSCLK1_RPLLPD_in;
  wire HSCLK1_RPLLRESETBYPASSMODE_in;
  wire HSCLK1_RPLLRESET_in;
  wire HSCLK1_RPLLSDMTOGGLE_in;
  wire HSCLK1_RPLLSOUTHREFCLK0_in;
  wire HSCLK1_RPLLSOUTHREFCLK1_in;
  wire M0_AXIS_TREADY_in;
  wire M1_AXIS_TREADY_in;
  wire M2_AXIS_TREADY_in;
  wire PCIELINKREACHTARGET_in;
  wire RCALENB_in;
  wire REFCLK0_CLKTESTSIG_in;
  wire REFCLK0_GTREFCLKPD_in;
  wire REFCLK1_CLKTESTSIG_in;
  wire REFCLK1_GTREFCLKPD_in;
  wire RXMARGINCLK_in;
  wire RXMARGINREQREQ_in;
  wire RXMARGINRESACK_in;
  wire S0_AXIS_TLAST_in;
  wire S0_AXIS_TVALID_in;
  wire S1_AXIS_TLAST_in;
  wire S1_AXIS_TVALID_in;
  wire S2_AXIS_TLAST_in;
  wire S2_AXIS_TVALID_in;
  wire SCANCLKB_in;
  wire SCANCNTRLIN_in;
  wire SCANENB_in;
  wire SCANRSTB_in;
  wire TRIGACKOUT0_in;
  wire TRIGIN0_in;
  wire UBENABLE_in;
  wire UBIOLMBRST_in;
  wire UBMBRST_in;
  wire UBRXUART_in;
  wire [11:0] UBINTR_in;
  wire [127:0] CH0_TXDATA_in;
  wire [127:0] CH1_TXDATA_in;
  wire [127:0] CH2_TXDATA_in;
  wire [127:0] CH3_TXDATA_in;
  wire [15:0] APB3PADDR_in;
  wire [15:0] CH0_GTRSVD_in;
  wire [15:0] CH0_PCSRSVDIN_in;
  wire [15:0] CH0_TXCTRL0_in;
  wire [15:0] CH0_TXCTRL1_in;
  wire [15:0] CH1_GTRSVD_in;
  wire [15:0] CH1_PCSRSVDIN_in;
  wire [15:0] CH1_TXCTRL0_in;
  wire [15:0] CH1_TXCTRL1_in;
  wire [15:0] CH2_GTRSVD_in;
  wire [15:0] CH2_PCSRSVDIN_in;
  wire [15:0] CH2_TXCTRL0_in;
  wire [15:0] CH2_TXCTRL1_in;
  wire [15:0] CH3_GTRSVD_in;
  wire [15:0] CH3_PCSRSVDIN_in;
  wire [15:0] CH3_TXCTRL0_in;
  wire [15:0] CH3_TXCTRL1_in;
  wire [1:0] CH0_RXDAPIRESETMASK_in;
  wire [1:0] CH0_RXPD_in;
  wire [1:0] CH0_RXPHALIGNRESETMASK_in;
  wire [1:0] CH0_RXRESETMODE_in;
  wire [1:0] CH0_TXDAPIRESETMASK_in;
  wire [1:0] CH0_TXDEEMPH_in;
  wire [1:0] CH0_TXPD_in;
  wire [1:0] CH0_TXPHALIGNRESETMASK_in;
  wire [1:0] CH0_TXRESETMODE_in;
  wire [1:0] CH1_RXDAPIRESETMASK_in;
  wire [1:0] CH1_RXPD_in;
  wire [1:0] CH1_RXPHALIGNRESETMASK_in;
  wire [1:0] CH1_RXRESETMODE_in;
  wire [1:0] CH1_TXDAPIRESETMASK_in;
  wire [1:0] CH1_TXDEEMPH_in;
  wire [1:0] CH1_TXPD_in;
  wire [1:0] CH1_TXPHALIGNRESETMASK_in;
  wire [1:0] CH1_TXRESETMODE_in;
  wire [1:0] CH2_RXDAPIRESETMASK_in;
  wire [1:0] CH2_RXPD_in;
  wire [1:0] CH2_RXPHALIGNRESETMASK_in;
  wire [1:0] CH2_RXRESETMODE_in;
  wire [1:0] CH2_TXDAPIRESETMASK_in;
  wire [1:0] CH2_TXDEEMPH_in;
  wire [1:0] CH2_TXPD_in;
  wire [1:0] CH2_TXPHALIGNRESETMASK_in;
  wire [1:0] CH2_TXRESETMODE_in;
  wire [1:0] CH3_RXDAPIRESETMASK_in;
  wire [1:0] CH3_RXPD_in;
  wire [1:0] CH3_RXPHALIGNRESETMASK_in;
  wire [1:0] CH3_RXRESETMODE_in;
  wire [1:0] CH3_TXDAPIRESETMASK_in;
  wire [1:0] CH3_TXDEEMPH_in;
  wire [1:0] CH3_TXPD_in;
  wire [1:0] CH3_TXPHALIGNRESETMASK_in;
  wire [1:0] CH3_TXRESETMODE_in;
  wire [1:0] HSCLK0_LCPLLRESETMASK_in;
  wire [1:0] HSCLK0_RPLLRESETMASK_in;
  wire [1:0] HSCLK1_LCPLLRESETMASK_in;
  wire [1:0] HSCLK1_RPLLRESETMASK_in;
  wire [1:0] RESETDONE_NORTHIN_in;
  wire [1:0] RESETDONE_SOUTHIN_in;
  wire [1:0] RXMARGINREQLANENUM_in;
  wire [25:0] HSCLK0_LCPLLSDMDATA_in;
  wire [25:0] HSCLK0_RPLLSDMDATA_in;
  wire [25:0] HSCLK1_LCPLLSDMDATA_in;
  wire [25:0] HSCLK1_RPLLSDMDATA_in;
  wire [2:0] CH0_LOOPBACK_in;
  wire [2:0] CH0_TXMARGIN_in;
  wire [2:0] CH0_TXPMARESETMASK_in;
  wire [2:0] CH1_LOOPBACK_in;
  wire [2:0] CH1_TXMARGIN_in;
  wire [2:0] CH1_TXPMARESETMASK_in;
  wire [2:0] CH2_LOOPBACK_in;
  wire [2:0] CH2_TXMARGIN_in;
  wire [2:0] CH2_TXPMARESETMASK_in;
  wire [2:0] CH3_LOOPBACK_in;
  wire [2:0] CH3_TXMARGIN_in;
  wire [2:0] CH3_TXPMARESETMASK_in;
  wire [2:0] HSCLK0_LCPLLREFCLKSEL_in;
  wire [2:0] HSCLK0_RPLLREFCLKSEL_in;
  wire [2:0] HSCLK1_LCPLLREFCLKSEL_in;
  wire [2:0] HSCLK1_RPLLREFCLKSEL_in;
  wire [31:0] APB3PWDATA_in;
  wire [31:0] GPI_in;
  wire [31:0] S0_AXIS_TDATA_in;
  wire [31:0] S1_AXIS_TDATA_in;
  wire [31:0] S2_AXIS_TDATA_in;
  wire [3:0] CH0_RXPRBSSEL_in;
  wire [3:0] CH0_SCANIN_in;
  wire [3:0] CH0_TXPRBSSEL_in;
  wire [3:0] CH1_RXPRBSSEL_in;
  wire [3:0] CH1_SCANIN_in;
  wire [3:0] CH1_TXPRBSSEL_in;
  wire [3:0] CH2_RXPRBSSEL_in;
  wire [3:0] CH2_SCANIN_in;
  wire [3:0] CH2_TXPRBSSEL_in;
  wire [3:0] CH3_RXPRBSSEL_in;
  wire [3:0] CH3_SCANIN_in;
  wire [3:0] CH3_TXPRBSSEL_in;
  wire [3:0] MSTRXRESET_in;
  wire [3:0] MSTTXRESET_in;
  wire [3:0] RXMARGINREQCMD_in;
  wire [3:0] RXPINORTHIN_in;
  wire [3:0] RXPISOUTHIN_in;
  wire [3:0] SCANIN_in;
  wire [3:0] TXPINORTHIN_in;
  wire [3:0] TXPISOUTHIN_in;
  wire [4:0] BGRCALOVRD_in;
  wire [4:0] CH0_RXCHBONDI_in;
  wire [4:0] CH0_RXPCSRESETMASK_in;
  wire [4:0] CH0_TXDIFFCTRL_in;
  wire [4:0] CH0_TXPIPPMSTEPSIZE_in;
  wire [4:0] CH0_TXPOSTCURSOR_in;
  wire [4:0] CH0_TXPRECURSOR_in;
  wire [4:0] CH1_RXCHBONDI_in;
  wire [4:0] CH1_RXPCSRESETMASK_in;
  wire [4:0] CH1_TXDIFFCTRL_in;
  wire [4:0] CH1_TXPIPPMSTEPSIZE_in;
  wire [4:0] CH1_TXPOSTCURSOR_in;
  wire [4:0] CH1_TXPRECURSOR_in;
  wire [4:0] CH2_RXCHBONDI_in;
  wire [4:0] CH2_RXPCSRESETMASK_in;
  wire [4:0] CH2_TXDIFFCTRL_in;
  wire [4:0] CH2_TXPIPPMSTEPSIZE_in;
  wire [4:0] CH2_TXPOSTCURSOR_in;
  wire [4:0] CH2_TXPRECURSOR_in;
  wire [4:0] CH3_RXCHBONDI_in;
  wire [4:0] CH3_RXPCSRESETMASK_in;
  wire [4:0] CH3_TXDIFFCTRL_in;
  wire [4:0] CH3_TXPIPPMSTEPSIZE_in;
  wire [4:0] CH3_TXPOSTCURSOR_in;
  wire [4:0] CH3_TXPRECURSOR_in;
  wire [5:0] CH0_TXHEADER_in;
  wire [5:0] CH1_TXHEADER_in;
  wire [5:0] CH2_TXHEADER_in;
  wire [5:0] CH3_TXHEADER_in;
  wire [5:0] PCIELTSSM_in;
  wire [5:0] PIPENORTHIN_in;
  wire [5:0] PIPESOUTHIN_in;
  wire [6:0] CH0_RXPMARESETMASK_in;
  wire [6:0] CH0_TXMAINCURSOR_in;
  wire [6:0] CH0_TXSEQUENCE_in;
  wire [6:0] CH1_RXPMARESETMASK_in;
  wire [6:0] CH1_TXMAINCURSOR_in;
  wire [6:0] CH1_TXSEQUENCE_in;
  wire [6:0] CH2_RXPMARESETMASK_in;
  wire [6:0] CH2_TXMAINCURSOR_in;
  wire [6:0] CH2_TXSEQUENCE_in;
  wire [6:0] CH3_RXPMARESETMASK_in;
  wire [6:0] CH3_TXMAINCURSOR_in;
  wire [6:0] CH3_TXSEQUENCE_in;
  wire [7:0] CH0_RXRATE_in;
  wire [7:0] CH0_TXCTRL2_in;
  wire [7:0] CH0_TXRATE_in;
  wire [7:0] CH1_RXRATE_in;
  wire [7:0] CH1_TXCTRL2_in;
  wire [7:0] CH1_TXRATE_in;
  wire [7:0] CH2_RXRATE_in;
  wire [7:0] CH2_TXCTRL2_in;
  wire [7:0] CH2_TXRATE_in;
  wire [7:0] CH3_RXRATE_in;
  wire [7:0] CH3_TXCTRL2_in;
  wire [7:0] CH3_TXRATE_in;
  wire [7:0] CTRLRSVDIN_in;
  wire [7:0] HSCLK0_LCPLLFBDIV_in;
  wire [7:0] HSCLK0_RPLLFBDIV_in;
  wire [7:0] HSCLK1_LCPLLFBDIV_in;
  wire [7:0] HSCLK1_RPLLFBDIV_in;
  wire [7:0] RXMARGINREQPAYLD_in;

`ifdef XIL_TIMING
  wire APB3CLK_delay;
  wire APB3PENABLE_delay;
  wire APB3PSEL_delay;
  wire APB3PWRITE_delay;
  wire AXISCLK_delay;
  wire CH0_EYESCANTRIGGER_delay;
  wire CH0_PHYESMADAPTSAVE_delay;
  wire CH0_RXDLYALIGNREQ_delay;
  wire CH0_RXEQTRAINING_delay;
  wire CH0_RXGEARBOXSLIP_delay;
  wire CH0_RXMLDCHAINDONE_delay;
  wire CH0_RXMLDCHAINREQ_delay;
  wire CH0_RXPHALIGNREQ_delay;
  wire CH0_RXPHSETINITREQ_delay;
  wire CH0_RXPHSHIFT180_delay;
  wire CH0_RXPOLARITY_delay;
  wire CH0_RXSLIDE_delay;
  wire CH0_RXUSRCLK_delay;
  wire CH0_TXCOMINIT_delay;
  wire CH0_TXCOMSAS_delay;
  wire CH0_TXCOMWAKE_delay;
  wire CH0_TXDETECTRX_delay;
  wire CH0_TXELECIDLE_delay;
  wire CH0_TXINHIBIT_delay;
  wire CH0_TXPIPPMEN_delay;
  wire CH0_TXPOLARITY_delay;
  wire CH0_TXUSRCLK_delay;
  wire CH1_EYESCANTRIGGER_delay;
  wire CH1_PHYESMADAPTSAVE_delay;
  wire CH1_RXDLYALIGNREQ_delay;
  wire CH1_RXEQTRAINING_delay;
  wire CH1_RXGEARBOXSLIP_delay;
  wire CH1_RXMLDCHAINDONE_delay;
  wire CH1_RXMLDCHAINREQ_delay;
  wire CH1_RXPHALIGNREQ_delay;
  wire CH1_RXPHSETINITREQ_delay;
  wire CH1_RXPHSHIFT180_delay;
  wire CH1_RXPOLARITY_delay;
  wire CH1_RXSLIDE_delay;
  wire CH1_RXUSRCLK_delay;
  wire CH1_TXCOMINIT_delay;
  wire CH1_TXCOMSAS_delay;
  wire CH1_TXCOMWAKE_delay;
  wire CH1_TXDETECTRX_delay;
  wire CH1_TXELECIDLE_delay;
  wire CH1_TXINHIBIT_delay;
  wire CH1_TXPIPPMEN_delay;
  wire CH1_TXPOLARITY_delay;
  wire CH1_TXUSRCLK_delay;
  wire CH2_EYESCANTRIGGER_delay;
  wire CH2_PHYESMADAPTSAVE_delay;
  wire CH2_RXDLYALIGNREQ_delay;
  wire CH2_RXEQTRAINING_delay;
  wire CH2_RXGEARBOXSLIP_delay;
  wire CH2_RXMLDCHAINDONE_delay;
  wire CH2_RXMLDCHAINREQ_delay;
  wire CH2_RXPHALIGNREQ_delay;
  wire CH2_RXPHSETINITREQ_delay;
  wire CH2_RXPHSHIFT180_delay;
  wire CH2_RXPOLARITY_delay;
  wire CH2_RXSLIDE_delay;
  wire CH2_RXUSRCLK_delay;
  wire CH2_TXCOMINIT_delay;
  wire CH2_TXCOMSAS_delay;
  wire CH2_TXCOMWAKE_delay;
  wire CH2_TXDETECTRX_delay;
  wire CH2_TXELECIDLE_delay;
  wire CH2_TXINHIBIT_delay;
  wire CH2_TXPIPPMEN_delay;
  wire CH2_TXPOLARITY_delay;
  wire CH2_TXUSRCLK_delay;
  wire CH3_EYESCANTRIGGER_delay;
  wire CH3_PHYESMADAPTSAVE_delay;
  wire CH3_RXDLYALIGNREQ_delay;
  wire CH3_RXEQTRAINING_delay;
  wire CH3_RXGEARBOXSLIP_delay;
  wire CH3_RXMLDCHAINDONE_delay;
  wire CH3_RXMLDCHAINREQ_delay;
  wire CH3_RXPHALIGNREQ_delay;
  wire CH3_RXPHSETINITREQ_delay;
  wire CH3_RXPHSHIFT180_delay;
  wire CH3_RXPOLARITY_delay;
  wire CH3_RXSLIDE_delay;
  wire CH3_RXUSRCLK_delay;
  wire CH3_TXCOMINIT_delay;
  wire CH3_TXCOMSAS_delay;
  wire CH3_TXCOMWAKE_delay;
  wire CH3_TXDETECTRX_delay;
  wire CH3_TXELECIDLE_delay;
  wire CH3_TXINHIBIT_delay;
  wire CH3_TXPIPPMEN_delay;
  wire CH3_TXPOLARITY_delay;
  wire CH3_TXUSRCLK_delay;
  wire DEBUGTRACECLK_delay;
  wire DEBUGTRACEREADY_delay;
  wire M0_AXIS_TREADY_delay;
  wire M1_AXIS_TREADY_delay;
  wire M2_AXIS_TREADY_delay;
  wire RXMARGINCLK_delay;
  wire RXMARGINREQREQ_delay;
  wire RXMARGINRESACK_delay;
  wire S0_AXIS_TLAST_delay;
  wire S0_AXIS_TVALID_delay;
  wire S1_AXIS_TLAST_delay;
  wire S1_AXIS_TVALID_delay;
  wire S2_AXIS_TLAST_delay;
  wire S2_AXIS_TVALID_delay;
  wire [127:0] CH0_TXDATA_delay;
  wire [127:0] CH1_TXDATA_delay;
  wire [127:0] CH2_TXDATA_delay;
  wire [127:0] CH3_TXDATA_delay;
  wire [15:0] APB3PADDR_delay;
  wire [15:0] CH0_TXCTRL0_delay;
  wire [15:0] CH0_TXCTRL1_delay;
  wire [15:0] CH1_TXCTRL0_delay;
  wire [15:0] CH1_TXCTRL1_delay;
  wire [15:0] CH2_TXCTRL0_delay;
  wire [15:0] CH2_TXCTRL1_delay;
  wire [15:0] CH3_TXCTRL0_delay;
  wire [15:0] CH3_TXCTRL1_delay;
  wire [1:0] CH0_RXPD_delay;
  wire [1:0] CH0_TXPD_delay;
  wire [1:0] CH1_RXPD_delay;
  wire [1:0] CH1_TXPD_delay;
  wire [1:0] CH2_RXPD_delay;
  wire [1:0] CH2_TXPD_delay;
  wire [1:0] CH3_RXPD_delay;
  wire [1:0] CH3_TXPD_delay;
  wire [1:0] RXMARGINREQLANENUM_delay;
  wire [31:0] APB3PWDATA_delay;
  wire [31:0] S0_AXIS_TDATA_delay;
  wire [31:0] S1_AXIS_TDATA_delay;
  wire [31:0] S2_AXIS_TDATA_delay;
  wire [3:0] RXMARGINREQCMD_delay;
  wire [4:0] CH0_RXCHBONDI_delay;
  wire [4:0] CH0_TXPIPPMSTEPSIZE_delay;
  wire [4:0] CH1_RXCHBONDI_delay;
  wire [4:0] CH1_TXPIPPMSTEPSIZE_delay;
  wire [4:0] CH2_RXCHBONDI_delay;
  wire [4:0] CH2_TXPIPPMSTEPSIZE_delay;
  wire [4:0] CH3_RXCHBONDI_delay;
  wire [4:0] CH3_TXPIPPMSTEPSIZE_delay;
  wire [5:0] CH0_TXHEADER_delay;
  wire [5:0] CH1_TXHEADER_delay;
  wire [5:0] CH2_TXHEADER_delay;
  wire [5:0] CH3_TXHEADER_delay;
  wire [5:0] PCIELTSSM_delay;
  wire [6:0] CH0_TXSEQUENCE_delay;
  wire [6:0] CH1_TXSEQUENCE_delay;
  wire [6:0] CH2_TXSEQUENCE_delay;
  wire [6:0] CH3_TXSEQUENCE_delay;
  wire [7:0] CH0_RXRATE_delay;
  wire [7:0] CH0_TXCTRL2_delay;
  wire [7:0] CH0_TXRATE_delay;
  wire [7:0] CH1_RXRATE_delay;
  wire [7:0] CH1_TXCTRL2_delay;
  wire [7:0] CH1_TXRATE_delay;
  wire [7:0] CH2_RXRATE_delay;
  wire [7:0] CH2_TXCTRL2_delay;
  wire [7:0] CH2_TXRATE_delay;
  wire [7:0] CH3_RXRATE_delay;
  wire [7:0] CH3_TXCTRL2_delay;
  wire [7:0] CH3_TXRATE_delay;
  wire [7:0] RXMARGINREQPAYLD_delay;
`endif

  assign APB3PRDATA = APB3PRDATA_out;
  assign APB3PREADY = APB3PREADY_out;
  assign APB3PSLVERR = APB3PSLVERR_out;
  assign CH0_BUFGTCE = CH0_BUFGTCE_out;
  assign CH0_BUFGTCEMASK = CH0_BUFGTCEMASK_out;
  assign CH0_BUFGTDIV = CH0_BUFGTDIV_out;
  assign CH0_BUFGTRST = CH0_BUFGTRST_out;
  assign CH0_BUFGTRSTMASK = CH0_BUFGTRSTMASK_out;
  assign CH0_DMONITOROUT = CH0_DMONITOROUT_out;
  assign CH0_DMONITOROUTCLK = CH0_DMONITOROUTCLK_out;
  assign CH0_EYESCANDATAERROR = CH0_EYESCANDATAERROR_out;
  assign CH0_GTYPTXN = CH0_GTYPTXN_out;
  assign CH0_GTYPTXP = CH0_GTYPTXP_out;
  assign CH0_ILORESETDONE = CH0_ILORESETDONE_out;
  assign CH0_PCSRSVDOUT = CH0_PCSRSVDOUT_out;
  assign CH0_PHYREADY = CH0_PHYREADY_out;
  assign CH0_PHYSTATUS = CH0_PHYSTATUS_out;
  assign CH0_PINRSVDAS = CH0_PINRSVDAS_out;
  assign CH0_REFDEBUGOUT = CH0_REFDEBUGOUT_out;
  assign CH0_RESETEXCEPTION = CH0_RESETEXCEPTION_out;
  assign CH0_RX10GSTAT = CH0_RX10GSTAT_out;
  assign CH0_RXBUFSTATUS = CH0_RXBUFSTATUS_out;
  assign CH0_RXBYTEISALIGNED = CH0_RXBYTEISALIGNED_out;
  assign CH0_RXBYTEREALIGN = CH0_RXBYTEREALIGN_out;
  assign CH0_RXCDRLOCK = CH0_RXCDRLOCK_out;
  assign CH0_RXCDRPHDONE = CH0_RXCDRPHDONE_out;
  assign CH0_RXCHANBONDSEQ = CH0_RXCHANBONDSEQ_out;
  assign CH0_RXCHANISALIGNED = CH0_RXCHANISALIGNED_out;
  assign CH0_RXCHANREALIGN = CH0_RXCHANREALIGN_out;
  assign CH0_RXCHBONDO = CH0_RXCHBONDO_out;
  assign CH0_RXCLKCORCNT = CH0_RXCLKCORCNT_out;
  assign CH0_RXCOMINITDET = CH0_RXCOMINITDET_out;
  assign CH0_RXCOMMADET = CH0_RXCOMMADET_out;
  assign CH0_RXCOMSASDET = CH0_RXCOMSASDET_out;
  assign CH0_RXCOMWAKEDET = CH0_RXCOMWAKEDET_out;
  assign CH0_RXCTRL0 = CH0_RXCTRL0_out;
  assign CH0_RXCTRL1 = CH0_RXCTRL1_out;
  assign CH0_RXCTRL2 = CH0_RXCTRL2_out;
  assign CH0_RXCTRL3 = CH0_RXCTRL3_out;
  assign CH0_RXDAPIRESETDONE = CH0_RXDAPIRESETDONE_out;
  assign CH0_RXDATA = CH0_RXDATA_out;
  assign CH0_RXDATAVALID = CH0_RXDATAVALID_out;
  assign CH0_RXDEBUGPCSOUT = CH0_RXDEBUGPCSOUT_out;
  assign CH0_RXDLYALIGNERR = CH0_RXDLYALIGNERR_out;
  assign CH0_RXDLYALIGNPROG = CH0_RXDLYALIGNPROG_out;
  assign CH0_RXELECIDLE = CH0_RXELECIDLE_out;
  assign CH0_RXFINEALIGNDONE = CH0_RXFINEALIGNDONE_out;
  assign CH0_RXHEADER = CH0_RXHEADER_out;
  assign CH0_RXHEADERVALID = CH0_RXHEADERVALID_out;
  assign CH0_RXOSINTDONE = CH0_RXOSINTDONE_out;
  assign CH0_RXOUTCLK = CH0_RXOUTCLK_out;
  assign CH0_RXPHALIGNDONE = CH0_RXPHALIGNDONE_out;
  assign CH0_RXPHALIGNERR = CH0_RXPHALIGNERR_out;
  assign CH0_RXPHDLYRESETDONE = CH0_RXPHDLYRESETDONE_out;
  assign CH0_RXPHSETINITDONE = CH0_RXPHSETINITDONE_out;
  assign CH0_RXPHSHIFT180DONE = CH0_RXPHSHIFT180DONE_out;
  assign CH0_RXPKDET = CH0_RXPKDET_out;
  assign CH0_RXPMARESETDONE = CH0_RXPMARESETDONE_out;
  assign CH0_RXPRBSERR = CH0_RXPRBSERR_out;
  assign CH0_RXPRBSLOCKED = CH0_RXPRBSLOCKED_out;
  assign CH0_RXPROGDIVRESETDONE = CH0_RXPROGDIVRESETDONE_out;
  assign CH0_RXQPISENN = CH0_RXQPISENN_out;
  assign CH0_RXQPISENP = CH0_RXQPISENP_out;
  assign CH0_RXRESETDONE = CH0_RXRESETDONE_out;
  assign CH0_RXSIMPLEXPHYSTATUS = CH0_RXSIMPLEXPHYSTATUS_out;
  assign CH0_RXSLIDERDY = CH0_RXSLIDERDY_out;
  assign CH0_RXSLIPDONE = CH0_RXSLIPDONE_out;
  assign CH0_RXSTARTOFSEQ = CH0_RXSTARTOFSEQ_out;
  assign CH0_RXSTATUS = CH0_RXSTATUS_out;
  assign CH0_RXSYNCDONE = CH0_RXSYNCDONE_out;
  assign CH0_RXVALID = CH0_RXVALID_out;
  assign CH0_TX10GSTAT = CH0_TX10GSTAT_out;
  assign CH0_TXBUFSTATUS = CH0_TXBUFSTATUS_out;
  assign CH0_TXCOMFINISH = CH0_TXCOMFINISH_out;
  assign CH0_TXDAPIRESETDONE = CH0_TXDAPIRESETDONE_out;
  assign CH0_TXDCCDONE = CH0_TXDCCDONE_out;
  assign CH0_TXDEBUGPCSOUT = CH0_TXDEBUGPCSOUT_out;
  assign CH0_TXDLYALIGNERR = CH0_TXDLYALIGNERR_out;
  assign CH0_TXDLYALIGNPROG = CH0_TXDLYALIGNPROG_out;
  assign CH0_TXOUTCLK = CH0_TXOUTCLK_out;
  assign CH0_TXPHALIGNDONE = CH0_TXPHALIGNDONE_out;
  assign CH0_TXPHALIGNERR = CH0_TXPHALIGNERR_out;
  assign CH0_TXPHALIGNOUTRSVD = CH0_TXPHALIGNOUTRSVD_out;
  assign CH0_TXPHDLYRESETDONE = CH0_TXPHDLYRESETDONE_out;
  assign CH0_TXPHSETINITDONE = CH0_TXPHSETINITDONE_out;
  assign CH0_TXPHSHIFT180DONE = CH0_TXPHSHIFT180DONE_out;
  assign CH0_TXPMARESETDONE = CH0_TXPMARESETDONE_out;
  assign CH0_TXPROGDIVRESETDONE = CH0_TXPROGDIVRESETDONE_out;
  assign CH0_TXQPISENN = CH0_TXQPISENN_out;
  assign CH0_TXQPISENP = CH0_TXQPISENP_out;
  assign CH0_TXRESETDONE = CH0_TXRESETDONE_out;
  assign CH0_TXSIMPLEXPHYSTATUS = CH0_TXSIMPLEXPHYSTATUS_out;
  assign CH0_TXSWINGOUTHIGH = CH0_TXSWINGOUTHIGH_out;
  assign CH0_TXSWINGOUTLOW = CH0_TXSWINGOUTLOW_out;
  assign CH0_TXSYNCDONE = CH0_TXSYNCDONE_out;
  assign CH0_XPIPE5_PIPELINE_EN = CH0_XPIPE5_PIPELINE_EN_out;
  assign CH1_BUFGTCE = CH1_BUFGTCE_out;
  assign CH1_BUFGTCEMASK = CH1_BUFGTCEMASK_out;
  assign CH1_BUFGTDIV = CH1_BUFGTDIV_out;
  assign CH1_BUFGTRST = CH1_BUFGTRST_out;
  assign CH1_BUFGTRSTMASK = CH1_BUFGTRSTMASK_out;
  assign CH1_DMONITOROUT = CH1_DMONITOROUT_out;
  assign CH1_DMONITOROUTCLK = CH1_DMONITOROUTCLK_out;
  assign CH1_EYESCANDATAERROR = CH1_EYESCANDATAERROR_out;
  assign CH1_GTYPTXN = CH1_GTYPTXN_out;
  assign CH1_GTYPTXP = CH1_GTYPTXP_out;
  assign CH1_ILORESETDONE = CH1_ILORESETDONE_out;
  assign CH1_PCSRSVDOUT = CH1_PCSRSVDOUT_out;
  assign CH1_PHYREADY = CH1_PHYREADY_out;
  assign CH1_PHYSTATUS = CH1_PHYSTATUS_out;
  assign CH1_PINRSVDAS = CH1_PINRSVDAS_out;
  assign CH1_REFDEBUGOUT = CH1_REFDEBUGOUT_out;
  assign CH1_RESETEXCEPTION = CH1_RESETEXCEPTION_out;
  assign CH1_RX10GSTAT = CH1_RX10GSTAT_out;
  assign CH1_RXBUFSTATUS = CH1_RXBUFSTATUS_out;
  assign CH1_RXBYTEISALIGNED = CH1_RXBYTEISALIGNED_out;
  assign CH1_RXBYTEREALIGN = CH1_RXBYTEREALIGN_out;
  assign CH1_RXCDRLOCK = CH1_RXCDRLOCK_out;
  assign CH1_RXCDRPHDONE = CH1_RXCDRPHDONE_out;
  assign CH1_RXCHANBONDSEQ = CH1_RXCHANBONDSEQ_out;
  assign CH1_RXCHANISALIGNED = CH1_RXCHANISALIGNED_out;
  assign CH1_RXCHANREALIGN = CH1_RXCHANREALIGN_out;
  assign CH1_RXCHBONDO = CH1_RXCHBONDO_out;
  assign CH1_RXCLKCORCNT = CH1_RXCLKCORCNT_out;
  assign CH1_RXCOMINITDET = CH1_RXCOMINITDET_out;
  assign CH1_RXCOMMADET = CH1_RXCOMMADET_out;
  assign CH1_RXCOMSASDET = CH1_RXCOMSASDET_out;
  assign CH1_RXCOMWAKEDET = CH1_RXCOMWAKEDET_out;
  assign CH1_RXCTRL0 = CH1_RXCTRL0_out;
  assign CH1_RXCTRL1 = CH1_RXCTRL1_out;
  assign CH1_RXCTRL2 = CH1_RXCTRL2_out;
  assign CH1_RXCTRL3 = CH1_RXCTRL3_out;
  assign CH1_RXDAPIRESETDONE = CH1_RXDAPIRESETDONE_out;
  assign CH1_RXDATA = CH1_RXDATA_out;
  assign CH1_RXDATAVALID = CH1_RXDATAVALID_out;
  assign CH1_RXDEBUGPCSOUT = CH1_RXDEBUGPCSOUT_out;
  assign CH1_RXDLYALIGNERR = CH1_RXDLYALIGNERR_out;
  assign CH1_RXDLYALIGNPROG = CH1_RXDLYALIGNPROG_out;
  assign CH1_RXELECIDLE = CH1_RXELECIDLE_out;
  assign CH1_RXFINEALIGNDONE = CH1_RXFINEALIGNDONE_out;
  assign CH1_RXHEADER = CH1_RXHEADER_out;
  assign CH1_RXHEADERVALID = CH1_RXHEADERVALID_out;
  assign CH1_RXOSINTDONE = CH1_RXOSINTDONE_out;
  assign CH1_RXOUTCLK = CH1_RXOUTCLK_out;
  assign CH1_RXPHALIGNDONE = CH1_RXPHALIGNDONE_out;
  assign CH1_RXPHALIGNERR = CH1_RXPHALIGNERR_out;
  assign CH1_RXPHDLYRESETDONE = CH1_RXPHDLYRESETDONE_out;
  assign CH1_RXPHSETINITDONE = CH1_RXPHSETINITDONE_out;
  assign CH1_RXPHSHIFT180DONE = CH1_RXPHSHIFT180DONE_out;
  assign CH1_RXPKDET = CH1_RXPKDET_out;
  assign CH1_RXPMARESETDONE = CH1_RXPMARESETDONE_out;
  assign CH1_RXPRBSERR = CH1_RXPRBSERR_out;
  assign CH1_RXPRBSLOCKED = CH1_RXPRBSLOCKED_out;
  assign CH1_RXPROGDIVRESETDONE = CH1_RXPROGDIVRESETDONE_out;
  assign CH1_RXQPISENN = CH1_RXQPISENN_out;
  assign CH1_RXQPISENP = CH1_RXQPISENP_out;
  assign CH1_RXRESETDONE = CH1_RXRESETDONE_out;
  assign CH1_RXSIMPLEXPHYSTATUS = CH1_RXSIMPLEXPHYSTATUS_out;
  assign CH1_RXSLIDERDY = CH1_RXSLIDERDY_out;
  assign CH1_RXSLIPDONE = CH1_RXSLIPDONE_out;
  assign CH1_RXSTARTOFSEQ = CH1_RXSTARTOFSEQ_out;
  assign CH1_RXSTATUS = CH1_RXSTATUS_out;
  assign CH1_RXSYNCDONE = CH1_RXSYNCDONE_out;
  assign CH1_RXVALID = CH1_RXVALID_out;
  assign CH1_TX10GSTAT = CH1_TX10GSTAT_out;
  assign CH1_TXBUFSTATUS = CH1_TXBUFSTATUS_out;
  assign CH1_TXCOMFINISH = CH1_TXCOMFINISH_out;
  assign CH1_TXDAPIRESETDONE = CH1_TXDAPIRESETDONE_out;
  assign CH1_TXDCCDONE = CH1_TXDCCDONE_out;
  assign CH1_TXDEBUGPCSOUT = CH1_TXDEBUGPCSOUT_out;
  assign CH1_TXDLYALIGNERR = CH1_TXDLYALIGNERR_out;
  assign CH1_TXDLYALIGNPROG = CH1_TXDLYALIGNPROG_out;
  assign CH1_TXOUTCLK = CH1_TXOUTCLK_out;
  assign CH1_TXPHALIGNDONE = CH1_TXPHALIGNDONE_out;
  assign CH1_TXPHALIGNERR = CH1_TXPHALIGNERR_out;
  assign CH1_TXPHALIGNOUTRSVD = CH1_TXPHALIGNOUTRSVD_out;
  assign CH1_TXPHDLYRESETDONE = CH1_TXPHDLYRESETDONE_out;
  assign CH1_TXPHSETINITDONE = CH1_TXPHSETINITDONE_out;
  assign CH1_TXPHSHIFT180DONE = CH1_TXPHSHIFT180DONE_out;
  assign CH1_TXPMARESETDONE = CH1_TXPMARESETDONE_out;
  assign CH1_TXPROGDIVRESETDONE = CH1_TXPROGDIVRESETDONE_out;
  assign CH1_TXQPISENN = CH1_TXQPISENN_out;
  assign CH1_TXQPISENP = CH1_TXQPISENP_out;
  assign CH1_TXRESETDONE = CH1_TXRESETDONE_out;
  assign CH1_TXSIMPLEXPHYSTATUS = CH1_TXSIMPLEXPHYSTATUS_out;
  assign CH1_TXSWINGOUTHIGH = CH1_TXSWINGOUTHIGH_out;
  assign CH1_TXSWINGOUTLOW = CH1_TXSWINGOUTLOW_out;
  assign CH1_TXSYNCDONE = CH1_TXSYNCDONE_out;
  assign CH1_XPIPE5_PIPELINE_EN = CH1_XPIPE5_PIPELINE_EN_out;
  assign CH2_BUFGTCE = CH2_BUFGTCE_out;
  assign CH2_BUFGTCEMASK = CH2_BUFGTCEMASK_out;
  assign CH2_BUFGTDIV = CH2_BUFGTDIV_out;
  assign CH2_BUFGTRST = CH2_BUFGTRST_out;
  assign CH2_BUFGTRSTMASK = CH2_BUFGTRSTMASK_out;
  assign CH2_DMONITOROUT = CH2_DMONITOROUT_out;
  assign CH2_DMONITOROUTCLK = CH2_DMONITOROUTCLK_out;
  assign CH2_EYESCANDATAERROR = CH2_EYESCANDATAERROR_out;
  assign CH2_GTYPTXN = CH2_GTYPTXN_out;
  assign CH2_GTYPTXP = CH2_GTYPTXP_out;
  assign CH2_ILORESETDONE = CH2_ILORESETDONE_out;
  assign CH2_PCSRSVDOUT = CH2_PCSRSVDOUT_out;
  assign CH2_PHYREADY = CH2_PHYREADY_out;
  assign CH2_PHYSTATUS = CH2_PHYSTATUS_out;
  assign CH2_PINRSVDAS = CH2_PINRSVDAS_out;
  assign CH2_REFDEBUGOUT = CH2_REFDEBUGOUT_out;
  assign CH2_RESETEXCEPTION = CH2_RESETEXCEPTION_out;
  assign CH2_RX10GSTAT = CH2_RX10GSTAT_out;
  assign CH2_RXBUFSTATUS = CH2_RXBUFSTATUS_out;
  assign CH2_RXBYTEISALIGNED = CH2_RXBYTEISALIGNED_out;
  assign CH2_RXBYTEREALIGN = CH2_RXBYTEREALIGN_out;
  assign CH2_RXCDRLOCK = CH2_RXCDRLOCK_out;
  assign CH2_RXCDRPHDONE = CH2_RXCDRPHDONE_out;
  assign CH2_RXCHANBONDSEQ = CH2_RXCHANBONDSEQ_out;
  assign CH2_RXCHANISALIGNED = CH2_RXCHANISALIGNED_out;
  assign CH2_RXCHANREALIGN = CH2_RXCHANREALIGN_out;
  assign CH2_RXCHBONDO = CH2_RXCHBONDO_out;
  assign CH2_RXCLKCORCNT = CH2_RXCLKCORCNT_out;
  assign CH2_RXCOMINITDET = CH2_RXCOMINITDET_out;
  assign CH2_RXCOMMADET = CH2_RXCOMMADET_out;
  assign CH2_RXCOMSASDET = CH2_RXCOMSASDET_out;
  assign CH2_RXCOMWAKEDET = CH2_RXCOMWAKEDET_out;
  assign CH2_RXCTRL0 = CH2_RXCTRL0_out;
  assign CH2_RXCTRL1 = CH2_RXCTRL1_out;
  assign CH2_RXCTRL2 = CH2_RXCTRL2_out;
  assign CH2_RXCTRL3 = CH2_RXCTRL3_out;
  assign CH2_RXDAPIRESETDONE = CH2_RXDAPIRESETDONE_out;
  assign CH2_RXDATA = CH2_RXDATA_out;
  assign CH2_RXDATAVALID = CH2_RXDATAVALID_out;
  assign CH2_RXDEBUGPCSOUT = CH2_RXDEBUGPCSOUT_out;
  assign CH2_RXDLYALIGNERR = CH2_RXDLYALIGNERR_out;
  assign CH2_RXDLYALIGNPROG = CH2_RXDLYALIGNPROG_out;
  assign CH2_RXELECIDLE = CH2_RXELECIDLE_out;
  assign CH2_RXFINEALIGNDONE = CH2_RXFINEALIGNDONE_out;
  assign CH2_RXHEADER = CH2_RXHEADER_out;
  assign CH2_RXHEADERVALID = CH2_RXHEADERVALID_out;
  assign CH2_RXOSINTDONE = CH2_RXOSINTDONE_out;
  assign CH2_RXOUTCLK = CH2_RXOUTCLK_out;
  assign CH2_RXPHALIGNDONE = CH2_RXPHALIGNDONE_out;
  assign CH2_RXPHALIGNERR = CH2_RXPHALIGNERR_out;
  assign CH2_RXPHDLYRESETDONE = CH2_RXPHDLYRESETDONE_out;
  assign CH2_RXPHSETINITDONE = CH2_RXPHSETINITDONE_out;
  assign CH2_RXPHSHIFT180DONE = CH2_RXPHSHIFT180DONE_out;
  assign CH2_RXPKDET = CH2_RXPKDET_out;
  assign CH2_RXPMARESETDONE = CH2_RXPMARESETDONE_out;
  assign CH2_RXPRBSERR = CH2_RXPRBSERR_out;
  assign CH2_RXPRBSLOCKED = CH2_RXPRBSLOCKED_out;
  assign CH2_RXPROGDIVRESETDONE = CH2_RXPROGDIVRESETDONE_out;
  assign CH2_RXQPISENN = CH2_RXQPISENN_out;
  assign CH2_RXQPISENP = CH2_RXQPISENP_out;
  assign CH2_RXRESETDONE = CH2_RXRESETDONE_out;
  assign CH2_RXSIMPLEXPHYSTATUS = CH2_RXSIMPLEXPHYSTATUS_out;
  assign CH2_RXSLIDERDY = CH2_RXSLIDERDY_out;
  assign CH2_RXSLIPDONE = CH2_RXSLIPDONE_out;
  assign CH2_RXSTARTOFSEQ = CH2_RXSTARTOFSEQ_out;
  assign CH2_RXSTATUS = CH2_RXSTATUS_out;
  assign CH2_RXSYNCDONE = CH2_RXSYNCDONE_out;
  assign CH2_RXVALID = CH2_RXVALID_out;
  assign CH2_TX10GSTAT = CH2_TX10GSTAT_out;
  assign CH2_TXBUFSTATUS = CH2_TXBUFSTATUS_out;
  assign CH2_TXCOMFINISH = CH2_TXCOMFINISH_out;
  assign CH2_TXDAPIRESETDONE = CH2_TXDAPIRESETDONE_out;
  assign CH2_TXDCCDONE = CH2_TXDCCDONE_out;
  assign CH2_TXDEBUGPCSOUT = CH2_TXDEBUGPCSOUT_out;
  assign CH2_TXDLYALIGNERR = CH2_TXDLYALIGNERR_out;
  assign CH2_TXDLYALIGNPROG = CH2_TXDLYALIGNPROG_out;
  assign CH2_TXOUTCLK = CH2_TXOUTCLK_out;
  assign CH2_TXPHALIGNDONE = CH2_TXPHALIGNDONE_out;
  assign CH2_TXPHALIGNERR = CH2_TXPHALIGNERR_out;
  assign CH2_TXPHALIGNOUTRSVD = CH2_TXPHALIGNOUTRSVD_out;
  assign CH2_TXPHDLYRESETDONE = CH2_TXPHDLYRESETDONE_out;
  assign CH2_TXPHSETINITDONE = CH2_TXPHSETINITDONE_out;
  assign CH2_TXPHSHIFT180DONE = CH2_TXPHSHIFT180DONE_out;
  assign CH2_TXPMARESETDONE = CH2_TXPMARESETDONE_out;
  assign CH2_TXPROGDIVRESETDONE = CH2_TXPROGDIVRESETDONE_out;
  assign CH2_TXQPISENN = CH2_TXQPISENN_out;
  assign CH2_TXQPISENP = CH2_TXQPISENP_out;
  assign CH2_TXRESETDONE = CH2_TXRESETDONE_out;
  assign CH2_TXSIMPLEXPHYSTATUS = CH2_TXSIMPLEXPHYSTATUS_out;
  assign CH2_TXSWINGOUTHIGH = CH2_TXSWINGOUTHIGH_out;
  assign CH2_TXSWINGOUTLOW = CH2_TXSWINGOUTLOW_out;
  assign CH2_TXSYNCDONE = CH2_TXSYNCDONE_out;
  assign CH2_XPIPE5_PIPELINE_EN = CH2_XPIPE5_PIPELINE_EN_out;
  assign CH3_BUFGTCE = CH3_BUFGTCE_out;
  assign CH3_BUFGTCEMASK = CH3_BUFGTCEMASK_out;
  assign CH3_BUFGTDIV = CH3_BUFGTDIV_out;
  assign CH3_BUFGTRST = CH3_BUFGTRST_out;
  assign CH3_BUFGTRSTMASK = CH3_BUFGTRSTMASK_out;
  assign CH3_DMONITOROUT = CH3_DMONITOROUT_out;
  assign CH3_DMONITOROUTCLK = CH3_DMONITOROUTCLK_out;
  assign CH3_EYESCANDATAERROR = CH3_EYESCANDATAERROR_out;
  assign CH3_GTYPTXN = CH3_GTYPTXN_out;
  assign CH3_GTYPTXP = CH3_GTYPTXP_out;
  assign CH3_ILORESETDONE = CH3_ILORESETDONE_out;
  assign CH3_PCSRSVDOUT = CH3_PCSRSVDOUT_out;
  assign CH3_PHYREADY = CH3_PHYREADY_out;
  assign CH3_PHYSTATUS = CH3_PHYSTATUS_out;
  assign CH3_PINRSVDAS = CH3_PINRSVDAS_out;
  assign CH3_REFDEBUGOUT = CH3_REFDEBUGOUT_out;
  assign CH3_RESETEXCEPTION = CH3_RESETEXCEPTION_out;
  assign CH3_RX10GSTAT = CH3_RX10GSTAT_out;
  assign CH3_RXBUFSTATUS = CH3_RXBUFSTATUS_out;
  assign CH3_RXBYTEISALIGNED = CH3_RXBYTEISALIGNED_out;
  assign CH3_RXBYTEREALIGN = CH3_RXBYTEREALIGN_out;
  assign CH3_RXCDRLOCK = CH3_RXCDRLOCK_out;
  assign CH3_RXCDRPHDONE = CH3_RXCDRPHDONE_out;
  assign CH3_RXCHANBONDSEQ = CH3_RXCHANBONDSEQ_out;
  assign CH3_RXCHANISALIGNED = CH3_RXCHANISALIGNED_out;
  assign CH3_RXCHANREALIGN = CH3_RXCHANREALIGN_out;
  assign CH3_RXCHBONDO = CH3_RXCHBONDO_out;
  assign CH3_RXCLKCORCNT = CH3_RXCLKCORCNT_out;
  assign CH3_RXCOMINITDET = CH3_RXCOMINITDET_out;
  assign CH3_RXCOMMADET = CH3_RXCOMMADET_out;
  assign CH3_RXCOMSASDET = CH3_RXCOMSASDET_out;
  assign CH3_RXCOMWAKEDET = CH3_RXCOMWAKEDET_out;
  assign CH3_RXCTRL0 = CH3_RXCTRL0_out;
  assign CH3_RXCTRL1 = CH3_RXCTRL1_out;
  assign CH3_RXCTRL2 = CH3_RXCTRL2_out;
  assign CH3_RXCTRL3 = CH3_RXCTRL3_out;
  assign CH3_RXDAPIRESETDONE = CH3_RXDAPIRESETDONE_out;
  assign CH3_RXDATA = CH3_RXDATA_out;
  assign CH3_RXDATAVALID = CH3_RXDATAVALID_out;
  assign CH3_RXDEBUGPCSOUT = CH3_RXDEBUGPCSOUT_out;
  assign CH3_RXDLYALIGNERR = CH3_RXDLYALIGNERR_out;
  assign CH3_RXDLYALIGNPROG = CH3_RXDLYALIGNPROG_out;
  assign CH3_RXELECIDLE = CH3_RXELECIDLE_out;
  assign CH3_RXFINEALIGNDONE = CH3_RXFINEALIGNDONE_out;
  assign CH3_RXHEADER = CH3_RXHEADER_out;
  assign CH3_RXHEADERVALID = CH3_RXHEADERVALID_out;
  assign CH3_RXOSINTDONE = CH3_RXOSINTDONE_out;
  assign CH3_RXOUTCLK = CH3_RXOUTCLK_out;
  assign CH3_RXPHALIGNDONE = CH3_RXPHALIGNDONE_out;
  assign CH3_RXPHALIGNERR = CH3_RXPHALIGNERR_out;
  assign CH3_RXPHDLYRESETDONE = CH3_RXPHDLYRESETDONE_out;
  assign CH3_RXPHSETINITDONE = CH3_RXPHSETINITDONE_out;
  assign CH3_RXPHSHIFT180DONE = CH3_RXPHSHIFT180DONE_out;
  assign CH3_RXPKDET = CH3_RXPKDET_out;
  assign CH3_RXPMARESETDONE = CH3_RXPMARESETDONE_out;
  assign CH3_RXPRBSERR = CH3_RXPRBSERR_out;
  assign CH3_RXPRBSLOCKED = CH3_RXPRBSLOCKED_out;
  assign CH3_RXPROGDIVRESETDONE = CH3_RXPROGDIVRESETDONE_out;
  assign CH3_RXQPISENN = CH3_RXQPISENN_out;
  assign CH3_RXQPISENP = CH3_RXQPISENP_out;
  assign CH3_RXRESETDONE = CH3_RXRESETDONE_out;
  assign CH3_RXSIMPLEXPHYSTATUS = CH3_RXSIMPLEXPHYSTATUS_out;
  assign CH3_RXSLIDERDY = CH3_RXSLIDERDY_out;
  assign CH3_RXSLIPDONE = CH3_RXSLIPDONE_out;
  assign CH3_RXSTARTOFSEQ = CH3_RXSTARTOFSEQ_out;
  assign CH3_RXSTATUS = CH3_RXSTATUS_out;
  assign CH3_RXSYNCDONE = CH3_RXSYNCDONE_out;
  assign CH3_RXVALID = CH3_RXVALID_out;
  assign CH3_TX10GSTAT = CH3_TX10GSTAT_out;
  assign CH3_TXBUFSTATUS = CH3_TXBUFSTATUS_out;
  assign CH3_TXCOMFINISH = CH3_TXCOMFINISH_out;
  assign CH3_TXDAPIRESETDONE = CH3_TXDAPIRESETDONE_out;
  assign CH3_TXDCCDONE = CH3_TXDCCDONE_out;
  assign CH3_TXDEBUGPCSOUT = CH3_TXDEBUGPCSOUT_out;
  assign CH3_TXDLYALIGNERR = CH3_TXDLYALIGNERR_out;
  assign CH3_TXDLYALIGNPROG = CH3_TXDLYALIGNPROG_out;
  assign CH3_TXOUTCLK = CH3_TXOUTCLK_out;
  assign CH3_TXPHALIGNDONE = CH3_TXPHALIGNDONE_out;
  assign CH3_TXPHALIGNERR = CH3_TXPHALIGNERR_out;
  assign CH3_TXPHALIGNOUTRSVD = CH3_TXPHALIGNOUTRSVD_out;
  assign CH3_TXPHDLYRESETDONE = CH3_TXPHDLYRESETDONE_out;
  assign CH3_TXPHSETINITDONE = CH3_TXPHSETINITDONE_out;
  assign CH3_TXPHSHIFT180DONE = CH3_TXPHSHIFT180DONE_out;
  assign CH3_TXPMARESETDONE = CH3_TXPMARESETDONE_out;
  assign CH3_TXPROGDIVRESETDONE = CH3_TXPROGDIVRESETDONE_out;
  assign CH3_TXQPISENN = CH3_TXQPISENN_out;
  assign CH3_TXQPISENP = CH3_TXQPISENP_out;
  assign CH3_TXRESETDONE = CH3_TXRESETDONE_out;
  assign CH3_TXSIMPLEXPHYSTATUS = CH3_TXSIMPLEXPHYSTATUS_out;
  assign CH3_TXSWINGOUTHIGH = CH3_TXSWINGOUTHIGH_out;
  assign CH3_TXSWINGOUTLOW = CH3_TXSWINGOUTLOW_out;
  assign CH3_TXSYNCDONE = CH3_TXSYNCDONE_out;
  assign CH3_XPIPE5_PIPELINE_EN = CH3_XPIPE5_PIPELINE_EN_out;
  assign CORRECTERR = CORRECTERR_out;
  assign CTRLRSVDOUT = CTRLRSVDOUT_out;
  assign DEBUGTRACETDATA = DEBUGTRACETDATA_out;
  assign DEBUGTRACETVALID = DEBUGTRACETVALID_out;
  assign GPO = GPO_out;
  assign GTPOWERGOOD = GTPOWERGOOD_out;
  assign HSCLK0_LCPLLFBCLKLOST = HSCLK0_LCPLLFBCLKLOST_out;
  assign HSCLK0_LCPLLLOCK = HSCLK0_LCPLLLOCK_out;
  assign HSCLK0_LCPLLREFCLKLOST = HSCLK0_LCPLLREFCLKLOST_out;
  assign HSCLK0_LCPLLREFCLKMONITOR = HSCLK0_LCPLLREFCLKMONITOR_out;
  assign HSCLK0_RPLLFBCLKLOST = HSCLK0_RPLLFBCLKLOST_out;
  assign HSCLK0_RPLLLOCK = HSCLK0_RPLLLOCK_out;
  assign HSCLK0_RPLLREFCLKLOST = HSCLK0_RPLLREFCLKLOST_out;
  assign HSCLK0_RPLLREFCLKMONITOR = HSCLK0_RPLLREFCLKMONITOR_out;
  assign HSCLK0_RXRECCLKOUT0 = HSCLK0_RXRECCLKOUT0_out;
  assign HSCLK0_RXRECCLKOUT1 = HSCLK0_RXRECCLKOUT1_out;
  assign HSCLK0_RXRECCLKSEL = HSCLK0_RXRECCLKSEL_out;
  assign HSCLK1_LCPLLFBCLKLOST = HSCLK1_LCPLLFBCLKLOST_out;
  assign HSCLK1_LCPLLLOCK = HSCLK1_LCPLLLOCK_out;
  assign HSCLK1_LCPLLREFCLKLOST = HSCLK1_LCPLLREFCLKLOST_out;
  assign HSCLK1_LCPLLREFCLKMONITOR = HSCLK1_LCPLLREFCLKMONITOR_out;
  assign HSCLK1_RPLLFBCLKLOST = HSCLK1_RPLLFBCLKLOST_out;
  assign HSCLK1_RPLLLOCK = HSCLK1_RPLLLOCK_out;
  assign HSCLK1_RPLLREFCLKLOST = HSCLK1_RPLLREFCLKLOST_out;
  assign HSCLK1_RPLLREFCLKMONITOR = HSCLK1_RPLLREFCLKMONITOR_out;
  assign HSCLK1_RXRECCLKOUT0 = HSCLK1_RXRECCLKOUT0_out;
  assign HSCLK1_RXRECCLKOUT1 = HSCLK1_RXRECCLKOUT1_out;
  assign HSCLK1_RXRECCLKSEL = HSCLK1_RXRECCLKSEL_out;
  assign M0_AXIS_TDATA = M0_AXIS_TDATA_out;
  assign M0_AXIS_TLAST = M0_AXIS_TLAST_out;
  assign M0_AXIS_TVALID = M0_AXIS_TVALID_out;
  assign M1_AXIS_TDATA = M1_AXIS_TDATA_out;
  assign M1_AXIS_TLAST = M1_AXIS_TLAST_out;
  assign M1_AXIS_TVALID = M1_AXIS_TVALID_out;
  assign M2_AXIS_TDATA = M2_AXIS_TDATA_out;
  assign M2_AXIS_TLAST = M2_AXIS_TLAST_out;
  assign M2_AXIS_TVALID = M2_AXIS_TVALID_out;
  assign MSTRXRESETDONE = MSTRXRESETDONE_out;
  assign MSTTXRESETDONE = MSTTXRESETDONE_out;
  assign PIPENORTHOUT = PIPENORTHOUT_out;
  assign PIPESOUTHOUT = PIPESOUTHOUT_out;
  assign REFCLK0_CLKTESTSIGINT = REFCLK0_CLKTESTSIGINT_out;
  assign REFCLK0_GTREFCLKPDINT = REFCLK0_GTREFCLKPDINT_out;
  assign REFCLK1_CLKTESTSIGINT = REFCLK1_CLKTESTSIGINT_out;
  assign REFCLK1_GTREFCLKPDINT = REFCLK1_GTREFCLKPDINT_out;
  assign RESETDONE_NORTHOUT = RESETDONE_NORTHOUT_out;
  assign RESETDONE_SOUTHOUT = RESETDONE_SOUTHOUT_out;
  assign RXMARGINREQACK = RXMARGINREQACK_out;
  assign RXMARGINRESCMD = RXMARGINRESCMD_out;
  assign RXMARGINRESLANENUM = RXMARGINRESLANENUM_out;
  assign RXMARGINRESPAYLD = RXMARGINRESPAYLD_out;
  assign RXMARGINRESREQ = RXMARGINRESREQ_out;
  assign RXPINORTHOUT = RXPINORTHOUT_out;
  assign RXPISOUTHOUT = RXPISOUTHOUT_out;
  assign S0_AXIS_TREADY = S0_AXIS_TREADY_out;
  assign S1_AXIS_TREADY = S1_AXIS_TREADY_out;
  assign S2_AXIS_TREADY = S2_AXIS_TREADY_out;
  assign TRIGACKIN0 = TRIGACKIN0_out;
  assign TRIGOUT0 = TRIGOUT0_out;
  assign TXPINORTHOUT = TXPINORTHOUT_out;
  assign TXPISOUTHOUT = TXPISOUTHOUT_out;
  assign UBINTERRUPT = UBINTERRUPT_out;
  assign UBTXUART = UBTXUART_out;
  assign UNCORRECTERR = UNCORRECTERR_out;

`ifdef XIL_TIMING
  assign APB3CLK_in = (APB3CLK === 1'bz) || APB3CLK_delay; // rv 1
  assign APB3PADDR_in[0] = (APB3PADDR[0] === 1'bz) || APB3PADDR_delay[0]; // rv 1
  assign APB3PADDR_in[10] = (APB3PADDR[10] === 1'bz) || APB3PADDR_delay[10]; // rv 1
  assign APB3PADDR_in[11] = (APB3PADDR[11] === 1'bz) || APB3PADDR_delay[11]; // rv 1
  assign APB3PADDR_in[12] = (APB3PADDR[12] === 1'bz) || APB3PADDR_delay[12]; // rv 1
  assign APB3PADDR_in[13] = (APB3PADDR[13] === 1'bz) || APB3PADDR_delay[13]; // rv 1
  assign APB3PADDR_in[14] = (APB3PADDR[14] === 1'bz) || APB3PADDR_delay[14]; // rv 1
  assign APB3PADDR_in[15] = (APB3PADDR[15] === 1'bz) || APB3PADDR_delay[15]; // rv 1
  assign APB3PADDR_in[1] = (APB3PADDR[1] === 1'bz) || APB3PADDR_delay[1]; // rv 1
  assign APB3PADDR_in[2] = (APB3PADDR[2] === 1'bz) || APB3PADDR_delay[2]; // rv 1
  assign APB3PADDR_in[3] = (APB3PADDR[3] === 1'bz) || APB3PADDR_delay[3]; // rv 1
  assign APB3PADDR_in[4] = (APB3PADDR[4] === 1'bz) || APB3PADDR_delay[4]; // rv 1
  assign APB3PADDR_in[5] = (APB3PADDR[5] === 1'bz) || APB3PADDR_delay[5]; // rv 1
  assign APB3PADDR_in[6] = (APB3PADDR[6] === 1'bz) || APB3PADDR_delay[6]; // rv 1
  assign APB3PADDR_in[7] = (APB3PADDR[7] === 1'bz) || APB3PADDR_delay[7]; // rv 1
  assign APB3PADDR_in[8] = (APB3PADDR[8] === 1'bz) || APB3PADDR_delay[8]; // rv 1
  assign APB3PADDR_in[9] = (APB3PADDR[9] === 1'bz) || APB3PADDR_delay[9]; // rv 1
  assign APB3PENABLE_in = (APB3PENABLE === 1'bz) || APB3PENABLE_delay; // rv 1
  assign APB3PSEL_in = (APB3PSEL === 1'bz) || APB3PSEL_delay; // rv 1
  assign APB3PWDATA_in[0] = (APB3PWDATA[0] === 1'bz) || APB3PWDATA_delay[0]; // rv 1
  assign APB3PWDATA_in[10] = (APB3PWDATA[10] === 1'bz) || APB3PWDATA_delay[10]; // rv 1
  assign APB3PWDATA_in[11] = (APB3PWDATA[11] === 1'bz) || APB3PWDATA_delay[11]; // rv 1
  assign APB3PWDATA_in[12] = (APB3PWDATA[12] === 1'bz) || APB3PWDATA_delay[12]; // rv 1
  assign APB3PWDATA_in[13] = (APB3PWDATA[13] === 1'bz) || APB3PWDATA_delay[13]; // rv 1
  assign APB3PWDATA_in[14] = (APB3PWDATA[14] === 1'bz) || APB3PWDATA_delay[14]; // rv 1
  assign APB3PWDATA_in[15] = (APB3PWDATA[15] === 1'bz) || APB3PWDATA_delay[15]; // rv 1
  assign APB3PWDATA_in[16] = (APB3PWDATA[16] === 1'bz) || APB3PWDATA_delay[16]; // rv 1
  assign APB3PWDATA_in[17] = (APB3PWDATA[17] === 1'bz) || APB3PWDATA_delay[17]; // rv 1
  assign APB3PWDATA_in[18] = (APB3PWDATA[18] === 1'bz) || APB3PWDATA_delay[18]; // rv 1
  assign APB3PWDATA_in[19] = (APB3PWDATA[19] === 1'bz) || APB3PWDATA_delay[19]; // rv 1
  assign APB3PWDATA_in[1] = (APB3PWDATA[1] === 1'bz) || APB3PWDATA_delay[1]; // rv 1
  assign APB3PWDATA_in[20] = (APB3PWDATA[20] === 1'bz) || APB3PWDATA_delay[20]; // rv 1
  assign APB3PWDATA_in[21] = (APB3PWDATA[21] === 1'bz) || APB3PWDATA_delay[21]; // rv 1
  assign APB3PWDATA_in[22] = (APB3PWDATA[22] === 1'bz) || APB3PWDATA_delay[22]; // rv 1
  assign APB3PWDATA_in[23] = (APB3PWDATA[23] === 1'bz) || APB3PWDATA_delay[23]; // rv 1
  assign APB3PWDATA_in[24] = (APB3PWDATA[24] === 1'bz) || APB3PWDATA_delay[24]; // rv 1
  assign APB3PWDATA_in[25] = (APB3PWDATA[25] === 1'bz) || APB3PWDATA_delay[25]; // rv 1
  assign APB3PWDATA_in[26] = (APB3PWDATA[26] === 1'bz) || APB3PWDATA_delay[26]; // rv 1
  assign APB3PWDATA_in[27] = (APB3PWDATA[27] === 1'bz) || APB3PWDATA_delay[27]; // rv 1
  assign APB3PWDATA_in[28] = (APB3PWDATA[28] === 1'bz) || APB3PWDATA_delay[28]; // rv 1
  assign APB3PWDATA_in[29] = (APB3PWDATA[29] === 1'bz) || APB3PWDATA_delay[29]; // rv 1
  assign APB3PWDATA_in[2] = (APB3PWDATA[2] === 1'bz) || APB3PWDATA_delay[2]; // rv 1
  assign APB3PWDATA_in[30] = (APB3PWDATA[30] === 1'bz) || APB3PWDATA_delay[30]; // rv 1
  assign APB3PWDATA_in[31] = (APB3PWDATA[31] === 1'bz) || APB3PWDATA_delay[31]; // rv 1
  assign APB3PWDATA_in[3] = (APB3PWDATA[3] === 1'bz) || APB3PWDATA_delay[3]; // rv 1
  assign APB3PWDATA_in[4] = (APB3PWDATA[4] === 1'bz) || APB3PWDATA_delay[4]; // rv 1
  assign APB3PWDATA_in[5] = (APB3PWDATA[5] === 1'bz) || APB3PWDATA_delay[5]; // rv 1
  assign APB3PWDATA_in[6] = (APB3PWDATA[6] === 1'bz) || APB3PWDATA_delay[6]; // rv 1
  assign APB3PWDATA_in[7] = (APB3PWDATA[7] === 1'bz) || APB3PWDATA_delay[7]; // rv 1
  assign APB3PWDATA_in[8] = (APB3PWDATA[8] === 1'bz) || APB3PWDATA_delay[8]; // rv 1
  assign APB3PWDATA_in[9] = (APB3PWDATA[9] === 1'bz) || APB3PWDATA_delay[9]; // rv 1
  assign APB3PWRITE_in = (APB3PWRITE === 1'bz) || APB3PWRITE_delay; // rv 1
  assign AXISCLK_in = (AXISCLK === 1'bz) || AXISCLK_delay; // rv 1
  assign CH0_EYESCANTRIGGER_in = (CH0_EYESCANTRIGGER === 1'bz) || CH0_EYESCANTRIGGER_delay; // rv 1
  assign CH0_PHYESMADAPTSAVE_in = (CH0_PHYESMADAPTSAVE === 1'bz) || CH0_PHYESMADAPTSAVE_delay; // rv 1
  assign CH0_RXCHBONDI_in[0] = (CH0_RXCHBONDI[0] === 1'bz) || CH0_RXCHBONDI_delay[0]; // rv 1
  assign CH0_RXCHBONDI_in[1] = (CH0_RXCHBONDI[1] === 1'bz) || CH0_RXCHBONDI_delay[1]; // rv 1
  assign CH0_RXCHBONDI_in[2] = (CH0_RXCHBONDI[2] === 1'bz) || CH0_RXCHBONDI_delay[2]; // rv 1
  assign CH0_RXCHBONDI_in[3] = (CH0_RXCHBONDI[3] === 1'bz) || CH0_RXCHBONDI_delay[3]; // rv 1
  assign CH0_RXCHBONDI_in[4] = (CH0_RXCHBONDI[4] === 1'bz) || CH0_RXCHBONDI_delay[4]; // rv 1
  assign CH0_RXDLYALIGNREQ_in = (CH0_RXDLYALIGNREQ === 1'bz) || CH0_RXDLYALIGNREQ_delay; // rv 1
  assign CH0_RXEQTRAINING_in = (CH0_RXEQTRAINING === 1'bz) || CH0_RXEQTRAINING_delay; // rv 1
  assign CH0_RXGEARBOXSLIP_in = (CH0_RXGEARBOXSLIP === 1'bz) || CH0_RXGEARBOXSLIP_delay; // rv 1
  assign CH0_RXMLDCHAINDONE_in = (CH0_RXMLDCHAINDONE === 1'bz) || CH0_RXMLDCHAINDONE_delay; // rv 1
  assign CH0_RXMLDCHAINREQ_in = (CH0_RXMLDCHAINREQ === 1'bz) || CH0_RXMLDCHAINREQ_delay; // rv 1
  assign CH0_RXPD_in[0] = (CH0_RXPD[0] === 1'bz) || CH0_RXPD_delay[0]; // rv 1
  assign CH0_RXPD_in[1] = (CH0_RXPD[1] === 1'bz) || CH0_RXPD_delay[1]; // rv 1
  assign CH0_RXPHALIGNREQ_in = (CH0_RXPHALIGNREQ === 1'bz) || CH0_RXPHALIGNREQ_delay; // rv 1
  assign CH0_RXPHSETINITREQ_in = (CH0_RXPHSETINITREQ === 1'bz) || CH0_RXPHSETINITREQ_delay; // rv 1
  assign CH0_RXPHSHIFT180_in = (CH0_RXPHSHIFT180 === 1'bz) || CH0_RXPHSHIFT180_delay; // rv 1
  assign CH0_RXPOLARITY_in = (CH0_RXPOLARITY === 1'bz) || CH0_RXPOLARITY_delay; // rv 1
  assign CH0_RXRATE_in[0] = (CH0_RXRATE[0] === 1'bz) || CH0_RXRATE_delay[0]; // rv 1
  assign CH0_RXRATE_in[1] = (CH0_RXRATE[1] === 1'bz) || CH0_RXRATE_delay[1]; // rv 1
  assign CH0_RXRATE_in[2] = (CH0_RXRATE[2] === 1'bz) || CH0_RXRATE_delay[2]; // rv 1
  assign CH0_RXRATE_in[3] = (CH0_RXRATE[3] === 1'bz) || CH0_RXRATE_delay[3]; // rv 1
  assign CH0_RXRATE_in[4] = (CH0_RXRATE[4] === 1'bz) || CH0_RXRATE_delay[4]; // rv 1
  assign CH0_RXRATE_in[5] = (CH0_RXRATE[5] === 1'bz) || CH0_RXRATE_delay[5]; // rv 1
  assign CH0_RXRATE_in[6] = (CH0_RXRATE[6] === 1'bz) || CH0_RXRATE_delay[6]; // rv 1
  assign CH0_RXRATE_in[7] = (CH0_RXRATE[7] === 1'bz) || CH0_RXRATE_delay[7]; // rv 1
  assign CH0_RXSLIDE_in = (CH0_RXSLIDE === 1'bz) || CH0_RXSLIDE_delay; // rv 1
  assign CH0_RXUSRCLK_in = (CH0_RXUSRCLK === 1'bz) || CH0_RXUSRCLK_delay; // rv 1
  assign CH0_TXCOMINIT_in = (CH0_TXCOMINIT === 1'bz) || CH0_TXCOMINIT_delay; // rv 1
  assign CH0_TXCOMSAS_in = (CH0_TXCOMSAS === 1'bz) || CH0_TXCOMSAS_delay; // rv 1
  assign CH0_TXCOMWAKE_in = (CH0_TXCOMWAKE === 1'bz) || CH0_TXCOMWAKE_delay; // rv 1
  assign CH0_TXCTRL0_in[0] = (CH0_TXCTRL0[0] === 1'bz) || CH0_TXCTRL0_delay[0]; // rv 1
  assign CH0_TXCTRL0_in[10] = (CH0_TXCTRL0[10] === 1'bz) || CH0_TXCTRL0_delay[10]; // rv 1
  assign CH0_TXCTRL0_in[11] = (CH0_TXCTRL0[11] === 1'bz) || CH0_TXCTRL0_delay[11]; // rv 1
  assign CH0_TXCTRL0_in[12] = (CH0_TXCTRL0[12] === 1'bz) || CH0_TXCTRL0_delay[12]; // rv 1
  assign CH0_TXCTRL0_in[13] = (CH0_TXCTRL0[13] === 1'bz) || CH0_TXCTRL0_delay[13]; // rv 1
  assign CH0_TXCTRL0_in[14] = (CH0_TXCTRL0[14] === 1'bz) || CH0_TXCTRL0_delay[14]; // rv 1
  assign CH0_TXCTRL0_in[15] = (CH0_TXCTRL0[15] === 1'bz) || CH0_TXCTRL0_delay[15]; // rv 1
  assign CH0_TXCTRL0_in[1] = (CH0_TXCTRL0[1] === 1'bz) || CH0_TXCTRL0_delay[1]; // rv 1
  assign CH0_TXCTRL0_in[2] = (CH0_TXCTRL0[2] === 1'bz) || CH0_TXCTRL0_delay[2]; // rv 1
  assign CH0_TXCTRL0_in[3] = (CH0_TXCTRL0[3] === 1'bz) || CH0_TXCTRL0_delay[3]; // rv 1
  assign CH0_TXCTRL0_in[4] = (CH0_TXCTRL0[4] === 1'bz) || CH0_TXCTRL0_delay[4]; // rv 1
  assign CH0_TXCTRL0_in[5] = (CH0_TXCTRL0[5] === 1'bz) || CH0_TXCTRL0_delay[5]; // rv 1
  assign CH0_TXCTRL0_in[6] = (CH0_TXCTRL0[6] === 1'bz) || CH0_TXCTRL0_delay[6]; // rv 1
  assign CH0_TXCTRL0_in[7] = (CH0_TXCTRL0[7] === 1'bz) || CH0_TXCTRL0_delay[7]; // rv 1
  assign CH0_TXCTRL0_in[8] = (CH0_TXCTRL0[8] === 1'bz) || CH0_TXCTRL0_delay[8]; // rv 1
  assign CH0_TXCTRL0_in[9] = (CH0_TXCTRL0[9] === 1'bz) || CH0_TXCTRL0_delay[9]; // rv 1
  assign CH0_TXCTRL1_in[0] = (CH0_TXCTRL1[0] === 1'bz) || CH0_TXCTRL1_delay[0]; // rv 1
  assign CH0_TXCTRL1_in[10] = (CH0_TXCTRL1[10] === 1'bz) || CH0_TXCTRL1_delay[10]; // rv 1
  assign CH0_TXCTRL1_in[11] = (CH0_TXCTRL1[11] === 1'bz) || CH0_TXCTRL1_delay[11]; // rv 1
  assign CH0_TXCTRL1_in[12] = (CH0_TXCTRL1[12] === 1'bz) || CH0_TXCTRL1_delay[12]; // rv 1
  assign CH0_TXCTRL1_in[13] = (CH0_TXCTRL1[13] === 1'bz) || CH0_TXCTRL1_delay[13]; // rv 1
  assign CH0_TXCTRL1_in[14] = (CH0_TXCTRL1[14] === 1'bz) || CH0_TXCTRL1_delay[14]; // rv 1
  assign CH0_TXCTRL1_in[15] = (CH0_TXCTRL1[15] === 1'bz) || CH0_TXCTRL1_delay[15]; // rv 1
  assign CH0_TXCTRL1_in[1] = (CH0_TXCTRL1[1] === 1'bz) || CH0_TXCTRL1_delay[1]; // rv 1
  assign CH0_TXCTRL1_in[2] = (CH0_TXCTRL1[2] === 1'bz) || CH0_TXCTRL1_delay[2]; // rv 1
  assign CH0_TXCTRL1_in[3] = (CH0_TXCTRL1[3] === 1'bz) || CH0_TXCTRL1_delay[3]; // rv 1
  assign CH0_TXCTRL1_in[4] = (CH0_TXCTRL1[4] === 1'bz) || CH0_TXCTRL1_delay[4]; // rv 1
  assign CH0_TXCTRL1_in[5] = (CH0_TXCTRL1[5] === 1'bz) || CH0_TXCTRL1_delay[5]; // rv 1
  assign CH0_TXCTRL1_in[6] = (CH0_TXCTRL1[6] === 1'bz) || CH0_TXCTRL1_delay[6]; // rv 1
  assign CH0_TXCTRL1_in[7] = (CH0_TXCTRL1[7] === 1'bz) || CH0_TXCTRL1_delay[7]; // rv 1
  assign CH0_TXCTRL1_in[8] = (CH0_TXCTRL1[8] === 1'bz) || CH0_TXCTRL1_delay[8]; // rv 1
  assign CH0_TXCTRL1_in[9] = (CH0_TXCTRL1[9] === 1'bz) || CH0_TXCTRL1_delay[9]; // rv 1
  assign CH0_TXCTRL2_in[0] = (CH0_TXCTRL2[0] === 1'bz) || CH0_TXCTRL2_delay[0]; // rv 1
  assign CH0_TXCTRL2_in[1] = (CH0_TXCTRL2[1] === 1'bz) || CH0_TXCTRL2_delay[1]; // rv 1
  assign CH0_TXCTRL2_in[2] = (CH0_TXCTRL2[2] === 1'bz) || CH0_TXCTRL2_delay[2]; // rv 1
  assign CH0_TXCTRL2_in[3] = (CH0_TXCTRL2[3] === 1'bz) || CH0_TXCTRL2_delay[3]; // rv 1
  assign CH0_TXCTRL2_in[4] = (CH0_TXCTRL2[4] === 1'bz) || CH0_TXCTRL2_delay[4]; // rv 1
  assign CH0_TXCTRL2_in[5] = (CH0_TXCTRL2[5] === 1'bz) || CH0_TXCTRL2_delay[5]; // rv 1
  assign CH0_TXCTRL2_in[6] = (CH0_TXCTRL2[6] === 1'bz) || CH0_TXCTRL2_delay[6]; // rv 1
  assign CH0_TXCTRL2_in[7] = (CH0_TXCTRL2[7] === 1'bz) || CH0_TXCTRL2_delay[7]; // rv 1
  assign CH0_TXDATA_in[0] = (CH0_TXDATA[0] === 1'bz) || CH0_TXDATA_delay[0]; // rv 1
  assign CH0_TXDATA_in[100] = (CH0_TXDATA[100] === 1'bz) || CH0_TXDATA_delay[100]; // rv 1
  assign CH0_TXDATA_in[101] = (CH0_TXDATA[101] === 1'bz) || CH0_TXDATA_delay[101]; // rv 1
  assign CH0_TXDATA_in[102] = (CH0_TXDATA[102] === 1'bz) || CH0_TXDATA_delay[102]; // rv 1
  assign CH0_TXDATA_in[103] = (CH0_TXDATA[103] === 1'bz) || CH0_TXDATA_delay[103]; // rv 1
  assign CH0_TXDATA_in[104] = (CH0_TXDATA[104] === 1'bz) || CH0_TXDATA_delay[104]; // rv 1
  assign CH0_TXDATA_in[105] = (CH0_TXDATA[105] === 1'bz) || CH0_TXDATA_delay[105]; // rv 1
  assign CH0_TXDATA_in[106] = (CH0_TXDATA[106] === 1'bz) || CH0_TXDATA_delay[106]; // rv 1
  assign CH0_TXDATA_in[107] = (CH0_TXDATA[107] === 1'bz) || CH0_TXDATA_delay[107]; // rv 1
  assign CH0_TXDATA_in[108] = (CH0_TXDATA[108] === 1'bz) || CH0_TXDATA_delay[108]; // rv 1
  assign CH0_TXDATA_in[109] = (CH0_TXDATA[109] === 1'bz) || CH0_TXDATA_delay[109]; // rv 1
  assign CH0_TXDATA_in[10] = (CH0_TXDATA[10] === 1'bz) || CH0_TXDATA_delay[10]; // rv 1
  assign CH0_TXDATA_in[110] = (CH0_TXDATA[110] === 1'bz) || CH0_TXDATA_delay[110]; // rv 1
  assign CH0_TXDATA_in[111] = (CH0_TXDATA[111] === 1'bz) || CH0_TXDATA_delay[111]; // rv 1
  assign CH0_TXDATA_in[112] = (CH0_TXDATA[112] === 1'bz) || CH0_TXDATA_delay[112]; // rv 1
  assign CH0_TXDATA_in[113] = (CH0_TXDATA[113] === 1'bz) || CH0_TXDATA_delay[113]; // rv 1
  assign CH0_TXDATA_in[114] = (CH0_TXDATA[114] === 1'bz) || CH0_TXDATA_delay[114]; // rv 1
  assign CH0_TXDATA_in[115] = (CH0_TXDATA[115] === 1'bz) || CH0_TXDATA_delay[115]; // rv 1
  assign CH0_TXDATA_in[116] = (CH0_TXDATA[116] === 1'bz) || CH0_TXDATA_delay[116]; // rv 1
  assign CH0_TXDATA_in[117] = (CH0_TXDATA[117] === 1'bz) || CH0_TXDATA_delay[117]; // rv 1
  assign CH0_TXDATA_in[118] = (CH0_TXDATA[118] === 1'bz) || CH0_TXDATA_delay[118]; // rv 1
  assign CH0_TXDATA_in[119] = (CH0_TXDATA[119] === 1'bz) || CH0_TXDATA_delay[119]; // rv 1
  assign CH0_TXDATA_in[11] = (CH0_TXDATA[11] === 1'bz) || CH0_TXDATA_delay[11]; // rv 1
  assign CH0_TXDATA_in[120] = (CH0_TXDATA[120] === 1'bz) || CH0_TXDATA_delay[120]; // rv 1
  assign CH0_TXDATA_in[121] = (CH0_TXDATA[121] === 1'bz) || CH0_TXDATA_delay[121]; // rv 1
  assign CH0_TXDATA_in[122] = (CH0_TXDATA[122] === 1'bz) || CH0_TXDATA_delay[122]; // rv 1
  assign CH0_TXDATA_in[123] = (CH0_TXDATA[123] === 1'bz) || CH0_TXDATA_delay[123]; // rv 1
  assign CH0_TXDATA_in[124] = (CH0_TXDATA[124] === 1'bz) || CH0_TXDATA_delay[124]; // rv 1
  assign CH0_TXDATA_in[125] = (CH0_TXDATA[125] === 1'bz) || CH0_TXDATA_delay[125]; // rv 1
  assign CH0_TXDATA_in[126] = (CH0_TXDATA[126] === 1'bz) || CH0_TXDATA_delay[126]; // rv 1
  assign CH0_TXDATA_in[127] = (CH0_TXDATA[127] === 1'bz) || CH0_TXDATA_delay[127]; // rv 1
  assign CH0_TXDATA_in[12] = (CH0_TXDATA[12] === 1'bz) || CH0_TXDATA_delay[12]; // rv 1
  assign CH0_TXDATA_in[13] = (CH0_TXDATA[13] === 1'bz) || CH0_TXDATA_delay[13]; // rv 1
  assign CH0_TXDATA_in[14] = (CH0_TXDATA[14] === 1'bz) || CH0_TXDATA_delay[14]; // rv 1
  assign CH0_TXDATA_in[15] = (CH0_TXDATA[15] === 1'bz) || CH0_TXDATA_delay[15]; // rv 1
  assign CH0_TXDATA_in[16] = (CH0_TXDATA[16] === 1'bz) || CH0_TXDATA_delay[16]; // rv 1
  assign CH0_TXDATA_in[17] = (CH0_TXDATA[17] === 1'bz) || CH0_TXDATA_delay[17]; // rv 1
  assign CH0_TXDATA_in[18] = (CH0_TXDATA[18] === 1'bz) || CH0_TXDATA_delay[18]; // rv 1
  assign CH0_TXDATA_in[19] = (CH0_TXDATA[19] === 1'bz) || CH0_TXDATA_delay[19]; // rv 1
  assign CH0_TXDATA_in[1] = (CH0_TXDATA[1] === 1'bz) || CH0_TXDATA_delay[1]; // rv 1
  assign CH0_TXDATA_in[20] = (CH0_TXDATA[20] === 1'bz) || CH0_TXDATA_delay[20]; // rv 1
  assign CH0_TXDATA_in[21] = (CH0_TXDATA[21] === 1'bz) || CH0_TXDATA_delay[21]; // rv 1
  assign CH0_TXDATA_in[22] = (CH0_TXDATA[22] === 1'bz) || CH0_TXDATA_delay[22]; // rv 1
  assign CH0_TXDATA_in[23] = (CH0_TXDATA[23] === 1'bz) || CH0_TXDATA_delay[23]; // rv 1
  assign CH0_TXDATA_in[24] = (CH0_TXDATA[24] === 1'bz) || CH0_TXDATA_delay[24]; // rv 1
  assign CH0_TXDATA_in[25] = (CH0_TXDATA[25] === 1'bz) || CH0_TXDATA_delay[25]; // rv 1
  assign CH0_TXDATA_in[26] = (CH0_TXDATA[26] === 1'bz) || CH0_TXDATA_delay[26]; // rv 1
  assign CH0_TXDATA_in[27] = (CH0_TXDATA[27] === 1'bz) || CH0_TXDATA_delay[27]; // rv 1
  assign CH0_TXDATA_in[28] = (CH0_TXDATA[28] === 1'bz) || CH0_TXDATA_delay[28]; // rv 1
  assign CH0_TXDATA_in[29] = (CH0_TXDATA[29] === 1'bz) || CH0_TXDATA_delay[29]; // rv 1
  assign CH0_TXDATA_in[2] = (CH0_TXDATA[2] === 1'bz) || CH0_TXDATA_delay[2]; // rv 1
  assign CH0_TXDATA_in[30] = (CH0_TXDATA[30] === 1'bz) || CH0_TXDATA_delay[30]; // rv 1
  assign CH0_TXDATA_in[31] = (CH0_TXDATA[31] === 1'bz) || CH0_TXDATA_delay[31]; // rv 1
  assign CH0_TXDATA_in[32] = (CH0_TXDATA[32] === 1'bz) || CH0_TXDATA_delay[32]; // rv 1
  assign CH0_TXDATA_in[33] = (CH0_TXDATA[33] === 1'bz) || CH0_TXDATA_delay[33]; // rv 1
  assign CH0_TXDATA_in[34] = (CH0_TXDATA[34] === 1'bz) || CH0_TXDATA_delay[34]; // rv 1
  assign CH0_TXDATA_in[35] = (CH0_TXDATA[35] === 1'bz) || CH0_TXDATA_delay[35]; // rv 1
  assign CH0_TXDATA_in[36] = (CH0_TXDATA[36] === 1'bz) || CH0_TXDATA_delay[36]; // rv 1
  assign CH0_TXDATA_in[37] = (CH0_TXDATA[37] === 1'bz) || CH0_TXDATA_delay[37]; // rv 1
  assign CH0_TXDATA_in[38] = (CH0_TXDATA[38] === 1'bz) || CH0_TXDATA_delay[38]; // rv 1
  assign CH0_TXDATA_in[39] = (CH0_TXDATA[39] === 1'bz) || CH0_TXDATA_delay[39]; // rv 1
  assign CH0_TXDATA_in[3] = (CH0_TXDATA[3] === 1'bz) || CH0_TXDATA_delay[3]; // rv 1
  assign CH0_TXDATA_in[40] = (CH0_TXDATA[40] === 1'bz) || CH0_TXDATA_delay[40]; // rv 1
  assign CH0_TXDATA_in[41] = (CH0_TXDATA[41] === 1'bz) || CH0_TXDATA_delay[41]; // rv 1
  assign CH0_TXDATA_in[42] = (CH0_TXDATA[42] === 1'bz) || CH0_TXDATA_delay[42]; // rv 1
  assign CH0_TXDATA_in[43] = (CH0_TXDATA[43] === 1'bz) || CH0_TXDATA_delay[43]; // rv 1
  assign CH0_TXDATA_in[44] = (CH0_TXDATA[44] === 1'bz) || CH0_TXDATA_delay[44]; // rv 1
  assign CH0_TXDATA_in[45] = (CH0_TXDATA[45] === 1'bz) || CH0_TXDATA_delay[45]; // rv 1
  assign CH0_TXDATA_in[46] = (CH0_TXDATA[46] === 1'bz) || CH0_TXDATA_delay[46]; // rv 1
  assign CH0_TXDATA_in[47] = (CH0_TXDATA[47] === 1'bz) || CH0_TXDATA_delay[47]; // rv 1
  assign CH0_TXDATA_in[48] = (CH0_TXDATA[48] === 1'bz) || CH0_TXDATA_delay[48]; // rv 1
  assign CH0_TXDATA_in[49] = (CH0_TXDATA[49] === 1'bz) || CH0_TXDATA_delay[49]; // rv 1
  assign CH0_TXDATA_in[4] = (CH0_TXDATA[4] === 1'bz) || CH0_TXDATA_delay[4]; // rv 1
  assign CH0_TXDATA_in[50] = (CH0_TXDATA[50] === 1'bz) || CH0_TXDATA_delay[50]; // rv 1
  assign CH0_TXDATA_in[51] = (CH0_TXDATA[51] === 1'bz) || CH0_TXDATA_delay[51]; // rv 1
  assign CH0_TXDATA_in[52] = (CH0_TXDATA[52] === 1'bz) || CH0_TXDATA_delay[52]; // rv 1
  assign CH0_TXDATA_in[53] = (CH0_TXDATA[53] === 1'bz) || CH0_TXDATA_delay[53]; // rv 1
  assign CH0_TXDATA_in[54] = (CH0_TXDATA[54] === 1'bz) || CH0_TXDATA_delay[54]; // rv 1
  assign CH0_TXDATA_in[55] = (CH0_TXDATA[55] === 1'bz) || CH0_TXDATA_delay[55]; // rv 1
  assign CH0_TXDATA_in[56] = (CH0_TXDATA[56] === 1'bz) || CH0_TXDATA_delay[56]; // rv 1
  assign CH0_TXDATA_in[57] = (CH0_TXDATA[57] === 1'bz) || CH0_TXDATA_delay[57]; // rv 1
  assign CH0_TXDATA_in[58] = (CH0_TXDATA[58] === 1'bz) || CH0_TXDATA_delay[58]; // rv 1
  assign CH0_TXDATA_in[59] = (CH0_TXDATA[59] === 1'bz) || CH0_TXDATA_delay[59]; // rv 1
  assign CH0_TXDATA_in[5] = (CH0_TXDATA[5] === 1'bz) || CH0_TXDATA_delay[5]; // rv 1
  assign CH0_TXDATA_in[60] = (CH0_TXDATA[60] === 1'bz) || CH0_TXDATA_delay[60]; // rv 1
  assign CH0_TXDATA_in[61] = (CH0_TXDATA[61] === 1'bz) || CH0_TXDATA_delay[61]; // rv 1
  assign CH0_TXDATA_in[62] = (CH0_TXDATA[62] === 1'bz) || CH0_TXDATA_delay[62]; // rv 1
  assign CH0_TXDATA_in[63] = (CH0_TXDATA[63] === 1'bz) || CH0_TXDATA_delay[63]; // rv 1
  assign CH0_TXDATA_in[64] = (CH0_TXDATA[64] === 1'bz) || CH0_TXDATA_delay[64]; // rv 1
  assign CH0_TXDATA_in[65] = (CH0_TXDATA[65] === 1'bz) || CH0_TXDATA_delay[65]; // rv 1
  assign CH0_TXDATA_in[66] = (CH0_TXDATA[66] === 1'bz) || CH0_TXDATA_delay[66]; // rv 1
  assign CH0_TXDATA_in[67] = (CH0_TXDATA[67] === 1'bz) || CH0_TXDATA_delay[67]; // rv 1
  assign CH0_TXDATA_in[68] = (CH0_TXDATA[68] === 1'bz) || CH0_TXDATA_delay[68]; // rv 1
  assign CH0_TXDATA_in[69] = (CH0_TXDATA[69] === 1'bz) || CH0_TXDATA_delay[69]; // rv 1
  assign CH0_TXDATA_in[6] = (CH0_TXDATA[6] === 1'bz) || CH0_TXDATA_delay[6]; // rv 1
  assign CH0_TXDATA_in[70] = (CH0_TXDATA[70] === 1'bz) || CH0_TXDATA_delay[70]; // rv 1
  assign CH0_TXDATA_in[71] = (CH0_TXDATA[71] === 1'bz) || CH0_TXDATA_delay[71]; // rv 1
  assign CH0_TXDATA_in[72] = (CH0_TXDATA[72] === 1'bz) || CH0_TXDATA_delay[72]; // rv 1
  assign CH0_TXDATA_in[73] = (CH0_TXDATA[73] === 1'bz) || CH0_TXDATA_delay[73]; // rv 1
  assign CH0_TXDATA_in[74] = (CH0_TXDATA[74] === 1'bz) || CH0_TXDATA_delay[74]; // rv 1
  assign CH0_TXDATA_in[75] = (CH0_TXDATA[75] === 1'bz) || CH0_TXDATA_delay[75]; // rv 1
  assign CH0_TXDATA_in[76] = (CH0_TXDATA[76] === 1'bz) || CH0_TXDATA_delay[76]; // rv 1
  assign CH0_TXDATA_in[77] = (CH0_TXDATA[77] === 1'bz) || CH0_TXDATA_delay[77]; // rv 1
  assign CH0_TXDATA_in[78] = (CH0_TXDATA[78] === 1'bz) || CH0_TXDATA_delay[78]; // rv 1
  assign CH0_TXDATA_in[79] = (CH0_TXDATA[79] === 1'bz) || CH0_TXDATA_delay[79]; // rv 1
  assign CH0_TXDATA_in[7] = (CH0_TXDATA[7] === 1'bz) || CH0_TXDATA_delay[7]; // rv 1
  assign CH0_TXDATA_in[80] = (CH0_TXDATA[80] === 1'bz) || CH0_TXDATA_delay[80]; // rv 1
  assign CH0_TXDATA_in[81] = (CH0_TXDATA[81] === 1'bz) || CH0_TXDATA_delay[81]; // rv 1
  assign CH0_TXDATA_in[82] = (CH0_TXDATA[82] === 1'bz) || CH0_TXDATA_delay[82]; // rv 1
  assign CH0_TXDATA_in[83] = (CH0_TXDATA[83] === 1'bz) || CH0_TXDATA_delay[83]; // rv 1
  assign CH0_TXDATA_in[84] = (CH0_TXDATA[84] === 1'bz) || CH0_TXDATA_delay[84]; // rv 1
  assign CH0_TXDATA_in[85] = (CH0_TXDATA[85] === 1'bz) || CH0_TXDATA_delay[85]; // rv 1
  assign CH0_TXDATA_in[86] = (CH0_TXDATA[86] === 1'bz) || CH0_TXDATA_delay[86]; // rv 1
  assign CH0_TXDATA_in[87] = (CH0_TXDATA[87] === 1'bz) || CH0_TXDATA_delay[87]; // rv 1
  assign CH0_TXDATA_in[88] = (CH0_TXDATA[88] === 1'bz) || CH0_TXDATA_delay[88]; // rv 1
  assign CH0_TXDATA_in[89] = (CH0_TXDATA[89] === 1'bz) || CH0_TXDATA_delay[89]; // rv 1
  assign CH0_TXDATA_in[8] = (CH0_TXDATA[8] === 1'bz) || CH0_TXDATA_delay[8]; // rv 1
  assign CH0_TXDATA_in[90] = (CH0_TXDATA[90] === 1'bz) || CH0_TXDATA_delay[90]; // rv 1
  assign CH0_TXDATA_in[91] = (CH0_TXDATA[91] === 1'bz) || CH0_TXDATA_delay[91]; // rv 1
  assign CH0_TXDATA_in[92] = (CH0_TXDATA[92] === 1'bz) || CH0_TXDATA_delay[92]; // rv 1
  assign CH0_TXDATA_in[93] = (CH0_TXDATA[93] === 1'bz) || CH0_TXDATA_delay[93]; // rv 1
  assign CH0_TXDATA_in[94] = (CH0_TXDATA[94] === 1'bz) || CH0_TXDATA_delay[94]; // rv 1
  assign CH0_TXDATA_in[95] = (CH0_TXDATA[95] === 1'bz) || CH0_TXDATA_delay[95]; // rv 1
  assign CH0_TXDATA_in[96] = (CH0_TXDATA[96] === 1'bz) || CH0_TXDATA_delay[96]; // rv 1
  assign CH0_TXDATA_in[97] = (CH0_TXDATA[97] === 1'bz) || CH0_TXDATA_delay[97]; // rv 1
  assign CH0_TXDATA_in[98] = (CH0_TXDATA[98] === 1'bz) || CH0_TXDATA_delay[98]; // rv 1
  assign CH0_TXDATA_in[99] = (CH0_TXDATA[99] === 1'bz) || CH0_TXDATA_delay[99]; // rv 1
  assign CH0_TXDATA_in[9] = (CH0_TXDATA[9] === 1'bz) || CH0_TXDATA_delay[9]; // rv 1
  assign CH0_TXDETECTRX_in = (CH0_TXDETECTRX === 1'bz) || CH0_TXDETECTRX_delay; // rv 1
  assign CH0_TXELECIDLE_in = (CH0_TXELECIDLE === 1'bz) || CH0_TXELECIDLE_delay; // rv 1
  assign CH0_TXHEADER_in[0] = (CH0_TXHEADER[0] === 1'bz) || CH0_TXHEADER_delay[0]; // rv 1
  assign CH0_TXHEADER_in[1] = (CH0_TXHEADER[1] === 1'bz) || CH0_TXHEADER_delay[1]; // rv 1
  assign CH0_TXHEADER_in[2] = (CH0_TXHEADER[2] === 1'bz) || CH0_TXHEADER_delay[2]; // rv 1
  assign CH0_TXHEADER_in[3] = (CH0_TXHEADER[3] === 1'bz) || CH0_TXHEADER_delay[3]; // rv 1
  assign CH0_TXHEADER_in[4] = (CH0_TXHEADER[4] === 1'bz) || CH0_TXHEADER_delay[4]; // rv 1
  assign CH0_TXHEADER_in[5] = (CH0_TXHEADER[5] === 1'bz) || CH0_TXHEADER_delay[5]; // rv 1
  assign CH0_TXINHIBIT_in = (CH0_TXINHIBIT === 1'bz) || CH0_TXINHIBIT_delay; // rv 1
  assign CH0_TXPD_in[0] = (CH0_TXPD[0] === 1'bz) || CH0_TXPD_delay[0]; // rv 1
  assign CH0_TXPD_in[1] = (CH0_TXPD[1] === 1'bz) || CH0_TXPD_delay[1]; // rv 1
  assign CH0_TXPIPPMEN_in = (CH0_TXPIPPMEN === 1'bz) || CH0_TXPIPPMEN_delay; // rv 1
  assign CH0_TXPIPPMSTEPSIZE_in[0] = (CH0_TXPIPPMSTEPSIZE[0] === 1'bz) || CH0_TXPIPPMSTEPSIZE_delay[0]; // rv 1
  assign CH0_TXPIPPMSTEPSIZE_in[1] = (CH0_TXPIPPMSTEPSIZE[1] === 1'bz) || CH0_TXPIPPMSTEPSIZE_delay[1]; // rv 1
  assign CH0_TXPIPPMSTEPSIZE_in[2] = (CH0_TXPIPPMSTEPSIZE[2] === 1'bz) || CH0_TXPIPPMSTEPSIZE_delay[2]; // rv 1
  assign CH0_TXPIPPMSTEPSIZE_in[3] = (CH0_TXPIPPMSTEPSIZE[3] === 1'bz) || CH0_TXPIPPMSTEPSIZE_delay[3]; // rv 1
  assign CH0_TXPIPPMSTEPSIZE_in[4] = (CH0_TXPIPPMSTEPSIZE[4] === 1'bz) || CH0_TXPIPPMSTEPSIZE_delay[4]; // rv 1
  assign CH0_TXPOLARITY_in = (CH0_TXPOLARITY === 1'bz) || CH0_TXPOLARITY_delay; // rv 1
  assign CH0_TXRATE_in[0] = (CH0_TXRATE[0] === 1'bz) || CH0_TXRATE_delay[0]; // rv 1
  assign CH0_TXRATE_in[1] = (CH0_TXRATE[1] === 1'bz) || CH0_TXRATE_delay[1]; // rv 1
  assign CH0_TXRATE_in[2] = (CH0_TXRATE[2] === 1'bz) || CH0_TXRATE_delay[2]; // rv 1
  assign CH0_TXRATE_in[3] = (CH0_TXRATE[3] === 1'bz) || CH0_TXRATE_delay[3]; // rv 1
  assign CH0_TXRATE_in[4] = (CH0_TXRATE[4] === 1'bz) || CH0_TXRATE_delay[4]; // rv 1
  assign CH0_TXRATE_in[5] = (CH0_TXRATE[5] === 1'bz) || CH0_TXRATE_delay[5]; // rv 1
  assign CH0_TXRATE_in[6] = (CH0_TXRATE[6] === 1'bz) || CH0_TXRATE_delay[6]; // rv 1
  assign CH0_TXRATE_in[7] = (CH0_TXRATE[7] === 1'bz) || CH0_TXRATE_delay[7]; // rv 1
  assign CH0_TXSEQUENCE_in[0] = (CH0_TXSEQUENCE[0] === 1'bz) || CH0_TXSEQUENCE_delay[0]; // rv 1
  assign CH0_TXSEQUENCE_in[1] = (CH0_TXSEQUENCE[1] === 1'bz) || CH0_TXSEQUENCE_delay[1]; // rv 1
  assign CH0_TXSEQUENCE_in[2] = (CH0_TXSEQUENCE[2] === 1'bz) || CH0_TXSEQUENCE_delay[2]; // rv 1
  assign CH0_TXSEQUENCE_in[3] = (CH0_TXSEQUENCE[3] === 1'bz) || CH0_TXSEQUENCE_delay[3]; // rv 1
  assign CH0_TXSEQUENCE_in[4] = (CH0_TXSEQUENCE[4] === 1'bz) || CH0_TXSEQUENCE_delay[4]; // rv 1
  assign CH0_TXSEQUENCE_in[5] = (CH0_TXSEQUENCE[5] === 1'bz) || CH0_TXSEQUENCE_delay[5]; // rv 1
  assign CH0_TXSEQUENCE_in[6] = (CH0_TXSEQUENCE[6] === 1'bz) || CH0_TXSEQUENCE_delay[6]; // rv 1
  assign CH0_TXUSRCLK_in = (CH0_TXUSRCLK === 1'bz) || CH0_TXUSRCLK_delay; // rv 1
  assign CH1_EYESCANTRIGGER_in = (CH1_EYESCANTRIGGER === 1'bz) || CH1_EYESCANTRIGGER_delay; // rv 1
  assign CH1_PHYESMADAPTSAVE_in = (CH1_PHYESMADAPTSAVE === 1'bz) || CH1_PHYESMADAPTSAVE_delay; // rv 1
  assign CH1_RXCHBONDI_in[0] = (CH1_RXCHBONDI[0] === 1'bz) || CH1_RXCHBONDI_delay[0]; // rv 1
  assign CH1_RXCHBONDI_in[1] = (CH1_RXCHBONDI[1] === 1'bz) || CH1_RXCHBONDI_delay[1]; // rv 1
  assign CH1_RXCHBONDI_in[2] = (CH1_RXCHBONDI[2] === 1'bz) || CH1_RXCHBONDI_delay[2]; // rv 1
  assign CH1_RXCHBONDI_in[3] = (CH1_RXCHBONDI[3] === 1'bz) || CH1_RXCHBONDI_delay[3]; // rv 1
  assign CH1_RXCHBONDI_in[4] = (CH1_RXCHBONDI[4] === 1'bz) || CH1_RXCHBONDI_delay[4]; // rv 1
  assign CH1_RXDLYALIGNREQ_in = (CH1_RXDLYALIGNREQ === 1'bz) || CH1_RXDLYALIGNREQ_delay; // rv 1
  assign CH1_RXEQTRAINING_in = (CH1_RXEQTRAINING === 1'bz) || CH1_RXEQTRAINING_delay; // rv 1
  assign CH1_RXGEARBOXSLIP_in = (CH1_RXGEARBOXSLIP === 1'bz) || CH1_RXGEARBOXSLIP_delay; // rv 1
  assign CH1_RXMLDCHAINDONE_in = (CH1_RXMLDCHAINDONE === 1'bz) || CH1_RXMLDCHAINDONE_delay; // rv 1
  assign CH1_RXMLDCHAINREQ_in = (CH1_RXMLDCHAINREQ === 1'bz) || CH1_RXMLDCHAINREQ_delay; // rv 1
  assign CH1_RXPD_in[0] = (CH1_RXPD[0] === 1'bz) || CH1_RXPD_delay[0]; // rv 1
  assign CH1_RXPD_in[1] = (CH1_RXPD[1] === 1'bz) || CH1_RXPD_delay[1]; // rv 1
  assign CH1_RXPHALIGNREQ_in = (CH1_RXPHALIGNREQ === 1'bz) || CH1_RXPHALIGNREQ_delay; // rv 1
  assign CH1_RXPHSETINITREQ_in = (CH1_RXPHSETINITREQ === 1'bz) || CH1_RXPHSETINITREQ_delay; // rv 1
  assign CH1_RXPHSHIFT180_in = (CH1_RXPHSHIFT180 === 1'bz) || CH1_RXPHSHIFT180_delay; // rv 1
  assign CH1_RXPOLARITY_in = (CH1_RXPOLARITY === 1'bz) || CH1_RXPOLARITY_delay; // rv 1
  assign CH1_RXRATE_in[0] = (CH1_RXRATE[0] === 1'bz) || CH1_RXRATE_delay[0]; // rv 1
  assign CH1_RXRATE_in[1] = (CH1_RXRATE[1] === 1'bz) || CH1_RXRATE_delay[1]; // rv 1
  assign CH1_RXRATE_in[2] = (CH1_RXRATE[2] === 1'bz) || CH1_RXRATE_delay[2]; // rv 1
  assign CH1_RXRATE_in[3] = (CH1_RXRATE[3] === 1'bz) || CH1_RXRATE_delay[3]; // rv 1
  assign CH1_RXRATE_in[4] = (CH1_RXRATE[4] === 1'bz) || CH1_RXRATE_delay[4]; // rv 1
  assign CH1_RXRATE_in[5] = (CH1_RXRATE[5] === 1'bz) || CH1_RXRATE_delay[5]; // rv 1
  assign CH1_RXRATE_in[6] = (CH1_RXRATE[6] === 1'bz) || CH1_RXRATE_delay[6]; // rv 1
  assign CH1_RXRATE_in[7] = (CH1_RXRATE[7] === 1'bz) || CH1_RXRATE_delay[7]; // rv 1
  assign CH1_RXSLIDE_in = (CH1_RXSLIDE === 1'bz) || CH1_RXSLIDE_delay; // rv 1
  assign CH1_RXUSRCLK_in = (CH1_RXUSRCLK === 1'bz) || CH1_RXUSRCLK_delay; // rv 1
  assign CH1_TXCOMINIT_in = (CH1_TXCOMINIT === 1'bz) || CH1_TXCOMINIT_delay; // rv 1
  assign CH1_TXCOMSAS_in = (CH1_TXCOMSAS === 1'bz) || CH1_TXCOMSAS_delay; // rv 1
  assign CH1_TXCOMWAKE_in = (CH1_TXCOMWAKE === 1'bz) || CH1_TXCOMWAKE_delay; // rv 1
  assign CH1_TXCTRL0_in[0] = (CH1_TXCTRL0[0] === 1'bz) || CH1_TXCTRL0_delay[0]; // rv 1
  assign CH1_TXCTRL0_in[10] = (CH1_TXCTRL0[10] === 1'bz) || CH1_TXCTRL0_delay[10]; // rv 1
  assign CH1_TXCTRL0_in[11] = (CH1_TXCTRL0[11] === 1'bz) || CH1_TXCTRL0_delay[11]; // rv 1
  assign CH1_TXCTRL0_in[12] = (CH1_TXCTRL0[12] === 1'bz) || CH1_TXCTRL0_delay[12]; // rv 1
  assign CH1_TXCTRL0_in[13] = (CH1_TXCTRL0[13] === 1'bz) || CH1_TXCTRL0_delay[13]; // rv 1
  assign CH1_TXCTRL0_in[14] = (CH1_TXCTRL0[14] === 1'bz) || CH1_TXCTRL0_delay[14]; // rv 1
  assign CH1_TXCTRL0_in[15] = (CH1_TXCTRL0[15] === 1'bz) || CH1_TXCTRL0_delay[15]; // rv 1
  assign CH1_TXCTRL0_in[1] = (CH1_TXCTRL0[1] === 1'bz) || CH1_TXCTRL0_delay[1]; // rv 1
  assign CH1_TXCTRL0_in[2] = (CH1_TXCTRL0[2] === 1'bz) || CH1_TXCTRL0_delay[2]; // rv 1
  assign CH1_TXCTRL0_in[3] = (CH1_TXCTRL0[3] === 1'bz) || CH1_TXCTRL0_delay[3]; // rv 1
  assign CH1_TXCTRL0_in[4] = (CH1_TXCTRL0[4] === 1'bz) || CH1_TXCTRL0_delay[4]; // rv 1
  assign CH1_TXCTRL0_in[5] = (CH1_TXCTRL0[5] === 1'bz) || CH1_TXCTRL0_delay[5]; // rv 1
  assign CH1_TXCTRL0_in[6] = (CH1_TXCTRL0[6] === 1'bz) || CH1_TXCTRL0_delay[6]; // rv 1
  assign CH1_TXCTRL0_in[7] = (CH1_TXCTRL0[7] === 1'bz) || CH1_TXCTRL0_delay[7]; // rv 1
  assign CH1_TXCTRL0_in[8] = (CH1_TXCTRL0[8] === 1'bz) || CH1_TXCTRL0_delay[8]; // rv 1
  assign CH1_TXCTRL0_in[9] = (CH1_TXCTRL0[9] === 1'bz) || CH1_TXCTRL0_delay[9]; // rv 1
  assign CH1_TXCTRL1_in[0] = (CH1_TXCTRL1[0] === 1'bz) || CH1_TXCTRL1_delay[0]; // rv 1
  assign CH1_TXCTRL1_in[10] = (CH1_TXCTRL1[10] === 1'bz) || CH1_TXCTRL1_delay[10]; // rv 1
  assign CH1_TXCTRL1_in[11] = (CH1_TXCTRL1[11] === 1'bz) || CH1_TXCTRL1_delay[11]; // rv 1
  assign CH1_TXCTRL1_in[12] = (CH1_TXCTRL1[12] === 1'bz) || CH1_TXCTRL1_delay[12]; // rv 1
  assign CH1_TXCTRL1_in[13] = (CH1_TXCTRL1[13] === 1'bz) || CH1_TXCTRL1_delay[13]; // rv 1
  assign CH1_TXCTRL1_in[14] = (CH1_TXCTRL1[14] === 1'bz) || CH1_TXCTRL1_delay[14]; // rv 1
  assign CH1_TXCTRL1_in[15] = (CH1_TXCTRL1[15] === 1'bz) || CH1_TXCTRL1_delay[15]; // rv 1
  assign CH1_TXCTRL1_in[1] = (CH1_TXCTRL1[1] === 1'bz) || CH1_TXCTRL1_delay[1]; // rv 1
  assign CH1_TXCTRL1_in[2] = (CH1_TXCTRL1[2] === 1'bz) || CH1_TXCTRL1_delay[2]; // rv 1
  assign CH1_TXCTRL1_in[3] = (CH1_TXCTRL1[3] === 1'bz) || CH1_TXCTRL1_delay[3]; // rv 1
  assign CH1_TXCTRL1_in[4] = (CH1_TXCTRL1[4] === 1'bz) || CH1_TXCTRL1_delay[4]; // rv 1
  assign CH1_TXCTRL1_in[5] = (CH1_TXCTRL1[5] === 1'bz) || CH1_TXCTRL1_delay[5]; // rv 1
  assign CH1_TXCTRL1_in[6] = (CH1_TXCTRL1[6] === 1'bz) || CH1_TXCTRL1_delay[6]; // rv 1
  assign CH1_TXCTRL1_in[7] = (CH1_TXCTRL1[7] === 1'bz) || CH1_TXCTRL1_delay[7]; // rv 1
  assign CH1_TXCTRL1_in[8] = (CH1_TXCTRL1[8] === 1'bz) || CH1_TXCTRL1_delay[8]; // rv 1
  assign CH1_TXCTRL1_in[9] = (CH1_TXCTRL1[9] === 1'bz) || CH1_TXCTRL1_delay[9]; // rv 1
  assign CH1_TXCTRL2_in[0] = (CH1_TXCTRL2[0] === 1'bz) || CH1_TXCTRL2_delay[0]; // rv 1
  assign CH1_TXCTRL2_in[1] = (CH1_TXCTRL2[1] === 1'bz) || CH1_TXCTRL2_delay[1]; // rv 1
  assign CH1_TXCTRL2_in[2] = (CH1_TXCTRL2[2] === 1'bz) || CH1_TXCTRL2_delay[2]; // rv 1
  assign CH1_TXCTRL2_in[3] = (CH1_TXCTRL2[3] === 1'bz) || CH1_TXCTRL2_delay[3]; // rv 1
  assign CH1_TXCTRL2_in[4] = (CH1_TXCTRL2[4] === 1'bz) || CH1_TXCTRL2_delay[4]; // rv 1
  assign CH1_TXCTRL2_in[5] = (CH1_TXCTRL2[5] === 1'bz) || CH1_TXCTRL2_delay[5]; // rv 1
  assign CH1_TXCTRL2_in[6] = (CH1_TXCTRL2[6] === 1'bz) || CH1_TXCTRL2_delay[6]; // rv 1
  assign CH1_TXCTRL2_in[7] = (CH1_TXCTRL2[7] === 1'bz) || CH1_TXCTRL2_delay[7]; // rv 1
  assign CH1_TXDATA_in[0] = (CH1_TXDATA[0] === 1'bz) || CH1_TXDATA_delay[0]; // rv 1
  assign CH1_TXDATA_in[100] = (CH1_TXDATA[100] === 1'bz) || CH1_TXDATA_delay[100]; // rv 1
  assign CH1_TXDATA_in[101] = (CH1_TXDATA[101] === 1'bz) || CH1_TXDATA_delay[101]; // rv 1
  assign CH1_TXDATA_in[102] = (CH1_TXDATA[102] === 1'bz) || CH1_TXDATA_delay[102]; // rv 1
  assign CH1_TXDATA_in[103] = (CH1_TXDATA[103] === 1'bz) || CH1_TXDATA_delay[103]; // rv 1
  assign CH1_TXDATA_in[104] = (CH1_TXDATA[104] === 1'bz) || CH1_TXDATA_delay[104]; // rv 1
  assign CH1_TXDATA_in[105] = (CH1_TXDATA[105] === 1'bz) || CH1_TXDATA_delay[105]; // rv 1
  assign CH1_TXDATA_in[106] = (CH1_TXDATA[106] === 1'bz) || CH1_TXDATA_delay[106]; // rv 1
  assign CH1_TXDATA_in[107] = (CH1_TXDATA[107] === 1'bz) || CH1_TXDATA_delay[107]; // rv 1
  assign CH1_TXDATA_in[108] = (CH1_TXDATA[108] === 1'bz) || CH1_TXDATA_delay[108]; // rv 1
  assign CH1_TXDATA_in[109] = (CH1_TXDATA[109] === 1'bz) || CH1_TXDATA_delay[109]; // rv 1
  assign CH1_TXDATA_in[10] = (CH1_TXDATA[10] === 1'bz) || CH1_TXDATA_delay[10]; // rv 1
  assign CH1_TXDATA_in[110] = (CH1_TXDATA[110] === 1'bz) || CH1_TXDATA_delay[110]; // rv 1
  assign CH1_TXDATA_in[111] = (CH1_TXDATA[111] === 1'bz) || CH1_TXDATA_delay[111]; // rv 1
  assign CH1_TXDATA_in[112] = (CH1_TXDATA[112] === 1'bz) || CH1_TXDATA_delay[112]; // rv 1
  assign CH1_TXDATA_in[113] = (CH1_TXDATA[113] === 1'bz) || CH1_TXDATA_delay[113]; // rv 1
  assign CH1_TXDATA_in[114] = (CH1_TXDATA[114] === 1'bz) || CH1_TXDATA_delay[114]; // rv 1
  assign CH1_TXDATA_in[115] = (CH1_TXDATA[115] === 1'bz) || CH1_TXDATA_delay[115]; // rv 1
  assign CH1_TXDATA_in[116] = (CH1_TXDATA[116] === 1'bz) || CH1_TXDATA_delay[116]; // rv 1
  assign CH1_TXDATA_in[117] = (CH1_TXDATA[117] === 1'bz) || CH1_TXDATA_delay[117]; // rv 1
  assign CH1_TXDATA_in[118] = (CH1_TXDATA[118] === 1'bz) || CH1_TXDATA_delay[118]; // rv 1
  assign CH1_TXDATA_in[119] = (CH1_TXDATA[119] === 1'bz) || CH1_TXDATA_delay[119]; // rv 1
  assign CH1_TXDATA_in[11] = (CH1_TXDATA[11] === 1'bz) || CH1_TXDATA_delay[11]; // rv 1
  assign CH1_TXDATA_in[120] = (CH1_TXDATA[120] === 1'bz) || CH1_TXDATA_delay[120]; // rv 1
  assign CH1_TXDATA_in[121] = (CH1_TXDATA[121] === 1'bz) || CH1_TXDATA_delay[121]; // rv 1
  assign CH1_TXDATA_in[122] = (CH1_TXDATA[122] === 1'bz) || CH1_TXDATA_delay[122]; // rv 1
  assign CH1_TXDATA_in[123] = (CH1_TXDATA[123] === 1'bz) || CH1_TXDATA_delay[123]; // rv 1
  assign CH1_TXDATA_in[124] = (CH1_TXDATA[124] === 1'bz) || CH1_TXDATA_delay[124]; // rv 1
  assign CH1_TXDATA_in[125] = (CH1_TXDATA[125] === 1'bz) || CH1_TXDATA_delay[125]; // rv 1
  assign CH1_TXDATA_in[126] = (CH1_TXDATA[126] === 1'bz) || CH1_TXDATA_delay[126]; // rv 1
  assign CH1_TXDATA_in[127] = (CH1_TXDATA[127] === 1'bz) || CH1_TXDATA_delay[127]; // rv 1
  assign CH1_TXDATA_in[12] = (CH1_TXDATA[12] === 1'bz) || CH1_TXDATA_delay[12]; // rv 1
  assign CH1_TXDATA_in[13] = (CH1_TXDATA[13] === 1'bz) || CH1_TXDATA_delay[13]; // rv 1
  assign CH1_TXDATA_in[14] = (CH1_TXDATA[14] === 1'bz) || CH1_TXDATA_delay[14]; // rv 1
  assign CH1_TXDATA_in[15] = (CH1_TXDATA[15] === 1'bz) || CH1_TXDATA_delay[15]; // rv 1
  assign CH1_TXDATA_in[16] = (CH1_TXDATA[16] === 1'bz) || CH1_TXDATA_delay[16]; // rv 1
  assign CH1_TXDATA_in[17] = (CH1_TXDATA[17] === 1'bz) || CH1_TXDATA_delay[17]; // rv 1
  assign CH1_TXDATA_in[18] = (CH1_TXDATA[18] === 1'bz) || CH1_TXDATA_delay[18]; // rv 1
  assign CH1_TXDATA_in[19] = (CH1_TXDATA[19] === 1'bz) || CH1_TXDATA_delay[19]; // rv 1
  assign CH1_TXDATA_in[1] = (CH1_TXDATA[1] === 1'bz) || CH1_TXDATA_delay[1]; // rv 1
  assign CH1_TXDATA_in[20] = (CH1_TXDATA[20] === 1'bz) || CH1_TXDATA_delay[20]; // rv 1
  assign CH1_TXDATA_in[21] = (CH1_TXDATA[21] === 1'bz) || CH1_TXDATA_delay[21]; // rv 1
  assign CH1_TXDATA_in[22] = (CH1_TXDATA[22] === 1'bz) || CH1_TXDATA_delay[22]; // rv 1
  assign CH1_TXDATA_in[23] = (CH1_TXDATA[23] === 1'bz) || CH1_TXDATA_delay[23]; // rv 1
  assign CH1_TXDATA_in[24] = (CH1_TXDATA[24] === 1'bz) || CH1_TXDATA_delay[24]; // rv 1
  assign CH1_TXDATA_in[25] = (CH1_TXDATA[25] === 1'bz) || CH1_TXDATA_delay[25]; // rv 1
  assign CH1_TXDATA_in[26] = (CH1_TXDATA[26] === 1'bz) || CH1_TXDATA_delay[26]; // rv 1
  assign CH1_TXDATA_in[27] = (CH1_TXDATA[27] === 1'bz) || CH1_TXDATA_delay[27]; // rv 1
  assign CH1_TXDATA_in[28] = (CH1_TXDATA[28] === 1'bz) || CH1_TXDATA_delay[28]; // rv 1
  assign CH1_TXDATA_in[29] = (CH1_TXDATA[29] === 1'bz) || CH1_TXDATA_delay[29]; // rv 1
  assign CH1_TXDATA_in[2] = (CH1_TXDATA[2] === 1'bz) || CH1_TXDATA_delay[2]; // rv 1
  assign CH1_TXDATA_in[30] = (CH1_TXDATA[30] === 1'bz) || CH1_TXDATA_delay[30]; // rv 1
  assign CH1_TXDATA_in[31] = (CH1_TXDATA[31] === 1'bz) || CH1_TXDATA_delay[31]; // rv 1
  assign CH1_TXDATA_in[32] = (CH1_TXDATA[32] === 1'bz) || CH1_TXDATA_delay[32]; // rv 1
  assign CH1_TXDATA_in[33] = (CH1_TXDATA[33] === 1'bz) || CH1_TXDATA_delay[33]; // rv 1
  assign CH1_TXDATA_in[34] = (CH1_TXDATA[34] === 1'bz) || CH1_TXDATA_delay[34]; // rv 1
  assign CH1_TXDATA_in[35] = (CH1_TXDATA[35] === 1'bz) || CH1_TXDATA_delay[35]; // rv 1
  assign CH1_TXDATA_in[36] = (CH1_TXDATA[36] === 1'bz) || CH1_TXDATA_delay[36]; // rv 1
  assign CH1_TXDATA_in[37] = (CH1_TXDATA[37] === 1'bz) || CH1_TXDATA_delay[37]; // rv 1
  assign CH1_TXDATA_in[38] = (CH1_TXDATA[38] === 1'bz) || CH1_TXDATA_delay[38]; // rv 1
  assign CH1_TXDATA_in[39] = (CH1_TXDATA[39] === 1'bz) || CH1_TXDATA_delay[39]; // rv 1
  assign CH1_TXDATA_in[3] = (CH1_TXDATA[3] === 1'bz) || CH1_TXDATA_delay[3]; // rv 1
  assign CH1_TXDATA_in[40] = (CH1_TXDATA[40] === 1'bz) || CH1_TXDATA_delay[40]; // rv 1
  assign CH1_TXDATA_in[41] = (CH1_TXDATA[41] === 1'bz) || CH1_TXDATA_delay[41]; // rv 1
  assign CH1_TXDATA_in[42] = (CH1_TXDATA[42] === 1'bz) || CH1_TXDATA_delay[42]; // rv 1
  assign CH1_TXDATA_in[43] = (CH1_TXDATA[43] === 1'bz) || CH1_TXDATA_delay[43]; // rv 1
  assign CH1_TXDATA_in[44] = (CH1_TXDATA[44] === 1'bz) || CH1_TXDATA_delay[44]; // rv 1
  assign CH1_TXDATA_in[45] = (CH1_TXDATA[45] === 1'bz) || CH1_TXDATA_delay[45]; // rv 1
  assign CH1_TXDATA_in[46] = (CH1_TXDATA[46] === 1'bz) || CH1_TXDATA_delay[46]; // rv 1
  assign CH1_TXDATA_in[47] = (CH1_TXDATA[47] === 1'bz) || CH1_TXDATA_delay[47]; // rv 1
  assign CH1_TXDATA_in[48] = (CH1_TXDATA[48] === 1'bz) || CH1_TXDATA_delay[48]; // rv 1
  assign CH1_TXDATA_in[49] = (CH1_TXDATA[49] === 1'bz) || CH1_TXDATA_delay[49]; // rv 1
  assign CH1_TXDATA_in[4] = (CH1_TXDATA[4] === 1'bz) || CH1_TXDATA_delay[4]; // rv 1
  assign CH1_TXDATA_in[50] = (CH1_TXDATA[50] === 1'bz) || CH1_TXDATA_delay[50]; // rv 1
  assign CH1_TXDATA_in[51] = (CH1_TXDATA[51] === 1'bz) || CH1_TXDATA_delay[51]; // rv 1
  assign CH1_TXDATA_in[52] = (CH1_TXDATA[52] === 1'bz) || CH1_TXDATA_delay[52]; // rv 1
  assign CH1_TXDATA_in[53] = (CH1_TXDATA[53] === 1'bz) || CH1_TXDATA_delay[53]; // rv 1
  assign CH1_TXDATA_in[54] = (CH1_TXDATA[54] === 1'bz) || CH1_TXDATA_delay[54]; // rv 1
  assign CH1_TXDATA_in[55] = (CH1_TXDATA[55] === 1'bz) || CH1_TXDATA_delay[55]; // rv 1
  assign CH1_TXDATA_in[56] = (CH1_TXDATA[56] === 1'bz) || CH1_TXDATA_delay[56]; // rv 1
  assign CH1_TXDATA_in[57] = (CH1_TXDATA[57] === 1'bz) || CH1_TXDATA_delay[57]; // rv 1
  assign CH1_TXDATA_in[58] = (CH1_TXDATA[58] === 1'bz) || CH1_TXDATA_delay[58]; // rv 1
  assign CH1_TXDATA_in[59] = (CH1_TXDATA[59] === 1'bz) || CH1_TXDATA_delay[59]; // rv 1
  assign CH1_TXDATA_in[5] = (CH1_TXDATA[5] === 1'bz) || CH1_TXDATA_delay[5]; // rv 1
  assign CH1_TXDATA_in[60] = (CH1_TXDATA[60] === 1'bz) || CH1_TXDATA_delay[60]; // rv 1
  assign CH1_TXDATA_in[61] = (CH1_TXDATA[61] === 1'bz) || CH1_TXDATA_delay[61]; // rv 1
  assign CH1_TXDATA_in[62] = (CH1_TXDATA[62] === 1'bz) || CH1_TXDATA_delay[62]; // rv 1
  assign CH1_TXDATA_in[63] = (CH1_TXDATA[63] === 1'bz) || CH1_TXDATA_delay[63]; // rv 1
  assign CH1_TXDATA_in[64] = (CH1_TXDATA[64] === 1'bz) || CH1_TXDATA_delay[64]; // rv 1
  assign CH1_TXDATA_in[65] = (CH1_TXDATA[65] === 1'bz) || CH1_TXDATA_delay[65]; // rv 1
  assign CH1_TXDATA_in[66] = (CH1_TXDATA[66] === 1'bz) || CH1_TXDATA_delay[66]; // rv 1
  assign CH1_TXDATA_in[67] = (CH1_TXDATA[67] === 1'bz) || CH1_TXDATA_delay[67]; // rv 1
  assign CH1_TXDATA_in[68] = (CH1_TXDATA[68] === 1'bz) || CH1_TXDATA_delay[68]; // rv 1
  assign CH1_TXDATA_in[69] = (CH1_TXDATA[69] === 1'bz) || CH1_TXDATA_delay[69]; // rv 1
  assign CH1_TXDATA_in[6] = (CH1_TXDATA[6] === 1'bz) || CH1_TXDATA_delay[6]; // rv 1
  assign CH1_TXDATA_in[70] = (CH1_TXDATA[70] === 1'bz) || CH1_TXDATA_delay[70]; // rv 1
  assign CH1_TXDATA_in[71] = (CH1_TXDATA[71] === 1'bz) || CH1_TXDATA_delay[71]; // rv 1
  assign CH1_TXDATA_in[72] = (CH1_TXDATA[72] === 1'bz) || CH1_TXDATA_delay[72]; // rv 1
  assign CH1_TXDATA_in[73] = (CH1_TXDATA[73] === 1'bz) || CH1_TXDATA_delay[73]; // rv 1
  assign CH1_TXDATA_in[74] = (CH1_TXDATA[74] === 1'bz) || CH1_TXDATA_delay[74]; // rv 1
  assign CH1_TXDATA_in[75] = (CH1_TXDATA[75] === 1'bz) || CH1_TXDATA_delay[75]; // rv 1
  assign CH1_TXDATA_in[76] = (CH1_TXDATA[76] === 1'bz) || CH1_TXDATA_delay[76]; // rv 1
  assign CH1_TXDATA_in[77] = (CH1_TXDATA[77] === 1'bz) || CH1_TXDATA_delay[77]; // rv 1
  assign CH1_TXDATA_in[78] = (CH1_TXDATA[78] === 1'bz) || CH1_TXDATA_delay[78]; // rv 1
  assign CH1_TXDATA_in[79] = (CH1_TXDATA[79] === 1'bz) || CH1_TXDATA_delay[79]; // rv 1
  assign CH1_TXDATA_in[7] = (CH1_TXDATA[7] === 1'bz) || CH1_TXDATA_delay[7]; // rv 1
  assign CH1_TXDATA_in[80] = (CH1_TXDATA[80] === 1'bz) || CH1_TXDATA_delay[80]; // rv 1
  assign CH1_TXDATA_in[81] = (CH1_TXDATA[81] === 1'bz) || CH1_TXDATA_delay[81]; // rv 1
  assign CH1_TXDATA_in[82] = (CH1_TXDATA[82] === 1'bz) || CH1_TXDATA_delay[82]; // rv 1
  assign CH1_TXDATA_in[83] = (CH1_TXDATA[83] === 1'bz) || CH1_TXDATA_delay[83]; // rv 1
  assign CH1_TXDATA_in[84] = (CH1_TXDATA[84] === 1'bz) || CH1_TXDATA_delay[84]; // rv 1
  assign CH1_TXDATA_in[85] = (CH1_TXDATA[85] === 1'bz) || CH1_TXDATA_delay[85]; // rv 1
  assign CH1_TXDATA_in[86] = (CH1_TXDATA[86] === 1'bz) || CH1_TXDATA_delay[86]; // rv 1
  assign CH1_TXDATA_in[87] = (CH1_TXDATA[87] === 1'bz) || CH1_TXDATA_delay[87]; // rv 1
  assign CH1_TXDATA_in[88] = (CH1_TXDATA[88] === 1'bz) || CH1_TXDATA_delay[88]; // rv 1
  assign CH1_TXDATA_in[89] = (CH1_TXDATA[89] === 1'bz) || CH1_TXDATA_delay[89]; // rv 1
  assign CH1_TXDATA_in[8] = (CH1_TXDATA[8] === 1'bz) || CH1_TXDATA_delay[8]; // rv 1
  assign CH1_TXDATA_in[90] = (CH1_TXDATA[90] === 1'bz) || CH1_TXDATA_delay[90]; // rv 1
  assign CH1_TXDATA_in[91] = (CH1_TXDATA[91] === 1'bz) || CH1_TXDATA_delay[91]; // rv 1
  assign CH1_TXDATA_in[92] = (CH1_TXDATA[92] === 1'bz) || CH1_TXDATA_delay[92]; // rv 1
  assign CH1_TXDATA_in[93] = (CH1_TXDATA[93] === 1'bz) || CH1_TXDATA_delay[93]; // rv 1
  assign CH1_TXDATA_in[94] = (CH1_TXDATA[94] === 1'bz) || CH1_TXDATA_delay[94]; // rv 1
  assign CH1_TXDATA_in[95] = (CH1_TXDATA[95] === 1'bz) || CH1_TXDATA_delay[95]; // rv 1
  assign CH1_TXDATA_in[96] = (CH1_TXDATA[96] === 1'bz) || CH1_TXDATA_delay[96]; // rv 1
  assign CH1_TXDATA_in[97] = (CH1_TXDATA[97] === 1'bz) || CH1_TXDATA_delay[97]; // rv 1
  assign CH1_TXDATA_in[98] = (CH1_TXDATA[98] === 1'bz) || CH1_TXDATA_delay[98]; // rv 1
  assign CH1_TXDATA_in[99] = (CH1_TXDATA[99] === 1'bz) || CH1_TXDATA_delay[99]; // rv 1
  assign CH1_TXDATA_in[9] = (CH1_TXDATA[9] === 1'bz) || CH1_TXDATA_delay[9]; // rv 1
  assign CH1_TXDETECTRX_in = (CH1_TXDETECTRX === 1'bz) || CH1_TXDETECTRX_delay; // rv 1
  assign CH1_TXELECIDLE_in = (CH1_TXELECIDLE === 1'bz) || CH1_TXELECIDLE_delay; // rv 1
  assign CH1_TXHEADER_in[0] = (CH1_TXHEADER[0] === 1'bz) || CH1_TXHEADER_delay[0]; // rv 1
  assign CH1_TXHEADER_in[1] = (CH1_TXHEADER[1] === 1'bz) || CH1_TXHEADER_delay[1]; // rv 1
  assign CH1_TXHEADER_in[2] = (CH1_TXHEADER[2] === 1'bz) || CH1_TXHEADER_delay[2]; // rv 1
  assign CH1_TXHEADER_in[3] = (CH1_TXHEADER[3] === 1'bz) || CH1_TXHEADER_delay[3]; // rv 1
  assign CH1_TXHEADER_in[4] = (CH1_TXHEADER[4] === 1'bz) || CH1_TXHEADER_delay[4]; // rv 1
  assign CH1_TXHEADER_in[5] = (CH1_TXHEADER[5] === 1'bz) || CH1_TXHEADER_delay[5]; // rv 1
  assign CH1_TXINHIBIT_in = (CH1_TXINHIBIT === 1'bz) || CH1_TXINHIBIT_delay; // rv 1
  assign CH1_TXPD_in[0] = (CH1_TXPD[0] === 1'bz) || CH1_TXPD_delay[0]; // rv 1
  assign CH1_TXPD_in[1] = (CH1_TXPD[1] === 1'bz) || CH1_TXPD_delay[1]; // rv 1
  assign CH1_TXPIPPMEN_in = (CH1_TXPIPPMEN === 1'bz) || CH1_TXPIPPMEN_delay; // rv 1
  assign CH1_TXPIPPMSTEPSIZE_in[0] = (CH1_TXPIPPMSTEPSIZE[0] === 1'bz) || CH1_TXPIPPMSTEPSIZE_delay[0]; // rv 1
  assign CH1_TXPIPPMSTEPSIZE_in[1] = (CH1_TXPIPPMSTEPSIZE[1] === 1'bz) || CH1_TXPIPPMSTEPSIZE_delay[1]; // rv 1
  assign CH1_TXPIPPMSTEPSIZE_in[2] = (CH1_TXPIPPMSTEPSIZE[2] === 1'bz) || CH1_TXPIPPMSTEPSIZE_delay[2]; // rv 1
  assign CH1_TXPIPPMSTEPSIZE_in[3] = (CH1_TXPIPPMSTEPSIZE[3] === 1'bz) || CH1_TXPIPPMSTEPSIZE_delay[3]; // rv 1
  assign CH1_TXPIPPMSTEPSIZE_in[4] = (CH1_TXPIPPMSTEPSIZE[4] === 1'bz) || CH1_TXPIPPMSTEPSIZE_delay[4]; // rv 1
  assign CH1_TXPOLARITY_in = (CH1_TXPOLARITY === 1'bz) || CH1_TXPOLARITY_delay; // rv 1
  assign CH1_TXRATE_in[0] = (CH1_TXRATE[0] === 1'bz) || CH1_TXRATE_delay[0]; // rv 1
  assign CH1_TXRATE_in[1] = (CH1_TXRATE[1] === 1'bz) || CH1_TXRATE_delay[1]; // rv 1
  assign CH1_TXRATE_in[2] = (CH1_TXRATE[2] === 1'bz) || CH1_TXRATE_delay[2]; // rv 1
  assign CH1_TXRATE_in[3] = (CH1_TXRATE[3] === 1'bz) || CH1_TXRATE_delay[3]; // rv 1
  assign CH1_TXRATE_in[4] = (CH1_TXRATE[4] === 1'bz) || CH1_TXRATE_delay[4]; // rv 1
  assign CH1_TXRATE_in[5] = (CH1_TXRATE[5] === 1'bz) || CH1_TXRATE_delay[5]; // rv 1
  assign CH1_TXRATE_in[6] = (CH1_TXRATE[6] === 1'bz) || CH1_TXRATE_delay[6]; // rv 1
  assign CH1_TXRATE_in[7] = (CH1_TXRATE[7] === 1'bz) || CH1_TXRATE_delay[7]; // rv 1
  assign CH1_TXSEQUENCE_in[0] = (CH1_TXSEQUENCE[0] === 1'bz) || CH1_TXSEQUENCE_delay[0]; // rv 1
  assign CH1_TXSEQUENCE_in[1] = (CH1_TXSEQUENCE[1] === 1'bz) || CH1_TXSEQUENCE_delay[1]; // rv 1
  assign CH1_TXSEQUENCE_in[2] = (CH1_TXSEQUENCE[2] === 1'bz) || CH1_TXSEQUENCE_delay[2]; // rv 1
  assign CH1_TXSEQUENCE_in[3] = (CH1_TXSEQUENCE[3] === 1'bz) || CH1_TXSEQUENCE_delay[3]; // rv 1
  assign CH1_TXSEQUENCE_in[4] = (CH1_TXSEQUENCE[4] === 1'bz) || CH1_TXSEQUENCE_delay[4]; // rv 1
  assign CH1_TXSEQUENCE_in[5] = (CH1_TXSEQUENCE[5] === 1'bz) || CH1_TXSEQUENCE_delay[5]; // rv 1
  assign CH1_TXSEQUENCE_in[6] = (CH1_TXSEQUENCE[6] === 1'bz) || CH1_TXSEQUENCE_delay[6]; // rv 1
  assign CH1_TXUSRCLK_in = (CH1_TXUSRCLK === 1'bz) || CH1_TXUSRCLK_delay; // rv 1
  assign CH2_EYESCANTRIGGER_in = (CH2_EYESCANTRIGGER === 1'bz) || CH2_EYESCANTRIGGER_delay; // rv 1
  assign CH2_PHYESMADAPTSAVE_in = (CH2_PHYESMADAPTSAVE === 1'bz) || CH2_PHYESMADAPTSAVE_delay; // rv 1
  assign CH2_RXCHBONDI_in[0] = (CH2_RXCHBONDI[0] === 1'bz) || CH2_RXCHBONDI_delay[0]; // rv 1
  assign CH2_RXCHBONDI_in[1] = (CH2_RXCHBONDI[1] === 1'bz) || CH2_RXCHBONDI_delay[1]; // rv 1
  assign CH2_RXCHBONDI_in[2] = (CH2_RXCHBONDI[2] === 1'bz) || CH2_RXCHBONDI_delay[2]; // rv 1
  assign CH2_RXCHBONDI_in[3] = (CH2_RXCHBONDI[3] === 1'bz) || CH2_RXCHBONDI_delay[3]; // rv 1
  assign CH2_RXCHBONDI_in[4] = (CH2_RXCHBONDI[4] === 1'bz) || CH2_RXCHBONDI_delay[4]; // rv 1
  assign CH2_RXDLYALIGNREQ_in = (CH2_RXDLYALIGNREQ === 1'bz) || CH2_RXDLYALIGNREQ_delay; // rv 1
  assign CH2_RXEQTRAINING_in = (CH2_RXEQTRAINING === 1'bz) || CH2_RXEQTRAINING_delay; // rv 1
  assign CH2_RXGEARBOXSLIP_in = (CH2_RXGEARBOXSLIP === 1'bz) || CH2_RXGEARBOXSLIP_delay; // rv 1
  assign CH2_RXMLDCHAINDONE_in = (CH2_RXMLDCHAINDONE === 1'bz) || CH2_RXMLDCHAINDONE_delay; // rv 1
  assign CH2_RXMLDCHAINREQ_in = (CH2_RXMLDCHAINREQ === 1'bz) || CH2_RXMLDCHAINREQ_delay; // rv 1
  assign CH2_RXPD_in[0] = (CH2_RXPD[0] === 1'bz) || CH2_RXPD_delay[0]; // rv 1
  assign CH2_RXPD_in[1] = (CH2_RXPD[1] === 1'bz) || CH2_RXPD_delay[1]; // rv 1
  assign CH2_RXPHALIGNREQ_in = (CH2_RXPHALIGNREQ === 1'bz) || CH2_RXPHALIGNREQ_delay; // rv 1
  assign CH2_RXPHSETINITREQ_in = (CH2_RXPHSETINITREQ === 1'bz) || CH2_RXPHSETINITREQ_delay; // rv 1
  assign CH2_RXPHSHIFT180_in = (CH2_RXPHSHIFT180 === 1'bz) || CH2_RXPHSHIFT180_delay; // rv 1
  assign CH2_RXPOLARITY_in = (CH2_RXPOLARITY === 1'bz) || CH2_RXPOLARITY_delay; // rv 1
  assign CH2_RXRATE_in[0] = (CH2_RXRATE[0] === 1'bz) || CH2_RXRATE_delay[0]; // rv 1
  assign CH2_RXRATE_in[1] = (CH2_RXRATE[1] === 1'bz) || CH2_RXRATE_delay[1]; // rv 1
  assign CH2_RXRATE_in[2] = (CH2_RXRATE[2] === 1'bz) || CH2_RXRATE_delay[2]; // rv 1
  assign CH2_RXRATE_in[3] = (CH2_RXRATE[3] === 1'bz) || CH2_RXRATE_delay[3]; // rv 1
  assign CH2_RXRATE_in[4] = (CH2_RXRATE[4] === 1'bz) || CH2_RXRATE_delay[4]; // rv 1
  assign CH2_RXRATE_in[5] = (CH2_RXRATE[5] === 1'bz) || CH2_RXRATE_delay[5]; // rv 1
  assign CH2_RXRATE_in[6] = (CH2_RXRATE[6] === 1'bz) || CH2_RXRATE_delay[6]; // rv 1
  assign CH2_RXRATE_in[7] = (CH2_RXRATE[7] === 1'bz) || CH2_RXRATE_delay[7]; // rv 1
  assign CH2_RXSLIDE_in = (CH2_RXSLIDE === 1'bz) || CH2_RXSLIDE_delay; // rv 1
  assign CH2_RXUSRCLK_in = (CH2_RXUSRCLK === 1'bz) || CH2_RXUSRCLK_delay; // rv 1
  assign CH2_TXCOMINIT_in = (CH2_TXCOMINIT === 1'bz) || CH2_TXCOMINIT_delay; // rv 1
  assign CH2_TXCOMSAS_in = (CH2_TXCOMSAS === 1'bz) || CH2_TXCOMSAS_delay; // rv 1
  assign CH2_TXCOMWAKE_in = (CH2_TXCOMWAKE === 1'bz) || CH2_TXCOMWAKE_delay; // rv 1
  assign CH2_TXCTRL0_in[0] = (CH2_TXCTRL0[0] === 1'bz) || CH2_TXCTRL0_delay[0]; // rv 1
  assign CH2_TXCTRL0_in[10] = (CH2_TXCTRL0[10] === 1'bz) || CH2_TXCTRL0_delay[10]; // rv 1
  assign CH2_TXCTRL0_in[11] = (CH2_TXCTRL0[11] === 1'bz) || CH2_TXCTRL0_delay[11]; // rv 1
  assign CH2_TXCTRL0_in[12] = (CH2_TXCTRL0[12] === 1'bz) || CH2_TXCTRL0_delay[12]; // rv 1
  assign CH2_TXCTRL0_in[13] = (CH2_TXCTRL0[13] === 1'bz) || CH2_TXCTRL0_delay[13]; // rv 1
  assign CH2_TXCTRL0_in[14] = (CH2_TXCTRL0[14] === 1'bz) || CH2_TXCTRL0_delay[14]; // rv 1
  assign CH2_TXCTRL0_in[15] = (CH2_TXCTRL0[15] === 1'bz) || CH2_TXCTRL0_delay[15]; // rv 1
  assign CH2_TXCTRL0_in[1] = (CH2_TXCTRL0[1] === 1'bz) || CH2_TXCTRL0_delay[1]; // rv 1
  assign CH2_TXCTRL0_in[2] = (CH2_TXCTRL0[2] === 1'bz) || CH2_TXCTRL0_delay[2]; // rv 1
  assign CH2_TXCTRL0_in[3] = (CH2_TXCTRL0[3] === 1'bz) || CH2_TXCTRL0_delay[3]; // rv 1
  assign CH2_TXCTRL0_in[4] = (CH2_TXCTRL0[4] === 1'bz) || CH2_TXCTRL0_delay[4]; // rv 1
  assign CH2_TXCTRL0_in[5] = (CH2_TXCTRL0[5] === 1'bz) || CH2_TXCTRL0_delay[5]; // rv 1
  assign CH2_TXCTRL0_in[6] = (CH2_TXCTRL0[6] === 1'bz) || CH2_TXCTRL0_delay[6]; // rv 1
  assign CH2_TXCTRL0_in[7] = (CH2_TXCTRL0[7] === 1'bz) || CH2_TXCTRL0_delay[7]; // rv 1
  assign CH2_TXCTRL0_in[8] = (CH2_TXCTRL0[8] === 1'bz) || CH2_TXCTRL0_delay[8]; // rv 1
  assign CH2_TXCTRL0_in[9] = (CH2_TXCTRL0[9] === 1'bz) || CH2_TXCTRL0_delay[9]; // rv 1
  assign CH2_TXCTRL1_in[0] = (CH2_TXCTRL1[0] === 1'bz) || CH2_TXCTRL1_delay[0]; // rv 1
  assign CH2_TXCTRL1_in[10] = (CH2_TXCTRL1[10] === 1'bz) || CH2_TXCTRL1_delay[10]; // rv 1
  assign CH2_TXCTRL1_in[11] = (CH2_TXCTRL1[11] === 1'bz) || CH2_TXCTRL1_delay[11]; // rv 1
  assign CH2_TXCTRL1_in[12] = (CH2_TXCTRL1[12] === 1'bz) || CH2_TXCTRL1_delay[12]; // rv 1
  assign CH2_TXCTRL1_in[13] = (CH2_TXCTRL1[13] === 1'bz) || CH2_TXCTRL1_delay[13]; // rv 1
  assign CH2_TXCTRL1_in[14] = (CH2_TXCTRL1[14] === 1'bz) || CH2_TXCTRL1_delay[14]; // rv 1
  assign CH2_TXCTRL1_in[15] = (CH2_TXCTRL1[15] === 1'bz) || CH2_TXCTRL1_delay[15]; // rv 1
  assign CH2_TXCTRL1_in[1] = (CH2_TXCTRL1[1] === 1'bz) || CH2_TXCTRL1_delay[1]; // rv 1
  assign CH2_TXCTRL1_in[2] = (CH2_TXCTRL1[2] === 1'bz) || CH2_TXCTRL1_delay[2]; // rv 1
  assign CH2_TXCTRL1_in[3] = (CH2_TXCTRL1[3] === 1'bz) || CH2_TXCTRL1_delay[3]; // rv 1
  assign CH2_TXCTRL1_in[4] = (CH2_TXCTRL1[4] === 1'bz) || CH2_TXCTRL1_delay[4]; // rv 1
  assign CH2_TXCTRL1_in[5] = (CH2_TXCTRL1[5] === 1'bz) || CH2_TXCTRL1_delay[5]; // rv 1
  assign CH2_TXCTRL1_in[6] = (CH2_TXCTRL1[6] === 1'bz) || CH2_TXCTRL1_delay[6]; // rv 1
  assign CH2_TXCTRL1_in[7] = (CH2_TXCTRL1[7] === 1'bz) || CH2_TXCTRL1_delay[7]; // rv 1
  assign CH2_TXCTRL1_in[8] = (CH2_TXCTRL1[8] === 1'bz) || CH2_TXCTRL1_delay[8]; // rv 1
  assign CH2_TXCTRL1_in[9] = (CH2_TXCTRL1[9] === 1'bz) || CH2_TXCTRL1_delay[9]; // rv 1
  assign CH2_TXCTRL2_in[0] = (CH2_TXCTRL2[0] === 1'bz) || CH2_TXCTRL2_delay[0]; // rv 1
  assign CH2_TXCTRL2_in[1] = (CH2_TXCTRL2[1] === 1'bz) || CH2_TXCTRL2_delay[1]; // rv 1
  assign CH2_TXCTRL2_in[2] = (CH2_TXCTRL2[2] === 1'bz) || CH2_TXCTRL2_delay[2]; // rv 1
  assign CH2_TXCTRL2_in[3] = (CH2_TXCTRL2[3] === 1'bz) || CH2_TXCTRL2_delay[3]; // rv 1
  assign CH2_TXCTRL2_in[4] = (CH2_TXCTRL2[4] === 1'bz) || CH2_TXCTRL2_delay[4]; // rv 1
  assign CH2_TXCTRL2_in[5] = (CH2_TXCTRL2[5] === 1'bz) || CH2_TXCTRL2_delay[5]; // rv 1
  assign CH2_TXCTRL2_in[6] = (CH2_TXCTRL2[6] === 1'bz) || CH2_TXCTRL2_delay[6]; // rv 1
  assign CH2_TXCTRL2_in[7] = (CH2_TXCTRL2[7] === 1'bz) || CH2_TXCTRL2_delay[7]; // rv 1
  assign CH2_TXDATA_in[0] = (CH2_TXDATA[0] === 1'bz) || CH2_TXDATA_delay[0]; // rv 1
  assign CH2_TXDATA_in[100] = (CH2_TXDATA[100] === 1'bz) || CH2_TXDATA_delay[100]; // rv 1
  assign CH2_TXDATA_in[101] = (CH2_TXDATA[101] === 1'bz) || CH2_TXDATA_delay[101]; // rv 1
  assign CH2_TXDATA_in[102] = (CH2_TXDATA[102] === 1'bz) || CH2_TXDATA_delay[102]; // rv 1
  assign CH2_TXDATA_in[103] = (CH2_TXDATA[103] === 1'bz) || CH2_TXDATA_delay[103]; // rv 1
  assign CH2_TXDATA_in[104] = (CH2_TXDATA[104] === 1'bz) || CH2_TXDATA_delay[104]; // rv 1
  assign CH2_TXDATA_in[105] = (CH2_TXDATA[105] === 1'bz) || CH2_TXDATA_delay[105]; // rv 1
  assign CH2_TXDATA_in[106] = (CH2_TXDATA[106] === 1'bz) || CH2_TXDATA_delay[106]; // rv 1
  assign CH2_TXDATA_in[107] = (CH2_TXDATA[107] === 1'bz) || CH2_TXDATA_delay[107]; // rv 1
  assign CH2_TXDATA_in[108] = (CH2_TXDATA[108] === 1'bz) || CH2_TXDATA_delay[108]; // rv 1
  assign CH2_TXDATA_in[109] = (CH2_TXDATA[109] === 1'bz) || CH2_TXDATA_delay[109]; // rv 1
  assign CH2_TXDATA_in[10] = (CH2_TXDATA[10] === 1'bz) || CH2_TXDATA_delay[10]; // rv 1
  assign CH2_TXDATA_in[110] = (CH2_TXDATA[110] === 1'bz) || CH2_TXDATA_delay[110]; // rv 1
  assign CH2_TXDATA_in[111] = (CH2_TXDATA[111] === 1'bz) || CH2_TXDATA_delay[111]; // rv 1
  assign CH2_TXDATA_in[112] = (CH2_TXDATA[112] === 1'bz) || CH2_TXDATA_delay[112]; // rv 1
  assign CH2_TXDATA_in[113] = (CH2_TXDATA[113] === 1'bz) || CH2_TXDATA_delay[113]; // rv 1
  assign CH2_TXDATA_in[114] = (CH2_TXDATA[114] === 1'bz) || CH2_TXDATA_delay[114]; // rv 1
  assign CH2_TXDATA_in[115] = (CH2_TXDATA[115] === 1'bz) || CH2_TXDATA_delay[115]; // rv 1
  assign CH2_TXDATA_in[116] = (CH2_TXDATA[116] === 1'bz) || CH2_TXDATA_delay[116]; // rv 1
  assign CH2_TXDATA_in[117] = (CH2_TXDATA[117] === 1'bz) || CH2_TXDATA_delay[117]; // rv 1
  assign CH2_TXDATA_in[118] = (CH2_TXDATA[118] === 1'bz) || CH2_TXDATA_delay[118]; // rv 1
  assign CH2_TXDATA_in[119] = (CH2_TXDATA[119] === 1'bz) || CH2_TXDATA_delay[119]; // rv 1
  assign CH2_TXDATA_in[11] = (CH2_TXDATA[11] === 1'bz) || CH2_TXDATA_delay[11]; // rv 1
  assign CH2_TXDATA_in[120] = (CH2_TXDATA[120] === 1'bz) || CH2_TXDATA_delay[120]; // rv 1
  assign CH2_TXDATA_in[121] = (CH2_TXDATA[121] === 1'bz) || CH2_TXDATA_delay[121]; // rv 1
  assign CH2_TXDATA_in[122] = (CH2_TXDATA[122] === 1'bz) || CH2_TXDATA_delay[122]; // rv 1
  assign CH2_TXDATA_in[123] = (CH2_TXDATA[123] === 1'bz) || CH2_TXDATA_delay[123]; // rv 1
  assign CH2_TXDATA_in[124] = (CH2_TXDATA[124] === 1'bz) || CH2_TXDATA_delay[124]; // rv 1
  assign CH2_TXDATA_in[125] = (CH2_TXDATA[125] === 1'bz) || CH2_TXDATA_delay[125]; // rv 1
  assign CH2_TXDATA_in[126] = (CH2_TXDATA[126] === 1'bz) || CH2_TXDATA_delay[126]; // rv 1
  assign CH2_TXDATA_in[127] = (CH2_TXDATA[127] === 1'bz) || CH2_TXDATA_delay[127]; // rv 1
  assign CH2_TXDATA_in[12] = (CH2_TXDATA[12] === 1'bz) || CH2_TXDATA_delay[12]; // rv 1
  assign CH2_TXDATA_in[13] = (CH2_TXDATA[13] === 1'bz) || CH2_TXDATA_delay[13]; // rv 1
  assign CH2_TXDATA_in[14] = (CH2_TXDATA[14] === 1'bz) || CH2_TXDATA_delay[14]; // rv 1
  assign CH2_TXDATA_in[15] = (CH2_TXDATA[15] === 1'bz) || CH2_TXDATA_delay[15]; // rv 1
  assign CH2_TXDATA_in[16] = (CH2_TXDATA[16] === 1'bz) || CH2_TXDATA_delay[16]; // rv 1
  assign CH2_TXDATA_in[17] = (CH2_TXDATA[17] === 1'bz) || CH2_TXDATA_delay[17]; // rv 1
  assign CH2_TXDATA_in[18] = (CH2_TXDATA[18] === 1'bz) || CH2_TXDATA_delay[18]; // rv 1
  assign CH2_TXDATA_in[19] = (CH2_TXDATA[19] === 1'bz) || CH2_TXDATA_delay[19]; // rv 1
  assign CH2_TXDATA_in[1] = (CH2_TXDATA[1] === 1'bz) || CH2_TXDATA_delay[1]; // rv 1
  assign CH2_TXDATA_in[20] = (CH2_TXDATA[20] === 1'bz) || CH2_TXDATA_delay[20]; // rv 1
  assign CH2_TXDATA_in[21] = (CH2_TXDATA[21] === 1'bz) || CH2_TXDATA_delay[21]; // rv 1
  assign CH2_TXDATA_in[22] = (CH2_TXDATA[22] === 1'bz) || CH2_TXDATA_delay[22]; // rv 1
  assign CH2_TXDATA_in[23] = (CH2_TXDATA[23] === 1'bz) || CH2_TXDATA_delay[23]; // rv 1
  assign CH2_TXDATA_in[24] = (CH2_TXDATA[24] === 1'bz) || CH2_TXDATA_delay[24]; // rv 1
  assign CH2_TXDATA_in[25] = (CH2_TXDATA[25] === 1'bz) || CH2_TXDATA_delay[25]; // rv 1
  assign CH2_TXDATA_in[26] = (CH2_TXDATA[26] === 1'bz) || CH2_TXDATA_delay[26]; // rv 1
  assign CH2_TXDATA_in[27] = (CH2_TXDATA[27] === 1'bz) || CH2_TXDATA_delay[27]; // rv 1
  assign CH2_TXDATA_in[28] = (CH2_TXDATA[28] === 1'bz) || CH2_TXDATA_delay[28]; // rv 1
  assign CH2_TXDATA_in[29] = (CH2_TXDATA[29] === 1'bz) || CH2_TXDATA_delay[29]; // rv 1
  assign CH2_TXDATA_in[2] = (CH2_TXDATA[2] === 1'bz) || CH2_TXDATA_delay[2]; // rv 1
  assign CH2_TXDATA_in[30] = (CH2_TXDATA[30] === 1'bz) || CH2_TXDATA_delay[30]; // rv 1
  assign CH2_TXDATA_in[31] = (CH2_TXDATA[31] === 1'bz) || CH2_TXDATA_delay[31]; // rv 1
  assign CH2_TXDATA_in[32] = (CH2_TXDATA[32] === 1'bz) || CH2_TXDATA_delay[32]; // rv 1
  assign CH2_TXDATA_in[33] = (CH2_TXDATA[33] === 1'bz) || CH2_TXDATA_delay[33]; // rv 1
  assign CH2_TXDATA_in[34] = (CH2_TXDATA[34] === 1'bz) || CH2_TXDATA_delay[34]; // rv 1
  assign CH2_TXDATA_in[35] = (CH2_TXDATA[35] === 1'bz) || CH2_TXDATA_delay[35]; // rv 1
  assign CH2_TXDATA_in[36] = (CH2_TXDATA[36] === 1'bz) || CH2_TXDATA_delay[36]; // rv 1
  assign CH2_TXDATA_in[37] = (CH2_TXDATA[37] === 1'bz) || CH2_TXDATA_delay[37]; // rv 1
  assign CH2_TXDATA_in[38] = (CH2_TXDATA[38] === 1'bz) || CH2_TXDATA_delay[38]; // rv 1
  assign CH2_TXDATA_in[39] = (CH2_TXDATA[39] === 1'bz) || CH2_TXDATA_delay[39]; // rv 1
  assign CH2_TXDATA_in[3] = (CH2_TXDATA[3] === 1'bz) || CH2_TXDATA_delay[3]; // rv 1
  assign CH2_TXDATA_in[40] = (CH2_TXDATA[40] === 1'bz) || CH2_TXDATA_delay[40]; // rv 1
  assign CH2_TXDATA_in[41] = (CH2_TXDATA[41] === 1'bz) || CH2_TXDATA_delay[41]; // rv 1
  assign CH2_TXDATA_in[42] = (CH2_TXDATA[42] === 1'bz) || CH2_TXDATA_delay[42]; // rv 1
  assign CH2_TXDATA_in[43] = (CH2_TXDATA[43] === 1'bz) || CH2_TXDATA_delay[43]; // rv 1
  assign CH2_TXDATA_in[44] = (CH2_TXDATA[44] === 1'bz) || CH2_TXDATA_delay[44]; // rv 1
  assign CH2_TXDATA_in[45] = (CH2_TXDATA[45] === 1'bz) || CH2_TXDATA_delay[45]; // rv 1
  assign CH2_TXDATA_in[46] = (CH2_TXDATA[46] === 1'bz) || CH2_TXDATA_delay[46]; // rv 1
  assign CH2_TXDATA_in[47] = (CH2_TXDATA[47] === 1'bz) || CH2_TXDATA_delay[47]; // rv 1
  assign CH2_TXDATA_in[48] = (CH2_TXDATA[48] === 1'bz) || CH2_TXDATA_delay[48]; // rv 1
  assign CH2_TXDATA_in[49] = (CH2_TXDATA[49] === 1'bz) || CH2_TXDATA_delay[49]; // rv 1
  assign CH2_TXDATA_in[4] = (CH2_TXDATA[4] === 1'bz) || CH2_TXDATA_delay[4]; // rv 1
  assign CH2_TXDATA_in[50] = (CH2_TXDATA[50] === 1'bz) || CH2_TXDATA_delay[50]; // rv 1
  assign CH2_TXDATA_in[51] = (CH2_TXDATA[51] === 1'bz) || CH2_TXDATA_delay[51]; // rv 1
  assign CH2_TXDATA_in[52] = (CH2_TXDATA[52] === 1'bz) || CH2_TXDATA_delay[52]; // rv 1
  assign CH2_TXDATA_in[53] = (CH2_TXDATA[53] === 1'bz) || CH2_TXDATA_delay[53]; // rv 1
  assign CH2_TXDATA_in[54] = (CH2_TXDATA[54] === 1'bz) || CH2_TXDATA_delay[54]; // rv 1
  assign CH2_TXDATA_in[55] = (CH2_TXDATA[55] === 1'bz) || CH2_TXDATA_delay[55]; // rv 1
  assign CH2_TXDATA_in[56] = (CH2_TXDATA[56] === 1'bz) || CH2_TXDATA_delay[56]; // rv 1
  assign CH2_TXDATA_in[57] = (CH2_TXDATA[57] === 1'bz) || CH2_TXDATA_delay[57]; // rv 1
  assign CH2_TXDATA_in[58] = (CH2_TXDATA[58] === 1'bz) || CH2_TXDATA_delay[58]; // rv 1
  assign CH2_TXDATA_in[59] = (CH2_TXDATA[59] === 1'bz) || CH2_TXDATA_delay[59]; // rv 1
  assign CH2_TXDATA_in[5] = (CH2_TXDATA[5] === 1'bz) || CH2_TXDATA_delay[5]; // rv 1
  assign CH2_TXDATA_in[60] = (CH2_TXDATA[60] === 1'bz) || CH2_TXDATA_delay[60]; // rv 1
  assign CH2_TXDATA_in[61] = (CH2_TXDATA[61] === 1'bz) || CH2_TXDATA_delay[61]; // rv 1
  assign CH2_TXDATA_in[62] = (CH2_TXDATA[62] === 1'bz) || CH2_TXDATA_delay[62]; // rv 1
  assign CH2_TXDATA_in[63] = (CH2_TXDATA[63] === 1'bz) || CH2_TXDATA_delay[63]; // rv 1
  assign CH2_TXDATA_in[64] = (CH2_TXDATA[64] === 1'bz) || CH2_TXDATA_delay[64]; // rv 1
  assign CH2_TXDATA_in[65] = (CH2_TXDATA[65] === 1'bz) || CH2_TXDATA_delay[65]; // rv 1
  assign CH2_TXDATA_in[66] = (CH2_TXDATA[66] === 1'bz) || CH2_TXDATA_delay[66]; // rv 1
  assign CH2_TXDATA_in[67] = (CH2_TXDATA[67] === 1'bz) || CH2_TXDATA_delay[67]; // rv 1
  assign CH2_TXDATA_in[68] = (CH2_TXDATA[68] === 1'bz) || CH2_TXDATA_delay[68]; // rv 1
  assign CH2_TXDATA_in[69] = (CH2_TXDATA[69] === 1'bz) || CH2_TXDATA_delay[69]; // rv 1
  assign CH2_TXDATA_in[6] = (CH2_TXDATA[6] === 1'bz) || CH2_TXDATA_delay[6]; // rv 1
  assign CH2_TXDATA_in[70] = (CH2_TXDATA[70] === 1'bz) || CH2_TXDATA_delay[70]; // rv 1
  assign CH2_TXDATA_in[71] = (CH2_TXDATA[71] === 1'bz) || CH2_TXDATA_delay[71]; // rv 1
  assign CH2_TXDATA_in[72] = (CH2_TXDATA[72] === 1'bz) || CH2_TXDATA_delay[72]; // rv 1
  assign CH2_TXDATA_in[73] = (CH2_TXDATA[73] === 1'bz) || CH2_TXDATA_delay[73]; // rv 1
  assign CH2_TXDATA_in[74] = (CH2_TXDATA[74] === 1'bz) || CH2_TXDATA_delay[74]; // rv 1
  assign CH2_TXDATA_in[75] = (CH2_TXDATA[75] === 1'bz) || CH2_TXDATA_delay[75]; // rv 1
  assign CH2_TXDATA_in[76] = (CH2_TXDATA[76] === 1'bz) || CH2_TXDATA_delay[76]; // rv 1
  assign CH2_TXDATA_in[77] = (CH2_TXDATA[77] === 1'bz) || CH2_TXDATA_delay[77]; // rv 1
  assign CH2_TXDATA_in[78] = (CH2_TXDATA[78] === 1'bz) || CH2_TXDATA_delay[78]; // rv 1
  assign CH2_TXDATA_in[79] = (CH2_TXDATA[79] === 1'bz) || CH2_TXDATA_delay[79]; // rv 1
  assign CH2_TXDATA_in[7] = (CH2_TXDATA[7] === 1'bz) || CH2_TXDATA_delay[7]; // rv 1
  assign CH2_TXDATA_in[80] = (CH2_TXDATA[80] === 1'bz) || CH2_TXDATA_delay[80]; // rv 1
  assign CH2_TXDATA_in[81] = (CH2_TXDATA[81] === 1'bz) || CH2_TXDATA_delay[81]; // rv 1
  assign CH2_TXDATA_in[82] = (CH2_TXDATA[82] === 1'bz) || CH2_TXDATA_delay[82]; // rv 1
  assign CH2_TXDATA_in[83] = (CH2_TXDATA[83] === 1'bz) || CH2_TXDATA_delay[83]; // rv 1
  assign CH2_TXDATA_in[84] = (CH2_TXDATA[84] === 1'bz) || CH2_TXDATA_delay[84]; // rv 1
  assign CH2_TXDATA_in[85] = (CH2_TXDATA[85] === 1'bz) || CH2_TXDATA_delay[85]; // rv 1
  assign CH2_TXDATA_in[86] = (CH2_TXDATA[86] === 1'bz) || CH2_TXDATA_delay[86]; // rv 1
  assign CH2_TXDATA_in[87] = (CH2_TXDATA[87] === 1'bz) || CH2_TXDATA_delay[87]; // rv 1
  assign CH2_TXDATA_in[88] = (CH2_TXDATA[88] === 1'bz) || CH2_TXDATA_delay[88]; // rv 1
  assign CH2_TXDATA_in[89] = (CH2_TXDATA[89] === 1'bz) || CH2_TXDATA_delay[89]; // rv 1
  assign CH2_TXDATA_in[8] = (CH2_TXDATA[8] === 1'bz) || CH2_TXDATA_delay[8]; // rv 1
  assign CH2_TXDATA_in[90] = (CH2_TXDATA[90] === 1'bz) || CH2_TXDATA_delay[90]; // rv 1
  assign CH2_TXDATA_in[91] = (CH2_TXDATA[91] === 1'bz) || CH2_TXDATA_delay[91]; // rv 1
  assign CH2_TXDATA_in[92] = (CH2_TXDATA[92] === 1'bz) || CH2_TXDATA_delay[92]; // rv 1
  assign CH2_TXDATA_in[93] = (CH2_TXDATA[93] === 1'bz) || CH2_TXDATA_delay[93]; // rv 1
  assign CH2_TXDATA_in[94] = (CH2_TXDATA[94] === 1'bz) || CH2_TXDATA_delay[94]; // rv 1
  assign CH2_TXDATA_in[95] = (CH2_TXDATA[95] === 1'bz) || CH2_TXDATA_delay[95]; // rv 1
  assign CH2_TXDATA_in[96] = (CH2_TXDATA[96] === 1'bz) || CH2_TXDATA_delay[96]; // rv 1
  assign CH2_TXDATA_in[97] = (CH2_TXDATA[97] === 1'bz) || CH2_TXDATA_delay[97]; // rv 1
  assign CH2_TXDATA_in[98] = (CH2_TXDATA[98] === 1'bz) || CH2_TXDATA_delay[98]; // rv 1
  assign CH2_TXDATA_in[99] = (CH2_TXDATA[99] === 1'bz) || CH2_TXDATA_delay[99]; // rv 1
  assign CH2_TXDATA_in[9] = (CH2_TXDATA[9] === 1'bz) || CH2_TXDATA_delay[9]; // rv 1
  assign CH2_TXDETECTRX_in = (CH2_TXDETECTRX === 1'bz) || CH2_TXDETECTRX_delay; // rv 1
  assign CH2_TXELECIDLE_in = (CH2_TXELECIDLE === 1'bz) || CH2_TXELECIDLE_delay; // rv 1
  assign CH2_TXHEADER_in[0] = (CH2_TXHEADER[0] === 1'bz) || CH2_TXHEADER_delay[0]; // rv 1
  assign CH2_TXHEADER_in[1] = (CH2_TXHEADER[1] === 1'bz) || CH2_TXHEADER_delay[1]; // rv 1
  assign CH2_TXHEADER_in[2] = (CH2_TXHEADER[2] === 1'bz) || CH2_TXHEADER_delay[2]; // rv 1
  assign CH2_TXHEADER_in[3] = (CH2_TXHEADER[3] === 1'bz) || CH2_TXHEADER_delay[3]; // rv 1
  assign CH2_TXHEADER_in[4] = (CH2_TXHEADER[4] === 1'bz) || CH2_TXHEADER_delay[4]; // rv 1
  assign CH2_TXHEADER_in[5] = (CH2_TXHEADER[5] === 1'bz) || CH2_TXHEADER_delay[5]; // rv 1
  assign CH2_TXINHIBIT_in = (CH2_TXINHIBIT === 1'bz) || CH2_TXINHIBIT_delay; // rv 1
  assign CH2_TXPD_in[0] = (CH2_TXPD[0] === 1'bz) || CH2_TXPD_delay[0]; // rv 1
  assign CH2_TXPD_in[1] = (CH2_TXPD[1] === 1'bz) || CH2_TXPD_delay[1]; // rv 1
  assign CH2_TXPIPPMEN_in = (CH2_TXPIPPMEN === 1'bz) || CH2_TXPIPPMEN_delay; // rv 1
  assign CH2_TXPIPPMSTEPSIZE_in[0] = (CH2_TXPIPPMSTEPSIZE[0] === 1'bz) || CH2_TXPIPPMSTEPSIZE_delay[0]; // rv 1
  assign CH2_TXPIPPMSTEPSIZE_in[1] = (CH2_TXPIPPMSTEPSIZE[1] === 1'bz) || CH2_TXPIPPMSTEPSIZE_delay[1]; // rv 1
  assign CH2_TXPIPPMSTEPSIZE_in[2] = (CH2_TXPIPPMSTEPSIZE[2] === 1'bz) || CH2_TXPIPPMSTEPSIZE_delay[2]; // rv 1
  assign CH2_TXPIPPMSTEPSIZE_in[3] = (CH2_TXPIPPMSTEPSIZE[3] === 1'bz) || CH2_TXPIPPMSTEPSIZE_delay[3]; // rv 1
  assign CH2_TXPIPPMSTEPSIZE_in[4] = (CH2_TXPIPPMSTEPSIZE[4] === 1'bz) || CH2_TXPIPPMSTEPSIZE_delay[4]; // rv 1
  assign CH2_TXPOLARITY_in = (CH2_TXPOLARITY === 1'bz) || CH2_TXPOLARITY_delay; // rv 1
  assign CH2_TXRATE_in[0] = (CH2_TXRATE[0] === 1'bz) || CH2_TXRATE_delay[0]; // rv 1
  assign CH2_TXRATE_in[1] = (CH2_TXRATE[1] === 1'bz) || CH2_TXRATE_delay[1]; // rv 1
  assign CH2_TXRATE_in[2] = (CH2_TXRATE[2] === 1'bz) || CH2_TXRATE_delay[2]; // rv 1
  assign CH2_TXRATE_in[3] = (CH2_TXRATE[3] === 1'bz) || CH2_TXRATE_delay[3]; // rv 1
  assign CH2_TXRATE_in[4] = (CH2_TXRATE[4] === 1'bz) || CH2_TXRATE_delay[4]; // rv 1
  assign CH2_TXRATE_in[5] = (CH2_TXRATE[5] === 1'bz) || CH2_TXRATE_delay[5]; // rv 1
  assign CH2_TXRATE_in[6] = (CH2_TXRATE[6] === 1'bz) || CH2_TXRATE_delay[6]; // rv 1
  assign CH2_TXRATE_in[7] = (CH2_TXRATE[7] === 1'bz) || CH2_TXRATE_delay[7]; // rv 1
  assign CH2_TXSEQUENCE_in[0] = (CH2_TXSEQUENCE[0] === 1'bz) || CH2_TXSEQUENCE_delay[0]; // rv 1
  assign CH2_TXSEQUENCE_in[1] = (CH2_TXSEQUENCE[1] === 1'bz) || CH2_TXSEQUENCE_delay[1]; // rv 1
  assign CH2_TXSEQUENCE_in[2] = (CH2_TXSEQUENCE[2] === 1'bz) || CH2_TXSEQUENCE_delay[2]; // rv 1
  assign CH2_TXSEQUENCE_in[3] = (CH2_TXSEQUENCE[3] === 1'bz) || CH2_TXSEQUENCE_delay[3]; // rv 1
  assign CH2_TXSEQUENCE_in[4] = (CH2_TXSEQUENCE[4] === 1'bz) || CH2_TXSEQUENCE_delay[4]; // rv 1
  assign CH2_TXSEQUENCE_in[5] = (CH2_TXSEQUENCE[5] === 1'bz) || CH2_TXSEQUENCE_delay[5]; // rv 1
  assign CH2_TXSEQUENCE_in[6] = (CH2_TXSEQUENCE[6] === 1'bz) || CH2_TXSEQUENCE_delay[6]; // rv 1
  assign CH2_TXUSRCLK_in = (CH2_TXUSRCLK === 1'bz) || CH2_TXUSRCLK_delay; // rv 1
  assign CH3_EYESCANTRIGGER_in = (CH3_EYESCANTRIGGER === 1'bz) || CH3_EYESCANTRIGGER_delay; // rv 1
  assign CH3_PHYESMADAPTSAVE_in = (CH3_PHYESMADAPTSAVE === 1'bz) || CH3_PHYESMADAPTSAVE_delay; // rv 1
  assign CH3_RXCHBONDI_in[0] = (CH3_RXCHBONDI[0] === 1'bz) || CH3_RXCHBONDI_delay[0]; // rv 1
  assign CH3_RXCHBONDI_in[1] = (CH3_RXCHBONDI[1] === 1'bz) || CH3_RXCHBONDI_delay[1]; // rv 1
  assign CH3_RXCHBONDI_in[2] = (CH3_RXCHBONDI[2] === 1'bz) || CH3_RXCHBONDI_delay[2]; // rv 1
  assign CH3_RXCHBONDI_in[3] = (CH3_RXCHBONDI[3] === 1'bz) || CH3_RXCHBONDI_delay[3]; // rv 1
  assign CH3_RXCHBONDI_in[4] = (CH3_RXCHBONDI[4] === 1'bz) || CH3_RXCHBONDI_delay[4]; // rv 1
  assign CH3_RXDLYALIGNREQ_in = (CH3_RXDLYALIGNREQ === 1'bz) || CH3_RXDLYALIGNREQ_delay; // rv 1
  assign CH3_RXEQTRAINING_in = (CH3_RXEQTRAINING === 1'bz) || CH3_RXEQTRAINING_delay; // rv 1
  assign CH3_RXGEARBOXSLIP_in = (CH3_RXGEARBOXSLIP === 1'bz) || CH3_RXGEARBOXSLIP_delay; // rv 1
  assign CH3_RXMLDCHAINDONE_in = (CH3_RXMLDCHAINDONE === 1'bz) || CH3_RXMLDCHAINDONE_delay; // rv 1
  assign CH3_RXMLDCHAINREQ_in = (CH3_RXMLDCHAINREQ === 1'bz) || CH3_RXMLDCHAINREQ_delay; // rv 1
  assign CH3_RXPD_in[0] = (CH3_RXPD[0] === 1'bz) || CH3_RXPD_delay[0]; // rv 1
  assign CH3_RXPD_in[1] = (CH3_RXPD[1] === 1'bz) || CH3_RXPD_delay[1]; // rv 1
  assign CH3_RXPHALIGNREQ_in = (CH3_RXPHALIGNREQ === 1'bz) || CH3_RXPHALIGNREQ_delay; // rv 1
  assign CH3_RXPHSETINITREQ_in = (CH3_RXPHSETINITREQ === 1'bz) || CH3_RXPHSETINITREQ_delay; // rv 1
  assign CH3_RXPHSHIFT180_in = (CH3_RXPHSHIFT180 === 1'bz) || CH3_RXPHSHIFT180_delay; // rv 1
  assign CH3_RXPOLARITY_in = (CH3_RXPOLARITY === 1'bz) || CH3_RXPOLARITY_delay; // rv 1
  assign CH3_RXRATE_in[0] = (CH3_RXRATE[0] === 1'bz) || CH3_RXRATE_delay[0]; // rv 1
  assign CH3_RXRATE_in[1] = (CH3_RXRATE[1] === 1'bz) || CH3_RXRATE_delay[1]; // rv 1
  assign CH3_RXRATE_in[2] = (CH3_RXRATE[2] === 1'bz) || CH3_RXRATE_delay[2]; // rv 1
  assign CH3_RXRATE_in[3] = (CH3_RXRATE[3] === 1'bz) || CH3_RXRATE_delay[3]; // rv 1
  assign CH3_RXRATE_in[4] = (CH3_RXRATE[4] === 1'bz) || CH3_RXRATE_delay[4]; // rv 1
  assign CH3_RXRATE_in[5] = (CH3_RXRATE[5] === 1'bz) || CH3_RXRATE_delay[5]; // rv 1
  assign CH3_RXRATE_in[6] = (CH3_RXRATE[6] === 1'bz) || CH3_RXRATE_delay[6]; // rv 1
  assign CH3_RXRATE_in[7] = (CH3_RXRATE[7] === 1'bz) || CH3_RXRATE_delay[7]; // rv 1
  assign CH3_RXSLIDE_in = (CH3_RXSLIDE === 1'bz) || CH3_RXSLIDE_delay; // rv 1
  assign CH3_RXUSRCLK_in = (CH3_RXUSRCLK === 1'bz) || CH3_RXUSRCLK_delay; // rv 1
  assign CH3_TXCOMINIT_in = (CH3_TXCOMINIT === 1'bz) || CH3_TXCOMINIT_delay; // rv 1
  assign CH3_TXCOMSAS_in = (CH3_TXCOMSAS === 1'bz) || CH3_TXCOMSAS_delay; // rv 1
  assign CH3_TXCOMWAKE_in = (CH3_TXCOMWAKE === 1'bz) || CH3_TXCOMWAKE_delay; // rv 1
  assign CH3_TXCTRL0_in[0] = (CH3_TXCTRL0[0] === 1'bz) || CH3_TXCTRL0_delay[0]; // rv 1
  assign CH3_TXCTRL0_in[10] = (CH3_TXCTRL0[10] === 1'bz) || CH3_TXCTRL0_delay[10]; // rv 1
  assign CH3_TXCTRL0_in[11] = (CH3_TXCTRL0[11] === 1'bz) || CH3_TXCTRL0_delay[11]; // rv 1
  assign CH3_TXCTRL0_in[12] = (CH3_TXCTRL0[12] === 1'bz) || CH3_TXCTRL0_delay[12]; // rv 1
  assign CH3_TXCTRL0_in[13] = (CH3_TXCTRL0[13] === 1'bz) || CH3_TXCTRL0_delay[13]; // rv 1
  assign CH3_TXCTRL0_in[14] = (CH3_TXCTRL0[14] === 1'bz) || CH3_TXCTRL0_delay[14]; // rv 1
  assign CH3_TXCTRL0_in[15] = (CH3_TXCTRL0[15] === 1'bz) || CH3_TXCTRL0_delay[15]; // rv 1
  assign CH3_TXCTRL0_in[1] = (CH3_TXCTRL0[1] === 1'bz) || CH3_TXCTRL0_delay[1]; // rv 1
  assign CH3_TXCTRL0_in[2] = (CH3_TXCTRL0[2] === 1'bz) || CH3_TXCTRL0_delay[2]; // rv 1
  assign CH3_TXCTRL0_in[3] = (CH3_TXCTRL0[3] === 1'bz) || CH3_TXCTRL0_delay[3]; // rv 1
  assign CH3_TXCTRL0_in[4] = (CH3_TXCTRL0[4] === 1'bz) || CH3_TXCTRL0_delay[4]; // rv 1
  assign CH3_TXCTRL0_in[5] = (CH3_TXCTRL0[5] === 1'bz) || CH3_TXCTRL0_delay[5]; // rv 1
  assign CH3_TXCTRL0_in[6] = (CH3_TXCTRL0[6] === 1'bz) || CH3_TXCTRL0_delay[6]; // rv 1
  assign CH3_TXCTRL0_in[7] = (CH3_TXCTRL0[7] === 1'bz) || CH3_TXCTRL0_delay[7]; // rv 1
  assign CH3_TXCTRL0_in[8] = (CH3_TXCTRL0[8] === 1'bz) || CH3_TXCTRL0_delay[8]; // rv 1
  assign CH3_TXCTRL0_in[9] = (CH3_TXCTRL0[9] === 1'bz) || CH3_TXCTRL0_delay[9]; // rv 1
  assign CH3_TXCTRL1_in[0] = (CH3_TXCTRL1[0] === 1'bz) || CH3_TXCTRL1_delay[0]; // rv 1
  assign CH3_TXCTRL1_in[10] = (CH3_TXCTRL1[10] === 1'bz) || CH3_TXCTRL1_delay[10]; // rv 1
  assign CH3_TXCTRL1_in[11] = (CH3_TXCTRL1[11] === 1'bz) || CH3_TXCTRL1_delay[11]; // rv 1
  assign CH3_TXCTRL1_in[12] = (CH3_TXCTRL1[12] === 1'bz) || CH3_TXCTRL1_delay[12]; // rv 1
  assign CH3_TXCTRL1_in[13] = (CH3_TXCTRL1[13] === 1'bz) || CH3_TXCTRL1_delay[13]; // rv 1
  assign CH3_TXCTRL1_in[14] = (CH3_TXCTRL1[14] === 1'bz) || CH3_TXCTRL1_delay[14]; // rv 1
  assign CH3_TXCTRL1_in[15] = (CH3_TXCTRL1[15] === 1'bz) || CH3_TXCTRL1_delay[15]; // rv 1
  assign CH3_TXCTRL1_in[1] = (CH3_TXCTRL1[1] === 1'bz) || CH3_TXCTRL1_delay[1]; // rv 1
  assign CH3_TXCTRL1_in[2] = (CH3_TXCTRL1[2] === 1'bz) || CH3_TXCTRL1_delay[2]; // rv 1
  assign CH3_TXCTRL1_in[3] = (CH3_TXCTRL1[3] === 1'bz) || CH3_TXCTRL1_delay[3]; // rv 1
  assign CH3_TXCTRL1_in[4] = (CH3_TXCTRL1[4] === 1'bz) || CH3_TXCTRL1_delay[4]; // rv 1
  assign CH3_TXCTRL1_in[5] = (CH3_TXCTRL1[5] === 1'bz) || CH3_TXCTRL1_delay[5]; // rv 1
  assign CH3_TXCTRL1_in[6] = (CH3_TXCTRL1[6] === 1'bz) || CH3_TXCTRL1_delay[6]; // rv 1
  assign CH3_TXCTRL1_in[7] = (CH3_TXCTRL1[7] === 1'bz) || CH3_TXCTRL1_delay[7]; // rv 1
  assign CH3_TXCTRL1_in[8] = (CH3_TXCTRL1[8] === 1'bz) || CH3_TXCTRL1_delay[8]; // rv 1
  assign CH3_TXCTRL1_in[9] = (CH3_TXCTRL1[9] === 1'bz) || CH3_TXCTRL1_delay[9]; // rv 1
  assign CH3_TXCTRL2_in[0] = (CH3_TXCTRL2[0] === 1'bz) || CH3_TXCTRL2_delay[0]; // rv 1
  assign CH3_TXCTRL2_in[1] = (CH3_TXCTRL2[1] === 1'bz) || CH3_TXCTRL2_delay[1]; // rv 1
  assign CH3_TXCTRL2_in[2] = (CH3_TXCTRL2[2] === 1'bz) || CH3_TXCTRL2_delay[2]; // rv 1
  assign CH3_TXCTRL2_in[3] = (CH3_TXCTRL2[3] === 1'bz) || CH3_TXCTRL2_delay[3]; // rv 1
  assign CH3_TXCTRL2_in[4] = (CH3_TXCTRL2[4] === 1'bz) || CH3_TXCTRL2_delay[4]; // rv 1
  assign CH3_TXCTRL2_in[5] = (CH3_TXCTRL2[5] === 1'bz) || CH3_TXCTRL2_delay[5]; // rv 1
  assign CH3_TXCTRL2_in[6] = (CH3_TXCTRL2[6] === 1'bz) || CH3_TXCTRL2_delay[6]; // rv 1
  assign CH3_TXCTRL2_in[7] = (CH3_TXCTRL2[7] === 1'bz) || CH3_TXCTRL2_delay[7]; // rv 1
  assign CH3_TXDATA_in[0] = (CH3_TXDATA[0] === 1'bz) || CH3_TXDATA_delay[0]; // rv 1
  assign CH3_TXDATA_in[100] = (CH3_TXDATA[100] === 1'bz) || CH3_TXDATA_delay[100]; // rv 1
  assign CH3_TXDATA_in[101] = (CH3_TXDATA[101] === 1'bz) || CH3_TXDATA_delay[101]; // rv 1
  assign CH3_TXDATA_in[102] = (CH3_TXDATA[102] === 1'bz) || CH3_TXDATA_delay[102]; // rv 1
  assign CH3_TXDATA_in[103] = (CH3_TXDATA[103] === 1'bz) || CH3_TXDATA_delay[103]; // rv 1
  assign CH3_TXDATA_in[104] = (CH3_TXDATA[104] === 1'bz) || CH3_TXDATA_delay[104]; // rv 1
  assign CH3_TXDATA_in[105] = (CH3_TXDATA[105] === 1'bz) || CH3_TXDATA_delay[105]; // rv 1
  assign CH3_TXDATA_in[106] = (CH3_TXDATA[106] === 1'bz) || CH3_TXDATA_delay[106]; // rv 1
  assign CH3_TXDATA_in[107] = (CH3_TXDATA[107] === 1'bz) || CH3_TXDATA_delay[107]; // rv 1
  assign CH3_TXDATA_in[108] = (CH3_TXDATA[108] === 1'bz) || CH3_TXDATA_delay[108]; // rv 1
  assign CH3_TXDATA_in[109] = (CH3_TXDATA[109] === 1'bz) || CH3_TXDATA_delay[109]; // rv 1
  assign CH3_TXDATA_in[10] = (CH3_TXDATA[10] === 1'bz) || CH3_TXDATA_delay[10]; // rv 1
  assign CH3_TXDATA_in[110] = (CH3_TXDATA[110] === 1'bz) || CH3_TXDATA_delay[110]; // rv 1
  assign CH3_TXDATA_in[111] = (CH3_TXDATA[111] === 1'bz) || CH3_TXDATA_delay[111]; // rv 1
  assign CH3_TXDATA_in[112] = (CH3_TXDATA[112] === 1'bz) || CH3_TXDATA_delay[112]; // rv 1
  assign CH3_TXDATA_in[113] = (CH3_TXDATA[113] === 1'bz) || CH3_TXDATA_delay[113]; // rv 1
  assign CH3_TXDATA_in[114] = (CH3_TXDATA[114] === 1'bz) || CH3_TXDATA_delay[114]; // rv 1
  assign CH3_TXDATA_in[115] = (CH3_TXDATA[115] === 1'bz) || CH3_TXDATA_delay[115]; // rv 1
  assign CH3_TXDATA_in[116] = (CH3_TXDATA[116] === 1'bz) || CH3_TXDATA_delay[116]; // rv 1
  assign CH3_TXDATA_in[117] = (CH3_TXDATA[117] === 1'bz) || CH3_TXDATA_delay[117]; // rv 1
  assign CH3_TXDATA_in[118] = (CH3_TXDATA[118] === 1'bz) || CH3_TXDATA_delay[118]; // rv 1
  assign CH3_TXDATA_in[119] = (CH3_TXDATA[119] === 1'bz) || CH3_TXDATA_delay[119]; // rv 1
  assign CH3_TXDATA_in[11] = (CH3_TXDATA[11] === 1'bz) || CH3_TXDATA_delay[11]; // rv 1
  assign CH3_TXDATA_in[120] = (CH3_TXDATA[120] === 1'bz) || CH3_TXDATA_delay[120]; // rv 1
  assign CH3_TXDATA_in[121] = (CH3_TXDATA[121] === 1'bz) || CH3_TXDATA_delay[121]; // rv 1
  assign CH3_TXDATA_in[122] = (CH3_TXDATA[122] === 1'bz) || CH3_TXDATA_delay[122]; // rv 1
  assign CH3_TXDATA_in[123] = (CH3_TXDATA[123] === 1'bz) || CH3_TXDATA_delay[123]; // rv 1
  assign CH3_TXDATA_in[124] = (CH3_TXDATA[124] === 1'bz) || CH3_TXDATA_delay[124]; // rv 1
  assign CH3_TXDATA_in[125] = (CH3_TXDATA[125] === 1'bz) || CH3_TXDATA_delay[125]; // rv 1
  assign CH3_TXDATA_in[126] = (CH3_TXDATA[126] === 1'bz) || CH3_TXDATA_delay[126]; // rv 1
  assign CH3_TXDATA_in[127] = (CH3_TXDATA[127] === 1'bz) || CH3_TXDATA_delay[127]; // rv 1
  assign CH3_TXDATA_in[12] = (CH3_TXDATA[12] === 1'bz) || CH3_TXDATA_delay[12]; // rv 1
  assign CH3_TXDATA_in[13] = (CH3_TXDATA[13] === 1'bz) || CH3_TXDATA_delay[13]; // rv 1
  assign CH3_TXDATA_in[14] = (CH3_TXDATA[14] === 1'bz) || CH3_TXDATA_delay[14]; // rv 1
  assign CH3_TXDATA_in[15] = (CH3_TXDATA[15] === 1'bz) || CH3_TXDATA_delay[15]; // rv 1
  assign CH3_TXDATA_in[16] = (CH3_TXDATA[16] === 1'bz) || CH3_TXDATA_delay[16]; // rv 1
  assign CH3_TXDATA_in[17] = (CH3_TXDATA[17] === 1'bz) || CH3_TXDATA_delay[17]; // rv 1
  assign CH3_TXDATA_in[18] = (CH3_TXDATA[18] === 1'bz) || CH3_TXDATA_delay[18]; // rv 1
  assign CH3_TXDATA_in[19] = (CH3_TXDATA[19] === 1'bz) || CH3_TXDATA_delay[19]; // rv 1
  assign CH3_TXDATA_in[1] = (CH3_TXDATA[1] === 1'bz) || CH3_TXDATA_delay[1]; // rv 1
  assign CH3_TXDATA_in[20] = (CH3_TXDATA[20] === 1'bz) || CH3_TXDATA_delay[20]; // rv 1
  assign CH3_TXDATA_in[21] = (CH3_TXDATA[21] === 1'bz) || CH3_TXDATA_delay[21]; // rv 1
  assign CH3_TXDATA_in[22] = (CH3_TXDATA[22] === 1'bz) || CH3_TXDATA_delay[22]; // rv 1
  assign CH3_TXDATA_in[23] = (CH3_TXDATA[23] === 1'bz) || CH3_TXDATA_delay[23]; // rv 1
  assign CH3_TXDATA_in[24] = (CH3_TXDATA[24] === 1'bz) || CH3_TXDATA_delay[24]; // rv 1
  assign CH3_TXDATA_in[25] = (CH3_TXDATA[25] === 1'bz) || CH3_TXDATA_delay[25]; // rv 1
  assign CH3_TXDATA_in[26] = (CH3_TXDATA[26] === 1'bz) || CH3_TXDATA_delay[26]; // rv 1
  assign CH3_TXDATA_in[27] = (CH3_TXDATA[27] === 1'bz) || CH3_TXDATA_delay[27]; // rv 1
  assign CH3_TXDATA_in[28] = (CH3_TXDATA[28] === 1'bz) || CH3_TXDATA_delay[28]; // rv 1
  assign CH3_TXDATA_in[29] = (CH3_TXDATA[29] === 1'bz) || CH3_TXDATA_delay[29]; // rv 1
  assign CH3_TXDATA_in[2] = (CH3_TXDATA[2] === 1'bz) || CH3_TXDATA_delay[2]; // rv 1
  assign CH3_TXDATA_in[30] = (CH3_TXDATA[30] === 1'bz) || CH3_TXDATA_delay[30]; // rv 1
  assign CH3_TXDATA_in[31] = (CH3_TXDATA[31] === 1'bz) || CH3_TXDATA_delay[31]; // rv 1
  assign CH3_TXDATA_in[32] = (CH3_TXDATA[32] === 1'bz) || CH3_TXDATA_delay[32]; // rv 1
  assign CH3_TXDATA_in[33] = (CH3_TXDATA[33] === 1'bz) || CH3_TXDATA_delay[33]; // rv 1
  assign CH3_TXDATA_in[34] = (CH3_TXDATA[34] === 1'bz) || CH3_TXDATA_delay[34]; // rv 1
  assign CH3_TXDATA_in[35] = (CH3_TXDATA[35] === 1'bz) || CH3_TXDATA_delay[35]; // rv 1
  assign CH3_TXDATA_in[36] = (CH3_TXDATA[36] === 1'bz) || CH3_TXDATA_delay[36]; // rv 1
  assign CH3_TXDATA_in[37] = (CH3_TXDATA[37] === 1'bz) || CH3_TXDATA_delay[37]; // rv 1
  assign CH3_TXDATA_in[38] = (CH3_TXDATA[38] === 1'bz) || CH3_TXDATA_delay[38]; // rv 1
  assign CH3_TXDATA_in[39] = (CH3_TXDATA[39] === 1'bz) || CH3_TXDATA_delay[39]; // rv 1
  assign CH3_TXDATA_in[3] = (CH3_TXDATA[3] === 1'bz) || CH3_TXDATA_delay[3]; // rv 1
  assign CH3_TXDATA_in[40] = (CH3_TXDATA[40] === 1'bz) || CH3_TXDATA_delay[40]; // rv 1
  assign CH3_TXDATA_in[41] = (CH3_TXDATA[41] === 1'bz) || CH3_TXDATA_delay[41]; // rv 1
  assign CH3_TXDATA_in[42] = (CH3_TXDATA[42] === 1'bz) || CH3_TXDATA_delay[42]; // rv 1
  assign CH3_TXDATA_in[43] = (CH3_TXDATA[43] === 1'bz) || CH3_TXDATA_delay[43]; // rv 1
  assign CH3_TXDATA_in[44] = (CH3_TXDATA[44] === 1'bz) || CH3_TXDATA_delay[44]; // rv 1
  assign CH3_TXDATA_in[45] = (CH3_TXDATA[45] === 1'bz) || CH3_TXDATA_delay[45]; // rv 1
  assign CH3_TXDATA_in[46] = (CH3_TXDATA[46] === 1'bz) || CH3_TXDATA_delay[46]; // rv 1
  assign CH3_TXDATA_in[47] = (CH3_TXDATA[47] === 1'bz) || CH3_TXDATA_delay[47]; // rv 1
  assign CH3_TXDATA_in[48] = (CH3_TXDATA[48] === 1'bz) || CH3_TXDATA_delay[48]; // rv 1
  assign CH3_TXDATA_in[49] = (CH3_TXDATA[49] === 1'bz) || CH3_TXDATA_delay[49]; // rv 1
  assign CH3_TXDATA_in[4] = (CH3_TXDATA[4] === 1'bz) || CH3_TXDATA_delay[4]; // rv 1
  assign CH3_TXDATA_in[50] = (CH3_TXDATA[50] === 1'bz) || CH3_TXDATA_delay[50]; // rv 1
  assign CH3_TXDATA_in[51] = (CH3_TXDATA[51] === 1'bz) || CH3_TXDATA_delay[51]; // rv 1
  assign CH3_TXDATA_in[52] = (CH3_TXDATA[52] === 1'bz) || CH3_TXDATA_delay[52]; // rv 1
  assign CH3_TXDATA_in[53] = (CH3_TXDATA[53] === 1'bz) || CH3_TXDATA_delay[53]; // rv 1
  assign CH3_TXDATA_in[54] = (CH3_TXDATA[54] === 1'bz) || CH3_TXDATA_delay[54]; // rv 1
  assign CH3_TXDATA_in[55] = (CH3_TXDATA[55] === 1'bz) || CH3_TXDATA_delay[55]; // rv 1
  assign CH3_TXDATA_in[56] = (CH3_TXDATA[56] === 1'bz) || CH3_TXDATA_delay[56]; // rv 1
  assign CH3_TXDATA_in[57] = (CH3_TXDATA[57] === 1'bz) || CH3_TXDATA_delay[57]; // rv 1
  assign CH3_TXDATA_in[58] = (CH3_TXDATA[58] === 1'bz) || CH3_TXDATA_delay[58]; // rv 1
  assign CH3_TXDATA_in[59] = (CH3_TXDATA[59] === 1'bz) || CH3_TXDATA_delay[59]; // rv 1
  assign CH3_TXDATA_in[5] = (CH3_TXDATA[5] === 1'bz) || CH3_TXDATA_delay[5]; // rv 1
  assign CH3_TXDATA_in[60] = (CH3_TXDATA[60] === 1'bz) || CH3_TXDATA_delay[60]; // rv 1
  assign CH3_TXDATA_in[61] = (CH3_TXDATA[61] === 1'bz) || CH3_TXDATA_delay[61]; // rv 1
  assign CH3_TXDATA_in[62] = (CH3_TXDATA[62] === 1'bz) || CH3_TXDATA_delay[62]; // rv 1
  assign CH3_TXDATA_in[63] = (CH3_TXDATA[63] === 1'bz) || CH3_TXDATA_delay[63]; // rv 1
  assign CH3_TXDATA_in[64] = (CH3_TXDATA[64] === 1'bz) || CH3_TXDATA_delay[64]; // rv 1
  assign CH3_TXDATA_in[65] = (CH3_TXDATA[65] === 1'bz) || CH3_TXDATA_delay[65]; // rv 1
  assign CH3_TXDATA_in[66] = (CH3_TXDATA[66] === 1'bz) || CH3_TXDATA_delay[66]; // rv 1
  assign CH3_TXDATA_in[67] = (CH3_TXDATA[67] === 1'bz) || CH3_TXDATA_delay[67]; // rv 1
  assign CH3_TXDATA_in[68] = (CH3_TXDATA[68] === 1'bz) || CH3_TXDATA_delay[68]; // rv 1
  assign CH3_TXDATA_in[69] = (CH3_TXDATA[69] === 1'bz) || CH3_TXDATA_delay[69]; // rv 1
  assign CH3_TXDATA_in[6] = (CH3_TXDATA[6] === 1'bz) || CH3_TXDATA_delay[6]; // rv 1
  assign CH3_TXDATA_in[70] = (CH3_TXDATA[70] === 1'bz) || CH3_TXDATA_delay[70]; // rv 1
  assign CH3_TXDATA_in[71] = (CH3_TXDATA[71] === 1'bz) || CH3_TXDATA_delay[71]; // rv 1
  assign CH3_TXDATA_in[72] = (CH3_TXDATA[72] === 1'bz) || CH3_TXDATA_delay[72]; // rv 1
  assign CH3_TXDATA_in[73] = (CH3_TXDATA[73] === 1'bz) || CH3_TXDATA_delay[73]; // rv 1
  assign CH3_TXDATA_in[74] = (CH3_TXDATA[74] === 1'bz) || CH3_TXDATA_delay[74]; // rv 1
  assign CH3_TXDATA_in[75] = (CH3_TXDATA[75] === 1'bz) || CH3_TXDATA_delay[75]; // rv 1
  assign CH3_TXDATA_in[76] = (CH3_TXDATA[76] === 1'bz) || CH3_TXDATA_delay[76]; // rv 1
  assign CH3_TXDATA_in[77] = (CH3_TXDATA[77] === 1'bz) || CH3_TXDATA_delay[77]; // rv 1
  assign CH3_TXDATA_in[78] = (CH3_TXDATA[78] === 1'bz) || CH3_TXDATA_delay[78]; // rv 1
  assign CH3_TXDATA_in[79] = (CH3_TXDATA[79] === 1'bz) || CH3_TXDATA_delay[79]; // rv 1
  assign CH3_TXDATA_in[7] = (CH3_TXDATA[7] === 1'bz) || CH3_TXDATA_delay[7]; // rv 1
  assign CH3_TXDATA_in[80] = (CH3_TXDATA[80] === 1'bz) || CH3_TXDATA_delay[80]; // rv 1
  assign CH3_TXDATA_in[81] = (CH3_TXDATA[81] === 1'bz) || CH3_TXDATA_delay[81]; // rv 1
  assign CH3_TXDATA_in[82] = (CH3_TXDATA[82] === 1'bz) || CH3_TXDATA_delay[82]; // rv 1
  assign CH3_TXDATA_in[83] = (CH3_TXDATA[83] === 1'bz) || CH3_TXDATA_delay[83]; // rv 1
  assign CH3_TXDATA_in[84] = (CH3_TXDATA[84] === 1'bz) || CH3_TXDATA_delay[84]; // rv 1
  assign CH3_TXDATA_in[85] = (CH3_TXDATA[85] === 1'bz) || CH3_TXDATA_delay[85]; // rv 1
  assign CH3_TXDATA_in[86] = (CH3_TXDATA[86] === 1'bz) || CH3_TXDATA_delay[86]; // rv 1
  assign CH3_TXDATA_in[87] = (CH3_TXDATA[87] === 1'bz) || CH3_TXDATA_delay[87]; // rv 1
  assign CH3_TXDATA_in[88] = (CH3_TXDATA[88] === 1'bz) || CH3_TXDATA_delay[88]; // rv 1
  assign CH3_TXDATA_in[89] = (CH3_TXDATA[89] === 1'bz) || CH3_TXDATA_delay[89]; // rv 1
  assign CH3_TXDATA_in[8] = (CH3_TXDATA[8] === 1'bz) || CH3_TXDATA_delay[8]; // rv 1
  assign CH3_TXDATA_in[90] = (CH3_TXDATA[90] === 1'bz) || CH3_TXDATA_delay[90]; // rv 1
  assign CH3_TXDATA_in[91] = (CH3_TXDATA[91] === 1'bz) || CH3_TXDATA_delay[91]; // rv 1
  assign CH3_TXDATA_in[92] = (CH3_TXDATA[92] === 1'bz) || CH3_TXDATA_delay[92]; // rv 1
  assign CH3_TXDATA_in[93] = (CH3_TXDATA[93] === 1'bz) || CH3_TXDATA_delay[93]; // rv 1
  assign CH3_TXDATA_in[94] = (CH3_TXDATA[94] === 1'bz) || CH3_TXDATA_delay[94]; // rv 1
  assign CH3_TXDATA_in[95] = (CH3_TXDATA[95] === 1'bz) || CH3_TXDATA_delay[95]; // rv 1
  assign CH3_TXDATA_in[96] = (CH3_TXDATA[96] === 1'bz) || CH3_TXDATA_delay[96]; // rv 1
  assign CH3_TXDATA_in[97] = (CH3_TXDATA[97] === 1'bz) || CH3_TXDATA_delay[97]; // rv 1
  assign CH3_TXDATA_in[98] = (CH3_TXDATA[98] === 1'bz) || CH3_TXDATA_delay[98]; // rv 1
  assign CH3_TXDATA_in[99] = (CH3_TXDATA[99] === 1'bz) || CH3_TXDATA_delay[99]; // rv 1
  assign CH3_TXDATA_in[9] = (CH3_TXDATA[9] === 1'bz) || CH3_TXDATA_delay[9]; // rv 1
  assign CH3_TXDETECTRX_in = (CH3_TXDETECTRX === 1'bz) || CH3_TXDETECTRX_delay; // rv 1
  assign CH3_TXELECIDLE_in = (CH3_TXELECIDLE === 1'bz) || CH3_TXELECIDLE_delay; // rv 1
  assign CH3_TXHEADER_in[0] = (CH3_TXHEADER[0] === 1'bz) || CH3_TXHEADER_delay[0]; // rv 1
  assign CH3_TXHEADER_in[1] = (CH3_TXHEADER[1] === 1'bz) || CH3_TXHEADER_delay[1]; // rv 1
  assign CH3_TXHEADER_in[2] = (CH3_TXHEADER[2] === 1'bz) || CH3_TXHEADER_delay[2]; // rv 1
  assign CH3_TXHEADER_in[3] = (CH3_TXHEADER[3] === 1'bz) || CH3_TXHEADER_delay[3]; // rv 1
  assign CH3_TXHEADER_in[4] = (CH3_TXHEADER[4] === 1'bz) || CH3_TXHEADER_delay[4]; // rv 1
  assign CH3_TXHEADER_in[5] = (CH3_TXHEADER[5] === 1'bz) || CH3_TXHEADER_delay[5]; // rv 1
  assign CH3_TXINHIBIT_in = (CH3_TXINHIBIT === 1'bz) || CH3_TXINHIBIT_delay; // rv 1
  assign CH3_TXPD_in[0] = (CH3_TXPD[0] === 1'bz) || CH3_TXPD_delay[0]; // rv 1
  assign CH3_TXPD_in[1] = (CH3_TXPD[1] === 1'bz) || CH3_TXPD_delay[1]; // rv 1
  assign CH3_TXPIPPMEN_in = (CH3_TXPIPPMEN === 1'bz) || CH3_TXPIPPMEN_delay; // rv 1
  assign CH3_TXPIPPMSTEPSIZE_in[0] = (CH3_TXPIPPMSTEPSIZE[0] === 1'bz) || CH3_TXPIPPMSTEPSIZE_delay[0]; // rv 1
  assign CH3_TXPIPPMSTEPSIZE_in[1] = (CH3_TXPIPPMSTEPSIZE[1] === 1'bz) || CH3_TXPIPPMSTEPSIZE_delay[1]; // rv 1
  assign CH3_TXPIPPMSTEPSIZE_in[2] = (CH3_TXPIPPMSTEPSIZE[2] === 1'bz) || CH3_TXPIPPMSTEPSIZE_delay[2]; // rv 1
  assign CH3_TXPIPPMSTEPSIZE_in[3] = (CH3_TXPIPPMSTEPSIZE[3] === 1'bz) || CH3_TXPIPPMSTEPSIZE_delay[3]; // rv 1
  assign CH3_TXPIPPMSTEPSIZE_in[4] = (CH3_TXPIPPMSTEPSIZE[4] === 1'bz) || CH3_TXPIPPMSTEPSIZE_delay[4]; // rv 1
  assign CH3_TXPOLARITY_in = (CH3_TXPOLARITY === 1'bz) || CH3_TXPOLARITY_delay; // rv 1
  assign CH3_TXRATE_in[0] = (CH3_TXRATE[0] === 1'bz) || CH3_TXRATE_delay[0]; // rv 1
  assign CH3_TXRATE_in[1] = (CH3_TXRATE[1] === 1'bz) || CH3_TXRATE_delay[1]; // rv 1
  assign CH3_TXRATE_in[2] = (CH3_TXRATE[2] === 1'bz) || CH3_TXRATE_delay[2]; // rv 1
  assign CH3_TXRATE_in[3] = (CH3_TXRATE[3] === 1'bz) || CH3_TXRATE_delay[3]; // rv 1
  assign CH3_TXRATE_in[4] = (CH3_TXRATE[4] === 1'bz) || CH3_TXRATE_delay[4]; // rv 1
  assign CH3_TXRATE_in[5] = (CH3_TXRATE[5] === 1'bz) || CH3_TXRATE_delay[5]; // rv 1
  assign CH3_TXRATE_in[6] = (CH3_TXRATE[6] === 1'bz) || CH3_TXRATE_delay[6]; // rv 1
  assign CH3_TXRATE_in[7] = (CH3_TXRATE[7] === 1'bz) || CH3_TXRATE_delay[7]; // rv 1
  assign CH3_TXSEQUENCE_in[0] = (CH3_TXSEQUENCE[0] === 1'bz) || CH3_TXSEQUENCE_delay[0]; // rv 1
  assign CH3_TXSEQUENCE_in[1] = (CH3_TXSEQUENCE[1] === 1'bz) || CH3_TXSEQUENCE_delay[1]; // rv 1
  assign CH3_TXSEQUENCE_in[2] = (CH3_TXSEQUENCE[2] === 1'bz) || CH3_TXSEQUENCE_delay[2]; // rv 1
  assign CH3_TXSEQUENCE_in[3] = (CH3_TXSEQUENCE[3] === 1'bz) || CH3_TXSEQUENCE_delay[3]; // rv 1
  assign CH3_TXSEQUENCE_in[4] = (CH3_TXSEQUENCE[4] === 1'bz) || CH3_TXSEQUENCE_delay[4]; // rv 1
  assign CH3_TXSEQUENCE_in[5] = (CH3_TXSEQUENCE[5] === 1'bz) || CH3_TXSEQUENCE_delay[5]; // rv 1
  assign CH3_TXSEQUENCE_in[6] = (CH3_TXSEQUENCE[6] === 1'bz) || CH3_TXSEQUENCE_delay[6]; // rv 1
  assign CH3_TXUSRCLK_in = (CH3_TXUSRCLK === 1'bz) || CH3_TXUSRCLK_delay; // rv 1
  assign DEBUGTRACECLK_in = (DEBUGTRACECLK === 1'bz) || DEBUGTRACECLK_delay; // rv 1
  assign DEBUGTRACEREADY_in = (DEBUGTRACEREADY === 1'bz) || DEBUGTRACEREADY_delay; // rv 1
  assign M0_AXIS_TREADY_in = (M0_AXIS_TREADY === 1'bz) || M0_AXIS_TREADY_delay; // rv 1
  assign M1_AXIS_TREADY_in = (M1_AXIS_TREADY === 1'bz) || M1_AXIS_TREADY_delay; // rv 1
  assign M2_AXIS_TREADY_in = (M2_AXIS_TREADY === 1'bz) || M2_AXIS_TREADY_delay; // rv 1
  assign PCIELTSSM_in[0] = (PCIELTSSM[0] === 1'bz) || PCIELTSSM_delay[0]; // rv 1
  assign PCIELTSSM_in[1] = (PCIELTSSM[1] === 1'bz) || PCIELTSSM_delay[1]; // rv 1
  assign PCIELTSSM_in[2] = (PCIELTSSM[2] === 1'bz) || PCIELTSSM_delay[2]; // rv 1
  assign PCIELTSSM_in[3] = (PCIELTSSM[3] === 1'bz) || PCIELTSSM_delay[3]; // rv 1
  assign PCIELTSSM_in[4] = (PCIELTSSM[4] === 1'bz) || PCIELTSSM_delay[4]; // rv 1
  assign PCIELTSSM_in[5] = (PCIELTSSM[5] === 1'bz) || PCIELTSSM_delay[5]; // rv 1
  assign RXMARGINCLK_in = (RXMARGINCLK === 1'bz) || RXMARGINCLK_delay; // rv 1
  assign RXMARGINREQCMD_in[0] = (RXMARGINREQCMD[0] === 1'bz) || RXMARGINREQCMD_delay[0]; // rv 1
  assign RXMARGINREQCMD_in[1] = (RXMARGINREQCMD[1] === 1'bz) || RXMARGINREQCMD_delay[1]; // rv 1
  assign RXMARGINREQCMD_in[2] = (RXMARGINREQCMD[2] === 1'bz) || RXMARGINREQCMD_delay[2]; // rv 1
  assign RXMARGINREQCMD_in[3] = (RXMARGINREQCMD[3] === 1'bz) || RXMARGINREQCMD_delay[3]; // rv 1
  assign RXMARGINREQLANENUM_in[0] = (RXMARGINREQLANENUM[0] === 1'bz) || RXMARGINREQLANENUM_delay[0]; // rv 1
  assign RXMARGINREQLANENUM_in[1] = (RXMARGINREQLANENUM[1] === 1'bz) || RXMARGINREQLANENUM_delay[1]; // rv 1
  assign RXMARGINREQPAYLD_in[0] = (RXMARGINREQPAYLD[0] === 1'bz) || RXMARGINREQPAYLD_delay[0]; // rv 1
  assign RXMARGINREQPAYLD_in[1] = (RXMARGINREQPAYLD[1] === 1'bz) || RXMARGINREQPAYLD_delay[1]; // rv 1
  assign RXMARGINREQPAYLD_in[2] = (RXMARGINREQPAYLD[2] === 1'bz) || RXMARGINREQPAYLD_delay[2]; // rv 1
  assign RXMARGINREQPAYLD_in[3] = (RXMARGINREQPAYLD[3] === 1'bz) || RXMARGINREQPAYLD_delay[3]; // rv 1
  assign RXMARGINREQPAYLD_in[4] = (RXMARGINREQPAYLD[4] === 1'bz) || RXMARGINREQPAYLD_delay[4]; // rv 1
  assign RXMARGINREQPAYLD_in[5] = (RXMARGINREQPAYLD[5] === 1'bz) || RXMARGINREQPAYLD_delay[5]; // rv 1
  assign RXMARGINREQPAYLD_in[6] = (RXMARGINREQPAYLD[6] === 1'bz) || RXMARGINREQPAYLD_delay[6]; // rv 1
  assign RXMARGINREQPAYLD_in[7] = (RXMARGINREQPAYLD[7] === 1'bz) || RXMARGINREQPAYLD_delay[7]; // rv 1
  assign RXMARGINREQREQ_in = (RXMARGINREQREQ === 1'bz) || RXMARGINREQREQ_delay; // rv 1
  assign RXMARGINRESACK_in = (RXMARGINRESACK === 1'bz) || RXMARGINRESACK_delay; // rv 1
  assign S0_AXIS_TDATA_in[0] = (S0_AXIS_TDATA[0] === 1'bz) || S0_AXIS_TDATA_delay[0]; // rv 1
  assign S0_AXIS_TDATA_in[10] = (S0_AXIS_TDATA[10] === 1'bz) || S0_AXIS_TDATA_delay[10]; // rv 1
  assign S0_AXIS_TDATA_in[11] = (S0_AXIS_TDATA[11] === 1'bz) || S0_AXIS_TDATA_delay[11]; // rv 1
  assign S0_AXIS_TDATA_in[12] = (S0_AXIS_TDATA[12] === 1'bz) || S0_AXIS_TDATA_delay[12]; // rv 1
  assign S0_AXIS_TDATA_in[13] = (S0_AXIS_TDATA[13] === 1'bz) || S0_AXIS_TDATA_delay[13]; // rv 1
  assign S0_AXIS_TDATA_in[14] = (S0_AXIS_TDATA[14] === 1'bz) || S0_AXIS_TDATA_delay[14]; // rv 1
  assign S0_AXIS_TDATA_in[15] = (S0_AXIS_TDATA[15] === 1'bz) || S0_AXIS_TDATA_delay[15]; // rv 1
  assign S0_AXIS_TDATA_in[16] = (S0_AXIS_TDATA[16] === 1'bz) || S0_AXIS_TDATA_delay[16]; // rv 1
  assign S0_AXIS_TDATA_in[17] = (S0_AXIS_TDATA[17] === 1'bz) || S0_AXIS_TDATA_delay[17]; // rv 1
  assign S0_AXIS_TDATA_in[18] = (S0_AXIS_TDATA[18] === 1'bz) || S0_AXIS_TDATA_delay[18]; // rv 1
  assign S0_AXIS_TDATA_in[19] = (S0_AXIS_TDATA[19] === 1'bz) || S0_AXIS_TDATA_delay[19]; // rv 1
  assign S0_AXIS_TDATA_in[1] = (S0_AXIS_TDATA[1] === 1'bz) || S0_AXIS_TDATA_delay[1]; // rv 1
  assign S0_AXIS_TDATA_in[20] = (S0_AXIS_TDATA[20] === 1'bz) || S0_AXIS_TDATA_delay[20]; // rv 1
  assign S0_AXIS_TDATA_in[21] = (S0_AXIS_TDATA[21] === 1'bz) || S0_AXIS_TDATA_delay[21]; // rv 1
  assign S0_AXIS_TDATA_in[22] = (S0_AXIS_TDATA[22] === 1'bz) || S0_AXIS_TDATA_delay[22]; // rv 1
  assign S0_AXIS_TDATA_in[23] = (S0_AXIS_TDATA[23] === 1'bz) || S0_AXIS_TDATA_delay[23]; // rv 1
  assign S0_AXIS_TDATA_in[24] = (S0_AXIS_TDATA[24] === 1'bz) || S0_AXIS_TDATA_delay[24]; // rv 1
  assign S0_AXIS_TDATA_in[25] = (S0_AXIS_TDATA[25] === 1'bz) || S0_AXIS_TDATA_delay[25]; // rv 1
  assign S0_AXIS_TDATA_in[26] = (S0_AXIS_TDATA[26] === 1'bz) || S0_AXIS_TDATA_delay[26]; // rv 1
  assign S0_AXIS_TDATA_in[27] = (S0_AXIS_TDATA[27] === 1'bz) || S0_AXIS_TDATA_delay[27]; // rv 1
  assign S0_AXIS_TDATA_in[28] = (S0_AXIS_TDATA[28] === 1'bz) || S0_AXIS_TDATA_delay[28]; // rv 1
  assign S0_AXIS_TDATA_in[29] = (S0_AXIS_TDATA[29] === 1'bz) || S0_AXIS_TDATA_delay[29]; // rv 1
  assign S0_AXIS_TDATA_in[2] = (S0_AXIS_TDATA[2] === 1'bz) || S0_AXIS_TDATA_delay[2]; // rv 1
  assign S0_AXIS_TDATA_in[30] = (S0_AXIS_TDATA[30] === 1'bz) || S0_AXIS_TDATA_delay[30]; // rv 1
  assign S0_AXIS_TDATA_in[31] = (S0_AXIS_TDATA[31] === 1'bz) || S0_AXIS_TDATA_delay[31]; // rv 1
  assign S0_AXIS_TDATA_in[3] = (S0_AXIS_TDATA[3] === 1'bz) || S0_AXIS_TDATA_delay[3]; // rv 1
  assign S0_AXIS_TDATA_in[4] = (S0_AXIS_TDATA[4] === 1'bz) || S0_AXIS_TDATA_delay[4]; // rv 1
  assign S0_AXIS_TDATA_in[5] = (S0_AXIS_TDATA[5] === 1'bz) || S0_AXIS_TDATA_delay[5]; // rv 1
  assign S0_AXIS_TDATA_in[6] = (S0_AXIS_TDATA[6] === 1'bz) || S0_AXIS_TDATA_delay[6]; // rv 1
  assign S0_AXIS_TDATA_in[7] = (S0_AXIS_TDATA[7] === 1'bz) || S0_AXIS_TDATA_delay[7]; // rv 1
  assign S0_AXIS_TDATA_in[8] = (S0_AXIS_TDATA[8] === 1'bz) || S0_AXIS_TDATA_delay[8]; // rv 1
  assign S0_AXIS_TDATA_in[9] = (S0_AXIS_TDATA[9] === 1'bz) || S0_AXIS_TDATA_delay[9]; // rv 1
  assign S0_AXIS_TLAST_in = (S0_AXIS_TLAST === 1'bz) || S0_AXIS_TLAST_delay; // rv 1
  assign S0_AXIS_TVALID_in = (S0_AXIS_TVALID === 1'bz) || S0_AXIS_TVALID_delay; // rv 1
  assign S1_AXIS_TDATA_in[0] = (S1_AXIS_TDATA[0] === 1'bz) || S1_AXIS_TDATA_delay[0]; // rv 1
  assign S1_AXIS_TDATA_in[10] = (S1_AXIS_TDATA[10] === 1'bz) || S1_AXIS_TDATA_delay[10]; // rv 1
  assign S1_AXIS_TDATA_in[11] = (S1_AXIS_TDATA[11] === 1'bz) || S1_AXIS_TDATA_delay[11]; // rv 1
  assign S1_AXIS_TDATA_in[12] = (S1_AXIS_TDATA[12] === 1'bz) || S1_AXIS_TDATA_delay[12]; // rv 1
  assign S1_AXIS_TDATA_in[13] = (S1_AXIS_TDATA[13] === 1'bz) || S1_AXIS_TDATA_delay[13]; // rv 1
  assign S1_AXIS_TDATA_in[14] = (S1_AXIS_TDATA[14] === 1'bz) || S1_AXIS_TDATA_delay[14]; // rv 1
  assign S1_AXIS_TDATA_in[15] = (S1_AXIS_TDATA[15] === 1'bz) || S1_AXIS_TDATA_delay[15]; // rv 1
  assign S1_AXIS_TDATA_in[16] = (S1_AXIS_TDATA[16] === 1'bz) || S1_AXIS_TDATA_delay[16]; // rv 1
  assign S1_AXIS_TDATA_in[17] = (S1_AXIS_TDATA[17] === 1'bz) || S1_AXIS_TDATA_delay[17]; // rv 1
  assign S1_AXIS_TDATA_in[18] = (S1_AXIS_TDATA[18] === 1'bz) || S1_AXIS_TDATA_delay[18]; // rv 1
  assign S1_AXIS_TDATA_in[19] = (S1_AXIS_TDATA[19] === 1'bz) || S1_AXIS_TDATA_delay[19]; // rv 1
  assign S1_AXIS_TDATA_in[1] = (S1_AXIS_TDATA[1] === 1'bz) || S1_AXIS_TDATA_delay[1]; // rv 1
  assign S1_AXIS_TDATA_in[20] = (S1_AXIS_TDATA[20] === 1'bz) || S1_AXIS_TDATA_delay[20]; // rv 1
  assign S1_AXIS_TDATA_in[21] = (S1_AXIS_TDATA[21] === 1'bz) || S1_AXIS_TDATA_delay[21]; // rv 1
  assign S1_AXIS_TDATA_in[22] = (S1_AXIS_TDATA[22] === 1'bz) || S1_AXIS_TDATA_delay[22]; // rv 1
  assign S1_AXIS_TDATA_in[23] = (S1_AXIS_TDATA[23] === 1'bz) || S1_AXIS_TDATA_delay[23]; // rv 1
  assign S1_AXIS_TDATA_in[24] = (S1_AXIS_TDATA[24] === 1'bz) || S1_AXIS_TDATA_delay[24]; // rv 1
  assign S1_AXIS_TDATA_in[25] = (S1_AXIS_TDATA[25] === 1'bz) || S1_AXIS_TDATA_delay[25]; // rv 1
  assign S1_AXIS_TDATA_in[26] = (S1_AXIS_TDATA[26] === 1'bz) || S1_AXIS_TDATA_delay[26]; // rv 1
  assign S1_AXIS_TDATA_in[27] = (S1_AXIS_TDATA[27] === 1'bz) || S1_AXIS_TDATA_delay[27]; // rv 1
  assign S1_AXIS_TDATA_in[28] = (S1_AXIS_TDATA[28] === 1'bz) || S1_AXIS_TDATA_delay[28]; // rv 1
  assign S1_AXIS_TDATA_in[29] = (S1_AXIS_TDATA[29] === 1'bz) || S1_AXIS_TDATA_delay[29]; // rv 1
  assign S1_AXIS_TDATA_in[2] = (S1_AXIS_TDATA[2] === 1'bz) || S1_AXIS_TDATA_delay[2]; // rv 1
  assign S1_AXIS_TDATA_in[30] = (S1_AXIS_TDATA[30] === 1'bz) || S1_AXIS_TDATA_delay[30]; // rv 1
  assign S1_AXIS_TDATA_in[31] = (S1_AXIS_TDATA[31] === 1'bz) || S1_AXIS_TDATA_delay[31]; // rv 1
  assign S1_AXIS_TDATA_in[3] = (S1_AXIS_TDATA[3] === 1'bz) || S1_AXIS_TDATA_delay[3]; // rv 1
  assign S1_AXIS_TDATA_in[4] = (S1_AXIS_TDATA[4] === 1'bz) || S1_AXIS_TDATA_delay[4]; // rv 1
  assign S1_AXIS_TDATA_in[5] = (S1_AXIS_TDATA[5] === 1'bz) || S1_AXIS_TDATA_delay[5]; // rv 1
  assign S1_AXIS_TDATA_in[6] = (S1_AXIS_TDATA[6] === 1'bz) || S1_AXIS_TDATA_delay[6]; // rv 1
  assign S1_AXIS_TDATA_in[7] = (S1_AXIS_TDATA[7] === 1'bz) || S1_AXIS_TDATA_delay[7]; // rv 1
  assign S1_AXIS_TDATA_in[8] = (S1_AXIS_TDATA[8] === 1'bz) || S1_AXIS_TDATA_delay[8]; // rv 1
  assign S1_AXIS_TDATA_in[9] = (S1_AXIS_TDATA[9] === 1'bz) || S1_AXIS_TDATA_delay[9]; // rv 1
  assign S1_AXIS_TLAST_in = (S1_AXIS_TLAST === 1'bz) || S1_AXIS_TLAST_delay; // rv 1
  assign S1_AXIS_TVALID_in = (S1_AXIS_TVALID === 1'bz) || S1_AXIS_TVALID_delay; // rv 1
  assign S2_AXIS_TDATA_in[0] = (S2_AXIS_TDATA[0] === 1'bz) || S2_AXIS_TDATA_delay[0]; // rv 1
  assign S2_AXIS_TDATA_in[10] = (S2_AXIS_TDATA[10] === 1'bz) || S2_AXIS_TDATA_delay[10]; // rv 1
  assign S2_AXIS_TDATA_in[11] = (S2_AXIS_TDATA[11] === 1'bz) || S2_AXIS_TDATA_delay[11]; // rv 1
  assign S2_AXIS_TDATA_in[12] = (S2_AXIS_TDATA[12] === 1'bz) || S2_AXIS_TDATA_delay[12]; // rv 1
  assign S2_AXIS_TDATA_in[13] = (S2_AXIS_TDATA[13] === 1'bz) || S2_AXIS_TDATA_delay[13]; // rv 1
  assign S2_AXIS_TDATA_in[14] = (S2_AXIS_TDATA[14] === 1'bz) || S2_AXIS_TDATA_delay[14]; // rv 1
  assign S2_AXIS_TDATA_in[15] = (S2_AXIS_TDATA[15] === 1'bz) || S2_AXIS_TDATA_delay[15]; // rv 1
  assign S2_AXIS_TDATA_in[16] = (S2_AXIS_TDATA[16] === 1'bz) || S2_AXIS_TDATA_delay[16]; // rv 1
  assign S2_AXIS_TDATA_in[17] = (S2_AXIS_TDATA[17] === 1'bz) || S2_AXIS_TDATA_delay[17]; // rv 1
  assign S2_AXIS_TDATA_in[18] = (S2_AXIS_TDATA[18] === 1'bz) || S2_AXIS_TDATA_delay[18]; // rv 1
  assign S2_AXIS_TDATA_in[19] = (S2_AXIS_TDATA[19] === 1'bz) || S2_AXIS_TDATA_delay[19]; // rv 1
  assign S2_AXIS_TDATA_in[1] = (S2_AXIS_TDATA[1] === 1'bz) || S2_AXIS_TDATA_delay[1]; // rv 1
  assign S2_AXIS_TDATA_in[20] = (S2_AXIS_TDATA[20] === 1'bz) || S2_AXIS_TDATA_delay[20]; // rv 1
  assign S2_AXIS_TDATA_in[21] = (S2_AXIS_TDATA[21] === 1'bz) || S2_AXIS_TDATA_delay[21]; // rv 1
  assign S2_AXIS_TDATA_in[22] = (S2_AXIS_TDATA[22] === 1'bz) || S2_AXIS_TDATA_delay[22]; // rv 1
  assign S2_AXIS_TDATA_in[23] = (S2_AXIS_TDATA[23] === 1'bz) || S2_AXIS_TDATA_delay[23]; // rv 1
  assign S2_AXIS_TDATA_in[24] = (S2_AXIS_TDATA[24] === 1'bz) || S2_AXIS_TDATA_delay[24]; // rv 1
  assign S2_AXIS_TDATA_in[25] = (S2_AXIS_TDATA[25] === 1'bz) || S2_AXIS_TDATA_delay[25]; // rv 1
  assign S2_AXIS_TDATA_in[26] = (S2_AXIS_TDATA[26] === 1'bz) || S2_AXIS_TDATA_delay[26]; // rv 1
  assign S2_AXIS_TDATA_in[27] = (S2_AXIS_TDATA[27] === 1'bz) || S2_AXIS_TDATA_delay[27]; // rv 1
  assign S2_AXIS_TDATA_in[28] = (S2_AXIS_TDATA[28] === 1'bz) || S2_AXIS_TDATA_delay[28]; // rv 1
  assign S2_AXIS_TDATA_in[29] = (S2_AXIS_TDATA[29] === 1'bz) || S2_AXIS_TDATA_delay[29]; // rv 1
  assign S2_AXIS_TDATA_in[2] = (S2_AXIS_TDATA[2] === 1'bz) || S2_AXIS_TDATA_delay[2]; // rv 1
  assign S2_AXIS_TDATA_in[30] = (S2_AXIS_TDATA[30] === 1'bz) || S2_AXIS_TDATA_delay[30]; // rv 1
  assign S2_AXIS_TDATA_in[31] = (S2_AXIS_TDATA[31] === 1'bz) || S2_AXIS_TDATA_delay[31]; // rv 1
  assign S2_AXIS_TDATA_in[3] = (S2_AXIS_TDATA[3] === 1'bz) || S2_AXIS_TDATA_delay[3]; // rv 1
  assign S2_AXIS_TDATA_in[4] = (S2_AXIS_TDATA[4] === 1'bz) || S2_AXIS_TDATA_delay[4]; // rv 1
  assign S2_AXIS_TDATA_in[5] = (S2_AXIS_TDATA[5] === 1'bz) || S2_AXIS_TDATA_delay[5]; // rv 1
  assign S2_AXIS_TDATA_in[6] = (S2_AXIS_TDATA[6] === 1'bz) || S2_AXIS_TDATA_delay[6]; // rv 1
  assign S2_AXIS_TDATA_in[7] = (S2_AXIS_TDATA[7] === 1'bz) || S2_AXIS_TDATA_delay[7]; // rv 1
  assign S2_AXIS_TDATA_in[8] = (S2_AXIS_TDATA[8] === 1'bz) || S2_AXIS_TDATA_delay[8]; // rv 1
  assign S2_AXIS_TDATA_in[9] = (S2_AXIS_TDATA[9] === 1'bz) || S2_AXIS_TDATA_delay[9]; // rv 1
  assign S2_AXIS_TLAST_in = (S2_AXIS_TLAST === 1'bz) || S2_AXIS_TLAST_delay; // rv 1
  assign S2_AXIS_TVALID_in = (S2_AXIS_TVALID === 1'bz) || S2_AXIS_TVALID_delay; // rv 1
`else
  assign APB3CLK_in = (APB3CLK === 1'bz) || APB3CLK; // rv 1
  assign APB3PADDR_in[0] = (APB3PADDR[0] === 1'bz) || APB3PADDR[0]; // rv 1
  assign APB3PADDR_in[10] = (APB3PADDR[10] === 1'bz) || APB3PADDR[10]; // rv 1
  assign APB3PADDR_in[11] = (APB3PADDR[11] === 1'bz) || APB3PADDR[11]; // rv 1
  assign APB3PADDR_in[12] = (APB3PADDR[12] === 1'bz) || APB3PADDR[12]; // rv 1
  assign APB3PADDR_in[13] = (APB3PADDR[13] === 1'bz) || APB3PADDR[13]; // rv 1
  assign APB3PADDR_in[14] = (APB3PADDR[14] === 1'bz) || APB3PADDR[14]; // rv 1
  assign APB3PADDR_in[15] = (APB3PADDR[15] === 1'bz) || APB3PADDR[15]; // rv 1
  assign APB3PADDR_in[1] = (APB3PADDR[1] === 1'bz) || APB3PADDR[1]; // rv 1
  assign APB3PADDR_in[2] = (APB3PADDR[2] === 1'bz) || APB3PADDR[2]; // rv 1
  assign APB3PADDR_in[3] = (APB3PADDR[3] === 1'bz) || APB3PADDR[3]; // rv 1
  assign APB3PADDR_in[4] = (APB3PADDR[4] === 1'bz) || APB3PADDR[4]; // rv 1
  assign APB3PADDR_in[5] = (APB3PADDR[5] === 1'bz) || APB3PADDR[5]; // rv 1
  assign APB3PADDR_in[6] = (APB3PADDR[6] === 1'bz) || APB3PADDR[6]; // rv 1
  assign APB3PADDR_in[7] = (APB3PADDR[7] === 1'bz) || APB3PADDR[7]; // rv 1
  assign APB3PADDR_in[8] = (APB3PADDR[8] === 1'bz) || APB3PADDR[8]; // rv 1
  assign APB3PADDR_in[9] = (APB3PADDR[9] === 1'bz) || APB3PADDR[9]; // rv 1
  assign APB3PENABLE_in = (APB3PENABLE === 1'bz) || APB3PENABLE; // rv 1
  assign APB3PSEL_in = (APB3PSEL === 1'bz) || APB3PSEL; // rv 1
  assign APB3PWDATA_in[0] = (APB3PWDATA[0] === 1'bz) || APB3PWDATA[0]; // rv 1
  assign APB3PWDATA_in[10] = (APB3PWDATA[10] === 1'bz) || APB3PWDATA[10]; // rv 1
  assign APB3PWDATA_in[11] = (APB3PWDATA[11] === 1'bz) || APB3PWDATA[11]; // rv 1
  assign APB3PWDATA_in[12] = (APB3PWDATA[12] === 1'bz) || APB3PWDATA[12]; // rv 1
  assign APB3PWDATA_in[13] = (APB3PWDATA[13] === 1'bz) || APB3PWDATA[13]; // rv 1
  assign APB3PWDATA_in[14] = (APB3PWDATA[14] === 1'bz) || APB3PWDATA[14]; // rv 1
  assign APB3PWDATA_in[15] = (APB3PWDATA[15] === 1'bz) || APB3PWDATA[15]; // rv 1
  assign APB3PWDATA_in[16] = (APB3PWDATA[16] === 1'bz) || APB3PWDATA[16]; // rv 1
  assign APB3PWDATA_in[17] = (APB3PWDATA[17] === 1'bz) || APB3PWDATA[17]; // rv 1
  assign APB3PWDATA_in[18] = (APB3PWDATA[18] === 1'bz) || APB3PWDATA[18]; // rv 1
  assign APB3PWDATA_in[19] = (APB3PWDATA[19] === 1'bz) || APB3PWDATA[19]; // rv 1
  assign APB3PWDATA_in[1] = (APB3PWDATA[1] === 1'bz) || APB3PWDATA[1]; // rv 1
  assign APB3PWDATA_in[20] = (APB3PWDATA[20] === 1'bz) || APB3PWDATA[20]; // rv 1
  assign APB3PWDATA_in[21] = (APB3PWDATA[21] === 1'bz) || APB3PWDATA[21]; // rv 1
  assign APB3PWDATA_in[22] = (APB3PWDATA[22] === 1'bz) || APB3PWDATA[22]; // rv 1
  assign APB3PWDATA_in[23] = (APB3PWDATA[23] === 1'bz) || APB3PWDATA[23]; // rv 1
  assign APB3PWDATA_in[24] = (APB3PWDATA[24] === 1'bz) || APB3PWDATA[24]; // rv 1
  assign APB3PWDATA_in[25] = (APB3PWDATA[25] === 1'bz) || APB3PWDATA[25]; // rv 1
  assign APB3PWDATA_in[26] = (APB3PWDATA[26] === 1'bz) || APB3PWDATA[26]; // rv 1
  assign APB3PWDATA_in[27] = (APB3PWDATA[27] === 1'bz) || APB3PWDATA[27]; // rv 1
  assign APB3PWDATA_in[28] = (APB3PWDATA[28] === 1'bz) || APB3PWDATA[28]; // rv 1
  assign APB3PWDATA_in[29] = (APB3PWDATA[29] === 1'bz) || APB3PWDATA[29]; // rv 1
  assign APB3PWDATA_in[2] = (APB3PWDATA[2] === 1'bz) || APB3PWDATA[2]; // rv 1
  assign APB3PWDATA_in[30] = (APB3PWDATA[30] === 1'bz) || APB3PWDATA[30]; // rv 1
  assign APB3PWDATA_in[31] = (APB3PWDATA[31] === 1'bz) || APB3PWDATA[31]; // rv 1
  assign APB3PWDATA_in[3] = (APB3PWDATA[3] === 1'bz) || APB3PWDATA[3]; // rv 1
  assign APB3PWDATA_in[4] = (APB3PWDATA[4] === 1'bz) || APB3PWDATA[4]; // rv 1
  assign APB3PWDATA_in[5] = (APB3PWDATA[5] === 1'bz) || APB3PWDATA[5]; // rv 1
  assign APB3PWDATA_in[6] = (APB3PWDATA[6] === 1'bz) || APB3PWDATA[6]; // rv 1
  assign APB3PWDATA_in[7] = (APB3PWDATA[7] === 1'bz) || APB3PWDATA[7]; // rv 1
  assign APB3PWDATA_in[8] = (APB3PWDATA[8] === 1'bz) || APB3PWDATA[8]; // rv 1
  assign APB3PWDATA_in[9] = (APB3PWDATA[9] === 1'bz) || APB3PWDATA[9]; // rv 1
  assign APB3PWRITE_in = (APB3PWRITE === 1'bz) || APB3PWRITE; // rv 1
  assign AXISCLK_in = (AXISCLK === 1'bz) || AXISCLK; // rv 1
  assign CH0_EYESCANTRIGGER_in = (CH0_EYESCANTRIGGER === 1'bz) || CH0_EYESCANTRIGGER; // rv 1
  assign CH0_PHYESMADAPTSAVE_in = (CH0_PHYESMADAPTSAVE === 1'bz) || CH0_PHYESMADAPTSAVE; // rv 1
  assign CH0_RXCHBONDI_in[0] = (CH0_RXCHBONDI[0] === 1'bz) || CH0_RXCHBONDI[0]; // rv 1
  assign CH0_RXCHBONDI_in[1] = (CH0_RXCHBONDI[1] === 1'bz) || CH0_RXCHBONDI[1]; // rv 1
  assign CH0_RXCHBONDI_in[2] = (CH0_RXCHBONDI[2] === 1'bz) || CH0_RXCHBONDI[2]; // rv 1
  assign CH0_RXCHBONDI_in[3] = (CH0_RXCHBONDI[3] === 1'bz) || CH0_RXCHBONDI[3]; // rv 1
  assign CH0_RXCHBONDI_in[4] = (CH0_RXCHBONDI[4] === 1'bz) || CH0_RXCHBONDI[4]; // rv 1
  assign CH0_RXDLYALIGNREQ_in = (CH0_RXDLYALIGNREQ === 1'bz) || CH0_RXDLYALIGNREQ; // rv 1
  assign CH0_RXEQTRAINING_in = (CH0_RXEQTRAINING === 1'bz) || CH0_RXEQTRAINING; // rv 1
  assign CH0_RXGEARBOXSLIP_in = (CH0_RXGEARBOXSLIP === 1'bz) || CH0_RXGEARBOXSLIP; // rv 1
  assign CH0_RXMLDCHAINDONE_in = (CH0_RXMLDCHAINDONE === 1'bz) || CH0_RXMLDCHAINDONE; // rv 1
  assign CH0_RXMLDCHAINREQ_in = (CH0_RXMLDCHAINREQ === 1'bz) || CH0_RXMLDCHAINREQ; // rv 1
  assign CH0_RXPD_in[0] = (CH0_RXPD[0] === 1'bz) || CH0_RXPD[0]; // rv 1
  assign CH0_RXPD_in[1] = (CH0_RXPD[1] === 1'bz) || CH0_RXPD[1]; // rv 1
  assign CH0_RXPHALIGNREQ_in = (CH0_RXPHALIGNREQ === 1'bz) || CH0_RXPHALIGNREQ; // rv 1
  assign CH0_RXPHSETINITREQ_in = (CH0_RXPHSETINITREQ === 1'bz) || CH0_RXPHSETINITREQ; // rv 1
  assign CH0_RXPHSHIFT180_in = (CH0_RXPHSHIFT180 === 1'bz) || CH0_RXPHSHIFT180; // rv 1
  assign CH0_RXPOLARITY_in = (CH0_RXPOLARITY === 1'bz) || CH0_RXPOLARITY; // rv 1
  assign CH0_RXRATE_in[0] = (CH0_RXRATE[0] === 1'bz) || CH0_RXRATE[0]; // rv 1
  assign CH0_RXRATE_in[1] = (CH0_RXRATE[1] === 1'bz) || CH0_RXRATE[1]; // rv 1
  assign CH0_RXRATE_in[2] = (CH0_RXRATE[2] === 1'bz) || CH0_RXRATE[2]; // rv 1
  assign CH0_RXRATE_in[3] = (CH0_RXRATE[3] === 1'bz) || CH0_RXRATE[3]; // rv 1
  assign CH0_RXRATE_in[4] = (CH0_RXRATE[4] === 1'bz) || CH0_RXRATE[4]; // rv 1
  assign CH0_RXRATE_in[5] = (CH0_RXRATE[5] === 1'bz) || CH0_RXRATE[5]; // rv 1
  assign CH0_RXRATE_in[6] = (CH0_RXRATE[6] === 1'bz) || CH0_RXRATE[6]; // rv 1
  assign CH0_RXRATE_in[7] = (CH0_RXRATE[7] === 1'bz) || CH0_RXRATE[7]; // rv 1
  assign CH0_RXSLIDE_in = (CH0_RXSLIDE === 1'bz) || CH0_RXSLIDE; // rv 1
  assign CH0_RXUSRCLK_in = (CH0_RXUSRCLK === 1'bz) || CH0_RXUSRCLK; // rv 1
  assign CH0_TXCOMINIT_in = (CH0_TXCOMINIT === 1'bz) || CH0_TXCOMINIT; // rv 1
  assign CH0_TXCOMSAS_in = (CH0_TXCOMSAS === 1'bz) || CH0_TXCOMSAS; // rv 1
  assign CH0_TXCOMWAKE_in = (CH0_TXCOMWAKE === 1'bz) || CH0_TXCOMWAKE; // rv 1
  assign CH0_TXCTRL0_in[0] = (CH0_TXCTRL0[0] === 1'bz) || CH0_TXCTRL0[0]; // rv 1
  assign CH0_TXCTRL0_in[10] = (CH0_TXCTRL0[10] === 1'bz) || CH0_TXCTRL0[10]; // rv 1
  assign CH0_TXCTRL0_in[11] = (CH0_TXCTRL0[11] === 1'bz) || CH0_TXCTRL0[11]; // rv 1
  assign CH0_TXCTRL0_in[12] = (CH0_TXCTRL0[12] === 1'bz) || CH0_TXCTRL0[12]; // rv 1
  assign CH0_TXCTRL0_in[13] = (CH0_TXCTRL0[13] === 1'bz) || CH0_TXCTRL0[13]; // rv 1
  assign CH0_TXCTRL0_in[14] = (CH0_TXCTRL0[14] === 1'bz) || CH0_TXCTRL0[14]; // rv 1
  assign CH0_TXCTRL0_in[15] = (CH0_TXCTRL0[15] === 1'bz) || CH0_TXCTRL0[15]; // rv 1
  assign CH0_TXCTRL0_in[1] = (CH0_TXCTRL0[1] === 1'bz) || CH0_TXCTRL0[1]; // rv 1
  assign CH0_TXCTRL0_in[2] = (CH0_TXCTRL0[2] === 1'bz) || CH0_TXCTRL0[2]; // rv 1
  assign CH0_TXCTRL0_in[3] = (CH0_TXCTRL0[3] === 1'bz) || CH0_TXCTRL0[3]; // rv 1
  assign CH0_TXCTRL0_in[4] = (CH0_TXCTRL0[4] === 1'bz) || CH0_TXCTRL0[4]; // rv 1
  assign CH0_TXCTRL0_in[5] = (CH0_TXCTRL0[5] === 1'bz) || CH0_TXCTRL0[5]; // rv 1
  assign CH0_TXCTRL0_in[6] = (CH0_TXCTRL0[6] === 1'bz) || CH0_TXCTRL0[6]; // rv 1
  assign CH0_TXCTRL0_in[7] = (CH0_TXCTRL0[7] === 1'bz) || CH0_TXCTRL0[7]; // rv 1
  assign CH0_TXCTRL0_in[8] = (CH0_TXCTRL0[8] === 1'bz) || CH0_TXCTRL0[8]; // rv 1
  assign CH0_TXCTRL0_in[9] = (CH0_TXCTRL0[9] === 1'bz) || CH0_TXCTRL0[9]; // rv 1
  assign CH0_TXCTRL1_in[0] = (CH0_TXCTRL1[0] === 1'bz) || CH0_TXCTRL1[0]; // rv 1
  assign CH0_TXCTRL1_in[10] = (CH0_TXCTRL1[10] === 1'bz) || CH0_TXCTRL1[10]; // rv 1
  assign CH0_TXCTRL1_in[11] = (CH0_TXCTRL1[11] === 1'bz) || CH0_TXCTRL1[11]; // rv 1
  assign CH0_TXCTRL1_in[12] = (CH0_TXCTRL1[12] === 1'bz) || CH0_TXCTRL1[12]; // rv 1
  assign CH0_TXCTRL1_in[13] = (CH0_TXCTRL1[13] === 1'bz) || CH0_TXCTRL1[13]; // rv 1
  assign CH0_TXCTRL1_in[14] = (CH0_TXCTRL1[14] === 1'bz) || CH0_TXCTRL1[14]; // rv 1
  assign CH0_TXCTRL1_in[15] = (CH0_TXCTRL1[15] === 1'bz) || CH0_TXCTRL1[15]; // rv 1
  assign CH0_TXCTRL1_in[1] = (CH0_TXCTRL1[1] === 1'bz) || CH0_TXCTRL1[1]; // rv 1
  assign CH0_TXCTRL1_in[2] = (CH0_TXCTRL1[2] === 1'bz) || CH0_TXCTRL1[2]; // rv 1
  assign CH0_TXCTRL1_in[3] = (CH0_TXCTRL1[3] === 1'bz) || CH0_TXCTRL1[3]; // rv 1
  assign CH0_TXCTRL1_in[4] = (CH0_TXCTRL1[4] === 1'bz) || CH0_TXCTRL1[4]; // rv 1
  assign CH0_TXCTRL1_in[5] = (CH0_TXCTRL1[5] === 1'bz) || CH0_TXCTRL1[5]; // rv 1
  assign CH0_TXCTRL1_in[6] = (CH0_TXCTRL1[6] === 1'bz) || CH0_TXCTRL1[6]; // rv 1
  assign CH0_TXCTRL1_in[7] = (CH0_TXCTRL1[7] === 1'bz) || CH0_TXCTRL1[7]; // rv 1
  assign CH0_TXCTRL1_in[8] = (CH0_TXCTRL1[8] === 1'bz) || CH0_TXCTRL1[8]; // rv 1
  assign CH0_TXCTRL1_in[9] = (CH0_TXCTRL1[9] === 1'bz) || CH0_TXCTRL1[9]; // rv 1
  assign CH0_TXCTRL2_in[0] = (CH0_TXCTRL2[0] === 1'bz) || CH0_TXCTRL2[0]; // rv 1
  assign CH0_TXCTRL2_in[1] = (CH0_TXCTRL2[1] === 1'bz) || CH0_TXCTRL2[1]; // rv 1
  assign CH0_TXCTRL2_in[2] = (CH0_TXCTRL2[2] === 1'bz) || CH0_TXCTRL2[2]; // rv 1
  assign CH0_TXCTRL2_in[3] = (CH0_TXCTRL2[3] === 1'bz) || CH0_TXCTRL2[3]; // rv 1
  assign CH0_TXCTRL2_in[4] = (CH0_TXCTRL2[4] === 1'bz) || CH0_TXCTRL2[4]; // rv 1
  assign CH0_TXCTRL2_in[5] = (CH0_TXCTRL2[5] === 1'bz) || CH0_TXCTRL2[5]; // rv 1
  assign CH0_TXCTRL2_in[6] = (CH0_TXCTRL2[6] === 1'bz) || CH0_TXCTRL2[6]; // rv 1
  assign CH0_TXCTRL2_in[7] = (CH0_TXCTRL2[7] === 1'bz) || CH0_TXCTRL2[7]; // rv 1
  assign CH0_TXDATA_in[0] = (CH0_TXDATA[0] === 1'bz) || CH0_TXDATA[0]; // rv 1
  assign CH0_TXDATA_in[100] = (CH0_TXDATA[100] === 1'bz) || CH0_TXDATA[100]; // rv 1
  assign CH0_TXDATA_in[101] = (CH0_TXDATA[101] === 1'bz) || CH0_TXDATA[101]; // rv 1
  assign CH0_TXDATA_in[102] = (CH0_TXDATA[102] === 1'bz) || CH0_TXDATA[102]; // rv 1
  assign CH0_TXDATA_in[103] = (CH0_TXDATA[103] === 1'bz) || CH0_TXDATA[103]; // rv 1
  assign CH0_TXDATA_in[104] = (CH0_TXDATA[104] === 1'bz) || CH0_TXDATA[104]; // rv 1
  assign CH0_TXDATA_in[105] = (CH0_TXDATA[105] === 1'bz) || CH0_TXDATA[105]; // rv 1
  assign CH0_TXDATA_in[106] = (CH0_TXDATA[106] === 1'bz) || CH0_TXDATA[106]; // rv 1
  assign CH0_TXDATA_in[107] = (CH0_TXDATA[107] === 1'bz) || CH0_TXDATA[107]; // rv 1
  assign CH0_TXDATA_in[108] = (CH0_TXDATA[108] === 1'bz) || CH0_TXDATA[108]; // rv 1
  assign CH0_TXDATA_in[109] = (CH0_TXDATA[109] === 1'bz) || CH0_TXDATA[109]; // rv 1
  assign CH0_TXDATA_in[10] = (CH0_TXDATA[10] === 1'bz) || CH0_TXDATA[10]; // rv 1
  assign CH0_TXDATA_in[110] = (CH0_TXDATA[110] === 1'bz) || CH0_TXDATA[110]; // rv 1
  assign CH0_TXDATA_in[111] = (CH0_TXDATA[111] === 1'bz) || CH0_TXDATA[111]; // rv 1
  assign CH0_TXDATA_in[112] = (CH0_TXDATA[112] === 1'bz) || CH0_TXDATA[112]; // rv 1
  assign CH0_TXDATA_in[113] = (CH0_TXDATA[113] === 1'bz) || CH0_TXDATA[113]; // rv 1
  assign CH0_TXDATA_in[114] = (CH0_TXDATA[114] === 1'bz) || CH0_TXDATA[114]; // rv 1
  assign CH0_TXDATA_in[115] = (CH0_TXDATA[115] === 1'bz) || CH0_TXDATA[115]; // rv 1
  assign CH0_TXDATA_in[116] = (CH0_TXDATA[116] === 1'bz) || CH0_TXDATA[116]; // rv 1
  assign CH0_TXDATA_in[117] = (CH0_TXDATA[117] === 1'bz) || CH0_TXDATA[117]; // rv 1
  assign CH0_TXDATA_in[118] = (CH0_TXDATA[118] === 1'bz) || CH0_TXDATA[118]; // rv 1
  assign CH0_TXDATA_in[119] = (CH0_TXDATA[119] === 1'bz) || CH0_TXDATA[119]; // rv 1
  assign CH0_TXDATA_in[11] = (CH0_TXDATA[11] === 1'bz) || CH0_TXDATA[11]; // rv 1
  assign CH0_TXDATA_in[120] = (CH0_TXDATA[120] === 1'bz) || CH0_TXDATA[120]; // rv 1
  assign CH0_TXDATA_in[121] = (CH0_TXDATA[121] === 1'bz) || CH0_TXDATA[121]; // rv 1
  assign CH0_TXDATA_in[122] = (CH0_TXDATA[122] === 1'bz) || CH0_TXDATA[122]; // rv 1
  assign CH0_TXDATA_in[123] = (CH0_TXDATA[123] === 1'bz) || CH0_TXDATA[123]; // rv 1
  assign CH0_TXDATA_in[124] = (CH0_TXDATA[124] === 1'bz) || CH0_TXDATA[124]; // rv 1
  assign CH0_TXDATA_in[125] = (CH0_TXDATA[125] === 1'bz) || CH0_TXDATA[125]; // rv 1
  assign CH0_TXDATA_in[126] = (CH0_TXDATA[126] === 1'bz) || CH0_TXDATA[126]; // rv 1
  assign CH0_TXDATA_in[127] = (CH0_TXDATA[127] === 1'bz) || CH0_TXDATA[127]; // rv 1
  assign CH0_TXDATA_in[12] = (CH0_TXDATA[12] === 1'bz) || CH0_TXDATA[12]; // rv 1
  assign CH0_TXDATA_in[13] = (CH0_TXDATA[13] === 1'bz) || CH0_TXDATA[13]; // rv 1
  assign CH0_TXDATA_in[14] = (CH0_TXDATA[14] === 1'bz) || CH0_TXDATA[14]; // rv 1
  assign CH0_TXDATA_in[15] = (CH0_TXDATA[15] === 1'bz) || CH0_TXDATA[15]; // rv 1
  assign CH0_TXDATA_in[16] = (CH0_TXDATA[16] === 1'bz) || CH0_TXDATA[16]; // rv 1
  assign CH0_TXDATA_in[17] = (CH0_TXDATA[17] === 1'bz) || CH0_TXDATA[17]; // rv 1
  assign CH0_TXDATA_in[18] = (CH0_TXDATA[18] === 1'bz) || CH0_TXDATA[18]; // rv 1
  assign CH0_TXDATA_in[19] = (CH0_TXDATA[19] === 1'bz) || CH0_TXDATA[19]; // rv 1
  assign CH0_TXDATA_in[1] = (CH0_TXDATA[1] === 1'bz) || CH0_TXDATA[1]; // rv 1
  assign CH0_TXDATA_in[20] = (CH0_TXDATA[20] === 1'bz) || CH0_TXDATA[20]; // rv 1
  assign CH0_TXDATA_in[21] = (CH0_TXDATA[21] === 1'bz) || CH0_TXDATA[21]; // rv 1
  assign CH0_TXDATA_in[22] = (CH0_TXDATA[22] === 1'bz) || CH0_TXDATA[22]; // rv 1
  assign CH0_TXDATA_in[23] = (CH0_TXDATA[23] === 1'bz) || CH0_TXDATA[23]; // rv 1
  assign CH0_TXDATA_in[24] = (CH0_TXDATA[24] === 1'bz) || CH0_TXDATA[24]; // rv 1
  assign CH0_TXDATA_in[25] = (CH0_TXDATA[25] === 1'bz) || CH0_TXDATA[25]; // rv 1
  assign CH0_TXDATA_in[26] = (CH0_TXDATA[26] === 1'bz) || CH0_TXDATA[26]; // rv 1
  assign CH0_TXDATA_in[27] = (CH0_TXDATA[27] === 1'bz) || CH0_TXDATA[27]; // rv 1
  assign CH0_TXDATA_in[28] = (CH0_TXDATA[28] === 1'bz) || CH0_TXDATA[28]; // rv 1
  assign CH0_TXDATA_in[29] = (CH0_TXDATA[29] === 1'bz) || CH0_TXDATA[29]; // rv 1
  assign CH0_TXDATA_in[2] = (CH0_TXDATA[2] === 1'bz) || CH0_TXDATA[2]; // rv 1
  assign CH0_TXDATA_in[30] = (CH0_TXDATA[30] === 1'bz) || CH0_TXDATA[30]; // rv 1
  assign CH0_TXDATA_in[31] = (CH0_TXDATA[31] === 1'bz) || CH0_TXDATA[31]; // rv 1
  assign CH0_TXDATA_in[32] = (CH0_TXDATA[32] === 1'bz) || CH0_TXDATA[32]; // rv 1
  assign CH0_TXDATA_in[33] = (CH0_TXDATA[33] === 1'bz) || CH0_TXDATA[33]; // rv 1
  assign CH0_TXDATA_in[34] = (CH0_TXDATA[34] === 1'bz) || CH0_TXDATA[34]; // rv 1
  assign CH0_TXDATA_in[35] = (CH0_TXDATA[35] === 1'bz) || CH0_TXDATA[35]; // rv 1
  assign CH0_TXDATA_in[36] = (CH0_TXDATA[36] === 1'bz) || CH0_TXDATA[36]; // rv 1
  assign CH0_TXDATA_in[37] = (CH0_TXDATA[37] === 1'bz) || CH0_TXDATA[37]; // rv 1
  assign CH0_TXDATA_in[38] = (CH0_TXDATA[38] === 1'bz) || CH0_TXDATA[38]; // rv 1
  assign CH0_TXDATA_in[39] = (CH0_TXDATA[39] === 1'bz) || CH0_TXDATA[39]; // rv 1
  assign CH0_TXDATA_in[3] = (CH0_TXDATA[3] === 1'bz) || CH0_TXDATA[3]; // rv 1
  assign CH0_TXDATA_in[40] = (CH0_TXDATA[40] === 1'bz) || CH0_TXDATA[40]; // rv 1
  assign CH0_TXDATA_in[41] = (CH0_TXDATA[41] === 1'bz) || CH0_TXDATA[41]; // rv 1
  assign CH0_TXDATA_in[42] = (CH0_TXDATA[42] === 1'bz) || CH0_TXDATA[42]; // rv 1
  assign CH0_TXDATA_in[43] = (CH0_TXDATA[43] === 1'bz) || CH0_TXDATA[43]; // rv 1
  assign CH0_TXDATA_in[44] = (CH0_TXDATA[44] === 1'bz) || CH0_TXDATA[44]; // rv 1
  assign CH0_TXDATA_in[45] = (CH0_TXDATA[45] === 1'bz) || CH0_TXDATA[45]; // rv 1
  assign CH0_TXDATA_in[46] = (CH0_TXDATA[46] === 1'bz) || CH0_TXDATA[46]; // rv 1
  assign CH0_TXDATA_in[47] = (CH0_TXDATA[47] === 1'bz) || CH0_TXDATA[47]; // rv 1
  assign CH0_TXDATA_in[48] = (CH0_TXDATA[48] === 1'bz) || CH0_TXDATA[48]; // rv 1
  assign CH0_TXDATA_in[49] = (CH0_TXDATA[49] === 1'bz) || CH0_TXDATA[49]; // rv 1
  assign CH0_TXDATA_in[4] = (CH0_TXDATA[4] === 1'bz) || CH0_TXDATA[4]; // rv 1
  assign CH0_TXDATA_in[50] = (CH0_TXDATA[50] === 1'bz) || CH0_TXDATA[50]; // rv 1
  assign CH0_TXDATA_in[51] = (CH0_TXDATA[51] === 1'bz) || CH0_TXDATA[51]; // rv 1
  assign CH0_TXDATA_in[52] = (CH0_TXDATA[52] === 1'bz) || CH0_TXDATA[52]; // rv 1
  assign CH0_TXDATA_in[53] = (CH0_TXDATA[53] === 1'bz) || CH0_TXDATA[53]; // rv 1
  assign CH0_TXDATA_in[54] = (CH0_TXDATA[54] === 1'bz) || CH0_TXDATA[54]; // rv 1
  assign CH0_TXDATA_in[55] = (CH0_TXDATA[55] === 1'bz) || CH0_TXDATA[55]; // rv 1
  assign CH0_TXDATA_in[56] = (CH0_TXDATA[56] === 1'bz) || CH0_TXDATA[56]; // rv 1
  assign CH0_TXDATA_in[57] = (CH0_TXDATA[57] === 1'bz) || CH0_TXDATA[57]; // rv 1
  assign CH0_TXDATA_in[58] = (CH0_TXDATA[58] === 1'bz) || CH0_TXDATA[58]; // rv 1
  assign CH0_TXDATA_in[59] = (CH0_TXDATA[59] === 1'bz) || CH0_TXDATA[59]; // rv 1
  assign CH0_TXDATA_in[5] = (CH0_TXDATA[5] === 1'bz) || CH0_TXDATA[5]; // rv 1
  assign CH0_TXDATA_in[60] = (CH0_TXDATA[60] === 1'bz) || CH0_TXDATA[60]; // rv 1
  assign CH0_TXDATA_in[61] = (CH0_TXDATA[61] === 1'bz) || CH0_TXDATA[61]; // rv 1
  assign CH0_TXDATA_in[62] = (CH0_TXDATA[62] === 1'bz) || CH0_TXDATA[62]; // rv 1
  assign CH0_TXDATA_in[63] = (CH0_TXDATA[63] === 1'bz) || CH0_TXDATA[63]; // rv 1
  assign CH0_TXDATA_in[64] = (CH0_TXDATA[64] === 1'bz) || CH0_TXDATA[64]; // rv 1
  assign CH0_TXDATA_in[65] = (CH0_TXDATA[65] === 1'bz) || CH0_TXDATA[65]; // rv 1
  assign CH0_TXDATA_in[66] = (CH0_TXDATA[66] === 1'bz) || CH0_TXDATA[66]; // rv 1
  assign CH0_TXDATA_in[67] = (CH0_TXDATA[67] === 1'bz) || CH0_TXDATA[67]; // rv 1
  assign CH0_TXDATA_in[68] = (CH0_TXDATA[68] === 1'bz) || CH0_TXDATA[68]; // rv 1
  assign CH0_TXDATA_in[69] = (CH0_TXDATA[69] === 1'bz) || CH0_TXDATA[69]; // rv 1
  assign CH0_TXDATA_in[6] = (CH0_TXDATA[6] === 1'bz) || CH0_TXDATA[6]; // rv 1
  assign CH0_TXDATA_in[70] = (CH0_TXDATA[70] === 1'bz) || CH0_TXDATA[70]; // rv 1
  assign CH0_TXDATA_in[71] = (CH0_TXDATA[71] === 1'bz) || CH0_TXDATA[71]; // rv 1
  assign CH0_TXDATA_in[72] = (CH0_TXDATA[72] === 1'bz) || CH0_TXDATA[72]; // rv 1
  assign CH0_TXDATA_in[73] = (CH0_TXDATA[73] === 1'bz) || CH0_TXDATA[73]; // rv 1
  assign CH0_TXDATA_in[74] = (CH0_TXDATA[74] === 1'bz) || CH0_TXDATA[74]; // rv 1
  assign CH0_TXDATA_in[75] = (CH0_TXDATA[75] === 1'bz) || CH0_TXDATA[75]; // rv 1
  assign CH0_TXDATA_in[76] = (CH0_TXDATA[76] === 1'bz) || CH0_TXDATA[76]; // rv 1
  assign CH0_TXDATA_in[77] = (CH0_TXDATA[77] === 1'bz) || CH0_TXDATA[77]; // rv 1
  assign CH0_TXDATA_in[78] = (CH0_TXDATA[78] === 1'bz) || CH0_TXDATA[78]; // rv 1
  assign CH0_TXDATA_in[79] = (CH0_TXDATA[79] === 1'bz) || CH0_TXDATA[79]; // rv 1
  assign CH0_TXDATA_in[7] = (CH0_TXDATA[7] === 1'bz) || CH0_TXDATA[7]; // rv 1
  assign CH0_TXDATA_in[80] = (CH0_TXDATA[80] === 1'bz) || CH0_TXDATA[80]; // rv 1
  assign CH0_TXDATA_in[81] = (CH0_TXDATA[81] === 1'bz) || CH0_TXDATA[81]; // rv 1
  assign CH0_TXDATA_in[82] = (CH0_TXDATA[82] === 1'bz) || CH0_TXDATA[82]; // rv 1
  assign CH0_TXDATA_in[83] = (CH0_TXDATA[83] === 1'bz) || CH0_TXDATA[83]; // rv 1
  assign CH0_TXDATA_in[84] = (CH0_TXDATA[84] === 1'bz) || CH0_TXDATA[84]; // rv 1
  assign CH0_TXDATA_in[85] = (CH0_TXDATA[85] === 1'bz) || CH0_TXDATA[85]; // rv 1
  assign CH0_TXDATA_in[86] = (CH0_TXDATA[86] === 1'bz) || CH0_TXDATA[86]; // rv 1
  assign CH0_TXDATA_in[87] = (CH0_TXDATA[87] === 1'bz) || CH0_TXDATA[87]; // rv 1
  assign CH0_TXDATA_in[88] = (CH0_TXDATA[88] === 1'bz) || CH0_TXDATA[88]; // rv 1
  assign CH0_TXDATA_in[89] = (CH0_TXDATA[89] === 1'bz) || CH0_TXDATA[89]; // rv 1
  assign CH0_TXDATA_in[8] = (CH0_TXDATA[8] === 1'bz) || CH0_TXDATA[8]; // rv 1
  assign CH0_TXDATA_in[90] = (CH0_TXDATA[90] === 1'bz) || CH0_TXDATA[90]; // rv 1
  assign CH0_TXDATA_in[91] = (CH0_TXDATA[91] === 1'bz) || CH0_TXDATA[91]; // rv 1
  assign CH0_TXDATA_in[92] = (CH0_TXDATA[92] === 1'bz) || CH0_TXDATA[92]; // rv 1
  assign CH0_TXDATA_in[93] = (CH0_TXDATA[93] === 1'bz) || CH0_TXDATA[93]; // rv 1
  assign CH0_TXDATA_in[94] = (CH0_TXDATA[94] === 1'bz) || CH0_TXDATA[94]; // rv 1
  assign CH0_TXDATA_in[95] = (CH0_TXDATA[95] === 1'bz) || CH0_TXDATA[95]; // rv 1
  assign CH0_TXDATA_in[96] = (CH0_TXDATA[96] === 1'bz) || CH0_TXDATA[96]; // rv 1
  assign CH0_TXDATA_in[97] = (CH0_TXDATA[97] === 1'bz) || CH0_TXDATA[97]; // rv 1
  assign CH0_TXDATA_in[98] = (CH0_TXDATA[98] === 1'bz) || CH0_TXDATA[98]; // rv 1
  assign CH0_TXDATA_in[99] = (CH0_TXDATA[99] === 1'bz) || CH0_TXDATA[99]; // rv 1
  assign CH0_TXDATA_in[9] = (CH0_TXDATA[9] === 1'bz) || CH0_TXDATA[9]; // rv 1
  assign CH0_TXDETECTRX_in = (CH0_TXDETECTRX === 1'bz) || CH0_TXDETECTRX; // rv 1
  assign CH0_TXELECIDLE_in = (CH0_TXELECIDLE === 1'bz) || CH0_TXELECIDLE; // rv 1
  assign CH0_TXHEADER_in[0] = (CH0_TXHEADER[0] === 1'bz) || CH0_TXHEADER[0]; // rv 1
  assign CH0_TXHEADER_in[1] = (CH0_TXHEADER[1] === 1'bz) || CH0_TXHEADER[1]; // rv 1
  assign CH0_TXHEADER_in[2] = (CH0_TXHEADER[2] === 1'bz) || CH0_TXHEADER[2]; // rv 1
  assign CH0_TXHEADER_in[3] = (CH0_TXHEADER[3] === 1'bz) || CH0_TXHEADER[3]; // rv 1
  assign CH0_TXHEADER_in[4] = (CH0_TXHEADER[4] === 1'bz) || CH0_TXHEADER[4]; // rv 1
  assign CH0_TXHEADER_in[5] = (CH0_TXHEADER[5] === 1'bz) || CH0_TXHEADER[5]; // rv 1
  assign CH0_TXINHIBIT_in = (CH0_TXINHIBIT === 1'bz) || CH0_TXINHIBIT; // rv 1
  assign CH0_TXPD_in[0] = (CH0_TXPD[0] === 1'bz) || CH0_TXPD[0]; // rv 1
  assign CH0_TXPD_in[1] = (CH0_TXPD[1] === 1'bz) || CH0_TXPD[1]; // rv 1
  assign CH0_TXPIPPMEN_in = (CH0_TXPIPPMEN === 1'bz) || CH0_TXPIPPMEN; // rv 1
  assign CH0_TXPIPPMSTEPSIZE_in[0] = (CH0_TXPIPPMSTEPSIZE[0] === 1'bz) || CH0_TXPIPPMSTEPSIZE[0]; // rv 1
  assign CH0_TXPIPPMSTEPSIZE_in[1] = (CH0_TXPIPPMSTEPSIZE[1] === 1'bz) || CH0_TXPIPPMSTEPSIZE[1]; // rv 1
  assign CH0_TXPIPPMSTEPSIZE_in[2] = (CH0_TXPIPPMSTEPSIZE[2] === 1'bz) || CH0_TXPIPPMSTEPSIZE[2]; // rv 1
  assign CH0_TXPIPPMSTEPSIZE_in[3] = (CH0_TXPIPPMSTEPSIZE[3] === 1'bz) || CH0_TXPIPPMSTEPSIZE[3]; // rv 1
  assign CH0_TXPIPPMSTEPSIZE_in[4] = (CH0_TXPIPPMSTEPSIZE[4] === 1'bz) || CH0_TXPIPPMSTEPSIZE[4]; // rv 1
  assign CH0_TXPOLARITY_in = (CH0_TXPOLARITY === 1'bz) || CH0_TXPOLARITY; // rv 1
  assign CH0_TXRATE_in[0] = (CH0_TXRATE[0] === 1'bz) || CH0_TXRATE[0]; // rv 1
  assign CH0_TXRATE_in[1] = (CH0_TXRATE[1] === 1'bz) || CH0_TXRATE[1]; // rv 1
  assign CH0_TXRATE_in[2] = (CH0_TXRATE[2] === 1'bz) || CH0_TXRATE[2]; // rv 1
  assign CH0_TXRATE_in[3] = (CH0_TXRATE[3] === 1'bz) || CH0_TXRATE[3]; // rv 1
  assign CH0_TXRATE_in[4] = (CH0_TXRATE[4] === 1'bz) || CH0_TXRATE[4]; // rv 1
  assign CH0_TXRATE_in[5] = (CH0_TXRATE[5] === 1'bz) || CH0_TXRATE[5]; // rv 1
  assign CH0_TXRATE_in[6] = (CH0_TXRATE[6] === 1'bz) || CH0_TXRATE[6]; // rv 1
  assign CH0_TXRATE_in[7] = (CH0_TXRATE[7] === 1'bz) || CH0_TXRATE[7]; // rv 1
  assign CH0_TXSEQUENCE_in[0] = (CH0_TXSEQUENCE[0] === 1'bz) || CH0_TXSEQUENCE[0]; // rv 1
  assign CH0_TXSEQUENCE_in[1] = (CH0_TXSEQUENCE[1] === 1'bz) || CH0_TXSEQUENCE[1]; // rv 1
  assign CH0_TXSEQUENCE_in[2] = (CH0_TXSEQUENCE[2] === 1'bz) || CH0_TXSEQUENCE[2]; // rv 1
  assign CH0_TXSEQUENCE_in[3] = (CH0_TXSEQUENCE[3] === 1'bz) || CH0_TXSEQUENCE[3]; // rv 1
  assign CH0_TXSEQUENCE_in[4] = (CH0_TXSEQUENCE[4] === 1'bz) || CH0_TXSEQUENCE[4]; // rv 1
  assign CH0_TXSEQUENCE_in[5] = (CH0_TXSEQUENCE[5] === 1'bz) || CH0_TXSEQUENCE[5]; // rv 1
  assign CH0_TXSEQUENCE_in[6] = (CH0_TXSEQUENCE[6] === 1'bz) || CH0_TXSEQUENCE[6]; // rv 1
  assign CH0_TXUSRCLK_in = (CH0_TXUSRCLK === 1'bz) || CH0_TXUSRCLK; // rv 1
  assign CH1_EYESCANTRIGGER_in = (CH1_EYESCANTRIGGER === 1'bz) || CH1_EYESCANTRIGGER; // rv 1
  assign CH1_PHYESMADAPTSAVE_in = (CH1_PHYESMADAPTSAVE === 1'bz) || CH1_PHYESMADAPTSAVE; // rv 1
  assign CH1_RXCHBONDI_in[0] = (CH1_RXCHBONDI[0] === 1'bz) || CH1_RXCHBONDI[0]; // rv 1
  assign CH1_RXCHBONDI_in[1] = (CH1_RXCHBONDI[1] === 1'bz) || CH1_RXCHBONDI[1]; // rv 1
  assign CH1_RXCHBONDI_in[2] = (CH1_RXCHBONDI[2] === 1'bz) || CH1_RXCHBONDI[2]; // rv 1
  assign CH1_RXCHBONDI_in[3] = (CH1_RXCHBONDI[3] === 1'bz) || CH1_RXCHBONDI[3]; // rv 1
  assign CH1_RXCHBONDI_in[4] = (CH1_RXCHBONDI[4] === 1'bz) || CH1_RXCHBONDI[4]; // rv 1
  assign CH1_RXDLYALIGNREQ_in = (CH1_RXDLYALIGNREQ === 1'bz) || CH1_RXDLYALIGNREQ; // rv 1
  assign CH1_RXEQTRAINING_in = (CH1_RXEQTRAINING === 1'bz) || CH1_RXEQTRAINING; // rv 1
  assign CH1_RXGEARBOXSLIP_in = (CH1_RXGEARBOXSLIP === 1'bz) || CH1_RXGEARBOXSLIP; // rv 1
  assign CH1_RXMLDCHAINDONE_in = (CH1_RXMLDCHAINDONE === 1'bz) || CH1_RXMLDCHAINDONE; // rv 1
  assign CH1_RXMLDCHAINREQ_in = (CH1_RXMLDCHAINREQ === 1'bz) || CH1_RXMLDCHAINREQ; // rv 1
  assign CH1_RXPD_in[0] = (CH1_RXPD[0] === 1'bz) || CH1_RXPD[0]; // rv 1
  assign CH1_RXPD_in[1] = (CH1_RXPD[1] === 1'bz) || CH1_RXPD[1]; // rv 1
  assign CH1_RXPHALIGNREQ_in = (CH1_RXPHALIGNREQ === 1'bz) || CH1_RXPHALIGNREQ; // rv 1
  assign CH1_RXPHSETINITREQ_in = (CH1_RXPHSETINITREQ === 1'bz) || CH1_RXPHSETINITREQ; // rv 1
  assign CH1_RXPHSHIFT180_in = (CH1_RXPHSHIFT180 === 1'bz) || CH1_RXPHSHIFT180; // rv 1
  assign CH1_RXPOLARITY_in = (CH1_RXPOLARITY === 1'bz) || CH1_RXPOLARITY; // rv 1
  assign CH1_RXRATE_in[0] = (CH1_RXRATE[0] === 1'bz) || CH1_RXRATE[0]; // rv 1
  assign CH1_RXRATE_in[1] = (CH1_RXRATE[1] === 1'bz) || CH1_RXRATE[1]; // rv 1
  assign CH1_RXRATE_in[2] = (CH1_RXRATE[2] === 1'bz) || CH1_RXRATE[2]; // rv 1
  assign CH1_RXRATE_in[3] = (CH1_RXRATE[3] === 1'bz) || CH1_RXRATE[3]; // rv 1
  assign CH1_RXRATE_in[4] = (CH1_RXRATE[4] === 1'bz) || CH1_RXRATE[4]; // rv 1
  assign CH1_RXRATE_in[5] = (CH1_RXRATE[5] === 1'bz) || CH1_RXRATE[5]; // rv 1
  assign CH1_RXRATE_in[6] = (CH1_RXRATE[6] === 1'bz) || CH1_RXRATE[6]; // rv 1
  assign CH1_RXRATE_in[7] = (CH1_RXRATE[7] === 1'bz) || CH1_RXRATE[7]; // rv 1
  assign CH1_RXSLIDE_in = (CH1_RXSLIDE === 1'bz) || CH1_RXSLIDE; // rv 1
  assign CH1_RXUSRCLK_in = (CH1_RXUSRCLK === 1'bz) || CH1_RXUSRCLK; // rv 1
  assign CH1_TXCOMINIT_in = (CH1_TXCOMINIT === 1'bz) || CH1_TXCOMINIT; // rv 1
  assign CH1_TXCOMSAS_in = (CH1_TXCOMSAS === 1'bz) || CH1_TXCOMSAS; // rv 1
  assign CH1_TXCOMWAKE_in = (CH1_TXCOMWAKE === 1'bz) || CH1_TXCOMWAKE; // rv 1
  assign CH1_TXCTRL0_in[0] = (CH1_TXCTRL0[0] === 1'bz) || CH1_TXCTRL0[0]; // rv 1
  assign CH1_TXCTRL0_in[10] = (CH1_TXCTRL0[10] === 1'bz) || CH1_TXCTRL0[10]; // rv 1
  assign CH1_TXCTRL0_in[11] = (CH1_TXCTRL0[11] === 1'bz) || CH1_TXCTRL0[11]; // rv 1
  assign CH1_TXCTRL0_in[12] = (CH1_TXCTRL0[12] === 1'bz) || CH1_TXCTRL0[12]; // rv 1
  assign CH1_TXCTRL0_in[13] = (CH1_TXCTRL0[13] === 1'bz) || CH1_TXCTRL0[13]; // rv 1
  assign CH1_TXCTRL0_in[14] = (CH1_TXCTRL0[14] === 1'bz) || CH1_TXCTRL0[14]; // rv 1
  assign CH1_TXCTRL0_in[15] = (CH1_TXCTRL0[15] === 1'bz) || CH1_TXCTRL0[15]; // rv 1
  assign CH1_TXCTRL0_in[1] = (CH1_TXCTRL0[1] === 1'bz) || CH1_TXCTRL0[1]; // rv 1
  assign CH1_TXCTRL0_in[2] = (CH1_TXCTRL0[2] === 1'bz) || CH1_TXCTRL0[2]; // rv 1
  assign CH1_TXCTRL0_in[3] = (CH1_TXCTRL0[3] === 1'bz) || CH1_TXCTRL0[3]; // rv 1
  assign CH1_TXCTRL0_in[4] = (CH1_TXCTRL0[4] === 1'bz) || CH1_TXCTRL0[4]; // rv 1
  assign CH1_TXCTRL0_in[5] = (CH1_TXCTRL0[5] === 1'bz) || CH1_TXCTRL0[5]; // rv 1
  assign CH1_TXCTRL0_in[6] = (CH1_TXCTRL0[6] === 1'bz) || CH1_TXCTRL0[6]; // rv 1
  assign CH1_TXCTRL0_in[7] = (CH1_TXCTRL0[7] === 1'bz) || CH1_TXCTRL0[7]; // rv 1
  assign CH1_TXCTRL0_in[8] = (CH1_TXCTRL0[8] === 1'bz) || CH1_TXCTRL0[8]; // rv 1
  assign CH1_TXCTRL0_in[9] = (CH1_TXCTRL0[9] === 1'bz) || CH1_TXCTRL0[9]; // rv 1
  assign CH1_TXCTRL1_in[0] = (CH1_TXCTRL1[0] === 1'bz) || CH1_TXCTRL1[0]; // rv 1
  assign CH1_TXCTRL1_in[10] = (CH1_TXCTRL1[10] === 1'bz) || CH1_TXCTRL1[10]; // rv 1
  assign CH1_TXCTRL1_in[11] = (CH1_TXCTRL1[11] === 1'bz) || CH1_TXCTRL1[11]; // rv 1
  assign CH1_TXCTRL1_in[12] = (CH1_TXCTRL1[12] === 1'bz) || CH1_TXCTRL1[12]; // rv 1
  assign CH1_TXCTRL1_in[13] = (CH1_TXCTRL1[13] === 1'bz) || CH1_TXCTRL1[13]; // rv 1
  assign CH1_TXCTRL1_in[14] = (CH1_TXCTRL1[14] === 1'bz) || CH1_TXCTRL1[14]; // rv 1
  assign CH1_TXCTRL1_in[15] = (CH1_TXCTRL1[15] === 1'bz) || CH1_TXCTRL1[15]; // rv 1
  assign CH1_TXCTRL1_in[1] = (CH1_TXCTRL1[1] === 1'bz) || CH1_TXCTRL1[1]; // rv 1
  assign CH1_TXCTRL1_in[2] = (CH1_TXCTRL1[2] === 1'bz) || CH1_TXCTRL1[2]; // rv 1
  assign CH1_TXCTRL1_in[3] = (CH1_TXCTRL1[3] === 1'bz) || CH1_TXCTRL1[3]; // rv 1
  assign CH1_TXCTRL1_in[4] = (CH1_TXCTRL1[4] === 1'bz) || CH1_TXCTRL1[4]; // rv 1
  assign CH1_TXCTRL1_in[5] = (CH1_TXCTRL1[5] === 1'bz) || CH1_TXCTRL1[5]; // rv 1
  assign CH1_TXCTRL1_in[6] = (CH1_TXCTRL1[6] === 1'bz) || CH1_TXCTRL1[6]; // rv 1
  assign CH1_TXCTRL1_in[7] = (CH1_TXCTRL1[7] === 1'bz) || CH1_TXCTRL1[7]; // rv 1
  assign CH1_TXCTRL1_in[8] = (CH1_TXCTRL1[8] === 1'bz) || CH1_TXCTRL1[8]; // rv 1
  assign CH1_TXCTRL1_in[9] = (CH1_TXCTRL1[9] === 1'bz) || CH1_TXCTRL1[9]; // rv 1
  assign CH1_TXCTRL2_in[0] = (CH1_TXCTRL2[0] === 1'bz) || CH1_TXCTRL2[0]; // rv 1
  assign CH1_TXCTRL2_in[1] = (CH1_TXCTRL2[1] === 1'bz) || CH1_TXCTRL2[1]; // rv 1
  assign CH1_TXCTRL2_in[2] = (CH1_TXCTRL2[2] === 1'bz) || CH1_TXCTRL2[2]; // rv 1
  assign CH1_TXCTRL2_in[3] = (CH1_TXCTRL2[3] === 1'bz) || CH1_TXCTRL2[3]; // rv 1
  assign CH1_TXCTRL2_in[4] = (CH1_TXCTRL2[4] === 1'bz) || CH1_TXCTRL2[4]; // rv 1
  assign CH1_TXCTRL2_in[5] = (CH1_TXCTRL2[5] === 1'bz) || CH1_TXCTRL2[5]; // rv 1
  assign CH1_TXCTRL2_in[6] = (CH1_TXCTRL2[6] === 1'bz) || CH1_TXCTRL2[6]; // rv 1
  assign CH1_TXCTRL2_in[7] = (CH1_TXCTRL2[7] === 1'bz) || CH1_TXCTRL2[7]; // rv 1
  assign CH1_TXDATA_in[0] = (CH1_TXDATA[0] === 1'bz) || CH1_TXDATA[0]; // rv 1
  assign CH1_TXDATA_in[100] = (CH1_TXDATA[100] === 1'bz) || CH1_TXDATA[100]; // rv 1
  assign CH1_TXDATA_in[101] = (CH1_TXDATA[101] === 1'bz) || CH1_TXDATA[101]; // rv 1
  assign CH1_TXDATA_in[102] = (CH1_TXDATA[102] === 1'bz) || CH1_TXDATA[102]; // rv 1
  assign CH1_TXDATA_in[103] = (CH1_TXDATA[103] === 1'bz) || CH1_TXDATA[103]; // rv 1
  assign CH1_TXDATA_in[104] = (CH1_TXDATA[104] === 1'bz) || CH1_TXDATA[104]; // rv 1
  assign CH1_TXDATA_in[105] = (CH1_TXDATA[105] === 1'bz) || CH1_TXDATA[105]; // rv 1
  assign CH1_TXDATA_in[106] = (CH1_TXDATA[106] === 1'bz) || CH1_TXDATA[106]; // rv 1
  assign CH1_TXDATA_in[107] = (CH1_TXDATA[107] === 1'bz) || CH1_TXDATA[107]; // rv 1
  assign CH1_TXDATA_in[108] = (CH1_TXDATA[108] === 1'bz) || CH1_TXDATA[108]; // rv 1
  assign CH1_TXDATA_in[109] = (CH1_TXDATA[109] === 1'bz) || CH1_TXDATA[109]; // rv 1
  assign CH1_TXDATA_in[10] = (CH1_TXDATA[10] === 1'bz) || CH1_TXDATA[10]; // rv 1
  assign CH1_TXDATA_in[110] = (CH1_TXDATA[110] === 1'bz) || CH1_TXDATA[110]; // rv 1
  assign CH1_TXDATA_in[111] = (CH1_TXDATA[111] === 1'bz) || CH1_TXDATA[111]; // rv 1
  assign CH1_TXDATA_in[112] = (CH1_TXDATA[112] === 1'bz) || CH1_TXDATA[112]; // rv 1
  assign CH1_TXDATA_in[113] = (CH1_TXDATA[113] === 1'bz) || CH1_TXDATA[113]; // rv 1
  assign CH1_TXDATA_in[114] = (CH1_TXDATA[114] === 1'bz) || CH1_TXDATA[114]; // rv 1
  assign CH1_TXDATA_in[115] = (CH1_TXDATA[115] === 1'bz) || CH1_TXDATA[115]; // rv 1
  assign CH1_TXDATA_in[116] = (CH1_TXDATA[116] === 1'bz) || CH1_TXDATA[116]; // rv 1
  assign CH1_TXDATA_in[117] = (CH1_TXDATA[117] === 1'bz) || CH1_TXDATA[117]; // rv 1
  assign CH1_TXDATA_in[118] = (CH1_TXDATA[118] === 1'bz) || CH1_TXDATA[118]; // rv 1
  assign CH1_TXDATA_in[119] = (CH1_TXDATA[119] === 1'bz) || CH1_TXDATA[119]; // rv 1
  assign CH1_TXDATA_in[11] = (CH1_TXDATA[11] === 1'bz) || CH1_TXDATA[11]; // rv 1
  assign CH1_TXDATA_in[120] = (CH1_TXDATA[120] === 1'bz) || CH1_TXDATA[120]; // rv 1
  assign CH1_TXDATA_in[121] = (CH1_TXDATA[121] === 1'bz) || CH1_TXDATA[121]; // rv 1
  assign CH1_TXDATA_in[122] = (CH1_TXDATA[122] === 1'bz) || CH1_TXDATA[122]; // rv 1
  assign CH1_TXDATA_in[123] = (CH1_TXDATA[123] === 1'bz) || CH1_TXDATA[123]; // rv 1
  assign CH1_TXDATA_in[124] = (CH1_TXDATA[124] === 1'bz) || CH1_TXDATA[124]; // rv 1
  assign CH1_TXDATA_in[125] = (CH1_TXDATA[125] === 1'bz) || CH1_TXDATA[125]; // rv 1
  assign CH1_TXDATA_in[126] = (CH1_TXDATA[126] === 1'bz) || CH1_TXDATA[126]; // rv 1
  assign CH1_TXDATA_in[127] = (CH1_TXDATA[127] === 1'bz) || CH1_TXDATA[127]; // rv 1
  assign CH1_TXDATA_in[12] = (CH1_TXDATA[12] === 1'bz) || CH1_TXDATA[12]; // rv 1
  assign CH1_TXDATA_in[13] = (CH1_TXDATA[13] === 1'bz) || CH1_TXDATA[13]; // rv 1
  assign CH1_TXDATA_in[14] = (CH1_TXDATA[14] === 1'bz) || CH1_TXDATA[14]; // rv 1
  assign CH1_TXDATA_in[15] = (CH1_TXDATA[15] === 1'bz) || CH1_TXDATA[15]; // rv 1
  assign CH1_TXDATA_in[16] = (CH1_TXDATA[16] === 1'bz) || CH1_TXDATA[16]; // rv 1
  assign CH1_TXDATA_in[17] = (CH1_TXDATA[17] === 1'bz) || CH1_TXDATA[17]; // rv 1
  assign CH1_TXDATA_in[18] = (CH1_TXDATA[18] === 1'bz) || CH1_TXDATA[18]; // rv 1
  assign CH1_TXDATA_in[19] = (CH1_TXDATA[19] === 1'bz) || CH1_TXDATA[19]; // rv 1
  assign CH1_TXDATA_in[1] = (CH1_TXDATA[1] === 1'bz) || CH1_TXDATA[1]; // rv 1
  assign CH1_TXDATA_in[20] = (CH1_TXDATA[20] === 1'bz) || CH1_TXDATA[20]; // rv 1
  assign CH1_TXDATA_in[21] = (CH1_TXDATA[21] === 1'bz) || CH1_TXDATA[21]; // rv 1
  assign CH1_TXDATA_in[22] = (CH1_TXDATA[22] === 1'bz) || CH1_TXDATA[22]; // rv 1
  assign CH1_TXDATA_in[23] = (CH1_TXDATA[23] === 1'bz) || CH1_TXDATA[23]; // rv 1
  assign CH1_TXDATA_in[24] = (CH1_TXDATA[24] === 1'bz) || CH1_TXDATA[24]; // rv 1
  assign CH1_TXDATA_in[25] = (CH1_TXDATA[25] === 1'bz) || CH1_TXDATA[25]; // rv 1
  assign CH1_TXDATA_in[26] = (CH1_TXDATA[26] === 1'bz) || CH1_TXDATA[26]; // rv 1
  assign CH1_TXDATA_in[27] = (CH1_TXDATA[27] === 1'bz) || CH1_TXDATA[27]; // rv 1
  assign CH1_TXDATA_in[28] = (CH1_TXDATA[28] === 1'bz) || CH1_TXDATA[28]; // rv 1
  assign CH1_TXDATA_in[29] = (CH1_TXDATA[29] === 1'bz) || CH1_TXDATA[29]; // rv 1
  assign CH1_TXDATA_in[2] = (CH1_TXDATA[2] === 1'bz) || CH1_TXDATA[2]; // rv 1
  assign CH1_TXDATA_in[30] = (CH1_TXDATA[30] === 1'bz) || CH1_TXDATA[30]; // rv 1
  assign CH1_TXDATA_in[31] = (CH1_TXDATA[31] === 1'bz) || CH1_TXDATA[31]; // rv 1
  assign CH1_TXDATA_in[32] = (CH1_TXDATA[32] === 1'bz) || CH1_TXDATA[32]; // rv 1
  assign CH1_TXDATA_in[33] = (CH1_TXDATA[33] === 1'bz) || CH1_TXDATA[33]; // rv 1
  assign CH1_TXDATA_in[34] = (CH1_TXDATA[34] === 1'bz) || CH1_TXDATA[34]; // rv 1
  assign CH1_TXDATA_in[35] = (CH1_TXDATA[35] === 1'bz) || CH1_TXDATA[35]; // rv 1
  assign CH1_TXDATA_in[36] = (CH1_TXDATA[36] === 1'bz) || CH1_TXDATA[36]; // rv 1
  assign CH1_TXDATA_in[37] = (CH1_TXDATA[37] === 1'bz) || CH1_TXDATA[37]; // rv 1
  assign CH1_TXDATA_in[38] = (CH1_TXDATA[38] === 1'bz) || CH1_TXDATA[38]; // rv 1
  assign CH1_TXDATA_in[39] = (CH1_TXDATA[39] === 1'bz) || CH1_TXDATA[39]; // rv 1
  assign CH1_TXDATA_in[3] = (CH1_TXDATA[3] === 1'bz) || CH1_TXDATA[3]; // rv 1
  assign CH1_TXDATA_in[40] = (CH1_TXDATA[40] === 1'bz) || CH1_TXDATA[40]; // rv 1
  assign CH1_TXDATA_in[41] = (CH1_TXDATA[41] === 1'bz) || CH1_TXDATA[41]; // rv 1
  assign CH1_TXDATA_in[42] = (CH1_TXDATA[42] === 1'bz) || CH1_TXDATA[42]; // rv 1
  assign CH1_TXDATA_in[43] = (CH1_TXDATA[43] === 1'bz) || CH1_TXDATA[43]; // rv 1
  assign CH1_TXDATA_in[44] = (CH1_TXDATA[44] === 1'bz) || CH1_TXDATA[44]; // rv 1
  assign CH1_TXDATA_in[45] = (CH1_TXDATA[45] === 1'bz) || CH1_TXDATA[45]; // rv 1
  assign CH1_TXDATA_in[46] = (CH1_TXDATA[46] === 1'bz) || CH1_TXDATA[46]; // rv 1
  assign CH1_TXDATA_in[47] = (CH1_TXDATA[47] === 1'bz) || CH1_TXDATA[47]; // rv 1
  assign CH1_TXDATA_in[48] = (CH1_TXDATA[48] === 1'bz) || CH1_TXDATA[48]; // rv 1
  assign CH1_TXDATA_in[49] = (CH1_TXDATA[49] === 1'bz) || CH1_TXDATA[49]; // rv 1
  assign CH1_TXDATA_in[4] = (CH1_TXDATA[4] === 1'bz) || CH1_TXDATA[4]; // rv 1
  assign CH1_TXDATA_in[50] = (CH1_TXDATA[50] === 1'bz) || CH1_TXDATA[50]; // rv 1
  assign CH1_TXDATA_in[51] = (CH1_TXDATA[51] === 1'bz) || CH1_TXDATA[51]; // rv 1
  assign CH1_TXDATA_in[52] = (CH1_TXDATA[52] === 1'bz) || CH1_TXDATA[52]; // rv 1
  assign CH1_TXDATA_in[53] = (CH1_TXDATA[53] === 1'bz) || CH1_TXDATA[53]; // rv 1
  assign CH1_TXDATA_in[54] = (CH1_TXDATA[54] === 1'bz) || CH1_TXDATA[54]; // rv 1
  assign CH1_TXDATA_in[55] = (CH1_TXDATA[55] === 1'bz) || CH1_TXDATA[55]; // rv 1
  assign CH1_TXDATA_in[56] = (CH1_TXDATA[56] === 1'bz) || CH1_TXDATA[56]; // rv 1
  assign CH1_TXDATA_in[57] = (CH1_TXDATA[57] === 1'bz) || CH1_TXDATA[57]; // rv 1
  assign CH1_TXDATA_in[58] = (CH1_TXDATA[58] === 1'bz) || CH1_TXDATA[58]; // rv 1
  assign CH1_TXDATA_in[59] = (CH1_TXDATA[59] === 1'bz) || CH1_TXDATA[59]; // rv 1
  assign CH1_TXDATA_in[5] = (CH1_TXDATA[5] === 1'bz) || CH1_TXDATA[5]; // rv 1
  assign CH1_TXDATA_in[60] = (CH1_TXDATA[60] === 1'bz) || CH1_TXDATA[60]; // rv 1
  assign CH1_TXDATA_in[61] = (CH1_TXDATA[61] === 1'bz) || CH1_TXDATA[61]; // rv 1
  assign CH1_TXDATA_in[62] = (CH1_TXDATA[62] === 1'bz) || CH1_TXDATA[62]; // rv 1
  assign CH1_TXDATA_in[63] = (CH1_TXDATA[63] === 1'bz) || CH1_TXDATA[63]; // rv 1
  assign CH1_TXDATA_in[64] = (CH1_TXDATA[64] === 1'bz) || CH1_TXDATA[64]; // rv 1
  assign CH1_TXDATA_in[65] = (CH1_TXDATA[65] === 1'bz) || CH1_TXDATA[65]; // rv 1
  assign CH1_TXDATA_in[66] = (CH1_TXDATA[66] === 1'bz) || CH1_TXDATA[66]; // rv 1
  assign CH1_TXDATA_in[67] = (CH1_TXDATA[67] === 1'bz) || CH1_TXDATA[67]; // rv 1
  assign CH1_TXDATA_in[68] = (CH1_TXDATA[68] === 1'bz) || CH1_TXDATA[68]; // rv 1
  assign CH1_TXDATA_in[69] = (CH1_TXDATA[69] === 1'bz) || CH1_TXDATA[69]; // rv 1
  assign CH1_TXDATA_in[6] = (CH1_TXDATA[6] === 1'bz) || CH1_TXDATA[6]; // rv 1
  assign CH1_TXDATA_in[70] = (CH1_TXDATA[70] === 1'bz) || CH1_TXDATA[70]; // rv 1
  assign CH1_TXDATA_in[71] = (CH1_TXDATA[71] === 1'bz) || CH1_TXDATA[71]; // rv 1
  assign CH1_TXDATA_in[72] = (CH1_TXDATA[72] === 1'bz) || CH1_TXDATA[72]; // rv 1
  assign CH1_TXDATA_in[73] = (CH1_TXDATA[73] === 1'bz) || CH1_TXDATA[73]; // rv 1
  assign CH1_TXDATA_in[74] = (CH1_TXDATA[74] === 1'bz) || CH1_TXDATA[74]; // rv 1
  assign CH1_TXDATA_in[75] = (CH1_TXDATA[75] === 1'bz) || CH1_TXDATA[75]; // rv 1
  assign CH1_TXDATA_in[76] = (CH1_TXDATA[76] === 1'bz) || CH1_TXDATA[76]; // rv 1
  assign CH1_TXDATA_in[77] = (CH1_TXDATA[77] === 1'bz) || CH1_TXDATA[77]; // rv 1
  assign CH1_TXDATA_in[78] = (CH1_TXDATA[78] === 1'bz) || CH1_TXDATA[78]; // rv 1
  assign CH1_TXDATA_in[79] = (CH1_TXDATA[79] === 1'bz) || CH1_TXDATA[79]; // rv 1
  assign CH1_TXDATA_in[7] = (CH1_TXDATA[7] === 1'bz) || CH1_TXDATA[7]; // rv 1
  assign CH1_TXDATA_in[80] = (CH1_TXDATA[80] === 1'bz) || CH1_TXDATA[80]; // rv 1
  assign CH1_TXDATA_in[81] = (CH1_TXDATA[81] === 1'bz) || CH1_TXDATA[81]; // rv 1
  assign CH1_TXDATA_in[82] = (CH1_TXDATA[82] === 1'bz) || CH1_TXDATA[82]; // rv 1
  assign CH1_TXDATA_in[83] = (CH1_TXDATA[83] === 1'bz) || CH1_TXDATA[83]; // rv 1
  assign CH1_TXDATA_in[84] = (CH1_TXDATA[84] === 1'bz) || CH1_TXDATA[84]; // rv 1
  assign CH1_TXDATA_in[85] = (CH1_TXDATA[85] === 1'bz) || CH1_TXDATA[85]; // rv 1
  assign CH1_TXDATA_in[86] = (CH1_TXDATA[86] === 1'bz) || CH1_TXDATA[86]; // rv 1
  assign CH1_TXDATA_in[87] = (CH1_TXDATA[87] === 1'bz) || CH1_TXDATA[87]; // rv 1
  assign CH1_TXDATA_in[88] = (CH1_TXDATA[88] === 1'bz) || CH1_TXDATA[88]; // rv 1
  assign CH1_TXDATA_in[89] = (CH1_TXDATA[89] === 1'bz) || CH1_TXDATA[89]; // rv 1
  assign CH1_TXDATA_in[8] = (CH1_TXDATA[8] === 1'bz) || CH1_TXDATA[8]; // rv 1
  assign CH1_TXDATA_in[90] = (CH1_TXDATA[90] === 1'bz) || CH1_TXDATA[90]; // rv 1
  assign CH1_TXDATA_in[91] = (CH1_TXDATA[91] === 1'bz) || CH1_TXDATA[91]; // rv 1
  assign CH1_TXDATA_in[92] = (CH1_TXDATA[92] === 1'bz) || CH1_TXDATA[92]; // rv 1
  assign CH1_TXDATA_in[93] = (CH1_TXDATA[93] === 1'bz) || CH1_TXDATA[93]; // rv 1
  assign CH1_TXDATA_in[94] = (CH1_TXDATA[94] === 1'bz) || CH1_TXDATA[94]; // rv 1
  assign CH1_TXDATA_in[95] = (CH1_TXDATA[95] === 1'bz) || CH1_TXDATA[95]; // rv 1
  assign CH1_TXDATA_in[96] = (CH1_TXDATA[96] === 1'bz) || CH1_TXDATA[96]; // rv 1
  assign CH1_TXDATA_in[97] = (CH1_TXDATA[97] === 1'bz) || CH1_TXDATA[97]; // rv 1
  assign CH1_TXDATA_in[98] = (CH1_TXDATA[98] === 1'bz) || CH1_TXDATA[98]; // rv 1
  assign CH1_TXDATA_in[99] = (CH1_TXDATA[99] === 1'bz) || CH1_TXDATA[99]; // rv 1
  assign CH1_TXDATA_in[9] = (CH1_TXDATA[9] === 1'bz) || CH1_TXDATA[9]; // rv 1
  assign CH1_TXDETECTRX_in = (CH1_TXDETECTRX === 1'bz) || CH1_TXDETECTRX; // rv 1
  assign CH1_TXELECIDLE_in = (CH1_TXELECIDLE === 1'bz) || CH1_TXELECIDLE; // rv 1
  assign CH1_TXHEADER_in[0] = (CH1_TXHEADER[0] === 1'bz) || CH1_TXHEADER[0]; // rv 1
  assign CH1_TXHEADER_in[1] = (CH1_TXHEADER[1] === 1'bz) || CH1_TXHEADER[1]; // rv 1
  assign CH1_TXHEADER_in[2] = (CH1_TXHEADER[2] === 1'bz) || CH1_TXHEADER[2]; // rv 1
  assign CH1_TXHEADER_in[3] = (CH1_TXHEADER[3] === 1'bz) || CH1_TXHEADER[3]; // rv 1
  assign CH1_TXHEADER_in[4] = (CH1_TXHEADER[4] === 1'bz) || CH1_TXHEADER[4]; // rv 1
  assign CH1_TXHEADER_in[5] = (CH1_TXHEADER[5] === 1'bz) || CH1_TXHEADER[5]; // rv 1
  assign CH1_TXINHIBIT_in = (CH1_TXINHIBIT === 1'bz) || CH1_TXINHIBIT; // rv 1
  assign CH1_TXPD_in[0] = (CH1_TXPD[0] === 1'bz) || CH1_TXPD[0]; // rv 1
  assign CH1_TXPD_in[1] = (CH1_TXPD[1] === 1'bz) || CH1_TXPD[1]; // rv 1
  assign CH1_TXPIPPMEN_in = (CH1_TXPIPPMEN === 1'bz) || CH1_TXPIPPMEN; // rv 1
  assign CH1_TXPIPPMSTEPSIZE_in[0] = (CH1_TXPIPPMSTEPSIZE[0] === 1'bz) || CH1_TXPIPPMSTEPSIZE[0]; // rv 1
  assign CH1_TXPIPPMSTEPSIZE_in[1] = (CH1_TXPIPPMSTEPSIZE[1] === 1'bz) || CH1_TXPIPPMSTEPSIZE[1]; // rv 1
  assign CH1_TXPIPPMSTEPSIZE_in[2] = (CH1_TXPIPPMSTEPSIZE[2] === 1'bz) || CH1_TXPIPPMSTEPSIZE[2]; // rv 1
  assign CH1_TXPIPPMSTEPSIZE_in[3] = (CH1_TXPIPPMSTEPSIZE[3] === 1'bz) || CH1_TXPIPPMSTEPSIZE[3]; // rv 1
  assign CH1_TXPIPPMSTEPSIZE_in[4] = (CH1_TXPIPPMSTEPSIZE[4] === 1'bz) || CH1_TXPIPPMSTEPSIZE[4]; // rv 1
  assign CH1_TXPOLARITY_in = (CH1_TXPOLARITY === 1'bz) || CH1_TXPOLARITY; // rv 1
  assign CH1_TXRATE_in[0] = (CH1_TXRATE[0] === 1'bz) || CH1_TXRATE[0]; // rv 1
  assign CH1_TXRATE_in[1] = (CH1_TXRATE[1] === 1'bz) || CH1_TXRATE[1]; // rv 1
  assign CH1_TXRATE_in[2] = (CH1_TXRATE[2] === 1'bz) || CH1_TXRATE[2]; // rv 1
  assign CH1_TXRATE_in[3] = (CH1_TXRATE[3] === 1'bz) || CH1_TXRATE[3]; // rv 1
  assign CH1_TXRATE_in[4] = (CH1_TXRATE[4] === 1'bz) || CH1_TXRATE[4]; // rv 1
  assign CH1_TXRATE_in[5] = (CH1_TXRATE[5] === 1'bz) || CH1_TXRATE[5]; // rv 1
  assign CH1_TXRATE_in[6] = (CH1_TXRATE[6] === 1'bz) || CH1_TXRATE[6]; // rv 1
  assign CH1_TXRATE_in[7] = (CH1_TXRATE[7] === 1'bz) || CH1_TXRATE[7]; // rv 1
  assign CH1_TXSEQUENCE_in[0] = (CH1_TXSEQUENCE[0] === 1'bz) || CH1_TXSEQUENCE[0]; // rv 1
  assign CH1_TXSEQUENCE_in[1] = (CH1_TXSEQUENCE[1] === 1'bz) || CH1_TXSEQUENCE[1]; // rv 1
  assign CH1_TXSEQUENCE_in[2] = (CH1_TXSEQUENCE[2] === 1'bz) || CH1_TXSEQUENCE[2]; // rv 1
  assign CH1_TXSEQUENCE_in[3] = (CH1_TXSEQUENCE[3] === 1'bz) || CH1_TXSEQUENCE[3]; // rv 1
  assign CH1_TXSEQUENCE_in[4] = (CH1_TXSEQUENCE[4] === 1'bz) || CH1_TXSEQUENCE[4]; // rv 1
  assign CH1_TXSEQUENCE_in[5] = (CH1_TXSEQUENCE[5] === 1'bz) || CH1_TXSEQUENCE[5]; // rv 1
  assign CH1_TXSEQUENCE_in[6] = (CH1_TXSEQUENCE[6] === 1'bz) || CH1_TXSEQUENCE[6]; // rv 1
  assign CH1_TXUSRCLK_in = (CH1_TXUSRCLK === 1'bz) || CH1_TXUSRCLK; // rv 1
  assign CH2_EYESCANTRIGGER_in = (CH2_EYESCANTRIGGER === 1'bz) || CH2_EYESCANTRIGGER; // rv 1
  assign CH2_PHYESMADAPTSAVE_in = (CH2_PHYESMADAPTSAVE === 1'bz) || CH2_PHYESMADAPTSAVE; // rv 1
  assign CH2_RXCHBONDI_in[0] = (CH2_RXCHBONDI[0] === 1'bz) || CH2_RXCHBONDI[0]; // rv 1
  assign CH2_RXCHBONDI_in[1] = (CH2_RXCHBONDI[1] === 1'bz) || CH2_RXCHBONDI[1]; // rv 1
  assign CH2_RXCHBONDI_in[2] = (CH2_RXCHBONDI[2] === 1'bz) || CH2_RXCHBONDI[2]; // rv 1
  assign CH2_RXCHBONDI_in[3] = (CH2_RXCHBONDI[3] === 1'bz) || CH2_RXCHBONDI[3]; // rv 1
  assign CH2_RXCHBONDI_in[4] = (CH2_RXCHBONDI[4] === 1'bz) || CH2_RXCHBONDI[4]; // rv 1
  assign CH2_RXDLYALIGNREQ_in = (CH2_RXDLYALIGNREQ === 1'bz) || CH2_RXDLYALIGNREQ; // rv 1
  assign CH2_RXEQTRAINING_in = (CH2_RXEQTRAINING === 1'bz) || CH2_RXEQTRAINING; // rv 1
  assign CH2_RXGEARBOXSLIP_in = (CH2_RXGEARBOXSLIP === 1'bz) || CH2_RXGEARBOXSLIP; // rv 1
  assign CH2_RXMLDCHAINDONE_in = (CH2_RXMLDCHAINDONE === 1'bz) || CH2_RXMLDCHAINDONE; // rv 1
  assign CH2_RXMLDCHAINREQ_in = (CH2_RXMLDCHAINREQ === 1'bz) || CH2_RXMLDCHAINREQ; // rv 1
  assign CH2_RXPD_in[0] = (CH2_RXPD[0] === 1'bz) || CH2_RXPD[0]; // rv 1
  assign CH2_RXPD_in[1] = (CH2_RXPD[1] === 1'bz) || CH2_RXPD[1]; // rv 1
  assign CH2_RXPHALIGNREQ_in = (CH2_RXPHALIGNREQ === 1'bz) || CH2_RXPHALIGNREQ; // rv 1
  assign CH2_RXPHSETINITREQ_in = (CH2_RXPHSETINITREQ === 1'bz) || CH2_RXPHSETINITREQ; // rv 1
  assign CH2_RXPHSHIFT180_in = (CH2_RXPHSHIFT180 === 1'bz) || CH2_RXPHSHIFT180; // rv 1
  assign CH2_RXPOLARITY_in = (CH2_RXPOLARITY === 1'bz) || CH2_RXPOLARITY; // rv 1
  assign CH2_RXRATE_in[0] = (CH2_RXRATE[0] === 1'bz) || CH2_RXRATE[0]; // rv 1
  assign CH2_RXRATE_in[1] = (CH2_RXRATE[1] === 1'bz) || CH2_RXRATE[1]; // rv 1
  assign CH2_RXRATE_in[2] = (CH2_RXRATE[2] === 1'bz) || CH2_RXRATE[2]; // rv 1
  assign CH2_RXRATE_in[3] = (CH2_RXRATE[3] === 1'bz) || CH2_RXRATE[3]; // rv 1
  assign CH2_RXRATE_in[4] = (CH2_RXRATE[4] === 1'bz) || CH2_RXRATE[4]; // rv 1
  assign CH2_RXRATE_in[5] = (CH2_RXRATE[5] === 1'bz) || CH2_RXRATE[5]; // rv 1
  assign CH2_RXRATE_in[6] = (CH2_RXRATE[6] === 1'bz) || CH2_RXRATE[6]; // rv 1
  assign CH2_RXRATE_in[7] = (CH2_RXRATE[7] === 1'bz) || CH2_RXRATE[7]; // rv 1
  assign CH2_RXSLIDE_in = (CH2_RXSLIDE === 1'bz) || CH2_RXSLIDE; // rv 1
  assign CH2_RXUSRCLK_in = (CH2_RXUSRCLK === 1'bz) || CH2_RXUSRCLK; // rv 1
  assign CH2_TXCOMINIT_in = (CH2_TXCOMINIT === 1'bz) || CH2_TXCOMINIT; // rv 1
  assign CH2_TXCOMSAS_in = (CH2_TXCOMSAS === 1'bz) || CH2_TXCOMSAS; // rv 1
  assign CH2_TXCOMWAKE_in = (CH2_TXCOMWAKE === 1'bz) || CH2_TXCOMWAKE; // rv 1
  assign CH2_TXCTRL0_in[0] = (CH2_TXCTRL0[0] === 1'bz) || CH2_TXCTRL0[0]; // rv 1
  assign CH2_TXCTRL0_in[10] = (CH2_TXCTRL0[10] === 1'bz) || CH2_TXCTRL0[10]; // rv 1
  assign CH2_TXCTRL0_in[11] = (CH2_TXCTRL0[11] === 1'bz) || CH2_TXCTRL0[11]; // rv 1
  assign CH2_TXCTRL0_in[12] = (CH2_TXCTRL0[12] === 1'bz) || CH2_TXCTRL0[12]; // rv 1
  assign CH2_TXCTRL0_in[13] = (CH2_TXCTRL0[13] === 1'bz) || CH2_TXCTRL0[13]; // rv 1
  assign CH2_TXCTRL0_in[14] = (CH2_TXCTRL0[14] === 1'bz) || CH2_TXCTRL0[14]; // rv 1
  assign CH2_TXCTRL0_in[15] = (CH2_TXCTRL0[15] === 1'bz) || CH2_TXCTRL0[15]; // rv 1
  assign CH2_TXCTRL0_in[1] = (CH2_TXCTRL0[1] === 1'bz) || CH2_TXCTRL0[1]; // rv 1
  assign CH2_TXCTRL0_in[2] = (CH2_TXCTRL0[2] === 1'bz) || CH2_TXCTRL0[2]; // rv 1
  assign CH2_TXCTRL0_in[3] = (CH2_TXCTRL0[3] === 1'bz) || CH2_TXCTRL0[3]; // rv 1
  assign CH2_TXCTRL0_in[4] = (CH2_TXCTRL0[4] === 1'bz) || CH2_TXCTRL0[4]; // rv 1
  assign CH2_TXCTRL0_in[5] = (CH2_TXCTRL0[5] === 1'bz) || CH2_TXCTRL0[5]; // rv 1
  assign CH2_TXCTRL0_in[6] = (CH2_TXCTRL0[6] === 1'bz) || CH2_TXCTRL0[6]; // rv 1
  assign CH2_TXCTRL0_in[7] = (CH2_TXCTRL0[7] === 1'bz) || CH2_TXCTRL0[7]; // rv 1
  assign CH2_TXCTRL0_in[8] = (CH2_TXCTRL0[8] === 1'bz) || CH2_TXCTRL0[8]; // rv 1
  assign CH2_TXCTRL0_in[9] = (CH2_TXCTRL0[9] === 1'bz) || CH2_TXCTRL0[9]; // rv 1
  assign CH2_TXCTRL1_in[0] = (CH2_TXCTRL1[0] === 1'bz) || CH2_TXCTRL1[0]; // rv 1
  assign CH2_TXCTRL1_in[10] = (CH2_TXCTRL1[10] === 1'bz) || CH2_TXCTRL1[10]; // rv 1
  assign CH2_TXCTRL1_in[11] = (CH2_TXCTRL1[11] === 1'bz) || CH2_TXCTRL1[11]; // rv 1
  assign CH2_TXCTRL1_in[12] = (CH2_TXCTRL1[12] === 1'bz) || CH2_TXCTRL1[12]; // rv 1
  assign CH2_TXCTRL1_in[13] = (CH2_TXCTRL1[13] === 1'bz) || CH2_TXCTRL1[13]; // rv 1
  assign CH2_TXCTRL1_in[14] = (CH2_TXCTRL1[14] === 1'bz) || CH2_TXCTRL1[14]; // rv 1
  assign CH2_TXCTRL1_in[15] = (CH2_TXCTRL1[15] === 1'bz) || CH2_TXCTRL1[15]; // rv 1
  assign CH2_TXCTRL1_in[1] = (CH2_TXCTRL1[1] === 1'bz) || CH2_TXCTRL1[1]; // rv 1
  assign CH2_TXCTRL1_in[2] = (CH2_TXCTRL1[2] === 1'bz) || CH2_TXCTRL1[2]; // rv 1
  assign CH2_TXCTRL1_in[3] = (CH2_TXCTRL1[3] === 1'bz) || CH2_TXCTRL1[3]; // rv 1
  assign CH2_TXCTRL1_in[4] = (CH2_TXCTRL1[4] === 1'bz) || CH2_TXCTRL1[4]; // rv 1
  assign CH2_TXCTRL1_in[5] = (CH2_TXCTRL1[5] === 1'bz) || CH2_TXCTRL1[5]; // rv 1
  assign CH2_TXCTRL1_in[6] = (CH2_TXCTRL1[6] === 1'bz) || CH2_TXCTRL1[6]; // rv 1
  assign CH2_TXCTRL1_in[7] = (CH2_TXCTRL1[7] === 1'bz) || CH2_TXCTRL1[7]; // rv 1
  assign CH2_TXCTRL1_in[8] = (CH2_TXCTRL1[8] === 1'bz) || CH2_TXCTRL1[8]; // rv 1
  assign CH2_TXCTRL1_in[9] = (CH2_TXCTRL1[9] === 1'bz) || CH2_TXCTRL1[9]; // rv 1
  assign CH2_TXCTRL2_in[0] = (CH2_TXCTRL2[0] === 1'bz) || CH2_TXCTRL2[0]; // rv 1
  assign CH2_TXCTRL2_in[1] = (CH2_TXCTRL2[1] === 1'bz) || CH2_TXCTRL2[1]; // rv 1
  assign CH2_TXCTRL2_in[2] = (CH2_TXCTRL2[2] === 1'bz) || CH2_TXCTRL2[2]; // rv 1
  assign CH2_TXCTRL2_in[3] = (CH2_TXCTRL2[3] === 1'bz) || CH2_TXCTRL2[3]; // rv 1
  assign CH2_TXCTRL2_in[4] = (CH2_TXCTRL2[4] === 1'bz) || CH2_TXCTRL2[4]; // rv 1
  assign CH2_TXCTRL2_in[5] = (CH2_TXCTRL2[5] === 1'bz) || CH2_TXCTRL2[5]; // rv 1
  assign CH2_TXCTRL2_in[6] = (CH2_TXCTRL2[6] === 1'bz) || CH2_TXCTRL2[6]; // rv 1
  assign CH2_TXCTRL2_in[7] = (CH2_TXCTRL2[7] === 1'bz) || CH2_TXCTRL2[7]; // rv 1
  assign CH2_TXDATA_in[0] = (CH2_TXDATA[0] === 1'bz) || CH2_TXDATA[0]; // rv 1
  assign CH2_TXDATA_in[100] = (CH2_TXDATA[100] === 1'bz) || CH2_TXDATA[100]; // rv 1
  assign CH2_TXDATA_in[101] = (CH2_TXDATA[101] === 1'bz) || CH2_TXDATA[101]; // rv 1
  assign CH2_TXDATA_in[102] = (CH2_TXDATA[102] === 1'bz) || CH2_TXDATA[102]; // rv 1
  assign CH2_TXDATA_in[103] = (CH2_TXDATA[103] === 1'bz) || CH2_TXDATA[103]; // rv 1
  assign CH2_TXDATA_in[104] = (CH2_TXDATA[104] === 1'bz) || CH2_TXDATA[104]; // rv 1
  assign CH2_TXDATA_in[105] = (CH2_TXDATA[105] === 1'bz) || CH2_TXDATA[105]; // rv 1
  assign CH2_TXDATA_in[106] = (CH2_TXDATA[106] === 1'bz) || CH2_TXDATA[106]; // rv 1
  assign CH2_TXDATA_in[107] = (CH2_TXDATA[107] === 1'bz) || CH2_TXDATA[107]; // rv 1
  assign CH2_TXDATA_in[108] = (CH2_TXDATA[108] === 1'bz) || CH2_TXDATA[108]; // rv 1
  assign CH2_TXDATA_in[109] = (CH2_TXDATA[109] === 1'bz) || CH2_TXDATA[109]; // rv 1
  assign CH2_TXDATA_in[10] = (CH2_TXDATA[10] === 1'bz) || CH2_TXDATA[10]; // rv 1
  assign CH2_TXDATA_in[110] = (CH2_TXDATA[110] === 1'bz) || CH2_TXDATA[110]; // rv 1
  assign CH2_TXDATA_in[111] = (CH2_TXDATA[111] === 1'bz) || CH2_TXDATA[111]; // rv 1
  assign CH2_TXDATA_in[112] = (CH2_TXDATA[112] === 1'bz) || CH2_TXDATA[112]; // rv 1
  assign CH2_TXDATA_in[113] = (CH2_TXDATA[113] === 1'bz) || CH2_TXDATA[113]; // rv 1
  assign CH2_TXDATA_in[114] = (CH2_TXDATA[114] === 1'bz) || CH2_TXDATA[114]; // rv 1
  assign CH2_TXDATA_in[115] = (CH2_TXDATA[115] === 1'bz) || CH2_TXDATA[115]; // rv 1
  assign CH2_TXDATA_in[116] = (CH2_TXDATA[116] === 1'bz) || CH2_TXDATA[116]; // rv 1
  assign CH2_TXDATA_in[117] = (CH2_TXDATA[117] === 1'bz) || CH2_TXDATA[117]; // rv 1
  assign CH2_TXDATA_in[118] = (CH2_TXDATA[118] === 1'bz) || CH2_TXDATA[118]; // rv 1
  assign CH2_TXDATA_in[119] = (CH2_TXDATA[119] === 1'bz) || CH2_TXDATA[119]; // rv 1
  assign CH2_TXDATA_in[11] = (CH2_TXDATA[11] === 1'bz) || CH2_TXDATA[11]; // rv 1
  assign CH2_TXDATA_in[120] = (CH2_TXDATA[120] === 1'bz) || CH2_TXDATA[120]; // rv 1
  assign CH2_TXDATA_in[121] = (CH2_TXDATA[121] === 1'bz) || CH2_TXDATA[121]; // rv 1
  assign CH2_TXDATA_in[122] = (CH2_TXDATA[122] === 1'bz) || CH2_TXDATA[122]; // rv 1
  assign CH2_TXDATA_in[123] = (CH2_TXDATA[123] === 1'bz) || CH2_TXDATA[123]; // rv 1
  assign CH2_TXDATA_in[124] = (CH2_TXDATA[124] === 1'bz) || CH2_TXDATA[124]; // rv 1
  assign CH2_TXDATA_in[125] = (CH2_TXDATA[125] === 1'bz) || CH2_TXDATA[125]; // rv 1
  assign CH2_TXDATA_in[126] = (CH2_TXDATA[126] === 1'bz) || CH2_TXDATA[126]; // rv 1
  assign CH2_TXDATA_in[127] = (CH2_TXDATA[127] === 1'bz) || CH2_TXDATA[127]; // rv 1
  assign CH2_TXDATA_in[12] = (CH2_TXDATA[12] === 1'bz) || CH2_TXDATA[12]; // rv 1
  assign CH2_TXDATA_in[13] = (CH2_TXDATA[13] === 1'bz) || CH2_TXDATA[13]; // rv 1
  assign CH2_TXDATA_in[14] = (CH2_TXDATA[14] === 1'bz) || CH2_TXDATA[14]; // rv 1
  assign CH2_TXDATA_in[15] = (CH2_TXDATA[15] === 1'bz) || CH2_TXDATA[15]; // rv 1
  assign CH2_TXDATA_in[16] = (CH2_TXDATA[16] === 1'bz) || CH2_TXDATA[16]; // rv 1
  assign CH2_TXDATA_in[17] = (CH2_TXDATA[17] === 1'bz) || CH2_TXDATA[17]; // rv 1
  assign CH2_TXDATA_in[18] = (CH2_TXDATA[18] === 1'bz) || CH2_TXDATA[18]; // rv 1
  assign CH2_TXDATA_in[19] = (CH2_TXDATA[19] === 1'bz) || CH2_TXDATA[19]; // rv 1
  assign CH2_TXDATA_in[1] = (CH2_TXDATA[1] === 1'bz) || CH2_TXDATA[1]; // rv 1
  assign CH2_TXDATA_in[20] = (CH2_TXDATA[20] === 1'bz) || CH2_TXDATA[20]; // rv 1
  assign CH2_TXDATA_in[21] = (CH2_TXDATA[21] === 1'bz) || CH2_TXDATA[21]; // rv 1
  assign CH2_TXDATA_in[22] = (CH2_TXDATA[22] === 1'bz) || CH2_TXDATA[22]; // rv 1
  assign CH2_TXDATA_in[23] = (CH2_TXDATA[23] === 1'bz) || CH2_TXDATA[23]; // rv 1
  assign CH2_TXDATA_in[24] = (CH2_TXDATA[24] === 1'bz) || CH2_TXDATA[24]; // rv 1
  assign CH2_TXDATA_in[25] = (CH2_TXDATA[25] === 1'bz) || CH2_TXDATA[25]; // rv 1
  assign CH2_TXDATA_in[26] = (CH2_TXDATA[26] === 1'bz) || CH2_TXDATA[26]; // rv 1
  assign CH2_TXDATA_in[27] = (CH2_TXDATA[27] === 1'bz) || CH2_TXDATA[27]; // rv 1
  assign CH2_TXDATA_in[28] = (CH2_TXDATA[28] === 1'bz) || CH2_TXDATA[28]; // rv 1
  assign CH2_TXDATA_in[29] = (CH2_TXDATA[29] === 1'bz) || CH2_TXDATA[29]; // rv 1
  assign CH2_TXDATA_in[2] = (CH2_TXDATA[2] === 1'bz) || CH2_TXDATA[2]; // rv 1
  assign CH2_TXDATA_in[30] = (CH2_TXDATA[30] === 1'bz) || CH2_TXDATA[30]; // rv 1
  assign CH2_TXDATA_in[31] = (CH2_TXDATA[31] === 1'bz) || CH2_TXDATA[31]; // rv 1
  assign CH2_TXDATA_in[32] = (CH2_TXDATA[32] === 1'bz) || CH2_TXDATA[32]; // rv 1
  assign CH2_TXDATA_in[33] = (CH2_TXDATA[33] === 1'bz) || CH2_TXDATA[33]; // rv 1
  assign CH2_TXDATA_in[34] = (CH2_TXDATA[34] === 1'bz) || CH2_TXDATA[34]; // rv 1
  assign CH2_TXDATA_in[35] = (CH2_TXDATA[35] === 1'bz) || CH2_TXDATA[35]; // rv 1
  assign CH2_TXDATA_in[36] = (CH2_TXDATA[36] === 1'bz) || CH2_TXDATA[36]; // rv 1
  assign CH2_TXDATA_in[37] = (CH2_TXDATA[37] === 1'bz) || CH2_TXDATA[37]; // rv 1
  assign CH2_TXDATA_in[38] = (CH2_TXDATA[38] === 1'bz) || CH2_TXDATA[38]; // rv 1
  assign CH2_TXDATA_in[39] = (CH2_TXDATA[39] === 1'bz) || CH2_TXDATA[39]; // rv 1
  assign CH2_TXDATA_in[3] = (CH2_TXDATA[3] === 1'bz) || CH2_TXDATA[3]; // rv 1
  assign CH2_TXDATA_in[40] = (CH2_TXDATA[40] === 1'bz) || CH2_TXDATA[40]; // rv 1
  assign CH2_TXDATA_in[41] = (CH2_TXDATA[41] === 1'bz) || CH2_TXDATA[41]; // rv 1
  assign CH2_TXDATA_in[42] = (CH2_TXDATA[42] === 1'bz) || CH2_TXDATA[42]; // rv 1
  assign CH2_TXDATA_in[43] = (CH2_TXDATA[43] === 1'bz) || CH2_TXDATA[43]; // rv 1
  assign CH2_TXDATA_in[44] = (CH2_TXDATA[44] === 1'bz) || CH2_TXDATA[44]; // rv 1
  assign CH2_TXDATA_in[45] = (CH2_TXDATA[45] === 1'bz) || CH2_TXDATA[45]; // rv 1
  assign CH2_TXDATA_in[46] = (CH2_TXDATA[46] === 1'bz) || CH2_TXDATA[46]; // rv 1
  assign CH2_TXDATA_in[47] = (CH2_TXDATA[47] === 1'bz) || CH2_TXDATA[47]; // rv 1
  assign CH2_TXDATA_in[48] = (CH2_TXDATA[48] === 1'bz) || CH2_TXDATA[48]; // rv 1
  assign CH2_TXDATA_in[49] = (CH2_TXDATA[49] === 1'bz) || CH2_TXDATA[49]; // rv 1
  assign CH2_TXDATA_in[4] = (CH2_TXDATA[4] === 1'bz) || CH2_TXDATA[4]; // rv 1
  assign CH2_TXDATA_in[50] = (CH2_TXDATA[50] === 1'bz) || CH2_TXDATA[50]; // rv 1
  assign CH2_TXDATA_in[51] = (CH2_TXDATA[51] === 1'bz) || CH2_TXDATA[51]; // rv 1
  assign CH2_TXDATA_in[52] = (CH2_TXDATA[52] === 1'bz) || CH2_TXDATA[52]; // rv 1
  assign CH2_TXDATA_in[53] = (CH2_TXDATA[53] === 1'bz) || CH2_TXDATA[53]; // rv 1
  assign CH2_TXDATA_in[54] = (CH2_TXDATA[54] === 1'bz) || CH2_TXDATA[54]; // rv 1
  assign CH2_TXDATA_in[55] = (CH2_TXDATA[55] === 1'bz) || CH2_TXDATA[55]; // rv 1
  assign CH2_TXDATA_in[56] = (CH2_TXDATA[56] === 1'bz) || CH2_TXDATA[56]; // rv 1
  assign CH2_TXDATA_in[57] = (CH2_TXDATA[57] === 1'bz) || CH2_TXDATA[57]; // rv 1
  assign CH2_TXDATA_in[58] = (CH2_TXDATA[58] === 1'bz) || CH2_TXDATA[58]; // rv 1
  assign CH2_TXDATA_in[59] = (CH2_TXDATA[59] === 1'bz) || CH2_TXDATA[59]; // rv 1
  assign CH2_TXDATA_in[5] = (CH2_TXDATA[5] === 1'bz) || CH2_TXDATA[5]; // rv 1
  assign CH2_TXDATA_in[60] = (CH2_TXDATA[60] === 1'bz) || CH2_TXDATA[60]; // rv 1
  assign CH2_TXDATA_in[61] = (CH2_TXDATA[61] === 1'bz) || CH2_TXDATA[61]; // rv 1
  assign CH2_TXDATA_in[62] = (CH2_TXDATA[62] === 1'bz) || CH2_TXDATA[62]; // rv 1
  assign CH2_TXDATA_in[63] = (CH2_TXDATA[63] === 1'bz) || CH2_TXDATA[63]; // rv 1
  assign CH2_TXDATA_in[64] = (CH2_TXDATA[64] === 1'bz) || CH2_TXDATA[64]; // rv 1
  assign CH2_TXDATA_in[65] = (CH2_TXDATA[65] === 1'bz) || CH2_TXDATA[65]; // rv 1
  assign CH2_TXDATA_in[66] = (CH2_TXDATA[66] === 1'bz) || CH2_TXDATA[66]; // rv 1
  assign CH2_TXDATA_in[67] = (CH2_TXDATA[67] === 1'bz) || CH2_TXDATA[67]; // rv 1
  assign CH2_TXDATA_in[68] = (CH2_TXDATA[68] === 1'bz) || CH2_TXDATA[68]; // rv 1
  assign CH2_TXDATA_in[69] = (CH2_TXDATA[69] === 1'bz) || CH2_TXDATA[69]; // rv 1
  assign CH2_TXDATA_in[6] = (CH2_TXDATA[6] === 1'bz) || CH2_TXDATA[6]; // rv 1
  assign CH2_TXDATA_in[70] = (CH2_TXDATA[70] === 1'bz) || CH2_TXDATA[70]; // rv 1
  assign CH2_TXDATA_in[71] = (CH2_TXDATA[71] === 1'bz) || CH2_TXDATA[71]; // rv 1
  assign CH2_TXDATA_in[72] = (CH2_TXDATA[72] === 1'bz) || CH2_TXDATA[72]; // rv 1
  assign CH2_TXDATA_in[73] = (CH2_TXDATA[73] === 1'bz) || CH2_TXDATA[73]; // rv 1
  assign CH2_TXDATA_in[74] = (CH2_TXDATA[74] === 1'bz) || CH2_TXDATA[74]; // rv 1
  assign CH2_TXDATA_in[75] = (CH2_TXDATA[75] === 1'bz) || CH2_TXDATA[75]; // rv 1
  assign CH2_TXDATA_in[76] = (CH2_TXDATA[76] === 1'bz) || CH2_TXDATA[76]; // rv 1
  assign CH2_TXDATA_in[77] = (CH2_TXDATA[77] === 1'bz) || CH2_TXDATA[77]; // rv 1
  assign CH2_TXDATA_in[78] = (CH2_TXDATA[78] === 1'bz) || CH2_TXDATA[78]; // rv 1
  assign CH2_TXDATA_in[79] = (CH2_TXDATA[79] === 1'bz) || CH2_TXDATA[79]; // rv 1
  assign CH2_TXDATA_in[7] = (CH2_TXDATA[7] === 1'bz) || CH2_TXDATA[7]; // rv 1
  assign CH2_TXDATA_in[80] = (CH2_TXDATA[80] === 1'bz) || CH2_TXDATA[80]; // rv 1
  assign CH2_TXDATA_in[81] = (CH2_TXDATA[81] === 1'bz) || CH2_TXDATA[81]; // rv 1
  assign CH2_TXDATA_in[82] = (CH2_TXDATA[82] === 1'bz) || CH2_TXDATA[82]; // rv 1
  assign CH2_TXDATA_in[83] = (CH2_TXDATA[83] === 1'bz) || CH2_TXDATA[83]; // rv 1
  assign CH2_TXDATA_in[84] = (CH2_TXDATA[84] === 1'bz) || CH2_TXDATA[84]; // rv 1
  assign CH2_TXDATA_in[85] = (CH2_TXDATA[85] === 1'bz) || CH2_TXDATA[85]; // rv 1
  assign CH2_TXDATA_in[86] = (CH2_TXDATA[86] === 1'bz) || CH2_TXDATA[86]; // rv 1
  assign CH2_TXDATA_in[87] = (CH2_TXDATA[87] === 1'bz) || CH2_TXDATA[87]; // rv 1
  assign CH2_TXDATA_in[88] = (CH2_TXDATA[88] === 1'bz) || CH2_TXDATA[88]; // rv 1
  assign CH2_TXDATA_in[89] = (CH2_TXDATA[89] === 1'bz) || CH2_TXDATA[89]; // rv 1
  assign CH2_TXDATA_in[8] = (CH2_TXDATA[8] === 1'bz) || CH2_TXDATA[8]; // rv 1
  assign CH2_TXDATA_in[90] = (CH2_TXDATA[90] === 1'bz) || CH2_TXDATA[90]; // rv 1
  assign CH2_TXDATA_in[91] = (CH2_TXDATA[91] === 1'bz) || CH2_TXDATA[91]; // rv 1
  assign CH2_TXDATA_in[92] = (CH2_TXDATA[92] === 1'bz) || CH2_TXDATA[92]; // rv 1
  assign CH2_TXDATA_in[93] = (CH2_TXDATA[93] === 1'bz) || CH2_TXDATA[93]; // rv 1
  assign CH2_TXDATA_in[94] = (CH2_TXDATA[94] === 1'bz) || CH2_TXDATA[94]; // rv 1
  assign CH2_TXDATA_in[95] = (CH2_TXDATA[95] === 1'bz) || CH2_TXDATA[95]; // rv 1
  assign CH2_TXDATA_in[96] = (CH2_TXDATA[96] === 1'bz) || CH2_TXDATA[96]; // rv 1
  assign CH2_TXDATA_in[97] = (CH2_TXDATA[97] === 1'bz) || CH2_TXDATA[97]; // rv 1
  assign CH2_TXDATA_in[98] = (CH2_TXDATA[98] === 1'bz) || CH2_TXDATA[98]; // rv 1
  assign CH2_TXDATA_in[99] = (CH2_TXDATA[99] === 1'bz) || CH2_TXDATA[99]; // rv 1
  assign CH2_TXDATA_in[9] = (CH2_TXDATA[9] === 1'bz) || CH2_TXDATA[9]; // rv 1
  assign CH2_TXDETECTRX_in = (CH2_TXDETECTRX === 1'bz) || CH2_TXDETECTRX; // rv 1
  assign CH2_TXELECIDLE_in = (CH2_TXELECIDLE === 1'bz) || CH2_TXELECIDLE; // rv 1
  assign CH2_TXHEADER_in[0] = (CH2_TXHEADER[0] === 1'bz) || CH2_TXHEADER[0]; // rv 1
  assign CH2_TXHEADER_in[1] = (CH2_TXHEADER[1] === 1'bz) || CH2_TXHEADER[1]; // rv 1
  assign CH2_TXHEADER_in[2] = (CH2_TXHEADER[2] === 1'bz) || CH2_TXHEADER[2]; // rv 1
  assign CH2_TXHEADER_in[3] = (CH2_TXHEADER[3] === 1'bz) || CH2_TXHEADER[3]; // rv 1
  assign CH2_TXHEADER_in[4] = (CH2_TXHEADER[4] === 1'bz) || CH2_TXHEADER[4]; // rv 1
  assign CH2_TXHEADER_in[5] = (CH2_TXHEADER[5] === 1'bz) || CH2_TXHEADER[5]; // rv 1
  assign CH2_TXINHIBIT_in = (CH2_TXINHIBIT === 1'bz) || CH2_TXINHIBIT; // rv 1
  assign CH2_TXPD_in[0] = (CH2_TXPD[0] === 1'bz) || CH2_TXPD[0]; // rv 1
  assign CH2_TXPD_in[1] = (CH2_TXPD[1] === 1'bz) || CH2_TXPD[1]; // rv 1
  assign CH2_TXPIPPMEN_in = (CH2_TXPIPPMEN === 1'bz) || CH2_TXPIPPMEN; // rv 1
  assign CH2_TXPIPPMSTEPSIZE_in[0] = (CH2_TXPIPPMSTEPSIZE[0] === 1'bz) || CH2_TXPIPPMSTEPSIZE[0]; // rv 1
  assign CH2_TXPIPPMSTEPSIZE_in[1] = (CH2_TXPIPPMSTEPSIZE[1] === 1'bz) || CH2_TXPIPPMSTEPSIZE[1]; // rv 1
  assign CH2_TXPIPPMSTEPSIZE_in[2] = (CH2_TXPIPPMSTEPSIZE[2] === 1'bz) || CH2_TXPIPPMSTEPSIZE[2]; // rv 1
  assign CH2_TXPIPPMSTEPSIZE_in[3] = (CH2_TXPIPPMSTEPSIZE[3] === 1'bz) || CH2_TXPIPPMSTEPSIZE[3]; // rv 1
  assign CH2_TXPIPPMSTEPSIZE_in[4] = (CH2_TXPIPPMSTEPSIZE[4] === 1'bz) || CH2_TXPIPPMSTEPSIZE[4]; // rv 1
  assign CH2_TXPOLARITY_in = (CH2_TXPOLARITY === 1'bz) || CH2_TXPOLARITY; // rv 1
  assign CH2_TXRATE_in[0] = (CH2_TXRATE[0] === 1'bz) || CH2_TXRATE[0]; // rv 1
  assign CH2_TXRATE_in[1] = (CH2_TXRATE[1] === 1'bz) || CH2_TXRATE[1]; // rv 1
  assign CH2_TXRATE_in[2] = (CH2_TXRATE[2] === 1'bz) || CH2_TXRATE[2]; // rv 1
  assign CH2_TXRATE_in[3] = (CH2_TXRATE[3] === 1'bz) || CH2_TXRATE[3]; // rv 1
  assign CH2_TXRATE_in[4] = (CH2_TXRATE[4] === 1'bz) || CH2_TXRATE[4]; // rv 1
  assign CH2_TXRATE_in[5] = (CH2_TXRATE[5] === 1'bz) || CH2_TXRATE[5]; // rv 1
  assign CH2_TXRATE_in[6] = (CH2_TXRATE[6] === 1'bz) || CH2_TXRATE[6]; // rv 1
  assign CH2_TXRATE_in[7] = (CH2_TXRATE[7] === 1'bz) || CH2_TXRATE[7]; // rv 1
  assign CH2_TXSEQUENCE_in[0] = (CH2_TXSEQUENCE[0] === 1'bz) || CH2_TXSEQUENCE[0]; // rv 1
  assign CH2_TXSEQUENCE_in[1] = (CH2_TXSEQUENCE[1] === 1'bz) || CH2_TXSEQUENCE[1]; // rv 1
  assign CH2_TXSEQUENCE_in[2] = (CH2_TXSEQUENCE[2] === 1'bz) || CH2_TXSEQUENCE[2]; // rv 1
  assign CH2_TXSEQUENCE_in[3] = (CH2_TXSEQUENCE[3] === 1'bz) || CH2_TXSEQUENCE[3]; // rv 1
  assign CH2_TXSEQUENCE_in[4] = (CH2_TXSEQUENCE[4] === 1'bz) || CH2_TXSEQUENCE[4]; // rv 1
  assign CH2_TXSEQUENCE_in[5] = (CH2_TXSEQUENCE[5] === 1'bz) || CH2_TXSEQUENCE[5]; // rv 1
  assign CH2_TXSEQUENCE_in[6] = (CH2_TXSEQUENCE[6] === 1'bz) || CH2_TXSEQUENCE[6]; // rv 1
  assign CH2_TXUSRCLK_in = (CH2_TXUSRCLK === 1'bz) || CH2_TXUSRCLK; // rv 1
  assign CH3_EYESCANTRIGGER_in = (CH3_EYESCANTRIGGER === 1'bz) || CH3_EYESCANTRIGGER; // rv 1
  assign CH3_PHYESMADAPTSAVE_in = (CH3_PHYESMADAPTSAVE === 1'bz) || CH3_PHYESMADAPTSAVE; // rv 1
  assign CH3_RXCHBONDI_in[0] = (CH3_RXCHBONDI[0] === 1'bz) || CH3_RXCHBONDI[0]; // rv 1
  assign CH3_RXCHBONDI_in[1] = (CH3_RXCHBONDI[1] === 1'bz) || CH3_RXCHBONDI[1]; // rv 1
  assign CH3_RXCHBONDI_in[2] = (CH3_RXCHBONDI[2] === 1'bz) || CH3_RXCHBONDI[2]; // rv 1
  assign CH3_RXCHBONDI_in[3] = (CH3_RXCHBONDI[3] === 1'bz) || CH3_RXCHBONDI[3]; // rv 1
  assign CH3_RXCHBONDI_in[4] = (CH3_RXCHBONDI[4] === 1'bz) || CH3_RXCHBONDI[4]; // rv 1
  assign CH3_RXDLYALIGNREQ_in = (CH3_RXDLYALIGNREQ === 1'bz) || CH3_RXDLYALIGNREQ; // rv 1
  assign CH3_RXEQTRAINING_in = (CH3_RXEQTRAINING === 1'bz) || CH3_RXEQTRAINING; // rv 1
  assign CH3_RXGEARBOXSLIP_in = (CH3_RXGEARBOXSLIP === 1'bz) || CH3_RXGEARBOXSLIP; // rv 1
  assign CH3_RXMLDCHAINDONE_in = (CH3_RXMLDCHAINDONE === 1'bz) || CH3_RXMLDCHAINDONE; // rv 1
  assign CH3_RXMLDCHAINREQ_in = (CH3_RXMLDCHAINREQ === 1'bz) || CH3_RXMLDCHAINREQ; // rv 1
  assign CH3_RXPD_in[0] = (CH3_RXPD[0] === 1'bz) || CH3_RXPD[0]; // rv 1
  assign CH3_RXPD_in[1] = (CH3_RXPD[1] === 1'bz) || CH3_RXPD[1]; // rv 1
  assign CH3_RXPHALIGNREQ_in = (CH3_RXPHALIGNREQ === 1'bz) || CH3_RXPHALIGNREQ; // rv 1
  assign CH3_RXPHSETINITREQ_in = (CH3_RXPHSETINITREQ === 1'bz) || CH3_RXPHSETINITREQ; // rv 1
  assign CH3_RXPHSHIFT180_in = (CH3_RXPHSHIFT180 === 1'bz) || CH3_RXPHSHIFT180; // rv 1
  assign CH3_RXPOLARITY_in = (CH3_RXPOLARITY === 1'bz) || CH3_RXPOLARITY; // rv 1
  assign CH3_RXRATE_in[0] = (CH3_RXRATE[0] === 1'bz) || CH3_RXRATE[0]; // rv 1
  assign CH3_RXRATE_in[1] = (CH3_RXRATE[1] === 1'bz) || CH3_RXRATE[1]; // rv 1
  assign CH3_RXRATE_in[2] = (CH3_RXRATE[2] === 1'bz) || CH3_RXRATE[2]; // rv 1
  assign CH3_RXRATE_in[3] = (CH3_RXRATE[3] === 1'bz) || CH3_RXRATE[3]; // rv 1
  assign CH3_RXRATE_in[4] = (CH3_RXRATE[4] === 1'bz) || CH3_RXRATE[4]; // rv 1
  assign CH3_RXRATE_in[5] = (CH3_RXRATE[5] === 1'bz) || CH3_RXRATE[5]; // rv 1
  assign CH3_RXRATE_in[6] = (CH3_RXRATE[6] === 1'bz) || CH3_RXRATE[6]; // rv 1
  assign CH3_RXRATE_in[7] = (CH3_RXRATE[7] === 1'bz) || CH3_RXRATE[7]; // rv 1
  assign CH3_RXSLIDE_in = (CH3_RXSLIDE === 1'bz) || CH3_RXSLIDE; // rv 1
  assign CH3_RXUSRCLK_in = (CH3_RXUSRCLK === 1'bz) || CH3_RXUSRCLK; // rv 1
  assign CH3_TXCOMINIT_in = (CH3_TXCOMINIT === 1'bz) || CH3_TXCOMINIT; // rv 1
  assign CH3_TXCOMSAS_in = (CH3_TXCOMSAS === 1'bz) || CH3_TXCOMSAS; // rv 1
  assign CH3_TXCOMWAKE_in = (CH3_TXCOMWAKE === 1'bz) || CH3_TXCOMWAKE; // rv 1
  assign CH3_TXCTRL0_in[0] = (CH3_TXCTRL0[0] === 1'bz) || CH3_TXCTRL0[0]; // rv 1
  assign CH3_TXCTRL0_in[10] = (CH3_TXCTRL0[10] === 1'bz) || CH3_TXCTRL0[10]; // rv 1
  assign CH3_TXCTRL0_in[11] = (CH3_TXCTRL0[11] === 1'bz) || CH3_TXCTRL0[11]; // rv 1
  assign CH3_TXCTRL0_in[12] = (CH3_TXCTRL0[12] === 1'bz) || CH3_TXCTRL0[12]; // rv 1
  assign CH3_TXCTRL0_in[13] = (CH3_TXCTRL0[13] === 1'bz) || CH3_TXCTRL0[13]; // rv 1
  assign CH3_TXCTRL0_in[14] = (CH3_TXCTRL0[14] === 1'bz) || CH3_TXCTRL0[14]; // rv 1
  assign CH3_TXCTRL0_in[15] = (CH3_TXCTRL0[15] === 1'bz) || CH3_TXCTRL0[15]; // rv 1
  assign CH3_TXCTRL0_in[1] = (CH3_TXCTRL0[1] === 1'bz) || CH3_TXCTRL0[1]; // rv 1
  assign CH3_TXCTRL0_in[2] = (CH3_TXCTRL0[2] === 1'bz) || CH3_TXCTRL0[2]; // rv 1
  assign CH3_TXCTRL0_in[3] = (CH3_TXCTRL0[3] === 1'bz) || CH3_TXCTRL0[3]; // rv 1
  assign CH3_TXCTRL0_in[4] = (CH3_TXCTRL0[4] === 1'bz) || CH3_TXCTRL0[4]; // rv 1
  assign CH3_TXCTRL0_in[5] = (CH3_TXCTRL0[5] === 1'bz) || CH3_TXCTRL0[5]; // rv 1
  assign CH3_TXCTRL0_in[6] = (CH3_TXCTRL0[6] === 1'bz) || CH3_TXCTRL0[6]; // rv 1
  assign CH3_TXCTRL0_in[7] = (CH3_TXCTRL0[7] === 1'bz) || CH3_TXCTRL0[7]; // rv 1
  assign CH3_TXCTRL0_in[8] = (CH3_TXCTRL0[8] === 1'bz) || CH3_TXCTRL0[8]; // rv 1
  assign CH3_TXCTRL0_in[9] = (CH3_TXCTRL0[9] === 1'bz) || CH3_TXCTRL0[9]; // rv 1
  assign CH3_TXCTRL1_in[0] = (CH3_TXCTRL1[0] === 1'bz) || CH3_TXCTRL1[0]; // rv 1
  assign CH3_TXCTRL1_in[10] = (CH3_TXCTRL1[10] === 1'bz) || CH3_TXCTRL1[10]; // rv 1
  assign CH3_TXCTRL1_in[11] = (CH3_TXCTRL1[11] === 1'bz) || CH3_TXCTRL1[11]; // rv 1
  assign CH3_TXCTRL1_in[12] = (CH3_TXCTRL1[12] === 1'bz) || CH3_TXCTRL1[12]; // rv 1
  assign CH3_TXCTRL1_in[13] = (CH3_TXCTRL1[13] === 1'bz) || CH3_TXCTRL1[13]; // rv 1
  assign CH3_TXCTRL1_in[14] = (CH3_TXCTRL1[14] === 1'bz) || CH3_TXCTRL1[14]; // rv 1
  assign CH3_TXCTRL1_in[15] = (CH3_TXCTRL1[15] === 1'bz) || CH3_TXCTRL1[15]; // rv 1
  assign CH3_TXCTRL1_in[1] = (CH3_TXCTRL1[1] === 1'bz) || CH3_TXCTRL1[1]; // rv 1
  assign CH3_TXCTRL1_in[2] = (CH3_TXCTRL1[2] === 1'bz) || CH3_TXCTRL1[2]; // rv 1
  assign CH3_TXCTRL1_in[3] = (CH3_TXCTRL1[3] === 1'bz) || CH3_TXCTRL1[3]; // rv 1
  assign CH3_TXCTRL1_in[4] = (CH3_TXCTRL1[4] === 1'bz) || CH3_TXCTRL1[4]; // rv 1
  assign CH3_TXCTRL1_in[5] = (CH3_TXCTRL1[5] === 1'bz) || CH3_TXCTRL1[5]; // rv 1
  assign CH3_TXCTRL1_in[6] = (CH3_TXCTRL1[6] === 1'bz) || CH3_TXCTRL1[6]; // rv 1
  assign CH3_TXCTRL1_in[7] = (CH3_TXCTRL1[7] === 1'bz) || CH3_TXCTRL1[7]; // rv 1
  assign CH3_TXCTRL1_in[8] = (CH3_TXCTRL1[8] === 1'bz) || CH3_TXCTRL1[8]; // rv 1
  assign CH3_TXCTRL1_in[9] = (CH3_TXCTRL1[9] === 1'bz) || CH3_TXCTRL1[9]; // rv 1
  assign CH3_TXCTRL2_in[0] = (CH3_TXCTRL2[0] === 1'bz) || CH3_TXCTRL2[0]; // rv 1
  assign CH3_TXCTRL2_in[1] = (CH3_TXCTRL2[1] === 1'bz) || CH3_TXCTRL2[1]; // rv 1
  assign CH3_TXCTRL2_in[2] = (CH3_TXCTRL2[2] === 1'bz) || CH3_TXCTRL2[2]; // rv 1
  assign CH3_TXCTRL2_in[3] = (CH3_TXCTRL2[3] === 1'bz) || CH3_TXCTRL2[3]; // rv 1
  assign CH3_TXCTRL2_in[4] = (CH3_TXCTRL2[4] === 1'bz) || CH3_TXCTRL2[4]; // rv 1
  assign CH3_TXCTRL2_in[5] = (CH3_TXCTRL2[5] === 1'bz) || CH3_TXCTRL2[5]; // rv 1
  assign CH3_TXCTRL2_in[6] = (CH3_TXCTRL2[6] === 1'bz) || CH3_TXCTRL2[6]; // rv 1
  assign CH3_TXCTRL2_in[7] = (CH3_TXCTRL2[7] === 1'bz) || CH3_TXCTRL2[7]; // rv 1
  assign CH3_TXDATA_in[0] = (CH3_TXDATA[0] === 1'bz) || CH3_TXDATA[0]; // rv 1
  assign CH3_TXDATA_in[100] = (CH3_TXDATA[100] === 1'bz) || CH3_TXDATA[100]; // rv 1
  assign CH3_TXDATA_in[101] = (CH3_TXDATA[101] === 1'bz) || CH3_TXDATA[101]; // rv 1
  assign CH3_TXDATA_in[102] = (CH3_TXDATA[102] === 1'bz) || CH3_TXDATA[102]; // rv 1
  assign CH3_TXDATA_in[103] = (CH3_TXDATA[103] === 1'bz) || CH3_TXDATA[103]; // rv 1
  assign CH3_TXDATA_in[104] = (CH3_TXDATA[104] === 1'bz) || CH3_TXDATA[104]; // rv 1
  assign CH3_TXDATA_in[105] = (CH3_TXDATA[105] === 1'bz) || CH3_TXDATA[105]; // rv 1
  assign CH3_TXDATA_in[106] = (CH3_TXDATA[106] === 1'bz) || CH3_TXDATA[106]; // rv 1
  assign CH3_TXDATA_in[107] = (CH3_TXDATA[107] === 1'bz) || CH3_TXDATA[107]; // rv 1
  assign CH3_TXDATA_in[108] = (CH3_TXDATA[108] === 1'bz) || CH3_TXDATA[108]; // rv 1
  assign CH3_TXDATA_in[109] = (CH3_TXDATA[109] === 1'bz) || CH3_TXDATA[109]; // rv 1
  assign CH3_TXDATA_in[10] = (CH3_TXDATA[10] === 1'bz) || CH3_TXDATA[10]; // rv 1
  assign CH3_TXDATA_in[110] = (CH3_TXDATA[110] === 1'bz) || CH3_TXDATA[110]; // rv 1
  assign CH3_TXDATA_in[111] = (CH3_TXDATA[111] === 1'bz) || CH3_TXDATA[111]; // rv 1
  assign CH3_TXDATA_in[112] = (CH3_TXDATA[112] === 1'bz) || CH3_TXDATA[112]; // rv 1
  assign CH3_TXDATA_in[113] = (CH3_TXDATA[113] === 1'bz) || CH3_TXDATA[113]; // rv 1
  assign CH3_TXDATA_in[114] = (CH3_TXDATA[114] === 1'bz) || CH3_TXDATA[114]; // rv 1
  assign CH3_TXDATA_in[115] = (CH3_TXDATA[115] === 1'bz) || CH3_TXDATA[115]; // rv 1
  assign CH3_TXDATA_in[116] = (CH3_TXDATA[116] === 1'bz) || CH3_TXDATA[116]; // rv 1
  assign CH3_TXDATA_in[117] = (CH3_TXDATA[117] === 1'bz) || CH3_TXDATA[117]; // rv 1
  assign CH3_TXDATA_in[118] = (CH3_TXDATA[118] === 1'bz) || CH3_TXDATA[118]; // rv 1
  assign CH3_TXDATA_in[119] = (CH3_TXDATA[119] === 1'bz) || CH3_TXDATA[119]; // rv 1
  assign CH3_TXDATA_in[11] = (CH3_TXDATA[11] === 1'bz) || CH3_TXDATA[11]; // rv 1
  assign CH3_TXDATA_in[120] = (CH3_TXDATA[120] === 1'bz) || CH3_TXDATA[120]; // rv 1
  assign CH3_TXDATA_in[121] = (CH3_TXDATA[121] === 1'bz) || CH3_TXDATA[121]; // rv 1
  assign CH3_TXDATA_in[122] = (CH3_TXDATA[122] === 1'bz) || CH3_TXDATA[122]; // rv 1
  assign CH3_TXDATA_in[123] = (CH3_TXDATA[123] === 1'bz) || CH3_TXDATA[123]; // rv 1
  assign CH3_TXDATA_in[124] = (CH3_TXDATA[124] === 1'bz) || CH3_TXDATA[124]; // rv 1
  assign CH3_TXDATA_in[125] = (CH3_TXDATA[125] === 1'bz) || CH3_TXDATA[125]; // rv 1
  assign CH3_TXDATA_in[126] = (CH3_TXDATA[126] === 1'bz) || CH3_TXDATA[126]; // rv 1
  assign CH3_TXDATA_in[127] = (CH3_TXDATA[127] === 1'bz) || CH3_TXDATA[127]; // rv 1
  assign CH3_TXDATA_in[12] = (CH3_TXDATA[12] === 1'bz) || CH3_TXDATA[12]; // rv 1
  assign CH3_TXDATA_in[13] = (CH3_TXDATA[13] === 1'bz) || CH3_TXDATA[13]; // rv 1
  assign CH3_TXDATA_in[14] = (CH3_TXDATA[14] === 1'bz) || CH3_TXDATA[14]; // rv 1
  assign CH3_TXDATA_in[15] = (CH3_TXDATA[15] === 1'bz) || CH3_TXDATA[15]; // rv 1
  assign CH3_TXDATA_in[16] = (CH3_TXDATA[16] === 1'bz) || CH3_TXDATA[16]; // rv 1
  assign CH3_TXDATA_in[17] = (CH3_TXDATA[17] === 1'bz) || CH3_TXDATA[17]; // rv 1
  assign CH3_TXDATA_in[18] = (CH3_TXDATA[18] === 1'bz) || CH3_TXDATA[18]; // rv 1
  assign CH3_TXDATA_in[19] = (CH3_TXDATA[19] === 1'bz) || CH3_TXDATA[19]; // rv 1
  assign CH3_TXDATA_in[1] = (CH3_TXDATA[1] === 1'bz) || CH3_TXDATA[1]; // rv 1
  assign CH3_TXDATA_in[20] = (CH3_TXDATA[20] === 1'bz) || CH3_TXDATA[20]; // rv 1
  assign CH3_TXDATA_in[21] = (CH3_TXDATA[21] === 1'bz) || CH3_TXDATA[21]; // rv 1
  assign CH3_TXDATA_in[22] = (CH3_TXDATA[22] === 1'bz) || CH3_TXDATA[22]; // rv 1
  assign CH3_TXDATA_in[23] = (CH3_TXDATA[23] === 1'bz) || CH3_TXDATA[23]; // rv 1
  assign CH3_TXDATA_in[24] = (CH3_TXDATA[24] === 1'bz) || CH3_TXDATA[24]; // rv 1
  assign CH3_TXDATA_in[25] = (CH3_TXDATA[25] === 1'bz) || CH3_TXDATA[25]; // rv 1
  assign CH3_TXDATA_in[26] = (CH3_TXDATA[26] === 1'bz) || CH3_TXDATA[26]; // rv 1
  assign CH3_TXDATA_in[27] = (CH3_TXDATA[27] === 1'bz) || CH3_TXDATA[27]; // rv 1
  assign CH3_TXDATA_in[28] = (CH3_TXDATA[28] === 1'bz) || CH3_TXDATA[28]; // rv 1
  assign CH3_TXDATA_in[29] = (CH3_TXDATA[29] === 1'bz) || CH3_TXDATA[29]; // rv 1
  assign CH3_TXDATA_in[2] = (CH3_TXDATA[2] === 1'bz) || CH3_TXDATA[2]; // rv 1
  assign CH3_TXDATA_in[30] = (CH3_TXDATA[30] === 1'bz) || CH3_TXDATA[30]; // rv 1
  assign CH3_TXDATA_in[31] = (CH3_TXDATA[31] === 1'bz) || CH3_TXDATA[31]; // rv 1
  assign CH3_TXDATA_in[32] = (CH3_TXDATA[32] === 1'bz) || CH3_TXDATA[32]; // rv 1
  assign CH3_TXDATA_in[33] = (CH3_TXDATA[33] === 1'bz) || CH3_TXDATA[33]; // rv 1
  assign CH3_TXDATA_in[34] = (CH3_TXDATA[34] === 1'bz) || CH3_TXDATA[34]; // rv 1
  assign CH3_TXDATA_in[35] = (CH3_TXDATA[35] === 1'bz) || CH3_TXDATA[35]; // rv 1
  assign CH3_TXDATA_in[36] = (CH3_TXDATA[36] === 1'bz) || CH3_TXDATA[36]; // rv 1
  assign CH3_TXDATA_in[37] = (CH3_TXDATA[37] === 1'bz) || CH3_TXDATA[37]; // rv 1
  assign CH3_TXDATA_in[38] = (CH3_TXDATA[38] === 1'bz) || CH3_TXDATA[38]; // rv 1
  assign CH3_TXDATA_in[39] = (CH3_TXDATA[39] === 1'bz) || CH3_TXDATA[39]; // rv 1
  assign CH3_TXDATA_in[3] = (CH3_TXDATA[3] === 1'bz) || CH3_TXDATA[3]; // rv 1
  assign CH3_TXDATA_in[40] = (CH3_TXDATA[40] === 1'bz) || CH3_TXDATA[40]; // rv 1
  assign CH3_TXDATA_in[41] = (CH3_TXDATA[41] === 1'bz) || CH3_TXDATA[41]; // rv 1
  assign CH3_TXDATA_in[42] = (CH3_TXDATA[42] === 1'bz) || CH3_TXDATA[42]; // rv 1
  assign CH3_TXDATA_in[43] = (CH3_TXDATA[43] === 1'bz) || CH3_TXDATA[43]; // rv 1
  assign CH3_TXDATA_in[44] = (CH3_TXDATA[44] === 1'bz) || CH3_TXDATA[44]; // rv 1
  assign CH3_TXDATA_in[45] = (CH3_TXDATA[45] === 1'bz) || CH3_TXDATA[45]; // rv 1
  assign CH3_TXDATA_in[46] = (CH3_TXDATA[46] === 1'bz) || CH3_TXDATA[46]; // rv 1
  assign CH3_TXDATA_in[47] = (CH3_TXDATA[47] === 1'bz) || CH3_TXDATA[47]; // rv 1
  assign CH3_TXDATA_in[48] = (CH3_TXDATA[48] === 1'bz) || CH3_TXDATA[48]; // rv 1
  assign CH3_TXDATA_in[49] = (CH3_TXDATA[49] === 1'bz) || CH3_TXDATA[49]; // rv 1
  assign CH3_TXDATA_in[4] = (CH3_TXDATA[4] === 1'bz) || CH3_TXDATA[4]; // rv 1
  assign CH3_TXDATA_in[50] = (CH3_TXDATA[50] === 1'bz) || CH3_TXDATA[50]; // rv 1
  assign CH3_TXDATA_in[51] = (CH3_TXDATA[51] === 1'bz) || CH3_TXDATA[51]; // rv 1
  assign CH3_TXDATA_in[52] = (CH3_TXDATA[52] === 1'bz) || CH3_TXDATA[52]; // rv 1
  assign CH3_TXDATA_in[53] = (CH3_TXDATA[53] === 1'bz) || CH3_TXDATA[53]; // rv 1
  assign CH3_TXDATA_in[54] = (CH3_TXDATA[54] === 1'bz) || CH3_TXDATA[54]; // rv 1
  assign CH3_TXDATA_in[55] = (CH3_TXDATA[55] === 1'bz) || CH3_TXDATA[55]; // rv 1
  assign CH3_TXDATA_in[56] = (CH3_TXDATA[56] === 1'bz) || CH3_TXDATA[56]; // rv 1
  assign CH3_TXDATA_in[57] = (CH3_TXDATA[57] === 1'bz) || CH3_TXDATA[57]; // rv 1
  assign CH3_TXDATA_in[58] = (CH3_TXDATA[58] === 1'bz) || CH3_TXDATA[58]; // rv 1
  assign CH3_TXDATA_in[59] = (CH3_TXDATA[59] === 1'bz) || CH3_TXDATA[59]; // rv 1
  assign CH3_TXDATA_in[5] = (CH3_TXDATA[5] === 1'bz) || CH3_TXDATA[5]; // rv 1
  assign CH3_TXDATA_in[60] = (CH3_TXDATA[60] === 1'bz) || CH3_TXDATA[60]; // rv 1
  assign CH3_TXDATA_in[61] = (CH3_TXDATA[61] === 1'bz) || CH3_TXDATA[61]; // rv 1
  assign CH3_TXDATA_in[62] = (CH3_TXDATA[62] === 1'bz) || CH3_TXDATA[62]; // rv 1
  assign CH3_TXDATA_in[63] = (CH3_TXDATA[63] === 1'bz) || CH3_TXDATA[63]; // rv 1
  assign CH3_TXDATA_in[64] = (CH3_TXDATA[64] === 1'bz) || CH3_TXDATA[64]; // rv 1
  assign CH3_TXDATA_in[65] = (CH3_TXDATA[65] === 1'bz) || CH3_TXDATA[65]; // rv 1
  assign CH3_TXDATA_in[66] = (CH3_TXDATA[66] === 1'bz) || CH3_TXDATA[66]; // rv 1
  assign CH3_TXDATA_in[67] = (CH3_TXDATA[67] === 1'bz) || CH3_TXDATA[67]; // rv 1
  assign CH3_TXDATA_in[68] = (CH3_TXDATA[68] === 1'bz) || CH3_TXDATA[68]; // rv 1
  assign CH3_TXDATA_in[69] = (CH3_TXDATA[69] === 1'bz) || CH3_TXDATA[69]; // rv 1
  assign CH3_TXDATA_in[6] = (CH3_TXDATA[6] === 1'bz) || CH3_TXDATA[6]; // rv 1
  assign CH3_TXDATA_in[70] = (CH3_TXDATA[70] === 1'bz) || CH3_TXDATA[70]; // rv 1
  assign CH3_TXDATA_in[71] = (CH3_TXDATA[71] === 1'bz) || CH3_TXDATA[71]; // rv 1
  assign CH3_TXDATA_in[72] = (CH3_TXDATA[72] === 1'bz) || CH3_TXDATA[72]; // rv 1
  assign CH3_TXDATA_in[73] = (CH3_TXDATA[73] === 1'bz) || CH3_TXDATA[73]; // rv 1
  assign CH3_TXDATA_in[74] = (CH3_TXDATA[74] === 1'bz) || CH3_TXDATA[74]; // rv 1
  assign CH3_TXDATA_in[75] = (CH3_TXDATA[75] === 1'bz) || CH3_TXDATA[75]; // rv 1
  assign CH3_TXDATA_in[76] = (CH3_TXDATA[76] === 1'bz) || CH3_TXDATA[76]; // rv 1
  assign CH3_TXDATA_in[77] = (CH3_TXDATA[77] === 1'bz) || CH3_TXDATA[77]; // rv 1
  assign CH3_TXDATA_in[78] = (CH3_TXDATA[78] === 1'bz) || CH3_TXDATA[78]; // rv 1
  assign CH3_TXDATA_in[79] = (CH3_TXDATA[79] === 1'bz) || CH3_TXDATA[79]; // rv 1
  assign CH3_TXDATA_in[7] = (CH3_TXDATA[7] === 1'bz) || CH3_TXDATA[7]; // rv 1
  assign CH3_TXDATA_in[80] = (CH3_TXDATA[80] === 1'bz) || CH3_TXDATA[80]; // rv 1
  assign CH3_TXDATA_in[81] = (CH3_TXDATA[81] === 1'bz) || CH3_TXDATA[81]; // rv 1
  assign CH3_TXDATA_in[82] = (CH3_TXDATA[82] === 1'bz) || CH3_TXDATA[82]; // rv 1
  assign CH3_TXDATA_in[83] = (CH3_TXDATA[83] === 1'bz) || CH3_TXDATA[83]; // rv 1
  assign CH3_TXDATA_in[84] = (CH3_TXDATA[84] === 1'bz) || CH3_TXDATA[84]; // rv 1
  assign CH3_TXDATA_in[85] = (CH3_TXDATA[85] === 1'bz) || CH3_TXDATA[85]; // rv 1
  assign CH3_TXDATA_in[86] = (CH3_TXDATA[86] === 1'bz) || CH3_TXDATA[86]; // rv 1
  assign CH3_TXDATA_in[87] = (CH3_TXDATA[87] === 1'bz) || CH3_TXDATA[87]; // rv 1
  assign CH3_TXDATA_in[88] = (CH3_TXDATA[88] === 1'bz) || CH3_TXDATA[88]; // rv 1
  assign CH3_TXDATA_in[89] = (CH3_TXDATA[89] === 1'bz) || CH3_TXDATA[89]; // rv 1
  assign CH3_TXDATA_in[8] = (CH3_TXDATA[8] === 1'bz) || CH3_TXDATA[8]; // rv 1
  assign CH3_TXDATA_in[90] = (CH3_TXDATA[90] === 1'bz) || CH3_TXDATA[90]; // rv 1
  assign CH3_TXDATA_in[91] = (CH3_TXDATA[91] === 1'bz) || CH3_TXDATA[91]; // rv 1
  assign CH3_TXDATA_in[92] = (CH3_TXDATA[92] === 1'bz) || CH3_TXDATA[92]; // rv 1
  assign CH3_TXDATA_in[93] = (CH3_TXDATA[93] === 1'bz) || CH3_TXDATA[93]; // rv 1
  assign CH3_TXDATA_in[94] = (CH3_TXDATA[94] === 1'bz) || CH3_TXDATA[94]; // rv 1
  assign CH3_TXDATA_in[95] = (CH3_TXDATA[95] === 1'bz) || CH3_TXDATA[95]; // rv 1
  assign CH3_TXDATA_in[96] = (CH3_TXDATA[96] === 1'bz) || CH3_TXDATA[96]; // rv 1
  assign CH3_TXDATA_in[97] = (CH3_TXDATA[97] === 1'bz) || CH3_TXDATA[97]; // rv 1
  assign CH3_TXDATA_in[98] = (CH3_TXDATA[98] === 1'bz) || CH3_TXDATA[98]; // rv 1
  assign CH3_TXDATA_in[99] = (CH3_TXDATA[99] === 1'bz) || CH3_TXDATA[99]; // rv 1
  assign CH3_TXDATA_in[9] = (CH3_TXDATA[9] === 1'bz) || CH3_TXDATA[9]; // rv 1
  assign CH3_TXDETECTRX_in = (CH3_TXDETECTRX === 1'bz) || CH3_TXDETECTRX; // rv 1
  assign CH3_TXELECIDLE_in = (CH3_TXELECIDLE === 1'bz) || CH3_TXELECIDLE; // rv 1
  assign CH3_TXHEADER_in[0] = (CH3_TXHEADER[0] === 1'bz) || CH3_TXHEADER[0]; // rv 1
  assign CH3_TXHEADER_in[1] = (CH3_TXHEADER[1] === 1'bz) || CH3_TXHEADER[1]; // rv 1
  assign CH3_TXHEADER_in[2] = (CH3_TXHEADER[2] === 1'bz) || CH3_TXHEADER[2]; // rv 1
  assign CH3_TXHEADER_in[3] = (CH3_TXHEADER[3] === 1'bz) || CH3_TXHEADER[3]; // rv 1
  assign CH3_TXHEADER_in[4] = (CH3_TXHEADER[4] === 1'bz) || CH3_TXHEADER[4]; // rv 1
  assign CH3_TXHEADER_in[5] = (CH3_TXHEADER[5] === 1'bz) || CH3_TXHEADER[5]; // rv 1
  assign CH3_TXINHIBIT_in = (CH3_TXINHIBIT === 1'bz) || CH3_TXINHIBIT; // rv 1
  assign CH3_TXPD_in[0] = (CH3_TXPD[0] === 1'bz) || CH3_TXPD[0]; // rv 1
  assign CH3_TXPD_in[1] = (CH3_TXPD[1] === 1'bz) || CH3_TXPD[1]; // rv 1
  assign CH3_TXPIPPMEN_in = (CH3_TXPIPPMEN === 1'bz) || CH3_TXPIPPMEN; // rv 1
  assign CH3_TXPIPPMSTEPSIZE_in[0] = (CH3_TXPIPPMSTEPSIZE[0] === 1'bz) || CH3_TXPIPPMSTEPSIZE[0]; // rv 1
  assign CH3_TXPIPPMSTEPSIZE_in[1] = (CH3_TXPIPPMSTEPSIZE[1] === 1'bz) || CH3_TXPIPPMSTEPSIZE[1]; // rv 1
  assign CH3_TXPIPPMSTEPSIZE_in[2] = (CH3_TXPIPPMSTEPSIZE[2] === 1'bz) || CH3_TXPIPPMSTEPSIZE[2]; // rv 1
  assign CH3_TXPIPPMSTEPSIZE_in[3] = (CH3_TXPIPPMSTEPSIZE[3] === 1'bz) || CH3_TXPIPPMSTEPSIZE[3]; // rv 1
  assign CH3_TXPIPPMSTEPSIZE_in[4] = (CH3_TXPIPPMSTEPSIZE[4] === 1'bz) || CH3_TXPIPPMSTEPSIZE[4]; // rv 1
  assign CH3_TXPOLARITY_in = (CH3_TXPOLARITY === 1'bz) || CH3_TXPOLARITY; // rv 1
  assign CH3_TXRATE_in[0] = (CH3_TXRATE[0] === 1'bz) || CH3_TXRATE[0]; // rv 1
  assign CH3_TXRATE_in[1] = (CH3_TXRATE[1] === 1'bz) || CH3_TXRATE[1]; // rv 1
  assign CH3_TXRATE_in[2] = (CH3_TXRATE[2] === 1'bz) || CH3_TXRATE[2]; // rv 1
  assign CH3_TXRATE_in[3] = (CH3_TXRATE[3] === 1'bz) || CH3_TXRATE[3]; // rv 1
  assign CH3_TXRATE_in[4] = (CH3_TXRATE[4] === 1'bz) || CH3_TXRATE[4]; // rv 1
  assign CH3_TXRATE_in[5] = (CH3_TXRATE[5] === 1'bz) || CH3_TXRATE[5]; // rv 1
  assign CH3_TXRATE_in[6] = (CH3_TXRATE[6] === 1'bz) || CH3_TXRATE[6]; // rv 1
  assign CH3_TXRATE_in[7] = (CH3_TXRATE[7] === 1'bz) || CH3_TXRATE[7]; // rv 1
  assign CH3_TXSEQUENCE_in[0] = (CH3_TXSEQUENCE[0] === 1'bz) || CH3_TXSEQUENCE[0]; // rv 1
  assign CH3_TXSEQUENCE_in[1] = (CH3_TXSEQUENCE[1] === 1'bz) || CH3_TXSEQUENCE[1]; // rv 1
  assign CH3_TXSEQUENCE_in[2] = (CH3_TXSEQUENCE[2] === 1'bz) || CH3_TXSEQUENCE[2]; // rv 1
  assign CH3_TXSEQUENCE_in[3] = (CH3_TXSEQUENCE[3] === 1'bz) || CH3_TXSEQUENCE[3]; // rv 1
  assign CH3_TXSEQUENCE_in[4] = (CH3_TXSEQUENCE[4] === 1'bz) || CH3_TXSEQUENCE[4]; // rv 1
  assign CH3_TXSEQUENCE_in[5] = (CH3_TXSEQUENCE[5] === 1'bz) || CH3_TXSEQUENCE[5]; // rv 1
  assign CH3_TXSEQUENCE_in[6] = (CH3_TXSEQUENCE[6] === 1'bz) || CH3_TXSEQUENCE[6]; // rv 1
  assign CH3_TXUSRCLK_in = (CH3_TXUSRCLK === 1'bz) || CH3_TXUSRCLK; // rv 1
  assign DEBUGTRACECLK_in = (DEBUGTRACECLK === 1'bz) || DEBUGTRACECLK; // rv 1
  assign DEBUGTRACEREADY_in = (DEBUGTRACEREADY === 1'bz) || DEBUGTRACEREADY; // rv 1
  assign M0_AXIS_TREADY_in = (M0_AXIS_TREADY === 1'bz) || M0_AXIS_TREADY; // rv 1
  assign M1_AXIS_TREADY_in = (M1_AXIS_TREADY === 1'bz) || M1_AXIS_TREADY; // rv 1
  assign M2_AXIS_TREADY_in = (M2_AXIS_TREADY === 1'bz) || M2_AXIS_TREADY; // rv 1
  assign PCIELTSSM_in[0] = (PCIELTSSM[0] === 1'bz) || PCIELTSSM[0]; // rv 1
  assign PCIELTSSM_in[1] = (PCIELTSSM[1] === 1'bz) || PCIELTSSM[1]; // rv 1
  assign PCIELTSSM_in[2] = (PCIELTSSM[2] === 1'bz) || PCIELTSSM[2]; // rv 1
  assign PCIELTSSM_in[3] = (PCIELTSSM[3] === 1'bz) || PCIELTSSM[3]; // rv 1
  assign PCIELTSSM_in[4] = (PCIELTSSM[4] === 1'bz) || PCIELTSSM[4]; // rv 1
  assign PCIELTSSM_in[5] = (PCIELTSSM[5] === 1'bz) || PCIELTSSM[5]; // rv 1
  assign RXMARGINCLK_in = (RXMARGINCLK === 1'bz) || RXMARGINCLK; // rv 1
  assign RXMARGINREQCMD_in[0] = (RXMARGINREQCMD[0] === 1'bz) || RXMARGINREQCMD[0]; // rv 1
  assign RXMARGINREQCMD_in[1] = (RXMARGINREQCMD[1] === 1'bz) || RXMARGINREQCMD[1]; // rv 1
  assign RXMARGINREQCMD_in[2] = (RXMARGINREQCMD[2] === 1'bz) || RXMARGINREQCMD[2]; // rv 1
  assign RXMARGINREQCMD_in[3] = (RXMARGINREQCMD[3] === 1'bz) || RXMARGINREQCMD[3]; // rv 1
  assign RXMARGINREQLANENUM_in[0] = (RXMARGINREQLANENUM[0] === 1'bz) || RXMARGINREQLANENUM[0]; // rv 1
  assign RXMARGINREQLANENUM_in[1] = (RXMARGINREQLANENUM[1] === 1'bz) || RXMARGINREQLANENUM[1]; // rv 1
  assign RXMARGINREQPAYLD_in[0] = (RXMARGINREQPAYLD[0] === 1'bz) || RXMARGINREQPAYLD[0]; // rv 1
  assign RXMARGINREQPAYLD_in[1] = (RXMARGINREQPAYLD[1] === 1'bz) || RXMARGINREQPAYLD[1]; // rv 1
  assign RXMARGINREQPAYLD_in[2] = (RXMARGINREQPAYLD[2] === 1'bz) || RXMARGINREQPAYLD[2]; // rv 1
  assign RXMARGINREQPAYLD_in[3] = (RXMARGINREQPAYLD[3] === 1'bz) || RXMARGINREQPAYLD[3]; // rv 1
  assign RXMARGINREQPAYLD_in[4] = (RXMARGINREQPAYLD[4] === 1'bz) || RXMARGINREQPAYLD[4]; // rv 1
  assign RXMARGINREQPAYLD_in[5] = (RXMARGINREQPAYLD[5] === 1'bz) || RXMARGINREQPAYLD[5]; // rv 1
  assign RXMARGINREQPAYLD_in[6] = (RXMARGINREQPAYLD[6] === 1'bz) || RXMARGINREQPAYLD[6]; // rv 1
  assign RXMARGINREQPAYLD_in[7] = (RXMARGINREQPAYLD[7] === 1'bz) || RXMARGINREQPAYLD[7]; // rv 1
  assign RXMARGINREQREQ_in = (RXMARGINREQREQ === 1'bz) || RXMARGINREQREQ; // rv 1
  assign RXMARGINRESACK_in = (RXMARGINRESACK === 1'bz) || RXMARGINRESACK; // rv 1
  assign S0_AXIS_TDATA_in[0] = (S0_AXIS_TDATA[0] === 1'bz) || S0_AXIS_TDATA[0]; // rv 1
  assign S0_AXIS_TDATA_in[10] = (S0_AXIS_TDATA[10] === 1'bz) || S0_AXIS_TDATA[10]; // rv 1
  assign S0_AXIS_TDATA_in[11] = (S0_AXIS_TDATA[11] === 1'bz) || S0_AXIS_TDATA[11]; // rv 1
  assign S0_AXIS_TDATA_in[12] = (S0_AXIS_TDATA[12] === 1'bz) || S0_AXIS_TDATA[12]; // rv 1
  assign S0_AXIS_TDATA_in[13] = (S0_AXIS_TDATA[13] === 1'bz) || S0_AXIS_TDATA[13]; // rv 1
  assign S0_AXIS_TDATA_in[14] = (S0_AXIS_TDATA[14] === 1'bz) || S0_AXIS_TDATA[14]; // rv 1
  assign S0_AXIS_TDATA_in[15] = (S0_AXIS_TDATA[15] === 1'bz) || S0_AXIS_TDATA[15]; // rv 1
  assign S0_AXIS_TDATA_in[16] = (S0_AXIS_TDATA[16] === 1'bz) || S0_AXIS_TDATA[16]; // rv 1
  assign S0_AXIS_TDATA_in[17] = (S0_AXIS_TDATA[17] === 1'bz) || S0_AXIS_TDATA[17]; // rv 1
  assign S0_AXIS_TDATA_in[18] = (S0_AXIS_TDATA[18] === 1'bz) || S0_AXIS_TDATA[18]; // rv 1
  assign S0_AXIS_TDATA_in[19] = (S0_AXIS_TDATA[19] === 1'bz) || S0_AXIS_TDATA[19]; // rv 1
  assign S0_AXIS_TDATA_in[1] = (S0_AXIS_TDATA[1] === 1'bz) || S0_AXIS_TDATA[1]; // rv 1
  assign S0_AXIS_TDATA_in[20] = (S0_AXIS_TDATA[20] === 1'bz) || S0_AXIS_TDATA[20]; // rv 1
  assign S0_AXIS_TDATA_in[21] = (S0_AXIS_TDATA[21] === 1'bz) || S0_AXIS_TDATA[21]; // rv 1
  assign S0_AXIS_TDATA_in[22] = (S0_AXIS_TDATA[22] === 1'bz) || S0_AXIS_TDATA[22]; // rv 1
  assign S0_AXIS_TDATA_in[23] = (S0_AXIS_TDATA[23] === 1'bz) || S0_AXIS_TDATA[23]; // rv 1
  assign S0_AXIS_TDATA_in[24] = (S0_AXIS_TDATA[24] === 1'bz) || S0_AXIS_TDATA[24]; // rv 1
  assign S0_AXIS_TDATA_in[25] = (S0_AXIS_TDATA[25] === 1'bz) || S0_AXIS_TDATA[25]; // rv 1
  assign S0_AXIS_TDATA_in[26] = (S0_AXIS_TDATA[26] === 1'bz) || S0_AXIS_TDATA[26]; // rv 1
  assign S0_AXIS_TDATA_in[27] = (S0_AXIS_TDATA[27] === 1'bz) || S0_AXIS_TDATA[27]; // rv 1
  assign S0_AXIS_TDATA_in[28] = (S0_AXIS_TDATA[28] === 1'bz) || S0_AXIS_TDATA[28]; // rv 1
  assign S0_AXIS_TDATA_in[29] = (S0_AXIS_TDATA[29] === 1'bz) || S0_AXIS_TDATA[29]; // rv 1
  assign S0_AXIS_TDATA_in[2] = (S0_AXIS_TDATA[2] === 1'bz) || S0_AXIS_TDATA[2]; // rv 1
  assign S0_AXIS_TDATA_in[30] = (S0_AXIS_TDATA[30] === 1'bz) || S0_AXIS_TDATA[30]; // rv 1
  assign S0_AXIS_TDATA_in[31] = (S0_AXIS_TDATA[31] === 1'bz) || S0_AXIS_TDATA[31]; // rv 1
  assign S0_AXIS_TDATA_in[3] = (S0_AXIS_TDATA[3] === 1'bz) || S0_AXIS_TDATA[3]; // rv 1
  assign S0_AXIS_TDATA_in[4] = (S0_AXIS_TDATA[4] === 1'bz) || S0_AXIS_TDATA[4]; // rv 1
  assign S0_AXIS_TDATA_in[5] = (S0_AXIS_TDATA[5] === 1'bz) || S0_AXIS_TDATA[5]; // rv 1
  assign S0_AXIS_TDATA_in[6] = (S0_AXIS_TDATA[6] === 1'bz) || S0_AXIS_TDATA[6]; // rv 1
  assign S0_AXIS_TDATA_in[7] = (S0_AXIS_TDATA[7] === 1'bz) || S0_AXIS_TDATA[7]; // rv 1
  assign S0_AXIS_TDATA_in[8] = (S0_AXIS_TDATA[8] === 1'bz) || S0_AXIS_TDATA[8]; // rv 1
  assign S0_AXIS_TDATA_in[9] = (S0_AXIS_TDATA[9] === 1'bz) || S0_AXIS_TDATA[9]; // rv 1
  assign S0_AXIS_TLAST_in = (S0_AXIS_TLAST === 1'bz) || S0_AXIS_TLAST; // rv 1
  assign S0_AXIS_TVALID_in = (S0_AXIS_TVALID === 1'bz) || S0_AXIS_TVALID; // rv 1
  assign S1_AXIS_TDATA_in[0] = (S1_AXIS_TDATA[0] === 1'bz) || S1_AXIS_TDATA[0]; // rv 1
  assign S1_AXIS_TDATA_in[10] = (S1_AXIS_TDATA[10] === 1'bz) || S1_AXIS_TDATA[10]; // rv 1
  assign S1_AXIS_TDATA_in[11] = (S1_AXIS_TDATA[11] === 1'bz) || S1_AXIS_TDATA[11]; // rv 1
  assign S1_AXIS_TDATA_in[12] = (S1_AXIS_TDATA[12] === 1'bz) || S1_AXIS_TDATA[12]; // rv 1
  assign S1_AXIS_TDATA_in[13] = (S1_AXIS_TDATA[13] === 1'bz) || S1_AXIS_TDATA[13]; // rv 1
  assign S1_AXIS_TDATA_in[14] = (S1_AXIS_TDATA[14] === 1'bz) || S1_AXIS_TDATA[14]; // rv 1
  assign S1_AXIS_TDATA_in[15] = (S1_AXIS_TDATA[15] === 1'bz) || S1_AXIS_TDATA[15]; // rv 1
  assign S1_AXIS_TDATA_in[16] = (S1_AXIS_TDATA[16] === 1'bz) || S1_AXIS_TDATA[16]; // rv 1
  assign S1_AXIS_TDATA_in[17] = (S1_AXIS_TDATA[17] === 1'bz) || S1_AXIS_TDATA[17]; // rv 1
  assign S1_AXIS_TDATA_in[18] = (S1_AXIS_TDATA[18] === 1'bz) || S1_AXIS_TDATA[18]; // rv 1
  assign S1_AXIS_TDATA_in[19] = (S1_AXIS_TDATA[19] === 1'bz) || S1_AXIS_TDATA[19]; // rv 1
  assign S1_AXIS_TDATA_in[1] = (S1_AXIS_TDATA[1] === 1'bz) || S1_AXIS_TDATA[1]; // rv 1
  assign S1_AXIS_TDATA_in[20] = (S1_AXIS_TDATA[20] === 1'bz) || S1_AXIS_TDATA[20]; // rv 1
  assign S1_AXIS_TDATA_in[21] = (S1_AXIS_TDATA[21] === 1'bz) || S1_AXIS_TDATA[21]; // rv 1
  assign S1_AXIS_TDATA_in[22] = (S1_AXIS_TDATA[22] === 1'bz) || S1_AXIS_TDATA[22]; // rv 1
  assign S1_AXIS_TDATA_in[23] = (S1_AXIS_TDATA[23] === 1'bz) || S1_AXIS_TDATA[23]; // rv 1
  assign S1_AXIS_TDATA_in[24] = (S1_AXIS_TDATA[24] === 1'bz) || S1_AXIS_TDATA[24]; // rv 1
  assign S1_AXIS_TDATA_in[25] = (S1_AXIS_TDATA[25] === 1'bz) || S1_AXIS_TDATA[25]; // rv 1
  assign S1_AXIS_TDATA_in[26] = (S1_AXIS_TDATA[26] === 1'bz) || S1_AXIS_TDATA[26]; // rv 1
  assign S1_AXIS_TDATA_in[27] = (S1_AXIS_TDATA[27] === 1'bz) || S1_AXIS_TDATA[27]; // rv 1
  assign S1_AXIS_TDATA_in[28] = (S1_AXIS_TDATA[28] === 1'bz) || S1_AXIS_TDATA[28]; // rv 1
  assign S1_AXIS_TDATA_in[29] = (S1_AXIS_TDATA[29] === 1'bz) || S1_AXIS_TDATA[29]; // rv 1
  assign S1_AXIS_TDATA_in[2] = (S1_AXIS_TDATA[2] === 1'bz) || S1_AXIS_TDATA[2]; // rv 1
  assign S1_AXIS_TDATA_in[30] = (S1_AXIS_TDATA[30] === 1'bz) || S1_AXIS_TDATA[30]; // rv 1
  assign S1_AXIS_TDATA_in[31] = (S1_AXIS_TDATA[31] === 1'bz) || S1_AXIS_TDATA[31]; // rv 1
  assign S1_AXIS_TDATA_in[3] = (S1_AXIS_TDATA[3] === 1'bz) || S1_AXIS_TDATA[3]; // rv 1
  assign S1_AXIS_TDATA_in[4] = (S1_AXIS_TDATA[4] === 1'bz) || S1_AXIS_TDATA[4]; // rv 1
  assign S1_AXIS_TDATA_in[5] = (S1_AXIS_TDATA[5] === 1'bz) || S1_AXIS_TDATA[5]; // rv 1
  assign S1_AXIS_TDATA_in[6] = (S1_AXIS_TDATA[6] === 1'bz) || S1_AXIS_TDATA[6]; // rv 1
  assign S1_AXIS_TDATA_in[7] = (S1_AXIS_TDATA[7] === 1'bz) || S1_AXIS_TDATA[7]; // rv 1
  assign S1_AXIS_TDATA_in[8] = (S1_AXIS_TDATA[8] === 1'bz) || S1_AXIS_TDATA[8]; // rv 1
  assign S1_AXIS_TDATA_in[9] = (S1_AXIS_TDATA[9] === 1'bz) || S1_AXIS_TDATA[9]; // rv 1
  assign S1_AXIS_TLAST_in = (S1_AXIS_TLAST === 1'bz) || S1_AXIS_TLAST; // rv 1
  assign S1_AXIS_TVALID_in = (S1_AXIS_TVALID === 1'bz) || S1_AXIS_TVALID; // rv 1
  assign S2_AXIS_TDATA_in[0] = (S2_AXIS_TDATA[0] === 1'bz) || S2_AXIS_TDATA[0]; // rv 1
  assign S2_AXIS_TDATA_in[10] = (S2_AXIS_TDATA[10] === 1'bz) || S2_AXIS_TDATA[10]; // rv 1
  assign S2_AXIS_TDATA_in[11] = (S2_AXIS_TDATA[11] === 1'bz) || S2_AXIS_TDATA[11]; // rv 1
  assign S2_AXIS_TDATA_in[12] = (S2_AXIS_TDATA[12] === 1'bz) || S2_AXIS_TDATA[12]; // rv 1
  assign S2_AXIS_TDATA_in[13] = (S2_AXIS_TDATA[13] === 1'bz) || S2_AXIS_TDATA[13]; // rv 1
  assign S2_AXIS_TDATA_in[14] = (S2_AXIS_TDATA[14] === 1'bz) || S2_AXIS_TDATA[14]; // rv 1
  assign S2_AXIS_TDATA_in[15] = (S2_AXIS_TDATA[15] === 1'bz) || S2_AXIS_TDATA[15]; // rv 1
  assign S2_AXIS_TDATA_in[16] = (S2_AXIS_TDATA[16] === 1'bz) || S2_AXIS_TDATA[16]; // rv 1
  assign S2_AXIS_TDATA_in[17] = (S2_AXIS_TDATA[17] === 1'bz) || S2_AXIS_TDATA[17]; // rv 1
  assign S2_AXIS_TDATA_in[18] = (S2_AXIS_TDATA[18] === 1'bz) || S2_AXIS_TDATA[18]; // rv 1
  assign S2_AXIS_TDATA_in[19] = (S2_AXIS_TDATA[19] === 1'bz) || S2_AXIS_TDATA[19]; // rv 1
  assign S2_AXIS_TDATA_in[1] = (S2_AXIS_TDATA[1] === 1'bz) || S2_AXIS_TDATA[1]; // rv 1
  assign S2_AXIS_TDATA_in[20] = (S2_AXIS_TDATA[20] === 1'bz) || S2_AXIS_TDATA[20]; // rv 1
  assign S2_AXIS_TDATA_in[21] = (S2_AXIS_TDATA[21] === 1'bz) || S2_AXIS_TDATA[21]; // rv 1
  assign S2_AXIS_TDATA_in[22] = (S2_AXIS_TDATA[22] === 1'bz) || S2_AXIS_TDATA[22]; // rv 1
  assign S2_AXIS_TDATA_in[23] = (S2_AXIS_TDATA[23] === 1'bz) || S2_AXIS_TDATA[23]; // rv 1
  assign S2_AXIS_TDATA_in[24] = (S2_AXIS_TDATA[24] === 1'bz) || S2_AXIS_TDATA[24]; // rv 1
  assign S2_AXIS_TDATA_in[25] = (S2_AXIS_TDATA[25] === 1'bz) || S2_AXIS_TDATA[25]; // rv 1
  assign S2_AXIS_TDATA_in[26] = (S2_AXIS_TDATA[26] === 1'bz) || S2_AXIS_TDATA[26]; // rv 1
  assign S2_AXIS_TDATA_in[27] = (S2_AXIS_TDATA[27] === 1'bz) || S2_AXIS_TDATA[27]; // rv 1
  assign S2_AXIS_TDATA_in[28] = (S2_AXIS_TDATA[28] === 1'bz) || S2_AXIS_TDATA[28]; // rv 1
  assign S2_AXIS_TDATA_in[29] = (S2_AXIS_TDATA[29] === 1'bz) || S2_AXIS_TDATA[29]; // rv 1
  assign S2_AXIS_TDATA_in[2] = (S2_AXIS_TDATA[2] === 1'bz) || S2_AXIS_TDATA[2]; // rv 1
  assign S2_AXIS_TDATA_in[30] = (S2_AXIS_TDATA[30] === 1'bz) || S2_AXIS_TDATA[30]; // rv 1
  assign S2_AXIS_TDATA_in[31] = (S2_AXIS_TDATA[31] === 1'bz) || S2_AXIS_TDATA[31]; // rv 1
  assign S2_AXIS_TDATA_in[3] = (S2_AXIS_TDATA[3] === 1'bz) || S2_AXIS_TDATA[3]; // rv 1
  assign S2_AXIS_TDATA_in[4] = (S2_AXIS_TDATA[4] === 1'bz) || S2_AXIS_TDATA[4]; // rv 1
  assign S2_AXIS_TDATA_in[5] = (S2_AXIS_TDATA[5] === 1'bz) || S2_AXIS_TDATA[5]; // rv 1
  assign S2_AXIS_TDATA_in[6] = (S2_AXIS_TDATA[6] === 1'bz) || S2_AXIS_TDATA[6]; // rv 1
  assign S2_AXIS_TDATA_in[7] = (S2_AXIS_TDATA[7] === 1'bz) || S2_AXIS_TDATA[7]; // rv 1
  assign S2_AXIS_TDATA_in[8] = (S2_AXIS_TDATA[8] === 1'bz) || S2_AXIS_TDATA[8]; // rv 1
  assign S2_AXIS_TDATA_in[9] = (S2_AXIS_TDATA[9] === 1'bz) || S2_AXIS_TDATA[9]; // rv 1
  assign S2_AXIS_TLAST_in = (S2_AXIS_TLAST === 1'bz) || S2_AXIS_TLAST; // rv 1
  assign S2_AXIS_TVALID_in = (S2_AXIS_TVALID === 1'bz) || S2_AXIS_TVALID; // rv 1
`endif

  assign APB3PRESETN_in = (APB3PRESETN === 1'bz) || APB3PRESETN; // rv 1
  assign BGBYPASSB_in = BGBYPASSB;
  assign BGMONITORENB_in = (BGMONITORENB === 1'bz) || BGMONITORENB; // rv 1
  assign BGPDB_in = BGPDB;
  assign BGRCALOVRDENB_in = BGRCALOVRDENB;
  assign BGRCALOVRD_in[0] = (BGRCALOVRD[0] === 1'bz) || BGRCALOVRD[0]; // rv 1
  assign BGRCALOVRD_in[1] = (BGRCALOVRD[1] === 1'bz) || BGRCALOVRD[1]; // rv 1
  assign BGRCALOVRD_in[2] = (BGRCALOVRD[2] === 1'bz) || BGRCALOVRD[2]; // rv 1
  assign BGRCALOVRD_in[3] = (BGRCALOVRD[3] === 1'bz) || BGRCALOVRD[3]; // rv 1
  assign BGRCALOVRD_in[4] = (BGRCALOVRD[4] === 1'bz) || BGRCALOVRD[4]; // rv 1
  assign CH0_CDRBMCDRREQ_in = (CH0_CDRBMCDRREQ === 1'bz) || CH0_CDRBMCDRREQ; // rv 1
  assign CH0_CDRFREQOS_in = (CH0_CDRFREQOS === 1'bz) || CH0_CDRFREQOS; // rv 1
  assign CH0_CDRINCPCTRL_in = (CH0_CDRINCPCTRL === 1'bz) || CH0_CDRINCPCTRL; // rv 1
  assign CH0_CDRSTEPDIR_in = (CH0_CDRSTEPDIR === 1'bz) || CH0_CDRSTEPDIR; // rv 1
  assign CH0_CDRSTEPSQ_in = (CH0_CDRSTEPSQ === 1'bz) || CH0_CDRSTEPSQ; // rv 1
  assign CH0_CDRSTEPSX_in = (CH0_CDRSTEPSX === 1'bz) || CH0_CDRSTEPSX; // rv 1
  assign CH0_CLKRSVD0_in = (CH0_CLKRSVD0 === 1'bz) || CH0_CLKRSVD0; // rv 1
  assign CH0_CLKRSVD1_in = (CH0_CLKRSVD1 === 1'bz) || CH0_CLKRSVD1; // rv 1
  assign CH0_DFEHOLD_in = (CH0_DFEHOLD === 1'bz) || CH0_DFEHOLD; // rv 1
  assign CH0_DFEOVRD_in = (CH0_DFEOVRD === 1'bz) || CH0_DFEOVRD; // rv 1
  assign CH0_DMONFIFORESET_in = (CH0_DMONFIFORESET === 1'bz) || CH0_DMONFIFORESET; // rv 1
  assign CH0_DMONITORCLK_in = (CH0_DMONITORCLK === 1'bz) || CH0_DMONITORCLK; // rv 1
  assign CH0_EYESCANRESET_in = (CH0_EYESCANRESET === 1'bz) || CH0_EYESCANRESET; // rv 1
  assign CH0_GTRSVD_in[0] = (CH0_GTRSVD[0] === 1'bz) || CH0_GTRSVD[0]; // rv 1
  assign CH0_GTRSVD_in[10] = (CH0_GTRSVD[10] === 1'bz) || CH0_GTRSVD[10]; // rv 1
  assign CH0_GTRSVD_in[11] = (CH0_GTRSVD[11] === 1'bz) || CH0_GTRSVD[11]; // rv 1
  assign CH0_GTRSVD_in[12] = (CH0_GTRSVD[12] === 1'bz) || CH0_GTRSVD[12]; // rv 1
  assign CH0_GTRSVD_in[13] = (CH0_GTRSVD[13] === 1'bz) || CH0_GTRSVD[13]; // rv 1
  assign CH0_GTRSVD_in[14] = (CH0_GTRSVD[14] === 1'bz) || CH0_GTRSVD[14]; // rv 1
  assign CH0_GTRSVD_in[15] = (CH0_GTRSVD[15] === 1'bz) || CH0_GTRSVD[15]; // rv 1
  assign CH0_GTRSVD_in[1] = (CH0_GTRSVD[1] === 1'bz) || CH0_GTRSVD[1]; // rv 1
  assign CH0_GTRSVD_in[2] = (CH0_GTRSVD[2] === 1'bz) || CH0_GTRSVD[2]; // rv 1
  assign CH0_GTRSVD_in[3] = (CH0_GTRSVD[3] === 1'bz) || CH0_GTRSVD[3]; // rv 1
  assign CH0_GTRSVD_in[4] = (CH0_GTRSVD[4] === 1'bz) || CH0_GTRSVD[4]; // rv 1
  assign CH0_GTRSVD_in[5] = (CH0_GTRSVD[5] === 1'bz) || CH0_GTRSVD[5]; // rv 1
  assign CH0_GTRSVD_in[6] = (CH0_GTRSVD[6] === 1'bz) || CH0_GTRSVD[6]; // rv 1
  assign CH0_GTRSVD_in[7] = (CH0_GTRSVD[7] === 1'bz) || CH0_GTRSVD[7]; // rv 1
  assign CH0_GTRSVD_in[8] = (CH0_GTRSVD[8] === 1'bz) || CH0_GTRSVD[8]; // rv 1
  assign CH0_GTRSVD_in[9] = (CH0_GTRSVD[9] === 1'bz) || CH0_GTRSVD[9]; // rv 1
  assign CH0_GTRXRESET_in = (CH0_GTRXRESET === 1'bz) || CH0_GTRXRESET; // rv 1
  assign CH0_GTTXRESET_in = (CH0_GTTXRESET === 1'bz) || CH0_GTTXRESET; // rv 1
  assign CH0_GTYPRXN_in = CH0_GTYPRXN;
  assign CH0_GTYPRXP_in = CH0_GTYPRXP;
  assign CH0_HSDPPCSRESET_in = (CH0_HSDPPCSRESET === 1'bz) || CH0_HSDPPCSRESET; // rv 1
  assign CH0_ILORESETMASK_in = (CH0_ILORESETMASK === 1'bz) || CH0_ILORESETMASK; // rv 1
  assign CH0_ILORESET_in = (CH0_ILORESET === 1'bz) || CH0_ILORESET; // rv 1
  assign CH0_LOOPBACK_in[0] = (CH0_LOOPBACK[0] === 1'bz) || CH0_LOOPBACK[0]; // rv 1
  assign CH0_LOOPBACK_in[1] = (CH0_LOOPBACK[1] === 1'bz) || CH0_LOOPBACK[1]; // rv 1
  assign CH0_LOOPBACK_in[2] = (CH0_LOOPBACK[2] === 1'bz) || CH0_LOOPBACK[2]; // rv 1
  assign CH0_PCIERSTB_in = (CH0_PCIERSTB === 1'bz) || CH0_PCIERSTB; // rv 1
  assign CH0_PCSRSVDIN_in[0] = (CH0_PCSRSVDIN[0] === 1'bz) || CH0_PCSRSVDIN[0]; // rv 1
  assign CH0_PCSRSVDIN_in[10] = (CH0_PCSRSVDIN[10] === 1'bz) || CH0_PCSRSVDIN[10]; // rv 1
  assign CH0_PCSRSVDIN_in[11] = (CH0_PCSRSVDIN[11] === 1'bz) || CH0_PCSRSVDIN[11]; // rv 1
  assign CH0_PCSRSVDIN_in[12] = (CH0_PCSRSVDIN[12] === 1'bz) || CH0_PCSRSVDIN[12]; // rv 1
  assign CH0_PCSRSVDIN_in[13] = (CH0_PCSRSVDIN[13] === 1'bz) || CH0_PCSRSVDIN[13]; // rv 1
  assign CH0_PCSRSVDIN_in[14] = (CH0_PCSRSVDIN[14] === 1'bz) || CH0_PCSRSVDIN[14]; // rv 1
  assign CH0_PCSRSVDIN_in[15] = (CH0_PCSRSVDIN[15] === 1'bz) || CH0_PCSRSVDIN[15]; // rv 1
  assign CH0_PCSRSVDIN_in[1] = (CH0_PCSRSVDIN[1] === 1'bz) || CH0_PCSRSVDIN[1]; // rv 1
  assign CH0_PCSRSVDIN_in[2] = (CH0_PCSRSVDIN[2] === 1'bz) || CH0_PCSRSVDIN[2]; // rv 1
  assign CH0_PCSRSVDIN_in[3] = (CH0_PCSRSVDIN[3] === 1'bz) || CH0_PCSRSVDIN[3]; // rv 1
  assign CH0_PCSRSVDIN_in[4] = (CH0_PCSRSVDIN[4] === 1'bz) || CH0_PCSRSVDIN[4]; // rv 1
  assign CH0_PCSRSVDIN_in[5] = (CH0_PCSRSVDIN[5] === 1'bz) || CH0_PCSRSVDIN[5]; // rv 1
  assign CH0_PCSRSVDIN_in[6] = (CH0_PCSRSVDIN[6] === 1'bz) || CH0_PCSRSVDIN[6]; // rv 1
  assign CH0_PCSRSVDIN_in[7] = (CH0_PCSRSVDIN[7] === 1'bz) || CH0_PCSRSVDIN[7]; // rv 1
  assign CH0_PCSRSVDIN_in[8] = (CH0_PCSRSVDIN[8] === 1'bz) || CH0_PCSRSVDIN[8]; // rv 1
  assign CH0_PCSRSVDIN_in[9] = (CH0_PCSRSVDIN[9] === 1'bz) || CH0_PCSRSVDIN[9]; // rv 1
  assign CH0_RXCDRHOLD_in = (CH0_RXCDRHOLD === 1'bz) || CH0_RXCDRHOLD; // rv 1
  assign CH0_RXCDROVRDEN_in = (CH0_RXCDROVRDEN === 1'bz) || CH0_RXCDROVRDEN; // rv 1
  assign CH0_RXCDRRESET_in = (CH0_RXCDRRESET === 1'bz) || CH0_RXCDRRESET; // rv 1
  assign CH0_RXDAPICODEOVRDEN_in = (CH0_RXDAPICODEOVRDEN === 1'bz) || CH0_RXDAPICODEOVRDEN; // rv 1
  assign CH0_RXDAPICODERESET_in = (CH0_RXDAPICODERESET === 1'bz) || CH0_RXDAPICODERESET; // rv 1
  assign CH0_RXDAPIRESETMASK_in[0] = (CH0_RXDAPIRESETMASK[0] === 1'bz) || CH0_RXDAPIRESETMASK[0]; // rv 1
  assign CH0_RXDAPIRESETMASK_in[1] = (CH0_RXDAPIRESETMASK[1] === 1'bz) || CH0_RXDAPIRESETMASK[1]; // rv 1
  assign CH0_RXDAPIRESET_in = (CH0_RXDAPIRESET === 1'bz) || CH0_RXDAPIRESET; // rv 1
  assign CH0_RXLATCLK_in = (CH0_RXLATCLK === 1'bz) || CH0_RXLATCLK; // rv 1
  assign CH0_RXLPMEN_in = (CH0_RXLPMEN === 1'bz) || CH0_RXLPMEN; // rv 1
  assign CH0_RXMLFINEALIGNREQ_in = (CH0_RXMLFINEALIGNREQ === 1'bz) || CH0_RXMLFINEALIGNREQ; // rv 1
  assign CH0_RXOOBRESET_in = (CH0_RXOOBRESET === 1'bz) || CH0_RXOOBRESET; // rv 1
  assign CH0_RXPCSRESETMASK_in[0] = (CH0_RXPCSRESETMASK[0] === 1'bz) || CH0_RXPCSRESETMASK[0]; // rv 1
  assign CH0_RXPCSRESETMASK_in[1] = (CH0_RXPCSRESETMASK[1] === 1'bz) || CH0_RXPCSRESETMASK[1]; // rv 1
  assign CH0_RXPCSRESETMASK_in[2] = (CH0_RXPCSRESETMASK[2] === 1'bz) || CH0_RXPCSRESETMASK[2]; // rv 1
  assign CH0_RXPCSRESETMASK_in[3] = (CH0_RXPCSRESETMASK[3] === 1'bz) || CH0_RXPCSRESETMASK[3]; // rv 1
  assign CH0_RXPCSRESETMASK_in[4] = (CH0_RXPCSRESETMASK[4] === 1'bz) || CH0_RXPCSRESETMASK[4]; // rv 1
  assign CH0_RXPHALIGNRESETMASK_in[0] = (CH0_RXPHALIGNRESETMASK[0] === 1'bz) || CH0_RXPHALIGNRESETMASK[0]; // rv 1
  assign CH0_RXPHALIGNRESETMASK_in[1] = (CH0_RXPHALIGNRESETMASK[1] === 1'bz) || CH0_RXPHALIGNRESETMASK[1]; // rv 1
  assign CH0_RXPHDLYPD_in = (CH0_RXPHDLYPD === 1'bz) || CH0_RXPHDLYPD; // rv 1
  assign CH0_RXPHDLYRESET_in = (CH0_RXPHDLYRESET === 1'bz) || CH0_RXPHDLYRESET; // rv 1
  assign CH0_RXPMARESETMASK_in[0] = (CH0_RXPMARESETMASK[0] === 1'bz) || CH0_RXPMARESETMASK[0]; // rv 1
  assign CH0_RXPMARESETMASK_in[1] = (CH0_RXPMARESETMASK[1] === 1'bz) || CH0_RXPMARESETMASK[1]; // rv 1
  assign CH0_RXPMARESETMASK_in[2] = (CH0_RXPMARESETMASK[2] === 1'bz) || CH0_RXPMARESETMASK[2]; // rv 1
  assign CH0_RXPMARESETMASK_in[3] = (CH0_RXPMARESETMASK[3] === 1'bz) || CH0_RXPMARESETMASK[3]; // rv 1
  assign CH0_RXPMARESETMASK_in[4] = (CH0_RXPMARESETMASK[4] === 1'bz) || CH0_RXPMARESETMASK[4]; // rv 1
  assign CH0_RXPMARESETMASK_in[5] = (CH0_RXPMARESETMASK[5] === 1'bz) || CH0_RXPMARESETMASK[5]; // rv 1
  assign CH0_RXPMARESETMASK_in[6] = (CH0_RXPMARESETMASK[6] === 1'bz) || CH0_RXPMARESETMASK[6]; // rv 1
  assign CH0_RXPRBSCNTRESET_in = (CH0_RXPRBSCNTRESET === 1'bz) || CH0_RXPRBSCNTRESET; // rv 1
  assign CH0_RXPRBSSEL_in[0] = (CH0_RXPRBSSEL[0] === 1'bz) || CH0_RXPRBSSEL[0]; // rv 1
  assign CH0_RXPRBSSEL_in[1] = (CH0_RXPRBSSEL[1] === 1'bz) || CH0_RXPRBSSEL[1]; // rv 1
  assign CH0_RXPRBSSEL_in[2] = (CH0_RXPRBSSEL[2] === 1'bz) || CH0_RXPRBSSEL[2]; // rv 1
  assign CH0_RXPRBSSEL_in[3] = (CH0_RXPRBSSEL[3] === 1'bz) || CH0_RXPRBSSEL[3]; // rv 1
  assign CH0_RXPROGDIVRESET_in = (CH0_RXPROGDIVRESET === 1'bz) || CH0_RXPROGDIVRESET; // rv 1
  assign CH0_RXQPIEN_in = (CH0_RXQPIEN === 1'bz) || CH0_RXQPIEN; // rv 1
  assign CH0_RXRESETMODE_in[0] = (CH0_RXRESETMODE[0] === 1'bz) || CH0_RXRESETMODE[0]; // rv 1
  assign CH0_RXRESETMODE_in[1] = (CH0_RXRESETMODE[1] === 1'bz) || CH0_RXRESETMODE[1]; // rv 1
  assign CH0_RXSYNCALLIN_in = (CH0_RXSYNCALLIN === 1'bz) || CH0_RXSYNCALLIN; // rv 1
  assign CH0_RXTERMINATION_in = (CH0_RXTERMINATION === 1'bz) || CH0_RXTERMINATION; // rv 1
  assign CH0_RXUSERRDY_in = (CH0_RXUSERRDY === 1'bz) || CH0_RXUSERRDY; // rv 1
  assign CH0_TSTCLK0_in = CH0_TSTCLK0;
  assign CH0_TSTCLK1_in = CH0_TSTCLK1;
  assign CH0_TXDAPICODEOVRDEN_in = (CH0_TXDAPICODEOVRDEN === 1'bz) || CH0_TXDAPICODEOVRDEN; // rv 1
  assign CH0_TXDAPICODERESET_in = (CH0_TXDAPICODERESET === 1'bz) || CH0_TXDAPICODERESET; // rv 1
  assign CH0_TXDAPIRESETMASK_in[0] = (CH0_TXDAPIRESETMASK[0] === 1'bz) || CH0_TXDAPIRESETMASK[0]; // rv 1
  assign CH0_TXDAPIRESETMASK_in[1] = (CH0_TXDAPIRESETMASK[1] === 1'bz) || CH0_TXDAPIRESETMASK[1]; // rv 1
  assign CH0_TXDAPIRESET_in = (CH0_TXDAPIRESET === 1'bz) || CH0_TXDAPIRESET; // rv 1
  assign CH0_TXDEEMPH_in[0] = (CH0_TXDEEMPH[0] === 1'bz) || CH0_TXDEEMPH[0]; // rv 1
  assign CH0_TXDEEMPH_in[1] = (CH0_TXDEEMPH[1] === 1'bz) || CH0_TXDEEMPH[1]; // rv 1
  assign CH0_TXDIFFCTRL_in[0] = (CH0_TXDIFFCTRL[0] === 1'bz) || CH0_TXDIFFCTRL[0]; // rv 1
  assign CH0_TXDIFFCTRL_in[1] = (CH0_TXDIFFCTRL[1] === 1'bz) || CH0_TXDIFFCTRL[1]; // rv 1
  assign CH0_TXDIFFCTRL_in[2] = (CH0_TXDIFFCTRL[2] === 1'bz) || CH0_TXDIFFCTRL[2]; // rv 1
  assign CH0_TXDIFFCTRL_in[3] = (CH0_TXDIFFCTRL[3] === 1'bz) || CH0_TXDIFFCTRL[3]; // rv 1
  assign CH0_TXDIFFCTRL_in[4] = (CH0_TXDIFFCTRL[4] === 1'bz) || CH0_TXDIFFCTRL[4]; // rv 1
  assign CH0_TXDLYALIGNREQ_in = (CH0_TXDLYALIGNREQ === 1'bz) || CH0_TXDLYALIGNREQ; // rv 1
  assign CH0_TXLATCLK_in = (CH0_TXLATCLK === 1'bz) || CH0_TXLATCLK; // rv 1
  assign CH0_TXMAINCURSOR_in[0] = (CH0_TXMAINCURSOR[0] === 1'bz) || CH0_TXMAINCURSOR[0]; // rv 1
  assign CH0_TXMAINCURSOR_in[1] = (CH0_TXMAINCURSOR[1] === 1'bz) || CH0_TXMAINCURSOR[1]; // rv 1
  assign CH0_TXMAINCURSOR_in[2] = (CH0_TXMAINCURSOR[2] === 1'bz) || CH0_TXMAINCURSOR[2]; // rv 1
  assign CH0_TXMAINCURSOR_in[3] = (CH0_TXMAINCURSOR[3] === 1'bz) || CH0_TXMAINCURSOR[3]; // rv 1
  assign CH0_TXMAINCURSOR_in[4] = (CH0_TXMAINCURSOR[4] === 1'bz) || CH0_TXMAINCURSOR[4]; // rv 1
  assign CH0_TXMAINCURSOR_in[5] = (CH0_TXMAINCURSOR[5] === 1'bz) || CH0_TXMAINCURSOR[5]; // rv 1
  assign CH0_TXMAINCURSOR_in[6] = (CH0_TXMAINCURSOR[6] === 1'bz) || CH0_TXMAINCURSOR[6]; // rv 1
  assign CH0_TXMARGIN_in[0] = (CH0_TXMARGIN[0] === 1'bz) || CH0_TXMARGIN[0]; // rv 1
  assign CH0_TXMARGIN_in[1] = (CH0_TXMARGIN[1] === 1'bz) || CH0_TXMARGIN[1]; // rv 1
  assign CH0_TXMARGIN_in[2] = (CH0_TXMARGIN[2] === 1'bz) || CH0_TXMARGIN[2]; // rv 1
  assign CH0_TXMLDCHAINDONE_in = (CH0_TXMLDCHAINDONE === 1'bz) || CH0_TXMLDCHAINDONE; // rv 1
  assign CH0_TXMLDCHAINREQ_in = (CH0_TXMLDCHAINREQ === 1'bz) || CH0_TXMLDCHAINREQ; // rv 1
  assign CH0_TXONESZEROS_in = (CH0_TXONESZEROS === 1'bz) || CH0_TXONESZEROS; // rv 1
  assign CH0_TXPAUSEDELAYALIGN_in = (CH0_TXPAUSEDELAYALIGN === 1'bz) || CH0_TXPAUSEDELAYALIGN; // rv 1
  assign CH0_TXPCSRESETMASK_in = (CH0_TXPCSRESETMASK === 1'bz) || CH0_TXPCSRESETMASK; // rv 1
  assign CH0_TXPHALIGNREQ_in = (CH0_TXPHALIGNREQ === 1'bz) || CH0_TXPHALIGNREQ; // rv 1
  assign CH0_TXPHALIGNRESETMASK_in[0] = (CH0_TXPHALIGNRESETMASK[0] === 1'bz) || CH0_TXPHALIGNRESETMASK[0]; // rv 1
  assign CH0_TXPHALIGNRESETMASK_in[1] = (CH0_TXPHALIGNRESETMASK[1] === 1'bz) || CH0_TXPHALIGNRESETMASK[1]; // rv 1
  assign CH0_TXPHDLYPD_in = (CH0_TXPHDLYPD === 1'bz) || CH0_TXPHDLYPD; // rv 1
  assign CH0_TXPHDLYRESET_in = (CH0_TXPHDLYRESET === 1'bz) || CH0_TXPHDLYRESET; // rv 1
  assign CH0_TXPHDLYTSTCLK_in = (CH0_TXPHDLYTSTCLK === 1'bz) || CH0_TXPHDLYTSTCLK; // rv 1
  assign CH0_TXPHSETINITREQ_in = (CH0_TXPHSETINITREQ === 1'bz) || CH0_TXPHSETINITREQ; // rv 1
  assign CH0_TXPHSHIFT180_in = (CH0_TXPHSHIFT180 === 1'bz) || CH0_TXPHSHIFT180; // rv 1
  assign CH0_TXPICODEOVRDEN_in = (CH0_TXPICODEOVRDEN === 1'bz) || CH0_TXPICODEOVRDEN; // rv 1
  assign CH0_TXPICODERESET_in = (CH0_TXPICODERESET === 1'bz) || CH0_TXPICODERESET; // rv 1
  assign CH0_TXPISOPD_in = (CH0_TXPISOPD === 1'bz) || CH0_TXPISOPD; // rv 1
  assign CH0_TXPMARESETMASK_in[0] = (CH0_TXPMARESETMASK[0] === 1'bz) || CH0_TXPMARESETMASK[0]; // rv 1
  assign CH0_TXPMARESETMASK_in[1] = (CH0_TXPMARESETMASK[1] === 1'bz) || CH0_TXPMARESETMASK[1]; // rv 1
  assign CH0_TXPMARESETMASK_in[2] = (CH0_TXPMARESETMASK[2] === 1'bz) || CH0_TXPMARESETMASK[2]; // rv 1
  assign CH0_TXPOSTCURSOR_in[0] = (CH0_TXPOSTCURSOR[0] === 1'bz) || CH0_TXPOSTCURSOR[0]; // rv 1
  assign CH0_TXPOSTCURSOR_in[1] = (CH0_TXPOSTCURSOR[1] === 1'bz) || CH0_TXPOSTCURSOR[1]; // rv 1
  assign CH0_TXPOSTCURSOR_in[2] = (CH0_TXPOSTCURSOR[2] === 1'bz) || CH0_TXPOSTCURSOR[2]; // rv 1
  assign CH0_TXPOSTCURSOR_in[3] = (CH0_TXPOSTCURSOR[3] === 1'bz) || CH0_TXPOSTCURSOR[3]; // rv 1
  assign CH0_TXPOSTCURSOR_in[4] = (CH0_TXPOSTCURSOR[4] === 1'bz) || CH0_TXPOSTCURSOR[4]; // rv 1
  assign CH0_TXPRBSFORCEERR_in = (CH0_TXPRBSFORCEERR === 1'bz) || CH0_TXPRBSFORCEERR; // rv 1
  assign CH0_TXPRBSSEL_in[0] = (CH0_TXPRBSSEL[0] === 1'bz) || CH0_TXPRBSSEL[0]; // rv 1
  assign CH0_TXPRBSSEL_in[1] = (CH0_TXPRBSSEL[1] === 1'bz) || CH0_TXPRBSSEL[1]; // rv 1
  assign CH0_TXPRBSSEL_in[2] = (CH0_TXPRBSSEL[2] === 1'bz) || CH0_TXPRBSSEL[2]; // rv 1
  assign CH0_TXPRBSSEL_in[3] = (CH0_TXPRBSSEL[3] === 1'bz) || CH0_TXPRBSSEL[3]; // rv 1
  assign CH0_TXPRECURSOR_in[0] = (CH0_TXPRECURSOR[0] === 1'bz) || CH0_TXPRECURSOR[0]; // rv 1
  assign CH0_TXPRECURSOR_in[1] = (CH0_TXPRECURSOR[1] === 1'bz) || CH0_TXPRECURSOR[1]; // rv 1
  assign CH0_TXPRECURSOR_in[2] = (CH0_TXPRECURSOR[2] === 1'bz) || CH0_TXPRECURSOR[2]; // rv 1
  assign CH0_TXPRECURSOR_in[3] = (CH0_TXPRECURSOR[3] === 1'bz) || CH0_TXPRECURSOR[3]; // rv 1
  assign CH0_TXPRECURSOR_in[4] = (CH0_TXPRECURSOR[4] === 1'bz) || CH0_TXPRECURSOR[4]; // rv 1
  assign CH0_TXPROGDIVRESET_in = (CH0_TXPROGDIVRESET === 1'bz) || CH0_TXPROGDIVRESET; // rv 1
  assign CH0_TXQPIBIASEN_in = (CH0_TXQPIBIASEN === 1'bz) || CH0_TXQPIBIASEN; // rv 1
  assign CH0_TXQPIWEAKPU_in = (CH0_TXQPIWEAKPU === 1'bz) || CH0_TXQPIWEAKPU; // rv 1
  assign CH0_TXRESETMODE_in[0] = (CH0_TXRESETMODE[0] === 1'bz) || CH0_TXRESETMODE[0]; // rv 1
  assign CH0_TXRESETMODE_in[1] = (CH0_TXRESETMODE[1] === 1'bz) || CH0_TXRESETMODE[1]; // rv 1
  assign CH0_TXSWING_in = (CH0_TXSWING === 1'bz) || CH0_TXSWING; // rv 1
  assign CH0_TXSYNCALLIN_in = (CH0_TXSYNCALLIN === 1'bz) || CH0_TXSYNCALLIN; // rv 1
  assign CH0_TXUSERRDY_in = (CH0_TXUSERRDY === 1'bz) || CH0_TXUSERRDY; // rv 1
  assign CH1_CDRBMCDRREQ_in = (CH1_CDRBMCDRREQ === 1'bz) || CH1_CDRBMCDRREQ; // rv 1
  assign CH1_CDRFREQOS_in = (CH1_CDRFREQOS === 1'bz) || CH1_CDRFREQOS; // rv 1
  assign CH1_CDRINCPCTRL_in = (CH1_CDRINCPCTRL === 1'bz) || CH1_CDRINCPCTRL; // rv 1
  assign CH1_CDRSTEPDIR_in = (CH1_CDRSTEPDIR === 1'bz) || CH1_CDRSTEPDIR; // rv 1
  assign CH1_CDRSTEPSQ_in = (CH1_CDRSTEPSQ === 1'bz) || CH1_CDRSTEPSQ; // rv 1
  assign CH1_CDRSTEPSX_in = (CH1_CDRSTEPSX === 1'bz) || CH1_CDRSTEPSX; // rv 1
  assign CH1_CLKRSVD0_in = (CH1_CLKRSVD0 === 1'bz) || CH1_CLKRSVD0; // rv 1
  assign CH1_CLKRSVD1_in = (CH1_CLKRSVD1 === 1'bz) || CH1_CLKRSVD1; // rv 1
  assign CH1_DFEHOLD_in = (CH1_DFEHOLD === 1'bz) || CH1_DFEHOLD; // rv 1
  assign CH1_DFEOVRD_in = (CH1_DFEOVRD === 1'bz) || CH1_DFEOVRD; // rv 1
  assign CH1_DMONFIFORESET_in = (CH1_DMONFIFORESET === 1'bz) || CH1_DMONFIFORESET; // rv 1
  assign CH1_DMONITORCLK_in = (CH1_DMONITORCLK === 1'bz) || CH1_DMONITORCLK; // rv 1
  assign CH1_EYESCANRESET_in = (CH1_EYESCANRESET === 1'bz) || CH1_EYESCANRESET; // rv 1
  assign CH1_GTRSVD_in[0] = (CH1_GTRSVD[0] === 1'bz) || CH1_GTRSVD[0]; // rv 1
  assign CH1_GTRSVD_in[10] = (CH1_GTRSVD[10] === 1'bz) || CH1_GTRSVD[10]; // rv 1
  assign CH1_GTRSVD_in[11] = (CH1_GTRSVD[11] === 1'bz) || CH1_GTRSVD[11]; // rv 1
  assign CH1_GTRSVD_in[12] = (CH1_GTRSVD[12] === 1'bz) || CH1_GTRSVD[12]; // rv 1
  assign CH1_GTRSVD_in[13] = (CH1_GTRSVD[13] === 1'bz) || CH1_GTRSVD[13]; // rv 1
  assign CH1_GTRSVD_in[14] = (CH1_GTRSVD[14] === 1'bz) || CH1_GTRSVD[14]; // rv 1
  assign CH1_GTRSVD_in[15] = (CH1_GTRSVD[15] === 1'bz) || CH1_GTRSVD[15]; // rv 1
  assign CH1_GTRSVD_in[1] = (CH1_GTRSVD[1] === 1'bz) || CH1_GTRSVD[1]; // rv 1
  assign CH1_GTRSVD_in[2] = (CH1_GTRSVD[2] === 1'bz) || CH1_GTRSVD[2]; // rv 1
  assign CH1_GTRSVD_in[3] = (CH1_GTRSVD[3] === 1'bz) || CH1_GTRSVD[3]; // rv 1
  assign CH1_GTRSVD_in[4] = (CH1_GTRSVD[4] === 1'bz) || CH1_GTRSVD[4]; // rv 1
  assign CH1_GTRSVD_in[5] = (CH1_GTRSVD[5] === 1'bz) || CH1_GTRSVD[5]; // rv 1
  assign CH1_GTRSVD_in[6] = (CH1_GTRSVD[6] === 1'bz) || CH1_GTRSVD[6]; // rv 1
  assign CH1_GTRSVD_in[7] = (CH1_GTRSVD[7] === 1'bz) || CH1_GTRSVD[7]; // rv 1
  assign CH1_GTRSVD_in[8] = (CH1_GTRSVD[8] === 1'bz) || CH1_GTRSVD[8]; // rv 1
  assign CH1_GTRSVD_in[9] = (CH1_GTRSVD[9] === 1'bz) || CH1_GTRSVD[9]; // rv 1
  assign CH1_GTRXRESET_in = (CH1_GTRXRESET === 1'bz) || CH1_GTRXRESET; // rv 1
  assign CH1_GTTXRESET_in = (CH1_GTTXRESET === 1'bz) || CH1_GTTXRESET; // rv 1
  assign CH1_GTYPRXN_in = CH1_GTYPRXN;
  assign CH1_GTYPRXP_in = CH1_GTYPRXP;
  assign CH1_HSDPPCSRESET_in = (CH1_HSDPPCSRESET === 1'bz) || CH1_HSDPPCSRESET; // rv 1
  assign CH1_ILORESETMASK_in = (CH1_ILORESETMASK === 1'bz) || CH1_ILORESETMASK; // rv 1
  assign CH1_ILORESET_in = (CH1_ILORESET === 1'bz) || CH1_ILORESET; // rv 1
  assign CH1_LOOPBACK_in[0] = (CH1_LOOPBACK[0] === 1'bz) || CH1_LOOPBACK[0]; // rv 1
  assign CH1_LOOPBACK_in[1] = (CH1_LOOPBACK[1] === 1'bz) || CH1_LOOPBACK[1]; // rv 1
  assign CH1_LOOPBACK_in[2] = (CH1_LOOPBACK[2] === 1'bz) || CH1_LOOPBACK[2]; // rv 1
  assign CH1_PCIERSTB_in = (CH1_PCIERSTB === 1'bz) || CH1_PCIERSTB; // rv 1
  assign CH1_PCSRSVDIN_in[0] = (CH1_PCSRSVDIN[0] === 1'bz) || CH1_PCSRSVDIN[0]; // rv 1
  assign CH1_PCSRSVDIN_in[10] = (CH1_PCSRSVDIN[10] === 1'bz) || CH1_PCSRSVDIN[10]; // rv 1
  assign CH1_PCSRSVDIN_in[11] = (CH1_PCSRSVDIN[11] === 1'bz) || CH1_PCSRSVDIN[11]; // rv 1
  assign CH1_PCSRSVDIN_in[12] = (CH1_PCSRSVDIN[12] === 1'bz) || CH1_PCSRSVDIN[12]; // rv 1
  assign CH1_PCSRSVDIN_in[13] = (CH1_PCSRSVDIN[13] === 1'bz) || CH1_PCSRSVDIN[13]; // rv 1
  assign CH1_PCSRSVDIN_in[14] = (CH1_PCSRSVDIN[14] === 1'bz) || CH1_PCSRSVDIN[14]; // rv 1
  assign CH1_PCSRSVDIN_in[15] = (CH1_PCSRSVDIN[15] === 1'bz) || CH1_PCSRSVDIN[15]; // rv 1
  assign CH1_PCSRSVDIN_in[1] = (CH1_PCSRSVDIN[1] === 1'bz) || CH1_PCSRSVDIN[1]; // rv 1
  assign CH1_PCSRSVDIN_in[2] = (CH1_PCSRSVDIN[2] === 1'bz) || CH1_PCSRSVDIN[2]; // rv 1
  assign CH1_PCSRSVDIN_in[3] = (CH1_PCSRSVDIN[3] === 1'bz) || CH1_PCSRSVDIN[3]; // rv 1
  assign CH1_PCSRSVDIN_in[4] = (CH1_PCSRSVDIN[4] === 1'bz) || CH1_PCSRSVDIN[4]; // rv 1
  assign CH1_PCSRSVDIN_in[5] = (CH1_PCSRSVDIN[5] === 1'bz) || CH1_PCSRSVDIN[5]; // rv 1
  assign CH1_PCSRSVDIN_in[6] = (CH1_PCSRSVDIN[6] === 1'bz) || CH1_PCSRSVDIN[6]; // rv 1
  assign CH1_PCSRSVDIN_in[7] = (CH1_PCSRSVDIN[7] === 1'bz) || CH1_PCSRSVDIN[7]; // rv 1
  assign CH1_PCSRSVDIN_in[8] = (CH1_PCSRSVDIN[8] === 1'bz) || CH1_PCSRSVDIN[8]; // rv 1
  assign CH1_PCSRSVDIN_in[9] = (CH1_PCSRSVDIN[9] === 1'bz) || CH1_PCSRSVDIN[9]; // rv 1
  assign CH1_RXCDRHOLD_in = (CH1_RXCDRHOLD === 1'bz) || CH1_RXCDRHOLD; // rv 1
  assign CH1_RXCDROVRDEN_in = (CH1_RXCDROVRDEN === 1'bz) || CH1_RXCDROVRDEN; // rv 1
  assign CH1_RXCDRRESET_in = (CH1_RXCDRRESET === 1'bz) || CH1_RXCDRRESET; // rv 1
  assign CH1_RXDAPICODEOVRDEN_in = (CH1_RXDAPICODEOVRDEN === 1'bz) || CH1_RXDAPICODEOVRDEN; // rv 1
  assign CH1_RXDAPICODERESET_in = (CH1_RXDAPICODERESET === 1'bz) || CH1_RXDAPICODERESET; // rv 1
  assign CH1_RXDAPIRESETMASK_in[0] = (CH1_RXDAPIRESETMASK[0] === 1'bz) || CH1_RXDAPIRESETMASK[0]; // rv 1
  assign CH1_RXDAPIRESETMASK_in[1] = (CH1_RXDAPIRESETMASK[1] === 1'bz) || CH1_RXDAPIRESETMASK[1]; // rv 1
  assign CH1_RXDAPIRESET_in = (CH1_RXDAPIRESET === 1'bz) || CH1_RXDAPIRESET; // rv 1
  assign CH1_RXLATCLK_in = (CH1_RXLATCLK === 1'bz) || CH1_RXLATCLK; // rv 1
  assign CH1_RXLPMEN_in = (CH1_RXLPMEN === 1'bz) || CH1_RXLPMEN; // rv 1
  assign CH1_RXMLFINEALIGNREQ_in = (CH1_RXMLFINEALIGNREQ === 1'bz) || CH1_RXMLFINEALIGNREQ; // rv 1
  assign CH1_RXOOBRESET_in = (CH1_RXOOBRESET === 1'bz) || CH1_RXOOBRESET; // rv 1
  assign CH1_RXPCSRESETMASK_in[0] = (CH1_RXPCSRESETMASK[0] === 1'bz) || CH1_RXPCSRESETMASK[0]; // rv 1
  assign CH1_RXPCSRESETMASK_in[1] = (CH1_RXPCSRESETMASK[1] === 1'bz) || CH1_RXPCSRESETMASK[1]; // rv 1
  assign CH1_RXPCSRESETMASK_in[2] = (CH1_RXPCSRESETMASK[2] === 1'bz) || CH1_RXPCSRESETMASK[2]; // rv 1
  assign CH1_RXPCSRESETMASK_in[3] = (CH1_RXPCSRESETMASK[3] === 1'bz) || CH1_RXPCSRESETMASK[3]; // rv 1
  assign CH1_RXPCSRESETMASK_in[4] = (CH1_RXPCSRESETMASK[4] === 1'bz) || CH1_RXPCSRESETMASK[4]; // rv 1
  assign CH1_RXPHALIGNRESETMASK_in[0] = (CH1_RXPHALIGNRESETMASK[0] === 1'bz) || CH1_RXPHALIGNRESETMASK[0]; // rv 1
  assign CH1_RXPHALIGNRESETMASK_in[1] = (CH1_RXPHALIGNRESETMASK[1] === 1'bz) || CH1_RXPHALIGNRESETMASK[1]; // rv 1
  assign CH1_RXPHDLYPD_in = (CH1_RXPHDLYPD === 1'bz) || CH1_RXPHDLYPD; // rv 1
  assign CH1_RXPHDLYRESET_in = (CH1_RXPHDLYRESET === 1'bz) || CH1_RXPHDLYRESET; // rv 1
  assign CH1_RXPMARESETMASK_in[0] = (CH1_RXPMARESETMASK[0] === 1'bz) || CH1_RXPMARESETMASK[0]; // rv 1
  assign CH1_RXPMARESETMASK_in[1] = (CH1_RXPMARESETMASK[1] === 1'bz) || CH1_RXPMARESETMASK[1]; // rv 1
  assign CH1_RXPMARESETMASK_in[2] = (CH1_RXPMARESETMASK[2] === 1'bz) || CH1_RXPMARESETMASK[2]; // rv 1
  assign CH1_RXPMARESETMASK_in[3] = (CH1_RXPMARESETMASK[3] === 1'bz) || CH1_RXPMARESETMASK[3]; // rv 1
  assign CH1_RXPMARESETMASK_in[4] = (CH1_RXPMARESETMASK[4] === 1'bz) || CH1_RXPMARESETMASK[4]; // rv 1
  assign CH1_RXPMARESETMASK_in[5] = (CH1_RXPMARESETMASK[5] === 1'bz) || CH1_RXPMARESETMASK[5]; // rv 1
  assign CH1_RXPMARESETMASK_in[6] = (CH1_RXPMARESETMASK[6] === 1'bz) || CH1_RXPMARESETMASK[6]; // rv 1
  assign CH1_RXPRBSCNTRESET_in = (CH1_RXPRBSCNTRESET === 1'bz) || CH1_RXPRBSCNTRESET; // rv 1
  assign CH1_RXPRBSSEL_in[0] = (CH1_RXPRBSSEL[0] === 1'bz) || CH1_RXPRBSSEL[0]; // rv 1
  assign CH1_RXPRBSSEL_in[1] = (CH1_RXPRBSSEL[1] === 1'bz) || CH1_RXPRBSSEL[1]; // rv 1
  assign CH1_RXPRBSSEL_in[2] = (CH1_RXPRBSSEL[2] === 1'bz) || CH1_RXPRBSSEL[2]; // rv 1
  assign CH1_RXPRBSSEL_in[3] = (CH1_RXPRBSSEL[3] === 1'bz) || CH1_RXPRBSSEL[3]; // rv 1
  assign CH1_RXPROGDIVRESET_in = (CH1_RXPROGDIVRESET === 1'bz) || CH1_RXPROGDIVRESET; // rv 1
  assign CH1_RXQPIEN_in = (CH1_RXQPIEN === 1'bz) || CH1_RXQPIEN; // rv 1
  assign CH1_RXRESETMODE_in[0] = (CH1_RXRESETMODE[0] === 1'bz) || CH1_RXRESETMODE[0]; // rv 1
  assign CH1_RXRESETMODE_in[1] = (CH1_RXRESETMODE[1] === 1'bz) || CH1_RXRESETMODE[1]; // rv 1
  assign CH1_RXSYNCALLIN_in = (CH1_RXSYNCALLIN === 1'bz) || CH1_RXSYNCALLIN; // rv 1
  assign CH1_RXTERMINATION_in = (CH1_RXTERMINATION === 1'bz) || CH1_RXTERMINATION; // rv 1
  assign CH1_RXUSERRDY_in = (CH1_RXUSERRDY === 1'bz) || CH1_RXUSERRDY; // rv 1
  assign CH1_TSTCLK0_in = CH1_TSTCLK0;
  assign CH1_TSTCLK1_in = CH1_TSTCLK1;
  assign CH1_TXDAPICODEOVRDEN_in = (CH1_TXDAPICODEOVRDEN === 1'bz) || CH1_TXDAPICODEOVRDEN; // rv 1
  assign CH1_TXDAPICODERESET_in = (CH1_TXDAPICODERESET === 1'bz) || CH1_TXDAPICODERESET; // rv 1
  assign CH1_TXDAPIRESETMASK_in[0] = (CH1_TXDAPIRESETMASK[0] === 1'bz) || CH1_TXDAPIRESETMASK[0]; // rv 1
  assign CH1_TXDAPIRESETMASK_in[1] = (CH1_TXDAPIRESETMASK[1] === 1'bz) || CH1_TXDAPIRESETMASK[1]; // rv 1
  assign CH1_TXDAPIRESET_in = (CH1_TXDAPIRESET === 1'bz) || CH1_TXDAPIRESET; // rv 1
  assign CH1_TXDEEMPH_in[0] = (CH1_TXDEEMPH[0] === 1'bz) || CH1_TXDEEMPH[0]; // rv 1
  assign CH1_TXDEEMPH_in[1] = (CH1_TXDEEMPH[1] === 1'bz) || CH1_TXDEEMPH[1]; // rv 1
  assign CH1_TXDIFFCTRL_in[0] = (CH1_TXDIFFCTRL[0] === 1'bz) || CH1_TXDIFFCTRL[0]; // rv 1
  assign CH1_TXDIFFCTRL_in[1] = (CH1_TXDIFFCTRL[1] === 1'bz) || CH1_TXDIFFCTRL[1]; // rv 1
  assign CH1_TXDIFFCTRL_in[2] = (CH1_TXDIFFCTRL[2] === 1'bz) || CH1_TXDIFFCTRL[2]; // rv 1
  assign CH1_TXDIFFCTRL_in[3] = (CH1_TXDIFFCTRL[3] === 1'bz) || CH1_TXDIFFCTRL[3]; // rv 1
  assign CH1_TXDIFFCTRL_in[4] = (CH1_TXDIFFCTRL[4] === 1'bz) || CH1_TXDIFFCTRL[4]; // rv 1
  assign CH1_TXDLYALIGNREQ_in = (CH1_TXDLYALIGNREQ === 1'bz) || CH1_TXDLYALIGNREQ; // rv 1
  assign CH1_TXLATCLK_in = (CH1_TXLATCLK === 1'bz) || CH1_TXLATCLK; // rv 1
  assign CH1_TXMAINCURSOR_in[0] = (CH1_TXMAINCURSOR[0] === 1'bz) || CH1_TXMAINCURSOR[0]; // rv 1
  assign CH1_TXMAINCURSOR_in[1] = (CH1_TXMAINCURSOR[1] === 1'bz) || CH1_TXMAINCURSOR[1]; // rv 1
  assign CH1_TXMAINCURSOR_in[2] = (CH1_TXMAINCURSOR[2] === 1'bz) || CH1_TXMAINCURSOR[2]; // rv 1
  assign CH1_TXMAINCURSOR_in[3] = (CH1_TXMAINCURSOR[3] === 1'bz) || CH1_TXMAINCURSOR[3]; // rv 1
  assign CH1_TXMAINCURSOR_in[4] = (CH1_TXMAINCURSOR[4] === 1'bz) || CH1_TXMAINCURSOR[4]; // rv 1
  assign CH1_TXMAINCURSOR_in[5] = (CH1_TXMAINCURSOR[5] === 1'bz) || CH1_TXMAINCURSOR[5]; // rv 1
  assign CH1_TXMAINCURSOR_in[6] = (CH1_TXMAINCURSOR[6] === 1'bz) || CH1_TXMAINCURSOR[6]; // rv 1
  assign CH1_TXMARGIN_in[0] = (CH1_TXMARGIN[0] === 1'bz) || CH1_TXMARGIN[0]; // rv 1
  assign CH1_TXMARGIN_in[1] = (CH1_TXMARGIN[1] === 1'bz) || CH1_TXMARGIN[1]; // rv 1
  assign CH1_TXMARGIN_in[2] = (CH1_TXMARGIN[2] === 1'bz) || CH1_TXMARGIN[2]; // rv 1
  assign CH1_TXMLDCHAINDONE_in = (CH1_TXMLDCHAINDONE === 1'bz) || CH1_TXMLDCHAINDONE; // rv 1
  assign CH1_TXMLDCHAINREQ_in = (CH1_TXMLDCHAINREQ === 1'bz) || CH1_TXMLDCHAINREQ; // rv 1
  assign CH1_TXONESZEROS_in = (CH1_TXONESZEROS === 1'bz) || CH1_TXONESZEROS; // rv 1
  assign CH1_TXPAUSEDELAYALIGN_in = (CH1_TXPAUSEDELAYALIGN === 1'bz) || CH1_TXPAUSEDELAYALIGN; // rv 1
  assign CH1_TXPCSRESETMASK_in = (CH1_TXPCSRESETMASK === 1'bz) || CH1_TXPCSRESETMASK; // rv 1
  assign CH1_TXPHALIGNREQ_in = (CH1_TXPHALIGNREQ === 1'bz) || CH1_TXPHALIGNREQ; // rv 1
  assign CH1_TXPHALIGNRESETMASK_in[0] = (CH1_TXPHALIGNRESETMASK[0] === 1'bz) || CH1_TXPHALIGNRESETMASK[0]; // rv 1
  assign CH1_TXPHALIGNRESETMASK_in[1] = (CH1_TXPHALIGNRESETMASK[1] === 1'bz) || CH1_TXPHALIGNRESETMASK[1]; // rv 1
  assign CH1_TXPHDLYPD_in = (CH1_TXPHDLYPD === 1'bz) || CH1_TXPHDLYPD; // rv 1
  assign CH1_TXPHDLYRESET_in = (CH1_TXPHDLYRESET === 1'bz) || CH1_TXPHDLYRESET; // rv 1
  assign CH1_TXPHDLYTSTCLK_in = (CH1_TXPHDLYTSTCLK === 1'bz) || CH1_TXPHDLYTSTCLK; // rv 1
  assign CH1_TXPHSETINITREQ_in = (CH1_TXPHSETINITREQ === 1'bz) || CH1_TXPHSETINITREQ; // rv 1
  assign CH1_TXPHSHIFT180_in = (CH1_TXPHSHIFT180 === 1'bz) || CH1_TXPHSHIFT180; // rv 1
  assign CH1_TXPICODEOVRDEN_in = (CH1_TXPICODEOVRDEN === 1'bz) || CH1_TXPICODEOVRDEN; // rv 1
  assign CH1_TXPICODERESET_in = (CH1_TXPICODERESET === 1'bz) || CH1_TXPICODERESET; // rv 1
  assign CH1_TXPISOPD_in = (CH1_TXPISOPD === 1'bz) || CH1_TXPISOPD; // rv 1
  assign CH1_TXPMARESETMASK_in[0] = (CH1_TXPMARESETMASK[0] === 1'bz) || CH1_TXPMARESETMASK[0]; // rv 1
  assign CH1_TXPMARESETMASK_in[1] = (CH1_TXPMARESETMASK[1] === 1'bz) || CH1_TXPMARESETMASK[1]; // rv 1
  assign CH1_TXPMARESETMASK_in[2] = (CH1_TXPMARESETMASK[2] === 1'bz) || CH1_TXPMARESETMASK[2]; // rv 1
  assign CH1_TXPOSTCURSOR_in[0] = (CH1_TXPOSTCURSOR[0] === 1'bz) || CH1_TXPOSTCURSOR[0]; // rv 1
  assign CH1_TXPOSTCURSOR_in[1] = (CH1_TXPOSTCURSOR[1] === 1'bz) || CH1_TXPOSTCURSOR[1]; // rv 1
  assign CH1_TXPOSTCURSOR_in[2] = (CH1_TXPOSTCURSOR[2] === 1'bz) || CH1_TXPOSTCURSOR[2]; // rv 1
  assign CH1_TXPOSTCURSOR_in[3] = (CH1_TXPOSTCURSOR[3] === 1'bz) || CH1_TXPOSTCURSOR[3]; // rv 1
  assign CH1_TXPOSTCURSOR_in[4] = (CH1_TXPOSTCURSOR[4] === 1'bz) || CH1_TXPOSTCURSOR[4]; // rv 1
  assign CH1_TXPRBSFORCEERR_in = (CH1_TXPRBSFORCEERR === 1'bz) || CH1_TXPRBSFORCEERR; // rv 1
  assign CH1_TXPRBSSEL_in[0] = (CH1_TXPRBSSEL[0] === 1'bz) || CH1_TXPRBSSEL[0]; // rv 1
  assign CH1_TXPRBSSEL_in[1] = (CH1_TXPRBSSEL[1] === 1'bz) || CH1_TXPRBSSEL[1]; // rv 1
  assign CH1_TXPRBSSEL_in[2] = (CH1_TXPRBSSEL[2] === 1'bz) || CH1_TXPRBSSEL[2]; // rv 1
  assign CH1_TXPRBSSEL_in[3] = (CH1_TXPRBSSEL[3] === 1'bz) || CH1_TXPRBSSEL[3]; // rv 1
  assign CH1_TXPRECURSOR_in[0] = (CH1_TXPRECURSOR[0] === 1'bz) || CH1_TXPRECURSOR[0]; // rv 1
  assign CH1_TXPRECURSOR_in[1] = (CH1_TXPRECURSOR[1] === 1'bz) || CH1_TXPRECURSOR[1]; // rv 1
  assign CH1_TXPRECURSOR_in[2] = (CH1_TXPRECURSOR[2] === 1'bz) || CH1_TXPRECURSOR[2]; // rv 1
  assign CH1_TXPRECURSOR_in[3] = (CH1_TXPRECURSOR[3] === 1'bz) || CH1_TXPRECURSOR[3]; // rv 1
  assign CH1_TXPRECURSOR_in[4] = (CH1_TXPRECURSOR[4] === 1'bz) || CH1_TXPRECURSOR[4]; // rv 1
  assign CH1_TXPROGDIVRESET_in = (CH1_TXPROGDIVRESET === 1'bz) || CH1_TXPROGDIVRESET; // rv 1
  assign CH1_TXQPIBIASEN_in = (CH1_TXQPIBIASEN === 1'bz) || CH1_TXQPIBIASEN; // rv 1
  assign CH1_TXQPIWEAKPU_in = (CH1_TXQPIWEAKPU === 1'bz) || CH1_TXQPIWEAKPU; // rv 1
  assign CH1_TXRESETMODE_in[0] = (CH1_TXRESETMODE[0] === 1'bz) || CH1_TXRESETMODE[0]; // rv 1
  assign CH1_TXRESETMODE_in[1] = (CH1_TXRESETMODE[1] === 1'bz) || CH1_TXRESETMODE[1]; // rv 1
  assign CH1_TXSWING_in = (CH1_TXSWING === 1'bz) || CH1_TXSWING; // rv 1
  assign CH1_TXSYNCALLIN_in = (CH1_TXSYNCALLIN === 1'bz) || CH1_TXSYNCALLIN; // rv 1
  assign CH1_TXUSERRDY_in = (CH1_TXUSERRDY === 1'bz) || CH1_TXUSERRDY; // rv 1
  assign CH2_CDRBMCDRREQ_in = (CH2_CDRBMCDRREQ === 1'bz) || CH2_CDRBMCDRREQ; // rv 1
  assign CH2_CDRFREQOS_in = (CH2_CDRFREQOS === 1'bz) || CH2_CDRFREQOS; // rv 1
  assign CH2_CDRINCPCTRL_in = (CH2_CDRINCPCTRL === 1'bz) || CH2_CDRINCPCTRL; // rv 1
  assign CH2_CDRSTEPDIR_in = (CH2_CDRSTEPDIR === 1'bz) || CH2_CDRSTEPDIR; // rv 1
  assign CH2_CDRSTEPSQ_in = (CH2_CDRSTEPSQ === 1'bz) || CH2_CDRSTEPSQ; // rv 1
  assign CH2_CDRSTEPSX_in = (CH2_CDRSTEPSX === 1'bz) || CH2_CDRSTEPSX; // rv 1
  assign CH2_CLKRSVD0_in = (CH2_CLKRSVD0 === 1'bz) || CH2_CLKRSVD0; // rv 1
  assign CH2_CLKRSVD1_in = (CH2_CLKRSVD1 === 1'bz) || CH2_CLKRSVD1; // rv 1
  assign CH2_DFEHOLD_in = (CH2_DFEHOLD === 1'bz) || CH2_DFEHOLD; // rv 1
  assign CH2_DFEOVRD_in = (CH2_DFEOVRD === 1'bz) || CH2_DFEOVRD; // rv 1
  assign CH2_DMONFIFORESET_in = (CH2_DMONFIFORESET === 1'bz) || CH2_DMONFIFORESET; // rv 1
  assign CH2_DMONITORCLK_in = (CH2_DMONITORCLK === 1'bz) || CH2_DMONITORCLK; // rv 1
  assign CH2_EYESCANRESET_in = (CH2_EYESCANRESET === 1'bz) || CH2_EYESCANRESET; // rv 1
  assign CH2_GTRSVD_in[0] = (CH2_GTRSVD[0] === 1'bz) || CH2_GTRSVD[0]; // rv 1
  assign CH2_GTRSVD_in[10] = (CH2_GTRSVD[10] === 1'bz) || CH2_GTRSVD[10]; // rv 1
  assign CH2_GTRSVD_in[11] = (CH2_GTRSVD[11] === 1'bz) || CH2_GTRSVD[11]; // rv 1
  assign CH2_GTRSVD_in[12] = (CH2_GTRSVD[12] === 1'bz) || CH2_GTRSVD[12]; // rv 1
  assign CH2_GTRSVD_in[13] = (CH2_GTRSVD[13] === 1'bz) || CH2_GTRSVD[13]; // rv 1
  assign CH2_GTRSVD_in[14] = (CH2_GTRSVD[14] === 1'bz) || CH2_GTRSVD[14]; // rv 1
  assign CH2_GTRSVD_in[15] = (CH2_GTRSVD[15] === 1'bz) || CH2_GTRSVD[15]; // rv 1
  assign CH2_GTRSVD_in[1] = (CH2_GTRSVD[1] === 1'bz) || CH2_GTRSVD[1]; // rv 1
  assign CH2_GTRSVD_in[2] = (CH2_GTRSVD[2] === 1'bz) || CH2_GTRSVD[2]; // rv 1
  assign CH2_GTRSVD_in[3] = (CH2_GTRSVD[3] === 1'bz) || CH2_GTRSVD[3]; // rv 1
  assign CH2_GTRSVD_in[4] = (CH2_GTRSVD[4] === 1'bz) || CH2_GTRSVD[4]; // rv 1
  assign CH2_GTRSVD_in[5] = (CH2_GTRSVD[5] === 1'bz) || CH2_GTRSVD[5]; // rv 1
  assign CH2_GTRSVD_in[6] = (CH2_GTRSVD[6] === 1'bz) || CH2_GTRSVD[6]; // rv 1
  assign CH2_GTRSVD_in[7] = (CH2_GTRSVD[7] === 1'bz) || CH2_GTRSVD[7]; // rv 1
  assign CH2_GTRSVD_in[8] = (CH2_GTRSVD[8] === 1'bz) || CH2_GTRSVD[8]; // rv 1
  assign CH2_GTRSVD_in[9] = (CH2_GTRSVD[9] === 1'bz) || CH2_GTRSVD[9]; // rv 1
  assign CH2_GTRXRESET_in = (CH2_GTRXRESET === 1'bz) || CH2_GTRXRESET; // rv 1
  assign CH2_GTTXRESET_in = (CH2_GTTXRESET === 1'bz) || CH2_GTTXRESET; // rv 1
  assign CH2_GTYPRXN_in = CH2_GTYPRXN;
  assign CH2_GTYPRXP_in = CH2_GTYPRXP;
  assign CH2_HSDPPCSRESET_in = (CH2_HSDPPCSRESET === 1'bz) || CH2_HSDPPCSRESET; // rv 1
  assign CH2_ILORESETMASK_in = (CH2_ILORESETMASK === 1'bz) || CH2_ILORESETMASK; // rv 1
  assign CH2_ILORESET_in = (CH2_ILORESET === 1'bz) || CH2_ILORESET; // rv 1
  assign CH2_LOOPBACK_in[0] = (CH2_LOOPBACK[0] === 1'bz) || CH2_LOOPBACK[0]; // rv 1
  assign CH2_LOOPBACK_in[1] = (CH2_LOOPBACK[1] === 1'bz) || CH2_LOOPBACK[1]; // rv 1
  assign CH2_LOOPBACK_in[2] = (CH2_LOOPBACK[2] === 1'bz) || CH2_LOOPBACK[2]; // rv 1
  assign CH2_PCIERSTB_in = (CH2_PCIERSTB === 1'bz) || CH2_PCIERSTB; // rv 1
  assign CH2_PCSRSVDIN_in[0] = (CH2_PCSRSVDIN[0] === 1'bz) || CH2_PCSRSVDIN[0]; // rv 1
  assign CH2_PCSRSVDIN_in[10] = (CH2_PCSRSVDIN[10] === 1'bz) || CH2_PCSRSVDIN[10]; // rv 1
  assign CH2_PCSRSVDIN_in[11] = (CH2_PCSRSVDIN[11] === 1'bz) || CH2_PCSRSVDIN[11]; // rv 1
  assign CH2_PCSRSVDIN_in[12] = (CH2_PCSRSVDIN[12] === 1'bz) || CH2_PCSRSVDIN[12]; // rv 1
  assign CH2_PCSRSVDIN_in[13] = (CH2_PCSRSVDIN[13] === 1'bz) || CH2_PCSRSVDIN[13]; // rv 1
  assign CH2_PCSRSVDIN_in[14] = (CH2_PCSRSVDIN[14] === 1'bz) || CH2_PCSRSVDIN[14]; // rv 1
  assign CH2_PCSRSVDIN_in[15] = (CH2_PCSRSVDIN[15] === 1'bz) || CH2_PCSRSVDIN[15]; // rv 1
  assign CH2_PCSRSVDIN_in[1] = (CH2_PCSRSVDIN[1] === 1'bz) || CH2_PCSRSVDIN[1]; // rv 1
  assign CH2_PCSRSVDIN_in[2] = (CH2_PCSRSVDIN[2] === 1'bz) || CH2_PCSRSVDIN[2]; // rv 1
  assign CH2_PCSRSVDIN_in[3] = (CH2_PCSRSVDIN[3] === 1'bz) || CH2_PCSRSVDIN[3]; // rv 1
  assign CH2_PCSRSVDIN_in[4] = (CH2_PCSRSVDIN[4] === 1'bz) || CH2_PCSRSVDIN[4]; // rv 1
  assign CH2_PCSRSVDIN_in[5] = (CH2_PCSRSVDIN[5] === 1'bz) || CH2_PCSRSVDIN[5]; // rv 1
  assign CH2_PCSRSVDIN_in[6] = (CH2_PCSRSVDIN[6] === 1'bz) || CH2_PCSRSVDIN[6]; // rv 1
  assign CH2_PCSRSVDIN_in[7] = (CH2_PCSRSVDIN[7] === 1'bz) || CH2_PCSRSVDIN[7]; // rv 1
  assign CH2_PCSRSVDIN_in[8] = (CH2_PCSRSVDIN[8] === 1'bz) || CH2_PCSRSVDIN[8]; // rv 1
  assign CH2_PCSRSVDIN_in[9] = (CH2_PCSRSVDIN[9] === 1'bz) || CH2_PCSRSVDIN[9]; // rv 1
  assign CH2_RXCDRHOLD_in = (CH2_RXCDRHOLD === 1'bz) || CH2_RXCDRHOLD; // rv 1
  assign CH2_RXCDROVRDEN_in = (CH2_RXCDROVRDEN === 1'bz) || CH2_RXCDROVRDEN; // rv 1
  assign CH2_RXCDRRESET_in = (CH2_RXCDRRESET === 1'bz) || CH2_RXCDRRESET; // rv 1
  assign CH2_RXDAPICODEOVRDEN_in = (CH2_RXDAPICODEOVRDEN === 1'bz) || CH2_RXDAPICODEOVRDEN; // rv 1
  assign CH2_RXDAPICODERESET_in = (CH2_RXDAPICODERESET === 1'bz) || CH2_RXDAPICODERESET; // rv 1
  assign CH2_RXDAPIRESETMASK_in[0] = (CH2_RXDAPIRESETMASK[0] === 1'bz) || CH2_RXDAPIRESETMASK[0]; // rv 1
  assign CH2_RXDAPIRESETMASK_in[1] = (CH2_RXDAPIRESETMASK[1] === 1'bz) || CH2_RXDAPIRESETMASK[1]; // rv 1
  assign CH2_RXDAPIRESET_in = (CH2_RXDAPIRESET === 1'bz) || CH2_RXDAPIRESET; // rv 1
  assign CH2_RXLATCLK_in = (CH2_RXLATCLK === 1'bz) || CH2_RXLATCLK; // rv 1
  assign CH2_RXLPMEN_in = (CH2_RXLPMEN === 1'bz) || CH2_RXLPMEN; // rv 1
  assign CH2_RXMLFINEALIGNREQ_in = (CH2_RXMLFINEALIGNREQ === 1'bz) || CH2_RXMLFINEALIGNREQ; // rv 1
  assign CH2_RXOOBRESET_in = (CH2_RXOOBRESET === 1'bz) || CH2_RXOOBRESET; // rv 1
  assign CH2_RXPCSRESETMASK_in[0] = (CH2_RXPCSRESETMASK[0] === 1'bz) || CH2_RXPCSRESETMASK[0]; // rv 1
  assign CH2_RXPCSRESETMASK_in[1] = (CH2_RXPCSRESETMASK[1] === 1'bz) || CH2_RXPCSRESETMASK[1]; // rv 1
  assign CH2_RXPCSRESETMASK_in[2] = (CH2_RXPCSRESETMASK[2] === 1'bz) || CH2_RXPCSRESETMASK[2]; // rv 1
  assign CH2_RXPCSRESETMASK_in[3] = (CH2_RXPCSRESETMASK[3] === 1'bz) || CH2_RXPCSRESETMASK[3]; // rv 1
  assign CH2_RXPCSRESETMASK_in[4] = (CH2_RXPCSRESETMASK[4] === 1'bz) || CH2_RXPCSRESETMASK[4]; // rv 1
  assign CH2_RXPHALIGNRESETMASK_in[0] = (CH2_RXPHALIGNRESETMASK[0] === 1'bz) || CH2_RXPHALIGNRESETMASK[0]; // rv 1
  assign CH2_RXPHALIGNRESETMASK_in[1] = (CH2_RXPHALIGNRESETMASK[1] === 1'bz) || CH2_RXPHALIGNRESETMASK[1]; // rv 1
  assign CH2_RXPHDLYPD_in = (CH2_RXPHDLYPD === 1'bz) || CH2_RXPHDLYPD; // rv 1
  assign CH2_RXPHDLYRESET_in = (CH2_RXPHDLYRESET === 1'bz) || CH2_RXPHDLYRESET; // rv 1
  assign CH2_RXPMARESETMASK_in[0] = (CH2_RXPMARESETMASK[0] === 1'bz) || CH2_RXPMARESETMASK[0]; // rv 1
  assign CH2_RXPMARESETMASK_in[1] = (CH2_RXPMARESETMASK[1] === 1'bz) || CH2_RXPMARESETMASK[1]; // rv 1
  assign CH2_RXPMARESETMASK_in[2] = (CH2_RXPMARESETMASK[2] === 1'bz) || CH2_RXPMARESETMASK[2]; // rv 1
  assign CH2_RXPMARESETMASK_in[3] = (CH2_RXPMARESETMASK[3] === 1'bz) || CH2_RXPMARESETMASK[3]; // rv 1
  assign CH2_RXPMARESETMASK_in[4] = (CH2_RXPMARESETMASK[4] === 1'bz) || CH2_RXPMARESETMASK[4]; // rv 1
  assign CH2_RXPMARESETMASK_in[5] = (CH2_RXPMARESETMASK[5] === 1'bz) || CH2_RXPMARESETMASK[5]; // rv 1
  assign CH2_RXPMARESETMASK_in[6] = (CH2_RXPMARESETMASK[6] === 1'bz) || CH2_RXPMARESETMASK[6]; // rv 1
  assign CH2_RXPRBSCNTRESET_in = (CH2_RXPRBSCNTRESET === 1'bz) || CH2_RXPRBSCNTRESET; // rv 1
  assign CH2_RXPRBSSEL_in[0] = (CH2_RXPRBSSEL[0] === 1'bz) || CH2_RXPRBSSEL[0]; // rv 1
  assign CH2_RXPRBSSEL_in[1] = (CH2_RXPRBSSEL[1] === 1'bz) || CH2_RXPRBSSEL[1]; // rv 1
  assign CH2_RXPRBSSEL_in[2] = (CH2_RXPRBSSEL[2] === 1'bz) || CH2_RXPRBSSEL[2]; // rv 1
  assign CH2_RXPRBSSEL_in[3] = (CH2_RXPRBSSEL[3] === 1'bz) || CH2_RXPRBSSEL[3]; // rv 1
  assign CH2_RXPROGDIVRESET_in = (CH2_RXPROGDIVRESET === 1'bz) || CH2_RXPROGDIVRESET; // rv 1
  assign CH2_RXQPIEN_in = (CH2_RXQPIEN === 1'bz) || CH2_RXQPIEN; // rv 1
  assign CH2_RXRESETMODE_in[0] = (CH2_RXRESETMODE[0] === 1'bz) || CH2_RXRESETMODE[0]; // rv 1
  assign CH2_RXRESETMODE_in[1] = (CH2_RXRESETMODE[1] === 1'bz) || CH2_RXRESETMODE[1]; // rv 1
  assign CH2_RXSYNCALLIN_in = (CH2_RXSYNCALLIN === 1'bz) || CH2_RXSYNCALLIN; // rv 1
  assign CH2_RXTERMINATION_in = (CH2_RXTERMINATION === 1'bz) || CH2_RXTERMINATION; // rv 1
  assign CH2_RXUSERRDY_in = (CH2_RXUSERRDY === 1'bz) || CH2_RXUSERRDY; // rv 1
  assign CH2_TSTCLK0_in = CH2_TSTCLK0;
  assign CH2_TSTCLK1_in = CH2_TSTCLK1;
  assign CH2_TXDAPICODEOVRDEN_in = (CH2_TXDAPICODEOVRDEN === 1'bz) || CH2_TXDAPICODEOVRDEN; // rv 1
  assign CH2_TXDAPICODERESET_in = (CH2_TXDAPICODERESET === 1'bz) || CH2_TXDAPICODERESET; // rv 1
  assign CH2_TXDAPIRESETMASK_in[0] = (CH2_TXDAPIRESETMASK[0] === 1'bz) || CH2_TXDAPIRESETMASK[0]; // rv 1
  assign CH2_TXDAPIRESETMASK_in[1] = (CH2_TXDAPIRESETMASK[1] === 1'bz) || CH2_TXDAPIRESETMASK[1]; // rv 1
  assign CH2_TXDAPIRESET_in = (CH2_TXDAPIRESET === 1'bz) || CH2_TXDAPIRESET; // rv 1
  assign CH2_TXDEEMPH_in[0] = (CH2_TXDEEMPH[0] === 1'bz) || CH2_TXDEEMPH[0]; // rv 1
  assign CH2_TXDEEMPH_in[1] = (CH2_TXDEEMPH[1] === 1'bz) || CH2_TXDEEMPH[1]; // rv 1
  assign CH2_TXDIFFCTRL_in[0] = (CH2_TXDIFFCTRL[0] === 1'bz) || CH2_TXDIFFCTRL[0]; // rv 1
  assign CH2_TXDIFFCTRL_in[1] = (CH2_TXDIFFCTRL[1] === 1'bz) || CH2_TXDIFFCTRL[1]; // rv 1
  assign CH2_TXDIFFCTRL_in[2] = (CH2_TXDIFFCTRL[2] === 1'bz) || CH2_TXDIFFCTRL[2]; // rv 1
  assign CH2_TXDIFFCTRL_in[3] = (CH2_TXDIFFCTRL[3] === 1'bz) || CH2_TXDIFFCTRL[3]; // rv 1
  assign CH2_TXDIFFCTRL_in[4] = (CH2_TXDIFFCTRL[4] === 1'bz) || CH2_TXDIFFCTRL[4]; // rv 1
  assign CH2_TXDLYALIGNREQ_in = (CH2_TXDLYALIGNREQ === 1'bz) || CH2_TXDLYALIGNREQ; // rv 1
  assign CH2_TXLATCLK_in = (CH2_TXLATCLK === 1'bz) || CH2_TXLATCLK; // rv 1
  assign CH2_TXMAINCURSOR_in[0] = (CH2_TXMAINCURSOR[0] === 1'bz) || CH2_TXMAINCURSOR[0]; // rv 1
  assign CH2_TXMAINCURSOR_in[1] = (CH2_TXMAINCURSOR[1] === 1'bz) || CH2_TXMAINCURSOR[1]; // rv 1
  assign CH2_TXMAINCURSOR_in[2] = (CH2_TXMAINCURSOR[2] === 1'bz) || CH2_TXMAINCURSOR[2]; // rv 1
  assign CH2_TXMAINCURSOR_in[3] = (CH2_TXMAINCURSOR[3] === 1'bz) || CH2_TXMAINCURSOR[3]; // rv 1
  assign CH2_TXMAINCURSOR_in[4] = (CH2_TXMAINCURSOR[4] === 1'bz) || CH2_TXMAINCURSOR[4]; // rv 1
  assign CH2_TXMAINCURSOR_in[5] = (CH2_TXMAINCURSOR[5] === 1'bz) || CH2_TXMAINCURSOR[5]; // rv 1
  assign CH2_TXMAINCURSOR_in[6] = (CH2_TXMAINCURSOR[6] === 1'bz) || CH2_TXMAINCURSOR[6]; // rv 1
  assign CH2_TXMARGIN_in[0] = (CH2_TXMARGIN[0] === 1'bz) || CH2_TXMARGIN[0]; // rv 1
  assign CH2_TXMARGIN_in[1] = (CH2_TXMARGIN[1] === 1'bz) || CH2_TXMARGIN[1]; // rv 1
  assign CH2_TXMARGIN_in[2] = (CH2_TXMARGIN[2] === 1'bz) || CH2_TXMARGIN[2]; // rv 1
  assign CH2_TXMLDCHAINDONE_in = (CH2_TXMLDCHAINDONE === 1'bz) || CH2_TXMLDCHAINDONE; // rv 1
  assign CH2_TXMLDCHAINREQ_in = (CH2_TXMLDCHAINREQ === 1'bz) || CH2_TXMLDCHAINREQ; // rv 1
  assign CH2_TXONESZEROS_in = (CH2_TXONESZEROS === 1'bz) || CH2_TXONESZEROS; // rv 1
  assign CH2_TXPAUSEDELAYALIGN_in = (CH2_TXPAUSEDELAYALIGN === 1'bz) || CH2_TXPAUSEDELAYALIGN; // rv 1
  assign CH2_TXPCSRESETMASK_in = (CH2_TXPCSRESETMASK === 1'bz) || CH2_TXPCSRESETMASK; // rv 1
  assign CH2_TXPHALIGNREQ_in = (CH2_TXPHALIGNREQ === 1'bz) || CH2_TXPHALIGNREQ; // rv 1
  assign CH2_TXPHALIGNRESETMASK_in[0] = (CH2_TXPHALIGNRESETMASK[0] === 1'bz) || CH2_TXPHALIGNRESETMASK[0]; // rv 1
  assign CH2_TXPHALIGNRESETMASK_in[1] = (CH2_TXPHALIGNRESETMASK[1] === 1'bz) || CH2_TXPHALIGNRESETMASK[1]; // rv 1
  assign CH2_TXPHDLYPD_in = (CH2_TXPHDLYPD === 1'bz) || CH2_TXPHDLYPD; // rv 1
  assign CH2_TXPHDLYRESET_in = (CH2_TXPHDLYRESET === 1'bz) || CH2_TXPHDLYRESET; // rv 1
  assign CH2_TXPHDLYTSTCLK_in = (CH2_TXPHDLYTSTCLK === 1'bz) || CH2_TXPHDLYTSTCLK; // rv 1
  assign CH2_TXPHSETINITREQ_in = (CH2_TXPHSETINITREQ === 1'bz) || CH2_TXPHSETINITREQ; // rv 1
  assign CH2_TXPHSHIFT180_in = (CH2_TXPHSHIFT180 === 1'bz) || CH2_TXPHSHIFT180; // rv 1
  assign CH2_TXPICODEOVRDEN_in = (CH2_TXPICODEOVRDEN === 1'bz) || CH2_TXPICODEOVRDEN; // rv 1
  assign CH2_TXPICODERESET_in = (CH2_TXPICODERESET === 1'bz) || CH2_TXPICODERESET; // rv 1
  assign CH2_TXPISOPD_in = (CH2_TXPISOPD === 1'bz) || CH2_TXPISOPD; // rv 1
  assign CH2_TXPMARESETMASK_in[0] = (CH2_TXPMARESETMASK[0] === 1'bz) || CH2_TXPMARESETMASK[0]; // rv 1
  assign CH2_TXPMARESETMASK_in[1] = (CH2_TXPMARESETMASK[1] === 1'bz) || CH2_TXPMARESETMASK[1]; // rv 1
  assign CH2_TXPMARESETMASK_in[2] = (CH2_TXPMARESETMASK[2] === 1'bz) || CH2_TXPMARESETMASK[2]; // rv 1
  assign CH2_TXPOSTCURSOR_in[0] = (CH2_TXPOSTCURSOR[0] === 1'bz) || CH2_TXPOSTCURSOR[0]; // rv 1
  assign CH2_TXPOSTCURSOR_in[1] = (CH2_TXPOSTCURSOR[1] === 1'bz) || CH2_TXPOSTCURSOR[1]; // rv 1
  assign CH2_TXPOSTCURSOR_in[2] = (CH2_TXPOSTCURSOR[2] === 1'bz) || CH2_TXPOSTCURSOR[2]; // rv 1
  assign CH2_TXPOSTCURSOR_in[3] = (CH2_TXPOSTCURSOR[3] === 1'bz) || CH2_TXPOSTCURSOR[3]; // rv 1
  assign CH2_TXPOSTCURSOR_in[4] = (CH2_TXPOSTCURSOR[4] === 1'bz) || CH2_TXPOSTCURSOR[4]; // rv 1
  assign CH2_TXPRBSFORCEERR_in = (CH2_TXPRBSFORCEERR === 1'bz) || CH2_TXPRBSFORCEERR; // rv 1
  assign CH2_TXPRBSSEL_in[0] = (CH2_TXPRBSSEL[0] === 1'bz) || CH2_TXPRBSSEL[0]; // rv 1
  assign CH2_TXPRBSSEL_in[1] = (CH2_TXPRBSSEL[1] === 1'bz) || CH2_TXPRBSSEL[1]; // rv 1
  assign CH2_TXPRBSSEL_in[2] = (CH2_TXPRBSSEL[2] === 1'bz) || CH2_TXPRBSSEL[2]; // rv 1
  assign CH2_TXPRBSSEL_in[3] = (CH2_TXPRBSSEL[3] === 1'bz) || CH2_TXPRBSSEL[3]; // rv 1
  assign CH2_TXPRECURSOR_in[0] = (CH2_TXPRECURSOR[0] === 1'bz) || CH2_TXPRECURSOR[0]; // rv 1
  assign CH2_TXPRECURSOR_in[1] = (CH2_TXPRECURSOR[1] === 1'bz) || CH2_TXPRECURSOR[1]; // rv 1
  assign CH2_TXPRECURSOR_in[2] = (CH2_TXPRECURSOR[2] === 1'bz) || CH2_TXPRECURSOR[2]; // rv 1
  assign CH2_TXPRECURSOR_in[3] = (CH2_TXPRECURSOR[3] === 1'bz) || CH2_TXPRECURSOR[3]; // rv 1
  assign CH2_TXPRECURSOR_in[4] = (CH2_TXPRECURSOR[4] === 1'bz) || CH2_TXPRECURSOR[4]; // rv 1
  assign CH2_TXPROGDIVRESET_in = (CH2_TXPROGDIVRESET === 1'bz) || CH2_TXPROGDIVRESET; // rv 1
  assign CH2_TXQPIBIASEN_in = (CH2_TXQPIBIASEN === 1'bz) || CH2_TXQPIBIASEN; // rv 1
  assign CH2_TXQPIWEAKPU_in = (CH2_TXQPIWEAKPU === 1'bz) || CH2_TXQPIWEAKPU; // rv 1
  assign CH2_TXRESETMODE_in[0] = (CH2_TXRESETMODE[0] === 1'bz) || CH2_TXRESETMODE[0]; // rv 1
  assign CH2_TXRESETMODE_in[1] = (CH2_TXRESETMODE[1] === 1'bz) || CH2_TXRESETMODE[1]; // rv 1
  assign CH2_TXSWING_in = (CH2_TXSWING === 1'bz) || CH2_TXSWING; // rv 1
  assign CH2_TXSYNCALLIN_in = (CH2_TXSYNCALLIN === 1'bz) || CH2_TXSYNCALLIN; // rv 1
  assign CH2_TXUSERRDY_in = (CH2_TXUSERRDY === 1'bz) || CH2_TXUSERRDY; // rv 1
  assign CH3_CDRBMCDRREQ_in = (CH3_CDRBMCDRREQ === 1'bz) || CH3_CDRBMCDRREQ; // rv 1
  assign CH3_CDRFREQOS_in = (CH3_CDRFREQOS === 1'bz) || CH3_CDRFREQOS; // rv 1
  assign CH3_CDRINCPCTRL_in = (CH3_CDRINCPCTRL === 1'bz) || CH3_CDRINCPCTRL; // rv 1
  assign CH3_CDRSTEPDIR_in = (CH3_CDRSTEPDIR === 1'bz) || CH3_CDRSTEPDIR; // rv 1
  assign CH3_CDRSTEPSQ_in = (CH3_CDRSTEPSQ === 1'bz) || CH3_CDRSTEPSQ; // rv 1
  assign CH3_CDRSTEPSX_in = (CH3_CDRSTEPSX === 1'bz) || CH3_CDRSTEPSX; // rv 1
  assign CH3_CLKRSVD0_in = (CH3_CLKRSVD0 === 1'bz) || CH3_CLKRSVD0; // rv 1
  assign CH3_CLKRSVD1_in = (CH3_CLKRSVD1 === 1'bz) || CH3_CLKRSVD1; // rv 1
  assign CH3_DFEHOLD_in = (CH3_DFEHOLD === 1'bz) || CH3_DFEHOLD; // rv 1
  assign CH3_DFEOVRD_in = (CH3_DFEOVRD === 1'bz) || CH3_DFEOVRD; // rv 1
  assign CH3_DMONFIFORESET_in = (CH3_DMONFIFORESET === 1'bz) || CH3_DMONFIFORESET; // rv 1
  assign CH3_DMONITORCLK_in = (CH3_DMONITORCLK === 1'bz) || CH3_DMONITORCLK; // rv 1
  assign CH3_EYESCANRESET_in = (CH3_EYESCANRESET === 1'bz) || CH3_EYESCANRESET; // rv 1
  assign CH3_GTRSVD_in[0] = (CH3_GTRSVD[0] === 1'bz) || CH3_GTRSVD[0]; // rv 1
  assign CH3_GTRSVD_in[10] = (CH3_GTRSVD[10] === 1'bz) || CH3_GTRSVD[10]; // rv 1
  assign CH3_GTRSVD_in[11] = (CH3_GTRSVD[11] === 1'bz) || CH3_GTRSVD[11]; // rv 1
  assign CH3_GTRSVD_in[12] = (CH3_GTRSVD[12] === 1'bz) || CH3_GTRSVD[12]; // rv 1
  assign CH3_GTRSVD_in[13] = (CH3_GTRSVD[13] === 1'bz) || CH3_GTRSVD[13]; // rv 1
  assign CH3_GTRSVD_in[14] = (CH3_GTRSVD[14] === 1'bz) || CH3_GTRSVD[14]; // rv 1
  assign CH3_GTRSVD_in[15] = (CH3_GTRSVD[15] === 1'bz) || CH3_GTRSVD[15]; // rv 1
  assign CH3_GTRSVD_in[1] = (CH3_GTRSVD[1] === 1'bz) || CH3_GTRSVD[1]; // rv 1
  assign CH3_GTRSVD_in[2] = (CH3_GTRSVD[2] === 1'bz) || CH3_GTRSVD[2]; // rv 1
  assign CH3_GTRSVD_in[3] = (CH3_GTRSVD[3] === 1'bz) || CH3_GTRSVD[3]; // rv 1
  assign CH3_GTRSVD_in[4] = (CH3_GTRSVD[4] === 1'bz) || CH3_GTRSVD[4]; // rv 1
  assign CH3_GTRSVD_in[5] = (CH3_GTRSVD[5] === 1'bz) || CH3_GTRSVD[5]; // rv 1
  assign CH3_GTRSVD_in[6] = (CH3_GTRSVD[6] === 1'bz) || CH3_GTRSVD[6]; // rv 1
  assign CH3_GTRSVD_in[7] = (CH3_GTRSVD[7] === 1'bz) || CH3_GTRSVD[7]; // rv 1
  assign CH3_GTRSVD_in[8] = (CH3_GTRSVD[8] === 1'bz) || CH3_GTRSVD[8]; // rv 1
  assign CH3_GTRSVD_in[9] = (CH3_GTRSVD[9] === 1'bz) || CH3_GTRSVD[9]; // rv 1
  assign CH3_GTRXRESET_in = (CH3_GTRXRESET === 1'bz) || CH3_GTRXRESET; // rv 1
  assign CH3_GTTXRESET_in = (CH3_GTTXRESET === 1'bz) || CH3_GTTXRESET; // rv 1
  assign CH3_GTYPRXN_in = CH3_GTYPRXN;
  assign CH3_GTYPRXP_in = CH3_GTYPRXP;
  assign CH3_HSDPPCSRESET_in = (CH3_HSDPPCSRESET === 1'bz) || CH3_HSDPPCSRESET; // rv 1
  assign CH3_ILORESETMASK_in = (CH3_ILORESETMASK === 1'bz) || CH3_ILORESETMASK; // rv 1
  assign CH3_ILORESET_in = (CH3_ILORESET === 1'bz) || CH3_ILORESET; // rv 1
  assign CH3_LOOPBACK_in[0] = (CH3_LOOPBACK[0] === 1'bz) || CH3_LOOPBACK[0]; // rv 1
  assign CH3_LOOPBACK_in[1] = (CH3_LOOPBACK[1] === 1'bz) || CH3_LOOPBACK[1]; // rv 1
  assign CH3_LOOPBACK_in[2] = (CH3_LOOPBACK[2] === 1'bz) || CH3_LOOPBACK[2]; // rv 1
  assign CH3_PCIERSTB_in = (CH3_PCIERSTB === 1'bz) || CH3_PCIERSTB; // rv 1
  assign CH3_PCSRSVDIN_in[0] = (CH3_PCSRSVDIN[0] === 1'bz) || CH3_PCSRSVDIN[0]; // rv 1
  assign CH3_PCSRSVDIN_in[10] = (CH3_PCSRSVDIN[10] === 1'bz) || CH3_PCSRSVDIN[10]; // rv 1
  assign CH3_PCSRSVDIN_in[11] = (CH3_PCSRSVDIN[11] === 1'bz) || CH3_PCSRSVDIN[11]; // rv 1
  assign CH3_PCSRSVDIN_in[12] = (CH3_PCSRSVDIN[12] === 1'bz) || CH3_PCSRSVDIN[12]; // rv 1
  assign CH3_PCSRSVDIN_in[13] = (CH3_PCSRSVDIN[13] === 1'bz) || CH3_PCSRSVDIN[13]; // rv 1
  assign CH3_PCSRSVDIN_in[14] = (CH3_PCSRSVDIN[14] === 1'bz) || CH3_PCSRSVDIN[14]; // rv 1
  assign CH3_PCSRSVDIN_in[15] = (CH3_PCSRSVDIN[15] === 1'bz) || CH3_PCSRSVDIN[15]; // rv 1
  assign CH3_PCSRSVDIN_in[1] = (CH3_PCSRSVDIN[1] === 1'bz) || CH3_PCSRSVDIN[1]; // rv 1
  assign CH3_PCSRSVDIN_in[2] = (CH3_PCSRSVDIN[2] === 1'bz) || CH3_PCSRSVDIN[2]; // rv 1
  assign CH3_PCSRSVDIN_in[3] = (CH3_PCSRSVDIN[3] === 1'bz) || CH3_PCSRSVDIN[3]; // rv 1
  assign CH3_PCSRSVDIN_in[4] = (CH3_PCSRSVDIN[4] === 1'bz) || CH3_PCSRSVDIN[4]; // rv 1
  assign CH3_PCSRSVDIN_in[5] = (CH3_PCSRSVDIN[5] === 1'bz) || CH3_PCSRSVDIN[5]; // rv 1
  assign CH3_PCSRSVDIN_in[6] = (CH3_PCSRSVDIN[6] === 1'bz) || CH3_PCSRSVDIN[6]; // rv 1
  assign CH3_PCSRSVDIN_in[7] = (CH3_PCSRSVDIN[7] === 1'bz) || CH3_PCSRSVDIN[7]; // rv 1
  assign CH3_PCSRSVDIN_in[8] = (CH3_PCSRSVDIN[8] === 1'bz) || CH3_PCSRSVDIN[8]; // rv 1
  assign CH3_PCSRSVDIN_in[9] = (CH3_PCSRSVDIN[9] === 1'bz) || CH3_PCSRSVDIN[9]; // rv 1
  assign CH3_RXCDRHOLD_in = (CH3_RXCDRHOLD === 1'bz) || CH3_RXCDRHOLD; // rv 1
  assign CH3_RXCDROVRDEN_in = (CH3_RXCDROVRDEN === 1'bz) || CH3_RXCDROVRDEN; // rv 1
  assign CH3_RXCDRRESET_in = (CH3_RXCDRRESET === 1'bz) || CH3_RXCDRRESET; // rv 1
  assign CH3_RXDAPICODEOVRDEN_in = (CH3_RXDAPICODEOVRDEN === 1'bz) || CH3_RXDAPICODEOVRDEN; // rv 1
  assign CH3_RXDAPICODERESET_in = (CH3_RXDAPICODERESET === 1'bz) || CH3_RXDAPICODERESET; // rv 1
  assign CH3_RXDAPIRESETMASK_in[0] = (CH3_RXDAPIRESETMASK[0] === 1'bz) || CH3_RXDAPIRESETMASK[0]; // rv 1
  assign CH3_RXDAPIRESETMASK_in[1] = (CH3_RXDAPIRESETMASK[1] === 1'bz) || CH3_RXDAPIRESETMASK[1]; // rv 1
  assign CH3_RXDAPIRESET_in = (CH3_RXDAPIRESET === 1'bz) || CH3_RXDAPIRESET; // rv 1
  assign CH3_RXLATCLK_in = (CH3_RXLATCLK === 1'bz) || CH3_RXLATCLK; // rv 1
  assign CH3_RXLPMEN_in = (CH3_RXLPMEN === 1'bz) || CH3_RXLPMEN; // rv 1
  assign CH3_RXMLFINEALIGNREQ_in = (CH3_RXMLFINEALIGNREQ === 1'bz) || CH3_RXMLFINEALIGNREQ; // rv 1
  assign CH3_RXOOBRESET_in = (CH3_RXOOBRESET === 1'bz) || CH3_RXOOBRESET; // rv 1
  assign CH3_RXPCSRESETMASK_in[0] = (CH3_RXPCSRESETMASK[0] === 1'bz) || CH3_RXPCSRESETMASK[0]; // rv 1
  assign CH3_RXPCSRESETMASK_in[1] = (CH3_RXPCSRESETMASK[1] === 1'bz) || CH3_RXPCSRESETMASK[1]; // rv 1
  assign CH3_RXPCSRESETMASK_in[2] = (CH3_RXPCSRESETMASK[2] === 1'bz) || CH3_RXPCSRESETMASK[2]; // rv 1
  assign CH3_RXPCSRESETMASK_in[3] = (CH3_RXPCSRESETMASK[3] === 1'bz) || CH3_RXPCSRESETMASK[3]; // rv 1
  assign CH3_RXPCSRESETMASK_in[4] = (CH3_RXPCSRESETMASK[4] === 1'bz) || CH3_RXPCSRESETMASK[4]; // rv 1
  assign CH3_RXPHALIGNRESETMASK_in[0] = (CH3_RXPHALIGNRESETMASK[0] === 1'bz) || CH3_RXPHALIGNRESETMASK[0]; // rv 1
  assign CH3_RXPHALIGNRESETMASK_in[1] = (CH3_RXPHALIGNRESETMASK[1] === 1'bz) || CH3_RXPHALIGNRESETMASK[1]; // rv 1
  assign CH3_RXPHDLYPD_in = (CH3_RXPHDLYPD === 1'bz) || CH3_RXPHDLYPD; // rv 1
  assign CH3_RXPHDLYRESET_in = (CH3_RXPHDLYRESET === 1'bz) || CH3_RXPHDLYRESET; // rv 1
  assign CH3_RXPMARESETMASK_in[0] = (CH3_RXPMARESETMASK[0] === 1'bz) || CH3_RXPMARESETMASK[0]; // rv 1
  assign CH3_RXPMARESETMASK_in[1] = (CH3_RXPMARESETMASK[1] === 1'bz) || CH3_RXPMARESETMASK[1]; // rv 1
  assign CH3_RXPMARESETMASK_in[2] = (CH3_RXPMARESETMASK[2] === 1'bz) || CH3_RXPMARESETMASK[2]; // rv 1
  assign CH3_RXPMARESETMASK_in[3] = (CH3_RXPMARESETMASK[3] === 1'bz) || CH3_RXPMARESETMASK[3]; // rv 1
  assign CH3_RXPMARESETMASK_in[4] = (CH3_RXPMARESETMASK[4] === 1'bz) || CH3_RXPMARESETMASK[4]; // rv 1
  assign CH3_RXPMARESETMASK_in[5] = (CH3_RXPMARESETMASK[5] === 1'bz) || CH3_RXPMARESETMASK[5]; // rv 1
  assign CH3_RXPMARESETMASK_in[6] = (CH3_RXPMARESETMASK[6] === 1'bz) || CH3_RXPMARESETMASK[6]; // rv 1
  assign CH3_RXPRBSCNTRESET_in = (CH3_RXPRBSCNTRESET === 1'bz) || CH3_RXPRBSCNTRESET; // rv 1
  assign CH3_RXPRBSSEL_in[0] = (CH3_RXPRBSSEL[0] === 1'bz) || CH3_RXPRBSSEL[0]; // rv 1
  assign CH3_RXPRBSSEL_in[1] = (CH3_RXPRBSSEL[1] === 1'bz) || CH3_RXPRBSSEL[1]; // rv 1
  assign CH3_RXPRBSSEL_in[2] = (CH3_RXPRBSSEL[2] === 1'bz) || CH3_RXPRBSSEL[2]; // rv 1
  assign CH3_RXPRBSSEL_in[3] = (CH3_RXPRBSSEL[3] === 1'bz) || CH3_RXPRBSSEL[3]; // rv 1
  assign CH3_RXPROGDIVRESET_in = (CH3_RXPROGDIVRESET === 1'bz) || CH3_RXPROGDIVRESET; // rv 1
  assign CH3_RXQPIEN_in = (CH3_RXQPIEN === 1'bz) || CH3_RXQPIEN; // rv 1
  assign CH3_RXRESETMODE_in[0] = (CH3_RXRESETMODE[0] === 1'bz) || CH3_RXRESETMODE[0]; // rv 1
  assign CH3_RXRESETMODE_in[1] = (CH3_RXRESETMODE[1] === 1'bz) || CH3_RXRESETMODE[1]; // rv 1
  assign CH3_RXSYNCALLIN_in = (CH3_RXSYNCALLIN === 1'bz) || CH3_RXSYNCALLIN; // rv 1
  assign CH3_RXTERMINATION_in = (CH3_RXTERMINATION === 1'bz) || CH3_RXTERMINATION; // rv 1
  assign CH3_RXUSERRDY_in = (CH3_RXUSERRDY === 1'bz) || CH3_RXUSERRDY; // rv 1
  assign CH3_TSTCLK0_in = CH3_TSTCLK0;
  assign CH3_TSTCLK1_in = CH3_TSTCLK1;
  assign CH3_TXDAPICODEOVRDEN_in = (CH3_TXDAPICODEOVRDEN === 1'bz) || CH3_TXDAPICODEOVRDEN; // rv 1
  assign CH3_TXDAPICODERESET_in = (CH3_TXDAPICODERESET === 1'bz) || CH3_TXDAPICODERESET; // rv 1
  assign CH3_TXDAPIRESETMASK_in[0] = (CH3_TXDAPIRESETMASK[0] === 1'bz) || CH3_TXDAPIRESETMASK[0]; // rv 1
  assign CH3_TXDAPIRESETMASK_in[1] = (CH3_TXDAPIRESETMASK[1] === 1'bz) || CH3_TXDAPIRESETMASK[1]; // rv 1
  assign CH3_TXDAPIRESET_in = (CH3_TXDAPIRESET === 1'bz) || CH3_TXDAPIRESET; // rv 1
  assign CH3_TXDEEMPH_in[0] = (CH3_TXDEEMPH[0] === 1'bz) || CH3_TXDEEMPH[0]; // rv 1
  assign CH3_TXDEEMPH_in[1] = (CH3_TXDEEMPH[1] === 1'bz) || CH3_TXDEEMPH[1]; // rv 1
  assign CH3_TXDIFFCTRL_in[0] = (CH3_TXDIFFCTRL[0] === 1'bz) || CH3_TXDIFFCTRL[0]; // rv 1
  assign CH3_TXDIFFCTRL_in[1] = (CH3_TXDIFFCTRL[1] === 1'bz) || CH3_TXDIFFCTRL[1]; // rv 1
  assign CH3_TXDIFFCTRL_in[2] = (CH3_TXDIFFCTRL[2] === 1'bz) || CH3_TXDIFFCTRL[2]; // rv 1
  assign CH3_TXDIFFCTRL_in[3] = (CH3_TXDIFFCTRL[3] === 1'bz) || CH3_TXDIFFCTRL[3]; // rv 1
  assign CH3_TXDIFFCTRL_in[4] = (CH3_TXDIFFCTRL[4] === 1'bz) || CH3_TXDIFFCTRL[4]; // rv 1
  assign CH3_TXDLYALIGNREQ_in = (CH3_TXDLYALIGNREQ === 1'bz) || CH3_TXDLYALIGNREQ; // rv 1
  assign CH3_TXLATCLK_in = (CH3_TXLATCLK === 1'bz) || CH3_TXLATCLK; // rv 1
  assign CH3_TXMAINCURSOR_in[0] = (CH3_TXMAINCURSOR[0] === 1'bz) || CH3_TXMAINCURSOR[0]; // rv 1
  assign CH3_TXMAINCURSOR_in[1] = (CH3_TXMAINCURSOR[1] === 1'bz) || CH3_TXMAINCURSOR[1]; // rv 1
  assign CH3_TXMAINCURSOR_in[2] = (CH3_TXMAINCURSOR[2] === 1'bz) || CH3_TXMAINCURSOR[2]; // rv 1
  assign CH3_TXMAINCURSOR_in[3] = (CH3_TXMAINCURSOR[3] === 1'bz) || CH3_TXMAINCURSOR[3]; // rv 1
  assign CH3_TXMAINCURSOR_in[4] = (CH3_TXMAINCURSOR[4] === 1'bz) || CH3_TXMAINCURSOR[4]; // rv 1
  assign CH3_TXMAINCURSOR_in[5] = (CH3_TXMAINCURSOR[5] === 1'bz) || CH3_TXMAINCURSOR[5]; // rv 1
  assign CH3_TXMAINCURSOR_in[6] = (CH3_TXMAINCURSOR[6] === 1'bz) || CH3_TXMAINCURSOR[6]; // rv 1
  assign CH3_TXMARGIN_in[0] = (CH3_TXMARGIN[0] === 1'bz) || CH3_TXMARGIN[0]; // rv 1
  assign CH3_TXMARGIN_in[1] = (CH3_TXMARGIN[1] === 1'bz) || CH3_TXMARGIN[1]; // rv 1
  assign CH3_TXMARGIN_in[2] = (CH3_TXMARGIN[2] === 1'bz) || CH3_TXMARGIN[2]; // rv 1
  assign CH3_TXMLDCHAINDONE_in = (CH3_TXMLDCHAINDONE === 1'bz) || CH3_TXMLDCHAINDONE; // rv 1
  assign CH3_TXMLDCHAINREQ_in = (CH3_TXMLDCHAINREQ === 1'bz) || CH3_TXMLDCHAINREQ; // rv 1
  assign CH3_TXONESZEROS_in = (CH3_TXONESZEROS === 1'bz) || CH3_TXONESZEROS; // rv 1
  assign CH3_TXPAUSEDELAYALIGN_in = (CH3_TXPAUSEDELAYALIGN === 1'bz) || CH3_TXPAUSEDELAYALIGN; // rv 1
  assign CH3_TXPCSRESETMASK_in = (CH3_TXPCSRESETMASK === 1'bz) || CH3_TXPCSRESETMASK; // rv 1
  assign CH3_TXPHALIGNREQ_in = (CH3_TXPHALIGNREQ === 1'bz) || CH3_TXPHALIGNREQ; // rv 1
  assign CH3_TXPHALIGNRESETMASK_in[0] = (CH3_TXPHALIGNRESETMASK[0] === 1'bz) || CH3_TXPHALIGNRESETMASK[0]; // rv 1
  assign CH3_TXPHALIGNRESETMASK_in[1] = (CH3_TXPHALIGNRESETMASK[1] === 1'bz) || CH3_TXPHALIGNRESETMASK[1]; // rv 1
  assign CH3_TXPHDLYPD_in = (CH3_TXPHDLYPD === 1'bz) || CH3_TXPHDLYPD; // rv 1
  assign CH3_TXPHDLYRESET_in = (CH3_TXPHDLYRESET === 1'bz) || CH3_TXPHDLYRESET; // rv 1
  assign CH3_TXPHDLYTSTCLK_in = (CH3_TXPHDLYTSTCLK === 1'bz) || CH3_TXPHDLYTSTCLK; // rv 1
  assign CH3_TXPHSETINITREQ_in = (CH3_TXPHSETINITREQ === 1'bz) || CH3_TXPHSETINITREQ; // rv 1
  assign CH3_TXPHSHIFT180_in = (CH3_TXPHSHIFT180 === 1'bz) || CH3_TXPHSHIFT180; // rv 1
  assign CH3_TXPICODEOVRDEN_in = (CH3_TXPICODEOVRDEN === 1'bz) || CH3_TXPICODEOVRDEN; // rv 1
  assign CH3_TXPICODERESET_in = (CH3_TXPICODERESET === 1'bz) || CH3_TXPICODERESET; // rv 1
  assign CH3_TXPISOPD_in = (CH3_TXPISOPD === 1'bz) || CH3_TXPISOPD; // rv 1
  assign CH3_TXPMARESETMASK_in[0] = (CH3_TXPMARESETMASK[0] === 1'bz) || CH3_TXPMARESETMASK[0]; // rv 1
  assign CH3_TXPMARESETMASK_in[1] = (CH3_TXPMARESETMASK[1] === 1'bz) || CH3_TXPMARESETMASK[1]; // rv 1
  assign CH3_TXPMARESETMASK_in[2] = (CH3_TXPMARESETMASK[2] === 1'bz) || CH3_TXPMARESETMASK[2]; // rv 1
  assign CH3_TXPOSTCURSOR_in[0] = (CH3_TXPOSTCURSOR[0] === 1'bz) || CH3_TXPOSTCURSOR[0]; // rv 1
  assign CH3_TXPOSTCURSOR_in[1] = (CH3_TXPOSTCURSOR[1] === 1'bz) || CH3_TXPOSTCURSOR[1]; // rv 1
  assign CH3_TXPOSTCURSOR_in[2] = (CH3_TXPOSTCURSOR[2] === 1'bz) || CH3_TXPOSTCURSOR[2]; // rv 1
  assign CH3_TXPOSTCURSOR_in[3] = (CH3_TXPOSTCURSOR[3] === 1'bz) || CH3_TXPOSTCURSOR[3]; // rv 1
  assign CH3_TXPOSTCURSOR_in[4] = (CH3_TXPOSTCURSOR[4] === 1'bz) || CH3_TXPOSTCURSOR[4]; // rv 1
  assign CH3_TXPRBSFORCEERR_in = (CH3_TXPRBSFORCEERR === 1'bz) || CH3_TXPRBSFORCEERR; // rv 1
  assign CH3_TXPRBSSEL_in[0] = (CH3_TXPRBSSEL[0] === 1'bz) || CH3_TXPRBSSEL[0]; // rv 1
  assign CH3_TXPRBSSEL_in[1] = (CH3_TXPRBSSEL[1] === 1'bz) || CH3_TXPRBSSEL[1]; // rv 1
  assign CH3_TXPRBSSEL_in[2] = (CH3_TXPRBSSEL[2] === 1'bz) || CH3_TXPRBSSEL[2]; // rv 1
  assign CH3_TXPRBSSEL_in[3] = (CH3_TXPRBSSEL[3] === 1'bz) || CH3_TXPRBSSEL[3]; // rv 1
  assign CH3_TXPRECURSOR_in[0] = (CH3_TXPRECURSOR[0] === 1'bz) || CH3_TXPRECURSOR[0]; // rv 1
  assign CH3_TXPRECURSOR_in[1] = (CH3_TXPRECURSOR[1] === 1'bz) || CH3_TXPRECURSOR[1]; // rv 1
  assign CH3_TXPRECURSOR_in[2] = (CH3_TXPRECURSOR[2] === 1'bz) || CH3_TXPRECURSOR[2]; // rv 1
  assign CH3_TXPRECURSOR_in[3] = (CH3_TXPRECURSOR[3] === 1'bz) || CH3_TXPRECURSOR[3]; // rv 1
  assign CH3_TXPRECURSOR_in[4] = (CH3_TXPRECURSOR[4] === 1'bz) || CH3_TXPRECURSOR[4]; // rv 1
  assign CH3_TXPROGDIVRESET_in = (CH3_TXPROGDIVRESET === 1'bz) || CH3_TXPROGDIVRESET; // rv 1
  assign CH3_TXQPIBIASEN_in = (CH3_TXQPIBIASEN === 1'bz) || CH3_TXQPIBIASEN; // rv 1
  assign CH3_TXQPIWEAKPU_in = (CH3_TXQPIWEAKPU === 1'bz) || CH3_TXQPIWEAKPU; // rv 1
  assign CH3_TXRESETMODE_in[0] = (CH3_TXRESETMODE[0] === 1'bz) || CH3_TXRESETMODE[0]; // rv 1
  assign CH3_TXRESETMODE_in[1] = (CH3_TXRESETMODE[1] === 1'bz) || CH3_TXRESETMODE[1]; // rv 1
  assign CH3_TXSWING_in = (CH3_TXSWING === 1'bz) || CH3_TXSWING; // rv 1
  assign CH3_TXSYNCALLIN_in = (CH3_TXSYNCALLIN === 1'bz) || CH3_TXSYNCALLIN; // rv 1
  assign CH3_TXUSERRDY_in = (CH3_TXUSERRDY === 1'bz) || CH3_TXUSERRDY; // rv 1
  assign COESTATUSDEBUG_in = (COESTATUSDEBUG === 1'bz) || COESTATUSDEBUG; // rv 1
  assign CTRLRSVDIN_in[0] = (CTRLRSVDIN[0] === 1'bz) || CTRLRSVDIN[0]; // rv 1
  assign CTRLRSVDIN_in[1] = (CTRLRSVDIN[1] === 1'bz) || CTRLRSVDIN[1]; // rv 1
  assign CTRLRSVDIN_in[2] = (CTRLRSVDIN[2] === 1'bz) || CTRLRSVDIN[2]; // rv 1
  assign CTRLRSVDIN_in[3] = (CTRLRSVDIN[3] === 1'bz) || CTRLRSVDIN[3]; // rv 1
  assign CTRLRSVDIN_in[4] = (CTRLRSVDIN[4] === 1'bz) || CTRLRSVDIN[4]; // rv 1
  assign CTRLRSVDIN_in[5] = (CTRLRSVDIN[5] === 1'bz) || CTRLRSVDIN[5]; // rv 1
  assign CTRLRSVDIN_in[6] = (CTRLRSVDIN[6] === 1'bz) || CTRLRSVDIN[6]; // rv 1
  assign CTRLRSVDIN_in[7] = (CTRLRSVDIN[7] === 1'bz) || CTRLRSVDIN[7]; // rv 1
  assign GPI_in[0] = (GPI[0] === 1'bz) || GPI[0]; // rv 1
  assign GPI_in[10] = (GPI[10] === 1'bz) || GPI[10]; // rv 1
  assign GPI_in[11] = (GPI[11] === 1'bz) || GPI[11]; // rv 1
  assign GPI_in[12] = (GPI[12] === 1'bz) || GPI[12]; // rv 1
  assign GPI_in[13] = (GPI[13] === 1'bz) || GPI[13]; // rv 1
  assign GPI_in[14] = (GPI[14] === 1'bz) || GPI[14]; // rv 1
  assign GPI_in[15] = (GPI[15] === 1'bz) || GPI[15]; // rv 1
  assign GPI_in[16] = (GPI[16] === 1'bz) || GPI[16]; // rv 1
  assign GPI_in[17] = (GPI[17] === 1'bz) || GPI[17]; // rv 1
  assign GPI_in[18] = (GPI[18] === 1'bz) || GPI[18]; // rv 1
  assign GPI_in[19] = (GPI[19] === 1'bz) || GPI[19]; // rv 1
  assign GPI_in[1] = (GPI[1] === 1'bz) || GPI[1]; // rv 1
  assign GPI_in[20] = (GPI[20] === 1'bz) || GPI[20]; // rv 1
  assign GPI_in[21] = (GPI[21] === 1'bz) || GPI[21]; // rv 1
  assign GPI_in[22] = (GPI[22] === 1'bz) || GPI[22]; // rv 1
  assign GPI_in[23] = (GPI[23] === 1'bz) || GPI[23]; // rv 1
  assign GPI_in[24] = (GPI[24] === 1'bz) || GPI[24]; // rv 1
  assign GPI_in[25] = (GPI[25] === 1'bz) || GPI[25]; // rv 1
  assign GPI_in[26] = (GPI[26] === 1'bz) || GPI[26]; // rv 1
  assign GPI_in[27] = (GPI[27] === 1'bz) || GPI[27]; // rv 1
  assign GPI_in[28] = (GPI[28] === 1'bz) || GPI[28]; // rv 1
  assign GPI_in[29] = (GPI[29] === 1'bz) || GPI[29]; // rv 1
  assign GPI_in[2] = (GPI[2] === 1'bz) || GPI[2]; // rv 1
  assign GPI_in[30] = (GPI[30] === 1'bz) || GPI[30]; // rv 1
  assign GPI_in[31] = (GPI[31] === 1'bz) || GPI[31]; // rv 1
  assign GPI_in[3] = (GPI[3] === 1'bz) || GPI[3]; // rv 1
  assign GPI_in[4] = (GPI[4] === 1'bz) || GPI[4]; // rv 1
  assign GPI_in[5] = (GPI[5] === 1'bz) || GPI[5]; // rv 1
  assign GPI_in[6] = (GPI[6] === 1'bz) || GPI[6]; // rv 1
  assign GPI_in[7] = (GPI[7] === 1'bz) || GPI[7]; // rv 1
  assign GPI_in[8] = (GPI[8] === 1'bz) || GPI[8]; // rv 1
  assign GPI_in[9] = (GPI[9] === 1'bz) || GPI[9]; // rv 1
  assign HSCLK0_LCPLLFBDIV_in[0] = (HSCLK0_LCPLLFBDIV[0] === 1'bz) || HSCLK0_LCPLLFBDIV[0]; // rv 1
  assign HSCLK0_LCPLLFBDIV_in[1] = (HSCLK0_LCPLLFBDIV[1] === 1'bz) || HSCLK0_LCPLLFBDIV[1]; // rv 1
  assign HSCLK0_LCPLLFBDIV_in[2] = (HSCLK0_LCPLLFBDIV[2] === 1'bz) || HSCLK0_LCPLLFBDIV[2]; // rv 1
  assign HSCLK0_LCPLLFBDIV_in[3] = (HSCLK0_LCPLLFBDIV[3] === 1'bz) || HSCLK0_LCPLLFBDIV[3]; // rv 1
  assign HSCLK0_LCPLLFBDIV_in[4] = (HSCLK0_LCPLLFBDIV[4] === 1'bz) || HSCLK0_LCPLLFBDIV[4]; // rv 1
  assign HSCLK0_LCPLLFBDIV_in[5] = (HSCLK0_LCPLLFBDIV[5] === 1'bz) || HSCLK0_LCPLLFBDIV[5]; // rv 1
  assign HSCLK0_LCPLLFBDIV_in[6] = (HSCLK0_LCPLLFBDIV[6] === 1'bz) || HSCLK0_LCPLLFBDIV[6]; // rv 1
  assign HSCLK0_LCPLLFBDIV_in[7] = (HSCLK0_LCPLLFBDIV[7] === 1'bz) || HSCLK0_LCPLLFBDIV[7]; // rv 1
  assign HSCLK0_LCPLLGTGREFCLK_in = HSCLK0_LCPLLGTGREFCLK;
  assign HSCLK0_LCPLLGTREFCLK0_in = HSCLK0_LCPLLGTREFCLK0;
  assign HSCLK0_LCPLLGTREFCLK1_in = HSCLK0_LCPLLGTREFCLK1;
  assign HSCLK0_LCPLLNORTHREFCLK0_in = HSCLK0_LCPLLNORTHREFCLK0;
  assign HSCLK0_LCPLLNORTHREFCLK1_in = HSCLK0_LCPLLNORTHREFCLK1;
  assign HSCLK0_LCPLLPD_in = (HSCLK0_LCPLLPD === 1'bz) || HSCLK0_LCPLLPD; // rv 1
  assign HSCLK0_LCPLLREFCLKSEL_in[0] = (HSCLK0_LCPLLREFCLKSEL[0] === 1'bz) || HSCLK0_LCPLLREFCLKSEL[0]; // rv 1
  assign HSCLK0_LCPLLREFCLKSEL_in[1] = (HSCLK0_LCPLLREFCLKSEL[1] === 1'bz) || HSCLK0_LCPLLREFCLKSEL[1]; // rv 1
  assign HSCLK0_LCPLLREFCLKSEL_in[2] = (HSCLK0_LCPLLREFCLKSEL[2] === 1'bz) || HSCLK0_LCPLLREFCLKSEL[2]; // rv 1
  assign HSCLK0_LCPLLRESETBYPASSMODE_in = (HSCLK0_LCPLLRESETBYPASSMODE === 1'bz) || HSCLK0_LCPLLRESETBYPASSMODE; // rv 1
  assign HSCLK0_LCPLLRESETMASK_in[0] = (HSCLK0_LCPLLRESETMASK[0] === 1'bz) || HSCLK0_LCPLLRESETMASK[0]; // rv 1
  assign HSCLK0_LCPLLRESETMASK_in[1] = (HSCLK0_LCPLLRESETMASK[1] === 1'bz) || HSCLK0_LCPLLRESETMASK[1]; // rv 1
  assign HSCLK0_LCPLLRESET_in = (HSCLK0_LCPLLRESET === 1'bz) || HSCLK0_LCPLLRESET; // rv 1
  assign HSCLK0_LCPLLSDMDATA_in[0] = (HSCLK0_LCPLLSDMDATA[0] === 1'bz) || HSCLK0_LCPLLSDMDATA[0]; // rv 1
  assign HSCLK0_LCPLLSDMDATA_in[10] = (HSCLK0_LCPLLSDMDATA[10] === 1'bz) || HSCLK0_LCPLLSDMDATA[10]; // rv 1
  assign HSCLK0_LCPLLSDMDATA_in[11] = (HSCLK0_LCPLLSDMDATA[11] === 1'bz) || HSCLK0_LCPLLSDMDATA[11]; // rv 1
  assign HSCLK0_LCPLLSDMDATA_in[12] = (HSCLK0_LCPLLSDMDATA[12] === 1'bz) || HSCLK0_LCPLLSDMDATA[12]; // rv 1
  assign HSCLK0_LCPLLSDMDATA_in[13] = (HSCLK0_LCPLLSDMDATA[13] === 1'bz) || HSCLK0_LCPLLSDMDATA[13]; // rv 1
  assign HSCLK0_LCPLLSDMDATA_in[14] = (HSCLK0_LCPLLSDMDATA[14] === 1'bz) || HSCLK0_LCPLLSDMDATA[14]; // rv 1
  assign HSCLK0_LCPLLSDMDATA_in[15] = (HSCLK0_LCPLLSDMDATA[15] === 1'bz) || HSCLK0_LCPLLSDMDATA[15]; // rv 1
  assign HSCLK0_LCPLLSDMDATA_in[16] = (HSCLK0_LCPLLSDMDATA[16] === 1'bz) || HSCLK0_LCPLLSDMDATA[16]; // rv 1
  assign HSCLK0_LCPLLSDMDATA_in[17] = (HSCLK0_LCPLLSDMDATA[17] === 1'bz) || HSCLK0_LCPLLSDMDATA[17]; // rv 1
  assign HSCLK0_LCPLLSDMDATA_in[18] = (HSCLK0_LCPLLSDMDATA[18] === 1'bz) || HSCLK0_LCPLLSDMDATA[18]; // rv 1
  assign HSCLK0_LCPLLSDMDATA_in[19] = (HSCLK0_LCPLLSDMDATA[19] === 1'bz) || HSCLK0_LCPLLSDMDATA[19]; // rv 1
  assign HSCLK0_LCPLLSDMDATA_in[1] = (HSCLK0_LCPLLSDMDATA[1] === 1'bz) || HSCLK0_LCPLLSDMDATA[1]; // rv 1
  assign HSCLK0_LCPLLSDMDATA_in[20] = (HSCLK0_LCPLLSDMDATA[20] === 1'bz) || HSCLK0_LCPLLSDMDATA[20]; // rv 1
  assign HSCLK0_LCPLLSDMDATA_in[21] = (HSCLK0_LCPLLSDMDATA[21] === 1'bz) || HSCLK0_LCPLLSDMDATA[21]; // rv 1
  assign HSCLK0_LCPLLSDMDATA_in[22] = (HSCLK0_LCPLLSDMDATA[22] === 1'bz) || HSCLK0_LCPLLSDMDATA[22]; // rv 1
  assign HSCLK0_LCPLLSDMDATA_in[23] = (HSCLK0_LCPLLSDMDATA[23] === 1'bz) || HSCLK0_LCPLLSDMDATA[23]; // rv 1
  assign HSCLK0_LCPLLSDMDATA_in[24] = (HSCLK0_LCPLLSDMDATA[24] === 1'bz) || HSCLK0_LCPLLSDMDATA[24]; // rv 1
  assign HSCLK0_LCPLLSDMDATA_in[25] = (HSCLK0_LCPLLSDMDATA[25] === 1'bz) || HSCLK0_LCPLLSDMDATA[25]; // rv 1
  assign HSCLK0_LCPLLSDMDATA_in[2] = (HSCLK0_LCPLLSDMDATA[2] === 1'bz) || HSCLK0_LCPLLSDMDATA[2]; // rv 1
  assign HSCLK0_LCPLLSDMDATA_in[3] = (HSCLK0_LCPLLSDMDATA[3] === 1'bz) || HSCLK0_LCPLLSDMDATA[3]; // rv 1
  assign HSCLK0_LCPLLSDMDATA_in[4] = (HSCLK0_LCPLLSDMDATA[4] === 1'bz) || HSCLK0_LCPLLSDMDATA[4]; // rv 1
  assign HSCLK0_LCPLLSDMDATA_in[5] = (HSCLK0_LCPLLSDMDATA[5] === 1'bz) || HSCLK0_LCPLLSDMDATA[5]; // rv 1
  assign HSCLK0_LCPLLSDMDATA_in[6] = (HSCLK0_LCPLLSDMDATA[6] === 1'bz) || HSCLK0_LCPLLSDMDATA[6]; // rv 1
  assign HSCLK0_LCPLLSDMDATA_in[7] = (HSCLK0_LCPLLSDMDATA[7] === 1'bz) || HSCLK0_LCPLLSDMDATA[7]; // rv 1
  assign HSCLK0_LCPLLSDMDATA_in[8] = (HSCLK0_LCPLLSDMDATA[8] === 1'bz) || HSCLK0_LCPLLSDMDATA[8]; // rv 1
  assign HSCLK0_LCPLLSDMDATA_in[9] = (HSCLK0_LCPLLSDMDATA[9] === 1'bz) || HSCLK0_LCPLLSDMDATA[9]; // rv 1
  assign HSCLK0_LCPLLSDMTOGGLE_in = (HSCLK0_LCPLLSDMTOGGLE === 1'bz) || HSCLK0_LCPLLSDMTOGGLE; // rv 1
  assign HSCLK0_LCPLLSOUTHREFCLK0_in = HSCLK0_LCPLLSOUTHREFCLK0;
  assign HSCLK0_LCPLLSOUTHREFCLK1_in = HSCLK0_LCPLLSOUTHREFCLK1;
  assign HSCLK0_RPLLFBDIV_in[0] = (HSCLK0_RPLLFBDIV[0] === 1'bz) || HSCLK0_RPLLFBDIV[0]; // rv 1
  assign HSCLK0_RPLLFBDIV_in[1] = (HSCLK0_RPLLFBDIV[1] === 1'bz) || HSCLK0_RPLLFBDIV[1]; // rv 1
  assign HSCLK0_RPLLFBDIV_in[2] = (HSCLK0_RPLLFBDIV[2] === 1'bz) || HSCLK0_RPLLFBDIV[2]; // rv 1
  assign HSCLK0_RPLLFBDIV_in[3] = (HSCLK0_RPLLFBDIV[3] === 1'bz) || HSCLK0_RPLLFBDIV[3]; // rv 1
  assign HSCLK0_RPLLFBDIV_in[4] = (HSCLK0_RPLLFBDIV[4] === 1'bz) || HSCLK0_RPLLFBDIV[4]; // rv 1
  assign HSCLK0_RPLLFBDIV_in[5] = (HSCLK0_RPLLFBDIV[5] === 1'bz) || HSCLK0_RPLLFBDIV[5]; // rv 1
  assign HSCLK0_RPLLFBDIV_in[6] = (HSCLK0_RPLLFBDIV[6] === 1'bz) || HSCLK0_RPLLFBDIV[6]; // rv 1
  assign HSCLK0_RPLLFBDIV_in[7] = (HSCLK0_RPLLFBDIV[7] === 1'bz) || HSCLK0_RPLLFBDIV[7]; // rv 1
  assign HSCLK0_RPLLGTGREFCLK_in = HSCLK0_RPLLGTGREFCLK;
  assign HSCLK0_RPLLGTREFCLK0_in = HSCLK0_RPLLGTREFCLK0;
  assign HSCLK0_RPLLGTREFCLK1_in = HSCLK0_RPLLGTREFCLK1;
  assign HSCLK0_RPLLNORTHREFCLK0_in = HSCLK0_RPLLNORTHREFCLK0;
  assign HSCLK0_RPLLNORTHREFCLK1_in = HSCLK0_RPLLNORTHREFCLK1;
  assign HSCLK0_RPLLPD_in = (HSCLK0_RPLLPD === 1'bz) || HSCLK0_RPLLPD; // rv 1
  assign HSCLK0_RPLLREFCLKSEL_in[0] = (HSCLK0_RPLLREFCLKSEL[0] === 1'bz) || HSCLK0_RPLLREFCLKSEL[0]; // rv 1
  assign HSCLK0_RPLLREFCLKSEL_in[1] = (HSCLK0_RPLLREFCLKSEL[1] === 1'bz) || HSCLK0_RPLLREFCLKSEL[1]; // rv 1
  assign HSCLK0_RPLLREFCLKSEL_in[2] = (HSCLK0_RPLLREFCLKSEL[2] === 1'bz) || HSCLK0_RPLLREFCLKSEL[2]; // rv 1
  assign HSCLK0_RPLLRESETBYPASSMODE_in = (HSCLK0_RPLLRESETBYPASSMODE === 1'bz) || HSCLK0_RPLLRESETBYPASSMODE; // rv 1
  assign HSCLK0_RPLLRESETMASK_in[0] = (HSCLK0_RPLLRESETMASK[0] === 1'bz) || HSCLK0_RPLLRESETMASK[0]; // rv 1
  assign HSCLK0_RPLLRESETMASK_in[1] = (HSCLK0_RPLLRESETMASK[1] === 1'bz) || HSCLK0_RPLLRESETMASK[1]; // rv 1
  assign HSCLK0_RPLLRESET_in = (HSCLK0_RPLLRESET === 1'bz) || HSCLK0_RPLLRESET; // rv 1
  assign HSCLK0_RPLLSDMDATA_in[0] = (HSCLK0_RPLLSDMDATA[0] === 1'bz) || HSCLK0_RPLLSDMDATA[0]; // rv 1
  assign HSCLK0_RPLLSDMDATA_in[10] = (HSCLK0_RPLLSDMDATA[10] === 1'bz) || HSCLK0_RPLLSDMDATA[10]; // rv 1
  assign HSCLK0_RPLLSDMDATA_in[11] = (HSCLK0_RPLLSDMDATA[11] === 1'bz) || HSCLK0_RPLLSDMDATA[11]; // rv 1
  assign HSCLK0_RPLLSDMDATA_in[12] = (HSCLK0_RPLLSDMDATA[12] === 1'bz) || HSCLK0_RPLLSDMDATA[12]; // rv 1
  assign HSCLK0_RPLLSDMDATA_in[13] = (HSCLK0_RPLLSDMDATA[13] === 1'bz) || HSCLK0_RPLLSDMDATA[13]; // rv 1
  assign HSCLK0_RPLLSDMDATA_in[14] = (HSCLK0_RPLLSDMDATA[14] === 1'bz) || HSCLK0_RPLLSDMDATA[14]; // rv 1
  assign HSCLK0_RPLLSDMDATA_in[15] = (HSCLK0_RPLLSDMDATA[15] === 1'bz) || HSCLK0_RPLLSDMDATA[15]; // rv 1
  assign HSCLK0_RPLLSDMDATA_in[16] = (HSCLK0_RPLLSDMDATA[16] === 1'bz) || HSCLK0_RPLLSDMDATA[16]; // rv 1
  assign HSCLK0_RPLLSDMDATA_in[17] = (HSCLK0_RPLLSDMDATA[17] === 1'bz) || HSCLK0_RPLLSDMDATA[17]; // rv 1
  assign HSCLK0_RPLLSDMDATA_in[18] = (HSCLK0_RPLLSDMDATA[18] === 1'bz) || HSCLK0_RPLLSDMDATA[18]; // rv 1
  assign HSCLK0_RPLLSDMDATA_in[19] = (HSCLK0_RPLLSDMDATA[19] === 1'bz) || HSCLK0_RPLLSDMDATA[19]; // rv 1
  assign HSCLK0_RPLLSDMDATA_in[1] = (HSCLK0_RPLLSDMDATA[1] === 1'bz) || HSCLK0_RPLLSDMDATA[1]; // rv 1
  assign HSCLK0_RPLLSDMDATA_in[20] = (HSCLK0_RPLLSDMDATA[20] === 1'bz) || HSCLK0_RPLLSDMDATA[20]; // rv 1
  assign HSCLK0_RPLLSDMDATA_in[21] = (HSCLK0_RPLLSDMDATA[21] === 1'bz) || HSCLK0_RPLLSDMDATA[21]; // rv 1
  assign HSCLK0_RPLLSDMDATA_in[22] = (HSCLK0_RPLLSDMDATA[22] === 1'bz) || HSCLK0_RPLLSDMDATA[22]; // rv 1
  assign HSCLK0_RPLLSDMDATA_in[23] = (HSCLK0_RPLLSDMDATA[23] === 1'bz) || HSCLK0_RPLLSDMDATA[23]; // rv 1
  assign HSCLK0_RPLLSDMDATA_in[24] = (HSCLK0_RPLLSDMDATA[24] === 1'bz) || HSCLK0_RPLLSDMDATA[24]; // rv 1
  assign HSCLK0_RPLLSDMDATA_in[25] = (HSCLK0_RPLLSDMDATA[25] === 1'bz) || HSCLK0_RPLLSDMDATA[25]; // rv 1
  assign HSCLK0_RPLLSDMDATA_in[2] = (HSCLK0_RPLLSDMDATA[2] === 1'bz) || HSCLK0_RPLLSDMDATA[2]; // rv 1
  assign HSCLK0_RPLLSDMDATA_in[3] = (HSCLK0_RPLLSDMDATA[3] === 1'bz) || HSCLK0_RPLLSDMDATA[3]; // rv 1
  assign HSCLK0_RPLLSDMDATA_in[4] = (HSCLK0_RPLLSDMDATA[4] === 1'bz) || HSCLK0_RPLLSDMDATA[4]; // rv 1
  assign HSCLK0_RPLLSDMDATA_in[5] = (HSCLK0_RPLLSDMDATA[5] === 1'bz) || HSCLK0_RPLLSDMDATA[5]; // rv 1
  assign HSCLK0_RPLLSDMDATA_in[6] = (HSCLK0_RPLLSDMDATA[6] === 1'bz) || HSCLK0_RPLLSDMDATA[6]; // rv 1
  assign HSCLK0_RPLLSDMDATA_in[7] = (HSCLK0_RPLLSDMDATA[7] === 1'bz) || HSCLK0_RPLLSDMDATA[7]; // rv 1
  assign HSCLK0_RPLLSDMDATA_in[8] = (HSCLK0_RPLLSDMDATA[8] === 1'bz) || HSCLK0_RPLLSDMDATA[8]; // rv 1
  assign HSCLK0_RPLLSDMDATA_in[9] = (HSCLK0_RPLLSDMDATA[9] === 1'bz) || HSCLK0_RPLLSDMDATA[9]; // rv 1
  assign HSCLK0_RPLLSDMTOGGLE_in = (HSCLK0_RPLLSDMTOGGLE === 1'bz) || HSCLK0_RPLLSDMTOGGLE; // rv 1
  assign HSCLK0_RPLLSOUTHREFCLK0_in = HSCLK0_RPLLSOUTHREFCLK0;
  assign HSCLK0_RPLLSOUTHREFCLK1_in = HSCLK0_RPLLSOUTHREFCLK1;
  assign HSCLK1_LCPLLFBDIV_in[0] = (HSCLK1_LCPLLFBDIV[0] === 1'bz) || HSCLK1_LCPLLFBDIV[0]; // rv 1
  assign HSCLK1_LCPLLFBDIV_in[1] = (HSCLK1_LCPLLFBDIV[1] === 1'bz) || HSCLK1_LCPLLFBDIV[1]; // rv 1
  assign HSCLK1_LCPLLFBDIV_in[2] = (HSCLK1_LCPLLFBDIV[2] === 1'bz) || HSCLK1_LCPLLFBDIV[2]; // rv 1
  assign HSCLK1_LCPLLFBDIV_in[3] = (HSCLK1_LCPLLFBDIV[3] === 1'bz) || HSCLK1_LCPLLFBDIV[3]; // rv 1
  assign HSCLK1_LCPLLFBDIV_in[4] = (HSCLK1_LCPLLFBDIV[4] === 1'bz) || HSCLK1_LCPLLFBDIV[4]; // rv 1
  assign HSCLK1_LCPLLFBDIV_in[5] = (HSCLK1_LCPLLFBDIV[5] === 1'bz) || HSCLK1_LCPLLFBDIV[5]; // rv 1
  assign HSCLK1_LCPLLFBDIV_in[6] = (HSCLK1_LCPLLFBDIV[6] === 1'bz) || HSCLK1_LCPLLFBDIV[6]; // rv 1
  assign HSCLK1_LCPLLFBDIV_in[7] = (HSCLK1_LCPLLFBDIV[7] === 1'bz) || HSCLK1_LCPLLFBDIV[7]; // rv 1
  assign HSCLK1_LCPLLGTGREFCLK_in = HSCLK1_LCPLLGTGREFCLK;
  assign HSCLK1_LCPLLGTREFCLK0_in = HSCLK1_LCPLLGTREFCLK0;
  assign HSCLK1_LCPLLGTREFCLK1_in = HSCLK1_LCPLLGTREFCLK1;
  assign HSCLK1_LCPLLNORTHREFCLK0_in = HSCLK1_LCPLLNORTHREFCLK0;
  assign HSCLK1_LCPLLNORTHREFCLK1_in = HSCLK1_LCPLLNORTHREFCLK1;
  assign HSCLK1_LCPLLPD_in = (HSCLK1_LCPLLPD === 1'bz) || HSCLK1_LCPLLPD; // rv 1
  assign HSCLK1_LCPLLREFCLKSEL_in[0] = (HSCLK1_LCPLLREFCLKSEL[0] === 1'bz) || HSCLK1_LCPLLREFCLKSEL[0]; // rv 1
  assign HSCLK1_LCPLLREFCLKSEL_in[1] = (HSCLK1_LCPLLREFCLKSEL[1] === 1'bz) || HSCLK1_LCPLLREFCLKSEL[1]; // rv 1
  assign HSCLK1_LCPLLREFCLKSEL_in[2] = (HSCLK1_LCPLLREFCLKSEL[2] === 1'bz) || HSCLK1_LCPLLREFCLKSEL[2]; // rv 1
  assign HSCLK1_LCPLLRESETBYPASSMODE_in = (HSCLK1_LCPLLRESETBYPASSMODE === 1'bz) || HSCLK1_LCPLLRESETBYPASSMODE; // rv 1
  assign HSCLK1_LCPLLRESETMASK_in[0] = (HSCLK1_LCPLLRESETMASK[0] === 1'bz) || HSCLK1_LCPLLRESETMASK[0]; // rv 1
  assign HSCLK1_LCPLLRESETMASK_in[1] = (HSCLK1_LCPLLRESETMASK[1] === 1'bz) || HSCLK1_LCPLLRESETMASK[1]; // rv 1
  assign HSCLK1_LCPLLRESET_in = (HSCLK1_LCPLLRESET === 1'bz) || HSCLK1_LCPLLRESET; // rv 1
  assign HSCLK1_LCPLLSDMDATA_in[0] = (HSCLK1_LCPLLSDMDATA[0] === 1'bz) || HSCLK1_LCPLLSDMDATA[0]; // rv 1
  assign HSCLK1_LCPLLSDMDATA_in[10] = (HSCLK1_LCPLLSDMDATA[10] === 1'bz) || HSCLK1_LCPLLSDMDATA[10]; // rv 1
  assign HSCLK1_LCPLLSDMDATA_in[11] = (HSCLK1_LCPLLSDMDATA[11] === 1'bz) || HSCLK1_LCPLLSDMDATA[11]; // rv 1
  assign HSCLK1_LCPLLSDMDATA_in[12] = (HSCLK1_LCPLLSDMDATA[12] === 1'bz) || HSCLK1_LCPLLSDMDATA[12]; // rv 1
  assign HSCLK1_LCPLLSDMDATA_in[13] = (HSCLK1_LCPLLSDMDATA[13] === 1'bz) || HSCLK1_LCPLLSDMDATA[13]; // rv 1
  assign HSCLK1_LCPLLSDMDATA_in[14] = (HSCLK1_LCPLLSDMDATA[14] === 1'bz) || HSCLK1_LCPLLSDMDATA[14]; // rv 1
  assign HSCLK1_LCPLLSDMDATA_in[15] = (HSCLK1_LCPLLSDMDATA[15] === 1'bz) || HSCLK1_LCPLLSDMDATA[15]; // rv 1
  assign HSCLK1_LCPLLSDMDATA_in[16] = (HSCLK1_LCPLLSDMDATA[16] === 1'bz) || HSCLK1_LCPLLSDMDATA[16]; // rv 1
  assign HSCLK1_LCPLLSDMDATA_in[17] = (HSCLK1_LCPLLSDMDATA[17] === 1'bz) || HSCLK1_LCPLLSDMDATA[17]; // rv 1
  assign HSCLK1_LCPLLSDMDATA_in[18] = (HSCLK1_LCPLLSDMDATA[18] === 1'bz) || HSCLK1_LCPLLSDMDATA[18]; // rv 1
  assign HSCLK1_LCPLLSDMDATA_in[19] = (HSCLK1_LCPLLSDMDATA[19] === 1'bz) || HSCLK1_LCPLLSDMDATA[19]; // rv 1
  assign HSCLK1_LCPLLSDMDATA_in[1] = (HSCLK1_LCPLLSDMDATA[1] === 1'bz) || HSCLK1_LCPLLSDMDATA[1]; // rv 1
  assign HSCLK1_LCPLLSDMDATA_in[20] = (HSCLK1_LCPLLSDMDATA[20] === 1'bz) || HSCLK1_LCPLLSDMDATA[20]; // rv 1
  assign HSCLK1_LCPLLSDMDATA_in[21] = (HSCLK1_LCPLLSDMDATA[21] === 1'bz) || HSCLK1_LCPLLSDMDATA[21]; // rv 1
  assign HSCLK1_LCPLLSDMDATA_in[22] = (HSCLK1_LCPLLSDMDATA[22] === 1'bz) || HSCLK1_LCPLLSDMDATA[22]; // rv 1
  assign HSCLK1_LCPLLSDMDATA_in[23] = (HSCLK1_LCPLLSDMDATA[23] === 1'bz) || HSCLK1_LCPLLSDMDATA[23]; // rv 1
  assign HSCLK1_LCPLLSDMDATA_in[24] = (HSCLK1_LCPLLSDMDATA[24] === 1'bz) || HSCLK1_LCPLLSDMDATA[24]; // rv 1
  assign HSCLK1_LCPLLSDMDATA_in[25] = (HSCLK1_LCPLLSDMDATA[25] === 1'bz) || HSCLK1_LCPLLSDMDATA[25]; // rv 1
  assign HSCLK1_LCPLLSDMDATA_in[2] = (HSCLK1_LCPLLSDMDATA[2] === 1'bz) || HSCLK1_LCPLLSDMDATA[2]; // rv 1
  assign HSCLK1_LCPLLSDMDATA_in[3] = (HSCLK1_LCPLLSDMDATA[3] === 1'bz) || HSCLK1_LCPLLSDMDATA[3]; // rv 1
  assign HSCLK1_LCPLLSDMDATA_in[4] = (HSCLK1_LCPLLSDMDATA[4] === 1'bz) || HSCLK1_LCPLLSDMDATA[4]; // rv 1
  assign HSCLK1_LCPLLSDMDATA_in[5] = (HSCLK1_LCPLLSDMDATA[5] === 1'bz) || HSCLK1_LCPLLSDMDATA[5]; // rv 1
  assign HSCLK1_LCPLLSDMDATA_in[6] = (HSCLK1_LCPLLSDMDATA[6] === 1'bz) || HSCLK1_LCPLLSDMDATA[6]; // rv 1
  assign HSCLK1_LCPLLSDMDATA_in[7] = (HSCLK1_LCPLLSDMDATA[7] === 1'bz) || HSCLK1_LCPLLSDMDATA[7]; // rv 1
  assign HSCLK1_LCPLLSDMDATA_in[8] = (HSCLK1_LCPLLSDMDATA[8] === 1'bz) || HSCLK1_LCPLLSDMDATA[8]; // rv 1
  assign HSCLK1_LCPLLSDMDATA_in[9] = (HSCLK1_LCPLLSDMDATA[9] === 1'bz) || HSCLK1_LCPLLSDMDATA[9]; // rv 1
  assign HSCLK1_LCPLLSDMTOGGLE_in = (HSCLK1_LCPLLSDMTOGGLE === 1'bz) || HSCLK1_LCPLLSDMTOGGLE; // rv 1
  assign HSCLK1_LCPLLSOUTHREFCLK0_in = HSCLK1_LCPLLSOUTHREFCLK0;
  assign HSCLK1_LCPLLSOUTHREFCLK1_in = HSCLK1_LCPLLSOUTHREFCLK1;
  assign HSCLK1_RPLLFBDIV_in[0] = (HSCLK1_RPLLFBDIV[0] === 1'bz) || HSCLK1_RPLLFBDIV[0]; // rv 1
  assign HSCLK1_RPLLFBDIV_in[1] = (HSCLK1_RPLLFBDIV[1] === 1'bz) || HSCLK1_RPLLFBDIV[1]; // rv 1
  assign HSCLK1_RPLLFBDIV_in[2] = (HSCLK1_RPLLFBDIV[2] === 1'bz) || HSCLK1_RPLLFBDIV[2]; // rv 1
  assign HSCLK1_RPLLFBDIV_in[3] = (HSCLK1_RPLLFBDIV[3] === 1'bz) || HSCLK1_RPLLFBDIV[3]; // rv 1
  assign HSCLK1_RPLLFBDIV_in[4] = (HSCLK1_RPLLFBDIV[4] === 1'bz) || HSCLK1_RPLLFBDIV[4]; // rv 1
  assign HSCLK1_RPLLFBDIV_in[5] = (HSCLK1_RPLLFBDIV[5] === 1'bz) || HSCLK1_RPLLFBDIV[5]; // rv 1
  assign HSCLK1_RPLLFBDIV_in[6] = (HSCLK1_RPLLFBDIV[6] === 1'bz) || HSCLK1_RPLLFBDIV[6]; // rv 1
  assign HSCLK1_RPLLFBDIV_in[7] = (HSCLK1_RPLLFBDIV[7] === 1'bz) || HSCLK1_RPLLFBDIV[7]; // rv 1
  assign HSCLK1_RPLLGTGREFCLK_in = HSCLK1_RPLLGTGREFCLK;
  assign HSCLK1_RPLLGTREFCLK0_in = HSCLK1_RPLLGTREFCLK0;
  assign HSCLK1_RPLLGTREFCLK1_in = HSCLK1_RPLLGTREFCLK1;
  assign HSCLK1_RPLLNORTHREFCLK0_in = HSCLK1_RPLLNORTHREFCLK0;
  assign HSCLK1_RPLLNORTHREFCLK1_in = HSCLK1_RPLLNORTHREFCLK1;
  assign HSCLK1_RPLLPD_in = (HSCLK1_RPLLPD === 1'bz) || HSCLK1_RPLLPD; // rv 1
  assign HSCLK1_RPLLREFCLKSEL_in[0] = (HSCLK1_RPLLREFCLKSEL[0] === 1'bz) || HSCLK1_RPLLREFCLKSEL[0]; // rv 1
  assign HSCLK1_RPLLREFCLKSEL_in[1] = (HSCLK1_RPLLREFCLKSEL[1] === 1'bz) || HSCLK1_RPLLREFCLKSEL[1]; // rv 1
  assign HSCLK1_RPLLREFCLKSEL_in[2] = (HSCLK1_RPLLREFCLKSEL[2] === 1'bz) || HSCLK1_RPLLREFCLKSEL[2]; // rv 1
  assign HSCLK1_RPLLRESETBYPASSMODE_in = (HSCLK1_RPLLRESETBYPASSMODE === 1'bz) || HSCLK1_RPLLRESETBYPASSMODE; // rv 1
  assign HSCLK1_RPLLRESETMASK_in[0] = (HSCLK1_RPLLRESETMASK[0] === 1'bz) || HSCLK1_RPLLRESETMASK[0]; // rv 1
  assign HSCLK1_RPLLRESETMASK_in[1] = (HSCLK1_RPLLRESETMASK[1] === 1'bz) || HSCLK1_RPLLRESETMASK[1]; // rv 1
  assign HSCLK1_RPLLRESET_in = (HSCLK1_RPLLRESET === 1'bz) || HSCLK1_RPLLRESET; // rv 1
  assign HSCLK1_RPLLSDMDATA_in[0] = (HSCLK1_RPLLSDMDATA[0] === 1'bz) || HSCLK1_RPLLSDMDATA[0]; // rv 1
  assign HSCLK1_RPLLSDMDATA_in[10] = (HSCLK1_RPLLSDMDATA[10] === 1'bz) || HSCLK1_RPLLSDMDATA[10]; // rv 1
  assign HSCLK1_RPLLSDMDATA_in[11] = (HSCLK1_RPLLSDMDATA[11] === 1'bz) || HSCLK1_RPLLSDMDATA[11]; // rv 1
  assign HSCLK1_RPLLSDMDATA_in[12] = (HSCLK1_RPLLSDMDATA[12] === 1'bz) || HSCLK1_RPLLSDMDATA[12]; // rv 1
  assign HSCLK1_RPLLSDMDATA_in[13] = (HSCLK1_RPLLSDMDATA[13] === 1'bz) || HSCLK1_RPLLSDMDATA[13]; // rv 1
  assign HSCLK1_RPLLSDMDATA_in[14] = (HSCLK1_RPLLSDMDATA[14] === 1'bz) || HSCLK1_RPLLSDMDATA[14]; // rv 1
  assign HSCLK1_RPLLSDMDATA_in[15] = (HSCLK1_RPLLSDMDATA[15] === 1'bz) || HSCLK1_RPLLSDMDATA[15]; // rv 1
  assign HSCLK1_RPLLSDMDATA_in[16] = (HSCLK1_RPLLSDMDATA[16] === 1'bz) || HSCLK1_RPLLSDMDATA[16]; // rv 1
  assign HSCLK1_RPLLSDMDATA_in[17] = (HSCLK1_RPLLSDMDATA[17] === 1'bz) || HSCLK1_RPLLSDMDATA[17]; // rv 1
  assign HSCLK1_RPLLSDMDATA_in[18] = (HSCLK1_RPLLSDMDATA[18] === 1'bz) || HSCLK1_RPLLSDMDATA[18]; // rv 1
  assign HSCLK1_RPLLSDMDATA_in[19] = (HSCLK1_RPLLSDMDATA[19] === 1'bz) || HSCLK1_RPLLSDMDATA[19]; // rv 1
  assign HSCLK1_RPLLSDMDATA_in[1] = (HSCLK1_RPLLSDMDATA[1] === 1'bz) || HSCLK1_RPLLSDMDATA[1]; // rv 1
  assign HSCLK1_RPLLSDMDATA_in[20] = (HSCLK1_RPLLSDMDATA[20] === 1'bz) || HSCLK1_RPLLSDMDATA[20]; // rv 1
  assign HSCLK1_RPLLSDMDATA_in[21] = (HSCLK1_RPLLSDMDATA[21] === 1'bz) || HSCLK1_RPLLSDMDATA[21]; // rv 1
  assign HSCLK1_RPLLSDMDATA_in[22] = (HSCLK1_RPLLSDMDATA[22] === 1'bz) || HSCLK1_RPLLSDMDATA[22]; // rv 1
  assign HSCLK1_RPLLSDMDATA_in[23] = (HSCLK1_RPLLSDMDATA[23] === 1'bz) || HSCLK1_RPLLSDMDATA[23]; // rv 1
  assign HSCLK1_RPLLSDMDATA_in[24] = (HSCLK1_RPLLSDMDATA[24] === 1'bz) || HSCLK1_RPLLSDMDATA[24]; // rv 1
  assign HSCLK1_RPLLSDMDATA_in[25] = (HSCLK1_RPLLSDMDATA[25] === 1'bz) || HSCLK1_RPLLSDMDATA[25]; // rv 1
  assign HSCLK1_RPLLSDMDATA_in[2] = (HSCLK1_RPLLSDMDATA[2] === 1'bz) || HSCLK1_RPLLSDMDATA[2]; // rv 1
  assign HSCLK1_RPLLSDMDATA_in[3] = (HSCLK1_RPLLSDMDATA[3] === 1'bz) || HSCLK1_RPLLSDMDATA[3]; // rv 1
  assign HSCLK1_RPLLSDMDATA_in[4] = (HSCLK1_RPLLSDMDATA[4] === 1'bz) || HSCLK1_RPLLSDMDATA[4]; // rv 1
  assign HSCLK1_RPLLSDMDATA_in[5] = (HSCLK1_RPLLSDMDATA[5] === 1'bz) || HSCLK1_RPLLSDMDATA[5]; // rv 1
  assign HSCLK1_RPLLSDMDATA_in[6] = (HSCLK1_RPLLSDMDATA[6] === 1'bz) || HSCLK1_RPLLSDMDATA[6]; // rv 1
  assign HSCLK1_RPLLSDMDATA_in[7] = (HSCLK1_RPLLSDMDATA[7] === 1'bz) || HSCLK1_RPLLSDMDATA[7]; // rv 1
  assign HSCLK1_RPLLSDMDATA_in[8] = (HSCLK1_RPLLSDMDATA[8] === 1'bz) || HSCLK1_RPLLSDMDATA[8]; // rv 1
  assign HSCLK1_RPLLSDMDATA_in[9] = (HSCLK1_RPLLSDMDATA[9] === 1'bz) || HSCLK1_RPLLSDMDATA[9]; // rv 1
  assign HSCLK1_RPLLSDMTOGGLE_in = (HSCLK1_RPLLSDMTOGGLE === 1'bz) || HSCLK1_RPLLSDMTOGGLE; // rv 1
  assign HSCLK1_RPLLSOUTHREFCLK0_in = HSCLK1_RPLLSOUTHREFCLK0;
  assign HSCLK1_RPLLSOUTHREFCLK1_in = HSCLK1_RPLLSOUTHREFCLK1;
  assign MSTRXRESET_in[0] = (MSTRXRESET[0] === 1'bz) || MSTRXRESET[0]; // rv 1
  assign MSTRXRESET_in[1] = (MSTRXRESET[1] === 1'bz) || MSTRXRESET[1]; // rv 1
  assign MSTRXRESET_in[2] = (MSTRXRESET[2] === 1'bz) || MSTRXRESET[2]; // rv 1
  assign MSTRXRESET_in[3] = (MSTRXRESET[3] === 1'bz) || MSTRXRESET[3]; // rv 1
  assign MSTTXRESET_in[0] = (MSTTXRESET[0] === 1'bz) || MSTTXRESET[0]; // rv 1
  assign MSTTXRESET_in[1] = (MSTTXRESET[1] === 1'bz) || MSTTXRESET[1]; // rv 1
  assign MSTTXRESET_in[2] = (MSTTXRESET[2] === 1'bz) || MSTTXRESET[2]; // rv 1
  assign MSTTXRESET_in[3] = (MSTTXRESET[3] === 1'bz) || MSTTXRESET[3]; // rv 1
  assign PCIELINKREACHTARGET_in = (PCIELINKREACHTARGET === 1'bz) || PCIELINKREACHTARGET; // rv 1
  assign PIPENORTHIN_in = PIPENORTHIN;
  assign PIPESOUTHIN_in = PIPESOUTHIN;
  assign RCALENB_in = RCALENB;
  assign REFCLK0_CLKTESTSIG_in = REFCLK0_CLKTESTSIG;
  assign REFCLK0_GTREFCLKPD_in = REFCLK0_GTREFCLKPD;
  assign REFCLK1_CLKTESTSIG_in = REFCLK1_CLKTESTSIG;
  assign REFCLK1_GTREFCLKPD_in = REFCLK1_GTREFCLKPD;
  assign RESETDONE_NORTHIN_in = RESETDONE_NORTHIN;
  assign RESETDONE_SOUTHIN_in = RESETDONE_SOUTHIN;
  assign RXPINORTHIN_in = RXPINORTHIN;
  assign RXPISOUTHIN_in = RXPISOUTHIN;
  assign TRIGACKOUT0_in = (TRIGACKOUT0 === 1'bz) || TRIGACKOUT0; // rv 1
  assign TRIGIN0_in = (TRIGIN0 === 1'bz) || TRIGIN0; // rv 1
  assign TXPINORTHIN_in = TXPINORTHIN;
  assign TXPISOUTHIN_in = TXPISOUTHIN;
  assign UBENABLE_in = (UBENABLE === 1'bz) || UBENABLE; // rv 1
  assign UBINTR_in[0] = (UBINTR[0] === 1'bz) || UBINTR[0]; // rv 1
  assign UBINTR_in[10] = (UBINTR[10] === 1'bz) || UBINTR[10]; // rv 1
  assign UBINTR_in[11] = (UBINTR[11] === 1'bz) || UBINTR[11]; // rv 1
  assign UBINTR_in[1] = (UBINTR[1] === 1'bz) || UBINTR[1]; // rv 1
  assign UBINTR_in[2] = (UBINTR[2] === 1'bz) || UBINTR[2]; // rv 1
  assign UBINTR_in[3] = (UBINTR[3] === 1'bz) || UBINTR[3]; // rv 1
  assign UBINTR_in[4] = (UBINTR[4] === 1'bz) || UBINTR[4]; // rv 1
  assign UBINTR_in[5] = (UBINTR[5] === 1'bz) || UBINTR[5]; // rv 1
  assign UBINTR_in[6] = (UBINTR[6] === 1'bz) || UBINTR[6]; // rv 1
  assign UBINTR_in[7] = (UBINTR[7] === 1'bz) || UBINTR[7]; // rv 1
  assign UBINTR_in[8] = (UBINTR[8] === 1'bz) || UBINTR[8]; // rv 1
  assign UBINTR_in[9] = (UBINTR[9] === 1'bz) || UBINTR[9]; // rv 1
  assign UBIOLMBRST_in = (UBIOLMBRST === 1'bz) || UBIOLMBRST; // rv 1
  assign UBMBRST_in = (UBMBRST === 1'bz) || UBMBRST; // rv 1
  assign UBRXUART_in = (UBRXUART === 1'bz) || UBRXUART; // rv 1

`ifndef XIL_XECLIB
  reg attr_test;
  reg attr_err;
  
  initial begin
  trig_attr = 1'b0;
  `ifdef XIL_ATTR_TEST
    attr_test = 1'b1;
  `else
    attr_test = 1'b0;
  `endif
    attr_err = 1'b0;
    #1;
    trig_attr = ~trig_attr;
  end
`endif

`ifdef XIL_XECLIB
  assign CH0_RXOUTCLK_FREQ_BIN = CH0_RXOUTCLK_FREQ_REG * 1000;
  
  assign CH0_RXOUTCLK_REF_FREQ_BIN = CH0_RXOUTCLK_REF_FREQ_REG * 1000;
  
  assign CH0_RX_DATA_RATE_BIN = CH0_RX_DATA_RATE_REG * 1000;
  
  assign CH0_TXOUTCLK_FREQ_BIN = CH0_TXOUTCLK_FREQ_REG * 1000;
  
  assign CH0_TXOUTCLK_REF_FREQ_BIN = CH0_TXOUTCLK_REF_FREQ_REG * 1000;
  
  assign CH0_TX_DATA_RATE_BIN = CH0_TX_DATA_RATE_REG * 1000;
  
  assign CH1_RXOUTCLK_FREQ_BIN = CH1_RXOUTCLK_FREQ_REG * 1000;
  
  assign CH1_RXOUTCLK_REF_FREQ_BIN = CH1_RXOUTCLK_REF_FREQ_REG * 1000;
  
  assign CH1_RX_DATA_RATE_BIN = CH1_RX_DATA_RATE_REG * 1000;
  
  assign CH1_TXOUTCLK_FREQ_BIN = CH1_TXOUTCLK_FREQ_REG * 1000;
  
  assign CH1_TXOUTCLK_REF_FREQ_BIN = CH1_TXOUTCLK_REF_FREQ_REG * 1000;
  
  assign CH1_TX_DATA_RATE_BIN = CH1_TX_DATA_RATE_REG * 1000;
  
  assign CH2_RXOUTCLK_FREQ_BIN = CH2_RXOUTCLK_FREQ_REG * 1000;
  
  assign CH2_RXOUTCLK_REF_FREQ_BIN = CH2_RXOUTCLK_REF_FREQ_REG * 1000;
  
  assign CH2_RX_DATA_RATE_BIN = CH2_RX_DATA_RATE_REG * 1000;
  
  assign CH2_TXOUTCLK_FREQ_BIN = CH2_TXOUTCLK_FREQ_REG * 1000;
  
  assign CH2_TXOUTCLK_REF_FREQ_BIN = CH2_TXOUTCLK_REF_FREQ_REG * 1000;
  
  assign CH2_TX_DATA_RATE_BIN = CH2_TX_DATA_RATE_REG * 1000;
  
  assign CH3_RXOUTCLK_FREQ_BIN = CH3_RXOUTCLK_FREQ_REG * 1000;
  
  assign CH3_RXOUTCLK_REF_FREQ_BIN = CH3_RXOUTCLK_REF_FREQ_REG * 1000;
  
  assign CH3_RX_DATA_RATE_BIN = CH3_RX_DATA_RATE_REG * 1000;
  
  assign CH3_TXOUTCLK_FREQ_BIN = CH3_TXOUTCLK_FREQ_REG * 1000;
  
  assign CH3_TXOUTCLK_REF_FREQ_BIN = CH3_TXOUTCLK_REF_FREQ_REG * 1000;
  
  assign CH3_TX_DATA_RATE_BIN = CH3_TX_DATA_RATE_REG * 1000;
  
`else
  always @ (trig_attr) begin
  #1;
  CH0_RXOUTCLK_FREQ_BIN = CH0_RXOUTCLK_FREQ_REG * 1000;
  
  CH0_RXOUTCLK_REF_FREQ_BIN = CH0_RXOUTCLK_REF_FREQ_REG * 1000;
  
  CH0_RX_DATA_RATE_BIN = CH0_RX_DATA_RATE_REG * 1000;
  
  CH0_TXOUTCLK_FREQ_BIN = CH0_TXOUTCLK_FREQ_REG * 1000;
  
  CH0_TXOUTCLK_REF_FREQ_BIN = CH0_TXOUTCLK_REF_FREQ_REG * 1000;
  
  CH0_TX_DATA_RATE_BIN = CH0_TX_DATA_RATE_REG * 1000;
  
  CH1_RXOUTCLK_FREQ_BIN = CH1_RXOUTCLK_FREQ_REG * 1000;
  
  CH1_RXOUTCLK_REF_FREQ_BIN = CH1_RXOUTCLK_REF_FREQ_REG * 1000;
  
  CH1_RX_DATA_RATE_BIN = CH1_RX_DATA_RATE_REG * 1000;
  
  CH1_TXOUTCLK_FREQ_BIN = CH1_TXOUTCLK_FREQ_REG * 1000;
  
  CH1_TXOUTCLK_REF_FREQ_BIN = CH1_TXOUTCLK_REF_FREQ_REG * 1000;
  
  CH1_TX_DATA_RATE_BIN = CH1_TX_DATA_RATE_REG * 1000;
  
  CH2_RXOUTCLK_FREQ_BIN = CH2_RXOUTCLK_FREQ_REG * 1000;
  
  CH2_RXOUTCLK_REF_FREQ_BIN = CH2_RXOUTCLK_REF_FREQ_REG * 1000;
  
  CH2_RX_DATA_RATE_BIN = CH2_RX_DATA_RATE_REG * 1000;
  
  CH2_TXOUTCLK_FREQ_BIN = CH2_TXOUTCLK_FREQ_REG * 1000;
  
  CH2_TXOUTCLK_REF_FREQ_BIN = CH2_TXOUTCLK_REF_FREQ_REG * 1000;
  
  CH2_TX_DATA_RATE_BIN = CH2_TX_DATA_RATE_REG * 1000;
  
  CH3_RXOUTCLK_FREQ_BIN = CH3_RXOUTCLK_FREQ_REG * 1000;
  
  CH3_RXOUTCLK_REF_FREQ_BIN = CH3_RXOUTCLK_REF_FREQ_REG * 1000;
  
  CH3_RX_DATA_RATE_BIN = CH3_RX_DATA_RATE_REG * 1000;
  
  CH3_TXOUTCLK_FREQ_BIN = CH3_TXOUTCLK_FREQ_REG * 1000;
  
  CH3_TXOUTCLK_REF_FREQ_BIN = CH3_TXOUTCLK_REF_FREQ_REG * 1000;
  
  CH3_TX_DATA_RATE_BIN = CH3_TX_DATA_RATE_REG * 1000;
  
  end
`endif

`ifndef XIL_XECLIB
  always @ (trig_attr) begin
    #1;
    if ((attr_test == 1'b1) ||
        (CH0_RXOUTCLK_FREQ_REG < 0.0000001 || CH0_RXOUTCLK_FREQ_REG > 1000.0000000)) begin
      $display("Error: [Unisim %s-205] CH0_RXOUTCLK_FREQ attribute is set to %f.  Legal values for this attribute are 0.0000001 to 1000.0000000. Instance: %m", MODULE_NAME, CH0_RXOUTCLK_FREQ_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        (CH0_RXOUTCLK_REF_FREQ_REG < 60.0000000 || CH0_RXOUTCLK_REF_FREQ_REG > 820.0000000)) begin
      $display("Error: [Unisim %s-206] CH0_RXOUTCLK_REF_FREQ attribute is set to %f.  Legal values for this attribute are 60.0000000 to 820.0000000. Instance: %m", MODULE_NAME, CH0_RXOUTCLK_REF_FREQ_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((CH0_RXOUTCLK_REF_SOURCE_REG != "HSCLK0_LCPLLGTGREFCLK") &&
         (CH0_RXOUTCLK_REF_SOURCE_REG != "HSCLK0_LCPLLGTREFCLK0") &&
         (CH0_RXOUTCLK_REF_SOURCE_REG != "HSCLK0_LCPLLGTREFCLK1") &&
         (CH0_RXOUTCLK_REF_SOURCE_REG != "HSCLK0_LCPLLNORTHREFCLK0") &&
         (CH0_RXOUTCLK_REF_SOURCE_REG != "HSCLK0_LCPLLNORTHREFCLK1") &&
         (CH0_RXOUTCLK_REF_SOURCE_REG != "HSCLK0_LCPLLSOUTHREFCLK0") &&
         (CH0_RXOUTCLK_REF_SOURCE_REG != "HSCLK0_LCPLLSOUTHREFCLK1") &&
         (CH0_RXOUTCLK_REF_SOURCE_REG != "HSCLK0_RPLLGTGREFCLK") &&
         (CH0_RXOUTCLK_REF_SOURCE_REG != "HSCLK0_RPLLGTREFCLK0") &&
         (CH0_RXOUTCLK_REF_SOURCE_REG != "HSCLK0_RPLLGTREFCLK1") &&
         (CH0_RXOUTCLK_REF_SOURCE_REG != "HSCLK0_RPLLNORTHREFCLK0") &&
         (CH0_RXOUTCLK_REF_SOURCE_REG != "HSCLK0_RPLLNORTHREFCLK1") &&
         (CH0_RXOUTCLK_REF_SOURCE_REG != "HSCLK0_RPLLSOUTHREFCLK0") &&
         (CH0_RXOUTCLK_REF_SOURCE_REG != "HSCLK0_RPLLSOUTHREFCLK1") &&
         (CH0_RXOUTCLK_REF_SOURCE_REG != "HSCLK1_LCPLLGTGREFCLK") &&
         (CH0_RXOUTCLK_REF_SOURCE_REG != "HSCLK1_LCPLLGTREFCLK0") &&
         (CH0_RXOUTCLK_REF_SOURCE_REG != "HSCLK1_LCPLLGTREFCLK1") &&
         (CH0_RXOUTCLK_REF_SOURCE_REG != "HSCLK1_LCPLLNORTHREFCLK0") &&
         (CH0_RXOUTCLK_REF_SOURCE_REG != "HSCLK1_LCPLLNORTHREFCLK1") &&
         (CH0_RXOUTCLK_REF_SOURCE_REG != "HSCLK1_LCPLLSOUTHREFCLK0") &&
         (CH0_RXOUTCLK_REF_SOURCE_REG != "HSCLK1_LCPLLSOUTHREFCLK1") &&
         (CH0_RXOUTCLK_REF_SOURCE_REG != "HSCLK1_RPLLGTGREFCLK") &&
         (CH0_RXOUTCLK_REF_SOURCE_REG != "HSCLK1_RPLLGTREFCLK0") &&
         (CH0_RXOUTCLK_REF_SOURCE_REG != "HSCLK1_RPLLGTREFCLK1") &&
         (CH0_RXOUTCLK_REF_SOURCE_REG != "HSCLK1_RPLLNORTHREFCLK0") &&
         (CH0_RXOUTCLK_REF_SOURCE_REG != "HSCLK1_RPLLNORTHREFCLK1") &&
         (CH0_RXOUTCLK_REF_SOURCE_REG != "HSCLK1_RPLLSOUTHREFCLK0") &&
         (CH0_RXOUTCLK_REF_SOURCE_REG != "HSCLK1_RPLLSOUTHREFCLK1"))) begin
      $display("Error: [Unisim %s-207] CH0_RXOUTCLK_REF_SOURCE attribute is set to %s.  Legal values for this attribute are HSCLK0_LCPLLGTGREFCLK, HSCLK0_LCPLLGTREFCLK0, HSCLK0_LCPLLGTREFCLK1, HSCLK0_LCPLLNORTHREFCLK0, HSCLK0_LCPLLNORTHREFCLK1, HSCLK0_LCPLLSOUTHREFCLK0, HSCLK0_LCPLLSOUTHREFCLK1, HSCLK0_RPLLGTGREFCLK, HSCLK0_RPLLGTREFCLK0, HSCLK0_RPLLGTREFCLK1, HSCLK0_RPLLNORTHREFCLK0, HSCLK0_RPLLNORTHREFCLK1, HSCLK0_RPLLSOUTHREFCLK0, HSCLK0_RPLLSOUTHREFCLK1, HSCLK1_LCPLLGTGREFCLK, HSCLK1_LCPLLGTREFCLK0, HSCLK1_LCPLLGTREFCLK1, HSCLK1_LCPLLNORTHREFCLK0, HSCLK1_LCPLLNORTHREFCLK1, HSCLK1_LCPLLSOUTHREFCLK0, HSCLK1_LCPLLSOUTHREFCLK1, HSCLK1_RPLLGTGREFCLK, HSCLK1_RPLLGTREFCLK0, HSCLK1_RPLLGTREFCLK1, HSCLK1_RPLLNORTHREFCLK0, HSCLK1_RPLLNORTHREFCLK1, HSCLK1_RPLLSOUTHREFCLK0 or HSCLK1_RPLLSOUTHREFCLK1. Instance: %m", MODULE_NAME, CH0_RXOUTCLK_REF_SOURCE_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        (CH0_RX_DATA_RATE_REG < 0.50 || CH0_RX_DATA_RATE_REG > 32.75)) begin
      $display("Error: [Unisim %s-220] CH0_RX_DATA_RATE attribute is set to %f.  Legal values for this attribute are 0.50 to 32.75. Instance: %m", MODULE_NAME, CH0_RX_DATA_RATE_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((CH0_SIM_MODE_REG != "FAST") &&
         (CH0_SIM_MODE_REG != "LEGACY"))) begin
      $display("Error: [Unisim %s-248] CH0_SIM_MODE attribute is set to %s.  Legal values for this attribute are FAST or LEGACY. Instance: %m", MODULE_NAME, CH0_SIM_MODE_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((CH0_SIM_RECEIVER_DETECT_PASS_REG != "TRUE") &&
         (CH0_SIM_RECEIVER_DETECT_PASS_REG != "FALSE"))) begin
      $display("Error: [Unisim %s-249] CH0_SIM_RECEIVER_DETECT_PASS attribute is set to %s.  Legal values for this attribute are TRUE or FALSE. Instance: %m", MODULE_NAME, CH0_SIM_RECEIVER_DETECT_PASS_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((CH0_SIM_RESET_SPEEDUP_REG != "TRUE") &&
         (CH0_SIM_RESET_SPEEDUP_REG != "FALSE"))) begin
      $display("Error: [Unisim %s-250] CH0_SIM_RESET_SPEEDUP attribute is set to %s.  Legal values for this attribute are TRUE or FALSE. Instance: %m", MODULE_NAME, CH0_SIM_RESET_SPEEDUP_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((CH0_SIM_TX_EIDLE_DRIVE_LEVEL_REG != "Z") &&
         (CH0_SIM_TX_EIDLE_DRIVE_LEVEL_REG != "HIGH") &&
         (CH0_SIM_TX_EIDLE_DRIVE_LEVEL_REG != "LOW") &&
         (CH0_SIM_TX_EIDLE_DRIVE_LEVEL_REG != "X"))) begin
      $display("Error: [Unisim %s-251] CH0_SIM_TX_EIDLE_DRIVE_LEVEL attribute is set to %s.  Legal values for this attribute are Z, HIGH, LOW or X. Instance: %m", MODULE_NAME, CH0_SIM_TX_EIDLE_DRIVE_LEVEL_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        (CH0_TXOUTCLK_FREQ_REG < 0.0000001 || CH0_TXOUTCLK_FREQ_REG > 1000.0000000)) begin
      $display("Error: [Unisim %s-252] CH0_TXOUTCLK_FREQ attribute is set to %f.  Legal values for this attribute are 0.0000001 to 1000.0000000. Instance: %m", MODULE_NAME, CH0_TXOUTCLK_FREQ_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        (CH0_TXOUTCLK_REF_FREQ_REG < 60.0000000 || CH0_TXOUTCLK_REF_FREQ_REG > 820.0000000)) begin
      $display("Error: [Unisim %s-253] CH0_TXOUTCLK_REF_FREQ attribute is set to %f.  Legal values for this attribute are 60.0000000 to 820.0000000. Instance: %m", MODULE_NAME, CH0_TXOUTCLK_REF_FREQ_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((CH0_TXOUTCLK_REF_SOURCE_REG != "HSCLK0_LCPLLGTGREFCLK") &&
         (CH0_TXOUTCLK_REF_SOURCE_REG != "HSCLK0_LCPLLGTREFCLK0") &&
         (CH0_TXOUTCLK_REF_SOURCE_REG != "HSCLK0_LCPLLGTREFCLK1") &&
         (CH0_TXOUTCLK_REF_SOURCE_REG != "HSCLK0_LCPLLNORTHREFCLK0") &&
         (CH0_TXOUTCLK_REF_SOURCE_REG != "HSCLK0_LCPLLNORTHREFCLK1") &&
         (CH0_TXOUTCLK_REF_SOURCE_REG != "HSCLK0_LCPLLSOUTHREFCLK0") &&
         (CH0_TXOUTCLK_REF_SOURCE_REG != "HSCLK0_LCPLLSOUTHREFCLK1") &&
         (CH0_TXOUTCLK_REF_SOURCE_REG != "HSCLK0_RPLLGTGREFCLK") &&
         (CH0_TXOUTCLK_REF_SOURCE_REG != "HSCLK0_RPLLGTREFCLK0") &&
         (CH0_TXOUTCLK_REF_SOURCE_REG != "HSCLK0_RPLLGTREFCLK1") &&
         (CH0_TXOUTCLK_REF_SOURCE_REG != "HSCLK0_RPLLNORTHREFCLK0") &&
         (CH0_TXOUTCLK_REF_SOURCE_REG != "HSCLK0_RPLLNORTHREFCLK1") &&
         (CH0_TXOUTCLK_REF_SOURCE_REG != "HSCLK0_RPLLSOUTHREFCLK0") &&
         (CH0_TXOUTCLK_REF_SOURCE_REG != "HSCLK0_RPLLSOUTHREFCLK1") &&
         (CH0_TXOUTCLK_REF_SOURCE_REG != "HSCLK1_LCPLLGTGREFCLK") &&
         (CH0_TXOUTCLK_REF_SOURCE_REG != "HSCLK1_LCPLLGTREFCLK0") &&
         (CH0_TXOUTCLK_REF_SOURCE_REG != "HSCLK1_LCPLLGTREFCLK1") &&
         (CH0_TXOUTCLK_REF_SOURCE_REG != "HSCLK1_LCPLLNORTHREFCLK0") &&
         (CH0_TXOUTCLK_REF_SOURCE_REG != "HSCLK1_LCPLLNORTHREFCLK1") &&
         (CH0_TXOUTCLK_REF_SOURCE_REG != "HSCLK1_LCPLLSOUTHREFCLK0") &&
         (CH0_TXOUTCLK_REF_SOURCE_REG != "HSCLK1_LCPLLSOUTHREFCLK1") &&
         (CH0_TXOUTCLK_REF_SOURCE_REG != "HSCLK1_RPLLGTGREFCLK") &&
         (CH0_TXOUTCLK_REF_SOURCE_REG != "HSCLK1_RPLLGTREFCLK0") &&
         (CH0_TXOUTCLK_REF_SOURCE_REG != "HSCLK1_RPLLGTREFCLK1") &&
         (CH0_TXOUTCLK_REF_SOURCE_REG != "HSCLK1_RPLLNORTHREFCLK0") &&
         (CH0_TXOUTCLK_REF_SOURCE_REG != "HSCLK1_RPLLNORTHREFCLK1") &&
         (CH0_TXOUTCLK_REF_SOURCE_REG != "HSCLK1_RPLLSOUTHREFCLK0") &&
         (CH0_TXOUTCLK_REF_SOURCE_REG != "HSCLK1_RPLLSOUTHREFCLK1"))) begin
      $display("Error: [Unisim %s-254] CH0_TXOUTCLK_REF_SOURCE attribute is set to %s.  Legal values for this attribute are HSCLK0_LCPLLGTGREFCLK, HSCLK0_LCPLLGTREFCLK0, HSCLK0_LCPLLGTREFCLK1, HSCLK0_LCPLLNORTHREFCLK0, HSCLK0_LCPLLNORTHREFCLK1, HSCLK0_LCPLLSOUTHREFCLK0, HSCLK0_LCPLLSOUTHREFCLK1, HSCLK0_RPLLGTGREFCLK, HSCLK0_RPLLGTREFCLK0, HSCLK0_RPLLGTREFCLK1, HSCLK0_RPLLNORTHREFCLK0, HSCLK0_RPLLNORTHREFCLK1, HSCLK0_RPLLSOUTHREFCLK0, HSCLK0_RPLLSOUTHREFCLK1, HSCLK1_LCPLLGTGREFCLK, HSCLK1_LCPLLGTREFCLK0, HSCLK1_LCPLLGTREFCLK1, HSCLK1_LCPLLNORTHREFCLK0, HSCLK1_LCPLLNORTHREFCLK1, HSCLK1_LCPLLSOUTHREFCLK0, HSCLK1_LCPLLSOUTHREFCLK1, HSCLK1_RPLLGTGREFCLK, HSCLK1_RPLLGTREFCLK0, HSCLK1_RPLLGTREFCLK1, HSCLK1_RPLLNORTHREFCLK0, HSCLK1_RPLLNORTHREFCLK1, HSCLK1_RPLLSOUTHREFCLK0 or HSCLK1_RPLLSOUTHREFCLK1. Instance: %m", MODULE_NAME, CH0_TXOUTCLK_REF_SOURCE_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        (CH0_TX_DATA_RATE_REG < 0.50 || CH0_TX_DATA_RATE_REG > 32.75)) begin
      $display("Error: [Unisim %s-264] CH0_TX_DATA_RATE attribute is set to %f.  Legal values for this attribute are 0.50 to 32.75. Instance: %m", MODULE_NAME, CH0_TX_DATA_RATE_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        (CH1_RXOUTCLK_FREQ_REG < 0.0000001 || CH1_RXOUTCLK_FREQ_REG > 1000.0000000)) begin
      $display("Error: [Unisim %s-377] CH1_RXOUTCLK_FREQ attribute is set to %f.  Legal values for this attribute are 0.0000001 to 1000.0000000. Instance: %m", MODULE_NAME, CH1_RXOUTCLK_FREQ_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        (CH1_RXOUTCLK_REF_FREQ_REG < 60.0000000 || CH1_RXOUTCLK_REF_FREQ_REG > 820.0000000)) begin
      $display("Error: [Unisim %s-378] CH1_RXOUTCLK_REF_FREQ attribute is set to %f.  Legal values for this attribute are 60.0000000 to 820.0000000. Instance: %m", MODULE_NAME, CH1_RXOUTCLK_REF_FREQ_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((CH1_RXOUTCLK_REF_SOURCE_REG != "HSCLK0_LCPLLGTGREFCLK") &&
         (CH1_RXOUTCLK_REF_SOURCE_REG != "HSCLK0_LCPLLGTREFCLK0") &&
         (CH1_RXOUTCLK_REF_SOURCE_REG != "HSCLK0_LCPLLGTREFCLK1") &&
         (CH1_RXOUTCLK_REF_SOURCE_REG != "HSCLK0_LCPLLNORTHREFCLK0") &&
         (CH1_RXOUTCLK_REF_SOURCE_REG != "HSCLK0_LCPLLNORTHREFCLK1") &&
         (CH1_RXOUTCLK_REF_SOURCE_REG != "HSCLK0_LCPLLSOUTHREFCLK0") &&
         (CH1_RXOUTCLK_REF_SOURCE_REG != "HSCLK0_LCPLLSOUTHREFCLK1") &&
         (CH1_RXOUTCLK_REF_SOURCE_REG != "HSCLK0_RPLLGTGREFCLK") &&
         (CH1_RXOUTCLK_REF_SOURCE_REG != "HSCLK0_RPLLGTREFCLK0") &&
         (CH1_RXOUTCLK_REF_SOURCE_REG != "HSCLK0_RPLLGTREFCLK1") &&
         (CH1_RXOUTCLK_REF_SOURCE_REG != "HSCLK0_RPLLNORTHREFCLK0") &&
         (CH1_RXOUTCLK_REF_SOURCE_REG != "HSCLK0_RPLLNORTHREFCLK1") &&
         (CH1_RXOUTCLK_REF_SOURCE_REG != "HSCLK0_RPLLSOUTHREFCLK0") &&
         (CH1_RXOUTCLK_REF_SOURCE_REG != "HSCLK0_RPLLSOUTHREFCLK1") &&
         (CH1_RXOUTCLK_REF_SOURCE_REG != "HSCLK1_LCPLLGTGREFCLK") &&
         (CH1_RXOUTCLK_REF_SOURCE_REG != "HSCLK1_LCPLLGTREFCLK0") &&
         (CH1_RXOUTCLK_REF_SOURCE_REG != "HSCLK1_LCPLLGTREFCLK1") &&
         (CH1_RXOUTCLK_REF_SOURCE_REG != "HSCLK1_LCPLLNORTHREFCLK0") &&
         (CH1_RXOUTCLK_REF_SOURCE_REG != "HSCLK1_LCPLLNORTHREFCLK1") &&
         (CH1_RXOUTCLK_REF_SOURCE_REG != "HSCLK1_LCPLLSOUTHREFCLK0") &&
         (CH1_RXOUTCLK_REF_SOURCE_REG != "HSCLK1_LCPLLSOUTHREFCLK1") &&
         (CH1_RXOUTCLK_REF_SOURCE_REG != "HSCLK1_RPLLGTGREFCLK") &&
         (CH1_RXOUTCLK_REF_SOURCE_REG != "HSCLK1_RPLLGTREFCLK0") &&
         (CH1_RXOUTCLK_REF_SOURCE_REG != "HSCLK1_RPLLGTREFCLK1") &&
         (CH1_RXOUTCLK_REF_SOURCE_REG != "HSCLK1_RPLLNORTHREFCLK0") &&
         (CH1_RXOUTCLK_REF_SOURCE_REG != "HSCLK1_RPLLNORTHREFCLK1") &&
         (CH1_RXOUTCLK_REF_SOURCE_REG != "HSCLK1_RPLLSOUTHREFCLK0") &&
         (CH1_RXOUTCLK_REF_SOURCE_REG != "HSCLK1_RPLLSOUTHREFCLK1"))) begin
      $display("Error: [Unisim %s-379] CH1_RXOUTCLK_REF_SOURCE attribute is set to %s.  Legal values for this attribute are HSCLK0_LCPLLGTGREFCLK, HSCLK0_LCPLLGTREFCLK0, HSCLK0_LCPLLGTREFCLK1, HSCLK0_LCPLLNORTHREFCLK0, HSCLK0_LCPLLNORTHREFCLK1, HSCLK0_LCPLLSOUTHREFCLK0, HSCLK0_LCPLLSOUTHREFCLK1, HSCLK0_RPLLGTGREFCLK, HSCLK0_RPLLGTREFCLK0, HSCLK0_RPLLGTREFCLK1, HSCLK0_RPLLNORTHREFCLK0, HSCLK0_RPLLNORTHREFCLK1, HSCLK0_RPLLSOUTHREFCLK0, HSCLK0_RPLLSOUTHREFCLK1, HSCLK1_LCPLLGTGREFCLK, HSCLK1_LCPLLGTREFCLK0, HSCLK1_LCPLLGTREFCLK1, HSCLK1_LCPLLNORTHREFCLK0, HSCLK1_LCPLLNORTHREFCLK1, HSCLK1_LCPLLSOUTHREFCLK0, HSCLK1_LCPLLSOUTHREFCLK1, HSCLK1_RPLLGTGREFCLK, HSCLK1_RPLLGTREFCLK0, HSCLK1_RPLLGTREFCLK1, HSCLK1_RPLLNORTHREFCLK0, HSCLK1_RPLLNORTHREFCLK1, HSCLK1_RPLLSOUTHREFCLK0 or HSCLK1_RPLLSOUTHREFCLK1. Instance: %m", MODULE_NAME, CH1_RXOUTCLK_REF_SOURCE_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        (CH1_RX_DATA_RATE_REG < 0.50 || CH1_RX_DATA_RATE_REG > 32.75)) begin
      $display("Error: [Unisim %s-392] CH1_RX_DATA_RATE attribute is set to %f.  Legal values for this attribute are 0.50 to 32.75. Instance: %m", MODULE_NAME, CH1_RX_DATA_RATE_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((CH1_SIM_MODE_REG != "FAST") &&
         (CH1_SIM_MODE_REG != "LEGACY"))) begin
      $display("Error: [Unisim %s-420] CH1_SIM_MODE attribute is set to %s.  Legal values for this attribute are FAST or LEGACY. Instance: %m", MODULE_NAME, CH1_SIM_MODE_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((CH1_SIM_RECEIVER_DETECT_PASS_REG != "TRUE") &&
         (CH1_SIM_RECEIVER_DETECT_PASS_REG != "FALSE"))) begin
      $display("Error: [Unisim %s-421] CH1_SIM_RECEIVER_DETECT_PASS attribute is set to %s.  Legal values for this attribute are TRUE or FALSE. Instance: %m", MODULE_NAME, CH1_SIM_RECEIVER_DETECT_PASS_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((CH1_SIM_RESET_SPEEDUP_REG != "TRUE") &&
         (CH1_SIM_RESET_SPEEDUP_REG != "FALSE"))) begin
      $display("Error: [Unisim %s-422] CH1_SIM_RESET_SPEEDUP attribute is set to %s.  Legal values for this attribute are TRUE or FALSE. Instance: %m", MODULE_NAME, CH1_SIM_RESET_SPEEDUP_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((CH1_SIM_TX_EIDLE_DRIVE_LEVEL_REG != "Z") &&
         (CH1_SIM_TX_EIDLE_DRIVE_LEVEL_REG != "HIGH") &&
         (CH1_SIM_TX_EIDLE_DRIVE_LEVEL_REG != "LOW") &&
         (CH1_SIM_TX_EIDLE_DRIVE_LEVEL_REG != "X"))) begin
      $display("Error: [Unisim %s-423] CH1_SIM_TX_EIDLE_DRIVE_LEVEL attribute is set to %s.  Legal values for this attribute are Z, HIGH, LOW or X. Instance: %m", MODULE_NAME, CH1_SIM_TX_EIDLE_DRIVE_LEVEL_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        (CH1_TXOUTCLK_FREQ_REG < 0.0000001 || CH1_TXOUTCLK_FREQ_REG > 1000.0000000)) begin
      $display("Error: [Unisim %s-424] CH1_TXOUTCLK_FREQ attribute is set to %f.  Legal values for this attribute are 0.0000001 to 1000.0000000. Instance: %m", MODULE_NAME, CH1_TXOUTCLK_FREQ_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        (CH1_TXOUTCLK_REF_FREQ_REG < 60.0000000 || CH1_TXOUTCLK_REF_FREQ_REG > 820.0000000)) begin
      $display("Error: [Unisim %s-425] CH1_TXOUTCLK_REF_FREQ attribute is set to %f.  Legal values for this attribute are 60.0000000 to 820.0000000. Instance: %m", MODULE_NAME, CH1_TXOUTCLK_REF_FREQ_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((CH1_TXOUTCLK_REF_SOURCE_REG != "HSCLK0_LCPLLGTGREFCLK") &&
         (CH1_TXOUTCLK_REF_SOURCE_REG != "HSCLK0_LCPLLGTREFCLK0") &&
         (CH1_TXOUTCLK_REF_SOURCE_REG != "HSCLK0_LCPLLGTREFCLK1") &&
         (CH1_TXOUTCLK_REF_SOURCE_REG != "HSCLK0_LCPLLNORTHREFCLK0") &&
         (CH1_TXOUTCLK_REF_SOURCE_REG != "HSCLK0_LCPLLNORTHREFCLK1") &&
         (CH1_TXOUTCLK_REF_SOURCE_REG != "HSCLK0_LCPLLSOUTHREFCLK0") &&
         (CH1_TXOUTCLK_REF_SOURCE_REG != "HSCLK0_LCPLLSOUTHREFCLK1") &&
         (CH1_TXOUTCLK_REF_SOURCE_REG != "HSCLK0_RPLLGTGREFCLK") &&
         (CH1_TXOUTCLK_REF_SOURCE_REG != "HSCLK0_RPLLGTREFCLK0") &&
         (CH1_TXOUTCLK_REF_SOURCE_REG != "HSCLK0_RPLLGTREFCLK1") &&
         (CH1_TXOUTCLK_REF_SOURCE_REG != "HSCLK0_RPLLNORTHREFCLK0") &&
         (CH1_TXOUTCLK_REF_SOURCE_REG != "HSCLK0_RPLLNORTHREFCLK1") &&
         (CH1_TXOUTCLK_REF_SOURCE_REG != "HSCLK0_RPLLSOUTHREFCLK0") &&
         (CH1_TXOUTCLK_REF_SOURCE_REG != "HSCLK0_RPLLSOUTHREFCLK1") &&
         (CH1_TXOUTCLK_REF_SOURCE_REG != "HSCLK1_LCPLLGTGREFCLK") &&
         (CH1_TXOUTCLK_REF_SOURCE_REG != "HSCLK1_LCPLLGTREFCLK0") &&
         (CH1_TXOUTCLK_REF_SOURCE_REG != "HSCLK1_LCPLLGTREFCLK1") &&
         (CH1_TXOUTCLK_REF_SOURCE_REG != "HSCLK1_LCPLLNORTHREFCLK0") &&
         (CH1_TXOUTCLK_REF_SOURCE_REG != "HSCLK1_LCPLLNORTHREFCLK1") &&
         (CH1_TXOUTCLK_REF_SOURCE_REG != "HSCLK1_LCPLLSOUTHREFCLK0") &&
         (CH1_TXOUTCLK_REF_SOURCE_REG != "HSCLK1_LCPLLSOUTHREFCLK1") &&
         (CH1_TXOUTCLK_REF_SOURCE_REG != "HSCLK1_RPLLGTGREFCLK") &&
         (CH1_TXOUTCLK_REF_SOURCE_REG != "HSCLK1_RPLLGTREFCLK0") &&
         (CH1_TXOUTCLK_REF_SOURCE_REG != "HSCLK1_RPLLGTREFCLK1") &&
         (CH1_TXOUTCLK_REF_SOURCE_REG != "HSCLK1_RPLLNORTHREFCLK0") &&
         (CH1_TXOUTCLK_REF_SOURCE_REG != "HSCLK1_RPLLNORTHREFCLK1") &&
         (CH1_TXOUTCLK_REF_SOURCE_REG != "HSCLK1_RPLLSOUTHREFCLK0") &&
         (CH1_TXOUTCLK_REF_SOURCE_REG != "HSCLK1_RPLLSOUTHREFCLK1"))) begin
      $display("Error: [Unisim %s-426] CH1_TXOUTCLK_REF_SOURCE attribute is set to %s.  Legal values for this attribute are HSCLK0_LCPLLGTGREFCLK, HSCLK0_LCPLLGTREFCLK0, HSCLK0_LCPLLGTREFCLK1, HSCLK0_LCPLLNORTHREFCLK0, HSCLK0_LCPLLNORTHREFCLK1, HSCLK0_LCPLLSOUTHREFCLK0, HSCLK0_LCPLLSOUTHREFCLK1, HSCLK0_RPLLGTGREFCLK, HSCLK0_RPLLGTREFCLK0, HSCLK0_RPLLGTREFCLK1, HSCLK0_RPLLNORTHREFCLK0, HSCLK0_RPLLNORTHREFCLK1, HSCLK0_RPLLSOUTHREFCLK0, HSCLK0_RPLLSOUTHREFCLK1, HSCLK1_LCPLLGTGREFCLK, HSCLK1_LCPLLGTREFCLK0, HSCLK1_LCPLLGTREFCLK1, HSCLK1_LCPLLNORTHREFCLK0, HSCLK1_LCPLLNORTHREFCLK1, HSCLK1_LCPLLSOUTHREFCLK0, HSCLK1_LCPLLSOUTHREFCLK1, HSCLK1_RPLLGTGREFCLK, HSCLK1_RPLLGTREFCLK0, HSCLK1_RPLLGTREFCLK1, HSCLK1_RPLLNORTHREFCLK0, HSCLK1_RPLLNORTHREFCLK1, HSCLK1_RPLLSOUTHREFCLK0 or HSCLK1_RPLLSOUTHREFCLK1. Instance: %m", MODULE_NAME, CH1_TXOUTCLK_REF_SOURCE_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        (CH1_TX_DATA_RATE_REG < 0.50 || CH1_TX_DATA_RATE_REG > 32.75)) begin
      $display("Error: [Unisim %s-436] CH1_TX_DATA_RATE attribute is set to %f.  Legal values for this attribute are 0.50 to 32.75. Instance: %m", MODULE_NAME, CH1_TX_DATA_RATE_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        (CH2_RXOUTCLK_FREQ_REG < 0.0000001 || CH2_RXOUTCLK_FREQ_REG > 1000.0000000)) begin
      $display("Error: [Unisim %s-549] CH2_RXOUTCLK_FREQ attribute is set to %f.  Legal values for this attribute are 0.0000001 to 1000.0000000. Instance: %m", MODULE_NAME, CH2_RXOUTCLK_FREQ_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        (CH2_RXOUTCLK_REF_FREQ_REG < 60.0000000 || CH2_RXOUTCLK_REF_FREQ_REG > 820.0000000)) begin
      $display("Error: [Unisim %s-550] CH2_RXOUTCLK_REF_FREQ attribute is set to %f.  Legal values for this attribute are 60.0000000 to 820.0000000. Instance: %m", MODULE_NAME, CH2_RXOUTCLK_REF_FREQ_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((CH2_RXOUTCLK_REF_SOURCE_REG != "HSCLK0_LCPLLGTGREFCLK") &&
         (CH2_RXOUTCLK_REF_SOURCE_REG != "HSCLK0_LCPLLGTREFCLK0") &&
         (CH2_RXOUTCLK_REF_SOURCE_REG != "HSCLK0_LCPLLGTREFCLK1") &&
         (CH2_RXOUTCLK_REF_SOURCE_REG != "HSCLK0_LCPLLNORTHREFCLK0") &&
         (CH2_RXOUTCLK_REF_SOURCE_REG != "HSCLK0_LCPLLNORTHREFCLK1") &&
         (CH2_RXOUTCLK_REF_SOURCE_REG != "HSCLK0_LCPLLSOUTHREFCLK0") &&
         (CH2_RXOUTCLK_REF_SOURCE_REG != "HSCLK0_LCPLLSOUTHREFCLK1") &&
         (CH2_RXOUTCLK_REF_SOURCE_REG != "HSCLK0_RPLLGTGREFCLK") &&
         (CH2_RXOUTCLK_REF_SOURCE_REG != "HSCLK0_RPLLGTREFCLK0") &&
         (CH2_RXOUTCLK_REF_SOURCE_REG != "HSCLK0_RPLLGTREFCLK1") &&
         (CH2_RXOUTCLK_REF_SOURCE_REG != "HSCLK0_RPLLNORTHREFCLK0") &&
         (CH2_RXOUTCLK_REF_SOURCE_REG != "HSCLK0_RPLLNORTHREFCLK1") &&
         (CH2_RXOUTCLK_REF_SOURCE_REG != "HSCLK0_RPLLSOUTHREFCLK0") &&
         (CH2_RXOUTCLK_REF_SOURCE_REG != "HSCLK0_RPLLSOUTHREFCLK1") &&
         (CH2_RXOUTCLK_REF_SOURCE_REG != "HSCLK1_LCPLLGTGREFCLK") &&
         (CH2_RXOUTCLK_REF_SOURCE_REG != "HSCLK1_LCPLLGTREFCLK0") &&
         (CH2_RXOUTCLK_REF_SOURCE_REG != "HSCLK1_LCPLLGTREFCLK1") &&
         (CH2_RXOUTCLK_REF_SOURCE_REG != "HSCLK1_LCPLLNORTHREFCLK0") &&
         (CH2_RXOUTCLK_REF_SOURCE_REG != "HSCLK1_LCPLLNORTHREFCLK1") &&
         (CH2_RXOUTCLK_REF_SOURCE_REG != "HSCLK1_LCPLLSOUTHREFCLK0") &&
         (CH2_RXOUTCLK_REF_SOURCE_REG != "HSCLK1_LCPLLSOUTHREFCLK1") &&
         (CH2_RXOUTCLK_REF_SOURCE_REG != "HSCLK1_RPLLGTGREFCLK") &&
         (CH2_RXOUTCLK_REF_SOURCE_REG != "HSCLK1_RPLLGTREFCLK0") &&
         (CH2_RXOUTCLK_REF_SOURCE_REG != "HSCLK1_RPLLGTREFCLK1") &&
         (CH2_RXOUTCLK_REF_SOURCE_REG != "HSCLK1_RPLLNORTHREFCLK0") &&
         (CH2_RXOUTCLK_REF_SOURCE_REG != "HSCLK1_RPLLNORTHREFCLK1") &&
         (CH2_RXOUTCLK_REF_SOURCE_REG != "HSCLK1_RPLLSOUTHREFCLK0") &&
         (CH2_RXOUTCLK_REF_SOURCE_REG != "HSCLK1_RPLLSOUTHREFCLK1"))) begin
      $display("Error: [Unisim %s-551] CH2_RXOUTCLK_REF_SOURCE attribute is set to %s.  Legal values for this attribute are HSCLK0_LCPLLGTGREFCLK, HSCLK0_LCPLLGTREFCLK0, HSCLK0_LCPLLGTREFCLK1, HSCLK0_LCPLLNORTHREFCLK0, HSCLK0_LCPLLNORTHREFCLK1, HSCLK0_LCPLLSOUTHREFCLK0, HSCLK0_LCPLLSOUTHREFCLK1, HSCLK0_RPLLGTGREFCLK, HSCLK0_RPLLGTREFCLK0, HSCLK0_RPLLGTREFCLK1, HSCLK0_RPLLNORTHREFCLK0, HSCLK0_RPLLNORTHREFCLK1, HSCLK0_RPLLSOUTHREFCLK0, HSCLK0_RPLLSOUTHREFCLK1, HSCLK1_LCPLLGTGREFCLK, HSCLK1_LCPLLGTREFCLK0, HSCLK1_LCPLLGTREFCLK1, HSCLK1_LCPLLNORTHREFCLK0, HSCLK1_LCPLLNORTHREFCLK1, HSCLK1_LCPLLSOUTHREFCLK0, HSCLK1_LCPLLSOUTHREFCLK1, HSCLK1_RPLLGTGREFCLK, HSCLK1_RPLLGTREFCLK0, HSCLK1_RPLLGTREFCLK1, HSCLK1_RPLLNORTHREFCLK0, HSCLK1_RPLLNORTHREFCLK1, HSCLK1_RPLLSOUTHREFCLK0 or HSCLK1_RPLLSOUTHREFCLK1. Instance: %m", MODULE_NAME, CH2_RXOUTCLK_REF_SOURCE_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        (CH2_RX_DATA_RATE_REG < 0.50 || CH2_RX_DATA_RATE_REG > 32.75)) begin
      $display("Error: [Unisim %s-564] CH2_RX_DATA_RATE attribute is set to %f.  Legal values for this attribute are 0.50 to 32.75. Instance: %m", MODULE_NAME, CH2_RX_DATA_RATE_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((CH2_SIM_MODE_REG != "FAST") &&
         (CH2_SIM_MODE_REG != "LEGACY"))) begin
      $display("Error: [Unisim %s-592] CH2_SIM_MODE attribute is set to %s.  Legal values for this attribute are FAST or LEGACY. Instance: %m", MODULE_NAME, CH2_SIM_MODE_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((CH2_SIM_RECEIVER_DETECT_PASS_REG != "TRUE") &&
         (CH2_SIM_RECEIVER_DETECT_PASS_REG != "FALSE"))) begin
      $display("Error: [Unisim %s-593] CH2_SIM_RECEIVER_DETECT_PASS attribute is set to %s.  Legal values for this attribute are TRUE or FALSE. Instance: %m", MODULE_NAME, CH2_SIM_RECEIVER_DETECT_PASS_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((CH2_SIM_RESET_SPEEDUP_REG != "TRUE") &&
         (CH2_SIM_RESET_SPEEDUP_REG != "FALSE"))) begin
      $display("Error: [Unisim %s-594] CH2_SIM_RESET_SPEEDUP attribute is set to %s.  Legal values for this attribute are TRUE or FALSE. Instance: %m", MODULE_NAME, CH2_SIM_RESET_SPEEDUP_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((CH2_SIM_TX_EIDLE_DRIVE_LEVEL_REG != "Z") &&
         (CH2_SIM_TX_EIDLE_DRIVE_LEVEL_REG != "HIGH") &&
         (CH2_SIM_TX_EIDLE_DRIVE_LEVEL_REG != "LOW") &&
         (CH2_SIM_TX_EIDLE_DRIVE_LEVEL_REG != "X"))) begin
      $display("Error: [Unisim %s-595] CH2_SIM_TX_EIDLE_DRIVE_LEVEL attribute is set to %s.  Legal values for this attribute are Z, HIGH, LOW or X. Instance: %m", MODULE_NAME, CH2_SIM_TX_EIDLE_DRIVE_LEVEL_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        (CH2_TXOUTCLK_FREQ_REG < 0.0000001 || CH2_TXOUTCLK_FREQ_REG > 1000.0000000)) begin
      $display("Error: [Unisim %s-596] CH2_TXOUTCLK_FREQ attribute is set to %f.  Legal values for this attribute are 0.0000001 to 1000.0000000. Instance: %m", MODULE_NAME, CH2_TXOUTCLK_FREQ_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        (CH2_TXOUTCLK_REF_FREQ_REG < 60.0000000 || CH2_TXOUTCLK_REF_FREQ_REG > 820.0000000)) begin
      $display("Error: [Unisim %s-597] CH2_TXOUTCLK_REF_FREQ attribute is set to %f.  Legal values for this attribute are 60.0000000 to 820.0000000. Instance: %m", MODULE_NAME, CH2_TXOUTCLK_REF_FREQ_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((CH2_TXOUTCLK_REF_SOURCE_REG != "HSCLK0_LCPLLGTGREFCLK") &&
         (CH2_TXOUTCLK_REF_SOURCE_REG != "HSCLK0_LCPLLGTREFCLK0") &&
         (CH2_TXOUTCLK_REF_SOURCE_REG != "HSCLK0_LCPLLGTREFCLK1") &&
         (CH2_TXOUTCLK_REF_SOURCE_REG != "HSCLK0_LCPLLNORTHREFCLK0") &&
         (CH2_TXOUTCLK_REF_SOURCE_REG != "HSCLK0_LCPLLNORTHREFCLK1") &&
         (CH2_TXOUTCLK_REF_SOURCE_REG != "HSCLK0_LCPLLSOUTHREFCLK0") &&
         (CH2_TXOUTCLK_REF_SOURCE_REG != "HSCLK0_LCPLLSOUTHREFCLK1") &&
         (CH2_TXOUTCLK_REF_SOURCE_REG != "HSCLK0_RPLLGTGREFCLK") &&
         (CH2_TXOUTCLK_REF_SOURCE_REG != "HSCLK0_RPLLGTREFCLK0") &&
         (CH2_TXOUTCLK_REF_SOURCE_REG != "HSCLK0_RPLLGTREFCLK1") &&
         (CH2_TXOUTCLK_REF_SOURCE_REG != "HSCLK0_RPLLNORTHREFCLK0") &&
         (CH2_TXOUTCLK_REF_SOURCE_REG != "HSCLK0_RPLLNORTHREFCLK1") &&
         (CH2_TXOUTCLK_REF_SOURCE_REG != "HSCLK0_RPLLSOUTHREFCLK0") &&
         (CH2_TXOUTCLK_REF_SOURCE_REG != "HSCLK0_RPLLSOUTHREFCLK1") &&
         (CH2_TXOUTCLK_REF_SOURCE_REG != "HSCLK1_LCPLLGTGREFCLK") &&
         (CH2_TXOUTCLK_REF_SOURCE_REG != "HSCLK1_LCPLLGTREFCLK0") &&
         (CH2_TXOUTCLK_REF_SOURCE_REG != "HSCLK1_LCPLLGTREFCLK1") &&
         (CH2_TXOUTCLK_REF_SOURCE_REG != "HSCLK1_LCPLLNORTHREFCLK0") &&
         (CH2_TXOUTCLK_REF_SOURCE_REG != "HSCLK1_LCPLLNORTHREFCLK1") &&
         (CH2_TXOUTCLK_REF_SOURCE_REG != "HSCLK1_LCPLLSOUTHREFCLK0") &&
         (CH2_TXOUTCLK_REF_SOURCE_REG != "HSCLK1_LCPLLSOUTHREFCLK1") &&
         (CH2_TXOUTCLK_REF_SOURCE_REG != "HSCLK1_RPLLGTGREFCLK") &&
         (CH2_TXOUTCLK_REF_SOURCE_REG != "HSCLK1_RPLLGTREFCLK0") &&
         (CH2_TXOUTCLK_REF_SOURCE_REG != "HSCLK1_RPLLGTREFCLK1") &&
         (CH2_TXOUTCLK_REF_SOURCE_REG != "HSCLK1_RPLLNORTHREFCLK0") &&
         (CH2_TXOUTCLK_REF_SOURCE_REG != "HSCLK1_RPLLNORTHREFCLK1") &&
         (CH2_TXOUTCLK_REF_SOURCE_REG != "HSCLK1_RPLLSOUTHREFCLK0") &&
         (CH2_TXOUTCLK_REF_SOURCE_REG != "HSCLK1_RPLLSOUTHREFCLK1"))) begin
      $display("Error: [Unisim %s-598] CH2_TXOUTCLK_REF_SOURCE attribute is set to %s.  Legal values for this attribute are HSCLK0_LCPLLGTGREFCLK, HSCLK0_LCPLLGTREFCLK0, HSCLK0_LCPLLGTREFCLK1, HSCLK0_LCPLLNORTHREFCLK0, HSCLK0_LCPLLNORTHREFCLK1, HSCLK0_LCPLLSOUTHREFCLK0, HSCLK0_LCPLLSOUTHREFCLK1, HSCLK0_RPLLGTGREFCLK, HSCLK0_RPLLGTREFCLK0, HSCLK0_RPLLGTREFCLK1, HSCLK0_RPLLNORTHREFCLK0, HSCLK0_RPLLNORTHREFCLK1, HSCLK0_RPLLSOUTHREFCLK0, HSCLK0_RPLLSOUTHREFCLK1, HSCLK1_LCPLLGTGREFCLK, HSCLK1_LCPLLGTREFCLK0, HSCLK1_LCPLLGTREFCLK1, HSCLK1_LCPLLNORTHREFCLK0, HSCLK1_LCPLLNORTHREFCLK1, HSCLK1_LCPLLSOUTHREFCLK0, HSCLK1_LCPLLSOUTHREFCLK1, HSCLK1_RPLLGTGREFCLK, HSCLK1_RPLLGTREFCLK0, HSCLK1_RPLLGTREFCLK1, HSCLK1_RPLLNORTHREFCLK0, HSCLK1_RPLLNORTHREFCLK1, HSCLK1_RPLLSOUTHREFCLK0 or HSCLK1_RPLLSOUTHREFCLK1. Instance: %m", MODULE_NAME, CH2_TXOUTCLK_REF_SOURCE_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        (CH2_TX_DATA_RATE_REG < 0.50 || CH2_TX_DATA_RATE_REG > 32.75)) begin
      $display("Error: [Unisim %s-608] CH2_TX_DATA_RATE attribute is set to %f.  Legal values for this attribute are 0.50 to 32.75. Instance: %m", MODULE_NAME, CH2_TX_DATA_RATE_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        (CH3_RXOUTCLK_FREQ_REG < 0.0000001 || CH3_RXOUTCLK_FREQ_REG > 1000.0000000)) begin
      $display("Error: [Unisim %s-721] CH3_RXOUTCLK_FREQ attribute is set to %f.  Legal values for this attribute are 0.0000001 to 1000.0000000. Instance: %m", MODULE_NAME, CH3_RXOUTCLK_FREQ_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        (CH3_RXOUTCLK_REF_FREQ_REG < 60.0000000 || CH3_RXOUTCLK_REF_FREQ_REG > 820.0000000)) begin
      $display("Error: [Unisim %s-722] CH3_RXOUTCLK_REF_FREQ attribute is set to %f.  Legal values for this attribute are 60.0000000 to 820.0000000. Instance: %m", MODULE_NAME, CH3_RXOUTCLK_REF_FREQ_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((CH3_RXOUTCLK_REF_SOURCE_REG != "HSCLK0_LCPLLGTGREFCLK") &&
         (CH3_RXOUTCLK_REF_SOURCE_REG != "HSCLK0_LCPLLGTREFCLK0") &&
         (CH3_RXOUTCLK_REF_SOURCE_REG != "HSCLK0_LCPLLGTREFCLK1") &&
         (CH3_RXOUTCLK_REF_SOURCE_REG != "HSCLK0_LCPLLNORTHREFCLK0") &&
         (CH3_RXOUTCLK_REF_SOURCE_REG != "HSCLK0_LCPLLNORTHREFCLK1") &&
         (CH3_RXOUTCLK_REF_SOURCE_REG != "HSCLK0_LCPLLSOUTHREFCLK0") &&
         (CH3_RXOUTCLK_REF_SOURCE_REG != "HSCLK0_LCPLLSOUTHREFCLK1") &&
         (CH3_RXOUTCLK_REF_SOURCE_REG != "HSCLK0_RPLLGTGREFCLK") &&
         (CH3_RXOUTCLK_REF_SOURCE_REG != "HSCLK0_RPLLGTREFCLK0") &&
         (CH3_RXOUTCLK_REF_SOURCE_REG != "HSCLK0_RPLLGTREFCLK1") &&
         (CH3_RXOUTCLK_REF_SOURCE_REG != "HSCLK0_RPLLNORTHREFCLK0") &&
         (CH3_RXOUTCLK_REF_SOURCE_REG != "HSCLK0_RPLLNORTHREFCLK1") &&
         (CH3_RXOUTCLK_REF_SOURCE_REG != "HSCLK0_RPLLSOUTHREFCLK0") &&
         (CH3_RXOUTCLK_REF_SOURCE_REG != "HSCLK0_RPLLSOUTHREFCLK1") &&
         (CH3_RXOUTCLK_REF_SOURCE_REG != "HSCLK1_LCPLLGTGREFCLK") &&
         (CH3_RXOUTCLK_REF_SOURCE_REG != "HSCLK1_LCPLLGTREFCLK0") &&
         (CH3_RXOUTCLK_REF_SOURCE_REG != "HSCLK1_LCPLLGTREFCLK1") &&
         (CH3_RXOUTCLK_REF_SOURCE_REG != "HSCLK1_LCPLLNORTHREFCLK0") &&
         (CH3_RXOUTCLK_REF_SOURCE_REG != "HSCLK1_LCPLLNORTHREFCLK1") &&
         (CH3_RXOUTCLK_REF_SOURCE_REG != "HSCLK1_LCPLLSOUTHREFCLK0") &&
         (CH3_RXOUTCLK_REF_SOURCE_REG != "HSCLK1_LCPLLSOUTHREFCLK1") &&
         (CH3_RXOUTCLK_REF_SOURCE_REG != "HSCLK1_RPLLGTGREFCLK") &&
         (CH3_RXOUTCLK_REF_SOURCE_REG != "HSCLK1_RPLLGTREFCLK0") &&
         (CH3_RXOUTCLK_REF_SOURCE_REG != "HSCLK1_RPLLGTREFCLK1") &&
         (CH3_RXOUTCLK_REF_SOURCE_REG != "HSCLK1_RPLLNORTHREFCLK0") &&
         (CH3_RXOUTCLK_REF_SOURCE_REG != "HSCLK1_RPLLNORTHREFCLK1") &&
         (CH3_RXOUTCLK_REF_SOURCE_REG != "HSCLK1_RPLLSOUTHREFCLK0") &&
         (CH3_RXOUTCLK_REF_SOURCE_REG != "HSCLK1_RPLLSOUTHREFCLK1"))) begin
      $display("Error: [Unisim %s-723] CH3_RXOUTCLK_REF_SOURCE attribute is set to %s.  Legal values for this attribute are HSCLK0_LCPLLGTGREFCLK, HSCLK0_LCPLLGTREFCLK0, HSCLK0_LCPLLGTREFCLK1, HSCLK0_LCPLLNORTHREFCLK0, HSCLK0_LCPLLNORTHREFCLK1, HSCLK0_LCPLLSOUTHREFCLK0, HSCLK0_LCPLLSOUTHREFCLK1, HSCLK0_RPLLGTGREFCLK, HSCLK0_RPLLGTREFCLK0, HSCLK0_RPLLGTREFCLK1, HSCLK0_RPLLNORTHREFCLK0, HSCLK0_RPLLNORTHREFCLK1, HSCLK0_RPLLSOUTHREFCLK0, HSCLK0_RPLLSOUTHREFCLK1, HSCLK1_LCPLLGTGREFCLK, HSCLK1_LCPLLGTREFCLK0, HSCLK1_LCPLLGTREFCLK1, HSCLK1_LCPLLNORTHREFCLK0, HSCLK1_LCPLLNORTHREFCLK1, HSCLK1_LCPLLSOUTHREFCLK0, HSCLK1_LCPLLSOUTHREFCLK1, HSCLK1_RPLLGTGREFCLK, HSCLK1_RPLLGTREFCLK0, HSCLK1_RPLLGTREFCLK1, HSCLK1_RPLLNORTHREFCLK0, HSCLK1_RPLLNORTHREFCLK1, HSCLK1_RPLLSOUTHREFCLK0 or HSCLK1_RPLLSOUTHREFCLK1. Instance: %m", MODULE_NAME, CH3_RXOUTCLK_REF_SOURCE_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        (CH3_RX_DATA_RATE_REG < 0.50 || CH3_RX_DATA_RATE_REG > 32.75)) begin
      $display("Error: [Unisim %s-736] CH3_RX_DATA_RATE attribute is set to %f.  Legal values for this attribute are 0.50 to 32.75. Instance: %m", MODULE_NAME, CH3_RX_DATA_RATE_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((CH3_SIM_MODE_REG != "FAST") &&
         (CH3_SIM_MODE_REG != "LEGACY"))) begin
      $display("Error: [Unisim %s-764] CH3_SIM_MODE attribute is set to %s.  Legal values for this attribute are FAST or LEGACY. Instance: %m", MODULE_NAME, CH3_SIM_MODE_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((CH3_SIM_RECEIVER_DETECT_PASS_REG != "TRUE") &&
         (CH3_SIM_RECEIVER_DETECT_PASS_REG != "FALSE"))) begin
      $display("Error: [Unisim %s-765] CH3_SIM_RECEIVER_DETECT_PASS attribute is set to %s.  Legal values for this attribute are TRUE or FALSE. Instance: %m", MODULE_NAME, CH3_SIM_RECEIVER_DETECT_PASS_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((CH3_SIM_RESET_SPEEDUP_REG != "TRUE") &&
         (CH3_SIM_RESET_SPEEDUP_REG != "FALSE"))) begin
      $display("Error: [Unisim %s-766] CH3_SIM_RESET_SPEEDUP attribute is set to %s.  Legal values for this attribute are TRUE or FALSE. Instance: %m", MODULE_NAME, CH3_SIM_RESET_SPEEDUP_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((CH3_SIM_TX_EIDLE_DRIVE_LEVEL_REG != "Z") &&
         (CH3_SIM_TX_EIDLE_DRIVE_LEVEL_REG != "HIGH") &&
         (CH3_SIM_TX_EIDLE_DRIVE_LEVEL_REG != "LOW") &&
         (CH3_SIM_TX_EIDLE_DRIVE_LEVEL_REG != "X"))) begin
      $display("Error: [Unisim %s-767] CH3_SIM_TX_EIDLE_DRIVE_LEVEL attribute is set to %s.  Legal values for this attribute are Z, HIGH, LOW or X. Instance: %m", MODULE_NAME, CH3_SIM_TX_EIDLE_DRIVE_LEVEL_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        (CH3_TXOUTCLK_FREQ_REG < 0.0000001 || CH3_TXOUTCLK_FREQ_REG > 1000.0000000)) begin
      $display("Error: [Unisim %s-768] CH3_TXOUTCLK_FREQ attribute is set to %f.  Legal values for this attribute are 0.0000001 to 1000.0000000. Instance: %m", MODULE_NAME, CH3_TXOUTCLK_FREQ_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        (CH3_TXOUTCLK_REF_FREQ_REG < 60.0000000 || CH3_TXOUTCLK_REF_FREQ_REG > 820.0000000)) begin
      $display("Error: [Unisim %s-769] CH3_TXOUTCLK_REF_FREQ attribute is set to %f.  Legal values for this attribute are 60.0000000 to 820.0000000. Instance: %m", MODULE_NAME, CH3_TXOUTCLK_REF_FREQ_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((CH3_TXOUTCLK_REF_SOURCE_REG != "HSCLK0_LCPLLGTGREFCLK") &&
         (CH3_TXOUTCLK_REF_SOURCE_REG != "HSCLK0_LCPLLGTREFCLK0") &&
         (CH3_TXOUTCLK_REF_SOURCE_REG != "HSCLK0_LCPLLGTREFCLK1") &&
         (CH3_TXOUTCLK_REF_SOURCE_REG != "HSCLK0_LCPLLNORTHREFCLK0") &&
         (CH3_TXOUTCLK_REF_SOURCE_REG != "HSCLK0_LCPLLNORTHREFCLK1") &&
         (CH3_TXOUTCLK_REF_SOURCE_REG != "HSCLK0_LCPLLSOUTHREFCLK0") &&
         (CH3_TXOUTCLK_REF_SOURCE_REG != "HSCLK0_LCPLLSOUTHREFCLK1") &&
         (CH3_TXOUTCLK_REF_SOURCE_REG != "HSCLK0_RPLLGTGREFCLK") &&
         (CH3_TXOUTCLK_REF_SOURCE_REG != "HSCLK0_RPLLGTREFCLK0") &&
         (CH3_TXOUTCLK_REF_SOURCE_REG != "HSCLK0_RPLLGTREFCLK1") &&
         (CH3_TXOUTCLK_REF_SOURCE_REG != "HSCLK0_RPLLNORTHREFCLK0") &&
         (CH3_TXOUTCLK_REF_SOURCE_REG != "HSCLK0_RPLLNORTHREFCLK1") &&
         (CH3_TXOUTCLK_REF_SOURCE_REG != "HSCLK0_RPLLSOUTHREFCLK0") &&
         (CH3_TXOUTCLK_REF_SOURCE_REG != "HSCLK0_RPLLSOUTHREFCLK1") &&
         (CH3_TXOUTCLK_REF_SOURCE_REG != "HSCLK1_LCPLLGTGREFCLK") &&
         (CH3_TXOUTCLK_REF_SOURCE_REG != "HSCLK1_LCPLLGTREFCLK0") &&
         (CH3_TXOUTCLK_REF_SOURCE_REG != "HSCLK1_LCPLLGTREFCLK1") &&
         (CH3_TXOUTCLK_REF_SOURCE_REG != "HSCLK1_LCPLLNORTHREFCLK0") &&
         (CH3_TXOUTCLK_REF_SOURCE_REG != "HSCLK1_LCPLLNORTHREFCLK1") &&
         (CH3_TXOUTCLK_REF_SOURCE_REG != "HSCLK1_LCPLLSOUTHREFCLK0") &&
         (CH3_TXOUTCLK_REF_SOURCE_REG != "HSCLK1_LCPLLSOUTHREFCLK1") &&
         (CH3_TXOUTCLK_REF_SOURCE_REG != "HSCLK1_RPLLGTGREFCLK") &&
         (CH3_TXOUTCLK_REF_SOURCE_REG != "HSCLK1_RPLLGTREFCLK0") &&
         (CH3_TXOUTCLK_REF_SOURCE_REG != "HSCLK1_RPLLGTREFCLK1") &&
         (CH3_TXOUTCLK_REF_SOURCE_REG != "HSCLK1_RPLLNORTHREFCLK0") &&
         (CH3_TXOUTCLK_REF_SOURCE_REG != "HSCLK1_RPLLNORTHREFCLK1") &&
         (CH3_TXOUTCLK_REF_SOURCE_REG != "HSCLK1_RPLLSOUTHREFCLK0") &&
         (CH3_TXOUTCLK_REF_SOURCE_REG != "HSCLK1_RPLLSOUTHREFCLK1"))) begin
      $display("Error: [Unisim %s-770] CH3_TXOUTCLK_REF_SOURCE attribute is set to %s.  Legal values for this attribute are HSCLK0_LCPLLGTGREFCLK, HSCLK0_LCPLLGTREFCLK0, HSCLK0_LCPLLGTREFCLK1, HSCLK0_LCPLLNORTHREFCLK0, HSCLK0_LCPLLNORTHREFCLK1, HSCLK0_LCPLLSOUTHREFCLK0, HSCLK0_LCPLLSOUTHREFCLK1, HSCLK0_RPLLGTGREFCLK, HSCLK0_RPLLGTREFCLK0, HSCLK0_RPLLGTREFCLK1, HSCLK0_RPLLNORTHREFCLK0, HSCLK0_RPLLNORTHREFCLK1, HSCLK0_RPLLSOUTHREFCLK0, HSCLK0_RPLLSOUTHREFCLK1, HSCLK1_LCPLLGTGREFCLK, HSCLK1_LCPLLGTREFCLK0, HSCLK1_LCPLLGTREFCLK1, HSCLK1_LCPLLNORTHREFCLK0, HSCLK1_LCPLLNORTHREFCLK1, HSCLK1_LCPLLSOUTHREFCLK0, HSCLK1_LCPLLSOUTHREFCLK1, HSCLK1_RPLLGTGREFCLK, HSCLK1_RPLLGTREFCLK0, HSCLK1_RPLLGTREFCLK1, HSCLK1_RPLLNORTHREFCLK0, HSCLK1_RPLLNORTHREFCLK1, HSCLK1_RPLLSOUTHREFCLK0 or HSCLK1_RPLLSOUTHREFCLK1. Instance: %m", MODULE_NAME, CH3_TXOUTCLK_REF_SOURCE_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        (CH3_TX_DATA_RATE_REG < 0.50 || CH3_TX_DATA_RATE_REG > 32.75)) begin
      $display("Error: [Unisim %s-780] CH3_TX_DATA_RATE attribute is set to %f.  Legal values for this attribute are 0.50 to 32.75. Instance: %m", MODULE_NAME, CH3_TX_DATA_RATE_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((HS0_LCPLL_IPS_REFCLK_SEL_REG != 0) &&
         (HS0_LCPLL_IPS_REFCLK_SEL_REG != 1) &&
         (HS0_LCPLL_IPS_REFCLK_SEL_REG != 2) &&
         (HS0_LCPLL_IPS_REFCLK_SEL_REG != 3) &&
         (HS0_LCPLL_IPS_REFCLK_SEL_REG != 4) &&
         (HS0_LCPLL_IPS_REFCLK_SEL_REG != 5) &&
         (HS0_LCPLL_IPS_REFCLK_SEL_REG != 6) &&
         (HS0_LCPLL_IPS_REFCLK_SEL_REG != 7))) begin
      $display("Error: [Unisim %s-799] HS0_LCPLL_IPS_REFCLK_SEL attribute is set to %d.  Legal values for this attribute are 0, 1, 2, 3, 4, 5, 6 or 7. Instance: %m", MODULE_NAME, HS0_LCPLL_IPS_REFCLK_SEL_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((HS0_RPLL_IPS_REFCLK_SEL_REG != 0) &&
         (HS0_RPLL_IPS_REFCLK_SEL_REG != 1) &&
         (HS0_RPLL_IPS_REFCLK_SEL_REG != 2) &&
         (HS0_RPLL_IPS_REFCLK_SEL_REG != 3) &&
         (HS0_RPLL_IPS_REFCLK_SEL_REG != 4) &&
         (HS0_RPLL_IPS_REFCLK_SEL_REG != 5) &&
         (HS0_RPLL_IPS_REFCLK_SEL_REG != 6) &&
         (HS0_RPLL_IPS_REFCLK_SEL_REG != 7))) begin
      $display("Error: [Unisim %s-809] HS0_RPLL_IPS_REFCLK_SEL attribute is set to %d.  Legal values for this attribute are 0, 1, 2, 3, 4, 5, 6 or 7. Instance: %m", MODULE_NAME, HS0_RPLL_IPS_REFCLK_SEL_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((HS1_LCPLL_IPS_REFCLK_SEL_REG != 0) &&
         (HS1_LCPLL_IPS_REFCLK_SEL_REG != 1) &&
         (HS1_LCPLL_IPS_REFCLK_SEL_REG != 2) &&
         (HS1_LCPLL_IPS_REFCLK_SEL_REG != 3) &&
         (HS1_LCPLL_IPS_REFCLK_SEL_REG != 4) &&
         (HS1_LCPLL_IPS_REFCLK_SEL_REG != 5) &&
         (HS1_LCPLL_IPS_REFCLK_SEL_REG != 6) &&
         (HS1_LCPLL_IPS_REFCLK_SEL_REG != 7))) begin
      $display("Error: [Unisim %s-819] HS1_LCPLL_IPS_REFCLK_SEL attribute is set to %d.  Legal values for this attribute are 0, 1, 2, 3, 4, 5, 6 or 7. Instance: %m", MODULE_NAME, HS1_LCPLL_IPS_REFCLK_SEL_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((HS1_RPLL_IPS_REFCLK_SEL_REG != 0) &&
         (HS1_RPLL_IPS_REFCLK_SEL_REG != 1) &&
         (HS1_RPLL_IPS_REFCLK_SEL_REG != 2) &&
         (HS1_RPLL_IPS_REFCLK_SEL_REG != 3) &&
         (HS1_RPLL_IPS_REFCLK_SEL_REG != 4) &&
         (HS1_RPLL_IPS_REFCLK_SEL_REG != 5) &&
         (HS1_RPLL_IPS_REFCLK_SEL_REG != 6) &&
         (HS1_RPLL_IPS_REFCLK_SEL_REG != 7))) begin
      $display("Error: [Unisim %s-829] HS1_RPLL_IPS_REFCLK_SEL attribute is set to %d.  Legal values for this attribute are 0, 1, 2, 3, 4, 5, 6 or 7. Instance: %m", MODULE_NAME, HS1_RPLL_IPS_REFCLK_SEL_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((QUAD_SIM_MODE_REG != "FAST") &&
         (QUAD_SIM_MODE_REG != "LEGACY"))) begin
      $display("Error: [Unisim %s-873] QUAD_SIM_MODE attribute is set to %s.  Legal values for this attribute are FAST or LEGACY. Instance: %m", MODULE_NAME, QUAD_SIM_MODE_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((QUAD_SIM_RESET_SPEEDUP_REG != "TRUE") &&
         (QUAD_SIM_RESET_SPEEDUP_REG != "FALSE"))) begin
      $display("Error: [Unisim %s-874] QUAD_SIM_RESET_SPEEDUP attribute is set to %s.  Legal values for this attribute are TRUE or FALSE. Instance: %m", MODULE_NAME, QUAD_SIM_RESET_SPEEDUP_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((SIM_VERSION_REG != 1) &&
         (SIM_VERSION_REG != 2) &&
         (SIM_VERSION_REG != 3))) begin
      $display("Error: [Unisim %s-888] SIM_VERSION attribute is set to %d.  Legal values for this attribute are 1, 2 or 3. Instance: %m", MODULE_NAME, SIM_VERSION_REG);
      attr_err = 1'b1;
    end
    
    if (attr_err == 1'b1) #1 $finish;
  end
`endif


assign CH0_SCANCLKB_in = 1'b1; // tie off
assign CH1_SCANCLKB_in = 1'b1; // tie off
assign CH2_SCANCLKB_in = 1'b1; // tie off
assign CH3_SCANCLKB_in = 1'b1; // tie off
assign SCANCLKB_in = 1'b1; // tie off

assign CH0_BSR_SERIAL_in = 1'b1; // tie off
assign CH0_CSSDSTOPCLK_in = 1'b1; // tie off
assign CH0_EDTUPDATEB_in = 1'b1; // tie off
assign CH0_SCANCNTRLIN_in = 1'b1; // tie off
assign CH0_SCANENB_in = 1'b1; // tie off
assign CH0_SCANIN_in = 4'b1111; // tie off
assign CH0_SCANRSTB_in = 1'b1; // tie off
assign CH1_BSR_SERIAL_in = 1'b1; // tie off
assign CH1_CSSDSTOPCLK_in = 1'b1; // tie off
assign CH1_EDTUPDATEB_in = 1'b1; // tie off
assign CH1_SCANCNTRLIN_in = 1'b1; // tie off
assign CH1_SCANENB_in = 1'b1; // tie off
assign CH1_SCANIN_in = 4'b1111; // tie off
assign CH1_SCANRSTB_in = 1'b1; // tie off
assign CH2_BSR_SERIAL_in = 1'b1; // tie off
assign CH2_CSSDSTOPCLK_in = 1'b1; // tie off
assign CH2_EDTUPDATEB_in = 1'b1; // tie off
assign CH2_SCANCNTRLIN_in = 1'b1; // tie off
assign CH2_SCANENB_in = 1'b1; // tie off
assign CH2_SCANIN_in = 4'b1111; // tie off
assign CH2_SCANRSTB_in = 1'b1; // tie off
assign CH3_BSR_SERIAL_in = 1'b1; // tie off
assign CH3_CSSDSTOPCLK_in = 1'b1; // tie off
assign CH3_EDTUPDATEB_in = 1'b1; // tie off
assign CH3_SCANCNTRLIN_in = 1'b1; // tie off
assign CH3_SCANENB_in = 1'b1; // tie off
assign CH3_SCANIN_in = 4'b1111; // tie off
assign CH3_SCANRSTB_in = 1'b1; // tie off
assign CSSDSTOPCLK_in = 1'b1; // tie off
assign EDTUPDATEB_in = 1'b1; // tie off
assign SCANCNTRLIN_in = 1'b1; // tie off
assign SCANENB_in = 1'b1; // tie off
assign SCANIN_in = 4'b1111; // tie off
assign SCANRSTB_in = 1'b1; // tie off

  SIP_GTYP_QUAD #(
    .MEMORY_INIT_FILE (MEMORY_INIT_FILE),
    .STAT_NPI_REG_LIST (STAT_NPI_REG_LIST)
) SIP_GTYP_QUAD_INST (
    .A_CFG0 (A_CFG0_REG),
    .A_CFG1 (A_CFG1_REG),
    .A_CFG2 (A_CFG2_REG),
    .A_CFG3 (A_CFG3_REG),
    .A_CFG4 (A_CFG4_REG),
    .A_CFG5 (A_CFG5_REG),
    .CH0_ADAPT_APT_CFG (CH0_ADAPT_APT_CFG_REG),
    .CH0_ADAPT_CAL_CFG (CH0_ADAPT_CAL_CFG_REG),
    .CH0_ADAPT_DFE_CFG (CH0_ADAPT_DFE_CFG_REG),
    .CH0_ADAPT_GC_CFG0 (CH0_ADAPT_GC_CFG0_REG),
    .CH0_ADAPT_GC_CFG1 (CH0_ADAPT_GC_CFG1_REG),
    .CH0_ADAPT_GC_CFG2 (CH0_ADAPT_GC_CFG2_REG),
    .CH0_ADAPT_GC_CFG3 (CH0_ADAPT_GC_CFG3_REG),
    .CH0_ADAPT_GEN_CFG0 (CH0_ADAPT_GEN_CFG0_REG),
    .CH0_ADAPT_GEN_CFG1 (CH0_ADAPT_GEN_CFG1_REG),
    .CH0_ADAPT_GEN_CFG2 (CH0_ADAPT_GEN_CFG2_REG),
    .CH0_ADAPT_GEN_CFG3 (CH0_ADAPT_GEN_CFG3_REG),
    .CH0_ADAPT_H01_CFG (CH0_ADAPT_H01_CFG_REG),
    .CH0_ADAPT_H23_CFG (CH0_ADAPT_H23_CFG_REG),
    .CH0_ADAPT_H45_CFG (CH0_ADAPT_H45_CFG_REG),
    .CH0_ADAPT_H67_CFG (CH0_ADAPT_H67_CFG_REG),
    .CH0_ADAPT_H89_CFG (CH0_ADAPT_H89_CFG_REG),
    .CH0_ADAPT_HAB_CFG (CH0_ADAPT_HAB_CFG_REG),
    .CH0_ADAPT_HCD_CFG (CH0_ADAPT_HCD_CFG_REG),
    .CH0_ADAPT_HEF_CFG (CH0_ADAPT_HEF_CFG_REG),
    .CH0_ADAPT_KH_CFG0 (CH0_ADAPT_KH_CFG0_REG),
    .CH0_ADAPT_KH_CFG1 (CH0_ADAPT_KH_CFG1_REG),
    .CH0_ADAPT_KH_CFG2 (CH0_ADAPT_KH_CFG2_REG),
    .CH0_ADAPT_KH_CFG3 (CH0_ADAPT_KH_CFG3_REG),
    .CH0_ADAPT_KH_CFG4 (CH0_ADAPT_KH_CFG4_REG),
    .CH0_ADAPT_KH_CFG5 (CH0_ADAPT_KH_CFG5_REG),
    .CH0_ADAPT_KL_CFG0 (CH0_ADAPT_KL_CFG0_REG),
    .CH0_ADAPT_KL_CFG1 (CH0_ADAPT_KL_CFG1_REG),
    .CH0_ADAPT_LCK_CFG0 (CH0_ADAPT_LCK_CFG0_REG),
    .CH0_ADAPT_LCK_CFG1 (CH0_ADAPT_LCK_CFG1_REG),
    .CH0_ADAPT_LCK_CFG2 (CH0_ADAPT_LCK_CFG2_REG),
    .CH0_ADAPT_LCK_CFG3 (CH0_ADAPT_LCK_CFG3_REG),
    .CH0_ADAPT_LOP_CFG (CH0_ADAPT_LOP_CFG_REG),
    .CH0_ADAPT_OS_CFG (CH0_ADAPT_OS_CFG_REG),
    .CH0_CHCLK_ILO_CFG (CH0_CHCLK_ILO_CFG_REG),
    .CH0_CHCLK_MISC_CFG (CH0_CHCLK_MISC_CFG_REG),
    .CH0_CHCLK_RSV_CFG (CH0_CHCLK_RSV_CFG_REG),
    .CH0_CHCLK_RXCAL_CFG (CH0_CHCLK_RXCAL_CFG_REG),
    .CH0_CHCLK_RXCAL_CFG1 (CH0_CHCLK_RXCAL_CFG1_REG),
    .CH0_CHCLK_RXCAL_CFG2 (CH0_CHCLK_RXCAL_CFG2_REG),
    .CH0_CHCLK_RXPI_CFG (CH0_CHCLK_RXPI_CFG_REG),
    .CH0_CHCLK_TXCAL_CFG (CH0_CHCLK_TXCAL_CFG_REG),
    .CH0_CHCLK_TXPI_CFG0 (CH0_CHCLK_TXPI_CFG0_REG),
    .CH0_CHL_RSV_CFG0 (CH0_CHL_RSV_CFG0_REG),
    .CH0_CHL_RSV_CFG1 (CH0_CHL_RSV_CFG1_REG),
    .CH0_CHL_RSV_CFG2 (CH0_CHL_RSV_CFG2_REG),
    .CH0_CHL_RSV_CFG3 (CH0_CHL_RSV_CFG3_REG),
    .CH0_CHL_RSV_CFG4 (CH0_CHL_RSV_CFG4_REG),
    .CH0_DA_CFG (CH0_DA_CFG_REG),
    .CH0_EYESCAN_CFG0 (CH0_EYESCAN_CFG0_REG),
    .CH0_EYESCAN_CFG1 (CH0_EYESCAN_CFG1_REG),
    .CH0_EYESCAN_CFG10 (CH0_EYESCAN_CFG10_REG),
    .CH0_EYESCAN_CFG11 (CH0_EYESCAN_CFG11_REG),
    .CH0_EYESCAN_CFG12 (CH0_EYESCAN_CFG12_REG),
    .CH0_EYESCAN_CFG13 (CH0_EYESCAN_CFG13_REG),
    .CH0_EYESCAN_CFG14 (CH0_EYESCAN_CFG14_REG),
    .CH0_EYESCAN_CFG15 (CH0_EYESCAN_CFG15_REG),
    .CH0_EYESCAN_CFG16 (CH0_EYESCAN_CFG16_REG),
    .CH0_EYESCAN_CFG2 (CH0_EYESCAN_CFG2_REG),
    .CH0_EYESCAN_CFG3 (CH0_EYESCAN_CFG3_REG),
    .CH0_EYESCAN_CFG4 (CH0_EYESCAN_CFG4_REG),
    .CH0_EYESCAN_CFG5 (CH0_EYESCAN_CFG5_REG),
    .CH0_EYESCAN_CFG6 (CH0_EYESCAN_CFG6_REG),
    .CH0_EYESCAN_CFG7 (CH0_EYESCAN_CFG7_REG),
    .CH0_EYESCAN_CFG8 (CH0_EYESCAN_CFG8_REG),
    .CH0_EYESCAN_CFG9 (CH0_EYESCAN_CFG9_REG),
    .CH0_FABRIC_INTF_CFG0 (CH0_FABRIC_INTF_CFG0_REG),
    .CH0_FABRIC_INTF_CFG1 (CH0_FABRIC_INTF_CFG1_REG),
    .CH0_FABRIC_INTF_CFG2 (CH0_FABRIC_INTF_CFG2_REG),
    .CH0_FABRIC_INTF_CFG3 (CH0_FABRIC_INTF_CFG3_REG),
    .CH0_FABRIC_INTF_CFG4 (CH0_FABRIC_INTF_CFG4_REG),
    .CH0_FABRIC_INTF_CFG5 (CH0_FABRIC_INTF_CFG5_REG),
    .CH0_INSTANTIATED (CH0_INSTANTIATED_REG),
    .CH0_MONITOR_CFG (CH0_MONITOR_CFG_REG),
    .CH0_PIPE_CTRL_CFG0 (CH0_PIPE_CTRL_CFG0_REG),
    .CH0_PIPE_CTRL_CFG1 (CH0_PIPE_CTRL_CFG1_REG),
    .CH0_PIPE_CTRL_CFG10 (CH0_PIPE_CTRL_CFG10_REG),
    .CH0_PIPE_CTRL_CFG2 (CH0_PIPE_CTRL_CFG2_REG),
    .CH0_PIPE_CTRL_CFG3 (CH0_PIPE_CTRL_CFG3_REG),
    .CH0_PIPE_CTRL_CFG4 (CH0_PIPE_CTRL_CFG4_REG),
    .CH0_PIPE_CTRL_CFG5 (CH0_PIPE_CTRL_CFG5_REG),
    .CH0_PIPE_CTRL_CFG6 (CH0_PIPE_CTRL_CFG6_REG),
    .CH0_PIPE_CTRL_CFG7 (CH0_PIPE_CTRL_CFG7_REG),
    .CH0_PIPE_CTRL_CFG8 (CH0_PIPE_CTRL_CFG8_REG),
    .CH0_PIPE_CTRL_CFG9 (CH0_PIPE_CTRL_CFG9_REG),
    .CH0_PIPE_TX_EQ_CFG0 (CH0_PIPE_TX_EQ_CFG0_REG),
    .CH0_PIPE_TX_EQ_CFG1 (CH0_PIPE_TX_EQ_CFG1_REG),
    .CH0_PIPE_TX_EQ_CFG2 (CH0_PIPE_TX_EQ_CFG2_REG),
    .CH0_PIPE_TX_EQ_CFG3 (CH0_PIPE_TX_EQ_CFG3_REG),
    .CH0_RESET_BYP_HDSHK_CFG (CH0_RESET_BYP_HDSHK_CFG_REG),
    .CH0_RESET_CFG (CH0_RESET_CFG_REG),
    .CH0_RESET_LOOPER_ID_CFG (CH0_RESET_LOOPER_ID_CFG_REG),
    .CH0_RESET_LOOP_ID_CFG0 (CH0_RESET_LOOP_ID_CFG0_REG),
    .CH0_RESET_LOOP_ID_CFG1 (CH0_RESET_LOOP_ID_CFG1_REG),
    .CH0_RESET_LOOP_ID_CFG2 (CH0_RESET_LOOP_ID_CFG2_REG),
    .CH0_RESET_TIME_CFG0 (CH0_RESET_TIME_CFG0_REG),
    .CH0_RESET_TIME_CFG1 (CH0_RESET_TIME_CFG1_REG),
    .CH0_RESET_TIME_CFG2 (CH0_RESET_TIME_CFG2_REG),
    .CH0_RESET_TIME_CFG3 (CH0_RESET_TIME_CFG3_REG),
    .CH0_RXOUTCLK_FREQ (CH0_RXOUTCLK_FREQ_BIN),
    .CH0_RXOUTCLK_REF_FREQ (CH0_RXOUTCLK_REF_FREQ_BIN),
    .CH0_RXOUTCLK_REF_SOURCE (CH0_RXOUTCLK_REF_SOURCE_REG),
    .CH0_RX_CDR_CFG0 (CH0_RX_CDR_CFG0_REG),
    .CH0_RX_CDR_CFG1 (CH0_RX_CDR_CFG1_REG),
    .CH0_RX_CDR_CFG2 (CH0_RX_CDR_CFG2_REG),
    .CH0_RX_CDR_CFG3 (CH0_RX_CDR_CFG3_REG),
    .CH0_RX_CDR_CFG4 (CH0_RX_CDR_CFG4_REG),
    .CH0_RX_CRC_CFG0 (CH0_RX_CRC_CFG0_REG),
    .CH0_RX_CRC_CFG1 (CH0_RX_CRC_CFG1_REG),
    .CH0_RX_CRC_CFG2 (CH0_RX_CRC_CFG2_REG),
    .CH0_RX_CRC_CFG3 (CH0_RX_CRC_CFG3_REG),
    .CH0_RX_CTLE_CFG0 (CH0_RX_CTLE_CFG0_REG),
    .CH0_RX_CTLE_CFG1 (CH0_RX_CTLE_CFG1_REG),
    .CH0_RX_DACI2V_CFG0 (CH0_RX_DACI2V_CFG0_REG),
    .CH0_RX_DATA_RATE (CH0_RX_DATA_RATE_BIN),
    .CH0_RX_DFE_CFG0 (CH0_RX_DFE_CFG0_REG),
    .CH0_RX_ELASTIC_BUF_CFG0 (CH0_RX_ELASTIC_BUF_CFG0_REG),
    .CH0_RX_ELASTIC_BUF_CFG1 (CH0_RX_ELASTIC_BUF_CFG1_REG),
    .CH0_RX_ELASTIC_BUF_CFG2 (CH0_RX_ELASTIC_BUF_CFG2_REG),
    .CH0_RX_ELASTIC_BUF_CFG3 (CH0_RX_ELASTIC_BUF_CFG3_REG),
    .CH0_RX_ELASTIC_BUF_CFG4 (CH0_RX_ELASTIC_BUF_CFG4_REG),
    .CH0_RX_ELASTIC_BUF_CFG5 (CH0_RX_ELASTIC_BUF_CFG5_REG),
    .CH0_RX_ELASTIC_BUF_CFG6 (CH0_RX_ELASTIC_BUF_CFG6_REG),
    .CH0_RX_ELASTIC_BUF_CFG7 (CH0_RX_ELASTIC_BUF_CFG7_REG),
    .CH0_RX_ELASTIC_BUF_CFG8 (CH0_RX_ELASTIC_BUF_CFG8_REG),
    .CH0_RX_ELASTIC_BUF_CFG9 (CH0_RX_ELASTIC_BUF_CFG9_REG),
    .CH0_RX_MISC_CFG0 (CH0_RX_MISC_CFG0_REG),
    .CH0_RX_OOB_CFG0 (CH0_RX_OOB_CFG0_REG),
    .CH0_RX_OOB_CFG1 (CH0_RX_OOB_CFG1_REG),
    .CH0_RX_PAD_CFG0 (CH0_RX_PAD_CFG0_REG),
    .CH0_RX_PAD_CFG1 (CH0_RX_PAD_CFG1_REG),
    .CH0_RX_PCS_CFG0 (CH0_RX_PCS_CFG0_REG),
    .CH0_RX_PCS_CFG1 (CH0_RX_PCS_CFG1_REG),
    .CH0_RX_PCS_CFG2 (CH0_RX_PCS_CFG2_REG),
    .CH0_RX_PCS_CFG3 (CH0_RX_PCS_CFG3_REG),
    .CH0_RX_PCS_CFG4 (CH0_RX_PCS_CFG4_REG),
    .CH0_RX_PHALIGN_CFG0 (CH0_RX_PHALIGN_CFG0_REG),
    .CH0_RX_PHALIGN_CFG1 (CH0_RX_PHALIGN_CFG1_REG),
    .CH0_RX_PHALIGN_CFG2 (CH0_RX_PHALIGN_CFG2_REG),
    .CH0_RX_PHALIGN_CFG3 (CH0_RX_PHALIGN_CFG3_REG),
    .CH0_RX_PHALIGN_CFG4 (CH0_RX_PHALIGN_CFG4_REG),
    .CH0_RX_PHALIGN_CFG5 (CH0_RX_PHALIGN_CFG5_REG),
    .CH0_SIM_MODE (CH0_SIM_MODE_REG),
    .CH0_SIM_RECEIVER_DETECT_PASS (CH0_SIM_RECEIVER_DETECT_PASS_REG),
    .CH0_SIM_RESET_SPEEDUP (CH0_SIM_RESET_SPEEDUP_REG),
    .CH0_SIM_TX_EIDLE_DRIVE_LEVEL (CH0_SIM_TX_EIDLE_DRIVE_LEVEL_REG),
    .CH0_TXOUTCLK_FREQ (CH0_TXOUTCLK_FREQ_BIN),
    .CH0_TXOUTCLK_REF_FREQ (CH0_TXOUTCLK_REF_FREQ_BIN),
    .CH0_TXOUTCLK_REF_SOURCE (CH0_TXOUTCLK_REF_SOURCE_REG),
    .CH0_TX_10G_CFG0 (CH0_TX_10G_CFG0_REG),
    .CH0_TX_10G_CFG1 (CH0_TX_10G_CFG1_REG),
    .CH0_TX_10G_CFG2 (CH0_TX_10G_CFG2_REG),
    .CH0_TX_10G_CFG3 (CH0_TX_10G_CFG3_REG),
    .CH0_TX_ANA_CFG0 (CH0_TX_ANA_CFG0_REG),
    .CH0_TX_CRC_CFG0 (CH0_TX_CRC_CFG0_REG),
    .CH0_TX_CRC_CFG1 (CH0_TX_CRC_CFG1_REG),
    .CH0_TX_CRC_CFG2 (CH0_TX_CRC_CFG2_REG),
    .CH0_TX_CRC_CFG3 (CH0_TX_CRC_CFG3_REG),
    .CH0_TX_DATA_RATE (CH0_TX_DATA_RATE_BIN),
    .CH0_TX_DRV_CFG0 (CH0_TX_DRV_CFG0_REG),
    .CH0_TX_DRV_CFG1 (CH0_TX_DRV_CFG1_REG),
    .CH0_TX_PCS_CFG0 (CH0_TX_PCS_CFG0_REG),
    .CH0_TX_PCS_CFG1 (CH0_TX_PCS_CFG1_REG),
    .CH0_TX_PCS_CFG2 (CH0_TX_PCS_CFG2_REG),
    .CH0_TX_PCS_CFG3 (CH0_TX_PCS_CFG3_REG),
    .CH0_TX_PHALIGN_CFG0 (CH0_TX_PHALIGN_CFG0_REG),
    .CH0_TX_PHALIGN_CFG1 (CH0_TX_PHALIGN_CFG1_REG),
    .CH0_TX_PHALIGN_CFG2 (CH0_TX_PHALIGN_CFG2_REG),
    .CH0_TX_PHALIGN_CFG3 (CH0_TX_PHALIGN_CFG3_REG),
    .CH0_TX_PHALIGN_CFG4 (CH0_TX_PHALIGN_CFG4_REG),
    .CH0_TX_PHALIGN_CFG5 (CH0_TX_PHALIGN_CFG5_REG),
    .CH0_TX_PIPPM_CFG (CH0_TX_PIPPM_CFG_REG),
    .CH0_TX_SER_CFG0 (CH0_TX_SER_CFG0_REG),
    .CH1_ADAPT_APT_CFG (CH1_ADAPT_APT_CFG_REG),
    .CH1_ADAPT_CAL_CFG (CH1_ADAPT_CAL_CFG_REG),
    .CH1_ADAPT_DFE_CFG (CH1_ADAPT_DFE_CFG_REG),
    .CH1_ADAPT_GC_CFG0 (CH1_ADAPT_GC_CFG0_REG),
    .CH1_ADAPT_GC_CFG1 (CH1_ADAPT_GC_CFG1_REG),
    .CH1_ADAPT_GC_CFG2 (CH1_ADAPT_GC_CFG2_REG),
    .CH1_ADAPT_GC_CFG3 (CH1_ADAPT_GC_CFG3_REG),
    .CH1_ADAPT_GEN_CFG0 (CH1_ADAPT_GEN_CFG0_REG),
    .CH1_ADAPT_GEN_CFG1 (CH1_ADAPT_GEN_CFG1_REG),
    .CH1_ADAPT_GEN_CFG2 (CH1_ADAPT_GEN_CFG2_REG),
    .CH1_ADAPT_GEN_CFG3 (CH1_ADAPT_GEN_CFG3_REG),
    .CH1_ADAPT_H01_CFG (CH1_ADAPT_H01_CFG_REG),
    .CH1_ADAPT_H23_CFG (CH1_ADAPT_H23_CFG_REG),
    .CH1_ADAPT_H45_CFG (CH1_ADAPT_H45_CFG_REG),
    .CH1_ADAPT_H67_CFG (CH1_ADAPT_H67_CFG_REG),
    .CH1_ADAPT_H89_CFG (CH1_ADAPT_H89_CFG_REG),
    .CH1_ADAPT_HAB_CFG (CH1_ADAPT_HAB_CFG_REG),
    .CH1_ADAPT_HCD_CFG (CH1_ADAPT_HCD_CFG_REG),
    .CH1_ADAPT_HEF_CFG (CH1_ADAPT_HEF_CFG_REG),
    .CH1_ADAPT_KH_CFG0 (CH1_ADAPT_KH_CFG0_REG),
    .CH1_ADAPT_KH_CFG1 (CH1_ADAPT_KH_CFG1_REG),
    .CH1_ADAPT_KH_CFG2 (CH1_ADAPT_KH_CFG2_REG),
    .CH1_ADAPT_KH_CFG3 (CH1_ADAPT_KH_CFG3_REG),
    .CH1_ADAPT_KH_CFG4 (CH1_ADAPT_KH_CFG4_REG),
    .CH1_ADAPT_KH_CFG5 (CH1_ADAPT_KH_CFG5_REG),
    .CH1_ADAPT_KL_CFG0 (CH1_ADAPT_KL_CFG0_REG),
    .CH1_ADAPT_KL_CFG1 (CH1_ADAPT_KL_CFG1_REG),
    .CH1_ADAPT_LCK_CFG0 (CH1_ADAPT_LCK_CFG0_REG),
    .CH1_ADAPT_LCK_CFG1 (CH1_ADAPT_LCK_CFG1_REG),
    .CH1_ADAPT_LCK_CFG2 (CH1_ADAPT_LCK_CFG2_REG),
    .CH1_ADAPT_LCK_CFG3 (CH1_ADAPT_LCK_CFG3_REG),
    .CH1_ADAPT_LOP_CFG (CH1_ADAPT_LOP_CFG_REG),
    .CH1_ADAPT_OS_CFG (CH1_ADAPT_OS_CFG_REG),
    .CH1_CHCLK_ILO_CFG (CH1_CHCLK_ILO_CFG_REG),
    .CH1_CHCLK_MISC_CFG (CH1_CHCLK_MISC_CFG_REG),
    .CH1_CHCLK_RSV_CFG (CH1_CHCLK_RSV_CFG_REG),
    .CH1_CHCLK_RXCAL_CFG (CH1_CHCLK_RXCAL_CFG_REG),
    .CH1_CHCLK_RXCAL_CFG1 (CH1_CHCLK_RXCAL_CFG1_REG),
    .CH1_CHCLK_RXCAL_CFG2 (CH1_CHCLK_RXCAL_CFG2_REG),
    .CH1_CHCLK_RXPI_CFG (CH1_CHCLK_RXPI_CFG_REG),
    .CH1_CHCLK_TXCAL_CFG (CH1_CHCLK_TXCAL_CFG_REG),
    .CH1_CHCLK_TXPI_CFG0 (CH1_CHCLK_TXPI_CFG0_REG),
    .CH1_CHL_RSV_CFG0 (CH1_CHL_RSV_CFG0_REG),
    .CH1_CHL_RSV_CFG1 (CH1_CHL_RSV_CFG1_REG),
    .CH1_CHL_RSV_CFG2 (CH1_CHL_RSV_CFG2_REG),
    .CH1_CHL_RSV_CFG3 (CH1_CHL_RSV_CFG3_REG),
    .CH1_CHL_RSV_CFG4 (CH1_CHL_RSV_CFG4_REG),
    .CH1_DA_CFG (CH1_DA_CFG_REG),
    .CH1_EYESCAN_CFG0 (CH1_EYESCAN_CFG0_REG),
    .CH1_EYESCAN_CFG1 (CH1_EYESCAN_CFG1_REG),
    .CH1_EYESCAN_CFG10 (CH1_EYESCAN_CFG10_REG),
    .CH1_EYESCAN_CFG11 (CH1_EYESCAN_CFG11_REG),
    .CH1_EYESCAN_CFG12 (CH1_EYESCAN_CFG12_REG),
    .CH1_EYESCAN_CFG13 (CH1_EYESCAN_CFG13_REG),
    .CH1_EYESCAN_CFG14 (CH1_EYESCAN_CFG14_REG),
    .CH1_EYESCAN_CFG15 (CH1_EYESCAN_CFG15_REG),
    .CH1_EYESCAN_CFG16 (CH1_EYESCAN_CFG16_REG),
    .CH1_EYESCAN_CFG2 (CH1_EYESCAN_CFG2_REG),
    .CH1_EYESCAN_CFG3 (CH1_EYESCAN_CFG3_REG),
    .CH1_EYESCAN_CFG4 (CH1_EYESCAN_CFG4_REG),
    .CH1_EYESCAN_CFG5 (CH1_EYESCAN_CFG5_REG),
    .CH1_EYESCAN_CFG6 (CH1_EYESCAN_CFG6_REG),
    .CH1_EYESCAN_CFG7 (CH1_EYESCAN_CFG7_REG),
    .CH1_EYESCAN_CFG8 (CH1_EYESCAN_CFG8_REG),
    .CH1_EYESCAN_CFG9 (CH1_EYESCAN_CFG9_REG),
    .CH1_FABRIC_INTF_CFG0 (CH1_FABRIC_INTF_CFG0_REG),
    .CH1_FABRIC_INTF_CFG1 (CH1_FABRIC_INTF_CFG1_REG),
    .CH1_FABRIC_INTF_CFG2 (CH1_FABRIC_INTF_CFG2_REG),
    .CH1_FABRIC_INTF_CFG3 (CH1_FABRIC_INTF_CFG3_REG),
    .CH1_FABRIC_INTF_CFG4 (CH1_FABRIC_INTF_CFG4_REG),
    .CH1_FABRIC_INTF_CFG5 (CH1_FABRIC_INTF_CFG5_REG),
    .CH1_INSTANTIATED (CH1_INSTANTIATED_REG),
    .CH1_MONITOR_CFG (CH1_MONITOR_CFG_REG),
    .CH1_PIPE_CTRL_CFG0 (CH1_PIPE_CTRL_CFG0_REG),
    .CH1_PIPE_CTRL_CFG1 (CH1_PIPE_CTRL_CFG1_REG),
    .CH1_PIPE_CTRL_CFG10 (CH1_PIPE_CTRL_CFG10_REG),
    .CH1_PIPE_CTRL_CFG2 (CH1_PIPE_CTRL_CFG2_REG),
    .CH1_PIPE_CTRL_CFG3 (CH1_PIPE_CTRL_CFG3_REG),
    .CH1_PIPE_CTRL_CFG4 (CH1_PIPE_CTRL_CFG4_REG),
    .CH1_PIPE_CTRL_CFG5 (CH1_PIPE_CTRL_CFG5_REG),
    .CH1_PIPE_CTRL_CFG6 (CH1_PIPE_CTRL_CFG6_REG),
    .CH1_PIPE_CTRL_CFG7 (CH1_PIPE_CTRL_CFG7_REG),
    .CH1_PIPE_CTRL_CFG8 (CH1_PIPE_CTRL_CFG8_REG),
    .CH1_PIPE_CTRL_CFG9 (CH1_PIPE_CTRL_CFG9_REG),
    .CH1_PIPE_TX_EQ_CFG0 (CH1_PIPE_TX_EQ_CFG0_REG),
    .CH1_PIPE_TX_EQ_CFG1 (CH1_PIPE_TX_EQ_CFG1_REG),
    .CH1_PIPE_TX_EQ_CFG2 (CH1_PIPE_TX_EQ_CFG2_REG),
    .CH1_PIPE_TX_EQ_CFG3 (CH1_PIPE_TX_EQ_CFG3_REG),
    .CH1_RESET_BYP_HDSHK_CFG (CH1_RESET_BYP_HDSHK_CFG_REG),
    .CH1_RESET_CFG (CH1_RESET_CFG_REG),
    .CH1_RESET_LOOPER_ID_CFG (CH1_RESET_LOOPER_ID_CFG_REG),
    .CH1_RESET_LOOP_ID_CFG0 (CH1_RESET_LOOP_ID_CFG0_REG),
    .CH1_RESET_LOOP_ID_CFG1 (CH1_RESET_LOOP_ID_CFG1_REG),
    .CH1_RESET_LOOP_ID_CFG2 (CH1_RESET_LOOP_ID_CFG2_REG),
    .CH1_RESET_TIME_CFG0 (CH1_RESET_TIME_CFG0_REG),
    .CH1_RESET_TIME_CFG1 (CH1_RESET_TIME_CFG1_REG),
    .CH1_RESET_TIME_CFG2 (CH1_RESET_TIME_CFG2_REG),
    .CH1_RESET_TIME_CFG3 (CH1_RESET_TIME_CFG3_REG),
    .CH1_RXOUTCLK_FREQ (CH1_RXOUTCLK_FREQ_BIN),
    .CH1_RXOUTCLK_REF_FREQ (CH1_RXOUTCLK_REF_FREQ_BIN),
    .CH1_RXOUTCLK_REF_SOURCE (CH1_RXOUTCLK_REF_SOURCE_REG),
    .CH1_RX_CDR_CFG0 (CH1_RX_CDR_CFG0_REG),
    .CH1_RX_CDR_CFG1 (CH1_RX_CDR_CFG1_REG),
    .CH1_RX_CDR_CFG2 (CH1_RX_CDR_CFG2_REG),
    .CH1_RX_CDR_CFG3 (CH1_RX_CDR_CFG3_REG),
    .CH1_RX_CDR_CFG4 (CH1_RX_CDR_CFG4_REG),
    .CH1_RX_CRC_CFG0 (CH1_RX_CRC_CFG0_REG),
    .CH1_RX_CRC_CFG1 (CH1_RX_CRC_CFG1_REG),
    .CH1_RX_CRC_CFG2 (CH1_RX_CRC_CFG2_REG),
    .CH1_RX_CRC_CFG3 (CH1_RX_CRC_CFG3_REG),
    .CH1_RX_CTLE_CFG0 (CH1_RX_CTLE_CFG0_REG),
    .CH1_RX_CTLE_CFG1 (CH1_RX_CTLE_CFG1_REG),
    .CH1_RX_DACI2V_CFG0 (CH1_RX_DACI2V_CFG0_REG),
    .CH1_RX_DATA_RATE (CH1_RX_DATA_RATE_BIN),
    .CH1_RX_DFE_CFG0 (CH1_RX_DFE_CFG0_REG),
    .CH1_RX_ELASTIC_BUF_CFG0 (CH1_RX_ELASTIC_BUF_CFG0_REG),
    .CH1_RX_ELASTIC_BUF_CFG1 (CH1_RX_ELASTIC_BUF_CFG1_REG),
    .CH1_RX_ELASTIC_BUF_CFG2 (CH1_RX_ELASTIC_BUF_CFG2_REG),
    .CH1_RX_ELASTIC_BUF_CFG3 (CH1_RX_ELASTIC_BUF_CFG3_REG),
    .CH1_RX_ELASTIC_BUF_CFG4 (CH1_RX_ELASTIC_BUF_CFG4_REG),
    .CH1_RX_ELASTIC_BUF_CFG5 (CH1_RX_ELASTIC_BUF_CFG5_REG),
    .CH1_RX_ELASTIC_BUF_CFG6 (CH1_RX_ELASTIC_BUF_CFG6_REG),
    .CH1_RX_ELASTIC_BUF_CFG7 (CH1_RX_ELASTIC_BUF_CFG7_REG),
    .CH1_RX_ELASTIC_BUF_CFG8 (CH1_RX_ELASTIC_BUF_CFG8_REG),
    .CH1_RX_ELASTIC_BUF_CFG9 (CH1_RX_ELASTIC_BUF_CFG9_REG),
    .CH1_RX_MISC_CFG0 (CH1_RX_MISC_CFG0_REG),
    .CH1_RX_OOB_CFG0 (CH1_RX_OOB_CFG0_REG),
    .CH1_RX_OOB_CFG1 (CH1_RX_OOB_CFG1_REG),
    .CH1_RX_PAD_CFG0 (CH1_RX_PAD_CFG0_REG),
    .CH1_RX_PAD_CFG1 (CH1_RX_PAD_CFG1_REG),
    .CH1_RX_PCS_CFG0 (CH1_RX_PCS_CFG0_REG),
    .CH1_RX_PCS_CFG1 (CH1_RX_PCS_CFG1_REG),
    .CH1_RX_PCS_CFG2 (CH1_RX_PCS_CFG2_REG),
    .CH1_RX_PCS_CFG3 (CH1_RX_PCS_CFG3_REG),
    .CH1_RX_PCS_CFG4 (CH1_RX_PCS_CFG4_REG),
    .CH1_RX_PHALIGN_CFG0 (CH1_RX_PHALIGN_CFG0_REG),
    .CH1_RX_PHALIGN_CFG1 (CH1_RX_PHALIGN_CFG1_REG),
    .CH1_RX_PHALIGN_CFG2 (CH1_RX_PHALIGN_CFG2_REG),
    .CH1_RX_PHALIGN_CFG3 (CH1_RX_PHALIGN_CFG3_REG),
    .CH1_RX_PHALIGN_CFG4 (CH1_RX_PHALIGN_CFG4_REG),
    .CH1_RX_PHALIGN_CFG5 (CH1_RX_PHALIGN_CFG5_REG),
    .CH1_SIM_MODE (CH1_SIM_MODE_REG),
    .CH1_SIM_RECEIVER_DETECT_PASS (CH1_SIM_RECEIVER_DETECT_PASS_REG),
    .CH1_SIM_RESET_SPEEDUP (CH1_SIM_RESET_SPEEDUP_REG),
    .CH1_SIM_TX_EIDLE_DRIVE_LEVEL (CH1_SIM_TX_EIDLE_DRIVE_LEVEL_REG),
    .CH1_TXOUTCLK_FREQ (CH1_TXOUTCLK_FREQ_BIN),
    .CH1_TXOUTCLK_REF_FREQ (CH1_TXOUTCLK_REF_FREQ_BIN),
    .CH1_TXOUTCLK_REF_SOURCE (CH1_TXOUTCLK_REF_SOURCE_REG),
    .CH1_TX_10G_CFG0 (CH1_TX_10G_CFG0_REG),
    .CH1_TX_10G_CFG1 (CH1_TX_10G_CFG1_REG),
    .CH1_TX_10G_CFG2 (CH1_TX_10G_CFG2_REG),
    .CH1_TX_10G_CFG3 (CH1_TX_10G_CFG3_REG),
    .CH1_TX_ANA_CFG0 (CH1_TX_ANA_CFG0_REG),
    .CH1_TX_CRC_CFG0 (CH1_TX_CRC_CFG0_REG),
    .CH1_TX_CRC_CFG1 (CH1_TX_CRC_CFG1_REG),
    .CH1_TX_CRC_CFG2 (CH1_TX_CRC_CFG2_REG),
    .CH1_TX_CRC_CFG3 (CH1_TX_CRC_CFG3_REG),
    .CH1_TX_DATA_RATE (CH1_TX_DATA_RATE_BIN),
    .CH1_TX_DRV_CFG0 (CH1_TX_DRV_CFG0_REG),
    .CH1_TX_DRV_CFG1 (CH1_TX_DRV_CFG1_REG),
    .CH1_TX_PCS_CFG0 (CH1_TX_PCS_CFG0_REG),
    .CH1_TX_PCS_CFG1 (CH1_TX_PCS_CFG1_REG),
    .CH1_TX_PCS_CFG2 (CH1_TX_PCS_CFG2_REG),
    .CH1_TX_PCS_CFG3 (CH1_TX_PCS_CFG3_REG),
    .CH1_TX_PHALIGN_CFG0 (CH1_TX_PHALIGN_CFG0_REG),
    .CH1_TX_PHALIGN_CFG1 (CH1_TX_PHALIGN_CFG1_REG),
    .CH1_TX_PHALIGN_CFG2 (CH1_TX_PHALIGN_CFG2_REG),
    .CH1_TX_PHALIGN_CFG3 (CH1_TX_PHALIGN_CFG3_REG),
    .CH1_TX_PHALIGN_CFG4 (CH1_TX_PHALIGN_CFG4_REG),
    .CH1_TX_PHALIGN_CFG5 (CH1_TX_PHALIGN_CFG5_REG),
    .CH1_TX_PIPPM_CFG (CH1_TX_PIPPM_CFG_REG),
    .CH1_TX_SER_CFG0 (CH1_TX_SER_CFG0_REG),
    .CH2_ADAPT_APT_CFG (CH2_ADAPT_APT_CFG_REG),
    .CH2_ADAPT_CAL_CFG (CH2_ADAPT_CAL_CFG_REG),
    .CH2_ADAPT_DFE_CFG (CH2_ADAPT_DFE_CFG_REG),
    .CH2_ADAPT_GC_CFG0 (CH2_ADAPT_GC_CFG0_REG),
    .CH2_ADAPT_GC_CFG1 (CH2_ADAPT_GC_CFG1_REG),
    .CH2_ADAPT_GC_CFG2 (CH2_ADAPT_GC_CFG2_REG),
    .CH2_ADAPT_GC_CFG3 (CH2_ADAPT_GC_CFG3_REG),
    .CH2_ADAPT_GEN_CFG0 (CH2_ADAPT_GEN_CFG0_REG),
    .CH2_ADAPT_GEN_CFG1 (CH2_ADAPT_GEN_CFG1_REG),
    .CH2_ADAPT_GEN_CFG2 (CH2_ADAPT_GEN_CFG2_REG),
    .CH2_ADAPT_GEN_CFG3 (CH2_ADAPT_GEN_CFG3_REG),
    .CH2_ADAPT_H01_CFG (CH2_ADAPT_H01_CFG_REG),
    .CH2_ADAPT_H23_CFG (CH2_ADAPT_H23_CFG_REG),
    .CH2_ADAPT_H45_CFG (CH2_ADAPT_H45_CFG_REG),
    .CH2_ADAPT_H67_CFG (CH2_ADAPT_H67_CFG_REG),
    .CH2_ADAPT_H89_CFG (CH2_ADAPT_H89_CFG_REG),
    .CH2_ADAPT_HAB_CFG (CH2_ADAPT_HAB_CFG_REG),
    .CH2_ADAPT_HCD_CFG (CH2_ADAPT_HCD_CFG_REG),
    .CH2_ADAPT_HEF_CFG (CH2_ADAPT_HEF_CFG_REG),
    .CH2_ADAPT_KH_CFG0 (CH2_ADAPT_KH_CFG0_REG),
    .CH2_ADAPT_KH_CFG1 (CH2_ADAPT_KH_CFG1_REG),
    .CH2_ADAPT_KH_CFG2 (CH2_ADAPT_KH_CFG2_REG),
    .CH2_ADAPT_KH_CFG3 (CH2_ADAPT_KH_CFG3_REG),
    .CH2_ADAPT_KH_CFG4 (CH2_ADAPT_KH_CFG4_REG),
    .CH2_ADAPT_KH_CFG5 (CH2_ADAPT_KH_CFG5_REG),
    .CH2_ADAPT_KL_CFG0 (CH2_ADAPT_KL_CFG0_REG),
    .CH2_ADAPT_KL_CFG1 (CH2_ADAPT_KL_CFG1_REG),
    .CH2_ADAPT_LCK_CFG0 (CH2_ADAPT_LCK_CFG0_REG),
    .CH2_ADAPT_LCK_CFG1 (CH2_ADAPT_LCK_CFG1_REG),
    .CH2_ADAPT_LCK_CFG2 (CH2_ADAPT_LCK_CFG2_REG),
    .CH2_ADAPT_LCK_CFG3 (CH2_ADAPT_LCK_CFG3_REG),
    .CH2_ADAPT_LOP_CFG (CH2_ADAPT_LOP_CFG_REG),
    .CH2_ADAPT_OS_CFG (CH2_ADAPT_OS_CFG_REG),
    .CH2_CHCLK_ILO_CFG (CH2_CHCLK_ILO_CFG_REG),
    .CH2_CHCLK_MISC_CFG (CH2_CHCLK_MISC_CFG_REG),
    .CH2_CHCLK_RSV_CFG (CH2_CHCLK_RSV_CFG_REG),
    .CH2_CHCLK_RXCAL_CFG (CH2_CHCLK_RXCAL_CFG_REG),
    .CH2_CHCLK_RXCAL_CFG1 (CH2_CHCLK_RXCAL_CFG1_REG),
    .CH2_CHCLK_RXCAL_CFG2 (CH2_CHCLK_RXCAL_CFG2_REG),
    .CH2_CHCLK_RXPI_CFG (CH2_CHCLK_RXPI_CFG_REG),
    .CH2_CHCLK_TXCAL_CFG (CH2_CHCLK_TXCAL_CFG_REG),
    .CH2_CHCLK_TXPI_CFG0 (CH2_CHCLK_TXPI_CFG0_REG),
    .CH2_CHL_RSV_CFG0 (CH2_CHL_RSV_CFG0_REG),
    .CH2_CHL_RSV_CFG1 (CH2_CHL_RSV_CFG1_REG),
    .CH2_CHL_RSV_CFG2 (CH2_CHL_RSV_CFG2_REG),
    .CH2_CHL_RSV_CFG3 (CH2_CHL_RSV_CFG3_REG),
    .CH2_CHL_RSV_CFG4 (CH2_CHL_RSV_CFG4_REG),
    .CH2_DA_CFG (CH2_DA_CFG_REG),
    .CH2_EYESCAN_CFG0 (CH2_EYESCAN_CFG0_REG),
    .CH2_EYESCAN_CFG1 (CH2_EYESCAN_CFG1_REG),
    .CH2_EYESCAN_CFG10 (CH2_EYESCAN_CFG10_REG),
    .CH2_EYESCAN_CFG11 (CH2_EYESCAN_CFG11_REG),
    .CH2_EYESCAN_CFG12 (CH2_EYESCAN_CFG12_REG),
    .CH2_EYESCAN_CFG13 (CH2_EYESCAN_CFG13_REG),
    .CH2_EYESCAN_CFG14 (CH2_EYESCAN_CFG14_REG),
    .CH2_EYESCAN_CFG15 (CH2_EYESCAN_CFG15_REG),
    .CH2_EYESCAN_CFG16 (CH2_EYESCAN_CFG16_REG),
    .CH2_EYESCAN_CFG2 (CH2_EYESCAN_CFG2_REG),
    .CH2_EYESCAN_CFG3 (CH2_EYESCAN_CFG3_REG),
    .CH2_EYESCAN_CFG4 (CH2_EYESCAN_CFG4_REG),
    .CH2_EYESCAN_CFG5 (CH2_EYESCAN_CFG5_REG),
    .CH2_EYESCAN_CFG6 (CH2_EYESCAN_CFG6_REG),
    .CH2_EYESCAN_CFG7 (CH2_EYESCAN_CFG7_REG),
    .CH2_EYESCAN_CFG8 (CH2_EYESCAN_CFG8_REG),
    .CH2_EYESCAN_CFG9 (CH2_EYESCAN_CFG9_REG),
    .CH2_FABRIC_INTF_CFG0 (CH2_FABRIC_INTF_CFG0_REG),
    .CH2_FABRIC_INTF_CFG1 (CH2_FABRIC_INTF_CFG1_REG),
    .CH2_FABRIC_INTF_CFG2 (CH2_FABRIC_INTF_CFG2_REG),
    .CH2_FABRIC_INTF_CFG3 (CH2_FABRIC_INTF_CFG3_REG),
    .CH2_FABRIC_INTF_CFG4 (CH2_FABRIC_INTF_CFG4_REG),
    .CH2_FABRIC_INTF_CFG5 (CH2_FABRIC_INTF_CFG5_REG),
    .CH2_INSTANTIATED (CH2_INSTANTIATED_REG),
    .CH2_MONITOR_CFG (CH2_MONITOR_CFG_REG),
    .CH2_PIPE_CTRL_CFG0 (CH2_PIPE_CTRL_CFG0_REG),
    .CH2_PIPE_CTRL_CFG1 (CH2_PIPE_CTRL_CFG1_REG),
    .CH2_PIPE_CTRL_CFG10 (CH2_PIPE_CTRL_CFG10_REG),
    .CH2_PIPE_CTRL_CFG2 (CH2_PIPE_CTRL_CFG2_REG),
    .CH2_PIPE_CTRL_CFG3 (CH2_PIPE_CTRL_CFG3_REG),
    .CH2_PIPE_CTRL_CFG4 (CH2_PIPE_CTRL_CFG4_REG),
    .CH2_PIPE_CTRL_CFG5 (CH2_PIPE_CTRL_CFG5_REG),
    .CH2_PIPE_CTRL_CFG6 (CH2_PIPE_CTRL_CFG6_REG),
    .CH2_PIPE_CTRL_CFG7 (CH2_PIPE_CTRL_CFG7_REG),
    .CH2_PIPE_CTRL_CFG8 (CH2_PIPE_CTRL_CFG8_REG),
    .CH2_PIPE_CTRL_CFG9 (CH2_PIPE_CTRL_CFG9_REG),
    .CH2_PIPE_TX_EQ_CFG0 (CH2_PIPE_TX_EQ_CFG0_REG),
    .CH2_PIPE_TX_EQ_CFG1 (CH2_PIPE_TX_EQ_CFG1_REG),
    .CH2_PIPE_TX_EQ_CFG2 (CH2_PIPE_TX_EQ_CFG2_REG),
    .CH2_PIPE_TX_EQ_CFG3 (CH2_PIPE_TX_EQ_CFG3_REG),
    .CH2_RESET_BYP_HDSHK_CFG (CH2_RESET_BYP_HDSHK_CFG_REG),
    .CH2_RESET_CFG (CH2_RESET_CFG_REG),
    .CH2_RESET_LOOPER_ID_CFG (CH2_RESET_LOOPER_ID_CFG_REG),
    .CH2_RESET_LOOP_ID_CFG0 (CH2_RESET_LOOP_ID_CFG0_REG),
    .CH2_RESET_LOOP_ID_CFG1 (CH2_RESET_LOOP_ID_CFG1_REG),
    .CH2_RESET_LOOP_ID_CFG2 (CH2_RESET_LOOP_ID_CFG2_REG),
    .CH2_RESET_TIME_CFG0 (CH2_RESET_TIME_CFG0_REG),
    .CH2_RESET_TIME_CFG1 (CH2_RESET_TIME_CFG1_REG),
    .CH2_RESET_TIME_CFG2 (CH2_RESET_TIME_CFG2_REG),
    .CH2_RESET_TIME_CFG3 (CH2_RESET_TIME_CFG3_REG),
    .CH2_RXOUTCLK_FREQ (CH2_RXOUTCLK_FREQ_BIN),
    .CH2_RXOUTCLK_REF_FREQ (CH2_RXOUTCLK_REF_FREQ_BIN),
    .CH2_RXOUTCLK_REF_SOURCE (CH2_RXOUTCLK_REF_SOURCE_REG),
    .CH2_RX_CDR_CFG0 (CH2_RX_CDR_CFG0_REG),
    .CH2_RX_CDR_CFG1 (CH2_RX_CDR_CFG1_REG),
    .CH2_RX_CDR_CFG2 (CH2_RX_CDR_CFG2_REG),
    .CH2_RX_CDR_CFG3 (CH2_RX_CDR_CFG3_REG),
    .CH2_RX_CDR_CFG4 (CH2_RX_CDR_CFG4_REG),
    .CH2_RX_CRC_CFG0 (CH2_RX_CRC_CFG0_REG),
    .CH2_RX_CRC_CFG1 (CH2_RX_CRC_CFG1_REG),
    .CH2_RX_CRC_CFG2 (CH2_RX_CRC_CFG2_REG),
    .CH2_RX_CRC_CFG3 (CH2_RX_CRC_CFG3_REG),
    .CH2_RX_CTLE_CFG0 (CH2_RX_CTLE_CFG0_REG),
    .CH2_RX_CTLE_CFG1 (CH2_RX_CTLE_CFG1_REG),
    .CH2_RX_DACI2V_CFG0 (CH2_RX_DACI2V_CFG0_REG),
    .CH2_RX_DATA_RATE (CH2_RX_DATA_RATE_BIN),
    .CH2_RX_DFE_CFG0 (CH2_RX_DFE_CFG0_REG),
    .CH2_RX_ELASTIC_BUF_CFG0 (CH2_RX_ELASTIC_BUF_CFG0_REG),
    .CH2_RX_ELASTIC_BUF_CFG1 (CH2_RX_ELASTIC_BUF_CFG1_REG),
    .CH2_RX_ELASTIC_BUF_CFG2 (CH2_RX_ELASTIC_BUF_CFG2_REG),
    .CH2_RX_ELASTIC_BUF_CFG3 (CH2_RX_ELASTIC_BUF_CFG3_REG),
    .CH2_RX_ELASTIC_BUF_CFG4 (CH2_RX_ELASTIC_BUF_CFG4_REG),
    .CH2_RX_ELASTIC_BUF_CFG5 (CH2_RX_ELASTIC_BUF_CFG5_REG),
    .CH2_RX_ELASTIC_BUF_CFG6 (CH2_RX_ELASTIC_BUF_CFG6_REG),
    .CH2_RX_ELASTIC_BUF_CFG7 (CH2_RX_ELASTIC_BUF_CFG7_REG),
    .CH2_RX_ELASTIC_BUF_CFG8 (CH2_RX_ELASTIC_BUF_CFG8_REG),
    .CH2_RX_ELASTIC_BUF_CFG9 (CH2_RX_ELASTIC_BUF_CFG9_REG),
    .CH2_RX_MISC_CFG0 (CH2_RX_MISC_CFG0_REG),
    .CH2_RX_OOB_CFG0 (CH2_RX_OOB_CFG0_REG),
    .CH2_RX_OOB_CFG1 (CH2_RX_OOB_CFG1_REG),
    .CH2_RX_PAD_CFG0 (CH2_RX_PAD_CFG0_REG),
    .CH2_RX_PAD_CFG1 (CH2_RX_PAD_CFG1_REG),
    .CH2_RX_PCS_CFG0 (CH2_RX_PCS_CFG0_REG),
    .CH2_RX_PCS_CFG1 (CH2_RX_PCS_CFG1_REG),
    .CH2_RX_PCS_CFG2 (CH2_RX_PCS_CFG2_REG),
    .CH2_RX_PCS_CFG3 (CH2_RX_PCS_CFG3_REG),
    .CH2_RX_PCS_CFG4 (CH2_RX_PCS_CFG4_REG),
    .CH2_RX_PHALIGN_CFG0 (CH2_RX_PHALIGN_CFG0_REG),
    .CH2_RX_PHALIGN_CFG1 (CH2_RX_PHALIGN_CFG1_REG),
    .CH2_RX_PHALIGN_CFG2 (CH2_RX_PHALIGN_CFG2_REG),
    .CH2_RX_PHALIGN_CFG3 (CH2_RX_PHALIGN_CFG3_REG),
    .CH2_RX_PHALIGN_CFG4 (CH2_RX_PHALIGN_CFG4_REG),
    .CH2_RX_PHALIGN_CFG5 (CH2_RX_PHALIGN_CFG5_REG),
    .CH2_SIM_MODE (CH2_SIM_MODE_REG),
    .CH2_SIM_RECEIVER_DETECT_PASS (CH2_SIM_RECEIVER_DETECT_PASS_REG),
    .CH2_SIM_RESET_SPEEDUP (CH2_SIM_RESET_SPEEDUP_REG),
    .CH2_SIM_TX_EIDLE_DRIVE_LEVEL (CH2_SIM_TX_EIDLE_DRIVE_LEVEL_REG),
    .CH2_TXOUTCLK_FREQ (CH2_TXOUTCLK_FREQ_BIN),
    .CH2_TXOUTCLK_REF_FREQ (CH2_TXOUTCLK_REF_FREQ_BIN),
    .CH2_TXOUTCLK_REF_SOURCE (CH2_TXOUTCLK_REF_SOURCE_REG),
    .CH2_TX_10G_CFG0 (CH2_TX_10G_CFG0_REG),
    .CH2_TX_10G_CFG1 (CH2_TX_10G_CFG1_REG),
    .CH2_TX_10G_CFG2 (CH2_TX_10G_CFG2_REG),
    .CH2_TX_10G_CFG3 (CH2_TX_10G_CFG3_REG),
    .CH2_TX_ANA_CFG0 (CH2_TX_ANA_CFG0_REG),
    .CH2_TX_CRC_CFG0 (CH2_TX_CRC_CFG0_REG),
    .CH2_TX_CRC_CFG1 (CH2_TX_CRC_CFG1_REG),
    .CH2_TX_CRC_CFG2 (CH2_TX_CRC_CFG2_REG),
    .CH2_TX_CRC_CFG3 (CH2_TX_CRC_CFG3_REG),
    .CH2_TX_DATA_RATE (CH2_TX_DATA_RATE_BIN),
    .CH2_TX_DRV_CFG0 (CH2_TX_DRV_CFG0_REG),
    .CH2_TX_DRV_CFG1 (CH2_TX_DRV_CFG1_REG),
    .CH2_TX_PCS_CFG0 (CH2_TX_PCS_CFG0_REG),
    .CH2_TX_PCS_CFG1 (CH2_TX_PCS_CFG1_REG),
    .CH2_TX_PCS_CFG2 (CH2_TX_PCS_CFG2_REG),
    .CH2_TX_PCS_CFG3 (CH2_TX_PCS_CFG3_REG),
    .CH2_TX_PHALIGN_CFG0 (CH2_TX_PHALIGN_CFG0_REG),
    .CH2_TX_PHALIGN_CFG1 (CH2_TX_PHALIGN_CFG1_REG),
    .CH2_TX_PHALIGN_CFG2 (CH2_TX_PHALIGN_CFG2_REG),
    .CH2_TX_PHALIGN_CFG3 (CH2_TX_PHALIGN_CFG3_REG),
    .CH2_TX_PHALIGN_CFG4 (CH2_TX_PHALIGN_CFG4_REG),
    .CH2_TX_PHALIGN_CFG5 (CH2_TX_PHALIGN_CFG5_REG),
    .CH2_TX_PIPPM_CFG (CH2_TX_PIPPM_CFG_REG),
    .CH2_TX_SER_CFG0 (CH2_TX_SER_CFG0_REG),
    .CH3_ADAPT_APT_CFG (CH3_ADAPT_APT_CFG_REG),
    .CH3_ADAPT_CAL_CFG (CH3_ADAPT_CAL_CFG_REG),
    .CH3_ADAPT_DFE_CFG (CH3_ADAPT_DFE_CFG_REG),
    .CH3_ADAPT_GC_CFG0 (CH3_ADAPT_GC_CFG0_REG),
    .CH3_ADAPT_GC_CFG1 (CH3_ADAPT_GC_CFG1_REG),
    .CH3_ADAPT_GC_CFG2 (CH3_ADAPT_GC_CFG2_REG),
    .CH3_ADAPT_GC_CFG3 (CH3_ADAPT_GC_CFG3_REG),
    .CH3_ADAPT_GEN_CFG0 (CH3_ADAPT_GEN_CFG0_REG),
    .CH3_ADAPT_GEN_CFG1 (CH3_ADAPT_GEN_CFG1_REG),
    .CH3_ADAPT_GEN_CFG2 (CH3_ADAPT_GEN_CFG2_REG),
    .CH3_ADAPT_GEN_CFG3 (CH3_ADAPT_GEN_CFG3_REG),
    .CH3_ADAPT_H01_CFG (CH3_ADAPT_H01_CFG_REG),
    .CH3_ADAPT_H23_CFG (CH3_ADAPT_H23_CFG_REG),
    .CH3_ADAPT_H45_CFG (CH3_ADAPT_H45_CFG_REG),
    .CH3_ADAPT_H67_CFG (CH3_ADAPT_H67_CFG_REG),
    .CH3_ADAPT_H89_CFG (CH3_ADAPT_H89_CFG_REG),
    .CH3_ADAPT_HAB_CFG (CH3_ADAPT_HAB_CFG_REG),
    .CH3_ADAPT_HCD_CFG (CH3_ADAPT_HCD_CFG_REG),
    .CH3_ADAPT_HEF_CFG (CH3_ADAPT_HEF_CFG_REG),
    .CH3_ADAPT_KH_CFG0 (CH3_ADAPT_KH_CFG0_REG),
    .CH3_ADAPT_KH_CFG1 (CH3_ADAPT_KH_CFG1_REG),
    .CH3_ADAPT_KH_CFG2 (CH3_ADAPT_KH_CFG2_REG),
    .CH3_ADAPT_KH_CFG3 (CH3_ADAPT_KH_CFG3_REG),
    .CH3_ADAPT_KH_CFG4 (CH3_ADAPT_KH_CFG4_REG),
    .CH3_ADAPT_KH_CFG5 (CH3_ADAPT_KH_CFG5_REG),
    .CH3_ADAPT_KL_CFG0 (CH3_ADAPT_KL_CFG0_REG),
    .CH3_ADAPT_KL_CFG1 (CH3_ADAPT_KL_CFG1_REG),
    .CH3_ADAPT_LCK_CFG0 (CH3_ADAPT_LCK_CFG0_REG),
    .CH3_ADAPT_LCK_CFG1 (CH3_ADAPT_LCK_CFG1_REG),
    .CH3_ADAPT_LCK_CFG2 (CH3_ADAPT_LCK_CFG2_REG),
    .CH3_ADAPT_LCK_CFG3 (CH3_ADAPT_LCK_CFG3_REG),
    .CH3_ADAPT_LOP_CFG (CH3_ADAPT_LOP_CFG_REG),
    .CH3_ADAPT_OS_CFG (CH3_ADAPT_OS_CFG_REG),
    .CH3_CHCLK_ILO_CFG (CH3_CHCLK_ILO_CFG_REG),
    .CH3_CHCLK_MISC_CFG (CH3_CHCLK_MISC_CFG_REG),
    .CH3_CHCLK_RSV_CFG (CH3_CHCLK_RSV_CFG_REG),
    .CH3_CHCLK_RXCAL_CFG (CH3_CHCLK_RXCAL_CFG_REG),
    .CH3_CHCLK_RXCAL_CFG1 (CH3_CHCLK_RXCAL_CFG1_REG),
    .CH3_CHCLK_RXCAL_CFG2 (CH3_CHCLK_RXCAL_CFG2_REG),
    .CH3_CHCLK_RXPI_CFG (CH3_CHCLK_RXPI_CFG_REG),
    .CH3_CHCLK_TXCAL_CFG (CH3_CHCLK_TXCAL_CFG_REG),
    .CH3_CHCLK_TXPI_CFG0 (CH3_CHCLK_TXPI_CFG0_REG),
    .CH3_CHL_RSV_CFG0 (CH3_CHL_RSV_CFG0_REG),
    .CH3_CHL_RSV_CFG1 (CH3_CHL_RSV_CFG1_REG),
    .CH3_CHL_RSV_CFG2 (CH3_CHL_RSV_CFG2_REG),
    .CH3_CHL_RSV_CFG3 (CH3_CHL_RSV_CFG3_REG),
    .CH3_CHL_RSV_CFG4 (CH3_CHL_RSV_CFG4_REG),
    .CH3_DA_CFG (CH3_DA_CFG_REG),
    .CH3_EYESCAN_CFG0 (CH3_EYESCAN_CFG0_REG),
    .CH3_EYESCAN_CFG1 (CH3_EYESCAN_CFG1_REG),
    .CH3_EYESCAN_CFG10 (CH3_EYESCAN_CFG10_REG),
    .CH3_EYESCAN_CFG11 (CH3_EYESCAN_CFG11_REG),
    .CH3_EYESCAN_CFG12 (CH3_EYESCAN_CFG12_REG),
    .CH3_EYESCAN_CFG13 (CH3_EYESCAN_CFG13_REG),
    .CH3_EYESCAN_CFG14 (CH3_EYESCAN_CFG14_REG),
    .CH3_EYESCAN_CFG15 (CH3_EYESCAN_CFG15_REG),
    .CH3_EYESCAN_CFG16 (CH3_EYESCAN_CFG16_REG),
    .CH3_EYESCAN_CFG2 (CH3_EYESCAN_CFG2_REG),
    .CH3_EYESCAN_CFG3 (CH3_EYESCAN_CFG3_REG),
    .CH3_EYESCAN_CFG4 (CH3_EYESCAN_CFG4_REG),
    .CH3_EYESCAN_CFG5 (CH3_EYESCAN_CFG5_REG),
    .CH3_EYESCAN_CFG6 (CH3_EYESCAN_CFG6_REG),
    .CH3_EYESCAN_CFG7 (CH3_EYESCAN_CFG7_REG),
    .CH3_EYESCAN_CFG8 (CH3_EYESCAN_CFG8_REG),
    .CH3_EYESCAN_CFG9 (CH3_EYESCAN_CFG9_REG),
    .CH3_FABRIC_INTF_CFG0 (CH3_FABRIC_INTF_CFG0_REG),
    .CH3_FABRIC_INTF_CFG1 (CH3_FABRIC_INTF_CFG1_REG),
    .CH3_FABRIC_INTF_CFG2 (CH3_FABRIC_INTF_CFG2_REG),
    .CH3_FABRIC_INTF_CFG3 (CH3_FABRIC_INTF_CFG3_REG),
    .CH3_FABRIC_INTF_CFG4 (CH3_FABRIC_INTF_CFG4_REG),
    .CH3_FABRIC_INTF_CFG5 (CH3_FABRIC_INTF_CFG5_REG),
    .CH3_INSTANTIATED (CH3_INSTANTIATED_REG),
    .CH3_MONITOR_CFG (CH3_MONITOR_CFG_REG),
    .CH3_PIPE_CTRL_CFG0 (CH3_PIPE_CTRL_CFG0_REG),
    .CH3_PIPE_CTRL_CFG1 (CH3_PIPE_CTRL_CFG1_REG),
    .CH3_PIPE_CTRL_CFG10 (CH3_PIPE_CTRL_CFG10_REG),
    .CH3_PIPE_CTRL_CFG2 (CH3_PIPE_CTRL_CFG2_REG),
    .CH3_PIPE_CTRL_CFG3 (CH3_PIPE_CTRL_CFG3_REG),
    .CH3_PIPE_CTRL_CFG4 (CH3_PIPE_CTRL_CFG4_REG),
    .CH3_PIPE_CTRL_CFG5 (CH3_PIPE_CTRL_CFG5_REG),
    .CH3_PIPE_CTRL_CFG6 (CH3_PIPE_CTRL_CFG6_REG),
    .CH3_PIPE_CTRL_CFG7 (CH3_PIPE_CTRL_CFG7_REG),
    .CH3_PIPE_CTRL_CFG8 (CH3_PIPE_CTRL_CFG8_REG),
    .CH3_PIPE_CTRL_CFG9 (CH3_PIPE_CTRL_CFG9_REG),
    .CH3_PIPE_TX_EQ_CFG0 (CH3_PIPE_TX_EQ_CFG0_REG),
    .CH3_PIPE_TX_EQ_CFG1 (CH3_PIPE_TX_EQ_CFG1_REG),
    .CH3_PIPE_TX_EQ_CFG2 (CH3_PIPE_TX_EQ_CFG2_REG),
    .CH3_PIPE_TX_EQ_CFG3 (CH3_PIPE_TX_EQ_CFG3_REG),
    .CH3_RESET_BYP_HDSHK_CFG (CH3_RESET_BYP_HDSHK_CFG_REG),
    .CH3_RESET_CFG (CH3_RESET_CFG_REG),
    .CH3_RESET_LOOPER_ID_CFG (CH3_RESET_LOOPER_ID_CFG_REG),
    .CH3_RESET_LOOP_ID_CFG0 (CH3_RESET_LOOP_ID_CFG0_REG),
    .CH3_RESET_LOOP_ID_CFG1 (CH3_RESET_LOOP_ID_CFG1_REG),
    .CH3_RESET_LOOP_ID_CFG2 (CH3_RESET_LOOP_ID_CFG2_REG),
    .CH3_RESET_TIME_CFG0 (CH3_RESET_TIME_CFG0_REG),
    .CH3_RESET_TIME_CFG1 (CH3_RESET_TIME_CFG1_REG),
    .CH3_RESET_TIME_CFG2 (CH3_RESET_TIME_CFG2_REG),
    .CH3_RESET_TIME_CFG3 (CH3_RESET_TIME_CFG3_REG),
    .CH3_RXOUTCLK_FREQ (CH3_RXOUTCLK_FREQ_BIN),
    .CH3_RXOUTCLK_REF_FREQ (CH3_RXOUTCLK_REF_FREQ_BIN),
    .CH3_RXOUTCLK_REF_SOURCE (CH3_RXOUTCLK_REF_SOURCE_REG),
    .CH3_RX_CDR_CFG0 (CH3_RX_CDR_CFG0_REG),
    .CH3_RX_CDR_CFG1 (CH3_RX_CDR_CFG1_REG),
    .CH3_RX_CDR_CFG2 (CH3_RX_CDR_CFG2_REG),
    .CH3_RX_CDR_CFG3 (CH3_RX_CDR_CFG3_REG),
    .CH3_RX_CDR_CFG4 (CH3_RX_CDR_CFG4_REG),
    .CH3_RX_CRC_CFG0 (CH3_RX_CRC_CFG0_REG),
    .CH3_RX_CRC_CFG1 (CH3_RX_CRC_CFG1_REG),
    .CH3_RX_CRC_CFG2 (CH3_RX_CRC_CFG2_REG),
    .CH3_RX_CRC_CFG3 (CH3_RX_CRC_CFG3_REG),
    .CH3_RX_CTLE_CFG0 (CH3_RX_CTLE_CFG0_REG),
    .CH3_RX_CTLE_CFG1 (CH3_RX_CTLE_CFG1_REG),
    .CH3_RX_DACI2V_CFG0 (CH3_RX_DACI2V_CFG0_REG),
    .CH3_RX_DATA_RATE (CH3_RX_DATA_RATE_BIN),
    .CH3_RX_DFE_CFG0 (CH3_RX_DFE_CFG0_REG),
    .CH3_RX_ELASTIC_BUF_CFG0 (CH3_RX_ELASTIC_BUF_CFG0_REG),
    .CH3_RX_ELASTIC_BUF_CFG1 (CH3_RX_ELASTIC_BUF_CFG1_REG),
    .CH3_RX_ELASTIC_BUF_CFG2 (CH3_RX_ELASTIC_BUF_CFG2_REG),
    .CH3_RX_ELASTIC_BUF_CFG3 (CH3_RX_ELASTIC_BUF_CFG3_REG),
    .CH3_RX_ELASTIC_BUF_CFG4 (CH3_RX_ELASTIC_BUF_CFG4_REG),
    .CH3_RX_ELASTIC_BUF_CFG5 (CH3_RX_ELASTIC_BUF_CFG5_REG),
    .CH3_RX_ELASTIC_BUF_CFG6 (CH3_RX_ELASTIC_BUF_CFG6_REG),
    .CH3_RX_ELASTIC_BUF_CFG7 (CH3_RX_ELASTIC_BUF_CFG7_REG),
    .CH3_RX_ELASTIC_BUF_CFG8 (CH3_RX_ELASTIC_BUF_CFG8_REG),
    .CH3_RX_ELASTIC_BUF_CFG9 (CH3_RX_ELASTIC_BUF_CFG9_REG),
    .CH3_RX_MISC_CFG0 (CH3_RX_MISC_CFG0_REG),
    .CH3_RX_OOB_CFG0 (CH3_RX_OOB_CFG0_REG),
    .CH3_RX_OOB_CFG1 (CH3_RX_OOB_CFG1_REG),
    .CH3_RX_PAD_CFG0 (CH3_RX_PAD_CFG0_REG),
    .CH3_RX_PAD_CFG1 (CH3_RX_PAD_CFG1_REG),
    .CH3_RX_PCS_CFG0 (CH3_RX_PCS_CFG0_REG),
    .CH3_RX_PCS_CFG1 (CH3_RX_PCS_CFG1_REG),
    .CH3_RX_PCS_CFG2 (CH3_RX_PCS_CFG2_REG),
    .CH3_RX_PCS_CFG3 (CH3_RX_PCS_CFG3_REG),
    .CH3_RX_PCS_CFG4 (CH3_RX_PCS_CFG4_REG),
    .CH3_RX_PHALIGN_CFG0 (CH3_RX_PHALIGN_CFG0_REG),
    .CH3_RX_PHALIGN_CFG1 (CH3_RX_PHALIGN_CFG1_REG),
    .CH3_RX_PHALIGN_CFG2 (CH3_RX_PHALIGN_CFG2_REG),
    .CH3_RX_PHALIGN_CFG3 (CH3_RX_PHALIGN_CFG3_REG),
    .CH3_RX_PHALIGN_CFG4 (CH3_RX_PHALIGN_CFG4_REG),
    .CH3_RX_PHALIGN_CFG5 (CH3_RX_PHALIGN_CFG5_REG),
    .CH3_SIM_MODE (CH3_SIM_MODE_REG),
    .CH3_SIM_RECEIVER_DETECT_PASS (CH3_SIM_RECEIVER_DETECT_PASS_REG),
    .CH3_SIM_RESET_SPEEDUP (CH3_SIM_RESET_SPEEDUP_REG),
    .CH3_SIM_TX_EIDLE_DRIVE_LEVEL (CH3_SIM_TX_EIDLE_DRIVE_LEVEL_REG),
    .CH3_TXOUTCLK_FREQ (CH3_TXOUTCLK_FREQ_BIN),
    .CH3_TXOUTCLK_REF_FREQ (CH3_TXOUTCLK_REF_FREQ_BIN),
    .CH3_TXOUTCLK_REF_SOURCE (CH3_TXOUTCLK_REF_SOURCE_REG),
    .CH3_TX_10G_CFG0 (CH3_TX_10G_CFG0_REG),
    .CH3_TX_10G_CFG1 (CH3_TX_10G_CFG1_REG),
    .CH3_TX_10G_CFG2 (CH3_TX_10G_CFG2_REG),
    .CH3_TX_10G_CFG3 (CH3_TX_10G_CFG3_REG),
    .CH3_TX_ANA_CFG0 (CH3_TX_ANA_CFG0_REG),
    .CH3_TX_CRC_CFG0 (CH3_TX_CRC_CFG0_REG),
    .CH3_TX_CRC_CFG1 (CH3_TX_CRC_CFG1_REG),
    .CH3_TX_CRC_CFG2 (CH3_TX_CRC_CFG2_REG),
    .CH3_TX_CRC_CFG3 (CH3_TX_CRC_CFG3_REG),
    .CH3_TX_DATA_RATE (CH3_TX_DATA_RATE_BIN),
    .CH3_TX_DRV_CFG0 (CH3_TX_DRV_CFG0_REG),
    .CH3_TX_DRV_CFG1 (CH3_TX_DRV_CFG1_REG),
    .CH3_TX_PCS_CFG0 (CH3_TX_PCS_CFG0_REG),
    .CH3_TX_PCS_CFG1 (CH3_TX_PCS_CFG1_REG),
    .CH3_TX_PCS_CFG2 (CH3_TX_PCS_CFG2_REG),
    .CH3_TX_PCS_CFG3 (CH3_TX_PCS_CFG3_REG),
    .CH3_TX_PHALIGN_CFG0 (CH3_TX_PHALIGN_CFG0_REG),
    .CH3_TX_PHALIGN_CFG1 (CH3_TX_PHALIGN_CFG1_REG),
    .CH3_TX_PHALIGN_CFG2 (CH3_TX_PHALIGN_CFG2_REG),
    .CH3_TX_PHALIGN_CFG3 (CH3_TX_PHALIGN_CFG3_REG),
    .CH3_TX_PHALIGN_CFG4 (CH3_TX_PHALIGN_CFG4_REG),
    .CH3_TX_PHALIGN_CFG5 (CH3_TX_PHALIGN_CFG5_REG),
    .CH3_TX_PIPPM_CFG (CH3_TX_PIPPM_CFG_REG),
    .CH3_TX_SER_CFG0 (CH3_TX_SER_CFG0_REG),
    .CTRL_RSV_CFG0 (CTRL_RSV_CFG0_REG),
    .CTRL_RSV_CFG1 (CTRL_RSV_CFG1_REG),
    .HS0_LCPLL_IPS_PIN_EN (HS0_LCPLL_IPS_PIN_EN_REG),
    .HS0_LCPLL_IPS_REFCLK_SEL (HS0_LCPLL_IPS_REFCLK_SEL_REG),
    .HS0_LCPLL_REFCLK_MAP0 (HS0_LCPLL_REFCLK_MAP0_REG),
    .HS0_LCPLL_REFCLK_MAP1 (HS0_LCPLL_REFCLK_MAP1_REG),
    .HS0_LCPLL_REFCLK_MAP2 (HS0_LCPLL_REFCLK_MAP2_REG),
    .HS0_LCPLL_REFCLK_MAP3 (HS0_LCPLL_REFCLK_MAP3_REG),
    .HS0_LCPLL_REFCLK_MAP4 (HS0_LCPLL_REFCLK_MAP4_REG),
    .HS0_LCPLL_REFCLK_MAP5 (HS0_LCPLL_REFCLK_MAP5_REG),
    .HS0_LCPLL_REFCLK_MAP6 (HS0_LCPLL_REFCLK_MAP6_REG),
    .HS0_LCPLL_REFCLK_MAP7 (HS0_LCPLL_REFCLK_MAP7_REG),
    .HS0_RPLL_IPS_PIN_EN (HS0_RPLL_IPS_PIN_EN_REG),
    .HS0_RPLL_IPS_REFCLK_SEL (HS0_RPLL_IPS_REFCLK_SEL_REG),
    .HS0_RPLL_REFCLK_MAP0 (HS0_RPLL_REFCLK_MAP0_REG),
    .HS0_RPLL_REFCLK_MAP1 (HS0_RPLL_REFCLK_MAP1_REG),
    .HS0_RPLL_REFCLK_MAP2 (HS0_RPLL_REFCLK_MAP2_REG),
    .HS0_RPLL_REFCLK_MAP3 (HS0_RPLL_REFCLK_MAP3_REG),
    .HS0_RPLL_REFCLK_MAP4 (HS0_RPLL_REFCLK_MAP4_REG),
    .HS0_RPLL_REFCLK_MAP5 (HS0_RPLL_REFCLK_MAP5_REG),
    .HS0_RPLL_REFCLK_MAP6 (HS0_RPLL_REFCLK_MAP6_REG),
    .HS0_RPLL_REFCLK_MAP7 (HS0_RPLL_REFCLK_MAP7_REG),
    .HS1_LCPLL_IPS_PIN_EN (HS1_LCPLL_IPS_PIN_EN_REG),
    .HS1_LCPLL_IPS_REFCLK_SEL (HS1_LCPLL_IPS_REFCLK_SEL_REG),
    .HS1_LCPLL_REFCLK_MAP0 (HS1_LCPLL_REFCLK_MAP0_REG),
    .HS1_LCPLL_REFCLK_MAP1 (HS1_LCPLL_REFCLK_MAP1_REG),
    .HS1_LCPLL_REFCLK_MAP2 (HS1_LCPLL_REFCLK_MAP2_REG),
    .HS1_LCPLL_REFCLK_MAP3 (HS1_LCPLL_REFCLK_MAP3_REG),
    .HS1_LCPLL_REFCLK_MAP4 (HS1_LCPLL_REFCLK_MAP4_REG),
    .HS1_LCPLL_REFCLK_MAP5 (HS1_LCPLL_REFCLK_MAP5_REG),
    .HS1_LCPLL_REFCLK_MAP6 (HS1_LCPLL_REFCLK_MAP6_REG),
    .HS1_LCPLL_REFCLK_MAP7 (HS1_LCPLL_REFCLK_MAP7_REG),
    .HS1_RPLL_IPS_PIN_EN (HS1_RPLL_IPS_PIN_EN_REG),
    .HS1_RPLL_IPS_REFCLK_SEL (HS1_RPLL_IPS_REFCLK_SEL_REG),
    .HS1_RPLL_REFCLK_MAP0 (HS1_RPLL_REFCLK_MAP0_REG),
    .HS1_RPLL_REFCLK_MAP1 (HS1_RPLL_REFCLK_MAP1_REG),
    .HS1_RPLL_REFCLK_MAP2 (HS1_RPLL_REFCLK_MAP2_REG),
    .HS1_RPLL_REFCLK_MAP3 (HS1_RPLL_REFCLK_MAP3_REG),
    .HS1_RPLL_REFCLK_MAP4 (HS1_RPLL_REFCLK_MAP4_REG),
    .HS1_RPLL_REFCLK_MAP5 (HS1_RPLL_REFCLK_MAP5_REG),
    .HS1_RPLL_REFCLK_MAP6 (HS1_RPLL_REFCLK_MAP6_REG),
    .HS1_RPLL_REFCLK_MAP7 (HS1_RPLL_REFCLK_MAP7_REG),
    .HSCLK0_HSDIST_CFG (HSCLK0_HSDIST_CFG_REG),
    .HSCLK0_INSTANTIATED (HSCLK0_INSTANTIATED_REG),
    .HSCLK0_LCPLL_CFG0 (HSCLK0_LCPLL_CFG0_REG),
    .HSCLK0_LCPLL_CFG1 (HSCLK0_LCPLL_CFG1_REG),
    .HSCLK0_LCPLL_CFG2 (HSCLK0_LCPLL_CFG2_REG),
    .HSCLK0_LCPLL_LGC_CFG0 (HSCLK0_LCPLL_LGC_CFG0_REG),
    .HSCLK0_LCPLL_LGC_CFG1 (HSCLK0_LCPLL_LGC_CFG1_REG),
    .HSCLK0_LCPLL_LGC_CFG2 (HSCLK0_LCPLL_LGC_CFG2_REG),
    .HSCLK0_RPLL_CFG0 (HSCLK0_RPLL_CFG0_REG),
    .HSCLK0_RPLL_CFG1 (HSCLK0_RPLL_CFG1_REG),
    .HSCLK0_RPLL_CFG2 (HSCLK0_RPLL_CFG2_REG),
    .HSCLK0_RPLL_LGC_CFG0 (HSCLK0_RPLL_LGC_CFG0_REG),
    .HSCLK0_RPLL_LGC_CFG1 (HSCLK0_RPLL_LGC_CFG1_REG),
    .HSCLK0_RPLL_LGC_CFG2 (HSCLK0_RPLL_LGC_CFG2_REG),
    .HSCLK0_RXRECCLK_SEL (HSCLK0_RXRECCLK_SEL_REG),
    .HSCLK1_HSDIST_CFG (HSCLK1_HSDIST_CFG_REG),
    .HSCLK1_INSTANTIATED (HSCLK1_INSTANTIATED_REG),
    .HSCLK1_LCPLL_CFG0 (HSCLK1_LCPLL_CFG0_REG),
    .HSCLK1_LCPLL_CFG1 (HSCLK1_LCPLL_CFG1_REG),
    .HSCLK1_LCPLL_CFG2 (HSCLK1_LCPLL_CFG2_REG),
    .HSCLK1_LCPLL_LGC_CFG0 (HSCLK1_LCPLL_LGC_CFG0_REG),
    .HSCLK1_LCPLL_LGC_CFG1 (HSCLK1_LCPLL_LGC_CFG1_REG),
    .HSCLK1_LCPLL_LGC_CFG2 (HSCLK1_LCPLL_LGC_CFG2_REG),
    .HSCLK1_RPLL_CFG0 (HSCLK1_RPLL_CFG0_REG),
    .HSCLK1_RPLL_CFG1 (HSCLK1_RPLL_CFG1_REG),
    .HSCLK1_RPLL_CFG2 (HSCLK1_RPLL_CFG2_REG),
    .HSCLK1_RPLL_LGC_CFG0 (HSCLK1_RPLL_LGC_CFG0_REG),
    .HSCLK1_RPLL_LGC_CFG1 (HSCLK1_RPLL_LGC_CFG1_REG),
    .HSCLK1_RPLL_LGC_CFG2 (HSCLK1_RPLL_LGC_CFG2_REG),
    .HSCLK1_RXRECCLK_SEL (HSCLK1_RXRECCLK_SEL_REG),
    .MST_RESET_CFG (MST_RESET_CFG_REG),
    .PIN_CFG0 (PIN_CFG0_REG),
    .POR_CFG (POR_CFG_REG),
    .QUAD_INSTANTIATED (QUAD_INSTANTIATED_REG),
    .QUAD_SIM_MODE (QUAD_SIM_MODE_REG),
    .QUAD_SIM_RESET_SPEEDUP (QUAD_SIM_RESET_SPEEDUP_REG),
    .RCALBG0_CFG0 (RCALBG0_CFG0_REG),
    .RCALBG0_CFG1 (RCALBG0_CFG1_REG),
    .RCALBG0_CFG2 (RCALBG0_CFG2_REG),
    .RCALBG0_CFG3 (RCALBG0_CFG3_REG),
    .RCALBG0_CFG4 (RCALBG0_CFG4_REG),
    .RCALBG0_CFG5 (RCALBG0_CFG5_REG),
    .RCALBG1_CFG0 (RCALBG1_CFG0_REG),
    .RCALBG1_CFG1 (RCALBG1_CFG1_REG),
    .RCALBG1_CFG2 (RCALBG1_CFG2_REG),
    .RCALBG1_CFG3 (RCALBG1_CFG3_REG),
    .RCALBG1_CFG4 (RCALBG1_CFG4_REG),
    .RCALBG1_CFG5 (RCALBG1_CFG5_REG),
    .RXRSTDONE_DIST_SEL (RXRSTDONE_DIST_SEL_REG),
    .SIM_VERSION (SIM_VERSION_REG),
    .TERMPROG_CFG (TERMPROG_CFG_REG),
    .TXRSTDONE_DIST_SEL (TXRSTDONE_DIST_SEL_REG),
    .UB_CFG0 (UB_CFG0_REG),
    .APB3PRDATA (APB3PRDATA_out),
    .APB3PREADY (APB3PREADY_out),
    .APB3PSLVERR (APB3PSLVERR_out),
    .CH0_BUFGTCE (CH0_BUFGTCE_out),
    .CH0_BUFGTCEMASK (CH0_BUFGTCEMASK_out),
    .CH0_BUFGTDIV (CH0_BUFGTDIV_out),
    .CH0_BUFGTRST (CH0_BUFGTRST_out),
    .CH0_BUFGTRSTMASK (CH0_BUFGTRSTMASK_out),
    .CH0_DMONITOROUT (CH0_DMONITOROUT_out),
    .CH0_DMONITOROUTCLK (CH0_DMONITOROUTCLK_out),
    .CH0_EYESCANDATAERROR (CH0_EYESCANDATAERROR_out),
    .CH0_GTYPTXN (CH0_GTYPTXN_out),
    .CH0_GTYPTXP (CH0_GTYPTXP_out),
    .CH0_ILORESETDONE (CH0_ILORESETDONE_out),
    .CH0_PCSRSVDOUT (CH0_PCSRSVDOUT_out),
    .CH0_PHYREADY (CH0_PHYREADY_out),
    .CH0_PHYSTATUS (CH0_PHYSTATUS_out),
    .CH0_PINRSVDAS (CH0_PINRSVDAS_out),
    .CH0_REFDEBUGOUT (CH0_REFDEBUGOUT_out),
    .CH0_RESETEXCEPTION (CH0_RESETEXCEPTION_out),
    .CH0_RX10GSTAT (CH0_RX10GSTAT_out),
    .CH0_RXBUFSTATUS (CH0_RXBUFSTATUS_out),
    .CH0_RXBYTEISALIGNED (CH0_RXBYTEISALIGNED_out),
    .CH0_RXBYTEREALIGN (CH0_RXBYTEREALIGN_out),
    .CH0_RXCDRLOCK (CH0_RXCDRLOCK_out),
    .CH0_RXCDRPHDONE (CH0_RXCDRPHDONE_out),
    .CH0_RXCHANBONDSEQ (CH0_RXCHANBONDSEQ_out),
    .CH0_RXCHANISALIGNED (CH0_RXCHANISALIGNED_out),
    .CH0_RXCHANREALIGN (CH0_RXCHANREALIGN_out),
    .CH0_RXCHBONDO (CH0_RXCHBONDO_out),
    .CH0_RXCLKCORCNT (CH0_RXCLKCORCNT_out),
    .CH0_RXCOMINITDET (CH0_RXCOMINITDET_out),
    .CH0_RXCOMMADET (CH0_RXCOMMADET_out),
    .CH0_RXCOMSASDET (CH0_RXCOMSASDET_out),
    .CH0_RXCOMWAKEDET (CH0_RXCOMWAKEDET_out),
    .CH0_RXCTRL0 (CH0_RXCTRL0_out),
    .CH0_RXCTRL1 (CH0_RXCTRL1_out),
    .CH0_RXCTRL2 (CH0_RXCTRL2_out),
    .CH0_RXCTRL3 (CH0_RXCTRL3_out),
    .CH0_RXDAPIRESETDONE (CH0_RXDAPIRESETDONE_out),
    .CH0_RXDATA (CH0_RXDATA_out),
    .CH0_RXDATAVALID (CH0_RXDATAVALID_out),
    .CH0_RXDEBUGPCSOUT (CH0_RXDEBUGPCSOUT_out),
    .CH0_RXDLYALIGNERR (CH0_RXDLYALIGNERR_out),
    .CH0_RXDLYALIGNPROG (CH0_RXDLYALIGNPROG_out),
    .CH0_RXELECIDLE (CH0_RXELECIDLE_out),
    .CH0_RXFINEALIGNDONE (CH0_RXFINEALIGNDONE_out),
    .CH0_RXHEADER (CH0_RXHEADER_out),
    .CH0_RXHEADERVALID (CH0_RXHEADERVALID_out),
    .CH0_RXOSINTDONE (CH0_RXOSINTDONE_out),
    .CH0_RXOUTCLK (CH0_RXOUTCLK_out),
    .CH0_RXPHALIGNDONE (CH0_RXPHALIGNDONE_out),
    .CH0_RXPHALIGNERR (CH0_RXPHALIGNERR_out),
    .CH0_RXPHDLYRESETDONE (CH0_RXPHDLYRESETDONE_out),
    .CH0_RXPHSETINITDONE (CH0_RXPHSETINITDONE_out),
    .CH0_RXPHSHIFT180DONE (CH0_RXPHSHIFT180DONE_out),
    .CH0_RXPKDET (CH0_RXPKDET_out),
    .CH0_RXPMARESETDONE (CH0_RXPMARESETDONE_out),
    .CH0_RXPRBSERR (CH0_RXPRBSERR_out),
    .CH0_RXPRBSLOCKED (CH0_RXPRBSLOCKED_out),
    .CH0_RXPROGDIVRESETDONE (CH0_RXPROGDIVRESETDONE_out),
    .CH0_RXQPISENN (CH0_RXQPISENN_out),
    .CH0_RXQPISENP (CH0_RXQPISENP_out),
    .CH0_RXRESETDONE (CH0_RXRESETDONE_out),
    .CH0_RXSIMPLEXPHYSTATUS (CH0_RXSIMPLEXPHYSTATUS_out),
    .CH0_RXSLIDERDY (CH0_RXSLIDERDY_out),
    .CH0_RXSLIPDONE (CH0_RXSLIPDONE_out),
    .CH0_RXSTARTOFSEQ (CH0_RXSTARTOFSEQ_out),
    .CH0_RXSTATUS (CH0_RXSTATUS_out),
    .CH0_RXSYNCDONE (CH0_RXSYNCDONE_out),
    .CH0_RXVALID (CH0_RXVALID_out),
    .CH0_SCANCNTRLOUT (CH0_SCANCNTRLOUT_out),
    .CH0_SCANOUT (CH0_SCANOUT_out),
    .CH0_TX10GSTAT (CH0_TX10GSTAT_out),
    .CH0_TXBUFSTATUS (CH0_TXBUFSTATUS_out),
    .CH0_TXCOMFINISH (CH0_TXCOMFINISH_out),
    .CH0_TXDAPIRESETDONE (CH0_TXDAPIRESETDONE_out),
    .CH0_TXDCCDONE (CH0_TXDCCDONE_out),
    .CH0_TXDEBUGPCSOUT (CH0_TXDEBUGPCSOUT_out),
    .CH0_TXDLYALIGNERR (CH0_TXDLYALIGNERR_out),
    .CH0_TXDLYALIGNPROG (CH0_TXDLYALIGNPROG_out),
    .CH0_TXOUTCLK (CH0_TXOUTCLK_out),
    .CH0_TXPHALIGNDONE (CH0_TXPHALIGNDONE_out),
    .CH0_TXPHALIGNERR (CH0_TXPHALIGNERR_out),
    .CH0_TXPHALIGNOUTRSVD (CH0_TXPHALIGNOUTRSVD_out),
    .CH0_TXPHDLYRESETDONE (CH0_TXPHDLYRESETDONE_out),
    .CH0_TXPHSETINITDONE (CH0_TXPHSETINITDONE_out),
    .CH0_TXPHSHIFT180DONE (CH0_TXPHSHIFT180DONE_out),
    .CH0_TXPMARESETDONE (CH0_TXPMARESETDONE_out),
    .CH0_TXPROGDIVRESETDONE (CH0_TXPROGDIVRESETDONE_out),
    .CH0_TXQPISENN (CH0_TXQPISENN_out),
    .CH0_TXQPISENP (CH0_TXQPISENP_out),
    .CH0_TXRESETDONE (CH0_TXRESETDONE_out),
    .CH0_TXSIMPLEXPHYSTATUS (CH0_TXSIMPLEXPHYSTATUS_out),
    .CH0_TXSWINGOUTHIGH (CH0_TXSWINGOUTHIGH_out),
    .CH0_TXSWINGOUTLOW (CH0_TXSWINGOUTLOW_out),
    .CH0_TXSYNCDONE (CH0_TXSYNCDONE_out),
    .CH0_XPIPE5_PIPELINE_EN (CH0_XPIPE5_PIPELINE_EN_out),
    .CH1_BUFGTCE (CH1_BUFGTCE_out),
    .CH1_BUFGTCEMASK (CH1_BUFGTCEMASK_out),
    .CH1_BUFGTDIV (CH1_BUFGTDIV_out),
    .CH1_BUFGTRST (CH1_BUFGTRST_out),
    .CH1_BUFGTRSTMASK (CH1_BUFGTRSTMASK_out),
    .CH1_DMONITOROUT (CH1_DMONITOROUT_out),
    .CH1_DMONITOROUTCLK (CH1_DMONITOROUTCLK_out),
    .CH1_EYESCANDATAERROR (CH1_EYESCANDATAERROR_out),
    .CH1_GTYPTXN (CH1_GTYPTXN_out),
    .CH1_GTYPTXP (CH1_GTYPTXP_out),
    .CH1_ILORESETDONE (CH1_ILORESETDONE_out),
    .CH1_PCSRSVDOUT (CH1_PCSRSVDOUT_out),
    .CH1_PHYREADY (CH1_PHYREADY_out),
    .CH1_PHYSTATUS (CH1_PHYSTATUS_out),
    .CH1_PINRSVDAS (CH1_PINRSVDAS_out),
    .CH1_REFDEBUGOUT (CH1_REFDEBUGOUT_out),
    .CH1_RESETEXCEPTION (CH1_RESETEXCEPTION_out),
    .CH1_RX10GSTAT (CH1_RX10GSTAT_out),
    .CH1_RXBUFSTATUS (CH1_RXBUFSTATUS_out),
    .CH1_RXBYTEISALIGNED (CH1_RXBYTEISALIGNED_out),
    .CH1_RXBYTEREALIGN (CH1_RXBYTEREALIGN_out),
    .CH1_RXCDRLOCK (CH1_RXCDRLOCK_out),
    .CH1_RXCDRPHDONE (CH1_RXCDRPHDONE_out),
    .CH1_RXCHANBONDSEQ (CH1_RXCHANBONDSEQ_out),
    .CH1_RXCHANISALIGNED (CH1_RXCHANISALIGNED_out),
    .CH1_RXCHANREALIGN (CH1_RXCHANREALIGN_out),
    .CH1_RXCHBONDO (CH1_RXCHBONDO_out),
    .CH1_RXCLKCORCNT (CH1_RXCLKCORCNT_out),
    .CH1_RXCOMINITDET (CH1_RXCOMINITDET_out),
    .CH1_RXCOMMADET (CH1_RXCOMMADET_out),
    .CH1_RXCOMSASDET (CH1_RXCOMSASDET_out),
    .CH1_RXCOMWAKEDET (CH1_RXCOMWAKEDET_out),
    .CH1_RXCTRL0 (CH1_RXCTRL0_out),
    .CH1_RXCTRL1 (CH1_RXCTRL1_out),
    .CH1_RXCTRL2 (CH1_RXCTRL2_out),
    .CH1_RXCTRL3 (CH1_RXCTRL3_out),
    .CH1_RXDAPIRESETDONE (CH1_RXDAPIRESETDONE_out),
    .CH1_RXDATA (CH1_RXDATA_out),
    .CH1_RXDATAVALID (CH1_RXDATAVALID_out),
    .CH1_RXDEBUGPCSOUT (CH1_RXDEBUGPCSOUT_out),
    .CH1_RXDLYALIGNERR (CH1_RXDLYALIGNERR_out),
    .CH1_RXDLYALIGNPROG (CH1_RXDLYALIGNPROG_out),
    .CH1_RXELECIDLE (CH1_RXELECIDLE_out),
    .CH1_RXFINEALIGNDONE (CH1_RXFINEALIGNDONE_out),
    .CH1_RXHEADER (CH1_RXHEADER_out),
    .CH1_RXHEADERVALID (CH1_RXHEADERVALID_out),
    .CH1_RXOSINTDONE (CH1_RXOSINTDONE_out),
    .CH1_RXOUTCLK (CH1_RXOUTCLK_out),
    .CH1_RXPHALIGNDONE (CH1_RXPHALIGNDONE_out),
    .CH1_RXPHALIGNERR (CH1_RXPHALIGNERR_out),
    .CH1_RXPHDLYRESETDONE (CH1_RXPHDLYRESETDONE_out),
    .CH1_RXPHSETINITDONE (CH1_RXPHSETINITDONE_out),
    .CH1_RXPHSHIFT180DONE (CH1_RXPHSHIFT180DONE_out),
    .CH1_RXPKDET (CH1_RXPKDET_out),
    .CH1_RXPMARESETDONE (CH1_RXPMARESETDONE_out),
    .CH1_RXPRBSERR (CH1_RXPRBSERR_out),
    .CH1_RXPRBSLOCKED (CH1_RXPRBSLOCKED_out),
    .CH1_RXPROGDIVRESETDONE (CH1_RXPROGDIVRESETDONE_out),
    .CH1_RXQPISENN (CH1_RXQPISENN_out),
    .CH1_RXQPISENP (CH1_RXQPISENP_out),
    .CH1_RXRESETDONE (CH1_RXRESETDONE_out),
    .CH1_RXSIMPLEXPHYSTATUS (CH1_RXSIMPLEXPHYSTATUS_out),
    .CH1_RXSLIDERDY (CH1_RXSLIDERDY_out),
    .CH1_RXSLIPDONE (CH1_RXSLIPDONE_out),
    .CH1_RXSTARTOFSEQ (CH1_RXSTARTOFSEQ_out),
    .CH1_RXSTATUS (CH1_RXSTATUS_out),
    .CH1_RXSYNCDONE (CH1_RXSYNCDONE_out),
    .CH1_RXVALID (CH1_RXVALID_out),
    .CH1_SCANCNTRLOUT (CH1_SCANCNTRLOUT_out),
    .CH1_SCANOUT (CH1_SCANOUT_out),
    .CH1_TX10GSTAT (CH1_TX10GSTAT_out),
    .CH1_TXBUFSTATUS (CH1_TXBUFSTATUS_out),
    .CH1_TXCOMFINISH (CH1_TXCOMFINISH_out),
    .CH1_TXDAPIRESETDONE (CH1_TXDAPIRESETDONE_out),
    .CH1_TXDCCDONE (CH1_TXDCCDONE_out),
    .CH1_TXDEBUGPCSOUT (CH1_TXDEBUGPCSOUT_out),
    .CH1_TXDLYALIGNERR (CH1_TXDLYALIGNERR_out),
    .CH1_TXDLYALIGNPROG (CH1_TXDLYALIGNPROG_out),
    .CH1_TXOUTCLK (CH1_TXOUTCLK_out),
    .CH1_TXPHALIGNDONE (CH1_TXPHALIGNDONE_out),
    .CH1_TXPHALIGNERR (CH1_TXPHALIGNERR_out),
    .CH1_TXPHALIGNOUTRSVD (CH1_TXPHALIGNOUTRSVD_out),
    .CH1_TXPHDLYRESETDONE (CH1_TXPHDLYRESETDONE_out),
    .CH1_TXPHSETINITDONE (CH1_TXPHSETINITDONE_out),
    .CH1_TXPHSHIFT180DONE (CH1_TXPHSHIFT180DONE_out),
    .CH1_TXPMARESETDONE (CH1_TXPMARESETDONE_out),
    .CH1_TXPROGDIVRESETDONE (CH1_TXPROGDIVRESETDONE_out),
    .CH1_TXQPISENN (CH1_TXQPISENN_out),
    .CH1_TXQPISENP (CH1_TXQPISENP_out),
    .CH1_TXRESETDONE (CH1_TXRESETDONE_out),
    .CH1_TXSIMPLEXPHYSTATUS (CH1_TXSIMPLEXPHYSTATUS_out),
    .CH1_TXSWINGOUTHIGH (CH1_TXSWINGOUTHIGH_out),
    .CH1_TXSWINGOUTLOW (CH1_TXSWINGOUTLOW_out),
    .CH1_TXSYNCDONE (CH1_TXSYNCDONE_out),
    .CH1_XPIPE5_PIPELINE_EN (CH1_XPIPE5_PIPELINE_EN_out),
    .CH2_BUFGTCE (CH2_BUFGTCE_out),
    .CH2_BUFGTCEMASK (CH2_BUFGTCEMASK_out),
    .CH2_BUFGTDIV (CH2_BUFGTDIV_out),
    .CH2_BUFGTRST (CH2_BUFGTRST_out),
    .CH2_BUFGTRSTMASK (CH2_BUFGTRSTMASK_out),
    .CH2_DMONITOROUT (CH2_DMONITOROUT_out),
    .CH2_DMONITOROUTCLK (CH2_DMONITOROUTCLK_out),
    .CH2_EYESCANDATAERROR (CH2_EYESCANDATAERROR_out),
    .CH2_GTYPTXN (CH2_GTYPTXN_out),
    .CH2_GTYPTXP (CH2_GTYPTXP_out),
    .CH2_ILORESETDONE (CH2_ILORESETDONE_out),
    .CH2_PCSRSVDOUT (CH2_PCSRSVDOUT_out),
    .CH2_PHYREADY (CH2_PHYREADY_out),
    .CH2_PHYSTATUS (CH2_PHYSTATUS_out),
    .CH2_PINRSVDAS (CH2_PINRSVDAS_out),
    .CH2_REFDEBUGOUT (CH2_REFDEBUGOUT_out),
    .CH2_RESETEXCEPTION (CH2_RESETEXCEPTION_out),
    .CH2_RX10GSTAT (CH2_RX10GSTAT_out),
    .CH2_RXBUFSTATUS (CH2_RXBUFSTATUS_out),
    .CH2_RXBYTEISALIGNED (CH2_RXBYTEISALIGNED_out),
    .CH2_RXBYTEREALIGN (CH2_RXBYTEREALIGN_out),
    .CH2_RXCDRLOCK (CH2_RXCDRLOCK_out),
    .CH2_RXCDRPHDONE (CH2_RXCDRPHDONE_out),
    .CH2_RXCHANBONDSEQ (CH2_RXCHANBONDSEQ_out),
    .CH2_RXCHANISALIGNED (CH2_RXCHANISALIGNED_out),
    .CH2_RXCHANREALIGN (CH2_RXCHANREALIGN_out),
    .CH2_RXCHBONDO (CH2_RXCHBONDO_out),
    .CH2_RXCLKCORCNT (CH2_RXCLKCORCNT_out),
    .CH2_RXCOMINITDET (CH2_RXCOMINITDET_out),
    .CH2_RXCOMMADET (CH2_RXCOMMADET_out),
    .CH2_RXCOMSASDET (CH2_RXCOMSASDET_out),
    .CH2_RXCOMWAKEDET (CH2_RXCOMWAKEDET_out),
    .CH2_RXCTRL0 (CH2_RXCTRL0_out),
    .CH2_RXCTRL1 (CH2_RXCTRL1_out),
    .CH2_RXCTRL2 (CH2_RXCTRL2_out),
    .CH2_RXCTRL3 (CH2_RXCTRL3_out),
    .CH2_RXDAPIRESETDONE (CH2_RXDAPIRESETDONE_out),
    .CH2_RXDATA (CH2_RXDATA_out),
    .CH2_RXDATAVALID (CH2_RXDATAVALID_out),
    .CH2_RXDEBUGPCSOUT (CH2_RXDEBUGPCSOUT_out),
    .CH2_RXDLYALIGNERR (CH2_RXDLYALIGNERR_out),
    .CH2_RXDLYALIGNPROG (CH2_RXDLYALIGNPROG_out),
    .CH2_RXELECIDLE (CH2_RXELECIDLE_out),
    .CH2_RXFINEALIGNDONE (CH2_RXFINEALIGNDONE_out),
    .CH2_RXHEADER (CH2_RXHEADER_out),
    .CH2_RXHEADERVALID (CH2_RXHEADERVALID_out),
    .CH2_RXOSINTDONE (CH2_RXOSINTDONE_out),
    .CH2_RXOUTCLK (CH2_RXOUTCLK_out),
    .CH2_RXPHALIGNDONE (CH2_RXPHALIGNDONE_out),
    .CH2_RXPHALIGNERR (CH2_RXPHALIGNERR_out),
    .CH2_RXPHDLYRESETDONE (CH2_RXPHDLYRESETDONE_out),
    .CH2_RXPHSETINITDONE (CH2_RXPHSETINITDONE_out),
    .CH2_RXPHSHIFT180DONE (CH2_RXPHSHIFT180DONE_out),
    .CH2_RXPKDET (CH2_RXPKDET_out),
    .CH2_RXPMARESETDONE (CH2_RXPMARESETDONE_out),
    .CH2_RXPRBSERR (CH2_RXPRBSERR_out),
    .CH2_RXPRBSLOCKED (CH2_RXPRBSLOCKED_out),
    .CH2_RXPROGDIVRESETDONE (CH2_RXPROGDIVRESETDONE_out),
    .CH2_RXQPISENN (CH2_RXQPISENN_out),
    .CH2_RXQPISENP (CH2_RXQPISENP_out),
    .CH2_RXRESETDONE (CH2_RXRESETDONE_out),
    .CH2_RXSIMPLEXPHYSTATUS (CH2_RXSIMPLEXPHYSTATUS_out),
    .CH2_RXSLIDERDY (CH2_RXSLIDERDY_out),
    .CH2_RXSLIPDONE (CH2_RXSLIPDONE_out),
    .CH2_RXSTARTOFSEQ (CH2_RXSTARTOFSEQ_out),
    .CH2_RXSTATUS (CH2_RXSTATUS_out),
    .CH2_RXSYNCDONE (CH2_RXSYNCDONE_out),
    .CH2_RXVALID (CH2_RXVALID_out),
    .CH2_SCANCNTRLOUT (CH2_SCANCNTRLOUT_out),
    .CH2_SCANOUT (CH2_SCANOUT_out),
    .CH2_TX10GSTAT (CH2_TX10GSTAT_out),
    .CH2_TXBUFSTATUS (CH2_TXBUFSTATUS_out),
    .CH2_TXCOMFINISH (CH2_TXCOMFINISH_out),
    .CH2_TXDAPIRESETDONE (CH2_TXDAPIRESETDONE_out),
    .CH2_TXDCCDONE (CH2_TXDCCDONE_out),
    .CH2_TXDEBUGPCSOUT (CH2_TXDEBUGPCSOUT_out),
    .CH2_TXDLYALIGNERR (CH2_TXDLYALIGNERR_out),
    .CH2_TXDLYALIGNPROG (CH2_TXDLYALIGNPROG_out),
    .CH2_TXOUTCLK (CH2_TXOUTCLK_out),
    .CH2_TXPHALIGNDONE (CH2_TXPHALIGNDONE_out),
    .CH2_TXPHALIGNERR (CH2_TXPHALIGNERR_out),
    .CH2_TXPHALIGNOUTRSVD (CH2_TXPHALIGNOUTRSVD_out),
    .CH2_TXPHDLYRESETDONE (CH2_TXPHDLYRESETDONE_out),
    .CH2_TXPHSETINITDONE (CH2_TXPHSETINITDONE_out),
    .CH2_TXPHSHIFT180DONE (CH2_TXPHSHIFT180DONE_out),
    .CH2_TXPMARESETDONE (CH2_TXPMARESETDONE_out),
    .CH2_TXPROGDIVRESETDONE (CH2_TXPROGDIVRESETDONE_out),
    .CH2_TXQPISENN (CH2_TXQPISENN_out),
    .CH2_TXQPISENP (CH2_TXQPISENP_out),
    .CH2_TXRESETDONE (CH2_TXRESETDONE_out),
    .CH2_TXSIMPLEXPHYSTATUS (CH2_TXSIMPLEXPHYSTATUS_out),
    .CH2_TXSWINGOUTHIGH (CH2_TXSWINGOUTHIGH_out),
    .CH2_TXSWINGOUTLOW (CH2_TXSWINGOUTLOW_out),
    .CH2_TXSYNCDONE (CH2_TXSYNCDONE_out),
    .CH2_XPIPE5_PIPELINE_EN (CH2_XPIPE5_PIPELINE_EN_out),
    .CH3_BUFGTCE (CH3_BUFGTCE_out),
    .CH3_BUFGTCEMASK (CH3_BUFGTCEMASK_out),
    .CH3_BUFGTDIV (CH3_BUFGTDIV_out),
    .CH3_BUFGTRST (CH3_BUFGTRST_out),
    .CH3_BUFGTRSTMASK (CH3_BUFGTRSTMASK_out),
    .CH3_DMONITOROUT (CH3_DMONITOROUT_out),
    .CH3_DMONITOROUTCLK (CH3_DMONITOROUTCLK_out),
    .CH3_EYESCANDATAERROR (CH3_EYESCANDATAERROR_out),
    .CH3_GTYPTXN (CH3_GTYPTXN_out),
    .CH3_GTYPTXP (CH3_GTYPTXP_out),
    .CH3_ILORESETDONE (CH3_ILORESETDONE_out),
    .CH3_PCSRSVDOUT (CH3_PCSRSVDOUT_out),
    .CH3_PHYREADY (CH3_PHYREADY_out),
    .CH3_PHYSTATUS (CH3_PHYSTATUS_out),
    .CH3_PINRSVDAS (CH3_PINRSVDAS_out),
    .CH3_REFDEBUGOUT (CH3_REFDEBUGOUT_out),
    .CH3_RESETEXCEPTION (CH3_RESETEXCEPTION_out),
    .CH3_RX10GSTAT (CH3_RX10GSTAT_out),
    .CH3_RXBUFSTATUS (CH3_RXBUFSTATUS_out),
    .CH3_RXBYTEISALIGNED (CH3_RXBYTEISALIGNED_out),
    .CH3_RXBYTEREALIGN (CH3_RXBYTEREALIGN_out),
    .CH3_RXCDRLOCK (CH3_RXCDRLOCK_out),
    .CH3_RXCDRPHDONE (CH3_RXCDRPHDONE_out),
    .CH3_RXCHANBONDSEQ (CH3_RXCHANBONDSEQ_out),
    .CH3_RXCHANISALIGNED (CH3_RXCHANISALIGNED_out),
    .CH3_RXCHANREALIGN (CH3_RXCHANREALIGN_out),
    .CH3_RXCHBONDO (CH3_RXCHBONDO_out),
    .CH3_RXCLKCORCNT (CH3_RXCLKCORCNT_out),
    .CH3_RXCOMINITDET (CH3_RXCOMINITDET_out),
    .CH3_RXCOMMADET (CH3_RXCOMMADET_out),
    .CH3_RXCOMSASDET (CH3_RXCOMSASDET_out),
    .CH3_RXCOMWAKEDET (CH3_RXCOMWAKEDET_out),
    .CH3_RXCTRL0 (CH3_RXCTRL0_out),
    .CH3_RXCTRL1 (CH3_RXCTRL1_out),
    .CH3_RXCTRL2 (CH3_RXCTRL2_out),
    .CH3_RXCTRL3 (CH3_RXCTRL3_out),
    .CH3_RXDAPIRESETDONE (CH3_RXDAPIRESETDONE_out),
    .CH3_RXDATA (CH3_RXDATA_out),
    .CH3_RXDATAVALID (CH3_RXDATAVALID_out),
    .CH3_RXDEBUGPCSOUT (CH3_RXDEBUGPCSOUT_out),
    .CH3_RXDLYALIGNERR (CH3_RXDLYALIGNERR_out),
    .CH3_RXDLYALIGNPROG (CH3_RXDLYALIGNPROG_out),
    .CH3_RXELECIDLE (CH3_RXELECIDLE_out),
    .CH3_RXFINEALIGNDONE (CH3_RXFINEALIGNDONE_out),
    .CH3_RXHEADER (CH3_RXHEADER_out),
    .CH3_RXHEADERVALID (CH3_RXHEADERVALID_out),
    .CH3_RXOSINTDONE (CH3_RXOSINTDONE_out),
    .CH3_RXOUTCLK (CH3_RXOUTCLK_out),
    .CH3_RXPHALIGNDONE (CH3_RXPHALIGNDONE_out),
    .CH3_RXPHALIGNERR (CH3_RXPHALIGNERR_out),
    .CH3_RXPHDLYRESETDONE (CH3_RXPHDLYRESETDONE_out),
    .CH3_RXPHSETINITDONE (CH3_RXPHSETINITDONE_out),
    .CH3_RXPHSHIFT180DONE (CH3_RXPHSHIFT180DONE_out),
    .CH3_RXPKDET (CH3_RXPKDET_out),
    .CH3_RXPMARESETDONE (CH3_RXPMARESETDONE_out),
    .CH3_RXPRBSERR (CH3_RXPRBSERR_out),
    .CH3_RXPRBSLOCKED (CH3_RXPRBSLOCKED_out),
    .CH3_RXPROGDIVRESETDONE (CH3_RXPROGDIVRESETDONE_out),
    .CH3_RXQPISENN (CH3_RXQPISENN_out),
    .CH3_RXQPISENP (CH3_RXQPISENP_out),
    .CH3_RXRESETDONE (CH3_RXRESETDONE_out),
    .CH3_RXSIMPLEXPHYSTATUS (CH3_RXSIMPLEXPHYSTATUS_out),
    .CH3_RXSLIDERDY (CH3_RXSLIDERDY_out),
    .CH3_RXSLIPDONE (CH3_RXSLIPDONE_out),
    .CH3_RXSTARTOFSEQ (CH3_RXSTARTOFSEQ_out),
    .CH3_RXSTATUS (CH3_RXSTATUS_out),
    .CH3_RXSYNCDONE (CH3_RXSYNCDONE_out),
    .CH3_RXVALID (CH3_RXVALID_out),
    .CH3_SCANCNTRLOUT (CH3_SCANCNTRLOUT_out),
    .CH3_SCANOUT (CH3_SCANOUT_out),
    .CH3_TX10GSTAT (CH3_TX10GSTAT_out),
    .CH3_TXBUFSTATUS (CH3_TXBUFSTATUS_out),
    .CH3_TXCOMFINISH (CH3_TXCOMFINISH_out),
    .CH3_TXDAPIRESETDONE (CH3_TXDAPIRESETDONE_out),
    .CH3_TXDCCDONE (CH3_TXDCCDONE_out),
    .CH3_TXDEBUGPCSOUT (CH3_TXDEBUGPCSOUT_out),
    .CH3_TXDLYALIGNERR (CH3_TXDLYALIGNERR_out),
    .CH3_TXDLYALIGNPROG (CH3_TXDLYALIGNPROG_out),
    .CH3_TXOUTCLK (CH3_TXOUTCLK_out),
    .CH3_TXPHALIGNDONE (CH3_TXPHALIGNDONE_out),
    .CH3_TXPHALIGNERR (CH3_TXPHALIGNERR_out),
    .CH3_TXPHALIGNOUTRSVD (CH3_TXPHALIGNOUTRSVD_out),
    .CH3_TXPHDLYRESETDONE (CH3_TXPHDLYRESETDONE_out),
    .CH3_TXPHSETINITDONE (CH3_TXPHSETINITDONE_out),
    .CH3_TXPHSHIFT180DONE (CH3_TXPHSHIFT180DONE_out),
    .CH3_TXPMARESETDONE (CH3_TXPMARESETDONE_out),
    .CH3_TXPROGDIVRESETDONE (CH3_TXPROGDIVRESETDONE_out),
    .CH3_TXQPISENN (CH3_TXQPISENN_out),
    .CH3_TXQPISENP (CH3_TXQPISENP_out),
    .CH3_TXRESETDONE (CH3_TXRESETDONE_out),
    .CH3_TXSIMPLEXPHYSTATUS (CH3_TXSIMPLEXPHYSTATUS_out),
    .CH3_TXSWINGOUTHIGH (CH3_TXSWINGOUTHIGH_out),
    .CH3_TXSWINGOUTLOW (CH3_TXSWINGOUTLOW_out),
    .CH3_TXSYNCDONE (CH3_TXSYNCDONE_out),
    .CH3_XPIPE5_PIPELINE_EN (CH3_XPIPE5_PIPELINE_EN_out),
    .CORRECTERR (CORRECTERR_out),
    .CTRLRSVDOUT (CTRLRSVDOUT_out),
    .DEBUGTRACETDATA (DEBUGTRACETDATA_out),
    .DEBUGTRACETVALID (DEBUGTRACETVALID_out),
    .GPO (GPO_out),
    .GTPOWERGOOD (GTPOWERGOOD_out),
    .HSCLK0_LCPLLFBCLKLOST (HSCLK0_LCPLLFBCLKLOST_out),
    .HSCLK0_LCPLLLOCK (HSCLK0_LCPLLLOCK_out),
    .HSCLK0_LCPLLREFCLKLOST (HSCLK0_LCPLLREFCLKLOST_out),
    .HSCLK0_LCPLLREFCLKMONITOR (HSCLK0_LCPLLREFCLKMONITOR_out),
    .HSCLK0_RPLLFBCLKLOST (HSCLK0_RPLLFBCLKLOST_out),
    .HSCLK0_RPLLLOCK (HSCLK0_RPLLLOCK_out),
    .HSCLK0_RPLLREFCLKLOST (HSCLK0_RPLLREFCLKLOST_out),
    .HSCLK0_RPLLREFCLKMONITOR (HSCLK0_RPLLREFCLKMONITOR_out),
    .HSCLK0_RXRECCLKOUT0 (HSCLK0_RXRECCLKOUT0_out),
    .HSCLK0_RXRECCLKOUT1 (HSCLK0_RXRECCLKOUT1_out),
    .HSCLK0_RXRECCLKSEL (HSCLK0_RXRECCLKSEL_out),
    .HSCLK1_LCPLLFBCLKLOST (HSCLK1_LCPLLFBCLKLOST_out),
    .HSCLK1_LCPLLLOCK (HSCLK1_LCPLLLOCK_out),
    .HSCLK1_LCPLLREFCLKLOST (HSCLK1_LCPLLREFCLKLOST_out),
    .HSCLK1_LCPLLREFCLKMONITOR (HSCLK1_LCPLLREFCLKMONITOR_out),
    .HSCLK1_RPLLFBCLKLOST (HSCLK1_RPLLFBCLKLOST_out),
    .HSCLK1_RPLLLOCK (HSCLK1_RPLLLOCK_out),
    .HSCLK1_RPLLREFCLKLOST (HSCLK1_RPLLREFCLKLOST_out),
    .HSCLK1_RPLLREFCLKMONITOR (HSCLK1_RPLLREFCLKMONITOR_out),
    .HSCLK1_RXRECCLKOUT0 (HSCLK1_RXRECCLKOUT0_out),
    .HSCLK1_RXRECCLKOUT1 (HSCLK1_RXRECCLKOUT1_out),
    .HSCLK1_RXRECCLKSEL (HSCLK1_RXRECCLKSEL_out),
    .M0_AXIS_TDATA (M0_AXIS_TDATA_out),
    .M0_AXIS_TLAST (M0_AXIS_TLAST_out),
    .M0_AXIS_TVALID (M0_AXIS_TVALID_out),
    .M1_AXIS_TDATA (M1_AXIS_TDATA_out),
    .M1_AXIS_TLAST (M1_AXIS_TLAST_out),
    .M1_AXIS_TVALID (M1_AXIS_TVALID_out),
    .M2_AXIS_TDATA (M2_AXIS_TDATA_out),
    .M2_AXIS_TLAST (M2_AXIS_TLAST_out),
    .M2_AXIS_TVALID (M2_AXIS_TVALID_out),
    .MSTRXRESETDONE (MSTRXRESETDONE_out),
    .MSTTXRESETDONE (MSTTXRESETDONE_out),
    .PIPENORTHOUT (PIPENORTHOUT_out),
    .PIPESOUTHOUT (PIPESOUTHOUT_out),
    .RCALCMP (RCALCMP_out),
    .RCALOUT (RCALOUT_out),
    .REFCLK0_CLKTESTSIGINT (REFCLK0_CLKTESTSIGINT_out),
    .REFCLK0_GTREFCLKPDINT (REFCLK0_GTREFCLKPDINT_out),
    .REFCLK1_CLKTESTSIGINT (REFCLK1_CLKTESTSIGINT_out),
    .REFCLK1_GTREFCLKPDINT (REFCLK1_GTREFCLKPDINT_out),
    .RESETDONE_NORTHOUT (RESETDONE_NORTHOUT_out),
    .RESETDONE_SOUTHOUT (RESETDONE_SOUTHOUT_out),
    .RXMARGINREQACK (RXMARGINREQACK_out),
    .RXMARGINRESCMD (RXMARGINRESCMD_out),
    .RXMARGINRESLANENUM (RXMARGINRESLANENUM_out),
    .RXMARGINRESPAYLD (RXMARGINRESPAYLD_out),
    .RXMARGINRESREQ (RXMARGINRESREQ_out),
    .RXPINORTHOUT (RXPINORTHOUT_out),
    .RXPISOUTHOUT (RXPISOUTHOUT_out),
    .S0_AXIS_TREADY (S0_AXIS_TREADY_out),
    .S1_AXIS_TREADY (S1_AXIS_TREADY_out),
    .S2_AXIS_TREADY (S2_AXIS_TREADY_out),
    .SCANCNTRLOUT (SCANCNTRLOUT_out),
    .SCANOUT (SCANOUT_out),
    .TRIGACKIN0 (TRIGACKIN0_out),
    .TRIGOUT0 (TRIGOUT0_out),
    .TXPINORTHOUT (TXPINORTHOUT_out),
    .TXPISOUTHOUT (TXPISOUTHOUT_out),
    .UBINTERRUPT (UBINTERRUPT_out),
    .UBTXUART (UBTXUART_out),
    .UNCORRECTERR (UNCORRECTERR_out),
    .APB3CLK (APB3CLK_in),
    .APB3PADDR (APB3PADDR_in),
    .APB3PENABLE (APB3PENABLE_in),
    .APB3PRESETN (APB3PRESETN_in),
    .APB3PSEL (APB3PSEL_in),
    .APB3PWDATA (APB3PWDATA_in),
    .APB3PWRITE (APB3PWRITE_in),
    .AXISCLK (AXISCLK_in),
    .BGBYPASSB (BGBYPASSB_in),
    .BGMONITORENB (BGMONITORENB_in),
    .BGPDB (BGPDB_in),
    .BGRCALOVRD (BGRCALOVRD_in),
    .BGRCALOVRDENB (BGRCALOVRDENB_in),
    .CH0_BSR_SERIAL (CH0_BSR_SERIAL_in),
    .CH0_CDRBMCDRREQ (CH0_CDRBMCDRREQ_in),
    .CH0_CDRFREQOS (CH0_CDRFREQOS_in),
    .CH0_CDRINCPCTRL (CH0_CDRINCPCTRL_in),
    .CH0_CDRSTEPDIR (CH0_CDRSTEPDIR_in),
    .CH0_CDRSTEPSQ (CH0_CDRSTEPSQ_in),
    .CH0_CDRSTEPSX (CH0_CDRSTEPSX_in),
    .CH0_CLKRSVD0 (CH0_CLKRSVD0_in),
    .CH0_CLKRSVD1 (CH0_CLKRSVD1_in),
    .CH0_CSSDSTOPCLK (CH0_CSSDSTOPCLK_in),
    .CH0_DFEHOLD (CH0_DFEHOLD_in),
    .CH0_DFEOVRD (CH0_DFEOVRD_in),
    .CH0_DMONFIFORESET (CH0_DMONFIFORESET_in),
    .CH0_DMONITORCLK (CH0_DMONITORCLK_in),
    .CH0_EDTUPDATEB (CH0_EDTUPDATEB_in),
    .CH0_EYESCANRESET (CH0_EYESCANRESET_in),
    .CH0_EYESCANTRIGGER (CH0_EYESCANTRIGGER_in),
    .CH0_GTRSVD (CH0_GTRSVD_in),
    .CH0_GTRXRESET (CH0_GTRXRESET_in),
    .CH0_GTTXRESET (CH0_GTTXRESET_in),
    .CH0_GTYPRXN (CH0_GTYPRXN_in),
    .CH0_GTYPRXP (CH0_GTYPRXP_in),
    .CH0_HSDPPCSRESET (CH0_HSDPPCSRESET_in),
    .CH0_ILORESET (CH0_ILORESET_in),
    .CH0_ILORESETMASK (CH0_ILORESETMASK_in),
    .CH0_LOOPBACK (CH0_LOOPBACK_in),
    .CH0_PCIERSTB (CH0_PCIERSTB_in),
    .CH0_PCSRSVDIN (CH0_PCSRSVDIN_in),
    .CH0_PHYESMADAPTSAVE (CH0_PHYESMADAPTSAVE_in),
    .CH0_RXCDRHOLD (CH0_RXCDRHOLD_in),
    .CH0_RXCDROVRDEN (CH0_RXCDROVRDEN_in),
    .CH0_RXCDRRESET (CH0_RXCDRRESET_in),
    .CH0_RXCHBONDI (CH0_RXCHBONDI_in),
    .CH0_RXDAPICODEOVRDEN (CH0_RXDAPICODEOVRDEN_in),
    .CH0_RXDAPICODERESET (CH0_RXDAPICODERESET_in),
    .CH0_RXDAPIRESET (CH0_RXDAPIRESET_in),
    .CH0_RXDAPIRESETMASK (CH0_RXDAPIRESETMASK_in),
    .CH0_RXDLYALIGNREQ (CH0_RXDLYALIGNREQ_in),
    .CH0_RXEQTRAINING (CH0_RXEQTRAINING_in),
    .CH0_RXGEARBOXSLIP (CH0_RXGEARBOXSLIP_in),
    .CH0_RXLATCLK (CH0_RXLATCLK_in),
    .CH0_RXLPMEN (CH0_RXLPMEN_in),
    .CH0_RXMLDCHAINDONE (CH0_RXMLDCHAINDONE_in),
    .CH0_RXMLDCHAINREQ (CH0_RXMLDCHAINREQ_in),
    .CH0_RXMLFINEALIGNREQ (CH0_RXMLFINEALIGNREQ_in),
    .CH0_RXOOBRESET (CH0_RXOOBRESET_in),
    .CH0_RXPCSRESETMASK (CH0_RXPCSRESETMASK_in),
    .CH0_RXPD (CH0_RXPD_in),
    .CH0_RXPHALIGNREQ (CH0_RXPHALIGNREQ_in),
    .CH0_RXPHALIGNRESETMASK (CH0_RXPHALIGNRESETMASK_in),
    .CH0_RXPHDLYPD (CH0_RXPHDLYPD_in),
    .CH0_RXPHDLYRESET (CH0_RXPHDLYRESET_in),
    .CH0_RXPHSETINITREQ (CH0_RXPHSETINITREQ_in),
    .CH0_RXPHSHIFT180 (CH0_RXPHSHIFT180_in),
    .CH0_RXPMARESETMASK (CH0_RXPMARESETMASK_in),
    .CH0_RXPOLARITY (CH0_RXPOLARITY_in),
    .CH0_RXPRBSCNTRESET (CH0_RXPRBSCNTRESET_in),
    .CH0_RXPRBSSEL (CH0_RXPRBSSEL_in),
    .CH0_RXPROGDIVRESET (CH0_RXPROGDIVRESET_in),
    .CH0_RXQPIEN (CH0_RXQPIEN_in),
    .CH0_RXRATE (CH0_RXRATE_in),
    .CH0_RXRESETMODE (CH0_RXRESETMODE_in),
    .CH0_RXSLIDE (CH0_RXSLIDE_in),
    .CH0_RXSYNCALLIN (CH0_RXSYNCALLIN_in),
    .CH0_RXTERMINATION (CH0_RXTERMINATION_in),
    .CH0_RXUSERRDY (CH0_RXUSERRDY_in),
    .CH0_RXUSRCLK (CH0_RXUSRCLK_in),
    .CH0_SCANCLKB (CH0_SCANCLKB_in),
    .CH0_SCANCNTRLIN (CH0_SCANCNTRLIN_in),
    .CH0_SCANENB (CH0_SCANENB_in),
    .CH0_SCANIN (CH0_SCANIN_in),
    .CH0_SCANRSTB (CH0_SCANRSTB_in),
    .CH0_TSTCLK0 (CH0_TSTCLK0_in),
    .CH0_TSTCLK1 (CH0_TSTCLK1_in),
    .CH0_TXCOMINIT (CH0_TXCOMINIT_in),
    .CH0_TXCOMSAS (CH0_TXCOMSAS_in),
    .CH0_TXCOMWAKE (CH0_TXCOMWAKE_in),
    .CH0_TXCTRL0 (CH0_TXCTRL0_in),
    .CH0_TXCTRL1 (CH0_TXCTRL1_in),
    .CH0_TXCTRL2 (CH0_TXCTRL2_in),
    .CH0_TXDAPICODEOVRDEN (CH0_TXDAPICODEOVRDEN_in),
    .CH0_TXDAPICODERESET (CH0_TXDAPICODERESET_in),
    .CH0_TXDAPIRESET (CH0_TXDAPIRESET_in),
    .CH0_TXDAPIRESETMASK (CH0_TXDAPIRESETMASK_in),
    .CH0_TXDATA (CH0_TXDATA_in),
    .CH0_TXDEEMPH (CH0_TXDEEMPH_in),
    .CH0_TXDETECTRX (CH0_TXDETECTRX_in),
    .CH0_TXDIFFCTRL (CH0_TXDIFFCTRL_in),
    .CH0_TXDLYALIGNREQ (CH0_TXDLYALIGNREQ_in),
    .CH0_TXELECIDLE (CH0_TXELECIDLE_in),
    .CH0_TXHEADER (CH0_TXHEADER_in),
    .CH0_TXINHIBIT (CH0_TXINHIBIT_in),
    .CH0_TXLATCLK (CH0_TXLATCLK_in),
    .CH0_TXMAINCURSOR (CH0_TXMAINCURSOR_in),
    .CH0_TXMARGIN (CH0_TXMARGIN_in),
    .CH0_TXMLDCHAINDONE (CH0_TXMLDCHAINDONE_in),
    .CH0_TXMLDCHAINREQ (CH0_TXMLDCHAINREQ_in),
    .CH0_TXONESZEROS (CH0_TXONESZEROS_in),
    .CH0_TXPAUSEDELAYALIGN (CH0_TXPAUSEDELAYALIGN_in),
    .CH0_TXPCSRESETMASK (CH0_TXPCSRESETMASK_in),
    .CH0_TXPD (CH0_TXPD_in),
    .CH0_TXPHALIGNREQ (CH0_TXPHALIGNREQ_in),
    .CH0_TXPHALIGNRESETMASK (CH0_TXPHALIGNRESETMASK_in),
    .CH0_TXPHDLYPD (CH0_TXPHDLYPD_in),
    .CH0_TXPHDLYRESET (CH0_TXPHDLYRESET_in),
    .CH0_TXPHDLYTSTCLK (CH0_TXPHDLYTSTCLK_in),
    .CH0_TXPHSETINITREQ (CH0_TXPHSETINITREQ_in),
    .CH0_TXPHSHIFT180 (CH0_TXPHSHIFT180_in),
    .CH0_TXPICODEOVRDEN (CH0_TXPICODEOVRDEN_in),
    .CH0_TXPICODERESET (CH0_TXPICODERESET_in),
    .CH0_TXPIPPMEN (CH0_TXPIPPMEN_in),
    .CH0_TXPIPPMSTEPSIZE (CH0_TXPIPPMSTEPSIZE_in),
    .CH0_TXPISOPD (CH0_TXPISOPD_in),
    .CH0_TXPMARESETMASK (CH0_TXPMARESETMASK_in),
    .CH0_TXPOLARITY (CH0_TXPOLARITY_in),
    .CH0_TXPOSTCURSOR (CH0_TXPOSTCURSOR_in),
    .CH0_TXPRBSFORCEERR (CH0_TXPRBSFORCEERR_in),
    .CH0_TXPRBSSEL (CH0_TXPRBSSEL_in),
    .CH0_TXPRECURSOR (CH0_TXPRECURSOR_in),
    .CH0_TXPROGDIVRESET (CH0_TXPROGDIVRESET_in),
    .CH0_TXQPIBIASEN (CH0_TXQPIBIASEN_in),
    .CH0_TXQPIWEAKPU (CH0_TXQPIWEAKPU_in),
    .CH0_TXRATE (CH0_TXRATE_in),
    .CH0_TXRESETMODE (CH0_TXRESETMODE_in),
    .CH0_TXSEQUENCE (CH0_TXSEQUENCE_in),
    .CH0_TXSWING (CH0_TXSWING_in),
    .CH0_TXSYNCALLIN (CH0_TXSYNCALLIN_in),
    .CH0_TXUSERRDY (CH0_TXUSERRDY_in),
    .CH0_TXUSRCLK (CH0_TXUSRCLK_in),
    .CH1_BSR_SERIAL (CH1_BSR_SERIAL_in),
    .CH1_CDRBMCDRREQ (CH1_CDRBMCDRREQ_in),
    .CH1_CDRFREQOS (CH1_CDRFREQOS_in),
    .CH1_CDRINCPCTRL (CH1_CDRINCPCTRL_in),
    .CH1_CDRSTEPDIR (CH1_CDRSTEPDIR_in),
    .CH1_CDRSTEPSQ (CH1_CDRSTEPSQ_in),
    .CH1_CDRSTEPSX (CH1_CDRSTEPSX_in),
    .CH1_CLKRSVD0 (CH1_CLKRSVD0_in),
    .CH1_CLKRSVD1 (CH1_CLKRSVD1_in),
    .CH1_CSSDSTOPCLK (CH1_CSSDSTOPCLK_in),
    .CH1_DFEHOLD (CH1_DFEHOLD_in),
    .CH1_DFEOVRD (CH1_DFEOVRD_in),
    .CH1_DMONFIFORESET (CH1_DMONFIFORESET_in),
    .CH1_DMONITORCLK (CH1_DMONITORCLK_in),
    .CH1_EDTUPDATEB (CH1_EDTUPDATEB_in),
    .CH1_EYESCANRESET (CH1_EYESCANRESET_in),
    .CH1_EYESCANTRIGGER (CH1_EYESCANTRIGGER_in),
    .CH1_GTRSVD (CH1_GTRSVD_in),
    .CH1_GTRXRESET (CH1_GTRXRESET_in),
    .CH1_GTTXRESET (CH1_GTTXRESET_in),
    .CH1_GTYPRXN (CH1_GTYPRXN_in),
    .CH1_GTYPRXP (CH1_GTYPRXP_in),
    .CH1_HSDPPCSRESET (CH1_HSDPPCSRESET_in),
    .CH1_ILORESET (CH1_ILORESET_in),
    .CH1_ILORESETMASK (CH1_ILORESETMASK_in),
    .CH1_LOOPBACK (CH1_LOOPBACK_in),
    .CH1_PCIERSTB (CH1_PCIERSTB_in),
    .CH1_PCSRSVDIN (CH1_PCSRSVDIN_in),
    .CH1_PHYESMADAPTSAVE (CH1_PHYESMADAPTSAVE_in),
    .CH1_RXCDRHOLD (CH1_RXCDRHOLD_in),
    .CH1_RXCDROVRDEN (CH1_RXCDROVRDEN_in),
    .CH1_RXCDRRESET (CH1_RXCDRRESET_in),
    .CH1_RXCHBONDI (CH1_RXCHBONDI_in),
    .CH1_RXDAPICODEOVRDEN (CH1_RXDAPICODEOVRDEN_in),
    .CH1_RXDAPICODERESET (CH1_RXDAPICODERESET_in),
    .CH1_RXDAPIRESET (CH1_RXDAPIRESET_in),
    .CH1_RXDAPIRESETMASK (CH1_RXDAPIRESETMASK_in),
    .CH1_RXDLYALIGNREQ (CH1_RXDLYALIGNREQ_in),
    .CH1_RXEQTRAINING (CH1_RXEQTRAINING_in),
    .CH1_RXGEARBOXSLIP (CH1_RXGEARBOXSLIP_in),
    .CH1_RXLATCLK (CH1_RXLATCLK_in),
    .CH1_RXLPMEN (CH1_RXLPMEN_in),
    .CH1_RXMLDCHAINDONE (CH1_RXMLDCHAINDONE_in),
    .CH1_RXMLDCHAINREQ (CH1_RXMLDCHAINREQ_in),
    .CH1_RXMLFINEALIGNREQ (CH1_RXMLFINEALIGNREQ_in),
    .CH1_RXOOBRESET (CH1_RXOOBRESET_in),
    .CH1_RXPCSRESETMASK (CH1_RXPCSRESETMASK_in),
    .CH1_RXPD (CH1_RXPD_in),
    .CH1_RXPHALIGNREQ (CH1_RXPHALIGNREQ_in),
    .CH1_RXPHALIGNRESETMASK (CH1_RXPHALIGNRESETMASK_in),
    .CH1_RXPHDLYPD (CH1_RXPHDLYPD_in),
    .CH1_RXPHDLYRESET (CH1_RXPHDLYRESET_in),
    .CH1_RXPHSETINITREQ (CH1_RXPHSETINITREQ_in),
    .CH1_RXPHSHIFT180 (CH1_RXPHSHIFT180_in),
    .CH1_RXPMARESETMASK (CH1_RXPMARESETMASK_in),
    .CH1_RXPOLARITY (CH1_RXPOLARITY_in),
    .CH1_RXPRBSCNTRESET (CH1_RXPRBSCNTRESET_in),
    .CH1_RXPRBSSEL (CH1_RXPRBSSEL_in),
    .CH1_RXPROGDIVRESET (CH1_RXPROGDIVRESET_in),
    .CH1_RXQPIEN (CH1_RXQPIEN_in),
    .CH1_RXRATE (CH1_RXRATE_in),
    .CH1_RXRESETMODE (CH1_RXRESETMODE_in),
    .CH1_RXSLIDE (CH1_RXSLIDE_in),
    .CH1_RXSYNCALLIN (CH1_RXSYNCALLIN_in),
    .CH1_RXTERMINATION (CH1_RXTERMINATION_in),
    .CH1_RXUSERRDY (CH1_RXUSERRDY_in),
    .CH1_RXUSRCLK (CH1_RXUSRCLK_in),
    .CH1_SCANCLKB (CH1_SCANCLKB_in),
    .CH1_SCANCNTRLIN (CH1_SCANCNTRLIN_in),
    .CH1_SCANENB (CH1_SCANENB_in),
    .CH1_SCANIN (CH1_SCANIN_in),
    .CH1_SCANRSTB (CH1_SCANRSTB_in),
    .CH1_TSTCLK0 (CH1_TSTCLK0_in),
    .CH1_TSTCLK1 (CH1_TSTCLK1_in),
    .CH1_TXCOMINIT (CH1_TXCOMINIT_in),
    .CH1_TXCOMSAS (CH1_TXCOMSAS_in),
    .CH1_TXCOMWAKE (CH1_TXCOMWAKE_in),
    .CH1_TXCTRL0 (CH1_TXCTRL0_in),
    .CH1_TXCTRL1 (CH1_TXCTRL1_in),
    .CH1_TXCTRL2 (CH1_TXCTRL2_in),
    .CH1_TXDAPICODEOVRDEN (CH1_TXDAPICODEOVRDEN_in),
    .CH1_TXDAPICODERESET (CH1_TXDAPICODERESET_in),
    .CH1_TXDAPIRESET (CH1_TXDAPIRESET_in),
    .CH1_TXDAPIRESETMASK (CH1_TXDAPIRESETMASK_in),
    .CH1_TXDATA (CH1_TXDATA_in),
    .CH1_TXDEEMPH (CH1_TXDEEMPH_in),
    .CH1_TXDETECTRX (CH1_TXDETECTRX_in),
    .CH1_TXDIFFCTRL (CH1_TXDIFFCTRL_in),
    .CH1_TXDLYALIGNREQ (CH1_TXDLYALIGNREQ_in),
    .CH1_TXELECIDLE (CH1_TXELECIDLE_in),
    .CH1_TXHEADER (CH1_TXHEADER_in),
    .CH1_TXINHIBIT (CH1_TXINHIBIT_in),
    .CH1_TXLATCLK (CH1_TXLATCLK_in),
    .CH1_TXMAINCURSOR (CH1_TXMAINCURSOR_in),
    .CH1_TXMARGIN (CH1_TXMARGIN_in),
    .CH1_TXMLDCHAINDONE (CH1_TXMLDCHAINDONE_in),
    .CH1_TXMLDCHAINREQ (CH1_TXMLDCHAINREQ_in),
    .CH1_TXONESZEROS (CH1_TXONESZEROS_in),
    .CH1_TXPAUSEDELAYALIGN (CH1_TXPAUSEDELAYALIGN_in),
    .CH1_TXPCSRESETMASK (CH1_TXPCSRESETMASK_in),
    .CH1_TXPD (CH1_TXPD_in),
    .CH1_TXPHALIGNREQ (CH1_TXPHALIGNREQ_in),
    .CH1_TXPHALIGNRESETMASK (CH1_TXPHALIGNRESETMASK_in),
    .CH1_TXPHDLYPD (CH1_TXPHDLYPD_in),
    .CH1_TXPHDLYRESET (CH1_TXPHDLYRESET_in),
    .CH1_TXPHDLYTSTCLK (CH1_TXPHDLYTSTCLK_in),
    .CH1_TXPHSETINITREQ (CH1_TXPHSETINITREQ_in),
    .CH1_TXPHSHIFT180 (CH1_TXPHSHIFT180_in),
    .CH1_TXPICODEOVRDEN (CH1_TXPICODEOVRDEN_in),
    .CH1_TXPICODERESET (CH1_TXPICODERESET_in),
    .CH1_TXPIPPMEN (CH1_TXPIPPMEN_in),
    .CH1_TXPIPPMSTEPSIZE (CH1_TXPIPPMSTEPSIZE_in),
    .CH1_TXPISOPD (CH1_TXPISOPD_in),
    .CH1_TXPMARESETMASK (CH1_TXPMARESETMASK_in),
    .CH1_TXPOLARITY (CH1_TXPOLARITY_in),
    .CH1_TXPOSTCURSOR (CH1_TXPOSTCURSOR_in),
    .CH1_TXPRBSFORCEERR (CH1_TXPRBSFORCEERR_in),
    .CH1_TXPRBSSEL (CH1_TXPRBSSEL_in),
    .CH1_TXPRECURSOR (CH1_TXPRECURSOR_in),
    .CH1_TXPROGDIVRESET (CH1_TXPROGDIVRESET_in),
    .CH1_TXQPIBIASEN (CH1_TXQPIBIASEN_in),
    .CH1_TXQPIWEAKPU (CH1_TXQPIWEAKPU_in),
    .CH1_TXRATE (CH1_TXRATE_in),
    .CH1_TXRESETMODE (CH1_TXRESETMODE_in),
    .CH1_TXSEQUENCE (CH1_TXSEQUENCE_in),
    .CH1_TXSWING (CH1_TXSWING_in),
    .CH1_TXSYNCALLIN (CH1_TXSYNCALLIN_in),
    .CH1_TXUSERRDY (CH1_TXUSERRDY_in),
    .CH1_TXUSRCLK (CH1_TXUSRCLK_in),
    .CH2_BSR_SERIAL (CH2_BSR_SERIAL_in),
    .CH2_CDRBMCDRREQ (CH2_CDRBMCDRREQ_in),
    .CH2_CDRFREQOS (CH2_CDRFREQOS_in),
    .CH2_CDRINCPCTRL (CH2_CDRINCPCTRL_in),
    .CH2_CDRSTEPDIR (CH2_CDRSTEPDIR_in),
    .CH2_CDRSTEPSQ (CH2_CDRSTEPSQ_in),
    .CH2_CDRSTEPSX (CH2_CDRSTEPSX_in),
    .CH2_CLKRSVD0 (CH2_CLKRSVD0_in),
    .CH2_CLKRSVD1 (CH2_CLKRSVD1_in),
    .CH2_CSSDSTOPCLK (CH2_CSSDSTOPCLK_in),
    .CH2_DFEHOLD (CH2_DFEHOLD_in),
    .CH2_DFEOVRD (CH2_DFEOVRD_in),
    .CH2_DMONFIFORESET (CH2_DMONFIFORESET_in),
    .CH2_DMONITORCLK (CH2_DMONITORCLK_in),
    .CH2_EDTUPDATEB (CH2_EDTUPDATEB_in),
    .CH2_EYESCANRESET (CH2_EYESCANRESET_in),
    .CH2_EYESCANTRIGGER (CH2_EYESCANTRIGGER_in),
    .CH2_GTRSVD (CH2_GTRSVD_in),
    .CH2_GTRXRESET (CH2_GTRXRESET_in),
    .CH2_GTTXRESET (CH2_GTTXRESET_in),
    .CH2_GTYPRXN (CH2_GTYPRXN_in),
    .CH2_GTYPRXP (CH2_GTYPRXP_in),
    .CH2_HSDPPCSRESET (CH2_HSDPPCSRESET_in),
    .CH2_ILORESET (CH2_ILORESET_in),
    .CH2_ILORESETMASK (CH2_ILORESETMASK_in),
    .CH2_LOOPBACK (CH2_LOOPBACK_in),
    .CH2_PCIERSTB (CH2_PCIERSTB_in),
    .CH2_PCSRSVDIN (CH2_PCSRSVDIN_in),
    .CH2_PHYESMADAPTSAVE (CH2_PHYESMADAPTSAVE_in),
    .CH2_RXCDRHOLD (CH2_RXCDRHOLD_in),
    .CH2_RXCDROVRDEN (CH2_RXCDROVRDEN_in),
    .CH2_RXCDRRESET (CH2_RXCDRRESET_in),
    .CH2_RXCHBONDI (CH2_RXCHBONDI_in),
    .CH2_RXDAPICODEOVRDEN (CH2_RXDAPICODEOVRDEN_in),
    .CH2_RXDAPICODERESET (CH2_RXDAPICODERESET_in),
    .CH2_RXDAPIRESET (CH2_RXDAPIRESET_in),
    .CH2_RXDAPIRESETMASK (CH2_RXDAPIRESETMASK_in),
    .CH2_RXDLYALIGNREQ (CH2_RXDLYALIGNREQ_in),
    .CH2_RXEQTRAINING (CH2_RXEQTRAINING_in),
    .CH2_RXGEARBOXSLIP (CH2_RXGEARBOXSLIP_in),
    .CH2_RXLATCLK (CH2_RXLATCLK_in),
    .CH2_RXLPMEN (CH2_RXLPMEN_in),
    .CH2_RXMLDCHAINDONE (CH2_RXMLDCHAINDONE_in),
    .CH2_RXMLDCHAINREQ (CH2_RXMLDCHAINREQ_in),
    .CH2_RXMLFINEALIGNREQ (CH2_RXMLFINEALIGNREQ_in),
    .CH2_RXOOBRESET (CH2_RXOOBRESET_in),
    .CH2_RXPCSRESETMASK (CH2_RXPCSRESETMASK_in),
    .CH2_RXPD (CH2_RXPD_in),
    .CH2_RXPHALIGNREQ (CH2_RXPHALIGNREQ_in),
    .CH2_RXPHALIGNRESETMASK (CH2_RXPHALIGNRESETMASK_in),
    .CH2_RXPHDLYPD (CH2_RXPHDLYPD_in),
    .CH2_RXPHDLYRESET (CH2_RXPHDLYRESET_in),
    .CH2_RXPHSETINITREQ (CH2_RXPHSETINITREQ_in),
    .CH2_RXPHSHIFT180 (CH2_RXPHSHIFT180_in),
    .CH2_RXPMARESETMASK (CH2_RXPMARESETMASK_in),
    .CH2_RXPOLARITY (CH2_RXPOLARITY_in),
    .CH2_RXPRBSCNTRESET (CH2_RXPRBSCNTRESET_in),
    .CH2_RXPRBSSEL (CH2_RXPRBSSEL_in),
    .CH2_RXPROGDIVRESET (CH2_RXPROGDIVRESET_in),
    .CH2_RXQPIEN (CH2_RXQPIEN_in),
    .CH2_RXRATE (CH2_RXRATE_in),
    .CH2_RXRESETMODE (CH2_RXRESETMODE_in),
    .CH2_RXSLIDE (CH2_RXSLIDE_in),
    .CH2_RXSYNCALLIN (CH2_RXSYNCALLIN_in),
    .CH2_RXTERMINATION (CH2_RXTERMINATION_in),
    .CH2_RXUSERRDY (CH2_RXUSERRDY_in),
    .CH2_RXUSRCLK (CH2_RXUSRCLK_in),
    .CH2_SCANCLKB (CH2_SCANCLKB_in),
    .CH2_SCANCNTRLIN (CH2_SCANCNTRLIN_in),
    .CH2_SCANENB (CH2_SCANENB_in),
    .CH2_SCANIN (CH2_SCANIN_in),
    .CH2_SCANRSTB (CH2_SCANRSTB_in),
    .CH2_TSTCLK0 (CH2_TSTCLK0_in),
    .CH2_TSTCLK1 (CH2_TSTCLK1_in),
    .CH2_TXCOMINIT (CH2_TXCOMINIT_in),
    .CH2_TXCOMSAS (CH2_TXCOMSAS_in),
    .CH2_TXCOMWAKE (CH2_TXCOMWAKE_in),
    .CH2_TXCTRL0 (CH2_TXCTRL0_in),
    .CH2_TXCTRL1 (CH2_TXCTRL1_in),
    .CH2_TXCTRL2 (CH2_TXCTRL2_in),
    .CH2_TXDAPICODEOVRDEN (CH2_TXDAPICODEOVRDEN_in),
    .CH2_TXDAPICODERESET (CH2_TXDAPICODERESET_in),
    .CH2_TXDAPIRESET (CH2_TXDAPIRESET_in),
    .CH2_TXDAPIRESETMASK (CH2_TXDAPIRESETMASK_in),
    .CH2_TXDATA (CH2_TXDATA_in),
    .CH2_TXDEEMPH (CH2_TXDEEMPH_in),
    .CH2_TXDETECTRX (CH2_TXDETECTRX_in),
    .CH2_TXDIFFCTRL (CH2_TXDIFFCTRL_in),
    .CH2_TXDLYALIGNREQ (CH2_TXDLYALIGNREQ_in),
    .CH2_TXELECIDLE (CH2_TXELECIDLE_in),
    .CH2_TXHEADER (CH2_TXHEADER_in),
    .CH2_TXINHIBIT (CH2_TXINHIBIT_in),
    .CH2_TXLATCLK (CH2_TXLATCLK_in),
    .CH2_TXMAINCURSOR (CH2_TXMAINCURSOR_in),
    .CH2_TXMARGIN (CH2_TXMARGIN_in),
    .CH2_TXMLDCHAINDONE (CH2_TXMLDCHAINDONE_in),
    .CH2_TXMLDCHAINREQ (CH2_TXMLDCHAINREQ_in),
    .CH2_TXONESZEROS (CH2_TXONESZEROS_in),
    .CH2_TXPAUSEDELAYALIGN (CH2_TXPAUSEDELAYALIGN_in),
    .CH2_TXPCSRESETMASK (CH2_TXPCSRESETMASK_in),
    .CH2_TXPD (CH2_TXPD_in),
    .CH2_TXPHALIGNREQ (CH2_TXPHALIGNREQ_in),
    .CH2_TXPHALIGNRESETMASK (CH2_TXPHALIGNRESETMASK_in),
    .CH2_TXPHDLYPD (CH2_TXPHDLYPD_in),
    .CH2_TXPHDLYRESET (CH2_TXPHDLYRESET_in),
    .CH2_TXPHDLYTSTCLK (CH2_TXPHDLYTSTCLK_in),
    .CH2_TXPHSETINITREQ (CH2_TXPHSETINITREQ_in),
    .CH2_TXPHSHIFT180 (CH2_TXPHSHIFT180_in),
    .CH2_TXPICODEOVRDEN (CH2_TXPICODEOVRDEN_in),
    .CH2_TXPICODERESET (CH2_TXPICODERESET_in),
    .CH2_TXPIPPMEN (CH2_TXPIPPMEN_in),
    .CH2_TXPIPPMSTEPSIZE (CH2_TXPIPPMSTEPSIZE_in),
    .CH2_TXPISOPD (CH2_TXPISOPD_in),
    .CH2_TXPMARESETMASK (CH2_TXPMARESETMASK_in),
    .CH2_TXPOLARITY (CH2_TXPOLARITY_in),
    .CH2_TXPOSTCURSOR (CH2_TXPOSTCURSOR_in),
    .CH2_TXPRBSFORCEERR (CH2_TXPRBSFORCEERR_in),
    .CH2_TXPRBSSEL (CH2_TXPRBSSEL_in),
    .CH2_TXPRECURSOR (CH2_TXPRECURSOR_in),
    .CH2_TXPROGDIVRESET (CH2_TXPROGDIVRESET_in),
    .CH2_TXQPIBIASEN (CH2_TXQPIBIASEN_in),
    .CH2_TXQPIWEAKPU (CH2_TXQPIWEAKPU_in),
    .CH2_TXRATE (CH2_TXRATE_in),
    .CH2_TXRESETMODE (CH2_TXRESETMODE_in),
    .CH2_TXSEQUENCE (CH2_TXSEQUENCE_in),
    .CH2_TXSWING (CH2_TXSWING_in),
    .CH2_TXSYNCALLIN (CH2_TXSYNCALLIN_in),
    .CH2_TXUSERRDY (CH2_TXUSERRDY_in),
    .CH2_TXUSRCLK (CH2_TXUSRCLK_in),
    .CH3_BSR_SERIAL (CH3_BSR_SERIAL_in),
    .CH3_CDRBMCDRREQ (CH3_CDRBMCDRREQ_in),
    .CH3_CDRFREQOS (CH3_CDRFREQOS_in),
    .CH3_CDRINCPCTRL (CH3_CDRINCPCTRL_in),
    .CH3_CDRSTEPDIR (CH3_CDRSTEPDIR_in),
    .CH3_CDRSTEPSQ (CH3_CDRSTEPSQ_in),
    .CH3_CDRSTEPSX (CH3_CDRSTEPSX_in),
    .CH3_CLKRSVD0 (CH3_CLKRSVD0_in),
    .CH3_CLKRSVD1 (CH3_CLKRSVD1_in),
    .CH3_CSSDSTOPCLK (CH3_CSSDSTOPCLK_in),
    .CH3_DFEHOLD (CH3_DFEHOLD_in),
    .CH3_DFEOVRD (CH3_DFEOVRD_in),
    .CH3_DMONFIFORESET (CH3_DMONFIFORESET_in),
    .CH3_DMONITORCLK (CH3_DMONITORCLK_in),
    .CH3_EDTUPDATEB (CH3_EDTUPDATEB_in),
    .CH3_EYESCANRESET (CH3_EYESCANRESET_in),
    .CH3_EYESCANTRIGGER (CH3_EYESCANTRIGGER_in),
    .CH3_GTRSVD (CH3_GTRSVD_in),
    .CH3_GTRXRESET (CH3_GTRXRESET_in),
    .CH3_GTTXRESET (CH3_GTTXRESET_in),
    .CH3_GTYPRXN (CH3_GTYPRXN_in),
    .CH3_GTYPRXP (CH3_GTYPRXP_in),
    .CH3_HSDPPCSRESET (CH3_HSDPPCSRESET_in),
    .CH3_ILORESET (CH3_ILORESET_in),
    .CH3_ILORESETMASK (CH3_ILORESETMASK_in),
    .CH3_LOOPBACK (CH3_LOOPBACK_in),
    .CH3_PCIERSTB (CH3_PCIERSTB_in),
    .CH3_PCSRSVDIN (CH3_PCSRSVDIN_in),
    .CH3_PHYESMADAPTSAVE (CH3_PHYESMADAPTSAVE_in),
    .CH3_RXCDRHOLD (CH3_RXCDRHOLD_in),
    .CH3_RXCDROVRDEN (CH3_RXCDROVRDEN_in),
    .CH3_RXCDRRESET (CH3_RXCDRRESET_in),
    .CH3_RXCHBONDI (CH3_RXCHBONDI_in),
    .CH3_RXDAPICODEOVRDEN (CH3_RXDAPICODEOVRDEN_in),
    .CH3_RXDAPICODERESET (CH3_RXDAPICODERESET_in),
    .CH3_RXDAPIRESET (CH3_RXDAPIRESET_in),
    .CH3_RXDAPIRESETMASK (CH3_RXDAPIRESETMASK_in),
    .CH3_RXDLYALIGNREQ (CH3_RXDLYALIGNREQ_in),
    .CH3_RXEQTRAINING (CH3_RXEQTRAINING_in),
    .CH3_RXGEARBOXSLIP (CH3_RXGEARBOXSLIP_in),
    .CH3_RXLATCLK (CH3_RXLATCLK_in),
    .CH3_RXLPMEN (CH3_RXLPMEN_in),
    .CH3_RXMLDCHAINDONE (CH3_RXMLDCHAINDONE_in),
    .CH3_RXMLDCHAINREQ (CH3_RXMLDCHAINREQ_in),
    .CH3_RXMLFINEALIGNREQ (CH3_RXMLFINEALIGNREQ_in),
    .CH3_RXOOBRESET (CH3_RXOOBRESET_in),
    .CH3_RXPCSRESETMASK (CH3_RXPCSRESETMASK_in),
    .CH3_RXPD (CH3_RXPD_in),
    .CH3_RXPHALIGNREQ (CH3_RXPHALIGNREQ_in),
    .CH3_RXPHALIGNRESETMASK (CH3_RXPHALIGNRESETMASK_in),
    .CH3_RXPHDLYPD (CH3_RXPHDLYPD_in),
    .CH3_RXPHDLYRESET (CH3_RXPHDLYRESET_in),
    .CH3_RXPHSETINITREQ (CH3_RXPHSETINITREQ_in),
    .CH3_RXPHSHIFT180 (CH3_RXPHSHIFT180_in),
    .CH3_RXPMARESETMASK (CH3_RXPMARESETMASK_in),
    .CH3_RXPOLARITY (CH3_RXPOLARITY_in),
    .CH3_RXPRBSCNTRESET (CH3_RXPRBSCNTRESET_in),
    .CH3_RXPRBSSEL (CH3_RXPRBSSEL_in),
    .CH3_RXPROGDIVRESET (CH3_RXPROGDIVRESET_in),
    .CH3_RXQPIEN (CH3_RXQPIEN_in),
    .CH3_RXRATE (CH3_RXRATE_in),
    .CH3_RXRESETMODE (CH3_RXRESETMODE_in),
    .CH3_RXSLIDE (CH3_RXSLIDE_in),
    .CH3_RXSYNCALLIN (CH3_RXSYNCALLIN_in),
    .CH3_RXTERMINATION (CH3_RXTERMINATION_in),
    .CH3_RXUSERRDY (CH3_RXUSERRDY_in),
    .CH3_RXUSRCLK (CH3_RXUSRCLK_in),
    .CH3_SCANCLKB (CH3_SCANCLKB_in),
    .CH3_SCANCNTRLIN (CH3_SCANCNTRLIN_in),
    .CH3_SCANENB (CH3_SCANENB_in),
    .CH3_SCANIN (CH3_SCANIN_in),
    .CH3_SCANRSTB (CH3_SCANRSTB_in),
    .CH3_TSTCLK0 (CH3_TSTCLK0_in),
    .CH3_TSTCLK1 (CH3_TSTCLK1_in),
    .CH3_TXCOMINIT (CH3_TXCOMINIT_in),
    .CH3_TXCOMSAS (CH3_TXCOMSAS_in),
    .CH3_TXCOMWAKE (CH3_TXCOMWAKE_in),
    .CH3_TXCTRL0 (CH3_TXCTRL0_in),
    .CH3_TXCTRL1 (CH3_TXCTRL1_in),
    .CH3_TXCTRL2 (CH3_TXCTRL2_in),
    .CH3_TXDAPICODEOVRDEN (CH3_TXDAPICODEOVRDEN_in),
    .CH3_TXDAPICODERESET (CH3_TXDAPICODERESET_in),
    .CH3_TXDAPIRESET (CH3_TXDAPIRESET_in),
    .CH3_TXDAPIRESETMASK (CH3_TXDAPIRESETMASK_in),
    .CH3_TXDATA (CH3_TXDATA_in),
    .CH3_TXDEEMPH (CH3_TXDEEMPH_in),
    .CH3_TXDETECTRX (CH3_TXDETECTRX_in),
    .CH3_TXDIFFCTRL (CH3_TXDIFFCTRL_in),
    .CH3_TXDLYALIGNREQ (CH3_TXDLYALIGNREQ_in),
    .CH3_TXELECIDLE (CH3_TXELECIDLE_in),
    .CH3_TXHEADER (CH3_TXHEADER_in),
    .CH3_TXINHIBIT (CH3_TXINHIBIT_in),
    .CH3_TXLATCLK (CH3_TXLATCLK_in),
    .CH3_TXMAINCURSOR (CH3_TXMAINCURSOR_in),
    .CH3_TXMARGIN (CH3_TXMARGIN_in),
    .CH3_TXMLDCHAINDONE (CH3_TXMLDCHAINDONE_in),
    .CH3_TXMLDCHAINREQ (CH3_TXMLDCHAINREQ_in),
    .CH3_TXONESZEROS (CH3_TXONESZEROS_in),
    .CH3_TXPAUSEDELAYALIGN (CH3_TXPAUSEDELAYALIGN_in),
    .CH3_TXPCSRESETMASK (CH3_TXPCSRESETMASK_in),
    .CH3_TXPD (CH3_TXPD_in),
    .CH3_TXPHALIGNREQ (CH3_TXPHALIGNREQ_in),
    .CH3_TXPHALIGNRESETMASK (CH3_TXPHALIGNRESETMASK_in),
    .CH3_TXPHDLYPD (CH3_TXPHDLYPD_in),
    .CH3_TXPHDLYRESET (CH3_TXPHDLYRESET_in),
    .CH3_TXPHDLYTSTCLK (CH3_TXPHDLYTSTCLK_in),
    .CH3_TXPHSETINITREQ (CH3_TXPHSETINITREQ_in),
    .CH3_TXPHSHIFT180 (CH3_TXPHSHIFT180_in),
    .CH3_TXPICODEOVRDEN (CH3_TXPICODEOVRDEN_in),
    .CH3_TXPICODERESET (CH3_TXPICODERESET_in),
    .CH3_TXPIPPMEN (CH3_TXPIPPMEN_in),
    .CH3_TXPIPPMSTEPSIZE (CH3_TXPIPPMSTEPSIZE_in),
    .CH3_TXPISOPD (CH3_TXPISOPD_in),
    .CH3_TXPMARESETMASK (CH3_TXPMARESETMASK_in),
    .CH3_TXPOLARITY (CH3_TXPOLARITY_in),
    .CH3_TXPOSTCURSOR (CH3_TXPOSTCURSOR_in),
    .CH3_TXPRBSFORCEERR (CH3_TXPRBSFORCEERR_in),
    .CH3_TXPRBSSEL (CH3_TXPRBSSEL_in),
    .CH3_TXPRECURSOR (CH3_TXPRECURSOR_in),
    .CH3_TXPROGDIVRESET (CH3_TXPROGDIVRESET_in),
    .CH3_TXQPIBIASEN (CH3_TXQPIBIASEN_in),
    .CH3_TXQPIWEAKPU (CH3_TXQPIWEAKPU_in),
    .CH3_TXRATE (CH3_TXRATE_in),
    .CH3_TXRESETMODE (CH3_TXRESETMODE_in),
    .CH3_TXSEQUENCE (CH3_TXSEQUENCE_in),
    .CH3_TXSWING (CH3_TXSWING_in),
    .CH3_TXSYNCALLIN (CH3_TXSYNCALLIN_in),
    .CH3_TXUSERRDY (CH3_TXUSERRDY_in),
    .CH3_TXUSRCLK (CH3_TXUSRCLK_in),
    .COESTATUSDEBUG (COESTATUSDEBUG_in),
    .CSSDSTOPCLK (CSSDSTOPCLK_in),
    .CTRLRSVDIN (CTRLRSVDIN_in),
    .DEBUGTRACECLK (DEBUGTRACECLK_in),
    .DEBUGTRACEREADY (DEBUGTRACEREADY_in),
    .EDTUPDATEB (EDTUPDATEB_in),
    .GPI (GPI_in),
    .HSCLK0_LCPLLFBDIV (HSCLK0_LCPLLFBDIV_in),
    .HSCLK0_LCPLLGTGREFCLK (HSCLK0_LCPLLGTGREFCLK_in),
    .HSCLK0_LCPLLGTREFCLK0 (HSCLK0_LCPLLGTREFCLK0_in),
    .HSCLK0_LCPLLGTREFCLK1 (HSCLK0_LCPLLGTREFCLK1_in),
    .HSCLK0_LCPLLNORTHREFCLK0 (HSCLK0_LCPLLNORTHREFCLK0_in),
    .HSCLK0_LCPLLNORTHREFCLK1 (HSCLK0_LCPLLNORTHREFCLK1_in),
    .HSCLK0_LCPLLPD (HSCLK0_LCPLLPD_in),
    .HSCLK0_LCPLLREFCLKSEL (HSCLK0_LCPLLREFCLKSEL_in),
    .HSCLK0_LCPLLRESET (HSCLK0_LCPLLRESET_in),
    .HSCLK0_LCPLLRESETBYPASSMODE (HSCLK0_LCPLLRESETBYPASSMODE_in),
    .HSCLK0_LCPLLRESETMASK (HSCLK0_LCPLLRESETMASK_in),
    .HSCLK0_LCPLLSDMDATA (HSCLK0_LCPLLSDMDATA_in),
    .HSCLK0_LCPLLSDMTOGGLE (HSCLK0_LCPLLSDMTOGGLE_in),
    .HSCLK0_LCPLLSOUTHREFCLK0 (HSCLK0_LCPLLSOUTHREFCLK0_in),
    .HSCLK0_LCPLLSOUTHREFCLK1 (HSCLK0_LCPLLSOUTHREFCLK1_in),
    .HSCLK0_RPLLFBDIV (HSCLK0_RPLLFBDIV_in),
    .HSCLK0_RPLLGTGREFCLK (HSCLK0_RPLLGTGREFCLK_in),
    .HSCLK0_RPLLGTREFCLK0 (HSCLK0_RPLLGTREFCLK0_in),
    .HSCLK0_RPLLGTREFCLK1 (HSCLK0_RPLLGTREFCLK1_in),
    .HSCLK0_RPLLNORTHREFCLK0 (HSCLK0_RPLLNORTHREFCLK0_in),
    .HSCLK0_RPLLNORTHREFCLK1 (HSCLK0_RPLLNORTHREFCLK1_in),
    .HSCLK0_RPLLPD (HSCLK0_RPLLPD_in),
    .HSCLK0_RPLLREFCLKSEL (HSCLK0_RPLLREFCLKSEL_in),
    .HSCLK0_RPLLRESET (HSCLK0_RPLLRESET_in),
    .HSCLK0_RPLLRESETBYPASSMODE (HSCLK0_RPLLRESETBYPASSMODE_in),
    .HSCLK0_RPLLRESETMASK (HSCLK0_RPLLRESETMASK_in),
    .HSCLK0_RPLLSDMDATA (HSCLK0_RPLLSDMDATA_in),
    .HSCLK0_RPLLSDMTOGGLE (HSCLK0_RPLLSDMTOGGLE_in),
    .HSCLK0_RPLLSOUTHREFCLK0 (HSCLK0_RPLLSOUTHREFCLK0_in),
    .HSCLK0_RPLLSOUTHREFCLK1 (HSCLK0_RPLLSOUTHREFCLK1_in),
    .HSCLK1_LCPLLFBDIV (HSCLK1_LCPLLFBDIV_in),
    .HSCLK1_LCPLLGTGREFCLK (HSCLK1_LCPLLGTGREFCLK_in),
    .HSCLK1_LCPLLGTREFCLK0 (HSCLK1_LCPLLGTREFCLK0_in),
    .HSCLK1_LCPLLGTREFCLK1 (HSCLK1_LCPLLGTREFCLK1_in),
    .HSCLK1_LCPLLNORTHREFCLK0 (HSCLK1_LCPLLNORTHREFCLK0_in),
    .HSCLK1_LCPLLNORTHREFCLK1 (HSCLK1_LCPLLNORTHREFCLK1_in),
    .HSCLK1_LCPLLPD (HSCLK1_LCPLLPD_in),
    .HSCLK1_LCPLLREFCLKSEL (HSCLK1_LCPLLREFCLKSEL_in),
    .HSCLK1_LCPLLRESET (HSCLK1_LCPLLRESET_in),
    .HSCLK1_LCPLLRESETBYPASSMODE (HSCLK1_LCPLLRESETBYPASSMODE_in),
    .HSCLK1_LCPLLRESETMASK (HSCLK1_LCPLLRESETMASK_in),
    .HSCLK1_LCPLLSDMDATA (HSCLK1_LCPLLSDMDATA_in),
    .HSCLK1_LCPLLSDMTOGGLE (HSCLK1_LCPLLSDMTOGGLE_in),
    .HSCLK1_LCPLLSOUTHREFCLK0 (HSCLK1_LCPLLSOUTHREFCLK0_in),
    .HSCLK1_LCPLLSOUTHREFCLK1 (HSCLK1_LCPLLSOUTHREFCLK1_in),
    .HSCLK1_RPLLFBDIV (HSCLK1_RPLLFBDIV_in),
    .HSCLK1_RPLLGTGREFCLK (HSCLK1_RPLLGTGREFCLK_in),
    .HSCLK1_RPLLGTREFCLK0 (HSCLK1_RPLLGTREFCLK0_in),
    .HSCLK1_RPLLGTREFCLK1 (HSCLK1_RPLLGTREFCLK1_in),
    .HSCLK1_RPLLNORTHREFCLK0 (HSCLK1_RPLLNORTHREFCLK0_in),
    .HSCLK1_RPLLNORTHREFCLK1 (HSCLK1_RPLLNORTHREFCLK1_in),
    .HSCLK1_RPLLPD (HSCLK1_RPLLPD_in),
    .HSCLK1_RPLLREFCLKSEL (HSCLK1_RPLLREFCLKSEL_in),
    .HSCLK1_RPLLRESET (HSCLK1_RPLLRESET_in),
    .HSCLK1_RPLLRESETBYPASSMODE (HSCLK1_RPLLRESETBYPASSMODE_in),
    .HSCLK1_RPLLRESETMASK (HSCLK1_RPLLRESETMASK_in),
    .HSCLK1_RPLLSDMDATA (HSCLK1_RPLLSDMDATA_in),
    .HSCLK1_RPLLSDMTOGGLE (HSCLK1_RPLLSDMTOGGLE_in),
    .HSCLK1_RPLLSOUTHREFCLK0 (HSCLK1_RPLLSOUTHREFCLK0_in),
    .HSCLK1_RPLLSOUTHREFCLK1 (HSCLK1_RPLLSOUTHREFCLK1_in),
    .M0_AXIS_TREADY (M0_AXIS_TREADY_in),
    .M1_AXIS_TREADY (M1_AXIS_TREADY_in),
    .M2_AXIS_TREADY (M2_AXIS_TREADY_in),
    .MSTRXRESET (MSTRXRESET_in),
    .MSTTXRESET (MSTTXRESET_in),
    .PCIELINKREACHTARGET (PCIELINKREACHTARGET_in),
    .PCIELTSSM (PCIELTSSM_in),
    .PIPENORTHIN (PIPENORTHIN_in),
    .PIPESOUTHIN (PIPESOUTHIN_in),
    .RCALENB (RCALENB_in),
    .REFCLK0_CLKTESTSIG (REFCLK0_CLKTESTSIG_in),
    .REFCLK0_GTREFCLKPD (REFCLK0_GTREFCLKPD_in),
    .REFCLK1_CLKTESTSIG (REFCLK1_CLKTESTSIG_in),
    .REFCLK1_GTREFCLKPD (REFCLK1_GTREFCLKPD_in),
    .RESETDONE_NORTHIN (RESETDONE_NORTHIN_in),
    .RESETDONE_SOUTHIN (RESETDONE_SOUTHIN_in),
    .RXMARGINCLK (RXMARGINCLK_in),
    .RXMARGINREQCMD (RXMARGINREQCMD_in),
    .RXMARGINREQLANENUM (RXMARGINREQLANENUM_in),
    .RXMARGINREQPAYLD (RXMARGINREQPAYLD_in),
    .RXMARGINREQREQ (RXMARGINREQREQ_in),
    .RXMARGINRESACK (RXMARGINRESACK_in),
    .RXPINORTHIN (RXPINORTHIN_in),
    .RXPISOUTHIN (RXPISOUTHIN_in),
    .S0_AXIS_TDATA (S0_AXIS_TDATA_in),
    .S0_AXIS_TLAST (S0_AXIS_TLAST_in),
    .S0_AXIS_TVALID (S0_AXIS_TVALID_in),
    .S1_AXIS_TDATA (S1_AXIS_TDATA_in),
    .S1_AXIS_TLAST (S1_AXIS_TLAST_in),
    .S1_AXIS_TVALID (S1_AXIS_TVALID_in),
    .S2_AXIS_TDATA (S2_AXIS_TDATA_in),
    .S2_AXIS_TLAST (S2_AXIS_TLAST_in),
    .S2_AXIS_TVALID (S2_AXIS_TVALID_in),
    .SCANCLKB (SCANCLKB_in),
    .SCANCNTRLIN (SCANCNTRLIN_in),
    .SCANENB (SCANENB_in),
    .SCANIN (SCANIN_in),
    .SCANRSTB (SCANRSTB_in),
    .TRIGACKOUT0 (TRIGACKOUT0_in),
    .TRIGIN0 (TRIGIN0_in),
    .TXPINORTHIN (TXPINORTHIN_in),
    .TXPISOUTHIN (TXPISOUTHIN_in),
    .UBENABLE (UBENABLE_in),
    .UBINTR (UBINTR_in),
    .UBIOLMBRST (UBIOLMBRST_in),
    .UBMBRST (UBMBRST_in),
    .UBRXUART (UBRXUART_in)
  );

integer file;

initial begin
if (MEMORY_INIT_FILE_REG == "NONE") begin
$display("No MEMORY_INIT_FILE provided . Simulation continues"); 
end

else

begin
$display($time, " File name : %s", MEMORY_INIT_FILE);
file = $fopen(MEMORY_INIT_FILE, "r");

if(file != 0)
$display("MEMORY_INIT_FILE provided and file exists and simulation continues.");
else
begin
$display("ERROR: MEMORY_INIT_FILE file provided but file not found. Exiting simulation");
$finish;
end
end
end


`ifdef XIL_TIMING
  reg notifier;
`endif

`ifndef XIL_XECLIB
  specify
    (APB3CLK => APB3PRDATA[0]) = (100:100:100, 100:100:100);
    (APB3CLK => APB3PRDATA[10]) = (100:100:100, 100:100:100);
    (APB3CLK => APB3PRDATA[11]) = (100:100:100, 100:100:100);
    (APB3CLK => APB3PRDATA[12]) = (100:100:100, 100:100:100);
    (APB3CLK => APB3PRDATA[13]) = (100:100:100, 100:100:100);
    (APB3CLK => APB3PRDATA[14]) = (100:100:100, 100:100:100);
    (APB3CLK => APB3PRDATA[15]) = (100:100:100, 100:100:100);
    (APB3CLK => APB3PRDATA[16]) = (100:100:100, 100:100:100);
    (APB3CLK => APB3PRDATA[17]) = (100:100:100, 100:100:100);
    (APB3CLK => APB3PRDATA[18]) = (100:100:100, 100:100:100);
    (APB3CLK => APB3PRDATA[19]) = (100:100:100, 100:100:100);
    (APB3CLK => APB3PRDATA[1]) = (100:100:100, 100:100:100);
    (APB3CLK => APB3PRDATA[20]) = (100:100:100, 100:100:100);
    (APB3CLK => APB3PRDATA[21]) = (100:100:100, 100:100:100);
    (APB3CLK => APB3PRDATA[22]) = (100:100:100, 100:100:100);
    (APB3CLK => APB3PRDATA[23]) = (100:100:100, 100:100:100);
    (APB3CLK => APB3PRDATA[24]) = (100:100:100, 100:100:100);
    (APB3CLK => APB3PRDATA[25]) = (100:100:100, 100:100:100);
    (APB3CLK => APB3PRDATA[26]) = (100:100:100, 100:100:100);
    (APB3CLK => APB3PRDATA[27]) = (100:100:100, 100:100:100);
    (APB3CLK => APB3PRDATA[28]) = (100:100:100, 100:100:100);
    (APB3CLK => APB3PRDATA[29]) = (100:100:100, 100:100:100);
    (APB3CLK => APB3PRDATA[2]) = (100:100:100, 100:100:100);
    (APB3CLK => APB3PRDATA[30]) = (100:100:100, 100:100:100);
    (APB3CLK => APB3PRDATA[31]) = (100:100:100, 100:100:100);
    (APB3CLK => APB3PRDATA[3]) = (100:100:100, 100:100:100);
    (APB3CLK => APB3PRDATA[4]) = (100:100:100, 100:100:100);
    (APB3CLK => APB3PRDATA[5]) = (100:100:100, 100:100:100);
    (APB3CLK => APB3PRDATA[6]) = (100:100:100, 100:100:100);
    (APB3CLK => APB3PRDATA[7]) = (100:100:100, 100:100:100);
    (APB3CLK => APB3PRDATA[8]) = (100:100:100, 100:100:100);
    (APB3CLK => APB3PRDATA[9]) = (100:100:100, 100:100:100);
    (APB3CLK => APB3PREADY) = (100:100:100, 100:100:100);
    (APB3CLK => APB3PSLVERR) = (100:100:100, 100:100:100);
    (AXISCLK => M0_AXIS_TDATA[0]) = (100:100:100, 100:100:100);
    (AXISCLK => M0_AXIS_TDATA[10]) = (100:100:100, 100:100:100);
    (AXISCLK => M0_AXIS_TDATA[11]) = (100:100:100, 100:100:100);
    (AXISCLK => M0_AXIS_TDATA[12]) = (100:100:100, 100:100:100);
    (AXISCLK => M0_AXIS_TDATA[13]) = (100:100:100, 100:100:100);
    (AXISCLK => M0_AXIS_TDATA[14]) = (100:100:100, 100:100:100);
    (AXISCLK => M0_AXIS_TDATA[15]) = (100:100:100, 100:100:100);
    (AXISCLK => M0_AXIS_TDATA[16]) = (100:100:100, 100:100:100);
    (AXISCLK => M0_AXIS_TDATA[17]) = (100:100:100, 100:100:100);
    (AXISCLK => M0_AXIS_TDATA[18]) = (100:100:100, 100:100:100);
    (AXISCLK => M0_AXIS_TDATA[19]) = (100:100:100, 100:100:100);
    (AXISCLK => M0_AXIS_TDATA[1]) = (100:100:100, 100:100:100);
    (AXISCLK => M0_AXIS_TDATA[20]) = (100:100:100, 100:100:100);
    (AXISCLK => M0_AXIS_TDATA[21]) = (100:100:100, 100:100:100);
    (AXISCLK => M0_AXIS_TDATA[22]) = (100:100:100, 100:100:100);
    (AXISCLK => M0_AXIS_TDATA[23]) = (100:100:100, 100:100:100);
    (AXISCLK => M0_AXIS_TDATA[24]) = (100:100:100, 100:100:100);
    (AXISCLK => M0_AXIS_TDATA[25]) = (100:100:100, 100:100:100);
    (AXISCLK => M0_AXIS_TDATA[26]) = (100:100:100, 100:100:100);
    (AXISCLK => M0_AXIS_TDATA[27]) = (100:100:100, 100:100:100);
    (AXISCLK => M0_AXIS_TDATA[28]) = (100:100:100, 100:100:100);
    (AXISCLK => M0_AXIS_TDATA[29]) = (100:100:100, 100:100:100);
    (AXISCLK => M0_AXIS_TDATA[2]) = (100:100:100, 100:100:100);
    (AXISCLK => M0_AXIS_TDATA[30]) = (100:100:100, 100:100:100);
    (AXISCLK => M0_AXIS_TDATA[31]) = (100:100:100, 100:100:100);
    (AXISCLK => M0_AXIS_TDATA[3]) = (100:100:100, 100:100:100);
    (AXISCLK => M0_AXIS_TDATA[4]) = (100:100:100, 100:100:100);
    (AXISCLK => M0_AXIS_TDATA[5]) = (100:100:100, 100:100:100);
    (AXISCLK => M0_AXIS_TDATA[6]) = (100:100:100, 100:100:100);
    (AXISCLK => M0_AXIS_TDATA[7]) = (100:100:100, 100:100:100);
    (AXISCLK => M0_AXIS_TDATA[8]) = (100:100:100, 100:100:100);
    (AXISCLK => M0_AXIS_TDATA[9]) = (100:100:100, 100:100:100);
    (AXISCLK => M0_AXIS_TLAST) = (100:100:100, 100:100:100);
    (AXISCLK => M0_AXIS_TVALID) = (100:100:100, 100:100:100);
    (AXISCLK => M1_AXIS_TDATA[0]) = (100:100:100, 100:100:100);
    (AXISCLK => M1_AXIS_TDATA[10]) = (100:100:100, 100:100:100);
    (AXISCLK => M1_AXIS_TDATA[11]) = (100:100:100, 100:100:100);
    (AXISCLK => M1_AXIS_TDATA[12]) = (100:100:100, 100:100:100);
    (AXISCLK => M1_AXIS_TDATA[13]) = (100:100:100, 100:100:100);
    (AXISCLK => M1_AXIS_TDATA[14]) = (100:100:100, 100:100:100);
    (AXISCLK => M1_AXIS_TDATA[15]) = (100:100:100, 100:100:100);
    (AXISCLK => M1_AXIS_TDATA[16]) = (100:100:100, 100:100:100);
    (AXISCLK => M1_AXIS_TDATA[17]) = (100:100:100, 100:100:100);
    (AXISCLK => M1_AXIS_TDATA[18]) = (100:100:100, 100:100:100);
    (AXISCLK => M1_AXIS_TDATA[19]) = (100:100:100, 100:100:100);
    (AXISCLK => M1_AXIS_TDATA[1]) = (100:100:100, 100:100:100);
    (AXISCLK => M1_AXIS_TDATA[20]) = (100:100:100, 100:100:100);
    (AXISCLK => M1_AXIS_TDATA[21]) = (100:100:100, 100:100:100);
    (AXISCLK => M1_AXIS_TDATA[22]) = (100:100:100, 100:100:100);
    (AXISCLK => M1_AXIS_TDATA[23]) = (100:100:100, 100:100:100);
    (AXISCLK => M1_AXIS_TDATA[24]) = (100:100:100, 100:100:100);
    (AXISCLK => M1_AXIS_TDATA[25]) = (100:100:100, 100:100:100);
    (AXISCLK => M1_AXIS_TDATA[26]) = (100:100:100, 100:100:100);
    (AXISCLK => M1_AXIS_TDATA[27]) = (100:100:100, 100:100:100);
    (AXISCLK => M1_AXIS_TDATA[28]) = (100:100:100, 100:100:100);
    (AXISCLK => M1_AXIS_TDATA[29]) = (100:100:100, 100:100:100);
    (AXISCLK => M1_AXIS_TDATA[2]) = (100:100:100, 100:100:100);
    (AXISCLK => M1_AXIS_TDATA[30]) = (100:100:100, 100:100:100);
    (AXISCLK => M1_AXIS_TDATA[31]) = (100:100:100, 100:100:100);
    (AXISCLK => M1_AXIS_TDATA[3]) = (100:100:100, 100:100:100);
    (AXISCLK => M1_AXIS_TDATA[4]) = (100:100:100, 100:100:100);
    (AXISCLK => M1_AXIS_TDATA[5]) = (100:100:100, 100:100:100);
    (AXISCLK => M1_AXIS_TDATA[6]) = (100:100:100, 100:100:100);
    (AXISCLK => M1_AXIS_TDATA[7]) = (100:100:100, 100:100:100);
    (AXISCLK => M1_AXIS_TDATA[8]) = (100:100:100, 100:100:100);
    (AXISCLK => M1_AXIS_TDATA[9]) = (100:100:100, 100:100:100);
    (AXISCLK => M1_AXIS_TLAST) = (100:100:100, 100:100:100);
    (AXISCLK => M1_AXIS_TVALID) = (100:100:100, 100:100:100);
    (AXISCLK => M2_AXIS_TDATA[0]) = (100:100:100, 100:100:100);
    (AXISCLK => M2_AXIS_TDATA[10]) = (100:100:100, 100:100:100);
    (AXISCLK => M2_AXIS_TDATA[11]) = (100:100:100, 100:100:100);
    (AXISCLK => M2_AXIS_TDATA[12]) = (100:100:100, 100:100:100);
    (AXISCLK => M2_AXIS_TDATA[13]) = (100:100:100, 100:100:100);
    (AXISCLK => M2_AXIS_TDATA[14]) = (100:100:100, 100:100:100);
    (AXISCLK => M2_AXIS_TDATA[15]) = (100:100:100, 100:100:100);
    (AXISCLK => M2_AXIS_TDATA[16]) = (100:100:100, 100:100:100);
    (AXISCLK => M2_AXIS_TDATA[17]) = (100:100:100, 100:100:100);
    (AXISCLK => M2_AXIS_TDATA[18]) = (100:100:100, 100:100:100);
    (AXISCLK => M2_AXIS_TDATA[19]) = (100:100:100, 100:100:100);
    (AXISCLK => M2_AXIS_TDATA[1]) = (100:100:100, 100:100:100);
    (AXISCLK => M2_AXIS_TDATA[20]) = (100:100:100, 100:100:100);
    (AXISCLK => M2_AXIS_TDATA[21]) = (100:100:100, 100:100:100);
    (AXISCLK => M2_AXIS_TDATA[22]) = (100:100:100, 100:100:100);
    (AXISCLK => M2_AXIS_TDATA[23]) = (100:100:100, 100:100:100);
    (AXISCLK => M2_AXIS_TDATA[24]) = (100:100:100, 100:100:100);
    (AXISCLK => M2_AXIS_TDATA[25]) = (100:100:100, 100:100:100);
    (AXISCLK => M2_AXIS_TDATA[26]) = (100:100:100, 100:100:100);
    (AXISCLK => M2_AXIS_TDATA[27]) = (100:100:100, 100:100:100);
    (AXISCLK => M2_AXIS_TDATA[28]) = (100:100:100, 100:100:100);
    (AXISCLK => M2_AXIS_TDATA[29]) = (100:100:100, 100:100:100);
    (AXISCLK => M2_AXIS_TDATA[2]) = (100:100:100, 100:100:100);
    (AXISCLK => M2_AXIS_TDATA[30]) = (100:100:100, 100:100:100);
    (AXISCLK => M2_AXIS_TDATA[31]) = (100:100:100, 100:100:100);
    (AXISCLK => M2_AXIS_TDATA[3]) = (100:100:100, 100:100:100);
    (AXISCLK => M2_AXIS_TDATA[4]) = (100:100:100, 100:100:100);
    (AXISCLK => M2_AXIS_TDATA[5]) = (100:100:100, 100:100:100);
    (AXISCLK => M2_AXIS_TDATA[6]) = (100:100:100, 100:100:100);
    (AXISCLK => M2_AXIS_TDATA[7]) = (100:100:100, 100:100:100);
    (AXISCLK => M2_AXIS_TDATA[8]) = (100:100:100, 100:100:100);
    (AXISCLK => M2_AXIS_TDATA[9]) = (100:100:100, 100:100:100);
    (AXISCLK => M2_AXIS_TLAST) = (100:100:100, 100:100:100);
    (AXISCLK => M2_AXIS_TVALID) = (100:100:100, 100:100:100);
    (AXISCLK => S0_AXIS_TREADY) = (100:100:100, 100:100:100);
    (AXISCLK => S1_AXIS_TREADY) = (100:100:100, 100:100:100);
    (AXISCLK => S2_AXIS_TREADY) = (100:100:100, 100:100:100);
    (CH0_DMONITORCLK => CH0_DMONITOROUT[0]) = (0:0:0, 0:0:0);
    (CH0_DMONITORCLK => CH0_DMONITOROUT[10]) = (0:0:0, 0:0:0);
    (CH0_DMONITORCLK => CH0_DMONITOROUT[11]) = (0:0:0, 0:0:0);
    (CH0_DMONITORCLK => CH0_DMONITOROUT[12]) = (0:0:0, 0:0:0);
    (CH0_DMONITORCLK => CH0_DMONITOROUT[13]) = (0:0:0, 0:0:0);
    (CH0_DMONITORCLK => CH0_DMONITOROUT[14]) = (0:0:0, 0:0:0);
    (CH0_DMONITORCLK => CH0_DMONITOROUT[15]) = (0:0:0, 0:0:0);
    (CH0_DMONITORCLK => CH0_DMONITOROUT[16]) = (0:0:0, 0:0:0);
    (CH0_DMONITORCLK => CH0_DMONITOROUT[17]) = (0:0:0, 0:0:0);
    (CH0_DMONITORCLK => CH0_DMONITOROUT[18]) = (0:0:0, 0:0:0);
    (CH0_DMONITORCLK => CH0_DMONITOROUT[19]) = (0:0:0, 0:0:0);
    (CH0_DMONITORCLK => CH0_DMONITOROUT[1]) = (0:0:0, 0:0:0);
    (CH0_DMONITORCLK => CH0_DMONITOROUT[20]) = (0:0:0, 0:0:0);
    (CH0_DMONITORCLK => CH0_DMONITOROUT[21]) = (0:0:0, 0:0:0);
    (CH0_DMONITORCLK => CH0_DMONITOROUT[22]) = (0:0:0, 0:0:0);
    (CH0_DMONITORCLK => CH0_DMONITOROUT[23]) = (0:0:0, 0:0:0);
    (CH0_DMONITORCLK => CH0_DMONITOROUT[24]) = (0:0:0, 0:0:0);
    (CH0_DMONITORCLK => CH0_DMONITOROUT[25]) = (0:0:0, 0:0:0);
    (CH0_DMONITORCLK => CH0_DMONITOROUT[26]) = (0:0:0, 0:0:0);
    (CH0_DMONITORCLK => CH0_DMONITOROUT[27]) = (0:0:0, 0:0:0);
    (CH0_DMONITORCLK => CH0_DMONITOROUT[28]) = (0:0:0, 0:0:0);
    (CH0_DMONITORCLK => CH0_DMONITOROUT[29]) = (0:0:0, 0:0:0);
    (CH0_DMONITORCLK => CH0_DMONITOROUT[2]) = (0:0:0, 0:0:0);
    (CH0_DMONITORCLK => CH0_DMONITOROUT[30]) = (0:0:0, 0:0:0);
    (CH0_DMONITORCLK => CH0_DMONITOROUT[31]) = (0:0:0, 0:0:0);
    (CH0_DMONITORCLK => CH0_DMONITOROUT[3]) = (0:0:0, 0:0:0);
    (CH0_DMONITORCLK => CH0_DMONITOROUT[4]) = (0:0:0, 0:0:0);
    (CH0_DMONITORCLK => CH0_DMONITOROUT[5]) = (0:0:0, 0:0:0);
    (CH0_DMONITORCLK => CH0_DMONITOROUT[6]) = (0:0:0, 0:0:0);
    (CH0_DMONITORCLK => CH0_DMONITOROUT[7]) = (0:0:0, 0:0:0);
    (CH0_DMONITORCLK => CH0_DMONITOROUT[8]) = (0:0:0, 0:0:0);
    (CH0_DMONITORCLK => CH0_DMONITOROUT[9]) = (0:0:0, 0:0:0);
    (CH0_RXUSRCLK => CH0_PHYSTATUS) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RX10GSTAT[0]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RX10GSTAT[1]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RX10GSTAT[2]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RX10GSTAT[3]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RX10GSTAT[4]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RX10GSTAT[5]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RX10GSTAT[6]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RX10GSTAT[7]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXBUFSTATUS[0]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXBUFSTATUS[1]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXBUFSTATUS[2]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXBYTEISALIGNED) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXBYTEREALIGN) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXCHANBONDSEQ) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXCHANISALIGNED) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXCHANREALIGN) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXCHBONDO[0]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXCHBONDO[1]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXCHBONDO[2]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXCHBONDO[3]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXCHBONDO[4]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXCLKCORCNT[0]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXCLKCORCNT[1]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXCOMINITDET) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXCOMMADET) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXCOMSASDET) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXCOMWAKEDET) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXCTRL0[0]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXCTRL0[10]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXCTRL0[11]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXCTRL0[12]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXCTRL0[13]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXCTRL0[14]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXCTRL0[15]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXCTRL0[1]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXCTRL0[2]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXCTRL0[3]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXCTRL0[4]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXCTRL0[5]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXCTRL0[6]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXCTRL0[7]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXCTRL0[8]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXCTRL0[9]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXCTRL1[0]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXCTRL1[10]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXCTRL1[11]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXCTRL1[12]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXCTRL1[13]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXCTRL1[14]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXCTRL1[15]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXCTRL1[1]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXCTRL1[2]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXCTRL1[3]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXCTRL1[4]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXCTRL1[5]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXCTRL1[6]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXCTRL1[7]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXCTRL1[8]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXCTRL1[9]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXCTRL2[0]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXCTRL2[1]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXCTRL2[2]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXCTRL2[3]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXCTRL2[4]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXCTRL2[5]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXCTRL2[6]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXCTRL2[7]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXCTRL3[0]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXCTRL3[1]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXCTRL3[2]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXCTRL3[3]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXCTRL3[4]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXCTRL3[5]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXCTRL3[6]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXCTRL3[7]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATAVALID[0]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATAVALID[1]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[0]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[100]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[101]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[102]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[103]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[104]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[105]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[106]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[107]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[108]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[109]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[10]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[110]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[111]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[112]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[113]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[114]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[115]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[116]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[117]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[118]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[119]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[11]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[120]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[121]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[122]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[123]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[124]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[125]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[126]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[127]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[12]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[13]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[14]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[15]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[16]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[17]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[18]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[19]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[1]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[20]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[21]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[22]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[23]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[24]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[25]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[26]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[27]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[28]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[29]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[2]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[30]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[31]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[32]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[33]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[34]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[35]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[36]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[37]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[38]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[39]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[3]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[40]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[41]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[42]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[43]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[44]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[45]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[46]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[47]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[48]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[49]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[4]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[50]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[51]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[52]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[53]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[54]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[55]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[56]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[57]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[58]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[59]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[5]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[60]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[61]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[62]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[63]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[64]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[65]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[66]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[67]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[68]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[69]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[6]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[70]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[71]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[72]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[73]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[74]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[75]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[76]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[77]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[78]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[79]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[7]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[80]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[81]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[82]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[83]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[84]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[85]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[86]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[87]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[88]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[89]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[8]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[90]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[91]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[92]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[93]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[94]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[95]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[96]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[97]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[98]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[99]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDATA[9]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDLYALIGNERR) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXDLYALIGNPROG) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXHEADERVALID[0]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXHEADERVALID[1]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXHEADER[0]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXHEADER[1]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXHEADER[2]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXHEADER[3]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXHEADER[4]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXHEADER[5]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXPHALIGNDONE) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXPHALIGNERR) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXPHSETINITDONE) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXPRBSERR) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXPRBSLOCKED) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXSIMPLEXPHYSTATUS) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXSLIPDONE) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXSTARTOFSEQ[0]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXSTARTOFSEQ[1]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXSTATUS[0]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXSTATUS[1]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXSTATUS[2]) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXSYNCDONE) = (100:100:100, 100:100:100);
    (CH0_RXUSRCLK => CH0_RXVALID) = (100:100:100, 100:100:100);
    (CH0_TSTCLK0 => CH0_TXOUTCLK) = (0:0:0, 0:0:0);
    (CH0_TSTCLK1 => CH0_RXOUTCLK) = (0:0:0, 0:0:0);
    (CH0_TXUSRCLK => CH0_TX10GSTAT) = (100:100:100, 100:100:100);
    (CH0_TXUSRCLK => CH0_TXBUFSTATUS[0]) = (100:100:100, 100:100:100);
    (CH0_TXUSRCLK => CH0_TXBUFSTATUS[1]) = (100:100:100, 100:100:100);
    (CH0_TXUSRCLK => CH0_TXCOMFINISH) = (100:100:100, 100:100:100);
    (CH0_TXUSRCLK => CH0_TXSIMPLEXPHYSTATUS) = (100:100:100, 100:100:100);
    (CH1_DMONITORCLK => CH1_DMONITOROUT[0]) = (0:0:0, 0:0:0);
    (CH1_DMONITORCLK => CH1_DMONITOROUT[10]) = (0:0:0, 0:0:0);
    (CH1_DMONITORCLK => CH1_DMONITOROUT[11]) = (0:0:0, 0:0:0);
    (CH1_DMONITORCLK => CH1_DMONITOROUT[12]) = (0:0:0, 0:0:0);
    (CH1_DMONITORCLK => CH1_DMONITOROUT[13]) = (0:0:0, 0:0:0);
    (CH1_DMONITORCLK => CH1_DMONITOROUT[14]) = (0:0:0, 0:0:0);
    (CH1_DMONITORCLK => CH1_DMONITOROUT[15]) = (0:0:0, 0:0:0);
    (CH1_DMONITORCLK => CH1_DMONITOROUT[16]) = (0:0:0, 0:0:0);
    (CH1_DMONITORCLK => CH1_DMONITOROUT[17]) = (0:0:0, 0:0:0);
    (CH1_DMONITORCLK => CH1_DMONITOROUT[18]) = (0:0:0, 0:0:0);
    (CH1_DMONITORCLK => CH1_DMONITOROUT[19]) = (0:0:0, 0:0:0);
    (CH1_DMONITORCLK => CH1_DMONITOROUT[1]) = (0:0:0, 0:0:0);
    (CH1_DMONITORCLK => CH1_DMONITOROUT[20]) = (0:0:0, 0:0:0);
    (CH1_DMONITORCLK => CH1_DMONITOROUT[21]) = (0:0:0, 0:0:0);
    (CH1_DMONITORCLK => CH1_DMONITOROUT[22]) = (0:0:0, 0:0:0);
    (CH1_DMONITORCLK => CH1_DMONITOROUT[23]) = (0:0:0, 0:0:0);
    (CH1_DMONITORCLK => CH1_DMONITOROUT[24]) = (0:0:0, 0:0:0);
    (CH1_DMONITORCLK => CH1_DMONITOROUT[25]) = (0:0:0, 0:0:0);
    (CH1_DMONITORCLK => CH1_DMONITOROUT[26]) = (0:0:0, 0:0:0);
    (CH1_DMONITORCLK => CH1_DMONITOROUT[27]) = (0:0:0, 0:0:0);
    (CH1_DMONITORCLK => CH1_DMONITOROUT[28]) = (0:0:0, 0:0:0);
    (CH1_DMONITORCLK => CH1_DMONITOROUT[29]) = (0:0:0, 0:0:0);
    (CH1_DMONITORCLK => CH1_DMONITOROUT[2]) = (0:0:0, 0:0:0);
    (CH1_DMONITORCLK => CH1_DMONITOROUT[30]) = (0:0:0, 0:0:0);
    (CH1_DMONITORCLK => CH1_DMONITOROUT[31]) = (0:0:0, 0:0:0);
    (CH1_DMONITORCLK => CH1_DMONITOROUT[3]) = (0:0:0, 0:0:0);
    (CH1_DMONITORCLK => CH1_DMONITOROUT[4]) = (0:0:0, 0:0:0);
    (CH1_DMONITORCLK => CH1_DMONITOROUT[5]) = (0:0:0, 0:0:0);
    (CH1_DMONITORCLK => CH1_DMONITOROUT[6]) = (0:0:0, 0:0:0);
    (CH1_DMONITORCLK => CH1_DMONITOROUT[7]) = (0:0:0, 0:0:0);
    (CH1_DMONITORCLK => CH1_DMONITOROUT[8]) = (0:0:0, 0:0:0);
    (CH1_DMONITORCLK => CH1_DMONITOROUT[9]) = (0:0:0, 0:0:0);
    (CH1_RXUSRCLK => CH1_PHYSTATUS) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RX10GSTAT[0]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RX10GSTAT[1]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RX10GSTAT[2]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RX10GSTAT[3]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RX10GSTAT[4]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RX10GSTAT[5]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RX10GSTAT[6]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RX10GSTAT[7]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXBUFSTATUS[0]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXBUFSTATUS[1]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXBUFSTATUS[2]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXBYTEISALIGNED) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXBYTEREALIGN) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXCHANBONDSEQ) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXCHANISALIGNED) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXCHANREALIGN) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXCHBONDO[0]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXCHBONDO[1]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXCHBONDO[2]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXCHBONDO[3]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXCHBONDO[4]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXCLKCORCNT[0]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXCLKCORCNT[1]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXCOMINITDET) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXCOMMADET) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXCOMSASDET) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXCOMWAKEDET) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXCTRL0[0]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXCTRL0[10]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXCTRL0[11]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXCTRL0[12]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXCTRL0[13]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXCTRL0[14]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXCTRL0[15]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXCTRL0[1]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXCTRL0[2]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXCTRL0[3]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXCTRL0[4]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXCTRL0[5]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXCTRL0[6]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXCTRL0[7]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXCTRL0[8]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXCTRL0[9]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXCTRL1[0]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXCTRL1[10]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXCTRL1[11]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXCTRL1[12]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXCTRL1[13]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXCTRL1[14]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXCTRL1[15]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXCTRL1[1]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXCTRL1[2]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXCTRL1[3]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXCTRL1[4]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXCTRL1[5]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXCTRL1[6]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXCTRL1[7]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXCTRL1[8]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXCTRL1[9]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXCTRL2[0]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXCTRL2[1]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXCTRL2[2]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXCTRL2[3]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXCTRL2[4]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXCTRL2[5]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXCTRL2[6]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXCTRL2[7]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXCTRL3[0]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXCTRL3[1]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXCTRL3[2]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXCTRL3[3]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXCTRL3[4]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXCTRL3[5]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXCTRL3[6]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXCTRL3[7]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATAVALID[0]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATAVALID[1]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[0]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[100]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[101]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[102]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[103]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[104]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[105]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[106]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[107]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[108]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[109]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[10]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[110]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[111]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[112]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[113]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[114]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[115]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[116]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[117]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[118]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[119]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[11]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[120]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[121]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[122]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[123]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[124]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[125]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[126]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[127]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[12]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[13]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[14]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[15]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[16]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[17]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[18]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[19]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[1]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[20]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[21]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[22]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[23]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[24]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[25]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[26]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[27]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[28]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[29]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[2]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[30]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[31]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[32]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[33]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[34]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[35]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[36]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[37]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[38]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[39]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[3]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[40]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[41]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[42]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[43]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[44]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[45]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[46]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[47]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[48]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[49]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[4]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[50]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[51]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[52]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[53]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[54]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[55]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[56]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[57]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[58]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[59]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[5]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[60]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[61]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[62]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[63]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[64]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[65]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[66]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[67]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[68]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[69]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[6]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[70]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[71]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[72]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[73]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[74]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[75]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[76]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[77]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[78]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[79]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[7]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[80]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[81]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[82]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[83]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[84]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[85]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[86]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[87]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[88]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[89]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[8]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[90]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[91]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[92]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[93]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[94]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[95]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[96]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[97]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[98]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[99]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDATA[9]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDLYALIGNERR) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXDLYALIGNPROG) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXHEADERVALID[0]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXHEADERVALID[1]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXHEADER[0]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXHEADER[1]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXHEADER[2]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXHEADER[3]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXHEADER[4]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXHEADER[5]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXPHALIGNDONE) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXPHALIGNERR) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXPHSETINITDONE) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXPRBSERR) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXPRBSLOCKED) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXSIMPLEXPHYSTATUS) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXSLIPDONE) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXSTARTOFSEQ[0]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXSTARTOFSEQ[1]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXSTATUS[0]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXSTATUS[1]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXSTATUS[2]) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXSYNCDONE) = (100:100:100, 100:100:100);
    (CH1_RXUSRCLK => CH1_RXVALID) = (100:100:100, 100:100:100);
    (CH1_TSTCLK0 => CH1_TXOUTCLK) = (0:0:0, 0:0:0);
    (CH1_TSTCLK1 => CH1_RXOUTCLK) = (0:0:0, 0:0:0);
    (CH1_TXUSRCLK => CH1_TX10GSTAT) = (100:100:100, 100:100:100);
    (CH1_TXUSRCLK => CH1_TXBUFSTATUS[0]) = (100:100:100, 100:100:100);
    (CH1_TXUSRCLK => CH1_TXBUFSTATUS[1]) = (100:100:100, 100:100:100);
    (CH1_TXUSRCLK => CH1_TXCOMFINISH) = (100:100:100, 100:100:100);
    (CH1_TXUSRCLK => CH1_TXSIMPLEXPHYSTATUS) = (100:100:100, 100:100:100);
    (CH2_DMONITORCLK => CH2_DMONITOROUT[0]) = (0:0:0, 0:0:0);
    (CH2_DMONITORCLK => CH2_DMONITOROUT[10]) = (0:0:0, 0:0:0);
    (CH2_DMONITORCLK => CH2_DMONITOROUT[11]) = (0:0:0, 0:0:0);
    (CH2_DMONITORCLK => CH2_DMONITOROUT[12]) = (0:0:0, 0:0:0);
    (CH2_DMONITORCLK => CH2_DMONITOROUT[13]) = (0:0:0, 0:0:0);
    (CH2_DMONITORCLK => CH2_DMONITOROUT[14]) = (0:0:0, 0:0:0);
    (CH2_DMONITORCLK => CH2_DMONITOROUT[15]) = (0:0:0, 0:0:0);
    (CH2_DMONITORCLK => CH2_DMONITOROUT[16]) = (0:0:0, 0:0:0);
    (CH2_DMONITORCLK => CH2_DMONITOROUT[17]) = (0:0:0, 0:0:0);
    (CH2_DMONITORCLK => CH2_DMONITOROUT[18]) = (0:0:0, 0:0:0);
    (CH2_DMONITORCLK => CH2_DMONITOROUT[19]) = (0:0:0, 0:0:0);
    (CH2_DMONITORCLK => CH2_DMONITOROUT[1]) = (0:0:0, 0:0:0);
    (CH2_DMONITORCLK => CH2_DMONITOROUT[20]) = (0:0:0, 0:0:0);
    (CH2_DMONITORCLK => CH2_DMONITOROUT[21]) = (0:0:0, 0:0:0);
    (CH2_DMONITORCLK => CH2_DMONITOROUT[22]) = (0:0:0, 0:0:0);
    (CH2_DMONITORCLK => CH2_DMONITOROUT[23]) = (0:0:0, 0:0:0);
    (CH2_DMONITORCLK => CH2_DMONITOROUT[24]) = (0:0:0, 0:0:0);
    (CH2_DMONITORCLK => CH2_DMONITOROUT[25]) = (0:0:0, 0:0:0);
    (CH2_DMONITORCLK => CH2_DMONITOROUT[26]) = (0:0:0, 0:0:0);
    (CH2_DMONITORCLK => CH2_DMONITOROUT[27]) = (0:0:0, 0:0:0);
    (CH2_DMONITORCLK => CH2_DMONITOROUT[28]) = (0:0:0, 0:0:0);
    (CH2_DMONITORCLK => CH2_DMONITOROUT[29]) = (0:0:0, 0:0:0);
    (CH2_DMONITORCLK => CH2_DMONITOROUT[2]) = (0:0:0, 0:0:0);
    (CH2_DMONITORCLK => CH2_DMONITOROUT[30]) = (0:0:0, 0:0:0);
    (CH2_DMONITORCLK => CH2_DMONITOROUT[31]) = (0:0:0, 0:0:0);
    (CH2_DMONITORCLK => CH2_DMONITOROUT[3]) = (0:0:0, 0:0:0);
    (CH2_DMONITORCLK => CH2_DMONITOROUT[4]) = (0:0:0, 0:0:0);
    (CH2_DMONITORCLK => CH2_DMONITOROUT[5]) = (0:0:0, 0:0:0);
    (CH2_DMONITORCLK => CH2_DMONITOROUT[6]) = (0:0:0, 0:0:0);
    (CH2_DMONITORCLK => CH2_DMONITOROUT[7]) = (0:0:0, 0:0:0);
    (CH2_DMONITORCLK => CH2_DMONITOROUT[8]) = (0:0:0, 0:0:0);
    (CH2_DMONITORCLK => CH2_DMONITOROUT[9]) = (0:0:0, 0:0:0);
    (CH2_RXUSRCLK => CH2_PHYSTATUS) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RX10GSTAT[0]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RX10GSTAT[1]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RX10GSTAT[2]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RX10GSTAT[3]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RX10GSTAT[4]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RX10GSTAT[5]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RX10GSTAT[6]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RX10GSTAT[7]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXBUFSTATUS[0]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXBUFSTATUS[1]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXBUFSTATUS[2]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXBYTEISALIGNED) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXBYTEREALIGN) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXCHANBONDSEQ) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXCHANISALIGNED) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXCHANREALIGN) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXCHBONDO[0]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXCHBONDO[1]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXCHBONDO[2]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXCHBONDO[3]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXCHBONDO[4]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXCLKCORCNT[0]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXCLKCORCNT[1]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXCOMINITDET) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXCOMMADET) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXCOMSASDET) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXCOMWAKEDET) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXCTRL0[0]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXCTRL0[10]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXCTRL0[11]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXCTRL0[12]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXCTRL0[13]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXCTRL0[14]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXCTRL0[15]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXCTRL0[1]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXCTRL0[2]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXCTRL0[3]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXCTRL0[4]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXCTRL0[5]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXCTRL0[6]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXCTRL0[7]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXCTRL0[8]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXCTRL0[9]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXCTRL1[0]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXCTRL1[10]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXCTRL1[11]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXCTRL1[12]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXCTRL1[13]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXCTRL1[14]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXCTRL1[15]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXCTRL1[1]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXCTRL1[2]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXCTRL1[3]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXCTRL1[4]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXCTRL1[5]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXCTRL1[6]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXCTRL1[7]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXCTRL1[8]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXCTRL1[9]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXCTRL2[0]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXCTRL2[1]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXCTRL2[2]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXCTRL2[3]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXCTRL2[4]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXCTRL2[5]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXCTRL2[6]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXCTRL2[7]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXCTRL3[0]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXCTRL3[1]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXCTRL3[2]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXCTRL3[3]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXCTRL3[4]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXCTRL3[5]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXCTRL3[6]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXCTRL3[7]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATAVALID[0]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATAVALID[1]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[0]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[100]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[101]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[102]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[103]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[104]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[105]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[106]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[107]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[108]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[109]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[10]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[110]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[111]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[112]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[113]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[114]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[115]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[116]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[117]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[118]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[119]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[11]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[120]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[121]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[122]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[123]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[124]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[125]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[126]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[127]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[12]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[13]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[14]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[15]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[16]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[17]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[18]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[19]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[1]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[20]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[21]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[22]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[23]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[24]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[25]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[26]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[27]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[28]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[29]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[2]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[30]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[31]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[32]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[33]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[34]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[35]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[36]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[37]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[38]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[39]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[3]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[40]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[41]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[42]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[43]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[44]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[45]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[46]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[47]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[48]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[49]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[4]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[50]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[51]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[52]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[53]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[54]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[55]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[56]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[57]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[58]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[59]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[5]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[60]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[61]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[62]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[63]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[64]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[65]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[66]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[67]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[68]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[69]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[6]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[70]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[71]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[72]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[73]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[74]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[75]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[76]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[77]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[78]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[79]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[7]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[80]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[81]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[82]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[83]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[84]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[85]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[86]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[87]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[88]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[89]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[8]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[90]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[91]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[92]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[93]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[94]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[95]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[96]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[97]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[98]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[99]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDATA[9]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDLYALIGNERR) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXDLYALIGNPROG) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXHEADERVALID[0]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXHEADERVALID[1]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXHEADER[0]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXHEADER[1]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXHEADER[2]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXHEADER[3]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXHEADER[4]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXHEADER[5]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXPHALIGNDONE) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXPHALIGNERR) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXPHSETINITDONE) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXPRBSERR) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXPRBSLOCKED) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXSIMPLEXPHYSTATUS) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXSLIPDONE) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXSTARTOFSEQ[0]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXSTARTOFSEQ[1]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXSTATUS[0]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXSTATUS[1]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXSTATUS[2]) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXSYNCDONE) = (100:100:100, 100:100:100);
    (CH2_RXUSRCLK => CH2_RXVALID) = (100:100:100, 100:100:100);
    (CH2_TSTCLK0 => CH2_TXOUTCLK) = (0:0:0, 0:0:0);
    (CH2_TSTCLK1 => CH2_RXOUTCLK) = (0:0:0, 0:0:0);
    (CH2_TXUSRCLK => CH2_TX10GSTAT) = (100:100:100, 100:100:100);
    (CH2_TXUSRCLK => CH2_TXBUFSTATUS[0]) = (100:100:100, 100:100:100);
    (CH2_TXUSRCLK => CH2_TXBUFSTATUS[1]) = (100:100:100, 100:100:100);
    (CH2_TXUSRCLK => CH2_TXCOMFINISH) = (100:100:100, 100:100:100);
    (CH2_TXUSRCLK => CH2_TXSIMPLEXPHYSTATUS) = (100:100:100, 100:100:100);
    (CH3_DMONITORCLK => CH3_DMONITOROUT[0]) = (0:0:0, 0:0:0);
    (CH3_DMONITORCLK => CH3_DMONITOROUT[10]) = (0:0:0, 0:0:0);
    (CH3_DMONITORCLK => CH3_DMONITOROUT[11]) = (0:0:0, 0:0:0);
    (CH3_DMONITORCLK => CH3_DMONITOROUT[12]) = (0:0:0, 0:0:0);
    (CH3_DMONITORCLK => CH3_DMONITOROUT[13]) = (0:0:0, 0:0:0);
    (CH3_DMONITORCLK => CH3_DMONITOROUT[14]) = (0:0:0, 0:0:0);
    (CH3_DMONITORCLK => CH3_DMONITOROUT[15]) = (0:0:0, 0:0:0);
    (CH3_DMONITORCLK => CH3_DMONITOROUT[16]) = (0:0:0, 0:0:0);
    (CH3_DMONITORCLK => CH3_DMONITOROUT[17]) = (0:0:0, 0:0:0);
    (CH3_DMONITORCLK => CH3_DMONITOROUT[18]) = (0:0:0, 0:0:0);
    (CH3_DMONITORCLK => CH3_DMONITOROUT[19]) = (0:0:0, 0:0:0);
    (CH3_DMONITORCLK => CH3_DMONITOROUT[1]) = (0:0:0, 0:0:0);
    (CH3_DMONITORCLK => CH3_DMONITOROUT[20]) = (0:0:0, 0:0:0);
    (CH3_DMONITORCLK => CH3_DMONITOROUT[21]) = (0:0:0, 0:0:0);
    (CH3_DMONITORCLK => CH3_DMONITOROUT[22]) = (0:0:0, 0:0:0);
    (CH3_DMONITORCLK => CH3_DMONITOROUT[23]) = (0:0:0, 0:0:0);
    (CH3_DMONITORCLK => CH3_DMONITOROUT[24]) = (0:0:0, 0:0:0);
    (CH3_DMONITORCLK => CH3_DMONITOROUT[25]) = (0:0:0, 0:0:0);
    (CH3_DMONITORCLK => CH3_DMONITOROUT[26]) = (0:0:0, 0:0:0);
    (CH3_DMONITORCLK => CH3_DMONITOROUT[27]) = (0:0:0, 0:0:0);
    (CH3_DMONITORCLK => CH3_DMONITOROUT[28]) = (0:0:0, 0:0:0);
    (CH3_DMONITORCLK => CH3_DMONITOROUT[29]) = (0:0:0, 0:0:0);
    (CH3_DMONITORCLK => CH3_DMONITOROUT[2]) = (0:0:0, 0:0:0);
    (CH3_DMONITORCLK => CH3_DMONITOROUT[30]) = (0:0:0, 0:0:0);
    (CH3_DMONITORCLK => CH3_DMONITOROUT[31]) = (0:0:0, 0:0:0);
    (CH3_DMONITORCLK => CH3_DMONITOROUT[3]) = (0:0:0, 0:0:0);
    (CH3_DMONITORCLK => CH3_DMONITOROUT[4]) = (0:0:0, 0:0:0);
    (CH3_DMONITORCLK => CH3_DMONITOROUT[5]) = (0:0:0, 0:0:0);
    (CH3_DMONITORCLK => CH3_DMONITOROUT[6]) = (0:0:0, 0:0:0);
    (CH3_DMONITORCLK => CH3_DMONITOROUT[7]) = (0:0:0, 0:0:0);
    (CH3_DMONITORCLK => CH3_DMONITOROUT[8]) = (0:0:0, 0:0:0);
    (CH3_DMONITORCLK => CH3_DMONITOROUT[9]) = (0:0:0, 0:0:0);
    (CH3_RXUSRCLK => CH3_PHYSTATUS) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RX10GSTAT[0]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RX10GSTAT[1]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RX10GSTAT[2]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RX10GSTAT[3]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RX10GSTAT[4]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RX10GSTAT[5]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RX10GSTAT[6]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RX10GSTAT[7]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXBUFSTATUS[0]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXBUFSTATUS[1]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXBUFSTATUS[2]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXBYTEISALIGNED) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXBYTEREALIGN) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXCHANBONDSEQ) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXCHANISALIGNED) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXCHANREALIGN) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXCHBONDO[0]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXCHBONDO[1]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXCHBONDO[2]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXCHBONDO[3]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXCHBONDO[4]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXCLKCORCNT[0]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXCLKCORCNT[1]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXCOMINITDET) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXCOMMADET) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXCOMSASDET) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXCOMWAKEDET) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXCTRL0[0]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXCTRL0[10]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXCTRL0[11]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXCTRL0[12]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXCTRL0[13]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXCTRL0[14]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXCTRL0[15]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXCTRL0[1]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXCTRL0[2]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXCTRL0[3]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXCTRL0[4]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXCTRL0[5]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXCTRL0[6]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXCTRL0[7]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXCTRL0[8]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXCTRL0[9]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXCTRL1[0]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXCTRL1[10]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXCTRL1[11]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXCTRL1[12]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXCTRL1[13]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXCTRL1[14]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXCTRL1[15]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXCTRL1[1]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXCTRL1[2]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXCTRL1[3]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXCTRL1[4]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXCTRL1[5]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXCTRL1[6]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXCTRL1[7]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXCTRL1[8]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXCTRL1[9]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXCTRL2[0]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXCTRL2[1]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXCTRL2[2]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXCTRL2[3]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXCTRL2[4]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXCTRL2[5]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXCTRL2[6]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXCTRL2[7]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXCTRL3[0]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXCTRL3[1]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXCTRL3[2]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXCTRL3[3]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXCTRL3[4]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXCTRL3[5]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXCTRL3[6]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXCTRL3[7]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATAVALID[0]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATAVALID[1]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[0]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[100]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[101]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[102]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[103]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[104]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[105]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[106]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[107]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[108]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[109]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[10]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[110]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[111]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[112]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[113]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[114]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[115]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[116]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[117]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[118]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[119]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[11]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[120]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[121]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[122]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[123]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[124]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[125]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[126]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[127]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[12]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[13]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[14]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[15]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[16]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[17]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[18]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[19]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[1]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[20]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[21]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[22]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[23]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[24]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[25]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[26]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[27]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[28]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[29]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[2]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[30]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[31]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[32]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[33]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[34]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[35]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[36]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[37]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[38]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[39]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[3]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[40]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[41]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[42]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[43]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[44]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[45]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[46]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[47]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[48]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[49]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[4]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[50]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[51]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[52]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[53]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[54]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[55]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[56]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[57]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[58]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[59]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[5]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[60]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[61]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[62]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[63]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[64]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[65]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[66]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[67]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[68]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[69]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[6]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[70]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[71]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[72]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[73]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[74]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[75]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[76]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[77]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[78]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[79]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[7]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[80]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[81]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[82]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[83]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[84]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[85]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[86]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[87]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[88]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[89]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[8]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[90]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[91]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[92]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[93]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[94]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[95]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[96]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[97]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[98]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[99]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDATA[9]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDLYALIGNERR) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXDLYALIGNPROG) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXHEADERVALID[0]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXHEADERVALID[1]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXHEADER[0]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXHEADER[1]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXHEADER[2]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXHEADER[3]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXHEADER[4]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXHEADER[5]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXPHALIGNDONE) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXPHALIGNERR) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXPHSETINITDONE) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXPRBSERR) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXPRBSLOCKED) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXSIMPLEXPHYSTATUS) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXSLIPDONE) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXSTARTOFSEQ[0]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXSTARTOFSEQ[1]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXSTATUS[0]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXSTATUS[1]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXSTATUS[2]) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXSYNCDONE) = (100:100:100, 100:100:100);
    (CH3_RXUSRCLK => CH3_RXVALID) = (100:100:100, 100:100:100);
    (CH3_TSTCLK0 => CH3_TXOUTCLK) = (0:0:0, 0:0:0);
    (CH3_TSTCLK1 => CH3_RXOUTCLK) = (0:0:0, 0:0:0);
    (CH3_TXUSRCLK => CH3_TX10GSTAT) = (100:100:100, 100:100:100);
    (CH3_TXUSRCLK => CH3_TXBUFSTATUS[0]) = (100:100:100, 100:100:100);
    (CH3_TXUSRCLK => CH3_TXBUFSTATUS[1]) = (100:100:100, 100:100:100);
    (CH3_TXUSRCLK => CH3_TXCOMFINISH) = (100:100:100, 100:100:100);
    (CH3_TXUSRCLK => CH3_TXSIMPLEXPHYSTATUS) = (100:100:100, 100:100:100);
    (DEBUGTRACECLK => DEBUGTRACETDATA[0]) = (100:100:100, 100:100:100);
    (DEBUGTRACECLK => DEBUGTRACETDATA[10]) = (100:100:100, 100:100:100);
    (DEBUGTRACECLK => DEBUGTRACETDATA[11]) = (100:100:100, 100:100:100);
    (DEBUGTRACECLK => DEBUGTRACETDATA[12]) = (100:100:100, 100:100:100);
    (DEBUGTRACECLK => DEBUGTRACETDATA[13]) = (100:100:100, 100:100:100);
    (DEBUGTRACECLK => DEBUGTRACETDATA[14]) = (100:100:100, 100:100:100);
    (DEBUGTRACECLK => DEBUGTRACETDATA[15]) = (100:100:100, 100:100:100);
    (DEBUGTRACECLK => DEBUGTRACETDATA[1]) = (100:100:100, 100:100:100);
    (DEBUGTRACECLK => DEBUGTRACETDATA[2]) = (100:100:100, 100:100:100);
    (DEBUGTRACECLK => DEBUGTRACETDATA[3]) = (100:100:100, 100:100:100);
    (DEBUGTRACECLK => DEBUGTRACETDATA[4]) = (100:100:100, 100:100:100);
    (DEBUGTRACECLK => DEBUGTRACETDATA[5]) = (100:100:100, 100:100:100);
    (DEBUGTRACECLK => DEBUGTRACETDATA[6]) = (100:100:100, 100:100:100);
    (DEBUGTRACECLK => DEBUGTRACETDATA[7]) = (100:100:100, 100:100:100);
    (DEBUGTRACECLK => DEBUGTRACETDATA[8]) = (100:100:100, 100:100:100);
    (DEBUGTRACECLK => DEBUGTRACETDATA[9]) = (100:100:100, 100:100:100);
    (DEBUGTRACECLK => DEBUGTRACETVALID) = (100:100:100, 100:100:100);
    (HSCLK0_LCPLLGTGREFCLK => CH0_RXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLGTGREFCLK => CH0_TXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLGTGREFCLK => CH1_RXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLGTGREFCLK => CH1_TXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLGTREFCLK0 => CH0_RXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLGTREFCLK0 => CH0_TXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLGTREFCLK0 => CH1_RXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLGTREFCLK0 => CH1_TXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLGTREFCLK1 => CH0_RXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLGTREFCLK1 => CH0_TXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLGTREFCLK1 => CH1_RXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLGTREFCLK1 => CH1_TXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLNORTHREFCLK0 => CH0_RXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLNORTHREFCLK0 => CH0_TXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLNORTHREFCLK0 => CH1_RXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLNORTHREFCLK0 => CH1_TXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLNORTHREFCLK1 => CH0_RXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLNORTHREFCLK1 => CH0_TXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLNORTHREFCLK1 => CH1_RXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLNORTHREFCLK1 => CH1_TXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLSOUTHREFCLK0 => CH0_RXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLSOUTHREFCLK0 => CH0_TXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLSOUTHREFCLK0 => CH1_RXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLSOUTHREFCLK0 => CH1_TXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLSOUTHREFCLK1 => CH0_RXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLSOUTHREFCLK1 => CH0_TXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLSOUTHREFCLK1 => CH1_RXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK0_LCPLLSOUTHREFCLK1 => CH1_TXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLGTGREFCLK => CH0_RXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLGTGREFCLK => CH0_TXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLGTGREFCLK => CH1_RXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLGTGREFCLK => CH1_TXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLGTREFCLK0 => CH0_RXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLGTREFCLK0 => CH0_TXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLGTREFCLK0 => CH1_RXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLGTREFCLK0 => CH1_TXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLGTREFCLK1 => CH0_RXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLGTREFCLK1 => CH0_TXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLGTREFCLK1 => CH1_RXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLGTREFCLK1 => CH1_TXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLNORTHREFCLK0 => CH0_RXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLNORTHREFCLK0 => CH0_TXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLNORTHREFCLK0 => CH1_RXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLNORTHREFCLK0 => CH1_TXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLNORTHREFCLK1 => CH0_RXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLNORTHREFCLK1 => CH0_TXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLNORTHREFCLK1 => CH1_RXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLNORTHREFCLK1 => CH1_TXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLSOUTHREFCLK0 => CH0_RXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLSOUTHREFCLK0 => CH0_TXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLSOUTHREFCLK0 => CH1_RXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLSOUTHREFCLK0 => CH1_TXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLSOUTHREFCLK1 => CH0_RXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLSOUTHREFCLK1 => CH0_TXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLSOUTHREFCLK1 => CH1_RXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK0_RPLLSOUTHREFCLK1 => CH1_TXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLGTGREFCLK => CH2_RXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLGTGREFCLK => CH2_TXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLGTGREFCLK => CH3_RXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLGTGREFCLK => CH3_TXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLGTREFCLK0 => CH2_RXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLGTREFCLK0 => CH2_TXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLGTREFCLK0 => CH3_RXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLGTREFCLK0 => CH3_TXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLGTREFCLK1 => CH2_RXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLGTREFCLK1 => CH2_TXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLGTREFCLK1 => CH3_RXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLGTREFCLK1 => CH3_TXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLNORTHREFCLK0 => CH2_RXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLNORTHREFCLK0 => CH2_TXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLNORTHREFCLK0 => CH3_RXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLNORTHREFCLK0 => CH3_TXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLNORTHREFCLK1 => CH2_RXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLNORTHREFCLK1 => CH2_TXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLNORTHREFCLK1 => CH3_RXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLNORTHREFCLK1 => CH3_TXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLSOUTHREFCLK0 => CH2_RXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLSOUTHREFCLK0 => CH2_TXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLSOUTHREFCLK0 => CH3_RXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLSOUTHREFCLK0 => CH3_TXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLSOUTHREFCLK1 => CH2_RXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLSOUTHREFCLK1 => CH2_TXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLSOUTHREFCLK1 => CH3_RXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK1_LCPLLSOUTHREFCLK1 => CH3_TXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLGTGREFCLK => CH2_RXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLGTGREFCLK => CH2_TXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLGTGREFCLK => CH3_RXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLGTGREFCLK => CH3_TXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLGTREFCLK0 => CH2_RXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLGTREFCLK0 => CH2_TXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLGTREFCLK0 => CH3_RXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLGTREFCLK0 => CH3_TXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLGTREFCLK1 => CH2_RXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLGTREFCLK1 => CH2_TXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLGTREFCLK1 => CH3_RXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLGTREFCLK1 => CH3_TXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLNORTHREFCLK0 => CH2_RXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLNORTHREFCLK0 => CH2_TXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLNORTHREFCLK0 => CH3_RXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLNORTHREFCLK0 => CH3_TXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLNORTHREFCLK1 => CH2_RXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLNORTHREFCLK1 => CH2_TXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLNORTHREFCLK1 => CH3_RXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLNORTHREFCLK1 => CH3_TXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLSOUTHREFCLK0 => CH2_RXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLSOUTHREFCLK0 => CH2_TXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLSOUTHREFCLK0 => CH3_RXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLSOUTHREFCLK0 => CH3_TXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLSOUTHREFCLK1 => CH2_RXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLSOUTHREFCLK1 => CH2_TXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLSOUTHREFCLK1 => CH3_RXOUTCLK) = (0:0:0, 0:0:0);
    (HSCLK1_RPLLSOUTHREFCLK1 => CH3_TXOUTCLK) = (0:0:0, 0:0:0);
    (REFCLK0_CLKTESTSIG => REFCLK0_CLKTESTSIGINT) = (0:0:0, 0:0:0);
    (REFCLK0_GTREFCLKPD => REFCLK0_GTREFCLKPDINT) = (0:0:0, 0:0:0);
    (REFCLK1_CLKTESTSIG => REFCLK1_CLKTESTSIGINT) = (0:0:0, 0:0:0);
    (REFCLK1_GTREFCLKPD => REFCLK1_GTREFCLKPDINT) = (0:0:0, 0:0:0);
    (RXMARGINCLK => RXMARGINREQACK) = (100:100:100, 100:100:100);
    (RXMARGINCLK => RXMARGINRESCMD[0]) = (100:100:100, 100:100:100);
    (RXMARGINCLK => RXMARGINRESCMD[1]) = (100:100:100, 100:100:100);
    (RXMARGINCLK => RXMARGINRESCMD[2]) = (100:100:100, 100:100:100);
    (RXMARGINCLK => RXMARGINRESCMD[3]) = (100:100:100, 100:100:100);
    (RXMARGINCLK => RXMARGINRESLANENUM[0]) = (100:100:100, 100:100:100);
    (RXMARGINCLK => RXMARGINRESLANENUM[1]) = (100:100:100, 100:100:100);
    (RXMARGINCLK => RXMARGINRESPAYLD[0]) = (100:100:100, 100:100:100);
    (RXMARGINCLK => RXMARGINRESPAYLD[1]) = (100:100:100, 100:100:100);
    (RXMARGINCLK => RXMARGINRESPAYLD[2]) = (100:100:100, 100:100:100);
    (RXMARGINCLK => RXMARGINRESPAYLD[3]) = (100:100:100, 100:100:100);
    (RXMARGINCLK => RXMARGINRESPAYLD[4]) = (100:100:100, 100:100:100);
    (RXMARGINCLK => RXMARGINRESPAYLD[5]) = (100:100:100, 100:100:100);
    (RXMARGINCLK => RXMARGINRESPAYLD[6]) = (100:100:100, 100:100:100);
    (RXMARGINCLK => RXMARGINRESPAYLD[7]) = (100:100:100, 100:100:100);
    (RXMARGINCLK => RXMARGINRESREQ) = (100:100:100, 100:100:100);
`ifdef XIL_TIMING
    $period (negedge APB3CLK, 0:0:0, notifier);
    $period (negedge AXISCLK, 0:0:0, notifier);
    $period (negedge CH0_DMONITORCLK, 0:0:0, notifier);
    $period (negedge CH0_RXLATCLK, 0:0:0, notifier);
    $period (negedge CH0_RXUSRCLK, 0:0:0, notifier);
    $period (negedge CH0_TXLATCLK, 0:0:0, notifier);
    $period (negedge CH0_TXUSRCLK, 0:0:0, notifier);
    $period (negedge CH1_DMONITORCLK, 0:0:0, notifier);
    $period (negedge CH1_RXLATCLK, 0:0:0, notifier);
    $period (negedge CH1_RXUSRCLK, 0:0:0, notifier);
    $period (negedge CH1_TXLATCLK, 0:0:0, notifier);
    $period (negedge CH1_TXUSRCLK, 0:0:0, notifier);
    $period (negedge CH2_DMONITORCLK, 0:0:0, notifier);
    $period (negedge CH2_RXLATCLK, 0:0:0, notifier);
    $period (negedge CH2_RXUSRCLK, 0:0:0, notifier);
    $period (negedge CH2_TXLATCLK, 0:0:0, notifier);
    $period (negedge CH2_TXUSRCLK, 0:0:0, notifier);
    $period (negedge CH3_DMONITORCLK, 0:0:0, notifier);
    $period (negedge CH3_RXLATCLK, 0:0:0, notifier);
    $period (negedge CH3_RXUSRCLK, 0:0:0, notifier);
    $period (negedge CH3_TXLATCLK, 0:0:0, notifier);
    $period (negedge CH3_TXUSRCLK, 0:0:0, notifier);
    $period (negedge DEBUGTRACECLK, 0:0:0, notifier);
    $period (negedge HSCLK0_LCPLLGTGREFCLK, 0:0:0, notifier);
    $period (negedge HSCLK0_LCPLLGTREFCLK0, 0:0:0, notifier);
    $period (negedge HSCLK0_LCPLLGTREFCLK1, 0:0:0, notifier);
    $period (negedge HSCLK0_LCPLLNORTHREFCLK0, 0:0:0, notifier);
    $period (negedge HSCLK0_LCPLLNORTHREFCLK1, 0:0:0, notifier);
    $period (negedge HSCLK0_LCPLLSOUTHREFCLK0, 0:0:0, notifier);
    $period (negedge HSCLK0_LCPLLSOUTHREFCLK1, 0:0:0, notifier);
    $period (negedge HSCLK0_RPLLGTGREFCLK, 0:0:0, notifier);
    $period (negedge HSCLK0_RPLLGTREFCLK0, 0:0:0, notifier);
    $period (negedge HSCLK0_RPLLGTREFCLK1, 0:0:0, notifier);
    $period (negedge HSCLK0_RPLLNORTHREFCLK0, 0:0:0, notifier);
    $period (negedge HSCLK0_RPLLNORTHREFCLK1, 0:0:0, notifier);
    $period (negedge HSCLK0_RPLLSOUTHREFCLK0, 0:0:0, notifier);
    $period (negedge HSCLK0_RPLLSOUTHREFCLK1, 0:0:0, notifier);
    $period (negedge HSCLK1_LCPLLGTGREFCLK, 0:0:0, notifier);
    $period (negedge HSCLK1_LCPLLGTREFCLK0, 0:0:0, notifier);
    $period (negedge HSCLK1_LCPLLGTREFCLK1, 0:0:0, notifier);
    $period (negedge HSCLK1_LCPLLNORTHREFCLK0, 0:0:0, notifier);
    $period (negedge HSCLK1_LCPLLNORTHREFCLK1, 0:0:0, notifier);
    $period (negedge HSCLK1_LCPLLSOUTHREFCLK0, 0:0:0, notifier);
    $period (negedge HSCLK1_LCPLLSOUTHREFCLK1, 0:0:0, notifier);
    $period (negedge HSCLK1_RPLLGTGREFCLK, 0:0:0, notifier);
    $period (negedge HSCLK1_RPLLGTREFCLK0, 0:0:0, notifier);
    $period (negedge HSCLK1_RPLLGTREFCLK1, 0:0:0, notifier);
    $period (negedge HSCLK1_RPLLNORTHREFCLK0, 0:0:0, notifier);
    $period (negedge HSCLK1_RPLLNORTHREFCLK1, 0:0:0, notifier);
    $period (negedge HSCLK1_RPLLSOUTHREFCLK0, 0:0:0, notifier);
    $period (negedge HSCLK1_RPLLSOUTHREFCLK1, 0:0:0, notifier);
    $period (negedge REFCLK0_CLKTESTSIG, 0:0:0, notifier);
    $period (negedge REFCLK1_CLKTESTSIG, 0:0:0, notifier);
    $period (negedge RXMARGINCLK, 0:0:0, notifier);
    $period (posedge APB3CLK, 0:0:0, notifier);
    $period (posedge AXISCLK, 0:0:0, notifier);
    $period (posedge CH0_DMONITORCLK, 0:0:0, notifier);
    $period (posedge CH0_RXLATCLK, 0:0:0, notifier);
    $period (posedge CH0_RXUSRCLK, 0:0:0, notifier);
    $period (posedge CH0_TXLATCLK, 0:0:0, notifier);
    $period (posedge CH0_TXUSRCLK, 0:0:0, notifier);
    $period (posedge CH1_DMONITORCLK, 0:0:0, notifier);
    $period (posedge CH1_RXLATCLK, 0:0:0, notifier);
    $period (posedge CH1_RXUSRCLK, 0:0:0, notifier);
    $period (posedge CH1_TXLATCLK, 0:0:0, notifier);
    $period (posedge CH1_TXUSRCLK, 0:0:0, notifier);
    $period (posedge CH2_DMONITORCLK, 0:0:0, notifier);
    $period (posedge CH2_RXLATCLK, 0:0:0, notifier);
    $period (posedge CH2_RXUSRCLK, 0:0:0, notifier);
    $period (posedge CH2_TXLATCLK, 0:0:0, notifier);
    $period (posedge CH2_TXUSRCLK, 0:0:0, notifier);
    $period (posedge CH3_DMONITORCLK, 0:0:0, notifier);
    $period (posedge CH3_RXLATCLK, 0:0:0, notifier);
    $period (posedge CH3_RXUSRCLK, 0:0:0, notifier);
    $period (posedge CH3_TXLATCLK, 0:0:0, notifier);
    $period (posedge CH3_TXUSRCLK, 0:0:0, notifier);
    $period (posedge DEBUGTRACECLK, 0:0:0, notifier);
    $period (posedge HSCLK0_LCPLLGTGREFCLK, 0:0:0, notifier);
    $period (posedge HSCLK0_LCPLLGTREFCLK0, 0:0:0, notifier);
    $period (posedge HSCLK0_LCPLLGTREFCLK1, 0:0:0, notifier);
    $period (posedge HSCLK0_LCPLLNORTHREFCLK0, 0:0:0, notifier);
    $period (posedge HSCLK0_LCPLLNORTHREFCLK1, 0:0:0, notifier);
    $period (posedge HSCLK0_LCPLLSOUTHREFCLK0, 0:0:0, notifier);
    $period (posedge HSCLK0_LCPLLSOUTHREFCLK1, 0:0:0, notifier);
    $period (posedge HSCLK0_RPLLGTGREFCLK, 0:0:0, notifier);
    $period (posedge HSCLK0_RPLLGTREFCLK0, 0:0:0, notifier);
    $period (posedge HSCLK0_RPLLGTREFCLK1, 0:0:0, notifier);
    $period (posedge HSCLK0_RPLLNORTHREFCLK0, 0:0:0, notifier);
    $period (posedge HSCLK0_RPLLNORTHREFCLK1, 0:0:0, notifier);
    $period (posedge HSCLK0_RPLLSOUTHREFCLK0, 0:0:0, notifier);
    $period (posedge HSCLK0_RPLLSOUTHREFCLK1, 0:0:0, notifier);
    $period (posedge HSCLK1_LCPLLGTGREFCLK, 0:0:0, notifier);
    $period (posedge HSCLK1_LCPLLGTREFCLK0, 0:0:0, notifier);
    $period (posedge HSCLK1_LCPLLGTREFCLK1, 0:0:0, notifier);
    $period (posedge HSCLK1_LCPLLNORTHREFCLK0, 0:0:0, notifier);
    $period (posedge HSCLK1_LCPLLNORTHREFCLK1, 0:0:0, notifier);
    $period (posedge HSCLK1_LCPLLSOUTHREFCLK0, 0:0:0, notifier);
    $period (posedge HSCLK1_LCPLLSOUTHREFCLK1, 0:0:0, notifier);
    $period (posedge HSCLK1_RPLLGTGREFCLK, 0:0:0, notifier);
    $period (posedge HSCLK1_RPLLGTREFCLK0, 0:0:0, notifier);
    $period (posedge HSCLK1_RPLLGTREFCLK1, 0:0:0, notifier);
    $period (posedge HSCLK1_RPLLNORTHREFCLK0, 0:0:0, notifier);
    $period (posedge HSCLK1_RPLLNORTHREFCLK1, 0:0:0, notifier);
    $period (posedge HSCLK1_RPLLSOUTHREFCLK0, 0:0:0, notifier);
    $period (posedge HSCLK1_RPLLSOUTHREFCLK1, 0:0:0, notifier);
    $period (posedge REFCLK0_CLKTESTSIG, 0:0:0, notifier);
    $period (posedge REFCLK1_CLKTESTSIG, 0:0:0, notifier);
    $period (posedge RXMARGINCLK, 0:0:0, notifier);
    $setuphold (posedge APB3CLK, negedge APB3PADDR[0], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PADDR_delay[0]);
    $setuphold (posedge APB3CLK, negedge APB3PADDR[10], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PADDR_delay[10]);
    $setuphold (posedge APB3CLK, negedge APB3PADDR[11], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PADDR_delay[11]);
    $setuphold (posedge APB3CLK, negedge APB3PADDR[12], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PADDR_delay[12]);
    $setuphold (posedge APB3CLK, negedge APB3PADDR[13], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PADDR_delay[13]);
    $setuphold (posedge APB3CLK, negedge APB3PADDR[14], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PADDR_delay[14]);
    $setuphold (posedge APB3CLK, negedge APB3PADDR[15], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PADDR_delay[15]);
    $setuphold (posedge APB3CLK, negedge APB3PADDR[1], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PADDR_delay[1]);
    $setuphold (posedge APB3CLK, negedge APB3PADDR[2], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PADDR_delay[2]);
    $setuphold (posedge APB3CLK, negedge APB3PADDR[3], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PADDR_delay[3]);
    $setuphold (posedge APB3CLK, negedge APB3PADDR[4], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PADDR_delay[4]);
    $setuphold (posedge APB3CLK, negedge APB3PADDR[5], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PADDR_delay[5]);
    $setuphold (posedge APB3CLK, negedge APB3PADDR[6], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PADDR_delay[6]);
    $setuphold (posedge APB3CLK, negedge APB3PADDR[7], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PADDR_delay[7]);
    $setuphold (posedge APB3CLK, negedge APB3PADDR[8], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PADDR_delay[8]);
    $setuphold (posedge APB3CLK, negedge APB3PADDR[9], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PADDR_delay[9]);
    $setuphold (posedge APB3CLK, negedge APB3PENABLE, 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PENABLE_delay);
    $setuphold (posedge APB3CLK, negedge APB3PSEL, 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PSEL_delay);
    $setuphold (posedge APB3CLK, negedge APB3PWDATA[0], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PWDATA_delay[0]);
    $setuphold (posedge APB3CLK, negedge APB3PWDATA[10], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PWDATA_delay[10]);
    $setuphold (posedge APB3CLK, negedge APB3PWDATA[11], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PWDATA_delay[11]);
    $setuphold (posedge APB3CLK, negedge APB3PWDATA[12], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PWDATA_delay[12]);
    $setuphold (posedge APB3CLK, negedge APB3PWDATA[13], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PWDATA_delay[13]);
    $setuphold (posedge APB3CLK, negedge APB3PWDATA[14], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PWDATA_delay[14]);
    $setuphold (posedge APB3CLK, negedge APB3PWDATA[15], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PWDATA_delay[15]);
    $setuphold (posedge APB3CLK, negedge APB3PWDATA[16], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PWDATA_delay[16]);
    $setuphold (posedge APB3CLK, negedge APB3PWDATA[17], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PWDATA_delay[17]);
    $setuphold (posedge APB3CLK, negedge APB3PWDATA[18], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PWDATA_delay[18]);
    $setuphold (posedge APB3CLK, negedge APB3PWDATA[19], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PWDATA_delay[19]);
    $setuphold (posedge APB3CLK, negedge APB3PWDATA[1], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PWDATA_delay[1]);
    $setuphold (posedge APB3CLK, negedge APB3PWDATA[20], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PWDATA_delay[20]);
    $setuphold (posedge APB3CLK, negedge APB3PWDATA[21], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PWDATA_delay[21]);
    $setuphold (posedge APB3CLK, negedge APB3PWDATA[22], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PWDATA_delay[22]);
    $setuphold (posedge APB3CLK, negedge APB3PWDATA[23], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PWDATA_delay[23]);
    $setuphold (posedge APB3CLK, negedge APB3PWDATA[24], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PWDATA_delay[24]);
    $setuphold (posedge APB3CLK, negedge APB3PWDATA[25], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PWDATA_delay[25]);
    $setuphold (posedge APB3CLK, negedge APB3PWDATA[26], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PWDATA_delay[26]);
    $setuphold (posedge APB3CLK, negedge APB3PWDATA[27], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PWDATA_delay[27]);
    $setuphold (posedge APB3CLK, negedge APB3PWDATA[28], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PWDATA_delay[28]);
    $setuphold (posedge APB3CLK, negedge APB3PWDATA[29], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PWDATA_delay[29]);
    $setuphold (posedge APB3CLK, negedge APB3PWDATA[2], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PWDATA_delay[2]);
    $setuphold (posedge APB3CLK, negedge APB3PWDATA[30], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PWDATA_delay[30]);
    $setuphold (posedge APB3CLK, negedge APB3PWDATA[31], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PWDATA_delay[31]);
    $setuphold (posedge APB3CLK, negedge APB3PWDATA[3], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PWDATA_delay[3]);
    $setuphold (posedge APB3CLK, negedge APB3PWDATA[4], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PWDATA_delay[4]);
    $setuphold (posedge APB3CLK, negedge APB3PWDATA[5], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PWDATA_delay[5]);
    $setuphold (posedge APB3CLK, negedge APB3PWDATA[6], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PWDATA_delay[6]);
    $setuphold (posedge APB3CLK, negedge APB3PWDATA[7], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PWDATA_delay[7]);
    $setuphold (posedge APB3CLK, negedge APB3PWDATA[8], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PWDATA_delay[8]);
    $setuphold (posedge APB3CLK, negedge APB3PWDATA[9], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PWDATA_delay[9]);
    $setuphold (posedge APB3CLK, negedge APB3PWRITE, 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PWRITE_delay);
    $setuphold (posedge APB3CLK, posedge APB3PADDR[0], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PADDR_delay[0]);
    $setuphold (posedge APB3CLK, posedge APB3PADDR[10], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PADDR_delay[10]);
    $setuphold (posedge APB3CLK, posedge APB3PADDR[11], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PADDR_delay[11]);
    $setuphold (posedge APB3CLK, posedge APB3PADDR[12], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PADDR_delay[12]);
    $setuphold (posedge APB3CLK, posedge APB3PADDR[13], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PADDR_delay[13]);
    $setuphold (posedge APB3CLK, posedge APB3PADDR[14], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PADDR_delay[14]);
    $setuphold (posedge APB3CLK, posedge APB3PADDR[15], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PADDR_delay[15]);
    $setuphold (posedge APB3CLK, posedge APB3PADDR[1], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PADDR_delay[1]);
    $setuphold (posedge APB3CLK, posedge APB3PADDR[2], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PADDR_delay[2]);
    $setuphold (posedge APB3CLK, posedge APB3PADDR[3], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PADDR_delay[3]);
    $setuphold (posedge APB3CLK, posedge APB3PADDR[4], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PADDR_delay[4]);
    $setuphold (posedge APB3CLK, posedge APB3PADDR[5], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PADDR_delay[5]);
    $setuphold (posedge APB3CLK, posedge APB3PADDR[6], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PADDR_delay[6]);
    $setuphold (posedge APB3CLK, posedge APB3PADDR[7], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PADDR_delay[7]);
    $setuphold (posedge APB3CLK, posedge APB3PADDR[8], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PADDR_delay[8]);
    $setuphold (posedge APB3CLK, posedge APB3PADDR[9], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PADDR_delay[9]);
    $setuphold (posedge APB3CLK, posedge APB3PENABLE, 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PENABLE_delay);
    $setuphold (posedge APB3CLK, posedge APB3PSEL, 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PSEL_delay);
    $setuphold (posedge APB3CLK, posedge APB3PWDATA[0], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PWDATA_delay[0]);
    $setuphold (posedge APB3CLK, posedge APB3PWDATA[10], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PWDATA_delay[10]);
    $setuphold (posedge APB3CLK, posedge APB3PWDATA[11], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PWDATA_delay[11]);
    $setuphold (posedge APB3CLK, posedge APB3PWDATA[12], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PWDATA_delay[12]);
    $setuphold (posedge APB3CLK, posedge APB3PWDATA[13], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PWDATA_delay[13]);
    $setuphold (posedge APB3CLK, posedge APB3PWDATA[14], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PWDATA_delay[14]);
    $setuphold (posedge APB3CLK, posedge APB3PWDATA[15], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PWDATA_delay[15]);
    $setuphold (posedge APB3CLK, posedge APB3PWDATA[16], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PWDATA_delay[16]);
    $setuphold (posedge APB3CLK, posedge APB3PWDATA[17], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PWDATA_delay[17]);
    $setuphold (posedge APB3CLK, posedge APB3PWDATA[18], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PWDATA_delay[18]);
    $setuphold (posedge APB3CLK, posedge APB3PWDATA[19], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PWDATA_delay[19]);
    $setuphold (posedge APB3CLK, posedge APB3PWDATA[1], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PWDATA_delay[1]);
    $setuphold (posedge APB3CLK, posedge APB3PWDATA[20], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PWDATA_delay[20]);
    $setuphold (posedge APB3CLK, posedge APB3PWDATA[21], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PWDATA_delay[21]);
    $setuphold (posedge APB3CLK, posedge APB3PWDATA[22], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PWDATA_delay[22]);
    $setuphold (posedge APB3CLK, posedge APB3PWDATA[23], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PWDATA_delay[23]);
    $setuphold (posedge APB3CLK, posedge APB3PWDATA[24], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PWDATA_delay[24]);
    $setuphold (posedge APB3CLK, posedge APB3PWDATA[25], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PWDATA_delay[25]);
    $setuphold (posedge APB3CLK, posedge APB3PWDATA[26], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PWDATA_delay[26]);
    $setuphold (posedge APB3CLK, posedge APB3PWDATA[27], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PWDATA_delay[27]);
    $setuphold (posedge APB3CLK, posedge APB3PWDATA[28], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PWDATA_delay[28]);
    $setuphold (posedge APB3CLK, posedge APB3PWDATA[29], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PWDATA_delay[29]);
    $setuphold (posedge APB3CLK, posedge APB3PWDATA[2], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PWDATA_delay[2]);
    $setuphold (posedge APB3CLK, posedge APB3PWDATA[30], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PWDATA_delay[30]);
    $setuphold (posedge APB3CLK, posedge APB3PWDATA[31], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PWDATA_delay[31]);
    $setuphold (posedge APB3CLK, posedge APB3PWDATA[3], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PWDATA_delay[3]);
    $setuphold (posedge APB3CLK, posedge APB3PWDATA[4], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PWDATA_delay[4]);
    $setuphold (posedge APB3CLK, posedge APB3PWDATA[5], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PWDATA_delay[5]);
    $setuphold (posedge APB3CLK, posedge APB3PWDATA[6], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PWDATA_delay[6]);
    $setuphold (posedge APB3CLK, posedge APB3PWDATA[7], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PWDATA_delay[7]);
    $setuphold (posedge APB3CLK, posedge APB3PWDATA[8], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PWDATA_delay[8]);
    $setuphold (posedge APB3CLK, posedge APB3PWDATA[9], 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PWDATA_delay[9]);
    $setuphold (posedge APB3CLK, posedge APB3PWRITE, 0:0:0, 0:0:0, notifier, , , APB3CLK_delay, APB3PWRITE_delay);
    $setuphold (posedge AXISCLK, negedge M0_AXIS_TREADY, 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, M0_AXIS_TREADY_delay);
    $setuphold (posedge AXISCLK, negedge M1_AXIS_TREADY, 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, M1_AXIS_TREADY_delay);
    $setuphold (posedge AXISCLK, negedge M2_AXIS_TREADY, 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, M2_AXIS_TREADY_delay);
    $setuphold (posedge AXISCLK, negedge S0_AXIS_TDATA[0], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S0_AXIS_TDATA_delay[0]);
    $setuphold (posedge AXISCLK, negedge S0_AXIS_TDATA[10], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S0_AXIS_TDATA_delay[10]);
    $setuphold (posedge AXISCLK, negedge S0_AXIS_TDATA[11], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S0_AXIS_TDATA_delay[11]);
    $setuphold (posedge AXISCLK, negedge S0_AXIS_TDATA[12], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S0_AXIS_TDATA_delay[12]);
    $setuphold (posedge AXISCLK, negedge S0_AXIS_TDATA[13], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S0_AXIS_TDATA_delay[13]);
    $setuphold (posedge AXISCLK, negedge S0_AXIS_TDATA[14], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S0_AXIS_TDATA_delay[14]);
    $setuphold (posedge AXISCLK, negedge S0_AXIS_TDATA[15], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S0_AXIS_TDATA_delay[15]);
    $setuphold (posedge AXISCLK, negedge S0_AXIS_TDATA[16], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S0_AXIS_TDATA_delay[16]);
    $setuphold (posedge AXISCLK, negedge S0_AXIS_TDATA[17], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S0_AXIS_TDATA_delay[17]);
    $setuphold (posedge AXISCLK, negedge S0_AXIS_TDATA[18], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S0_AXIS_TDATA_delay[18]);
    $setuphold (posedge AXISCLK, negedge S0_AXIS_TDATA[19], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S0_AXIS_TDATA_delay[19]);
    $setuphold (posedge AXISCLK, negedge S0_AXIS_TDATA[1], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S0_AXIS_TDATA_delay[1]);
    $setuphold (posedge AXISCLK, negedge S0_AXIS_TDATA[20], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S0_AXIS_TDATA_delay[20]);
    $setuphold (posedge AXISCLK, negedge S0_AXIS_TDATA[21], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S0_AXIS_TDATA_delay[21]);
    $setuphold (posedge AXISCLK, negedge S0_AXIS_TDATA[22], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S0_AXIS_TDATA_delay[22]);
    $setuphold (posedge AXISCLK, negedge S0_AXIS_TDATA[23], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S0_AXIS_TDATA_delay[23]);
    $setuphold (posedge AXISCLK, negedge S0_AXIS_TDATA[24], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S0_AXIS_TDATA_delay[24]);
    $setuphold (posedge AXISCLK, negedge S0_AXIS_TDATA[25], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S0_AXIS_TDATA_delay[25]);
    $setuphold (posedge AXISCLK, negedge S0_AXIS_TDATA[26], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S0_AXIS_TDATA_delay[26]);
    $setuphold (posedge AXISCLK, negedge S0_AXIS_TDATA[27], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S0_AXIS_TDATA_delay[27]);
    $setuphold (posedge AXISCLK, negedge S0_AXIS_TDATA[28], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S0_AXIS_TDATA_delay[28]);
    $setuphold (posedge AXISCLK, negedge S0_AXIS_TDATA[29], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S0_AXIS_TDATA_delay[29]);
    $setuphold (posedge AXISCLK, negedge S0_AXIS_TDATA[2], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S0_AXIS_TDATA_delay[2]);
    $setuphold (posedge AXISCLK, negedge S0_AXIS_TDATA[30], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S0_AXIS_TDATA_delay[30]);
    $setuphold (posedge AXISCLK, negedge S0_AXIS_TDATA[31], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S0_AXIS_TDATA_delay[31]);
    $setuphold (posedge AXISCLK, negedge S0_AXIS_TDATA[3], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S0_AXIS_TDATA_delay[3]);
    $setuphold (posedge AXISCLK, negedge S0_AXIS_TDATA[4], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S0_AXIS_TDATA_delay[4]);
    $setuphold (posedge AXISCLK, negedge S0_AXIS_TDATA[5], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S0_AXIS_TDATA_delay[5]);
    $setuphold (posedge AXISCLK, negedge S0_AXIS_TDATA[6], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S0_AXIS_TDATA_delay[6]);
    $setuphold (posedge AXISCLK, negedge S0_AXIS_TDATA[7], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S0_AXIS_TDATA_delay[7]);
    $setuphold (posedge AXISCLK, negedge S0_AXIS_TDATA[8], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S0_AXIS_TDATA_delay[8]);
    $setuphold (posedge AXISCLK, negedge S0_AXIS_TDATA[9], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S0_AXIS_TDATA_delay[9]);
    $setuphold (posedge AXISCLK, negedge S0_AXIS_TLAST, 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S0_AXIS_TLAST_delay);
    $setuphold (posedge AXISCLK, negedge S0_AXIS_TVALID, 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S0_AXIS_TVALID_delay);
    $setuphold (posedge AXISCLK, negedge S1_AXIS_TDATA[0], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S1_AXIS_TDATA_delay[0]);
    $setuphold (posedge AXISCLK, negedge S1_AXIS_TDATA[10], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S1_AXIS_TDATA_delay[10]);
    $setuphold (posedge AXISCLK, negedge S1_AXIS_TDATA[11], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S1_AXIS_TDATA_delay[11]);
    $setuphold (posedge AXISCLK, negedge S1_AXIS_TDATA[12], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S1_AXIS_TDATA_delay[12]);
    $setuphold (posedge AXISCLK, negedge S1_AXIS_TDATA[13], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S1_AXIS_TDATA_delay[13]);
    $setuphold (posedge AXISCLK, negedge S1_AXIS_TDATA[14], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S1_AXIS_TDATA_delay[14]);
    $setuphold (posedge AXISCLK, negedge S1_AXIS_TDATA[15], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S1_AXIS_TDATA_delay[15]);
    $setuphold (posedge AXISCLK, negedge S1_AXIS_TDATA[16], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S1_AXIS_TDATA_delay[16]);
    $setuphold (posedge AXISCLK, negedge S1_AXIS_TDATA[17], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S1_AXIS_TDATA_delay[17]);
    $setuphold (posedge AXISCLK, negedge S1_AXIS_TDATA[18], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S1_AXIS_TDATA_delay[18]);
    $setuphold (posedge AXISCLK, negedge S1_AXIS_TDATA[19], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S1_AXIS_TDATA_delay[19]);
    $setuphold (posedge AXISCLK, negedge S1_AXIS_TDATA[1], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S1_AXIS_TDATA_delay[1]);
    $setuphold (posedge AXISCLK, negedge S1_AXIS_TDATA[20], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S1_AXIS_TDATA_delay[20]);
    $setuphold (posedge AXISCLK, negedge S1_AXIS_TDATA[21], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S1_AXIS_TDATA_delay[21]);
    $setuphold (posedge AXISCLK, negedge S1_AXIS_TDATA[22], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S1_AXIS_TDATA_delay[22]);
    $setuphold (posedge AXISCLK, negedge S1_AXIS_TDATA[23], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S1_AXIS_TDATA_delay[23]);
    $setuphold (posedge AXISCLK, negedge S1_AXIS_TDATA[24], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S1_AXIS_TDATA_delay[24]);
    $setuphold (posedge AXISCLK, negedge S1_AXIS_TDATA[25], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S1_AXIS_TDATA_delay[25]);
    $setuphold (posedge AXISCLK, negedge S1_AXIS_TDATA[26], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S1_AXIS_TDATA_delay[26]);
    $setuphold (posedge AXISCLK, negedge S1_AXIS_TDATA[27], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S1_AXIS_TDATA_delay[27]);
    $setuphold (posedge AXISCLK, negedge S1_AXIS_TDATA[28], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S1_AXIS_TDATA_delay[28]);
    $setuphold (posedge AXISCLK, negedge S1_AXIS_TDATA[29], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S1_AXIS_TDATA_delay[29]);
    $setuphold (posedge AXISCLK, negedge S1_AXIS_TDATA[2], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S1_AXIS_TDATA_delay[2]);
    $setuphold (posedge AXISCLK, negedge S1_AXIS_TDATA[30], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S1_AXIS_TDATA_delay[30]);
    $setuphold (posedge AXISCLK, negedge S1_AXIS_TDATA[31], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S1_AXIS_TDATA_delay[31]);
    $setuphold (posedge AXISCLK, negedge S1_AXIS_TDATA[3], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S1_AXIS_TDATA_delay[3]);
    $setuphold (posedge AXISCLK, negedge S1_AXIS_TDATA[4], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S1_AXIS_TDATA_delay[4]);
    $setuphold (posedge AXISCLK, negedge S1_AXIS_TDATA[5], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S1_AXIS_TDATA_delay[5]);
    $setuphold (posedge AXISCLK, negedge S1_AXIS_TDATA[6], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S1_AXIS_TDATA_delay[6]);
    $setuphold (posedge AXISCLK, negedge S1_AXIS_TDATA[7], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S1_AXIS_TDATA_delay[7]);
    $setuphold (posedge AXISCLK, negedge S1_AXIS_TDATA[8], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S1_AXIS_TDATA_delay[8]);
    $setuphold (posedge AXISCLK, negedge S1_AXIS_TDATA[9], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S1_AXIS_TDATA_delay[9]);
    $setuphold (posedge AXISCLK, negedge S1_AXIS_TLAST, 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S1_AXIS_TLAST_delay);
    $setuphold (posedge AXISCLK, negedge S1_AXIS_TVALID, 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S1_AXIS_TVALID_delay);
    $setuphold (posedge AXISCLK, negedge S2_AXIS_TDATA[0], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S2_AXIS_TDATA_delay[0]);
    $setuphold (posedge AXISCLK, negedge S2_AXIS_TDATA[10], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S2_AXIS_TDATA_delay[10]);
    $setuphold (posedge AXISCLK, negedge S2_AXIS_TDATA[11], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S2_AXIS_TDATA_delay[11]);
    $setuphold (posedge AXISCLK, negedge S2_AXIS_TDATA[12], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S2_AXIS_TDATA_delay[12]);
    $setuphold (posedge AXISCLK, negedge S2_AXIS_TDATA[13], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S2_AXIS_TDATA_delay[13]);
    $setuphold (posedge AXISCLK, negedge S2_AXIS_TDATA[14], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S2_AXIS_TDATA_delay[14]);
    $setuphold (posedge AXISCLK, negedge S2_AXIS_TDATA[15], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S2_AXIS_TDATA_delay[15]);
    $setuphold (posedge AXISCLK, negedge S2_AXIS_TDATA[16], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S2_AXIS_TDATA_delay[16]);
    $setuphold (posedge AXISCLK, negedge S2_AXIS_TDATA[17], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S2_AXIS_TDATA_delay[17]);
    $setuphold (posedge AXISCLK, negedge S2_AXIS_TDATA[18], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S2_AXIS_TDATA_delay[18]);
    $setuphold (posedge AXISCLK, negedge S2_AXIS_TDATA[19], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S2_AXIS_TDATA_delay[19]);
    $setuphold (posedge AXISCLK, negedge S2_AXIS_TDATA[1], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S2_AXIS_TDATA_delay[1]);
    $setuphold (posedge AXISCLK, negedge S2_AXIS_TDATA[20], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S2_AXIS_TDATA_delay[20]);
    $setuphold (posedge AXISCLK, negedge S2_AXIS_TDATA[21], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S2_AXIS_TDATA_delay[21]);
    $setuphold (posedge AXISCLK, negedge S2_AXIS_TDATA[22], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S2_AXIS_TDATA_delay[22]);
    $setuphold (posedge AXISCLK, negedge S2_AXIS_TDATA[23], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S2_AXIS_TDATA_delay[23]);
    $setuphold (posedge AXISCLK, negedge S2_AXIS_TDATA[24], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S2_AXIS_TDATA_delay[24]);
    $setuphold (posedge AXISCLK, negedge S2_AXIS_TDATA[25], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S2_AXIS_TDATA_delay[25]);
    $setuphold (posedge AXISCLK, negedge S2_AXIS_TDATA[26], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S2_AXIS_TDATA_delay[26]);
    $setuphold (posedge AXISCLK, negedge S2_AXIS_TDATA[27], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S2_AXIS_TDATA_delay[27]);
    $setuphold (posedge AXISCLK, negedge S2_AXIS_TDATA[28], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S2_AXIS_TDATA_delay[28]);
    $setuphold (posedge AXISCLK, negedge S2_AXIS_TDATA[29], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S2_AXIS_TDATA_delay[29]);
    $setuphold (posedge AXISCLK, negedge S2_AXIS_TDATA[2], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S2_AXIS_TDATA_delay[2]);
    $setuphold (posedge AXISCLK, negedge S2_AXIS_TDATA[30], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S2_AXIS_TDATA_delay[30]);
    $setuphold (posedge AXISCLK, negedge S2_AXIS_TDATA[31], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S2_AXIS_TDATA_delay[31]);
    $setuphold (posedge AXISCLK, negedge S2_AXIS_TDATA[3], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S2_AXIS_TDATA_delay[3]);
    $setuphold (posedge AXISCLK, negedge S2_AXIS_TDATA[4], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S2_AXIS_TDATA_delay[4]);
    $setuphold (posedge AXISCLK, negedge S2_AXIS_TDATA[5], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S2_AXIS_TDATA_delay[5]);
    $setuphold (posedge AXISCLK, negedge S2_AXIS_TDATA[6], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S2_AXIS_TDATA_delay[6]);
    $setuphold (posedge AXISCLK, negedge S2_AXIS_TDATA[7], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S2_AXIS_TDATA_delay[7]);
    $setuphold (posedge AXISCLK, negedge S2_AXIS_TDATA[8], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S2_AXIS_TDATA_delay[8]);
    $setuphold (posedge AXISCLK, negedge S2_AXIS_TDATA[9], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S2_AXIS_TDATA_delay[9]);
    $setuphold (posedge AXISCLK, negedge S2_AXIS_TLAST, 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S2_AXIS_TLAST_delay);
    $setuphold (posedge AXISCLK, negedge S2_AXIS_TVALID, 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S2_AXIS_TVALID_delay);
    $setuphold (posedge AXISCLK, posedge M0_AXIS_TREADY, 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, M0_AXIS_TREADY_delay);
    $setuphold (posedge AXISCLK, posedge M1_AXIS_TREADY, 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, M1_AXIS_TREADY_delay);
    $setuphold (posedge AXISCLK, posedge M2_AXIS_TREADY, 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, M2_AXIS_TREADY_delay);
    $setuphold (posedge AXISCLK, posedge S0_AXIS_TDATA[0], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S0_AXIS_TDATA_delay[0]);
    $setuphold (posedge AXISCLK, posedge S0_AXIS_TDATA[10], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S0_AXIS_TDATA_delay[10]);
    $setuphold (posedge AXISCLK, posedge S0_AXIS_TDATA[11], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S0_AXIS_TDATA_delay[11]);
    $setuphold (posedge AXISCLK, posedge S0_AXIS_TDATA[12], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S0_AXIS_TDATA_delay[12]);
    $setuphold (posedge AXISCLK, posedge S0_AXIS_TDATA[13], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S0_AXIS_TDATA_delay[13]);
    $setuphold (posedge AXISCLK, posedge S0_AXIS_TDATA[14], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S0_AXIS_TDATA_delay[14]);
    $setuphold (posedge AXISCLK, posedge S0_AXIS_TDATA[15], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S0_AXIS_TDATA_delay[15]);
    $setuphold (posedge AXISCLK, posedge S0_AXIS_TDATA[16], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S0_AXIS_TDATA_delay[16]);
    $setuphold (posedge AXISCLK, posedge S0_AXIS_TDATA[17], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S0_AXIS_TDATA_delay[17]);
    $setuphold (posedge AXISCLK, posedge S0_AXIS_TDATA[18], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S0_AXIS_TDATA_delay[18]);
    $setuphold (posedge AXISCLK, posedge S0_AXIS_TDATA[19], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S0_AXIS_TDATA_delay[19]);
    $setuphold (posedge AXISCLK, posedge S0_AXIS_TDATA[1], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S0_AXIS_TDATA_delay[1]);
    $setuphold (posedge AXISCLK, posedge S0_AXIS_TDATA[20], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S0_AXIS_TDATA_delay[20]);
    $setuphold (posedge AXISCLK, posedge S0_AXIS_TDATA[21], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S0_AXIS_TDATA_delay[21]);
    $setuphold (posedge AXISCLK, posedge S0_AXIS_TDATA[22], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S0_AXIS_TDATA_delay[22]);
    $setuphold (posedge AXISCLK, posedge S0_AXIS_TDATA[23], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S0_AXIS_TDATA_delay[23]);
    $setuphold (posedge AXISCLK, posedge S0_AXIS_TDATA[24], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S0_AXIS_TDATA_delay[24]);
    $setuphold (posedge AXISCLK, posedge S0_AXIS_TDATA[25], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S0_AXIS_TDATA_delay[25]);
    $setuphold (posedge AXISCLK, posedge S0_AXIS_TDATA[26], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S0_AXIS_TDATA_delay[26]);
    $setuphold (posedge AXISCLK, posedge S0_AXIS_TDATA[27], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S0_AXIS_TDATA_delay[27]);
    $setuphold (posedge AXISCLK, posedge S0_AXIS_TDATA[28], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S0_AXIS_TDATA_delay[28]);
    $setuphold (posedge AXISCLK, posedge S0_AXIS_TDATA[29], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S0_AXIS_TDATA_delay[29]);
    $setuphold (posedge AXISCLK, posedge S0_AXIS_TDATA[2], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S0_AXIS_TDATA_delay[2]);
    $setuphold (posedge AXISCLK, posedge S0_AXIS_TDATA[30], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S0_AXIS_TDATA_delay[30]);
    $setuphold (posedge AXISCLK, posedge S0_AXIS_TDATA[31], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S0_AXIS_TDATA_delay[31]);
    $setuphold (posedge AXISCLK, posedge S0_AXIS_TDATA[3], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S0_AXIS_TDATA_delay[3]);
    $setuphold (posedge AXISCLK, posedge S0_AXIS_TDATA[4], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S0_AXIS_TDATA_delay[4]);
    $setuphold (posedge AXISCLK, posedge S0_AXIS_TDATA[5], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S0_AXIS_TDATA_delay[5]);
    $setuphold (posedge AXISCLK, posedge S0_AXIS_TDATA[6], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S0_AXIS_TDATA_delay[6]);
    $setuphold (posedge AXISCLK, posedge S0_AXIS_TDATA[7], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S0_AXIS_TDATA_delay[7]);
    $setuphold (posedge AXISCLK, posedge S0_AXIS_TDATA[8], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S0_AXIS_TDATA_delay[8]);
    $setuphold (posedge AXISCLK, posedge S0_AXIS_TDATA[9], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S0_AXIS_TDATA_delay[9]);
    $setuphold (posedge AXISCLK, posedge S0_AXIS_TLAST, 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S0_AXIS_TLAST_delay);
    $setuphold (posedge AXISCLK, posedge S0_AXIS_TVALID, 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S0_AXIS_TVALID_delay);
    $setuphold (posedge AXISCLK, posedge S1_AXIS_TDATA[0], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S1_AXIS_TDATA_delay[0]);
    $setuphold (posedge AXISCLK, posedge S1_AXIS_TDATA[10], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S1_AXIS_TDATA_delay[10]);
    $setuphold (posedge AXISCLK, posedge S1_AXIS_TDATA[11], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S1_AXIS_TDATA_delay[11]);
    $setuphold (posedge AXISCLK, posedge S1_AXIS_TDATA[12], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S1_AXIS_TDATA_delay[12]);
    $setuphold (posedge AXISCLK, posedge S1_AXIS_TDATA[13], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S1_AXIS_TDATA_delay[13]);
    $setuphold (posedge AXISCLK, posedge S1_AXIS_TDATA[14], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S1_AXIS_TDATA_delay[14]);
    $setuphold (posedge AXISCLK, posedge S1_AXIS_TDATA[15], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S1_AXIS_TDATA_delay[15]);
    $setuphold (posedge AXISCLK, posedge S1_AXIS_TDATA[16], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S1_AXIS_TDATA_delay[16]);
    $setuphold (posedge AXISCLK, posedge S1_AXIS_TDATA[17], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S1_AXIS_TDATA_delay[17]);
    $setuphold (posedge AXISCLK, posedge S1_AXIS_TDATA[18], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S1_AXIS_TDATA_delay[18]);
    $setuphold (posedge AXISCLK, posedge S1_AXIS_TDATA[19], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S1_AXIS_TDATA_delay[19]);
    $setuphold (posedge AXISCLK, posedge S1_AXIS_TDATA[1], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S1_AXIS_TDATA_delay[1]);
    $setuphold (posedge AXISCLK, posedge S1_AXIS_TDATA[20], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S1_AXIS_TDATA_delay[20]);
    $setuphold (posedge AXISCLK, posedge S1_AXIS_TDATA[21], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S1_AXIS_TDATA_delay[21]);
    $setuphold (posedge AXISCLK, posedge S1_AXIS_TDATA[22], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S1_AXIS_TDATA_delay[22]);
    $setuphold (posedge AXISCLK, posedge S1_AXIS_TDATA[23], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S1_AXIS_TDATA_delay[23]);
    $setuphold (posedge AXISCLK, posedge S1_AXIS_TDATA[24], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S1_AXIS_TDATA_delay[24]);
    $setuphold (posedge AXISCLK, posedge S1_AXIS_TDATA[25], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S1_AXIS_TDATA_delay[25]);
    $setuphold (posedge AXISCLK, posedge S1_AXIS_TDATA[26], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S1_AXIS_TDATA_delay[26]);
    $setuphold (posedge AXISCLK, posedge S1_AXIS_TDATA[27], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S1_AXIS_TDATA_delay[27]);
    $setuphold (posedge AXISCLK, posedge S1_AXIS_TDATA[28], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S1_AXIS_TDATA_delay[28]);
    $setuphold (posedge AXISCLK, posedge S1_AXIS_TDATA[29], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S1_AXIS_TDATA_delay[29]);
    $setuphold (posedge AXISCLK, posedge S1_AXIS_TDATA[2], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S1_AXIS_TDATA_delay[2]);
    $setuphold (posedge AXISCLK, posedge S1_AXIS_TDATA[30], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S1_AXIS_TDATA_delay[30]);
    $setuphold (posedge AXISCLK, posedge S1_AXIS_TDATA[31], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S1_AXIS_TDATA_delay[31]);
    $setuphold (posedge AXISCLK, posedge S1_AXIS_TDATA[3], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S1_AXIS_TDATA_delay[3]);
    $setuphold (posedge AXISCLK, posedge S1_AXIS_TDATA[4], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S1_AXIS_TDATA_delay[4]);
    $setuphold (posedge AXISCLK, posedge S1_AXIS_TDATA[5], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S1_AXIS_TDATA_delay[5]);
    $setuphold (posedge AXISCLK, posedge S1_AXIS_TDATA[6], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S1_AXIS_TDATA_delay[6]);
    $setuphold (posedge AXISCLK, posedge S1_AXIS_TDATA[7], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S1_AXIS_TDATA_delay[7]);
    $setuphold (posedge AXISCLK, posedge S1_AXIS_TDATA[8], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S1_AXIS_TDATA_delay[8]);
    $setuphold (posedge AXISCLK, posedge S1_AXIS_TDATA[9], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S1_AXIS_TDATA_delay[9]);
    $setuphold (posedge AXISCLK, posedge S1_AXIS_TLAST, 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S1_AXIS_TLAST_delay);
    $setuphold (posedge AXISCLK, posedge S1_AXIS_TVALID, 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S1_AXIS_TVALID_delay);
    $setuphold (posedge AXISCLK, posedge S2_AXIS_TDATA[0], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S2_AXIS_TDATA_delay[0]);
    $setuphold (posedge AXISCLK, posedge S2_AXIS_TDATA[10], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S2_AXIS_TDATA_delay[10]);
    $setuphold (posedge AXISCLK, posedge S2_AXIS_TDATA[11], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S2_AXIS_TDATA_delay[11]);
    $setuphold (posedge AXISCLK, posedge S2_AXIS_TDATA[12], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S2_AXIS_TDATA_delay[12]);
    $setuphold (posedge AXISCLK, posedge S2_AXIS_TDATA[13], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S2_AXIS_TDATA_delay[13]);
    $setuphold (posedge AXISCLK, posedge S2_AXIS_TDATA[14], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S2_AXIS_TDATA_delay[14]);
    $setuphold (posedge AXISCLK, posedge S2_AXIS_TDATA[15], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S2_AXIS_TDATA_delay[15]);
    $setuphold (posedge AXISCLK, posedge S2_AXIS_TDATA[16], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S2_AXIS_TDATA_delay[16]);
    $setuphold (posedge AXISCLK, posedge S2_AXIS_TDATA[17], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S2_AXIS_TDATA_delay[17]);
    $setuphold (posedge AXISCLK, posedge S2_AXIS_TDATA[18], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S2_AXIS_TDATA_delay[18]);
    $setuphold (posedge AXISCLK, posedge S2_AXIS_TDATA[19], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S2_AXIS_TDATA_delay[19]);
    $setuphold (posedge AXISCLK, posedge S2_AXIS_TDATA[1], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S2_AXIS_TDATA_delay[1]);
    $setuphold (posedge AXISCLK, posedge S2_AXIS_TDATA[20], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S2_AXIS_TDATA_delay[20]);
    $setuphold (posedge AXISCLK, posedge S2_AXIS_TDATA[21], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S2_AXIS_TDATA_delay[21]);
    $setuphold (posedge AXISCLK, posedge S2_AXIS_TDATA[22], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S2_AXIS_TDATA_delay[22]);
    $setuphold (posedge AXISCLK, posedge S2_AXIS_TDATA[23], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S2_AXIS_TDATA_delay[23]);
    $setuphold (posedge AXISCLK, posedge S2_AXIS_TDATA[24], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S2_AXIS_TDATA_delay[24]);
    $setuphold (posedge AXISCLK, posedge S2_AXIS_TDATA[25], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S2_AXIS_TDATA_delay[25]);
    $setuphold (posedge AXISCLK, posedge S2_AXIS_TDATA[26], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S2_AXIS_TDATA_delay[26]);
    $setuphold (posedge AXISCLK, posedge S2_AXIS_TDATA[27], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S2_AXIS_TDATA_delay[27]);
    $setuphold (posedge AXISCLK, posedge S2_AXIS_TDATA[28], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S2_AXIS_TDATA_delay[28]);
    $setuphold (posedge AXISCLK, posedge S2_AXIS_TDATA[29], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S2_AXIS_TDATA_delay[29]);
    $setuphold (posedge AXISCLK, posedge S2_AXIS_TDATA[2], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S2_AXIS_TDATA_delay[2]);
    $setuphold (posedge AXISCLK, posedge S2_AXIS_TDATA[30], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S2_AXIS_TDATA_delay[30]);
    $setuphold (posedge AXISCLK, posedge S2_AXIS_TDATA[31], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S2_AXIS_TDATA_delay[31]);
    $setuphold (posedge AXISCLK, posedge S2_AXIS_TDATA[3], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S2_AXIS_TDATA_delay[3]);
    $setuphold (posedge AXISCLK, posedge S2_AXIS_TDATA[4], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S2_AXIS_TDATA_delay[4]);
    $setuphold (posedge AXISCLK, posedge S2_AXIS_TDATA[5], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S2_AXIS_TDATA_delay[5]);
    $setuphold (posedge AXISCLK, posedge S2_AXIS_TDATA[6], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S2_AXIS_TDATA_delay[6]);
    $setuphold (posedge AXISCLK, posedge S2_AXIS_TDATA[7], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S2_AXIS_TDATA_delay[7]);
    $setuphold (posedge AXISCLK, posedge S2_AXIS_TDATA[8], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S2_AXIS_TDATA_delay[8]);
    $setuphold (posedge AXISCLK, posedge S2_AXIS_TDATA[9], 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S2_AXIS_TDATA_delay[9]);
    $setuphold (posedge AXISCLK, posedge S2_AXIS_TLAST, 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S2_AXIS_TLAST_delay);
    $setuphold (posedge AXISCLK, posedge S2_AXIS_TVALID, 0:0:0, 0:0:0, notifier, , , AXISCLK_delay, S2_AXIS_TVALID_delay);
    $setuphold (posedge CH0_RXUSRCLK, negedge CH0_EYESCANTRIGGER, 0:0:0, 0:0:0, notifier, , , CH0_RXUSRCLK_delay, CH0_EYESCANTRIGGER_delay);
    $setuphold (posedge CH0_RXUSRCLK, negedge CH0_RXCHBONDI[0], 0:0:0, 0:0:0, notifier, , , CH0_RXUSRCLK_delay, CH0_RXCHBONDI_delay[0]);
    $setuphold (posedge CH0_RXUSRCLK, negedge CH0_RXCHBONDI[1], 0:0:0, 0:0:0, notifier, , , CH0_RXUSRCLK_delay, CH0_RXCHBONDI_delay[1]);
    $setuphold (posedge CH0_RXUSRCLK, negedge CH0_RXCHBONDI[2], 0:0:0, 0:0:0, notifier, , , CH0_RXUSRCLK_delay, CH0_RXCHBONDI_delay[2]);
    $setuphold (posedge CH0_RXUSRCLK, negedge CH0_RXCHBONDI[3], 0:0:0, 0:0:0, notifier, , , CH0_RXUSRCLK_delay, CH0_RXCHBONDI_delay[3]);
    $setuphold (posedge CH0_RXUSRCLK, negedge CH0_RXCHBONDI[4], 0:0:0, 0:0:0, notifier, , , CH0_RXUSRCLK_delay, CH0_RXCHBONDI_delay[4]);
    $setuphold (posedge CH0_RXUSRCLK, negedge CH0_RXDLYALIGNREQ, 0:0:0, 0:0:0, notifier, , , CH0_RXUSRCLK_delay, CH0_RXDLYALIGNREQ_delay);
    $setuphold (posedge CH0_RXUSRCLK, negedge CH0_RXEQTRAINING, 0:0:0, 0:0:0, notifier, , , CH0_RXUSRCLK_delay, CH0_RXEQTRAINING_delay);
    $setuphold (posedge CH0_RXUSRCLK, negedge CH0_RXGEARBOXSLIP, 0:0:0, 0:0:0, notifier, , , CH0_RXUSRCLK_delay, CH0_RXGEARBOXSLIP_delay);
    $setuphold (posedge CH0_RXUSRCLK, negedge CH0_RXMLDCHAINDONE, 0:0:0, 0:0:0, notifier, , , CH0_RXUSRCLK_delay, CH0_RXMLDCHAINDONE_delay);
    $setuphold (posedge CH0_RXUSRCLK, negedge CH0_RXMLDCHAINREQ, 0:0:0, 0:0:0, notifier, , , CH0_RXUSRCLK_delay, CH0_RXMLDCHAINREQ_delay);
    $setuphold (posedge CH0_RXUSRCLK, negedge CH0_RXPD[0], 0:0:0, 0:0:0, notifier, , , CH0_RXUSRCLK_delay, CH0_RXPD_delay[0]);
    $setuphold (posedge CH0_RXUSRCLK, negedge CH0_RXPD[1], 0:0:0, 0:0:0, notifier, , , CH0_RXUSRCLK_delay, CH0_RXPD_delay[1]);
    $setuphold (posedge CH0_RXUSRCLK, negedge CH0_RXPHALIGNREQ, 0:0:0, 0:0:0, notifier, , , CH0_RXUSRCLK_delay, CH0_RXPHALIGNREQ_delay);
    $setuphold (posedge CH0_RXUSRCLK, negedge CH0_RXPHSETINITREQ, 0:0:0, 0:0:0, notifier, , , CH0_RXUSRCLK_delay, CH0_RXPHSETINITREQ_delay);
    $setuphold (posedge CH0_RXUSRCLK, negedge CH0_RXPHSHIFT180, 0:0:0, 0:0:0, notifier, , , CH0_RXUSRCLK_delay, CH0_RXPHSHIFT180_delay);
    $setuphold (posedge CH0_RXUSRCLK, negedge CH0_RXPOLARITY, 0:0:0, 0:0:0, notifier, , , CH0_RXUSRCLK_delay, CH0_RXPOLARITY_delay);
    $setuphold (posedge CH0_RXUSRCLK, negedge CH0_RXRATE[0], 0:0:0, 0:0:0, notifier, , , CH0_RXUSRCLK_delay, CH0_RXRATE_delay[0]);
    $setuphold (posedge CH0_RXUSRCLK, negedge CH0_RXRATE[1], 0:0:0, 0:0:0, notifier, , , CH0_RXUSRCLK_delay, CH0_RXRATE_delay[1]);
    $setuphold (posedge CH0_RXUSRCLK, negedge CH0_RXRATE[2], 0:0:0, 0:0:0, notifier, , , CH0_RXUSRCLK_delay, CH0_RXRATE_delay[2]);
    $setuphold (posedge CH0_RXUSRCLK, negedge CH0_RXRATE[3], 0:0:0, 0:0:0, notifier, , , CH0_RXUSRCLK_delay, CH0_RXRATE_delay[3]);
    $setuphold (posedge CH0_RXUSRCLK, negedge CH0_RXRATE[4], 0:0:0, 0:0:0, notifier, , , CH0_RXUSRCLK_delay, CH0_RXRATE_delay[4]);
    $setuphold (posedge CH0_RXUSRCLK, negedge CH0_RXRATE[5], 0:0:0, 0:0:0, notifier, , , CH0_RXUSRCLK_delay, CH0_RXRATE_delay[5]);
    $setuphold (posedge CH0_RXUSRCLK, negedge CH0_RXRATE[6], 0:0:0, 0:0:0, notifier, , , CH0_RXUSRCLK_delay, CH0_RXRATE_delay[6]);
    $setuphold (posedge CH0_RXUSRCLK, negedge CH0_RXRATE[7], 0:0:0, 0:0:0, notifier, , , CH0_RXUSRCLK_delay, CH0_RXRATE_delay[7]);
    $setuphold (posedge CH0_RXUSRCLK, negedge CH0_RXSLIDE, 0:0:0, 0:0:0, notifier, , , CH0_RXUSRCLK_delay, CH0_RXSLIDE_delay);
    $setuphold (posedge CH0_RXUSRCLK, posedge CH0_EYESCANTRIGGER, 0:0:0, 0:0:0, notifier, , , CH0_RXUSRCLK_delay, CH0_EYESCANTRIGGER_delay);
    $setuphold (posedge CH0_RXUSRCLK, posedge CH0_RXCHBONDI[0], 0:0:0, 0:0:0, notifier, , , CH0_RXUSRCLK_delay, CH0_RXCHBONDI_delay[0]);
    $setuphold (posedge CH0_RXUSRCLK, posedge CH0_RXCHBONDI[1], 0:0:0, 0:0:0, notifier, , , CH0_RXUSRCLK_delay, CH0_RXCHBONDI_delay[1]);
    $setuphold (posedge CH0_RXUSRCLK, posedge CH0_RXCHBONDI[2], 0:0:0, 0:0:0, notifier, , , CH0_RXUSRCLK_delay, CH0_RXCHBONDI_delay[2]);
    $setuphold (posedge CH0_RXUSRCLK, posedge CH0_RXCHBONDI[3], 0:0:0, 0:0:0, notifier, , , CH0_RXUSRCLK_delay, CH0_RXCHBONDI_delay[3]);
    $setuphold (posedge CH0_RXUSRCLK, posedge CH0_RXCHBONDI[4], 0:0:0, 0:0:0, notifier, , , CH0_RXUSRCLK_delay, CH0_RXCHBONDI_delay[4]);
    $setuphold (posedge CH0_RXUSRCLK, posedge CH0_RXDLYALIGNREQ, 0:0:0, 0:0:0, notifier, , , CH0_RXUSRCLK_delay, CH0_RXDLYALIGNREQ_delay);
    $setuphold (posedge CH0_RXUSRCLK, posedge CH0_RXEQTRAINING, 0:0:0, 0:0:0, notifier, , , CH0_RXUSRCLK_delay, CH0_RXEQTRAINING_delay);
    $setuphold (posedge CH0_RXUSRCLK, posedge CH0_RXGEARBOXSLIP, 0:0:0, 0:0:0, notifier, , , CH0_RXUSRCLK_delay, CH0_RXGEARBOXSLIP_delay);
    $setuphold (posedge CH0_RXUSRCLK, posedge CH0_RXMLDCHAINDONE, 0:0:0, 0:0:0, notifier, , , CH0_RXUSRCLK_delay, CH0_RXMLDCHAINDONE_delay);
    $setuphold (posedge CH0_RXUSRCLK, posedge CH0_RXMLDCHAINREQ, 0:0:0, 0:0:0, notifier, , , CH0_RXUSRCLK_delay, CH0_RXMLDCHAINREQ_delay);
    $setuphold (posedge CH0_RXUSRCLK, posedge CH0_RXPD[0], 0:0:0, 0:0:0, notifier, , , CH0_RXUSRCLK_delay, CH0_RXPD_delay[0]);
    $setuphold (posedge CH0_RXUSRCLK, posedge CH0_RXPD[1], 0:0:0, 0:0:0, notifier, , , CH0_RXUSRCLK_delay, CH0_RXPD_delay[1]);
    $setuphold (posedge CH0_RXUSRCLK, posedge CH0_RXPHALIGNREQ, 0:0:0, 0:0:0, notifier, , , CH0_RXUSRCLK_delay, CH0_RXPHALIGNREQ_delay);
    $setuphold (posedge CH0_RXUSRCLK, posedge CH0_RXPHSETINITREQ, 0:0:0, 0:0:0, notifier, , , CH0_RXUSRCLK_delay, CH0_RXPHSETINITREQ_delay);
    $setuphold (posedge CH0_RXUSRCLK, posedge CH0_RXPHSHIFT180, 0:0:0, 0:0:0, notifier, , , CH0_RXUSRCLK_delay, CH0_RXPHSHIFT180_delay);
    $setuphold (posedge CH0_RXUSRCLK, posedge CH0_RXPOLARITY, 0:0:0, 0:0:0, notifier, , , CH0_RXUSRCLK_delay, CH0_RXPOLARITY_delay);
    $setuphold (posedge CH0_RXUSRCLK, posedge CH0_RXRATE[0], 0:0:0, 0:0:0, notifier, , , CH0_RXUSRCLK_delay, CH0_RXRATE_delay[0]);
    $setuphold (posedge CH0_RXUSRCLK, posedge CH0_RXRATE[1], 0:0:0, 0:0:0, notifier, , , CH0_RXUSRCLK_delay, CH0_RXRATE_delay[1]);
    $setuphold (posedge CH0_RXUSRCLK, posedge CH0_RXRATE[2], 0:0:0, 0:0:0, notifier, , , CH0_RXUSRCLK_delay, CH0_RXRATE_delay[2]);
    $setuphold (posedge CH0_RXUSRCLK, posedge CH0_RXRATE[3], 0:0:0, 0:0:0, notifier, , , CH0_RXUSRCLK_delay, CH0_RXRATE_delay[3]);
    $setuphold (posedge CH0_RXUSRCLK, posedge CH0_RXRATE[4], 0:0:0, 0:0:0, notifier, , , CH0_RXUSRCLK_delay, CH0_RXRATE_delay[4]);
    $setuphold (posedge CH0_RXUSRCLK, posedge CH0_RXRATE[5], 0:0:0, 0:0:0, notifier, , , CH0_RXUSRCLK_delay, CH0_RXRATE_delay[5]);
    $setuphold (posedge CH0_RXUSRCLK, posedge CH0_RXRATE[6], 0:0:0, 0:0:0, notifier, , , CH0_RXUSRCLK_delay, CH0_RXRATE_delay[6]);
    $setuphold (posedge CH0_RXUSRCLK, posedge CH0_RXRATE[7], 0:0:0, 0:0:0, notifier, , , CH0_RXUSRCLK_delay, CH0_RXRATE_delay[7]);
    $setuphold (posedge CH0_RXUSRCLK, posedge CH0_RXSLIDE, 0:0:0, 0:0:0, notifier, , , CH0_RXUSRCLK_delay, CH0_RXSLIDE_delay);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_PHYESMADAPTSAVE, 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_PHYESMADAPTSAVE_delay);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXCOMINIT, 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXCOMINIT_delay);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXCOMSAS, 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXCOMSAS_delay);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXCOMWAKE, 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXCOMWAKE_delay);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXCTRL0[0], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXCTRL0_delay[0]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXCTRL0[10], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXCTRL0_delay[10]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXCTRL0[11], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXCTRL0_delay[11]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXCTRL0[12], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXCTRL0_delay[12]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXCTRL0[13], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXCTRL0_delay[13]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXCTRL0[14], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXCTRL0_delay[14]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXCTRL0[15], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXCTRL0_delay[15]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXCTRL0[1], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXCTRL0_delay[1]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXCTRL0[2], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXCTRL0_delay[2]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXCTRL0[3], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXCTRL0_delay[3]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXCTRL0[4], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXCTRL0_delay[4]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXCTRL0[5], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXCTRL0_delay[5]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXCTRL0[6], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXCTRL0_delay[6]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXCTRL0[7], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXCTRL0_delay[7]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXCTRL0[8], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXCTRL0_delay[8]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXCTRL0[9], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXCTRL0_delay[9]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXCTRL1[0], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXCTRL1_delay[0]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXCTRL1[10], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXCTRL1_delay[10]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXCTRL1[11], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXCTRL1_delay[11]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXCTRL1[12], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXCTRL1_delay[12]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXCTRL1[13], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXCTRL1_delay[13]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXCTRL1[14], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXCTRL1_delay[14]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXCTRL1[15], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXCTRL1_delay[15]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXCTRL1[1], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXCTRL1_delay[1]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXCTRL1[2], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXCTRL1_delay[2]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXCTRL1[3], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXCTRL1_delay[3]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXCTRL1[4], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXCTRL1_delay[4]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXCTRL1[5], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXCTRL1_delay[5]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXCTRL1[6], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXCTRL1_delay[6]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXCTRL1[7], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXCTRL1_delay[7]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXCTRL1[8], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXCTRL1_delay[8]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXCTRL1[9], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXCTRL1_delay[9]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXCTRL2[0], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXCTRL2_delay[0]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXCTRL2[1], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXCTRL2_delay[1]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXCTRL2[2], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXCTRL2_delay[2]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXCTRL2[3], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXCTRL2_delay[3]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXCTRL2[4], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXCTRL2_delay[4]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXCTRL2[5], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXCTRL2_delay[5]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXCTRL2[6], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXCTRL2_delay[6]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXCTRL2[7], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXCTRL2_delay[7]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[0], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[0]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[100], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[100]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[101], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[101]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[102], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[102]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[103], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[103]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[104], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[104]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[105], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[105]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[106], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[106]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[107], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[107]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[108], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[108]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[109], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[109]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[10], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[10]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[110], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[110]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[111], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[111]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[112], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[112]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[113], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[113]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[114], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[114]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[115], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[115]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[116], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[116]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[117], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[117]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[118], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[118]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[119], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[119]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[11], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[11]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[120], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[120]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[121], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[121]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[122], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[122]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[123], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[123]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[124], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[124]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[125], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[125]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[126], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[126]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[127], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[127]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[12], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[12]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[13], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[13]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[14], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[14]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[15], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[15]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[16], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[16]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[17], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[17]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[18], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[18]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[19], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[19]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[1], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[1]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[20], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[20]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[21], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[21]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[22], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[22]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[23], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[23]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[24], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[24]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[25], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[25]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[26], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[26]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[27], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[27]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[28], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[28]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[29], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[29]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[2], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[2]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[30], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[30]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[31], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[31]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[32], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[32]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[33], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[33]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[34], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[34]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[35], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[35]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[36], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[36]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[37], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[37]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[38], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[38]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[39], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[39]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[3], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[3]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[40], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[40]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[41], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[41]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[42], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[42]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[43], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[43]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[44], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[44]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[45], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[45]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[46], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[46]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[47], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[47]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[48], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[48]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[49], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[49]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[4], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[4]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[50], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[50]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[51], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[51]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[52], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[52]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[53], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[53]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[54], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[54]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[55], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[55]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[56], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[56]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[57], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[57]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[58], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[58]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[59], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[59]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[5], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[5]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[60], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[60]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[61], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[61]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[62], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[62]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[63], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[63]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[64], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[64]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[65], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[65]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[66], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[66]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[67], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[67]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[68], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[68]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[69], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[69]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[6], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[6]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[70], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[70]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[71], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[71]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[72], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[72]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[73], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[73]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[74], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[74]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[75], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[75]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[76], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[76]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[77], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[77]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[78], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[78]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[79], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[79]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[7], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[7]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[80], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[80]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[81], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[81]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[82], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[82]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[83], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[83]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[84], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[84]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[85], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[85]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[86], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[86]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[87], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[87]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[88], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[88]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[89], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[89]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[8], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[8]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[90], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[90]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[91], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[91]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[92], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[92]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[93], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[93]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[94], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[94]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[95], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[95]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[96], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[96]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[97], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[97]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[98], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[98]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[99], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[99]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDATA[9], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[9]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXDETECTRX, 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDETECTRX_delay);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXELECIDLE, 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXELECIDLE_delay);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXHEADER[0], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXHEADER_delay[0]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXHEADER[1], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXHEADER_delay[1]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXHEADER[2], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXHEADER_delay[2]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXHEADER[3], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXHEADER_delay[3]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXHEADER[4], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXHEADER_delay[4]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXHEADER[5], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXHEADER_delay[5]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXINHIBIT, 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXINHIBIT_delay);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXPD[0], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXPD_delay[0]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXPD[1], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXPD_delay[1]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXPIPPMEN, 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXPIPPMEN_delay);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXPIPPMSTEPSIZE[0], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXPIPPMSTEPSIZE_delay[0]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXPIPPMSTEPSIZE[1], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXPIPPMSTEPSIZE_delay[1]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXPIPPMSTEPSIZE[2], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXPIPPMSTEPSIZE_delay[2]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXPIPPMSTEPSIZE[3], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXPIPPMSTEPSIZE_delay[3]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXPIPPMSTEPSIZE[4], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXPIPPMSTEPSIZE_delay[4]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXPOLARITY, 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXPOLARITY_delay);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXRATE[0], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXRATE_delay[0]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXRATE[1], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXRATE_delay[1]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXRATE[2], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXRATE_delay[2]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXRATE[3], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXRATE_delay[3]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXRATE[4], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXRATE_delay[4]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXRATE[5], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXRATE_delay[5]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXRATE[6], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXRATE_delay[6]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXRATE[7], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXRATE_delay[7]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXSEQUENCE[0], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXSEQUENCE_delay[0]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXSEQUENCE[1], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXSEQUENCE_delay[1]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXSEQUENCE[2], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXSEQUENCE_delay[2]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXSEQUENCE[3], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXSEQUENCE_delay[3]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXSEQUENCE[4], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXSEQUENCE_delay[4]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXSEQUENCE[5], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXSEQUENCE_delay[5]);
    $setuphold (posedge CH0_TXUSRCLK, negedge CH0_TXSEQUENCE[6], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXSEQUENCE_delay[6]);
    $setuphold (posedge CH0_TXUSRCLK, negedge PCIELTSSM[0], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, PCIELTSSM_delay[0]);
    $setuphold (posedge CH0_TXUSRCLK, negedge PCIELTSSM[1], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, PCIELTSSM_delay[1]);
    $setuphold (posedge CH0_TXUSRCLK, negedge PCIELTSSM[2], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, PCIELTSSM_delay[2]);
    $setuphold (posedge CH0_TXUSRCLK, negedge PCIELTSSM[3], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, PCIELTSSM_delay[3]);
    $setuphold (posedge CH0_TXUSRCLK, negedge PCIELTSSM[4], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, PCIELTSSM_delay[4]);
    $setuphold (posedge CH0_TXUSRCLK, negedge PCIELTSSM[5], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, PCIELTSSM_delay[5]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_PHYESMADAPTSAVE, 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_PHYESMADAPTSAVE_delay);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXCOMINIT, 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXCOMINIT_delay);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXCOMSAS, 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXCOMSAS_delay);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXCOMWAKE, 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXCOMWAKE_delay);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXCTRL0[0], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXCTRL0_delay[0]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXCTRL0[10], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXCTRL0_delay[10]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXCTRL0[11], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXCTRL0_delay[11]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXCTRL0[12], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXCTRL0_delay[12]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXCTRL0[13], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXCTRL0_delay[13]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXCTRL0[14], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXCTRL0_delay[14]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXCTRL0[15], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXCTRL0_delay[15]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXCTRL0[1], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXCTRL0_delay[1]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXCTRL0[2], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXCTRL0_delay[2]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXCTRL0[3], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXCTRL0_delay[3]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXCTRL0[4], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXCTRL0_delay[4]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXCTRL0[5], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXCTRL0_delay[5]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXCTRL0[6], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXCTRL0_delay[6]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXCTRL0[7], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXCTRL0_delay[7]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXCTRL0[8], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXCTRL0_delay[8]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXCTRL0[9], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXCTRL0_delay[9]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXCTRL1[0], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXCTRL1_delay[0]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXCTRL1[10], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXCTRL1_delay[10]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXCTRL1[11], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXCTRL1_delay[11]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXCTRL1[12], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXCTRL1_delay[12]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXCTRL1[13], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXCTRL1_delay[13]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXCTRL1[14], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXCTRL1_delay[14]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXCTRL1[15], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXCTRL1_delay[15]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXCTRL1[1], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXCTRL1_delay[1]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXCTRL1[2], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXCTRL1_delay[2]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXCTRL1[3], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXCTRL1_delay[3]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXCTRL1[4], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXCTRL1_delay[4]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXCTRL1[5], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXCTRL1_delay[5]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXCTRL1[6], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXCTRL1_delay[6]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXCTRL1[7], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXCTRL1_delay[7]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXCTRL1[8], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXCTRL1_delay[8]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXCTRL1[9], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXCTRL1_delay[9]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXCTRL2[0], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXCTRL2_delay[0]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXCTRL2[1], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXCTRL2_delay[1]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXCTRL2[2], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXCTRL2_delay[2]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXCTRL2[3], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXCTRL2_delay[3]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXCTRL2[4], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXCTRL2_delay[4]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXCTRL2[5], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXCTRL2_delay[5]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXCTRL2[6], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXCTRL2_delay[6]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXCTRL2[7], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXCTRL2_delay[7]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[0], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[0]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[100], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[100]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[101], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[101]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[102], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[102]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[103], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[103]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[104], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[104]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[105], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[105]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[106], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[106]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[107], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[107]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[108], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[108]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[109], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[109]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[10], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[10]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[110], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[110]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[111], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[111]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[112], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[112]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[113], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[113]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[114], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[114]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[115], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[115]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[116], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[116]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[117], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[117]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[118], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[118]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[119], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[119]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[11], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[11]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[120], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[120]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[121], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[121]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[122], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[122]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[123], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[123]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[124], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[124]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[125], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[125]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[126], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[126]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[127], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[127]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[12], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[12]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[13], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[13]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[14], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[14]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[15], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[15]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[16], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[16]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[17], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[17]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[18], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[18]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[19], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[19]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[1], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[1]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[20], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[20]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[21], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[21]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[22], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[22]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[23], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[23]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[24], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[24]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[25], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[25]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[26], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[26]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[27], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[27]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[28], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[28]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[29], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[29]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[2], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[2]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[30], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[30]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[31], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[31]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[32], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[32]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[33], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[33]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[34], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[34]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[35], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[35]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[36], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[36]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[37], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[37]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[38], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[38]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[39], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[39]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[3], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[3]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[40], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[40]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[41], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[41]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[42], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[42]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[43], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[43]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[44], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[44]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[45], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[45]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[46], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[46]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[47], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[47]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[48], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[48]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[49], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[49]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[4], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[4]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[50], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[50]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[51], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[51]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[52], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[52]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[53], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[53]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[54], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[54]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[55], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[55]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[56], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[56]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[57], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[57]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[58], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[58]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[59], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[59]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[5], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[5]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[60], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[60]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[61], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[61]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[62], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[62]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[63], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[63]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[64], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[64]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[65], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[65]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[66], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[66]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[67], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[67]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[68], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[68]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[69], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[69]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[6], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[6]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[70], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[70]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[71], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[71]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[72], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[72]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[73], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[73]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[74], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[74]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[75], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[75]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[76], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[76]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[77], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[77]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[78], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[78]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[79], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[79]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[7], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[7]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[80], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[80]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[81], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[81]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[82], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[82]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[83], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[83]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[84], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[84]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[85], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[85]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[86], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[86]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[87], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[87]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[88], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[88]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[89], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[89]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[8], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[8]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[90], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[90]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[91], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[91]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[92], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[92]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[93], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[93]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[94], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[94]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[95], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[95]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[96], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[96]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[97], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[97]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[98], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[98]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[99], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[99]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDATA[9], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDATA_delay[9]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXDETECTRX, 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXDETECTRX_delay);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXELECIDLE, 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXELECIDLE_delay);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXHEADER[0], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXHEADER_delay[0]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXHEADER[1], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXHEADER_delay[1]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXHEADER[2], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXHEADER_delay[2]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXHEADER[3], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXHEADER_delay[3]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXHEADER[4], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXHEADER_delay[4]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXHEADER[5], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXHEADER_delay[5]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXINHIBIT, 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXINHIBIT_delay);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXPD[0], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXPD_delay[0]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXPD[1], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXPD_delay[1]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXPIPPMEN, 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXPIPPMEN_delay);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXPIPPMSTEPSIZE[0], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXPIPPMSTEPSIZE_delay[0]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXPIPPMSTEPSIZE[1], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXPIPPMSTEPSIZE_delay[1]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXPIPPMSTEPSIZE[2], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXPIPPMSTEPSIZE_delay[2]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXPIPPMSTEPSIZE[3], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXPIPPMSTEPSIZE_delay[3]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXPIPPMSTEPSIZE[4], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXPIPPMSTEPSIZE_delay[4]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXPOLARITY, 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXPOLARITY_delay);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXRATE[0], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXRATE_delay[0]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXRATE[1], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXRATE_delay[1]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXRATE[2], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXRATE_delay[2]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXRATE[3], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXRATE_delay[3]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXRATE[4], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXRATE_delay[4]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXRATE[5], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXRATE_delay[5]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXRATE[6], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXRATE_delay[6]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXRATE[7], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXRATE_delay[7]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXSEQUENCE[0], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXSEQUENCE_delay[0]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXSEQUENCE[1], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXSEQUENCE_delay[1]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXSEQUENCE[2], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXSEQUENCE_delay[2]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXSEQUENCE[3], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXSEQUENCE_delay[3]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXSEQUENCE[4], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXSEQUENCE_delay[4]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXSEQUENCE[5], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXSEQUENCE_delay[5]);
    $setuphold (posedge CH0_TXUSRCLK, posedge CH0_TXSEQUENCE[6], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, CH0_TXSEQUENCE_delay[6]);
    $setuphold (posedge CH0_TXUSRCLK, posedge PCIELTSSM[0], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, PCIELTSSM_delay[0]);
    $setuphold (posedge CH0_TXUSRCLK, posedge PCIELTSSM[1], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, PCIELTSSM_delay[1]);
    $setuphold (posedge CH0_TXUSRCLK, posedge PCIELTSSM[2], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, PCIELTSSM_delay[2]);
    $setuphold (posedge CH0_TXUSRCLK, posedge PCIELTSSM[3], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, PCIELTSSM_delay[3]);
    $setuphold (posedge CH0_TXUSRCLK, posedge PCIELTSSM[4], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, PCIELTSSM_delay[4]);
    $setuphold (posedge CH0_TXUSRCLK, posedge PCIELTSSM[5], 0:0:0, 0:0:0, notifier, , , CH0_TXUSRCLK_delay, PCIELTSSM_delay[5]);
    $setuphold (posedge CH1_RXUSRCLK, negedge CH1_EYESCANTRIGGER, 0:0:0, 0:0:0, notifier, , , CH1_RXUSRCLK_delay, CH1_EYESCANTRIGGER_delay);
    $setuphold (posedge CH1_RXUSRCLK, negedge CH1_RXCHBONDI[0], 0:0:0, 0:0:0, notifier, , , CH1_RXUSRCLK_delay, CH1_RXCHBONDI_delay[0]);
    $setuphold (posedge CH1_RXUSRCLK, negedge CH1_RXCHBONDI[1], 0:0:0, 0:0:0, notifier, , , CH1_RXUSRCLK_delay, CH1_RXCHBONDI_delay[1]);
    $setuphold (posedge CH1_RXUSRCLK, negedge CH1_RXCHBONDI[2], 0:0:0, 0:0:0, notifier, , , CH1_RXUSRCLK_delay, CH1_RXCHBONDI_delay[2]);
    $setuphold (posedge CH1_RXUSRCLK, negedge CH1_RXCHBONDI[3], 0:0:0, 0:0:0, notifier, , , CH1_RXUSRCLK_delay, CH1_RXCHBONDI_delay[3]);
    $setuphold (posedge CH1_RXUSRCLK, negedge CH1_RXCHBONDI[4], 0:0:0, 0:0:0, notifier, , , CH1_RXUSRCLK_delay, CH1_RXCHBONDI_delay[4]);
    $setuphold (posedge CH1_RXUSRCLK, negedge CH1_RXDLYALIGNREQ, 0:0:0, 0:0:0, notifier, , , CH1_RXUSRCLK_delay, CH1_RXDLYALIGNREQ_delay);
    $setuphold (posedge CH1_RXUSRCLK, negedge CH1_RXEQTRAINING, 0:0:0, 0:0:0, notifier, , , CH1_RXUSRCLK_delay, CH1_RXEQTRAINING_delay);
    $setuphold (posedge CH1_RXUSRCLK, negedge CH1_RXGEARBOXSLIP, 0:0:0, 0:0:0, notifier, , , CH1_RXUSRCLK_delay, CH1_RXGEARBOXSLIP_delay);
    $setuphold (posedge CH1_RXUSRCLK, negedge CH1_RXMLDCHAINDONE, 0:0:0, 0:0:0, notifier, , , CH1_RXUSRCLK_delay, CH1_RXMLDCHAINDONE_delay);
    $setuphold (posedge CH1_RXUSRCLK, negedge CH1_RXMLDCHAINREQ, 0:0:0, 0:0:0, notifier, , , CH1_RXUSRCLK_delay, CH1_RXMLDCHAINREQ_delay);
    $setuphold (posedge CH1_RXUSRCLK, negedge CH1_RXPD[0], 0:0:0, 0:0:0, notifier, , , CH1_RXUSRCLK_delay, CH1_RXPD_delay[0]);
    $setuphold (posedge CH1_RXUSRCLK, negedge CH1_RXPD[1], 0:0:0, 0:0:0, notifier, , , CH1_RXUSRCLK_delay, CH1_RXPD_delay[1]);
    $setuphold (posedge CH1_RXUSRCLK, negedge CH1_RXPHALIGNREQ, 0:0:0, 0:0:0, notifier, , , CH1_RXUSRCLK_delay, CH1_RXPHALIGNREQ_delay);
    $setuphold (posedge CH1_RXUSRCLK, negedge CH1_RXPHSETINITREQ, 0:0:0, 0:0:0, notifier, , , CH1_RXUSRCLK_delay, CH1_RXPHSETINITREQ_delay);
    $setuphold (posedge CH1_RXUSRCLK, negedge CH1_RXPHSHIFT180, 0:0:0, 0:0:0, notifier, , , CH1_RXUSRCLK_delay, CH1_RXPHSHIFT180_delay);
    $setuphold (posedge CH1_RXUSRCLK, negedge CH1_RXPOLARITY, 0:0:0, 0:0:0, notifier, , , CH1_RXUSRCLK_delay, CH1_RXPOLARITY_delay);
    $setuphold (posedge CH1_RXUSRCLK, negedge CH1_RXRATE[0], 0:0:0, 0:0:0, notifier, , , CH1_RXUSRCLK_delay, CH1_RXRATE_delay[0]);
    $setuphold (posedge CH1_RXUSRCLK, negedge CH1_RXRATE[1], 0:0:0, 0:0:0, notifier, , , CH1_RXUSRCLK_delay, CH1_RXRATE_delay[1]);
    $setuphold (posedge CH1_RXUSRCLK, negedge CH1_RXRATE[2], 0:0:0, 0:0:0, notifier, , , CH1_RXUSRCLK_delay, CH1_RXRATE_delay[2]);
    $setuphold (posedge CH1_RXUSRCLK, negedge CH1_RXRATE[3], 0:0:0, 0:0:0, notifier, , , CH1_RXUSRCLK_delay, CH1_RXRATE_delay[3]);
    $setuphold (posedge CH1_RXUSRCLK, negedge CH1_RXRATE[4], 0:0:0, 0:0:0, notifier, , , CH1_RXUSRCLK_delay, CH1_RXRATE_delay[4]);
    $setuphold (posedge CH1_RXUSRCLK, negedge CH1_RXRATE[5], 0:0:0, 0:0:0, notifier, , , CH1_RXUSRCLK_delay, CH1_RXRATE_delay[5]);
    $setuphold (posedge CH1_RXUSRCLK, negedge CH1_RXRATE[6], 0:0:0, 0:0:0, notifier, , , CH1_RXUSRCLK_delay, CH1_RXRATE_delay[6]);
    $setuphold (posedge CH1_RXUSRCLK, negedge CH1_RXRATE[7], 0:0:0, 0:0:0, notifier, , , CH1_RXUSRCLK_delay, CH1_RXRATE_delay[7]);
    $setuphold (posedge CH1_RXUSRCLK, negedge CH1_RXSLIDE, 0:0:0, 0:0:0, notifier, , , CH1_RXUSRCLK_delay, CH1_RXSLIDE_delay);
    $setuphold (posedge CH1_RXUSRCLK, posedge CH1_EYESCANTRIGGER, 0:0:0, 0:0:0, notifier, , , CH1_RXUSRCLK_delay, CH1_EYESCANTRIGGER_delay);
    $setuphold (posedge CH1_RXUSRCLK, posedge CH1_RXCHBONDI[0], 0:0:0, 0:0:0, notifier, , , CH1_RXUSRCLK_delay, CH1_RXCHBONDI_delay[0]);
    $setuphold (posedge CH1_RXUSRCLK, posedge CH1_RXCHBONDI[1], 0:0:0, 0:0:0, notifier, , , CH1_RXUSRCLK_delay, CH1_RXCHBONDI_delay[1]);
    $setuphold (posedge CH1_RXUSRCLK, posedge CH1_RXCHBONDI[2], 0:0:0, 0:0:0, notifier, , , CH1_RXUSRCLK_delay, CH1_RXCHBONDI_delay[2]);
    $setuphold (posedge CH1_RXUSRCLK, posedge CH1_RXCHBONDI[3], 0:0:0, 0:0:0, notifier, , , CH1_RXUSRCLK_delay, CH1_RXCHBONDI_delay[3]);
    $setuphold (posedge CH1_RXUSRCLK, posedge CH1_RXCHBONDI[4], 0:0:0, 0:0:0, notifier, , , CH1_RXUSRCLK_delay, CH1_RXCHBONDI_delay[4]);
    $setuphold (posedge CH1_RXUSRCLK, posedge CH1_RXDLYALIGNREQ, 0:0:0, 0:0:0, notifier, , , CH1_RXUSRCLK_delay, CH1_RXDLYALIGNREQ_delay);
    $setuphold (posedge CH1_RXUSRCLK, posedge CH1_RXEQTRAINING, 0:0:0, 0:0:0, notifier, , , CH1_RXUSRCLK_delay, CH1_RXEQTRAINING_delay);
    $setuphold (posedge CH1_RXUSRCLK, posedge CH1_RXGEARBOXSLIP, 0:0:0, 0:0:0, notifier, , , CH1_RXUSRCLK_delay, CH1_RXGEARBOXSLIP_delay);
    $setuphold (posedge CH1_RXUSRCLK, posedge CH1_RXMLDCHAINDONE, 0:0:0, 0:0:0, notifier, , , CH1_RXUSRCLK_delay, CH1_RXMLDCHAINDONE_delay);
    $setuphold (posedge CH1_RXUSRCLK, posedge CH1_RXMLDCHAINREQ, 0:0:0, 0:0:0, notifier, , , CH1_RXUSRCLK_delay, CH1_RXMLDCHAINREQ_delay);
    $setuphold (posedge CH1_RXUSRCLK, posedge CH1_RXPD[0], 0:0:0, 0:0:0, notifier, , , CH1_RXUSRCLK_delay, CH1_RXPD_delay[0]);
    $setuphold (posedge CH1_RXUSRCLK, posedge CH1_RXPD[1], 0:0:0, 0:0:0, notifier, , , CH1_RXUSRCLK_delay, CH1_RXPD_delay[1]);
    $setuphold (posedge CH1_RXUSRCLK, posedge CH1_RXPHALIGNREQ, 0:0:0, 0:0:0, notifier, , , CH1_RXUSRCLK_delay, CH1_RXPHALIGNREQ_delay);
    $setuphold (posedge CH1_RXUSRCLK, posedge CH1_RXPHSETINITREQ, 0:0:0, 0:0:0, notifier, , , CH1_RXUSRCLK_delay, CH1_RXPHSETINITREQ_delay);
    $setuphold (posedge CH1_RXUSRCLK, posedge CH1_RXPHSHIFT180, 0:0:0, 0:0:0, notifier, , , CH1_RXUSRCLK_delay, CH1_RXPHSHIFT180_delay);
    $setuphold (posedge CH1_RXUSRCLK, posedge CH1_RXPOLARITY, 0:0:0, 0:0:0, notifier, , , CH1_RXUSRCLK_delay, CH1_RXPOLARITY_delay);
    $setuphold (posedge CH1_RXUSRCLK, posedge CH1_RXRATE[0], 0:0:0, 0:0:0, notifier, , , CH1_RXUSRCLK_delay, CH1_RXRATE_delay[0]);
    $setuphold (posedge CH1_RXUSRCLK, posedge CH1_RXRATE[1], 0:0:0, 0:0:0, notifier, , , CH1_RXUSRCLK_delay, CH1_RXRATE_delay[1]);
    $setuphold (posedge CH1_RXUSRCLK, posedge CH1_RXRATE[2], 0:0:0, 0:0:0, notifier, , , CH1_RXUSRCLK_delay, CH1_RXRATE_delay[2]);
    $setuphold (posedge CH1_RXUSRCLK, posedge CH1_RXRATE[3], 0:0:0, 0:0:0, notifier, , , CH1_RXUSRCLK_delay, CH1_RXRATE_delay[3]);
    $setuphold (posedge CH1_RXUSRCLK, posedge CH1_RXRATE[4], 0:0:0, 0:0:0, notifier, , , CH1_RXUSRCLK_delay, CH1_RXRATE_delay[4]);
    $setuphold (posedge CH1_RXUSRCLK, posedge CH1_RXRATE[5], 0:0:0, 0:0:0, notifier, , , CH1_RXUSRCLK_delay, CH1_RXRATE_delay[5]);
    $setuphold (posedge CH1_RXUSRCLK, posedge CH1_RXRATE[6], 0:0:0, 0:0:0, notifier, , , CH1_RXUSRCLK_delay, CH1_RXRATE_delay[6]);
    $setuphold (posedge CH1_RXUSRCLK, posedge CH1_RXRATE[7], 0:0:0, 0:0:0, notifier, , , CH1_RXUSRCLK_delay, CH1_RXRATE_delay[7]);
    $setuphold (posedge CH1_RXUSRCLK, posedge CH1_RXSLIDE, 0:0:0, 0:0:0, notifier, , , CH1_RXUSRCLK_delay, CH1_RXSLIDE_delay);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_PHYESMADAPTSAVE, 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_PHYESMADAPTSAVE_delay);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXCOMINIT, 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXCOMINIT_delay);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXCOMSAS, 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXCOMSAS_delay);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXCOMWAKE, 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXCOMWAKE_delay);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXCTRL0[0], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXCTRL0_delay[0]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXCTRL0[10], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXCTRL0_delay[10]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXCTRL0[11], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXCTRL0_delay[11]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXCTRL0[12], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXCTRL0_delay[12]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXCTRL0[13], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXCTRL0_delay[13]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXCTRL0[14], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXCTRL0_delay[14]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXCTRL0[15], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXCTRL0_delay[15]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXCTRL0[1], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXCTRL0_delay[1]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXCTRL0[2], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXCTRL0_delay[2]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXCTRL0[3], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXCTRL0_delay[3]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXCTRL0[4], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXCTRL0_delay[4]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXCTRL0[5], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXCTRL0_delay[5]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXCTRL0[6], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXCTRL0_delay[6]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXCTRL0[7], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXCTRL0_delay[7]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXCTRL0[8], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXCTRL0_delay[8]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXCTRL0[9], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXCTRL0_delay[9]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXCTRL1[0], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXCTRL1_delay[0]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXCTRL1[10], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXCTRL1_delay[10]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXCTRL1[11], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXCTRL1_delay[11]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXCTRL1[12], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXCTRL1_delay[12]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXCTRL1[13], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXCTRL1_delay[13]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXCTRL1[14], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXCTRL1_delay[14]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXCTRL1[15], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXCTRL1_delay[15]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXCTRL1[1], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXCTRL1_delay[1]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXCTRL1[2], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXCTRL1_delay[2]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXCTRL1[3], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXCTRL1_delay[3]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXCTRL1[4], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXCTRL1_delay[4]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXCTRL1[5], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXCTRL1_delay[5]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXCTRL1[6], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXCTRL1_delay[6]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXCTRL1[7], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXCTRL1_delay[7]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXCTRL1[8], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXCTRL1_delay[8]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXCTRL1[9], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXCTRL1_delay[9]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXCTRL2[0], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXCTRL2_delay[0]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXCTRL2[1], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXCTRL2_delay[1]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXCTRL2[2], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXCTRL2_delay[2]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXCTRL2[3], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXCTRL2_delay[3]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXCTRL2[4], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXCTRL2_delay[4]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXCTRL2[5], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXCTRL2_delay[5]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXCTRL2[6], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXCTRL2_delay[6]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXCTRL2[7], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXCTRL2_delay[7]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[0], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[0]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[100], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[100]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[101], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[101]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[102], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[102]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[103], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[103]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[104], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[104]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[105], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[105]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[106], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[106]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[107], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[107]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[108], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[108]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[109], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[109]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[10], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[10]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[110], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[110]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[111], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[111]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[112], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[112]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[113], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[113]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[114], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[114]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[115], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[115]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[116], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[116]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[117], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[117]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[118], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[118]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[119], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[119]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[11], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[11]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[120], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[120]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[121], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[121]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[122], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[122]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[123], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[123]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[124], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[124]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[125], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[125]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[126], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[126]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[127], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[127]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[12], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[12]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[13], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[13]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[14], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[14]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[15], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[15]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[16], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[16]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[17], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[17]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[18], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[18]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[19], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[19]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[1], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[1]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[20], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[20]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[21], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[21]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[22], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[22]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[23], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[23]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[24], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[24]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[25], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[25]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[26], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[26]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[27], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[27]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[28], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[28]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[29], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[29]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[2], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[2]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[30], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[30]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[31], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[31]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[32], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[32]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[33], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[33]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[34], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[34]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[35], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[35]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[36], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[36]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[37], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[37]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[38], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[38]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[39], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[39]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[3], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[3]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[40], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[40]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[41], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[41]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[42], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[42]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[43], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[43]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[44], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[44]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[45], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[45]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[46], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[46]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[47], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[47]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[48], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[48]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[49], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[49]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[4], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[4]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[50], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[50]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[51], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[51]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[52], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[52]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[53], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[53]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[54], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[54]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[55], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[55]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[56], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[56]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[57], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[57]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[58], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[58]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[59], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[59]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[5], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[5]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[60], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[60]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[61], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[61]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[62], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[62]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[63], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[63]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[64], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[64]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[65], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[65]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[66], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[66]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[67], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[67]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[68], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[68]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[69], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[69]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[6], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[6]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[70], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[70]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[71], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[71]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[72], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[72]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[73], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[73]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[74], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[74]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[75], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[75]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[76], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[76]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[77], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[77]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[78], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[78]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[79], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[79]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[7], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[7]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[80], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[80]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[81], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[81]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[82], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[82]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[83], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[83]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[84], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[84]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[85], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[85]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[86], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[86]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[87], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[87]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[88], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[88]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[89], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[89]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[8], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[8]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[90], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[90]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[91], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[91]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[92], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[92]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[93], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[93]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[94], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[94]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[95], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[95]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[96], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[96]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[97], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[97]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[98], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[98]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[99], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[99]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDATA[9], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[9]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXDETECTRX, 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDETECTRX_delay);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXELECIDLE, 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXELECIDLE_delay);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXHEADER[0], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXHEADER_delay[0]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXHEADER[1], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXHEADER_delay[1]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXHEADER[2], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXHEADER_delay[2]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXHEADER[3], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXHEADER_delay[3]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXHEADER[4], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXHEADER_delay[4]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXHEADER[5], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXHEADER_delay[5]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXINHIBIT, 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXINHIBIT_delay);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXPD[0], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXPD_delay[0]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXPD[1], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXPD_delay[1]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXPIPPMEN, 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXPIPPMEN_delay);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXPIPPMSTEPSIZE[0], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXPIPPMSTEPSIZE_delay[0]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXPIPPMSTEPSIZE[1], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXPIPPMSTEPSIZE_delay[1]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXPIPPMSTEPSIZE[2], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXPIPPMSTEPSIZE_delay[2]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXPIPPMSTEPSIZE[3], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXPIPPMSTEPSIZE_delay[3]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXPIPPMSTEPSIZE[4], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXPIPPMSTEPSIZE_delay[4]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXPOLARITY, 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXPOLARITY_delay);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXRATE[0], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXRATE_delay[0]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXRATE[1], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXRATE_delay[1]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXRATE[2], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXRATE_delay[2]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXRATE[3], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXRATE_delay[3]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXRATE[4], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXRATE_delay[4]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXRATE[5], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXRATE_delay[5]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXRATE[6], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXRATE_delay[6]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXRATE[7], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXRATE_delay[7]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXSEQUENCE[0], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXSEQUENCE_delay[0]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXSEQUENCE[1], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXSEQUENCE_delay[1]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXSEQUENCE[2], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXSEQUENCE_delay[2]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXSEQUENCE[3], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXSEQUENCE_delay[3]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXSEQUENCE[4], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXSEQUENCE_delay[4]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXSEQUENCE[5], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXSEQUENCE_delay[5]);
    $setuphold (posedge CH1_TXUSRCLK, negedge CH1_TXSEQUENCE[6], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXSEQUENCE_delay[6]);
    $setuphold (posedge CH1_TXUSRCLK, negedge PCIELTSSM[0], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, PCIELTSSM_delay[0]);
    $setuphold (posedge CH1_TXUSRCLK, negedge PCIELTSSM[1], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, PCIELTSSM_delay[1]);
    $setuphold (posedge CH1_TXUSRCLK, negedge PCIELTSSM[2], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, PCIELTSSM_delay[2]);
    $setuphold (posedge CH1_TXUSRCLK, negedge PCIELTSSM[3], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, PCIELTSSM_delay[3]);
    $setuphold (posedge CH1_TXUSRCLK, negedge PCIELTSSM[4], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, PCIELTSSM_delay[4]);
    $setuphold (posedge CH1_TXUSRCLK, negedge PCIELTSSM[5], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, PCIELTSSM_delay[5]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_PHYESMADAPTSAVE, 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_PHYESMADAPTSAVE_delay);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXCOMINIT, 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXCOMINIT_delay);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXCOMSAS, 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXCOMSAS_delay);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXCOMWAKE, 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXCOMWAKE_delay);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXCTRL0[0], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXCTRL0_delay[0]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXCTRL0[10], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXCTRL0_delay[10]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXCTRL0[11], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXCTRL0_delay[11]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXCTRL0[12], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXCTRL0_delay[12]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXCTRL0[13], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXCTRL0_delay[13]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXCTRL0[14], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXCTRL0_delay[14]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXCTRL0[15], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXCTRL0_delay[15]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXCTRL0[1], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXCTRL0_delay[1]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXCTRL0[2], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXCTRL0_delay[2]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXCTRL0[3], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXCTRL0_delay[3]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXCTRL0[4], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXCTRL0_delay[4]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXCTRL0[5], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXCTRL0_delay[5]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXCTRL0[6], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXCTRL0_delay[6]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXCTRL0[7], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXCTRL0_delay[7]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXCTRL0[8], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXCTRL0_delay[8]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXCTRL0[9], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXCTRL0_delay[9]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXCTRL1[0], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXCTRL1_delay[0]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXCTRL1[10], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXCTRL1_delay[10]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXCTRL1[11], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXCTRL1_delay[11]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXCTRL1[12], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXCTRL1_delay[12]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXCTRL1[13], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXCTRL1_delay[13]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXCTRL1[14], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXCTRL1_delay[14]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXCTRL1[15], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXCTRL1_delay[15]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXCTRL1[1], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXCTRL1_delay[1]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXCTRL1[2], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXCTRL1_delay[2]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXCTRL1[3], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXCTRL1_delay[3]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXCTRL1[4], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXCTRL1_delay[4]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXCTRL1[5], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXCTRL1_delay[5]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXCTRL1[6], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXCTRL1_delay[6]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXCTRL1[7], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXCTRL1_delay[7]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXCTRL1[8], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXCTRL1_delay[8]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXCTRL1[9], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXCTRL1_delay[9]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXCTRL2[0], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXCTRL2_delay[0]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXCTRL2[1], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXCTRL2_delay[1]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXCTRL2[2], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXCTRL2_delay[2]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXCTRL2[3], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXCTRL2_delay[3]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXCTRL2[4], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXCTRL2_delay[4]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXCTRL2[5], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXCTRL2_delay[5]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXCTRL2[6], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXCTRL2_delay[6]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXCTRL2[7], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXCTRL2_delay[7]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[0], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[0]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[100], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[100]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[101], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[101]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[102], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[102]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[103], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[103]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[104], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[104]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[105], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[105]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[106], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[106]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[107], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[107]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[108], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[108]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[109], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[109]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[10], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[10]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[110], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[110]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[111], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[111]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[112], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[112]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[113], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[113]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[114], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[114]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[115], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[115]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[116], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[116]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[117], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[117]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[118], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[118]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[119], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[119]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[11], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[11]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[120], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[120]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[121], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[121]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[122], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[122]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[123], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[123]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[124], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[124]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[125], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[125]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[126], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[126]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[127], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[127]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[12], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[12]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[13], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[13]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[14], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[14]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[15], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[15]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[16], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[16]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[17], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[17]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[18], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[18]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[19], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[19]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[1], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[1]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[20], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[20]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[21], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[21]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[22], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[22]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[23], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[23]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[24], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[24]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[25], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[25]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[26], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[26]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[27], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[27]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[28], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[28]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[29], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[29]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[2], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[2]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[30], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[30]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[31], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[31]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[32], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[32]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[33], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[33]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[34], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[34]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[35], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[35]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[36], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[36]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[37], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[37]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[38], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[38]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[39], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[39]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[3], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[3]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[40], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[40]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[41], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[41]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[42], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[42]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[43], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[43]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[44], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[44]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[45], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[45]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[46], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[46]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[47], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[47]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[48], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[48]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[49], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[49]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[4], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[4]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[50], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[50]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[51], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[51]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[52], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[52]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[53], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[53]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[54], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[54]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[55], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[55]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[56], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[56]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[57], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[57]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[58], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[58]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[59], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[59]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[5], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[5]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[60], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[60]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[61], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[61]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[62], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[62]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[63], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[63]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[64], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[64]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[65], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[65]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[66], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[66]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[67], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[67]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[68], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[68]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[69], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[69]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[6], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[6]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[70], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[70]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[71], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[71]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[72], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[72]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[73], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[73]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[74], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[74]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[75], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[75]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[76], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[76]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[77], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[77]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[78], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[78]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[79], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[79]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[7], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[7]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[80], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[80]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[81], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[81]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[82], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[82]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[83], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[83]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[84], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[84]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[85], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[85]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[86], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[86]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[87], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[87]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[88], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[88]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[89], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[89]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[8], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[8]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[90], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[90]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[91], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[91]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[92], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[92]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[93], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[93]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[94], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[94]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[95], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[95]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[96], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[96]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[97], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[97]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[98], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[98]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[99], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[99]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDATA[9], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDATA_delay[9]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXDETECTRX, 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXDETECTRX_delay);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXELECIDLE, 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXELECIDLE_delay);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXHEADER[0], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXHEADER_delay[0]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXHEADER[1], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXHEADER_delay[1]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXHEADER[2], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXHEADER_delay[2]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXHEADER[3], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXHEADER_delay[3]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXHEADER[4], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXHEADER_delay[4]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXHEADER[5], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXHEADER_delay[5]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXINHIBIT, 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXINHIBIT_delay);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXPD[0], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXPD_delay[0]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXPD[1], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXPD_delay[1]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXPIPPMEN, 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXPIPPMEN_delay);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXPIPPMSTEPSIZE[0], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXPIPPMSTEPSIZE_delay[0]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXPIPPMSTEPSIZE[1], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXPIPPMSTEPSIZE_delay[1]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXPIPPMSTEPSIZE[2], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXPIPPMSTEPSIZE_delay[2]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXPIPPMSTEPSIZE[3], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXPIPPMSTEPSIZE_delay[3]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXPIPPMSTEPSIZE[4], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXPIPPMSTEPSIZE_delay[4]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXPOLARITY, 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXPOLARITY_delay);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXRATE[0], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXRATE_delay[0]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXRATE[1], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXRATE_delay[1]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXRATE[2], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXRATE_delay[2]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXRATE[3], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXRATE_delay[3]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXRATE[4], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXRATE_delay[4]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXRATE[5], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXRATE_delay[5]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXRATE[6], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXRATE_delay[6]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXRATE[7], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXRATE_delay[7]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXSEQUENCE[0], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXSEQUENCE_delay[0]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXSEQUENCE[1], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXSEQUENCE_delay[1]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXSEQUENCE[2], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXSEQUENCE_delay[2]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXSEQUENCE[3], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXSEQUENCE_delay[3]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXSEQUENCE[4], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXSEQUENCE_delay[4]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXSEQUENCE[5], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXSEQUENCE_delay[5]);
    $setuphold (posedge CH1_TXUSRCLK, posedge CH1_TXSEQUENCE[6], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, CH1_TXSEQUENCE_delay[6]);
    $setuphold (posedge CH1_TXUSRCLK, posedge PCIELTSSM[0], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, PCIELTSSM_delay[0]);
    $setuphold (posedge CH1_TXUSRCLK, posedge PCIELTSSM[1], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, PCIELTSSM_delay[1]);
    $setuphold (posedge CH1_TXUSRCLK, posedge PCIELTSSM[2], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, PCIELTSSM_delay[2]);
    $setuphold (posedge CH1_TXUSRCLK, posedge PCIELTSSM[3], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, PCIELTSSM_delay[3]);
    $setuphold (posedge CH1_TXUSRCLK, posedge PCIELTSSM[4], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, PCIELTSSM_delay[4]);
    $setuphold (posedge CH1_TXUSRCLK, posedge PCIELTSSM[5], 0:0:0, 0:0:0, notifier, , , CH1_TXUSRCLK_delay, PCIELTSSM_delay[5]);
    $setuphold (posedge CH2_RXUSRCLK, negedge CH2_EYESCANTRIGGER, 0:0:0, 0:0:0, notifier, , , CH2_RXUSRCLK_delay, CH2_EYESCANTRIGGER_delay);
    $setuphold (posedge CH2_RXUSRCLK, negedge CH2_RXCHBONDI[0], 0:0:0, 0:0:0, notifier, , , CH2_RXUSRCLK_delay, CH2_RXCHBONDI_delay[0]);
    $setuphold (posedge CH2_RXUSRCLK, negedge CH2_RXCHBONDI[1], 0:0:0, 0:0:0, notifier, , , CH2_RXUSRCLK_delay, CH2_RXCHBONDI_delay[1]);
    $setuphold (posedge CH2_RXUSRCLK, negedge CH2_RXCHBONDI[2], 0:0:0, 0:0:0, notifier, , , CH2_RXUSRCLK_delay, CH2_RXCHBONDI_delay[2]);
    $setuphold (posedge CH2_RXUSRCLK, negedge CH2_RXCHBONDI[3], 0:0:0, 0:0:0, notifier, , , CH2_RXUSRCLK_delay, CH2_RXCHBONDI_delay[3]);
    $setuphold (posedge CH2_RXUSRCLK, negedge CH2_RXCHBONDI[4], 0:0:0, 0:0:0, notifier, , , CH2_RXUSRCLK_delay, CH2_RXCHBONDI_delay[4]);
    $setuphold (posedge CH2_RXUSRCLK, negedge CH2_RXDLYALIGNREQ, 0:0:0, 0:0:0, notifier, , , CH2_RXUSRCLK_delay, CH2_RXDLYALIGNREQ_delay);
    $setuphold (posedge CH2_RXUSRCLK, negedge CH2_RXEQTRAINING, 0:0:0, 0:0:0, notifier, , , CH2_RXUSRCLK_delay, CH2_RXEQTRAINING_delay);
    $setuphold (posedge CH2_RXUSRCLK, negedge CH2_RXGEARBOXSLIP, 0:0:0, 0:0:0, notifier, , , CH2_RXUSRCLK_delay, CH2_RXGEARBOXSLIP_delay);
    $setuphold (posedge CH2_RXUSRCLK, negedge CH2_RXMLDCHAINDONE, 0:0:0, 0:0:0, notifier, , , CH2_RXUSRCLK_delay, CH2_RXMLDCHAINDONE_delay);
    $setuphold (posedge CH2_RXUSRCLK, negedge CH2_RXMLDCHAINREQ, 0:0:0, 0:0:0, notifier, , , CH2_RXUSRCLK_delay, CH2_RXMLDCHAINREQ_delay);
    $setuphold (posedge CH2_RXUSRCLK, negedge CH2_RXPD[0], 0:0:0, 0:0:0, notifier, , , CH2_RXUSRCLK_delay, CH2_RXPD_delay[0]);
    $setuphold (posedge CH2_RXUSRCLK, negedge CH2_RXPD[1], 0:0:0, 0:0:0, notifier, , , CH2_RXUSRCLK_delay, CH2_RXPD_delay[1]);
    $setuphold (posedge CH2_RXUSRCLK, negedge CH2_RXPHALIGNREQ, 0:0:0, 0:0:0, notifier, , , CH2_RXUSRCLK_delay, CH2_RXPHALIGNREQ_delay);
    $setuphold (posedge CH2_RXUSRCLK, negedge CH2_RXPHSETINITREQ, 0:0:0, 0:0:0, notifier, , , CH2_RXUSRCLK_delay, CH2_RXPHSETINITREQ_delay);
    $setuphold (posedge CH2_RXUSRCLK, negedge CH2_RXPHSHIFT180, 0:0:0, 0:0:0, notifier, , , CH2_RXUSRCLK_delay, CH2_RXPHSHIFT180_delay);
    $setuphold (posedge CH2_RXUSRCLK, negedge CH2_RXPOLARITY, 0:0:0, 0:0:0, notifier, , , CH2_RXUSRCLK_delay, CH2_RXPOLARITY_delay);
    $setuphold (posedge CH2_RXUSRCLK, negedge CH2_RXRATE[0], 0:0:0, 0:0:0, notifier, , , CH2_RXUSRCLK_delay, CH2_RXRATE_delay[0]);
    $setuphold (posedge CH2_RXUSRCLK, negedge CH2_RXRATE[1], 0:0:0, 0:0:0, notifier, , , CH2_RXUSRCLK_delay, CH2_RXRATE_delay[1]);
    $setuphold (posedge CH2_RXUSRCLK, negedge CH2_RXRATE[2], 0:0:0, 0:0:0, notifier, , , CH2_RXUSRCLK_delay, CH2_RXRATE_delay[2]);
    $setuphold (posedge CH2_RXUSRCLK, negedge CH2_RXRATE[3], 0:0:0, 0:0:0, notifier, , , CH2_RXUSRCLK_delay, CH2_RXRATE_delay[3]);
    $setuphold (posedge CH2_RXUSRCLK, negedge CH2_RXRATE[4], 0:0:0, 0:0:0, notifier, , , CH2_RXUSRCLK_delay, CH2_RXRATE_delay[4]);
    $setuphold (posedge CH2_RXUSRCLK, negedge CH2_RXRATE[5], 0:0:0, 0:0:0, notifier, , , CH2_RXUSRCLK_delay, CH2_RXRATE_delay[5]);
    $setuphold (posedge CH2_RXUSRCLK, negedge CH2_RXRATE[6], 0:0:0, 0:0:0, notifier, , , CH2_RXUSRCLK_delay, CH2_RXRATE_delay[6]);
    $setuphold (posedge CH2_RXUSRCLK, negedge CH2_RXRATE[7], 0:0:0, 0:0:0, notifier, , , CH2_RXUSRCLK_delay, CH2_RXRATE_delay[7]);
    $setuphold (posedge CH2_RXUSRCLK, negedge CH2_RXSLIDE, 0:0:0, 0:0:0, notifier, , , CH2_RXUSRCLK_delay, CH2_RXSLIDE_delay);
    $setuphold (posedge CH2_RXUSRCLK, posedge CH2_EYESCANTRIGGER, 0:0:0, 0:0:0, notifier, , , CH2_RXUSRCLK_delay, CH2_EYESCANTRIGGER_delay);
    $setuphold (posedge CH2_RXUSRCLK, posedge CH2_RXCHBONDI[0], 0:0:0, 0:0:0, notifier, , , CH2_RXUSRCLK_delay, CH2_RXCHBONDI_delay[0]);
    $setuphold (posedge CH2_RXUSRCLK, posedge CH2_RXCHBONDI[1], 0:0:0, 0:0:0, notifier, , , CH2_RXUSRCLK_delay, CH2_RXCHBONDI_delay[1]);
    $setuphold (posedge CH2_RXUSRCLK, posedge CH2_RXCHBONDI[2], 0:0:0, 0:0:0, notifier, , , CH2_RXUSRCLK_delay, CH2_RXCHBONDI_delay[2]);
    $setuphold (posedge CH2_RXUSRCLK, posedge CH2_RXCHBONDI[3], 0:0:0, 0:0:0, notifier, , , CH2_RXUSRCLK_delay, CH2_RXCHBONDI_delay[3]);
    $setuphold (posedge CH2_RXUSRCLK, posedge CH2_RXCHBONDI[4], 0:0:0, 0:0:0, notifier, , , CH2_RXUSRCLK_delay, CH2_RXCHBONDI_delay[4]);
    $setuphold (posedge CH2_RXUSRCLK, posedge CH2_RXDLYALIGNREQ, 0:0:0, 0:0:0, notifier, , , CH2_RXUSRCLK_delay, CH2_RXDLYALIGNREQ_delay);
    $setuphold (posedge CH2_RXUSRCLK, posedge CH2_RXEQTRAINING, 0:0:0, 0:0:0, notifier, , , CH2_RXUSRCLK_delay, CH2_RXEQTRAINING_delay);
    $setuphold (posedge CH2_RXUSRCLK, posedge CH2_RXGEARBOXSLIP, 0:0:0, 0:0:0, notifier, , , CH2_RXUSRCLK_delay, CH2_RXGEARBOXSLIP_delay);
    $setuphold (posedge CH2_RXUSRCLK, posedge CH2_RXMLDCHAINDONE, 0:0:0, 0:0:0, notifier, , , CH2_RXUSRCLK_delay, CH2_RXMLDCHAINDONE_delay);
    $setuphold (posedge CH2_RXUSRCLK, posedge CH2_RXMLDCHAINREQ, 0:0:0, 0:0:0, notifier, , , CH2_RXUSRCLK_delay, CH2_RXMLDCHAINREQ_delay);
    $setuphold (posedge CH2_RXUSRCLK, posedge CH2_RXPD[0], 0:0:0, 0:0:0, notifier, , , CH2_RXUSRCLK_delay, CH2_RXPD_delay[0]);
    $setuphold (posedge CH2_RXUSRCLK, posedge CH2_RXPD[1], 0:0:0, 0:0:0, notifier, , , CH2_RXUSRCLK_delay, CH2_RXPD_delay[1]);
    $setuphold (posedge CH2_RXUSRCLK, posedge CH2_RXPHALIGNREQ, 0:0:0, 0:0:0, notifier, , , CH2_RXUSRCLK_delay, CH2_RXPHALIGNREQ_delay);
    $setuphold (posedge CH2_RXUSRCLK, posedge CH2_RXPHSETINITREQ, 0:0:0, 0:0:0, notifier, , , CH2_RXUSRCLK_delay, CH2_RXPHSETINITREQ_delay);
    $setuphold (posedge CH2_RXUSRCLK, posedge CH2_RXPHSHIFT180, 0:0:0, 0:0:0, notifier, , , CH2_RXUSRCLK_delay, CH2_RXPHSHIFT180_delay);
    $setuphold (posedge CH2_RXUSRCLK, posedge CH2_RXPOLARITY, 0:0:0, 0:0:0, notifier, , , CH2_RXUSRCLK_delay, CH2_RXPOLARITY_delay);
    $setuphold (posedge CH2_RXUSRCLK, posedge CH2_RXRATE[0], 0:0:0, 0:0:0, notifier, , , CH2_RXUSRCLK_delay, CH2_RXRATE_delay[0]);
    $setuphold (posedge CH2_RXUSRCLK, posedge CH2_RXRATE[1], 0:0:0, 0:0:0, notifier, , , CH2_RXUSRCLK_delay, CH2_RXRATE_delay[1]);
    $setuphold (posedge CH2_RXUSRCLK, posedge CH2_RXRATE[2], 0:0:0, 0:0:0, notifier, , , CH2_RXUSRCLK_delay, CH2_RXRATE_delay[2]);
    $setuphold (posedge CH2_RXUSRCLK, posedge CH2_RXRATE[3], 0:0:0, 0:0:0, notifier, , , CH2_RXUSRCLK_delay, CH2_RXRATE_delay[3]);
    $setuphold (posedge CH2_RXUSRCLK, posedge CH2_RXRATE[4], 0:0:0, 0:0:0, notifier, , , CH2_RXUSRCLK_delay, CH2_RXRATE_delay[4]);
    $setuphold (posedge CH2_RXUSRCLK, posedge CH2_RXRATE[5], 0:0:0, 0:0:0, notifier, , , CH2_RXUSRCLK_delay, CH2_RXRATE_delay[5]);
    $setuphold (posedge CH2_RXUSRCLK, posedge CH2_RXRATE[6], 0:0:0, 0:0:0, notifier, , , CH2_RXUSRCLK_delay, CH2_RXRATE_delay[6]);
    $setuphold (posedge CH2_RXUSRCLK, posedge CH2_RXRATE[7], 0:0:0, 0:0:0, notifier, , , CH2_RXUSRCLK_delay, CH2_RXRATE_delay[7]);
    $setuphold (posedge CH2_RXUSRCLK, posedge CH2_RXSLIDE, 0:0:0, 0:0:0, notifier, , , CH2_RXUSRCLK_delay, CH2_RXSLIDE_delay);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_PHYESMADAPTSAVE, 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_PHYESMADAPTSAVE_delay);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXCOMINIT, 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXCOMINIT_delay);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXCOMSAS, 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXCOMSAS_delay);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXCOMWAKE, 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXCOMWAKE_delay);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXCTRL0[0], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXCTRL0_delay[0]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXCTRL0[10], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXCTRL0_delay[10]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXCTRL0[11], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXCTRL0_delay[11]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXCTRL0[12], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXCTRL0_delay[12]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXCTRL0[13], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXCTRL0_delay[13]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXCTRL0[14], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXCTRL0_delay[14]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXCTRL0[15], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXCTRL0_delay[15]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXCTRL0[1], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXCTRL0_delay[1]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXCTRL0[2], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXCTRL0_delay[2]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXCTRL0[3], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXCTRL0_delay[3]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXCTRL0[4], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXCTRL0_delay[4]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXCTRL0[5], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXCTRL0_delay[5]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXCTRL0[6], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXCTRL0_delay[6]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXCTRL0[7], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXCTRL0_delay[7]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXCTRL0[8], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXCTRL0_delay[8]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXCTRL0[9], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXCTRL0_delay[9]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXCTRL1[0], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXCTRL1_delay[0]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXCTRL1[10], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXCTRL1_delay[10]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXCTRL1[11], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXCTRL1_delay[11]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXCTRL1[12], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXCTRL1_delay[12]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXCTRL1[13], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXCTRL1_delay[13]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXCTRL1[14], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXCTRL1_delay[14]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXCTRL1[15], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXCTRL1_delay[15]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXCTRL1[1], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXCTRL1_delay[1]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXCTRL1[2], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXCTRL1_delay[2]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXCTRL1[3], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXCTRL1_delay[3]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXCTRL1[4], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXCTRL1_delay[4]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXCTRL1[5], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXCTRL1_delay[5]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXCTRL1[6], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXCTRL1_delay[6]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXCTRL1[7], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXCTRL1_delay[7]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXCTRL1[8], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXCTRL1_delay[8]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXCTRL1[9], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXCTRL1_delay[9]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXCTRL2[0], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXCTRL2_delay[0]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXCTRL2[1], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXCTRL2_delay[1]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXCTRL2[2], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXCTRL2_delay[2]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXCTRL2[3], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXCTRL2_delay[3]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXCTRL2[4], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXCTRL2_delay[4]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXCTRL2[5], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXCTRL2_delay[5]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXCTRL2[6], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXCTRL2_delay[6]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXCTRL2[7], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXCTRL2_delay[7]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[0], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[0]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[100], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[100]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[101], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[101]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[102], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[102]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[103], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[103]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[104], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[104]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[105], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[105]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[106], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[106]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[107], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[107]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[108], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[108]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[109], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[109]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[10], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[10]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[110], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[110]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[111], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[111]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[112], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[112]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[113], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[113]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[114], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[114]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[115], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[115]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[116], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[116]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[117], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[117]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[118], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[118]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[119], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[119]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[11], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[11]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[120], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[120]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[121], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[121]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[122], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[122]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[123], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[123]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[124], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[124]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[125], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[125]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[126], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[126]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[127], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[127]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[12], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[12]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[13], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[13]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[14], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[14]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[15], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[15]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[16], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[16]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[17], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[17]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[18], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[18]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[19], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[19]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[1], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[1]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[20], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[20]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[21], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[21]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[22], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[22]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[23], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[23]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[24], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[24]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[25], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[25]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[26], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[26]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[27], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[27]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[28], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[28]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[29], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[29]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[2], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[2]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[30], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[30]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[31], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[31]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[32], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[32]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[33], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[33]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[34], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[34]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[35], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[35]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[36], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[36]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[37], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[37]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[38], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[38]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[39], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[39]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[3], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[3]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[40], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[40]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[41], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[41]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[42], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[42]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[43], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[43]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[44], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[44]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[45], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[45]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[46], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[46]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[47], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[47]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[48], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[48]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[49], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[49]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[4], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[4]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[50], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[50]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[51], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[51]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[52], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[52]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[53], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[53]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[54], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[54]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[55], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[55]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[56], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[56]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[57], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[57]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[58], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[58]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[59], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[59]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[5], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[5]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[60], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[60]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[61], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[61]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[62], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[62]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[63], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[63]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[64], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[64]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[65], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[65]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[66], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[66]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[67], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[67]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[68], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[68]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[69], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[69]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[6], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[6]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[70], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[70]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[71], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[71]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[72], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[72]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[73], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[73]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[74], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[74]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[75], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[75]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[76], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[76]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[77], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[77]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[78], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[78]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[79], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[79]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[7], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[7]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[80], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[80]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[81], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[81]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[82], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[82]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[83], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[83]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[84], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[84]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[85], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[85]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[86], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[86]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[87], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[87]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[88], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[88]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[89], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[89]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[8], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[8]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[90], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[90]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[91], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[91]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[92], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[92]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[93], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[93]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[94], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[94]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[95], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[95]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[96], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[96]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[97], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[97]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[98], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[98]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[99], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[99]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDATA[9], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[9]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXDETECTRX, 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDETECTRX_delay);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXELECIDLE, 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXELECIDLE_delay);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXHEADER[0], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXHEADER_delay[0]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXHEADER[1], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXHEADER_delay[1]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXHEADER[2], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXHEADER_delay[2]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXHEADER[3], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXHEADER_delay[3]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXHEADER[4], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXHEADER_delay[4]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXHEADER[5], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXHEADER_delay[5]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXINHIBIT, 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXINHIBIT_delay);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXPD[0], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXPD_delay[0]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXPD[1], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXPD_delay[1]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXPIPPMEN, 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXPIPPMEN_delay);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXPIPPMSTEPSIZE[0], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXPIPPMSTEPSIZE_delay[0]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXPIPPMSTEPSIZE[1], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXPIPPMSTEPSIZE_delay[1]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXPIPPMSTEPSIZE[2], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXPIPPMSTEPSIZE_delay[2]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXPIPPMSTEPSIZE[3], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXPIPPMSTEPSIZE_delay[3]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXPIPPMSTEPSIZE[4], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXPIPPMSTEPSIZE_delay[4]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXPOLARITY, 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXPOLARITY_delay);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXRATE[0], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXRATE_delay[0]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXRATE[1], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXRATE_delay[1]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXRATE[2], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXRATE_delay[2]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXRATE[3], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXRATE_delay[3]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXRATE[4], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXRATE_delay[4]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXRATE[5], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXRATE_delay[5]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXRATE[6], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXRATE_delay[6]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXRATE[7], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXRATE_delay[7]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXSEQUENCE[0], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXSEQUENCE_delay[0]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXSEQUENCE[1], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXSEQUENCE_delay[1]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXSEQUENCE[2], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXSEQUENCE_delay[2]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXSEQUENCE[3], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXSEQUENCE_delay[3]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXSEQUENCE[4], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXSEQUENCE_delay[4]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXSEQUENCE[5], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXSEQUENCE_delay[5]);
    $setuphold (posedge CH2_TXUSRCLK, negedge CH2_TXSEQUENCE[6], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXSEQUENCE_delay[6]);
    $setuphold (posedge CH2_TXUSRCLK, negedge PCIELTSSM[0], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, PCIELTSSM_delay[0]);
    $setuphold (posedge CH2_TXUSRCLK, negedge PCIELTSSM[1], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, PCIELTSSM_delay[1]);
    $setuphold (posedge CH2_TXUSRCLK, negedge PCIELTSSM[2], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, PCIELTSSM_delay[2]);
    $setuphold (posedge CH2_TXUSRCLK, negedge PCIELTSSM[3], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, PCIELTSSM_delay[3]);
    $setuphold (posedge CH2_TXUSRCLK, negedge PCIELTSSM[4], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, PCIELTSSM_delay[4]);
    $setuphold (posedge CH2_TXUSRCLK, negedge PCIELTSSM[5], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, PCIELTSSM_delay[5]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_PHYESMADAPTSAVE, 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_PHYESMADAPTSAVE_delay);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXCOMINIT, 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXCOMINIT_delay);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXCOMSAS, 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXCOMSAS_delay);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXCOMWAKE, 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXCOMWAKE_delay);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXCTRL0[0], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXCTRL0_delay[0]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXCTRL0[10], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXCTRL0_delay[10]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXCTRL0[11], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXCTRL0_delay[11]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXCTRL0[12], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXCTRL0_delay[12]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXCTRL0[13], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXCTRL0_delay[13]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXCTRL0[14], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXCTRL0_delay[14]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXCTRL0[15], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXCTRL0_delay[15]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXCTRL0[1], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXCTRL0_delay[1]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXCTRL0[2], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXCTRL0_delay[2]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXCTRL0[3], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXCTRL0_delay[3]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXCTRL0[4], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXCTRL0_delay[4]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXCTRL0[5], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXCTRL0_delay[5]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXCTRL0[6], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXCTRL0_delay[6]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXCTRL0[7], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXCTRL0_delay[7]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXCTRL0[8], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXCTRL0_delay[8]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXCTRL0[9], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXCTRL0_delay[9]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXCTRL1[0], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXCTRL1_delay[0]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXCTRL1[10], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXCTRL1_delay[10]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXCTRL1[11], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXCTRL1_delay[11]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXCTRL1[12], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXCTRL1_delay[12]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXCTRL1[13], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXCTRL1_delay[13]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXCTRL1[14], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXCTRL1_delay[14]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXCTRL1[15], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXCTRL1_delay[15]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXCTRL1[1], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXCTRL1_delay[1]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXCTRL1[2], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXCTRL1_delay[2]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXCTRL1[3], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXCTRL1_delay[3]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXCTRL1[4], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXCTRL1_delay[4]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXCTRL1[5], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXCTRL1_delay[5]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXCTRL1[6], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXCTRL1_delay[6]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXCTRL1[7], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXCTRL1_delay[7]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXCTRL1[8], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXCTRL1_delay[8]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXCTRL1[9], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXCTRL1_delay[9]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXCTRL2[0], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXCTRL2_delay[0]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXCTRL2[1], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXCTRL2_delay[1]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXCTRL2[2], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXCTRL2_delay[2]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXCTRL2[3], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXCTRL2_delay[3]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXCTRL2[4], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXCTRL2_delay[4]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXCTRL2[5], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXCTRL2_delay[5]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXCTRL2[6], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXCTRL2_delay[6]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXCTRL2[7], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXCTRL2_delay[7]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[0], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[0]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[100], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[100]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[101], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[101]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[102], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[102]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[103], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[103]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[104], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[104]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[105], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[105]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[106], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[106]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[107], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[107]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[108], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[108]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[109], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[109]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[10], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[10]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[110], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[110]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[111], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[111]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[112], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[112]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[113], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[113]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[114], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[114]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[115], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[115]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[116], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[116]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[117], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[117]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[118], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[118]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[119], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[119]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[11], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[11]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[120], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[120]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[121], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[121]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[122], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[122]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[123], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[123]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[124], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[124]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[125], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[125]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[126], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[126]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[127], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[127]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[12], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[12]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[13], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[13]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[14], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[14]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[15], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[15]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[16], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[16]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[17], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[17]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[18], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[18]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[19], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[19]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[1], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[1]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[20], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[20]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[21], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[21]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[22], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[22]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[23], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[23]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[24], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[24]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[25], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[25]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[26], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[26]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[27], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[27]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[28], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[28]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[29], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[29]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[2], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[2]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[30], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[30]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[31], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[31]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[32], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[32]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[33], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[33]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[34], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[34]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[35], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[35]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[36], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[36]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[37], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[37]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[38], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[38]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[39], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[39]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[3], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[3]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[40], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[40]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[41], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[41]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[42], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[42]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[43], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[43]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[44], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[44]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[45], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[45]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[46], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[46]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[47], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[47]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[48], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[48]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[49], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[49]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[4], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[4]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[50], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[50]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[51], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[51]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[52], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[52]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[53], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[53]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[54], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[54]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[55], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[55]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[56], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[56]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[57], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[57]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[58], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[58]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[59], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[59]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[5], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[5]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[60], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[60]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[61], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[61]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[62], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[62]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[63], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[63]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[64], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[64]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[65], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[65]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[66], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[66]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[67], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[67]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[68], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[68]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[69], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[69]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[6], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[6]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[70], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[70]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[71], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[71]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[72], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[72]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[73], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[73]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[74], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[74]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[75], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[75]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[76], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[76]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[77], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[77]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[78], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[78]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[79], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[79]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[7], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[7]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[80], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[80]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[81], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[81]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[82], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[82]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[83], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[83]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[84], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[84]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[85], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[85]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[86], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[86]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[87], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[87]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[88], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[88]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[89], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[89]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[8], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[8]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[90], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[90]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[91], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[91]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[92], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[92]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[93], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[93]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[94], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[94]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[95], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[95]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[96], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[96]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[97], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[97]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[98], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[98]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[99], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[99]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDATA[9], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDATA_delay[9]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXDETECTRX, 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXDETECTRX_delay);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXELECIDLE, 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXELECIDLE_delay);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXHEADER[0], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXHEADER_delay[0]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXHEADER[1], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXHEADER_delay[1]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXHEADER[2], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXHEADER_delay[2]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXHEADER[3], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXHEADER_delay[3]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXHEADER[4], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXHEADER_delay[4]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXHEADER[5], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXHEADER_delay[5]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXINHIBIT, 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXINHIBIT_delay);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXPD[0], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXPD_delay[0]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXPD[1], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXPD_delay[1]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXPIPPMEN, 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXPIPPMEN_delay);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXPIPPMSTEPSIZE[0], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXPIPPMSTEPSIZE_delay[0]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXPIPPMSTEPSIZE[1], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXPIPPMSTEPSIZE_delay[1]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXPIPPMSTEPSIZE[2], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXPIPPMSTEPSIZE_delay[2]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXPIPPMSTEPSIZE[3], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXPIPPMSTEPSIZE_delay[3]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXPIPPMSTEPSIZE[4], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXPIPPMSTEPSIZE_delay[4]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXPOLARITY, 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXPOLARITY_delay);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXRATE[0], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXRATE_delay[0]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXRATE[1], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXRATE_delay[1]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXRATE[2], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXRATE_delay[2]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXRATE[3], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXRATE_delay[3]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXRATE[4], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXRATE_delay[4]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXRATE[5], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXRATE_delay[5]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXRATE[6], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXRATE_delay[6]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXRATE[7], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXRATE_delay[7]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXSEQUENCE[0], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXSEQUENCE_delay[0]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXSEQUENCE[1], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXSEQUENCE_delay[1]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXSEQUENCE[2], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXSEQUENCE_delay[2]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXSEQUENCE[3], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXSEQUENCE_delay[3]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXSEQUENCE[4], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXSEQUENCE_delay[4]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXSEQUENCE[5], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXSEQUENCE_delay[5]);
    $setuphold (posedge CH2_TXUSRCLK, posedge CH2_TXSEQUENCE[6], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, CH2_TXSEQUENCE_delay[6]);
    $setuphold (posedge CH2_TXUSRCLK, posedge PCIELTSSM[0], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, PCIELTSSM_delay[0]);
    $setuphold (posedge CH2_TXUSRCLK, posedge PCIELTSSM[1], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, PCIELTSSM_delay[1]);
    $setuphold (posedge CH2_TXUSRCLK, posedge PCIELTSSM[2], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, PCIELTSSM_delay[2]);
    $setuphold (posedge CH2_TXUSRCLK, posedge PCIELTSSM[3], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, PCIELTSSM_delay[3]);
    $setuphold (posedge CH2_TXUSRCLK, posedge PCIELTSSM[4], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, PCIELTSSM_delay[4]);
    $setuphold (posedge CH2_TXUSRCLK, posedge PCIELTSSM[5], 0:0:0, 0:0:0, notifier, , , CH2_TXUSRCLK_delay, PCIELTSSM_delay[5]);
    $setuphold (posedge CH3_RXUSRCLK, negedge CH3_EYESCANTRIGGER, 0:0:0, 0:0:0, notifier, , , CH3_RXUSRCLK_delay, CH3_EYESCANTRIGGER_delay);
    $setuphold (posedge CH3_RXUSRCLK, negedge CH3_RXCHBONDI[0], 0:0:0, 0:0:0, notifier, , , CH3_RXUSRCLK_delay, CH3_RXCHBONDI_delay[0]);
    $setuphold (posedge CH3_RXUSRCLK, negedge CH3_RXCHBONDI[1], 0:0:0, 0:0:0, notifier, , , CH3_RXUSRCLK_delay, CH3_RXCHBONDI_delay[1]);
    $setuphold (posedge CH3_RXUSRCLK, negedge CH3_RXCHBONDI[2], 0:0:0, 0:0:0, notifier, , , CH3_RXUSRCLK_delay, CH3_RXCHBONDI_delay[2]);
    $setuphold (posedge CH3_RXUSRCLK, negedge CH3_RXCHBONDI[3], 0:0:0, 0:0:0, notifier, , , CH3_RXUSRCLK_delay, CH3_RXCHBONDI_delay[3]);
    $setuphold (posedge CH3_RXUSRCLK, negedge CH3_RXCHBONDI[4], 0:0:0, 0:0:0, notifier, , , CH3_RXUSRCLK_delay, CH3_RXCHBONDI_delay[4]);
    $setuphold (posedge CH3_RXUSRCLK, negedge CH3_RXDLYALIGNREQ, 0:0:0, 0:0:0, notifier, , , CH3_RXUSRCLK_delay, CH3_RXDLYALIGNREQ_delay);
    $setuphold (posedge CH3_RXUSRCLK, negedge CH3_RXEQTRAINING, 0:0:0, 0:0:0, notifier, , , CH3_RXUSRCLK_delay, CH3_RXEQTRAINING_delay);
    $setuphold (posedge CH3_RXUSRCLK, negedge CH3_RXGEARBOXSLIP, 0:0:0, 0:0:0, notifier, , , CH3_RXUSRCLK_delay, CH3_RXGEARBOXSLIP_delay);
    $setuphold (posedge CH3_RXUSRCLK, negedge CH3_RXMLDCHAINDONE, 0:0:0, 0:0:0, notifier, , , CH3_RXUSRCLK_delay, CH3_RXMLDCHAINDONE_delay);
    $setuphold (posedge CH3_RXUSRCLK, negedge CH3_RXMLDCHAINREQ, 0:0:0, 0:0:0, notifier, , , CH3_RXUSRCLK_delay, CH3_RXMLDCHAINREQ_delay);
    $setuphold (posedge CH3_RXUSRCLK, negedge CH3_RXPD[0], 0:0:0, 0:0:0, notifier, , , CH3_RXUSRCLK_delay, CH3_RXPD_delay[0]);
    $setuphold (posedge CH3_RXUSRCLK, negedge CH3_RXPD[1], 0:0:0, 0:0:0, notifier, , , CH3_RXUSRCLK_delay, CH3_RXPD_delay[1]);
    $setuphold (posedge CH3_RXUSRCLK, negedge CH3_RXPHALIGNREQ, 0:0:0, 0:0:0, notifier, , , CH3_RXUSRCLK_delay, CH3_RXPHALIGNREQ_delay);
    $setuphold (posedge CH3_RXUSRCLK, negedge CH3_RXPHSETINITREQ, 0:0:0, 0:0:0, notifier, , , CH3_RXUSRCLK_delay, CH3_RXPHSETINITREQ_delay);
    $setuphold (posedge CH3_RXUSRCLK, negedge CH3_RXPHSHIFT180, 0:0:0, 0:0:0, notifier, , , CH3_RXUSRCLK_delay, CH3_RXPHSHIFT180_delay);
    $setuphold (posedge CH3_RXUSRCLK, negedge CH3_RXPOLARITY, 0:0:0, 0:0:0, notifier, , , CH3_RXUSRCLK_delay, CH3_RXPOLARITY_delay);
    $setuphold (posedge CH3_RXUSRCLK, negedge CH3_RXRATE[0], 0:0:0, 0:0:0, notifier, , , CH3_RXUSRCLK_delay, CH3_RXRATE_delay[0]);
    $setuphold (posedge CH3_RXUSRCLK, negedge CH3_RXRATE[1], 0:0:0, 0:0:0, notifier, , , CH3_RXUSRCLK_delay, CH3_RXRATE_delay[1]);
    $setuphold (posedge CH3_RXUSRCLK, negedge CH3_RXRATE[2], 0:0:0, 0:0:0, notifier, , , CH3_RXUSRCLK_delay, CH3_RXRATE_delay[2]);
    $setuphold (posedge CH3_RXUSRCLK, negedge CH3_RXRATE[3], 0:0:0, 0:0:0, notifier, , , CH3_RXUSRCLK_delay, CH3_RXRATE_delay[3]);
    $setuphold (posedge CH3_RXUSRCLK, negedge CH3_RXRATE[4], 0:0:0, 0:0:0, notifier, , , CH3_RXUSRCLK_delay, CH3_RXRATE_delay[4]);
    $setuphold (posedge CH3_RXUSRCLK, negedge CH3_RXRATE[5], 0:0:0, 0:0:0, notifier, , , CH3_RXUSRCLK_delay, CH3_RXRATE_delay[5]);
    $setuphold (posedge CH3_RXUSRCLK, negedge CH3_RXRATE[6], 0:0:0, 0:0:0, notifier, , , CH3_RXUSRCLK_delay, CH3_RXRATE_delay[6]);
    $setuphold (posedge CH3_RXUSRCLK, negedge CH3_RXRATE[7], 0:0:0, 0:0:0, notifier, , , CH3_RXUSRCLK_delay, CH3_RXRATE_delay[7]);
    $setuphold (posedge CH3_RXUSRCLK, negedge CH3_RXSLIDE, 0:0:0, 0:0:0, notifier, , , CH3_RXUSRCLK_delay, CH3_RXSLIDE_delay);
    $setuphold (posedge CH3_RXUSRCLK, posedge CH3_EYESCANTRIGGER, 0:0:0, 0:0:0, notifier, , , CH3_RXUSRCLK_delay, CH3_EYESCANTRIGGER_delay);
    $setuphold (posedge CH3_RXUSRCLK, posedge CH3_RXCHBONDI[0], 0:0:0, 0:0:0, notifier, , , CH3_RXUSRCLK_delay, CH3_RXCHBONDI_delay[0]);
    $setuphold (posedge CH3_RXUSRCLK, posedge CH3_RXCHBONDI[1], 0:0:0, 0:0:0, notifier, , , CH3_RXUSRCLK_delay, CH3_RXCHBONDI_delay[1]);
    $setuphold (posedge CH3_RXUSRCLK, posedge CH3_RXCHBONDI[2], 0:0:0, 0:0:0, notifier, , , CH3_RXUSRCLK_delay, CH3_RXCHBONDI_delay[2]);
    $setuphold (posedge CH3_RXUSRCLK, posedge CH3_RXCHBONDI[3], 0:0:0, 0:0:0, notifier, , , CH3_RXUSRCLK_delay, CH3_RXCHBONDI_delay[3]);
    $setuphold (posedge CH3_RXUSRCLK, posedge CH3_RXCHBONDI[4], 0:0:0, 0:0:0, notifier, , , CH3_RXUSRCLK_delay, CH3_RXCHBONDI_delay[4]);
    $setuphold (posedge CH3_RXUSRCLK, posedge CH3_RXDLYALIGNREQ, 0:0:0, 0:0:0, notifier, , , CH3_RXUSRCLK_delay, CH3_RXDLYALIGNREQ_delay);
    $setuphold (posedge CH3_RXUSRCLK, posedge CH3_RXEQTRAINING, 0:0:0, 0:0:0, notifier, , , CH3_RXUSRCLK_delay, CH3_RXEQTRAINING_delay);
    $setuphold (posedge CH3_RXUSRCLK, posedge CH3_RXGEARBOXSLIP, 0:0:0, 0:0:0, notifier, , , CH3_RXUSRCLK_delay, CH3_RXGEARBOXSLIP_delay);
    $setuphold (posedge CH3_RXUSRCLK, posedge CH3_RXMLDCHAINDONE, 0:0:0, 0:0:0, notifier, , , CH3_RXUSRCLK_delay, CH3_RXMLDCHAINDONE_delay);
    $setuphold (posedge CH3_RXUSRCLK, posedge CH3_RXMLDCHAINREQ, 0:0:0, 0:0:0, notifier, , , CH3_RXUSRCLK_delay, CH3_RXMLDCHAINREQ_delay);
    $setuphold (posedge CH3_RXUSRCLK, posedge CH3_RXPD[0], 0:0:0, 0:0:0, notifier, , , CH3_RXUSRCLK_delay, CH3_RXPD_delay[0]);
    $setuphold (posedge CH3_RXUSRCLK, posedge CH3_RXPD[1], 0:0:0, 0:0:0, notifier, , , CH3_RXUSRCLK_delay, CH3_RXPD_delay[1]);
    $setuphold (posedge CH3_RXUSRCLK, posedge CH3_RXPHALIGNREQ, 0:0:0, 0:0:0, notifier, , , CH3_RXUSRCLK_delay, CH3_RXPHALIGNREQ_delay);
    $setuphold (posedge CH3_RXUSRCLK, posedge CH3_RXPHSETINITREQ, 0:0:0, 0:0:0, notifier, , , CH3_RXUSRCLK_delay, CH3_RXPHSETINITREQ_delay);
    $setuphold (posedge CH3_RXUSRCLK, posedge CH3_RXPHSHIFT180, 0:0:0, 0:0:0, notifier, , , CH3_RXUSRCLK_delay, CH3_RXPHSHIFT180_delay);
    $setuphold (posedge CH3_RXUSRCLK, posedge CH3_RXPOLARITY, 0:0:0, 0:0:0, notifier, , , CH3_RXUSRCLK_delay, CH3_RXPOLARITY_delay);
    $setuphold (posedge CH3_RXUSRCLK, posedge CH3_RXRATE[0], 0:0:0, 0:0:0, notifier, , , CH3_RXUSRCLK_delay, CH3_RXRATE_delay[0]);
    $setuphold (posedge CH3_RXUSRCLK, posedge CH3_RXRATE[1], 0:0:0, 0:0:0, notifier, , , CH3_RXUSRCLK_delay, CH3_RXRATE_delay[1]);
    $setuphold (posedge CH3_RXUSRCLK, posedge CH3_RXRATE[2], 0:0:0, 0:0:0, notifier, , , CH3_RXUSRCLK_delay, CH3_RXRATE_delay[2]);
    $setuphold (posedge CH3_RXUSRCLK, posedge CH3_RXRATE[3], 0:0:0, 0:0:0, notifier, , , CH3_RXUSRCLK_delay, CH3_RXRATE_delay[3]);
    $setuphold (posedge CH3_RXUSRCLK, posedge CH3_RXRATE[4], 0:0:0, 0:0:0, notifier, , , CH3_RXUSRCLK_delay, CH3_RXRATE_delay[4]);
    $setuphold (posedge CH3_RXUSRCLK, posedge CH3_RXRATE[5], 0:0:0, 0:0:0, notifier, , , CH3_RXUSRCLK_delay, CH3_RXRATE_delay[5]);
    $setuphold (posedge CH3_RXUSRCLK, posedge CH3_RXRATE[6], 0:0:0, 0:0:0, notifier, , , CH3_RXUSRCLK_delay, CH3_RXRATE_delay[6]);
    $setuphold (posedge CH3_RXUSRCLK, posedge CH3_RXRATE[7], 0:0:0, 0:0:0, notifier, , , CH3_RXUSRCLK_delay, CH3_RXRATE_delay[7]);
    $setuphold (posedge CH3_RXUSRCLK, posedge CH3_RXSLIDE, 0:0:0, 0:0:0, notifier, , , CH3_RXUSRCLK_delay, CH3_RXSLIDE_delay);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_PHYESMADAPTSAVE, 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_PHYESMADAPTSAVE_delay);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXCOMINIT, 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXCOMINIT_delay);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXCOMSAS, 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXCOMSAS_delay);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXCOMWAKE, 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXCOMWAKE_delay);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXCTRL0[0], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXCTRL0_delay[0]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXCTRL0[10], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXCTRL0_delay[10]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXCTRL0[11], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXCTRL0_delay[11]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXCTRL0[12], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXCTRL0_delay[12]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXCTRL0[13], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXCTRL0_delay[13]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXCTRL0[14], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXCTRL0_delay[14]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXCTRL0[15], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXCTRL0_delay[15]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXCTRL0[1], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXCTRL0_delay[1]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXCTRL0[2], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXCTRL0_delay[2]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXCTRL0[3], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXCTRL0_delay[3]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXCTRL0[4], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXCTRL0_delay[4]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXCTRL0[5], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXCTRL0_delay[5]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXCTRL0[6], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXCTRL0_delay[6]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXCTRL0[7], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXCTRL0_delay[7]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXCTRL0[8], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXCTRL0_delay[8]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXCTRL0[9], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXCTRL0_delay[9]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXCTRL1[0], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXCTRL1_delay[0]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXCTRL1[10], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXCTRL1_delay[10]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXCTRL1[11], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXCTRL1_delay[11]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXCTRL1[12], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXCTRL1_delay[12]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXCTRL1[13], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXCTRL1_delay[13]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXCTRL1[14], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXCTRL1_delay[14]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXCTRL1[15], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXCTRL1_delay[15]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXCTRL1[1], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXCTRL1_delay[1]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXCTRL1[2], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXCTRL1_delay[2]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXCTRL1[3], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXCTRL1_delay[3]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXCTRL1[4], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXCTRL1_delay[4]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXCTRL1[5], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXCTRL1_delay[5]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXCTRL1[6], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXCTRL1_delay[6]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXCTRL1[7], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXCTRL1_delay[7]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXCTRL1[8], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXCTRL1_delay[8]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXCTRL1[9], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXCTRL1_delay[9]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXCTRL2[0], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXCTRL2_delay[0]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXCTRL2[1], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXCTRL2_delay[1]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXCTRL2[2], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXCTRL2_delay[2]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXCTRL2[3], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXCTRL2_delay[3]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXCTRL2[4], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXCTRL2_delay[4]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXCTRL2[5], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXCTRL2_delay[5]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXCTRL2[6], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXCTRL2_delay[6]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXCTRL2[7], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXCTRL2_delay[7]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[0], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[0]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[100], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[100]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[101], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[101]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[102], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[102]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[103], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[103]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[104], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[104]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[105], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[105]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[106], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[106]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[107], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[107]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[108], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[108]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[109], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[109]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[10], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[10]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[110], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[110]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[111], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[111]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[112], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[112]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[113], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[113]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[114], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[114]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[115], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[115]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[116], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[116]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[117], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[117]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[118], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[118]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[119], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[119]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[11], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[11]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[120], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[120]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[121], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[121]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[122], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[122]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[123], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[123]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[124], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[124]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[125], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[125]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[126], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[126]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[127], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[127]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[12], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[12]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[13], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[13]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[14], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[14]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[15], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[15]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[16], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[16]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[17], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[17]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[18], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[18]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[19], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[19]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[1], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[1]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[20], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[20]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[21], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[21]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[22], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[22]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[23], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[23]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[24], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[24]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[25], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[25]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[26], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[26]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[27], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[27]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[28], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[28]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[29], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[29]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[2], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[2]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[30], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[30]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[31], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[31]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[32], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[32]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[33], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[33]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[34], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[34]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[35], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[35]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[36], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[36]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[37], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[37]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[38], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[38]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[39], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[39]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[3], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[3]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[40], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[40]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[41], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[41]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[42], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[42]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[43], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[43]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[44], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[44]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[45], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[45]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[46], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[46]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[47], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[47]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[48], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[48]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[49], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[49]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[4], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[4]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[50], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[50]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[51], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[51]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[52], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[52]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[53], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[53]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[54], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[54]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[55], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[55]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[56], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[56]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[57], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[57]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[58], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[58]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[59], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[59]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[5], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[5]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[60], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[60]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[61], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[61]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[62], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[62]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[63], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[63]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[64], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[64]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[65], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[65]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[66], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[66]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[67], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[67]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[68], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[68]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[69], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[69]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[6], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[6]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[70], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[70]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[71], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[71]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[72], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[72]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[73], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[73]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[74], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[74]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[75], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[75]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[76], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[76]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[77], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[77]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[78], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[78]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[79], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[79]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[7], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[7]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[80], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[80]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[81], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[81]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[82], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[82]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[83], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[83]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[84], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[84]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[85], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[85]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[86], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[86]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[87], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[87]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[88], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[88]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[89], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[89]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[8], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[8]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[90], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[90]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[91], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[91]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[92], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[92]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[93], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[93]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[94], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[94]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[95], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[95]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[96], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[96]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[97], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[97]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[98], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[98]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[99], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[99]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDATA[9], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[9]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXDETECTRX, 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDETECTRX_delay);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXELECIDLE, 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXELECIDLE_delay);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXHEADER[0], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXHEADER_delay[0]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXHEADER[1], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXHEADER_delay[1]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXHEADER[2], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXHEADER_delay[2]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXHEADER[3], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXHEADER_delay[3]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXHEADER[4], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXHEADER_delay[4]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXHEADER[5], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXHEADER_delay[5]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXINHIBIT, 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXINHIBIT_delay);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXPD[0], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXPD_delay[0]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXPD[1], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXPD_delay[1]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXPIPPMEN, 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXPIPPMEN_delay);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXPIPPMSTEPSIZE[0], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXPIPPMSTEPSIZE_delay[0]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXPIPPMSTEPSIZE[1], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXPIPPMSTEPSIZE_delay[1]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXPIPPMSTEPSIZE[2], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXPIPPMSTEPSIZE_delay[2]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXPIPPMSTEPSIZE[3], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXPIPPMSTEPSIZE_delay[3]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXPIPPMSTEPSIZE[4], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXPIPPMSTEPSIZE_delay[4]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXPOLARITY, 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXPOLARITY_delay);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXRATE[0], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXRATE_delay[0]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXRATE[1], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXRATE_delay[1]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXRATE[2], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXRATE_delay[2]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXRATE[3], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXRATE_delay[3]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXRATE[4], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXRATE_delay[4]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXRATE[5], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXRATE_delay[5]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXRATE[6], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXRATE_delay[6]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXRATE[7], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXRATE_delay[7]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXSEQUENCE[0], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXSEQUENCE_delay[0]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXSEQUENCE[1], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXSEQUENCE_delay[1]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXSEQUENCE[2], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXSEQUENCE_delay[2]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXSEQUENCE[3], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXSEQUENCE_delay[3]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXSEQUENCE[4], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXSEQUENCE_delay[4]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXSEQUENCE[5], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXSEQUENCE_delay[5]);
    $setuphold (posedge CH3_TXUSRCLK, negedge CH3_TXSEQUENCE[6], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXSEQUENCE_delay[6]);
    $setuphold (posedge CH3_TXUSRCLK, negedge PCIELTSSM[0], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, PCIELTSSM_delay[0]);
    $setuphold (posedge CH3_TXUSRCLK, negedge PCIELTSSM[1], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, PCIELTSSM_delay[1]);
    $setuphold (posedge CH3_TXUSRCLK, negedge PCIELTSSM[2], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, PCIELTSSM_delay[2]);
    $setuphold (posedge CH3_TXUSRCLK, negedge PCIELTSSM[3], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, PCIELTSSM_delay[3]);
    $setuphold (posedge CH3_TXUSRCLK, negedge PCIELTSSM[4], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, PCIELTSSM_delay[4]);
    $setuphold (posedge CH3_TXUSRCLK, negedge PCIELTSSM[5], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, PCIELTSSM_delay[5]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_PHYESMADAPTSAVE, 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_PHYESMADAPTSAVE_delay);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXCOMINIT, 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXCOMINIT_delay);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXCOMSAS, 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXCOMSAS_delay);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXCOMWAKE, 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXCOMWAKE_delay);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXCTRL0[0], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXCTRL0_delay[0]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXCTRL0[10], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXCTRL0_delay[10]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXCTRL0[11], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXCTRL0_delay[11]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXCTRL0[12], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXCTRL0_delay[12]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXCTRL0[13], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXCTRL0_delay[13]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXCTRL0[14], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXCTRL0_delay[14]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXCTRL0[15], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXCTRL0_delay[15]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXCTRL0[1], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXCTRL0_delay[1]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXCTRL0[2], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXCTRL0_delay[2]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXCTRL0[3], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXCTRL0_delay[3]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXCTRL0[4], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXCTRL0_delay[4]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXCTRL0[5], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXCTRL0_delay[5]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXCTRL0[6], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXCTRL0_delay[6]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXCTRL0[7], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXCTRL0_delay[7]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXCTRL0[8], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXCTRL0_delay[8]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXCTRL0[9], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXCTRL0_delay[9]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXCTRL1[0], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXCTRL1_delay[0]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXCTRL1[10], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXCTRL1_delay[10]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXCTRL1[11], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXCTRL1_delay[11]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXCTRL1[12], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXCTRL1_delay[12]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXCTRL1[13], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXCTRL1_delay[13]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXCTRL1[14], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXCTRL1_delay[14]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXCTRL1[15], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXCTRL1_delay[15]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXCTRL1[1], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXCTRL1_delay[1]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXCTRL1[2], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXCTRL1_delay[2]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXCTRL1[3], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXCTRL1_delay[3]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXCTRL1[4], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXCTRL1_delay[4]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXCTRL1[5], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXCTRL1_delay[5]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXCTRL1[6], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXCTRL1_delay[6]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXCTRL1[7], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXCTRL1_delay[7]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXCTRL1[8], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXCTRL1_delay[8]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXCTRL1[9], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXCTRL1_delay[9]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXCTRL2[0], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXCTRL2_delay[0]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXCTRL2[1], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXCTRL2_delay[1]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXCTRL2[2], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXCTRL2_delay[2]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXCTRL2[3], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXCTRL2_delay[3]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXCTRL2[4], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXCTRL2_delay[4]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXCTRL2[5], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXCTRL2_delay[5]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXCTRL2[6], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXCTRL2_delay[6]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXCTRL2[7], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXCTRL2_delay[7]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[0], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[0]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[100], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[100]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[101], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[101]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[102], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[102]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[103], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[103]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[104], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[104]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[105], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[105]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[106], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[106]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[107], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[107]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[108], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[108]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[109], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[109]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[10], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[10]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[110], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[110]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[111], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[111]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[112], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[112]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[113], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[113]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[114], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[114]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[115], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[115]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[116], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[116]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[117], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[117]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[118], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[118]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[119], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[119]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[11], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[11]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[120], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[120]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[121], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[121]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[122], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[122]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[123], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[123]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[124], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[124]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[125], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[125]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[126], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[126]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[127], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[127]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[12], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[12]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[13], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[13]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[14], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[14]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[15], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[15]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[16], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[16]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[17], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[17]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[18], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[18]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[19], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[19]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[1], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[1]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[20], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[20]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[21], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[21]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[22], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[22]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[23], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[23]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[24], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[24]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[25], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[25]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[26], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[26]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[27], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[27]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[28], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[28]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[29], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[29]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[2], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[2]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[30], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[30]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[31], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[31]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[32], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[32]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[33], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[33]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[34], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[34]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[35], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[35]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[36], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[36]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[37], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[37]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[38], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[38]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[39], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[39]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[3], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[3]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[40], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[40]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[41], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[41]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[42], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[42]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[43], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[43]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[44], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[44]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[45], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[45]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[46], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[46]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[47], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[47]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[48], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[48]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[49], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[49]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[4], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[4]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[50], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[50]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[51], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[51]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[52], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[52]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[53], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[53]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[54], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[54]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[55], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[55]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[56], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[56]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[57], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[57]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[58], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[58]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[59], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[59]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[5], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[5]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[60], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[60]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[61], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[61]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[62], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[62]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[63], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[63]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[64], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[64]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[65], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[65]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[66], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[66]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[67], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[67]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[68], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[68]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[69], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[69]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[6], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[6]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[70], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[70]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[71], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[71]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[72], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[72]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[73], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[73]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[74], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[74]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[75], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[75]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[76], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[76]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[77], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[77]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[78], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[78]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[79], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[79]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[7], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[7]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[80], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[80]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[81], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[81]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[82], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[82]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[83], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[83]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[84], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[84]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[85], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[85]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[86], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[86]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[87], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[87]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[88], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[88]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[89], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[89]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[8], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[8]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[90], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[90]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[91], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[91]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[92], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[92]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[93], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[93]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[94], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[94]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[95], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[95]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[96], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[96]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[97], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[97]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[98], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[98]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[99], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[99]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDATA[9], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDATA_delay[9]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXDETECTRX, 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXDETECTRX_delay);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXELECIDLE, 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXELECIDLE_delay);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXHEADER[0], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXHEADER_delay[0]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXHEADER[1], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXHEADER_delay[1]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXHEADER[2], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXHEADER_delay[2]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXHEADER[3], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXHEADER_delay[3]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXHEADER[4], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXHEADER_delay[4]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXHEADER[5], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXHEADER_delay[5]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXINHIBIT, 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXINHIBIT_delay);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXPD[0], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXPD_delay[0]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXPD[1], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXPD_delay[1]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXPIPPMEN, 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXPIPPMEN_delay);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXPIPPMSTEPSIZE[0], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXPIPPMSTEPSIZE_delay[0]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXPIPPMSTEPSIZE[1], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXPIPPMSTEPSIZE_delay[1]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXPIPPMSTEPSIZE[2], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXPIPPMSTEPSIZE_delay[2]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXPIPPMSTEPSIZE[3], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXPIPPMSTEPSIZE_delay[3]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXPIPPMSTEPSIZE[4], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXPIPPMSTEPSIZE_delay[4]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXPOLARITY, 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXPOLARITY_delay);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXRATE[0], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXRATE_delay[0]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXRATE[1], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXRATE_delay[1]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXRATE[2], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXRATE_delay[2]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXRATE[3], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXRATE_delay[3]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXRATE[4], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXRATE_delay[4]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXRATE[5], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXRATE_delay[5]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXRATE[6], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXRATE_delay[6]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXRATE[7], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXRATE_delay[7]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXSEQUENCE[0], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXSEQUENCE_delay[0]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXSEQUENCE[1], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXSEQUENCE_delay[1]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXSEQUENCE[2], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXSEQUENCE_delay[2]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXSEQUENCE[3], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXSEQUENCE_delay[3]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXSEQUENCE[4], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXSEQUENCE_delay[4]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXSEQUENCE[5], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXSEQUENCE_delay[5]);
    $setuphold (posedge CH3_TXUSRCLK, posedge CH3_TXSEQUENCE[6], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, CH3_TXSEQUENCE_delay[6]);
    $setuphold (posedge CH3_TXUSRCLK, posedge PCIELTSSM[0], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, PCIELTSSM_delay[0]);
    $setuphold (posedge CH3_TXUSRCLK, posedge PCIELTSSM[1], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, PCIELTSSM_delay[1]);
    $setuphold (posedge CH3_TXUSRCLK, posedge PCIELTSSM[2], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, PCIELTSSM_delay[2]);
    $setuphold (posedge CH3_TXUSRCLK, posedge PCIELTSSM[3], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, PCIELTSSM_delay[3]);
    $setuphold (posedge CH3_TXUSRCLK, posedge PCIELTSSM[4], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, PCIELTSSM_delay[4]);
    $setuphold (posedge CH3_TXUSRCLK, posedge PCIELTSSM[5], 0:0:0, 0:0:0, notifier, , , CH3_TXUSRCLK_delay, PCIELTSSM_delay[5]);
    $setuphold (posedge DEBUGTRACECLK, negedge DEBUGTRACEREADY, 0:0:0, 0:0:0, notifier, , , DEBUGTRACECLK_delay, DEBUGTRACEREADY_delay);
    $setuphold (posedge DEBUGTRACECLK, posedge DEBUGTRACEREADY, 0:0:0, 0:0:0, notifier, , , DEBUGTRACECLK_delay, DEBUGTRACEREADY_delay);
    $setuphold (posedge RXMARGINCLK, negedge RXMARGINREQCMD[0], 0:0:0, 0:0:0, notifier, , , RXMARGINCLK_delay, RXMARGINREQCMD_delay[0]);
    $setuphold (posedge RXMARGINCLK, negedge RXMARGINREQCMD[1], 0:0:0, 0:0:0, notifier, , , RXMARGINCLK_delay, RXMARGINREQCMD_delay[1]);
    $setuphold (posedge RXMARGINCLK, negedge RXMARGINREQCMD[2], 0:0:0, 0:0:0, notifier, , , RXMARGINCLK_delay, RXMARGINREQCMD_delay[2]);
    $setuphold (posedge RXMARGINCLK, negedge RXMARGINREQCMD[3], 0:0:0, 0:0:0, notifier, , , RXMARGINCLK_delay, RXMARGINREQCMD_delay[3]);
    $setuphold (posedge RXMARGINCLK, negedge RXMARGINREQLANENUM[0], 0:0:0, 0:0:0, notifier, , , RXMARGINCLK_delay, RXMARGINREQLANENUM_delay[0]);
    $setuphold (posedge RXMARGINCLK, negedge RXMARGINREQLANENUM[1], 0:0:0, 0:0:0, notifier, , , RXMARGINCLK_delay, RXMARGINREQLANENUM_delay[1]);
    $setuphold (posedge RXMARGINCLK, negedge RXMARGINREQPAYLD[0], 0:0:0, 0:0:0, notifier, , , RXMARGINCLK_delay, RXMARGINREQPAYLD_delay[0]);
    $setuphold (posedge RXMARGINCLK, negedge RXMARGINREQPAYLD[1], 0:0:0, 0:0:0, notifier, , , RXMARGINCLK_delay, RXMARGINREQPAYLD_delay[1]);
    $setuphold (posedge RXMARGINCLK, negedge RXMARGINREQPAYLD[2], 0:0:0, 0:0:0, notifier, , , RXMARGINCLK_delay, RXMARGINREQPAYLD_delay[2]);
    $setuphold (posedge RXMARGINCLK, negedge RXMARGINREQPAYLD[3], 0:0:0, 0:0:0, notifier, , , RXMARGINCLK_delay, RXMARGINREQPAYLD_delay[3]);
    $setuphold (posedge RXMARGINCLK, negedge RXMARGINREQPAYLD[4], 0:0:0, 0:0:0, notifier, , , RXMARGINCLK_delay, RXMARGINREQPAYLD_delay[4]);
    $setuphold (posedge RXMARGINCLK, negedge RXMARGINREQPAYLD[5], 0:0:0, 0:0:0, notifier, , , RXMARGINCLK_delay, RXMARGINREQPAYLD_delay[5]);
    $setuphold (posedge RXMARGINCLK, negedge RXMARGINREQPAYLD[6], 0:0:0, 0:0:0, notifier, , , RXMARGINCLK_delay, RXMARGINREQPAYLD_delay[6]);
    $setuphold (posedge RXMARGINCLK, negedge RXMARGINREQPAYLD[7], 0:0:0, 0:0:0, notifier, , , RXMARGINCLK_delay, RXMARGINREQPAYLD_delay[7]);
    $setuphold (posedge RXMARGINCLK, negedge RXMARGINREQREQ, 0:0:0, 0:0:0, notifier, , , RXMARGINCLK_delay, RXMARGINREQREQ_delay);
    $setuphold (posedge RXMARGINCLK, negedge RXMARGINRESACK, 0:0:0, 0:0:0, notifier, , , RXMARGINCLK_delay, RXMARGINRESACK_delay);
    $setuphold (posedge RXMARGINCLK, posedge RXMARGINREQCMD[0], 0:0:0, 0:0:0, notifier, , , RXMARGINCLK_delay, RXMARGINREQCMD_delay[0]);
    $setuphold (posedge RXMARGINCLK, posedge RXMARGINREQCMD[1], 0:0:0, 0:0:0, notifier, , , RXMARGINCLK_delay, RXMARGINREQCMD_delay[1]);
    $setuphold (posedge RXMARGINCLK, posedge RXMARGINREQCMD[2], 0:0:0, 0:0:0, notifier, , , RXMARGINCLK_delay, RXMARGINREQCMD_delay[2]);
    $setuphold (posedge RXMARGINCLK, posedge RXMARGINREQCMD[3], 0:0:0, 0:0:0, notifier, , , RXMARGINCLK_delay, RXMARGINREQCMD_delay[3]);
    $setuphold (posedge RXMARGINCLK, posedge RXMARGINREQLANENUM[0], 0:0:0, 0:0:0, notifier, , , RXMARGINCLK_delay, RXMARGINREQLANENUM_delay[0]);
    $setuphold (posedge RXMARGINCLK, posedge RXMARGINREQLANENUM[1], 0:0:0, 0:0:0, notifier, , , RXMARGINCLK_delay, RXMARGINREQLANENUM_delay[1]);
    $setuphold (posedge RXMARGINCLK, posedge RXMARGINREQPAYLD[0], 0:0:0, 0:0:0, notifier, , , RXMARGINCLK_delay, RXMARGINREQPAYLD_delay[0]);
    $setuphold (posedge RXMARGINCLK, posedge RXMARGINREQPAYLD[1], 0:0:0, 0:0:0, notifier, , , RXMARGINCLK_delay, RXMARGINREQPAYLD_delay[1]);
    $setuphold (posedge RXMARGINCLK, posedge RXMARGINREQPAYLD[2], 0:0:0, 0:0:0, notifier, , , RXMARGINCLK_delay, RXMARGINREQPAYLD_delay[2]);
    $setuphold (posedge RXMARGINCLK, posedge RXMARGINREQPAYLD[3], 0:0:0, 0:0:0, notifier, , , RXMARGINCLK_delay, RXMARGINREQPAYLD_delay[3]);
    $setuphold (posedge RXMARGINCLK, posedge RXMARGINREQPAYLD[4], 0:0:0, 0:0:0, notifier, , , RXMARGINCLK_delay, RXMARGINREQPAYLD_delay[4]);
    $setuphold (posedge RXMARGINCLK, posedge RXMARGINREQPAYLD[5], 0:0:0, 0:0:0, notifier, , , RXMARGINCLK_delay, RXMARGINREQPAYLD_delay[5]);
    $setuphold (posedge RXMARGINCLK, posedge RXMARGINREQPAYLD[6], 0:0:0, 0:0:0, notifier, , , RXMARGINCLK_delay, RXMARGINREQPAYLD_delay[6]);
    $setuphold (posedge RXMARGINCLK, posedge RXMARGINREQPAYLD[7], 0:0:0, 0:0:0, notifier, , , RXMARGINCLK_delay, RXMARGINREQPAYLD_delay[7]);
    $setuphold (posedge RXMARGINCLK, posedge RXMARGINREQREQ, 0:0:0, 0:0:0, notifier, , , RXMARGINCLK_delay, RXMARGINREQREQ_delay);
    $setuphold (posedge RXMARGINCLK, posedge RXMARGINRESACK, 0:0:0, 0:0:0, notifier, , , RXMARGINCLK_delay, RXMARGINRESACK_delay);
    $width (negedge APB3CLK, 0:0:0, 0, notifier);
    $width (negedge AXISCLK, 0:0:0, 0, notifier);
    $width (negedge CH0_DMONITORCLK, 0:0:0, 0, notifier);
    $width (negedge CH0_RXLATCLK, 0:0:0, 0, notifier);
    $width (negedge CH0_RXUSRCLK, 0:0:0, 0, notifier);
    $width (negedge CH0_TXLATCLK, 0:0:0, 0, notifier);
    $width (negedge CH0_TXUSRCLK, 0:0:0, 0, notifier);
    $width (negedge CH1_DMONITORCLK, 0:0:0, 0, notifier);
    $width (negedge CH1_RXLATCLK, 0:0:0, 0, notifier);
    $width (negedge CH1_RXUSRCLK, 0:0:0, 0, notifier);
    $width (negedge CH1_TXLATCLK, 0:0:0, 0, notifier);
    $width (negedge CH1_TXUSRCLK, 0:0:0, 0, notifier);
    $width (negedge CH2_DMONITORCLK, 0:0:0, 0, notifier);
    $width (negedge CH2_RXLATCLK, 0:0:0, 0, notifier);
    $width (negedge CH2_RXUSRCLK, 0:0:0, 0, notifier);
    $width (negedge CH2_TXLATCLK, 0:0:0, 0, notifier);
    $width (negedge CH2_TXUSRCLK, 0:0:0, 0, notifier);
    $width (negedge CH3_DMONITORCLK, 0:0:0, 0, notifier);
    $width (negedge CH3_RXLATCLK, 0:0:0, 0, notifier);
    $width (negedge CH3_RXUSRCLK, 0:0:0, 0, notifier);
    $width (negedge CH3_TXLATCLK, 0:0:0, 0, notifier);
    $width (negedge CH3_TXUSRCLK, 0:0:0, 0, notifier);
    $width (negedge DEBUGTRACECLK, 0:0:0, 0, notifier);
    $width (negedge HSCLK0_LCPLLGTGREFCLK, 0:0:0, 0, notifier);
    $width (negedge HSCLK0_LCPLLGTREFCLK0, 0:0:0, 0, notifier);
    $width (negedge HSCLK0_LCPLLGTREFCLK1, 0:0:0, 0, notifier);
    $width (negedge HSCLK0_LCPLLNORTHREFCLK0, 0:0:0, 0, notifier);
    $width (negedge HSCLK0_LCPLLNORTHREFCLK1, 0:0:0, 0, notifier);
    $width (negedge HSCLK0_LCPLLSOUTHREFCLK0, 0:0:0, 0, notifier);
    $width (negedge HSCLK0_LCPLLSOUTHREFCLK1, 0:0:0, 0, notifier);
    $width (negedge HSCLK0_RPLLGTGREFCLK, 0:0:0, 0, notifier);
    $width (negedge HSCLK0_RPLLGTREFCLK0, 0:0:0, 0, notifier);
    $width (negedge HSCLK0_RPLLGTREFCLK1, 0:0:0, 0, notifier);
    $width (negedge HSCLK0_RPLLNORTHREFCLK0, 0:0:0, 0, notifier);
    $width (negedge HSCLK0_RPLLNORTHREFCLK1, 0:0:0, 0, notifier);
    $width (negedge HSCLK0_RPLLSOUTHREFCLK0, 0:0:0, 0, notifier);
    $width (negedge HSCLK0_RPLLSOUTHREFCLK1, 0:0:0, 0, notifier);
    $width (negedge HSCLK1_LCPLLGTGREFCLK, 0:0:0, 0, notifier);
    $width (negedge HSCLK1_LCPLLGTREFCLK0, 0:0:0, 0, notifier);
    $width (negedge HSCLK1_LCPLLGTREFCLK1, 0:0:0, 0, notifier);
    $width (negedge HSCLK1_LCPLLNORTHREFCLK0, 0:0:0, 0, notifier);
    $width (negedge HSCLK1_LCPLLNORTHREFCLK1, 0:0:0, 0, notifier);
    $width (negedge HSCLK1_LCPLLSOUTHREFCLK0, 0:0:0, 0, notifier);
    $width (negedge HSCLK1_LCPLLSOUTHREFCLK1, 0:0:0, 0, notifier);
    $width (negedge HSCLK1_RPLLGTGREFCLK, 0:0:0, 0, notifier);
    $width (negedge HSCLK1_RPLLGTREFCLK0, 0:0:0, 0, notifier);
    $width (negedge HSCLK1_RPLLGTREFCLK1, 0:0:0, 0, notifier);
    $width (negedge HSCLK1_RPLLNORTHREFCLK0, 0:0:0, 0, notifier);
    $width (negedge HSCLK1_RPLLNORTHREFCLK1, 0:0:0, 0, notifier);
    $width (negedge HSCLK1_RPLLSOUTHREFCLK0, 0:0:0, 0, notifier);
    $width (negedge HSCLK1_RPLLSOUTHREFCLK1, 0:0:0, 0, notifier);
    $width (negedge REFCLK0_CLKTESTSIG, 0:0:0, 0, notifier);
    $width (negedge REFCLK1_CLKTESTSIG, 0:0:0, 0, notifier);
    $width (negedge RXMARGINCLK, 0:0:0, 0, notifier);
    $width (posedge APB3CLK, 0:0:0, 0, notifier);
    $width (posedge AXISCLK, 0:0:0, 0, notifier);
    $width (posedge CH0_DMONITORCLK, 0:0:0, 0, notifier);
    $width (posedge CH0_RXLATCLK, 0:0:0, 0, notifier);
    $width (posedge CH0_RXUSRCLK, 0:0:0, 0, notifier);
    $width (posedge CH0_TXLATCLK, 0:0:0, 0, notifier);
    $width (posedge CH0_TXUSRCLK, 0:0:0, 0, notifier);
    $width (posedge CH1_DMONITORCLK, 0:0:0, 0, notifier);
    $width (posedge CH1_RXLATCLK, 0:0:0, 0, notifier);
    $width (posedge CH1_RXUSRCLK, 0:0:0, 0, notifier);
    $width (posedge CH1_TXLATCLK, 0:0:0, 0, notifier);
    $width (posedge CH1_TXUSRCLK, 0:0:0, 0, notifier);
    $width (posedge CH2_DMONITORCLK, 0:0:0, 0, notifier);
    $width (posedge CH2_RXLATCLK, 0:0:0, 0, notifier);
    $width (posedge CH2_RXUSRCLK, 0:0:0, 0, notifier);
    $width (posedge CH2_TXLATCLK, 0:0:0, 0, notifier);
    $width (posedge CH2_TXUSRCLK, 0:0:0, 0, notifier);
    $width (posedge CH3_DMONITORCLK, 0:0:0, 0, notifier);
    $width (posedge CH3_RXLATCLK, 0:0:0, 0, notifier);
    $width (posedge CH3_RXUSRCLK, 0:0:0, 0, notifier);
    $width (posedge CH3_TXLATCLK, 0:0:0, 0, notifier);
    $width (posedge CH3_TXUSRCLK, 0:0:0, 0, notifier);
    $width (posedge DEBUGTRACECLK, 0:0:0, 0, notifier);
    $width (posedge HSCLK0_LCPLLGTGREFCLK, 0:0:0, 0, notifier);
    $width (posedge HSCLK0_LCPLLGTREFCLK0, 0:0:0, 0, notifier);
    $width (posedge HSCLK0_LCPLLGTREFCLK1, 0:0:0, 0, notifier);
    $width (posedge HSCLK0_LCPLLNORTHREFCLK0, 0:0:0, 0, notifier);
    $width (posedge HSCLK0_LCPLLNORTHREFCLK1, 0:0:0, 0, notifier);
    $width (posedge HSCLK0_LCPLLSOUTHREFCLK0, 0:0:0, 0, notifier);
    $width (posedge HSCLK0_LCPLLSOUTHREFCLK1, 0:0:0, 0, notifier);
    $width (posedge HSCLK0_RPLLGTGREFCLK, 0:0:0, 0, notifier);
    $width (posedge HSCLK0_RPLLGTREFCLK0, 0:0:0, 0, notifier);
    $width (posedge HSCLK0_RPLLGTREFCLK1, 0:0:0, 0, notifier);
    $width (posedge HSCLK0_RPLLNORTHREFCLK0, 0:0:0, 0, notifier);
    $width (posedge HSCLK0_RPLLNORTHREFCLK1, 0:0:0, 0, notifier);
    $width (posedge HSCLK0_RPLLSOUTHREFCLK0, 0:0:0, 0, notifier);
    $width (posedge HSCLK0_RPLLSOUTHREFCLK1, 0:0:0, 0, notifier);
    $width (posedge HSCLK1_LCPLLGTGREFCLK, 0:0:0, 0, notifier);
    $width (posedge HSCLK1_LCPLLGTREFCLK0, 0:0:0, 0, notifier);
    $width (posedge HSCLK1_LCPLLGTREFCLK1, 0:0:0, 0, notifier);
    $width (posedge HSCLK1_LCPLLNORTHREFCLK0, 0:0:0, 0, notifier);
    $width (posedge HSCLK1_LCPLLNORTHREFCLK1, 0:0:0, 0, notifier);
    $width (posedge HSCLK1_LCPLLSOUTHREFCLK0, 0:0:0, 0, notifier);
    $width (posedge HSCLK1_LCPLLSOUTHREFCLK1, 0:0:0, 0, notifier);
    $width (posedge HSCLK1_RPLLGTGREFCLK, 0:0:0, 0, notifier);
    $width (posedge HSCLK1_RPLLGTREFCLK0, 0:0:0, 0, notifier);
    $width (posedge HSCLK1_RPLLGTREFCLK1, 0:0:0, 0, notifier);
    $width (posedge HSCLK1_RPLLNORTHREFCLK0, 0:0:0, 0, notifier);
    $width (posedge HSCLK1_RPLLNORTHREFCLK1, 0:0:0, 0, notifier);
    $width (posedge HSCLK1_RPLLSOUTHREFCLK0, 0:0:0, 0, notifier);
    $width (posedge HSCLK1_RPLLSOUTHREFCLK1, 0:0:0, 0, notifier);
    $width (posedge REFCLK0_CLKTESTSIG, 0:0:0, 0, notifier);
    $width (posedge REFCLK1_CLKTESTSIG, 0:0:0, 0, notifier);
    $width (posedge RXMARGINCLK, 0:0:0, 0, notifier);
`endif
    specparam PATHPULSE$ = 0;
  endspecify
`endif
endmodule

`endcelldefine
