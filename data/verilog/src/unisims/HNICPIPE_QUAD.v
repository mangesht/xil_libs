///////////////////////////////////////////////////////////////////////////////
//  Copyright (c) 1995/2021 Xilinx, Inc.
//  All Right Reserved.
///////////////////////////////////////////////////////////////////////////////
//   ____  ____
//  /   /\/   /
// /___/  \  /     Vendor      : Xilinx
// \   \   \/      Version     : 2022.1
//  \   \          Description : Xilinx Unified Simulation Library Component
//  /   /                        HNICPIPE_QUAD
// /___/   /\      Filename    : HNICPIPE_QUAD.v
// \   \  /  \
//  \___\/\___\
//
///////////////////////////////////////////////////////////////////////////////
//  Revision:
//
//  End Revision:
///////////////////////////////////////////////////////////////////////////////

`timescale 1 ps / 1 ps

`celldefine

module HNICPIPE_QUAD #(
`ifdef XIL_TIMING
  parameter LOC = "UNPLACED",
`endif
  parameter [31:0] HNICPIPE_HPIPE_CFG0 = 32'h0000003E,
  parameter [31:0] HNICPIPE_HPIPE_CFG1 = 32'h00000000,
  parameter [31:0] HNICPIPE_HPIPE_CFG2 = 32'h00000000,
  parameter [31:0] HNICPIPE_HPIPE_CFG3 = 32'h00000000,
  parameter [31:0] HNICPIPE_HPIPE_CFG4 = 32'h00000000,
  parameter [31:0] HNICPIPE_HPIPE_CFG5 = 32'h00000000,
  parameter [31:0] HNICPIPE_HPIPE_CFG6 = 32'h00000000,
  parameter [31:0] HNICPIPE_OPTDLY_CFG0 = 32'h00000000,
  parameter [31:0] HNICPIPE_OPTDLY_CFG1 = 32'h00000000,
  parameter [31:0] HNICPIPE_PIPE_CFG = 32'h000F0000,
  parameter [31:0] HNICPIPE_RX_CLKMUX_SEL = 32'h00000000,
  parameter [31:0] HNICPIPE_RX_CLK_REMAP_CFG = 32'h00000000,
  parameter [31:0] HNICPIPE_RX_DATA_REMAP_CFG = 32'h00000000,
  parameter [31:0] HNICPIPE_TX_CLKMUX_SEL = 32'h00000000,
  parameter [31:0] HNICPIPE_TX_CLK_REMAP_CFG = 32'h00000000,
  parameter [31:0] HNICPIPE_TX_DATA_REMAP_CFG = 32'h00000000
)(
  output APB3CLK_M,
  output [15:0] APB3PADDR_M,
  output APB3PENABLE_M,
  output [31:0] APB3PRDATA,
  output APB3PREADY,
  output APB3PRESETN_M,
  output APB3PSEL_M,
  output APB3PSLVERR,
  output [31:0] APB3PWDATA_M,
  output APB3PWRITE_M,
  output AXISCLK_M,
  output BGBYPASSB_M,
  output BGMONITORENB_M,
  output BGPDB_M,
  output BGRCALOVRDENB_M,
  output [4:0] BGRCALOVRD_M,
  output CH0_CDRFREQOS_M,
  output CH0_CDRINCPCTRL_M,
  output CH0_CDRSTEPDIR_M,
  output CH0_CDRSTEPSQ_M,
  output CH0_CDRSTEPSX_M,
  output CH0_CLKRSVD0_M,
  output CH0_CLKRSVD1_M,
  output CH0_DMONFIFORESET_M,
  output CH0_DMONITORCLK_M,
  output [31:0] CH0_DMONITOROUT,
  output CH0_EYESCANDATAERROR,
  output CH0_EYESCANRESET_M,
  output CH0_EYESCANTRIGGER_M,
  output [15:0] CH0_GTRSVD_M,
  output CH0_GTRXRESET_M,
  output CH0_GTTXRESET_M,
  output CH0_ILORESETDONE,
  output CH0_ILORESETMASK_M,
  output CH0_ILORESET_M,
  output [2:0] CH0_LOOPBACK_M,
  output [15:0] CH0_PCSRSVDIN_M,
  output [15:0] CH0_PCSRSVDOUT,
  output [15:0] CH0_PINRSVDAS,
  output [1:0] CH0_REFDEBUGOUT,
  output CH0_RESETEXCEPTION,
  output [2:0] CH0_RXBUFSTATUS,
  output CH0_RXCDRHOLD_M,
  output CH0_RXCDRLOCK,
  output CH0_RXCDROVRDEN_M,
  output CH0_RXCDRPHDONE,
  output CH0_RXCDRRESET_M,
  output [255:0] CH0_RXDATA,
  output CH0_RXDEBUGPCSOUT,
  output CH0_RXLATCLK_M,
  output [2:0] CH0_RXPCSRESETMASK_M,
  output [1:0] CH0_RXPD_M,
  output CH0_RXPERST_M,
  output CH0_RXPMARESETDONE,
  output [7:0] CH0_RXPMARESETMASK_M,
  output CH0_RXPOLARITY_M,
  output CH0_RXPRBSCNTRESET_M,
  output CH0_RXPRBSCNTSTOP_M,
  output CH0_RXPRBSERR,
  output CH0_RXPRBSLOCKED,
  output [3:0] CH0_RXPRBSSEL_M,
  output CH0_RXPROGDIVRESETDONE,
  output CH0_RXPROGDIVRESET_M,
  output CH0_RXQPRBSEN_M,
  output [7:0] CH0_RXRATE_M,
  output CH0_RXRESETDONE,
  output [1:0] CH0_RXRESETMODE_M,
  output CH0_RXRSV0_M,
  output CH0_RXRSV1_M,
  output CH0_RXRSV2_M,
  output CH0_RXUSERRDY_M,
  output CH0_RXUSRCLK_M,
  output CH0_TSTCLK0_M,
  output CH0_TSTCLK1_M,
  output [2:0] CH0_TXBUFSTATUS,
  output [255:0] CH0_TXDATA_M,
  output CH0_TXDCCDONE,
  output CH0_TXDEBUGPCSOUT,
  output CH0_TXINHIBIT_M,
  output CH0_TXLATCLK_M,
  output [6:0] CH0_TXMAINCURSOR_M,
  output CH0_TXPCSRESETMASK_M,
  output [1:0] CH0_TXPD_M,
  output CH0_TXPERST_M,
  output CH0_TXPISOPD_M,
  output CH0_TXPMARESETDONE,
  output [1:0] CH0_TXPMARESETMASK_M,
  output CH0_TXPOLARITY_M,
  output [5:0] CH0_TXPOSTCURSOR_M,
  output CH0_TXPRBSFORCEERR_M,
  output [3:0] CH0_TXPRBSSEL_M,
  output [5:0] CH0_TXPRECURSOR2_M,
  output [5:0] CH0_TXPRECURSOR3_M,
  output [5:0] CH0_TXPRECURSOR_M,
  output CH0_TXPROGDIVRESETDONE,
  output CH0_TXPROGDIVRESET_M,
  output CH0_TXQPRBSEN_M,
  output [7:0] CH0_TXRATE_M,
  output CH0_TXRESETDONE,
  output [1:0] CH0_TXRESETMODE_M,
  output [4:0] CH0_TXRSV0_M,
  output [3:0] CH0_TXRSV1_M,
  output CH0_TXUSERRDY_M,
  output CH0_TXUSRCLK_M,
  output CH1_CDRFREQOS_M,
  output CH1_CDRINCPCTRL_M,
  output CH1_CDRSTEPDIR_M,
  output CH1_CDRSTEPSQ_M,
  output CH1_CDRSTEPSX_M,
  output CH1_CLKRSVD0_M,
  output CH1_CLKRSVD1_M,
  output CH1_DMONFIFORESET_M,
  output CH1_DMONITORCLK_M,
  output [31:0] CH1_DMONITOROUT,
  output CH1_EYESCANDATAERROR,
  output CH1_EYESCANRESET_M,
  output CH1_EYESCANTRIGGER_M,
  output [15:0] CH1_GTRSVD_M,
  output CH1_GTRXRESET_M,
  output CH1_GTTXRESET_M,
  output CH1_ILORESETDONE,
  output CH1_ILORESETMASK_M,
  output CH1_ILORESET_M,
  output [2:0] CH1_LOOPBACK_M,
  output [15:0] CH1_PCSRSVDIN_M,
  output [15:0] CH1_PCSRSVDOUT,
  output [15:0] CH1_PINRSVDAS,
  output [1:0] CH1_REFDEBUGOUT,
  output CH1_RESETEXCEPTION,
  output [2:0] CH1_RXBUFSTATUS,
  output CH1_RXCDRHOLD_M,
  output CH1_RXCDRLOCK,
  output CH1_RXCDROVRDEN_M,
  output CH1_RXCDRPHDONE,
  output CH1_RXCDRRESET_M,
  output [255:0] CH1_RXDATA,
  output CH1_RXDEBUGPCSOUT,
  output CH1_RXLATCLK_M,
  output [2:0] CH1_RXPCSRESETMASK_M,
  output [1:0] CH1_RXPD_M,
  output CH1_RXPERST_M,
  output CH1_RXPMARESETDONE,
  output [7:0] CH1_RXPMARESETMASK_M,
  output CH1_RXPOLARITY_M,
  output CH1_RXPRBSCNTRESET_M,
  output CH1_RXPRBSCNTSTOP_M,
  output CH1_RXPRBSERR,
  output CH1_RXPRBSLOCKED,
  output [3:0] CH1_RXPRBSSEL_M,
  output CH1_RXPROGDIVRESETDONE,
  output CH1_RXPROGDIVRESET_M,
  output CH1_RXQPRBSEN_M,
  output [7:0] CH1_RXRATE_M,
  output CH1_RXRESETDONE,
  output [1:0] CH1_RXRESETMODE_M,
  output CH1_RXRSV0_M,
  output CH1_RXRSV1_M,
  output CH1_RXRSV2_M,
  output CH1_RXUSERRDY_M,
  output CH1_RXUSRCLK_M,
  output CH1_TSTCLK0_M,
  output CH1_TSTCLK1_M,
  output [2:0] CH1_TXBUFSTATUS,
  output [255:0] CH1_TXDATA_M,
  output CH1_TXDCCDONE,
  output CH1_TXDEBUGPCSOUT,
  output CH1_TXINHIBIT_M,
  output CH1_TXLATCLK_M,
  output [6:0] CH1_TXMAINCURSOR_M,
  output CH1_TXPCSRESETMASK_M,
  output [1:0] CH1_TXPD_M,
  output CH1_TXPERST_M,
  output CH1_TXPISOPD_M,
  output CH1_TXPMARESETDONE,
  output [1:0] CH1_TXPMARESETMASK_M,
  output CH1_TXPOLARITY_M,
  output [5:0] CH1_TXPOSTCURSOR_M,
  output CH1_TXPRBSFORCEERR_M,
  output [3:0] CH1_TXPRBSSEL_M,
  output [5:0] CH1_TXPRECURSOR2_M,
  output [5:0] CH1_TXPRECURSOR3_M,
  output [5:0] CH1_TXPRECURSOR_M,
  output CH1_TXPROGDIVRESETDONE,
  output CH1_TXPROGDIVRESET_M,
  output CH1_TXQPRBSEN_M,
  output [7:0] CH1_TXRATE_M,
  output CH1_TXRESETDONE,
  output [1:0] CH1_TXRESETMODE_M,
  output [4:0] CH1_TXRSV0_M,
  output [3:0] CH1_TXRSV1_M,
  output CH1_TXUSERRDY_M,
  output CH1_TXUSRCLK_M,
  output CH2_CDRFREQOS_M,
  output CH2_CDRINCPCTRL_M,
  output CH2_CDRSTEPDIR_M,
  output CH2_CDRSTEPSQ_M,
  output CH2_CDRSTEPSX_M,
  output CH2_CLKRSVD0_M,
  output CH2_CLKRSVD1_M,
  output CH2_DMONFIFORESET_M,
  output CH2_DMONITORCLK_M,
  output [31:0] CH2_DMONITOROUT,
  output CH2_EYESCANDATAERROR,
  output CH2_EYESCANRESET_M,
  output CH2_EYESCANTRIGGER_M,
  output [15:0] CH2_GTRSVD_M,
  output CH2_GTRXRESET_M,
  output CH2_GTTXRESET_M,
  output CH2_ILORESETDONE,
  output CH2_ILORESETMASK_M,
  output CH2_ILORESET_M,
  output [2:0] CH2_LOOPBACK_M,
  output [15:0] CH2_PCSRSVDIN_M,
  output [15:0] CH2_PCSRSVDOUT,
  output [15:0] CH2_PINRSVDAS,
  output [1:0] CH2_REFDEBUGOUT,
  output CH2_RESETEXCEPTION,
  output [2:0] CH2_RXBUFSTATUS,
  output CH2_RXCDRHOLD_M,
  output CH2_RXCDRLOCK,
  output CH2_RXCDROVRDEN_M,
  output CH2_RXCDRPHDONE,
  output CH2_RXCDRRESET_M,
  output [255:0] CH2_RXDATA,
  output CH2_RXDEBUGPCSOUT,
  output CH2_RXLATCLK_M,
  output [2:0] CH2_RXPCSRESETMASK_M,
  output [1:0] CH2_RXPD_M,
  output CH2_RXPERST_M,
  output CH2_RXPMARESETDONE,
  output [7:0] CH2_RXPMARESETMASK_M,
  output CH2_RXPOLARITY_M,
  output CH2_RXPRBSCNTRESET_M,
  output CH2_RXPRBSCNTSTOP_M,
  output CH2_RXPRBSERR,
  output CH2_RXPRBSLOCKED,
  output [3:0] CH2_RXPRBSSEL_M,
  output CH2_RXPROGDIVRESETDONE,
  output CH2_RXPROGDIVRESET_M,
  output CH2_RXQPRBSEN_M,
  output [7:0] CH2_RXRATE_M,
  output CH2_RXRESETDONE,
  output [1:0] CH2_RXRESETMODE_M,
  output CH2_RXRSV0_M,
  output CH2_RXRSV1_M,
  output CH2_RXRSV2_M,
  output CH2_RXUSERRDY_M,
  output CH2_RXUSRCLK_M,
  output CH2_TSTCLK0_M,
  output CH2_TSTCLK1_M,
  output [2:0] CH2_TXBUFSTATUS,
  output [255:0] CH2_TXDATA_M,
  output CH2_TXDCCDONE,
  output CH2_TXDEBUGPCSOUT,
  output CH2_TXINHIBIT_M,
  output CH2_TXLATCLK_M,
  output [6:0] CH2_TXMAINCURSOR_M,
  output CH2_TXPCSRESETMASK_M,
  output [1:0] CH2_TXPD_M,
  output CH2_TXPERST_M,
  output CH2_TXPISOPD_M,
  output CH2_TXPMARESETDONE,
  output [1:0] CH2_TXPMARESETMASK_M,
  output CH2_TXPOLARITY_M,
  output [5:0] CH2_TXPOSTCURSOR_M,
  output CH2_TXPRBSFORCEERR_M,
  output [3:0] CH2_TXPRBSSEL_M,
  output [5:0] CH2_TXPRECURSOR2_M,
  output [5:0] CH2_TXPRECURSOR3_M,
  output [5:0] CH2_TXPRECURSOR_M,
  output CH2_TXPROGDIVRESETDONE,
  output CH2_TXPROGDIVRESET_M,
  output CH2_TXQPRBSEN_M,
  output [7:0] CH2_TXRATE_M,
  output CH2_TXRESETDONE,
  output [1:0] CH2_TXRESETMODE_M,
  output [4:0] CH2_TXRSV0_M,
  output [3:0] CH2_TXRSV1_M,
  output CH2_TXUSERRDY_M,
  output CH2_TXUSRCLK_M,
  output CH3_CDRFREQOS_M,
  output CH3_CDRINCPCTRL_M,
  output CH3_CDRSTEPDIR_M,
  output CH3_CDRSTEPSQ_M,
  output CH3_CDRSTEPSX_M,
  output CH3_CLKRSVD0_M,
  output CH3_CLKRSVD1_M,
  output CH3_DMONFIFORESET_M,
  output CH3_DMONITORCLK_M,
  output [31:0] CH3_DMONITOROUT,
  output CH3_EYESCANDATAERROR,
  output CH3_EYESCANRESET_M,
  output CH3_EYESCANTRIGGER_M,
  output [15:0] CH3_GTRSVD_M,
  output CH3_GTRXRESET_M,
  output CH3_GTTXRESET_M,
  output CH3_ILORESETDONE,
  output CH3_ILORESETMASK_M,
  output CH3_ILORESET_M,
  output [2:0] CH3_LOOPBACK_M,
  output [15:0] CH3_PCSRSVDIN_M,
  output [15:0] CH3_PCSRSVDOUT,
  output [15:0] CH3_PINRSVDAS,
  output [1:0] CH3_REFDEBUGOUT,
  output CH3_RESETEXCEPTION,
  output [2:0] CH3_RXBUFSTATUS,
  output CH3_RXCDRHOLD_M,
  output CH3_RXCDRLOCK,
  output CH3_RXCDROVRDEN_M,
  output CH3_RXCDRPHDONE,
  output CH3_RXCDRRESET_M,
  output [255:0] CH3_RXDATA,
  output CH3_RXDEBUGPCSOUT,
  output CH3_RXLATCLK_M,
  output [2:0] CH3_RXPCSRESETMASK_M,
  output [1:0] CH3_RXPD_M,
  output CH3_RXPERST_M,
  output CH3_RXPMARESETDONE,
  output [7:0] CH3_RXPMARESETMASK_M,
  output CH3_RXPOLARITY_M,
  output CH3_RXPRBSCNTRESET_M,
  output CH3_RXPRBSCNTSTOP_M,
  output CH3_RXPRBSERR,
  output CH3_RXPRBSLOCKED,
  output [3:0] CH3_RXPRBSSEL_M,
  output CH3_RXPROGDIVRESETDONE,
  output CH3_RXPROGDIVRESET_M,
  output CH3_RXQPRBSEN_M,
  output [7:0] CH3_RXRATE_M,
  output CH3_RXRESETDONE,
  output [1:0] CH3_RXRESETMODE_M,
  output CH3_RXRSV0_M,
  output CH3_RXRSV1_M,
  output CH3_RXRSV2_M,
  output CH3_RXUSERRDY_M,
  output CH3_RXUSRCLK_M,
  output CH3_TSTCLK0_M,
  output CH3_TSTCLK1_M,
  output [2:0] CH3_TXBUFSTATUS,
  output [255:0] CH3_TXDATA_M,
  output CH3_TXDCCDONE,
  output CH3_TXDEBUGPCSOUT,
  output CH3_TXINHIBIT_M,
  output CH3_TXLATCLK_M,
  output [6:0] CH3_TXMAINCURSOR_M,
  output CH3_TXPCSRESETMASK_M,
  output [1:0] CH3_TXPD_M,
  output CH3_TXPERST_M,
  output CH3_TXPISOPD_M,
  output CH3_TXPMARESETDONE,
  output [1:0] CH3_TXPMARESETMASK_M,
  output CH3_TXPOLARITY_M,
  output [5:0] CH3_TXPOSTCURSOR_M,
  output CH3_TXPRBSFORCEERR_M,
  output [3:0] CH3_TXPRBSSEL_M,
  output [5:0] CH3_TXPRECURSOR2_M,
  output [5:0] CH3_TXPRECURSOR3_M,
  output [5:0] CH3_TXPRECURSOR_M,
  output CH3_TXPROGDIVRESETDONE,
  output CH3_TXPROGDIVRESET_M,
  output CH3_TXQPRBSEN_M,
  output [7:0] CH3_TXRATE_M,
  output CH3_TXRESETDONE,
  output [1:0] CH3_TXRESETMODE_M,
  output [4:0] CH3_TXRSV0_M,
  output [3:0] CH3_TXRSV1_M,
  output CH3_TXUSERRDY_M,
  output CH3_TXUSRCLK_M,
  output COESTATUSDEBUG_M,
  output CORRECTERR,
  output [7:0] CTRLRSVDIN_M,
  output [7:0] CTRLRSVDOUT,
  output DEBUGTRACECLK_M,
  output DEBUGTRACEREADY_M,
  output [15:0] DEBUGTRACETDATA,
  output DEBUGTRACETVALID,
  output [31:0] GPI_M,
  output [31:0] GPO,
  output GTPOWERGOOD,
  output [15:0] HNICPIPE_ANLT_HNICX_STATUS_0,
  output [15:0] HNICPIPE_ANLT_HNICX_STATUS_1,
  output [15:0] HNICPIPE_ANLT_HNICX_STATUS_2,
  output [15:0] HNICPIPE_ANLT_HNICX_STATUS_3,
  output HNICPIPE_FEC_ALIGNED_0_M,
  output HNICPIPE_FEC_ALIGNED_1_M,
  output HNICPIPE_FEC_ALIGNED_2_M,
  output HNICPIPE_FEC_ALIGNED_3_M,
  output [3:0] HNICPIPE_FEC_LANE_LOCK_0_M,
  output [3:0] HNICPIPE_FEC_LANE_LOCK_1_M,
  output [3:0] HNICPIPE_FEC_LANE_LOCK_2_M,
  output [3:0] HNICPIPE_FEC_LANE_LOCK_3_M,
  output [7:0] HNICPIPE_GT_RX_SERDES_CLK_GOOD_OUT,
  output [3:0] HNICPIPE_GT_TX_SERDES_CLK_GOOD_OUT,
  output [79:0] HNICPIPE_HNICMAC_RXDATA0,
  output [79:0] HNICPIPE_HNICMAC_RXDATA1,
  output [79:0] HNICPIPE_HNICMAC_RXDATA2,
  output [79:0] HNICPIPE_HNICMAC_RXDATA3,
  output [79:0] HNICPIPE_HNICMAC_RXDATA4,
  output [79:0] HNICPIPE_HNICMAC_RXDATA5,
  output [79:0] HNICPIPE_HNICMAC_RXDATA6,
  output [79:0] HNICPIPE_HNICMAC_RXDATA7,
  output HNICPIPE_MAC_PHY_STATUS_OK_0_M,
  output HNICPIPE_MAC_PHY_STATUS_OK_1_M,
  output HNICPIPE_MAC_PHY_STATUS_OK_2_M,
  output HNICPIPE_MAC_PHY_STATUS_OK_3_M,
  output HNICPIPE_RSFEC_CORRECTED_CWB_INC_0_M,
  output HNICPIPE_RSFEC_CORRECTED_CWB_INC_1_M,
  output HNICPIPE_RSFEC_CORRECTED_CWB_INC_2_M,
  output HNICPIPE_RSFEC_CORRECTED_CWB_INC_3_M,
  output HNICPIPE_RSFEC_CORRECTED_CW_INC_0_M,
  output HNICPIPE_RSFEC_CORRECTED_CW_INC_1_M,
  output HNICPIPE_RSFEC_CORRECTED_CW_INC_2_M,
  output HNICPIPE_RSFEC_CORRECTED_CW_INC_3_M,
  output [4:0] HNICPIPE_RSFEC_CWA_ERR_CNT_INC_0_M,
  output [4:0] HNICPIPE_RSFEC_CWA_ERR_CNT_INC_1_M,
  output [4:0] HNICPIPE_RSFEC_CWA_ERR_CNT_INC_2_M,
  output [4:0] HNICPIPE_RSFEC_CWA_ERR_CNT_INC_3_M,
  output [4:0] HNICPIPE_RSFEC_CWB_ERR_CNT_INC_0_M,
  output [4:0] HNICPIPE_RSFEC_CWB_ERR_CNT_INC_1_M,
  output [4:0] HNICPIPE_RSFEC_CWB_ERR_CNT_INC_2_M,
  output [4:0] HNICPIPE_RSFEC_CWB_ERR_CNT_INC_3_M,
  output HNICPIPE_RSFEC_CWB_INC_0_M,
  output HNICPIPE_RSFEC_CWB_INC_1_M,
  output HNICPIPE_RSFEC_CWB_INC_2_M,
  output HNICPIPE_RSFEC_CWB_INC_3_M,
  output HNICPIPE_RSFEC_CW_INC_0_M,
  output HNICPIPE_RSFEC_CW_INC_1_M,
  output HNICPIPE_RSFEC_CW_INC_2_M,
  output HNICPIPE_RSFEC_CW_INC_3_M,
  output [4:0] HNICPIPE_RSFEC_L0_ERR_CNT_INC_0_M,
  output [4:0] HNICPIPE_RSFEC_L0_ERR_CNT_INC_1_M,
  output [4:0] HNICPIPE_RSFEC_L0_ERR_CNT_INC_2_M,
  output [4:0] HNICPIPE_RSFEC_L0_ERR_CNT_INC_3_M,
  output [4:0] HNICPIPE_RSFEC_L1_ERR_CNT_INC_0_M,
  output [4:0] HNICPIPE_RSFEC_L1_ERR_CNT_INC_1_M,
  output [4:0] HNICPIPE_RSFEC_L1_ERR_CNT_INC_2_M,
  output [4:0] HNICPIPE_RSFEC_L1_ERR_CNT_INC_3_M,
  output [4:0] HNICPIPE_RSFEC_L2_ERR_CNT_INC_0_M,
  output [4:0] HNICPIPE_RSFEC_L2_ERR_CNT_INC_1_M,
  output [4:0] HNICPIPE_RSFEC_L2_ERR_CNT_INC_2_M,
  output [4:0] HNICPIPE_RSFEC_L2_ERR_CNT_INC_3_M,
  output [4:0] HNICPIPE_RSFEC_L3_ERR_CNT_INC_0_M,
  output [4:0] HNICPIPE_RSFEC_L3_ERR_CNT_INC_1_M,
  output [4:0] HNICPIPE_RSFEC_L3_ERR_CNT_INC_2_M,
  output [4:0] HNICPIPE_RSFEC_L3_ERR_CNT_INC_3_M,
  output [11:0] HNICPIPE_RSFEC_MAPPING_0_M,
  output [11:0] HNICPIPE_RSFEC_MAPPING_1_M,
  output [11:0] HNICPIPE_RSFEC_MAPPING_2_M,
  output [11:0] HNICPIPE_RSFEC_MAPPING_3_M,
  output HNICPIPE_RSFEC_UNCORRECTED_CWB_INC_0_M,
  output HNICPIPE_RSFEC_UNCORRECTED_CWB_INC_1_M,
  output HNICPIPE_RSFEC_UNCORRECTED_CWB_INC_2_M,
  output HNICPIPE_RSFEC_UNCORRECTED_CWB_INC_3_M,
  output HNICPIPE_RSFEC_UNCORRECTED_CW_INC_0_M,
  output HNICPIPE_RSFEC_UNCORRECTED_CW_INC_1_M,
  output HNICPIPE_RSFEC_UNCORRECTED_CW_INC_2_M,
  output HNICPIPE_RSFEC_UNCORRECTED_CW_INC_3_M,
  output [3:0] HNICPIPE_RXUSRCLK_BOT2TOP_OUT,
  output [3:0] HNICPIPE_RX_RST_BOT2TOP_OUT,
  output [7:0] HNICPIPE_RX_SERDES_CLK,
  output [79:0] HNICPIPE_TXDATA_TOP2BOT0,
  output [79:0] HNICPIPE_TXDATA_TOP2BOT1,
  output [79:0] HNICPIPE_TXDATA_TOP2BOT2,
  output [79:0] HNICPIPE_TXDATA_TOP2BOT3,
  output [3:0] HNICPIPE_TXUSRCLK_BOT2TOP_OUT,
  output [3:0] HNICPIPE_TX_RST_BOT2TOP_OUT,
  output [3:0] HNICPIPE_TX_SERDES_CLK,
  output HNICPIPE_UBLAZE_ACK_0,
  output HNICPIPE_UBLAZE_ACK_1,
  output [59:0] HNICPIPE_UBLAZE_DATA_0_M,
  output [59:0] HNICPIPE_UBLAZE_DATA_1_M,
  output HNICPIPE_UBLAZE_DEN_0_M,
  output HNICPIPE_UBLAZE_DEN_1_M,
  output HSCLK0_LCPLLFBCLKLOST,
  output [7:0] HSCLK0_LCPLLFBDIV_M,
  output HSCLK0_LCPLLGTGREFCLK_M,
  output HSCLK0_LCPLLLOCK,
  output HSCLK0_LCPLLPD_M,
  output HSCLK0_LCPLLREFCLKLOST,
  output HSCLK0_LCPLLREFCLKMONITOR,
  output [2:0] HSCLK0_LCPLLREFCLKSEL_M,
  output HSCLK0_LCPLLRESETBYPASSMODE_M,
  output [1:0] HSCLK0_LCPLLRESETMASK_M,
  output HSCLK0_LCPLLRESET_M,
  output [25:0] HSCLK0_LCPLLSDMDATA_M,
  output HSCLK0_LCPLLSDMTOGGLE_M,
  output HSCLK1_LCPLLFBCLKLOST,
  output [7:0] HSCLK1_LCPLLFBDIV_M,
  output HSCLK1_LCPLLGTGREFCLK_M,
  output HSCLK1_LCPLLLOCK,
  output HSCLK1_LCPLLPD_M,
  output HSCLK1_LCPLLREFCLKLOST,
  output HSCLK1_LCPLLREFCLKMONITOR,
  output [2:0] HSCLK1_LCPLLREFCLKSEL_M,
  output HSCLK1_LCPLLRESETBYPASSMODE_M,
  output [1:0] HSCLK1_LCPLLRESETMASK_M,
  output HSCLK1_LCPLLRESET_M,
  output [25:0] HSCLK1_LCPLLSDMDATA_M,
  output HSCLK1_LCPLLSDMTOGGLE_M,
  output [31:0] M0_AXIS_TDATA,
  output M0_AXIS_TLAST,
  output M0_AXIS_TREADY_M,
  output M0_AXIS_TVALID,
  output [31:0] M1_AXIS_TDATA,
  output M1_AXIS_TLAST,
  output M1_AXIS_TREADY_M,
  output M1_AXIS_TVALID,
  output [31:0] M2_AXIS_TDATA,
  output M2_AXIS_TLAST,
  output M2_AXIS_TREADY_M,
  output M2_AXIS_TVALID,
  output [31:0] M3_AXIS_TDATA,
  output M3_AXIS_TLAST,
  output M3_AXIS_TREADY_M,
  output M3_AXIS_TVALID,
  output [3:0] MSTRXRESETDONE,
  output [3:0] MSTRXRESET_M,
  output [3:0] MSTTXRESETDONE,
  output [3:0] MSTTXRESET_M,
  output REFCLK0_CLKTESTSIG_M,
  output REFCLK0_GTREFCLKPD_M,
  output REFCLK1_CLKTESTSIG_M,
  output REFCLK1_GTREFCLKPD_M,
  output [31:0] S0_AXIS_TDATA_M,
  output S0_AXIS_TLAST_M,
  output S0_AXIS_TREADY,
  output S0_AXIS_TVALID_M,
  output [31:0] S1_AXIS_TDATA_M,
  output S1_AXIS_TLAST_M,
  output S1_AXIS_TREADY,
  output S1_AXIS_TVALID_M,
  output [31:0] S2_AXIS_TDATA_M,
  output S2_AXIS_TLAST_M,
  output S2_AXIS_TREADY,
  output S2_AXIS_TVALID_M,
  output [31:0] S3_AXIS_TDATA_M,
  output S3_AXIS_TLAST_M,
  output S3_AXIS_TREADY,
  output S3_AXIS_TVALID_M,
  output TRIGACKIN0,
  output TRIGACKOUT0_M,
  output TRIGIN0_M,
  output TRIGOUT0,
  output UBENABLE_M,
  output UBINTERRUPT,
  output [11:0] UBINTR_M,
  output UBIOLMBRST_M,
  output UBMBRST_M,
  output UBRXUART_M,
  output UBTXUART,
  output UNCORRECTERR,

  input APB3CLK,
  input [15:0] APB3PADDR,
  input APB3PENABLE,
  input [31:0] APB3PRDATA_M,
  input APB3PREADY_M,
  input APB3PRESETN,
  input APB3PSEL,
  input APB3PSLVERR_M,
  input [31:0] APB3PWDATA,
  input APB3PWRITE,
  input AXISCLK,
  input BGBYPASSB,
  input BGMONITORENB,
  input BGPDB,
  input [4:0] BGRCALOVRD,
  input BGRCALOVRDENB,
  input CH0_CDRFREQOS,
  input CH0_CDRINCPCTRL,
  input CH0_CDRSTEPDIR,
  input CH0_CDRSTEPSQ,
  input CH0_CDRSTEPSX,
  input CH0_CLKRSVD1,
  input CH0_DMONFIFORESET,
  input CH0_DMONITORCLK,
  input [31:0] CH0_DMONITOROUT_M,
  input CH0_EYESCANDATAERROR_M,
  input CH0_EYESCANRESET,
  input CH0_EYESCANTRIGGER,
  input [15:0] CH0_GTRSVD,
  input CH0_GTRXRESET,
  input CH0_GTTXRESET,
  input CH0_ILORESET,
  input CH0_ILORESETDONE_M,
  input CH0_ILORESETMASK,
  input [2:0] CH0_LOOPBACK,
  input [4:0] CH0_PCSRSVDIN,
  input [15:0] CH0_PCSRSVDOUT_M,
  input [15:0] CH0_PINRSVDAS_M,
  input [1:0] CH0_REFDEBUGOUT_M,
  input CH0_RESETEXCEPTION_M,
  input [2:0] CH0_RXBUFSTATUS_M,
  input CH0_RXCDRHOLD,
  input CH0_RXCDRLOCK_M,
  input CH0_RXCDROVRDEN,
  input CH0_RXCDRPHDONE_M,
  input CH0_RXCDRRESET,
  input [255:0] CH0_RXDATA_M,
  input CH0_RXDEBUGPCSOUT_M,
  input CH0_RXLATCLK,
  input [2:0] CH0_RXPCSRESETMASK,
  input [1:0] CH0_RXPD,
  input CH0_RXPERST,
  input CH0_RXPMARESETDONE_M,
  input [7:0] CH0_RXPMARESETMASK,
  input CH0_RXPOLARITY,
  input CH0_RXPRBSCNTRESET,
  input CH0_RXPRBSCNTSTOP,
  input CH0_RXPRBSERR_M,
  input CH0_RXPRBSLOCKED_M,
  input [3:0] CH0_RXPRBSSEL,
  input CH0_RXPROGDIVRESET,
  input CH0_RXPROGDIVRESETDONE_M,
  input CH0_RXQPRBSEN,
  input [7:0] CH0_RXRATE,
  input CH0_RXRESETDONE_M,
  input [1:0] CH0_RXRESETMODE,
  input CH0_RXRSV0,
  input CH0_RXRSV1,
  input CH0_RXRSV2,
  input CH0_RXUSERRDY,
  input CH0_RXUSRCLK,
  input CH0_TSTCLK0,
  input CH0_TSTCLK1,
  input [2:0] CH0_TXBUFSTATUS_M,
  input [255:0] CH0_TXDATA,
  input CH0_TXDCCDONE_M,
  input CH0_TXDEBUGPCSOUT_M,
  input CH0_TXINHIBIT,
  input CH0_TXLATCLK,
  input [6:0] CH0_TXMAINCURSOR,
  input CH0_TXPCSRESETMASK,
  input [1:0] CH0_TXPD,
  input CH0_TXPERST,
  input CH0_TXPISOPD,
  input CH0_TXPMARESETDONE_M,
  input [1:0] CH0_TXPMARESETMASK,
  input CH0_TXPOLARITY,
  input [5:0] CH0_TXPOSTCURSOR,
  input CH0_TXPRBSFORCEERR,
  input [3:0] CH0_TXPRBSSEL,
  input [5:0] CH0_TXPRECURSOR,
  input [5:0] CH0_TXPRECURSOR2,
  input [5:0] CH0_TXPRECURSOR3,
  input CH0_TXPROGDIVRESET,
  input CH0_TXPROGDIVRESETDONE_M,
  input CH0_TXQPRBSEN,
  input [7:0] CH0_TXRATE,
  input CH0_TXRESETDONE_M,
  input [1:0] CH0_TXRESETMODE,
  input [4:0] CH0_TXRSV0,
  input [3:0] CH0_TXRSV1,
  input CH0_TXUSERRDY,
  input CH0_TXUSRCLK,
  input CH1_CDRFREQOS,
  input CH1_CDRINCPCTRL,
  input CH1_CDRSTEPDIR,
  input CH1_CDRSTEPSQ,
  input CH1_CDRSTEPSX,
  input CH1_CLKRSVD0,
  input CH1_CLKRSVD1,
  input CH1_DMONFIFORESET,
  input CH1_DMONITORCLK,
  input [31:0] CH1_DMONITOROUT_M,
  input CH1_EYESCANDATAERROR_M,
  input CH1_EYESCANRESET,
  input CH1_EYESCANTRIGGER,
  input [15:0] CH1_GTRSVD,
  input CH1_GTRXRESET,
  input CH1_GTTXRESET,
  input CH1_ILORESET,
  input CH1_ILORESETDONE_M,
  input CH1_ILORESETMASK,
  input [2:0] CH1_LOOPBACK,
  input [15:0] CH1_PCSRSVDIN,
  input [15:0] CH1_PCSRSVDOUT_M,
  input [15:0] CH1_PINRSVDAS_M,
  input [1:0] CH1_REFDEBUGOUT_M,
  input CH1_RESETEXCEPTION_M,
  input [2:0] CH1_RXBUFSTATUS_M,
  input CH1_RXCDRHOLD,
  input CH1_RXCDRLOCK_M,
  input CH1_RXCDROVRDEN,
  input CH1_RXCDRPHDONE_M,
  input CH1_RXCDRRESET,
  input [255:0] CH1_RXDATA_M,
  input CH1_RXDEBUGPCSOUT_M,
  input CH1_RXLATCLK,
  input [2:0] CH1_RXPCSRESETMASK,
  input [1:0] CH1_RXPD,
  input CH1_RXPERST,
  input CH1_RXPMARESETDONE_M,
  input [7:0] CH1_RXPMARESETMASK,
  input CH1_RXPOLARITY,
  input CH1_RXPRBSCNTRESET,
  input CH1_RXPRBSCNTSTOP,
  input CH1_RXPRBSERR_M,
  input CH1_RXPRBSLOCKED_M,
  input [3:0] CH1_RXPRBSSEL,
  input CH1_RXPROGDIVRESET,
  input CH1_RXPROGDIVRESETDONE_M,
  input CH1_RXQPRBSEN,
  input [7:0] CH1_RXRATE,
  input CH1_RXRESETDONE_M,
  input [1:0] CH1_RXRESETMODE,
  input CH1_RXRSV0,
  input CH1_RXRSV1,
  input CH1_RXRSV2,
  input CH1_RXUSERRDY,
  input CH1_RXUSRCLK,
  input CH1_TSTCLK0,
  input CH1_TSTCLK1,
  input [2:0] CH1_TXBUFSTATUS_M,
  input [255:0] CH1_TXDATA,
  input CH1_TXDCCDONE_M,
  input CH1_TXDEBUGPCSOUT_M,
  input CH1_TXINHIBIT,
  input CH1_TXLATCLK,
  input [6:0] CH1_TXMAINCURSOR,
  input CH1_TXPCSRESETMASK,
  input [1:0] CH1_TXPD,
  input CH1_TXPERST,
  input CH1_TXPISOPD,
  input CH1_TXPMARESETDONE_M,
  input [1:0] CH1_TXPMARESETMASK,
  input CH1_TXPOLARITY,
  input [5:0] CH1_TXPOSTCURSOR,
  input CH1_TXPRBSFORCEERR,
  input [3:0] CH1_TXPRBSSEL,
  input [5:0] CH1_TXPRECURSOR,
  input [5:0] CH1_TXPRECURSOR2,
  input [5:0] CH1_TXPRECURSOR3,
  input CH1_TXPROGDIVRESET,
  input CH1_TXPROGDIVRESETDONE_M,
  input CH1_TXQPRBSEN,
  input [7:0] CH1_TXRATE,
  input CH1_TXRESETDONE_M,
  input [1:0] CH1_TXRESETMODE,
  input [4:0] CH1_TXRSV0,
  input [3:0] CH1_TXRSV1,
  input CH1_TXUSERRDY,
  input CH1_TXUSRCLK,
  input CH2_CDRFREQOS,
  input CH2_CDRINCPCTRL,
  input CH2_CDRSTEPDIR,
  input CH2_CDRSTEPSQ,
  input CH2_CDRSTEPSX,
  input CH2_CLKRSVD0,
  input CH2_CLKRSVD1,
  input CH2_DMONFIFORESET,
  input CH2_DMONITORCLK,
  input [31:0] CH2_DMONITOROUT_M,
  input CH2_EYESCANDATAERROR_M,
  input CH2_EYESCANRESET,
  input CH2_EYESCANTRIGGER,
  input [15:0] CH2_GTRSVD,
  input CH2_GTRXRESET,
  input CH2_GTTXRESET,
  input CH2_ILORESET,
  input CH2_ILORESETDONE_M,
  input CH2_ILORESETMASK,
  input [2:0] CH2_LOOPBACK,
  input [15:0] CH2_PCSRSVDIN,
  input [15:0] CH2_PCSRSVDOUT_M,
  input [15:0] CH2_PINRSVDAS_M,
  input [1:0] CH2_REFDEBUGOUT_M,
  input CH2_RESETEXCEPTION_M,
  input [2:0] CH2_RXBUFSTATUS_M,
  input CH2_RXCDRHOLD,
  input CH2_RXCDRLOCK_M,
  input CH2_RXCDROVRDEN,
  input CH2_RXCDRPHDONE_M,
  input CH2_RXCDRRESET,
  input [255:0] CH2_RXDATA_M,
  input CH2_RXDEBUGPCSOUT_M,
  input CH2_RXLATCLK,
  input [2:0] CH2_RXPCSRESETMASK,
  input [1:0] CH2_RXPD,
  input CH2_RXPERST,
  input CH2_RXPMARESETDONE_M,
  input [7:0] CH2_RXPMARESETMASK,
  input CH2_RXPOLARITY,
  input CH2_RXPRBSCNTRESET,
  input CH2_RXPRBSCNTSTOP,
  input CH2_RXPRBSERR_M,
  input CH2_RXPRBSLOCKED_M,
  input [3:0] CH2_RXPRBSSEL,
  input CH2_RXPROGDIVRESET,
  input CH2_RXPROGDIVRESETDONE_M,
  input CH2_RXQPRBSEN,
  input [7:0] CH2_RXRATE,
  input CH2_RXRESETDONE_M,
  input [1:0] CH2_RXRESETMODE,
  input CH2_RXRSV0,
  input CH2_RXRSV1,
  input CH2_RXRSV2,
  input CH2_RXUSERRDY,
  input CH2_RXUSRCLK,
  input CH2_TSTCLK0,
  input CH2_TSTCLK1,
  input [2:0] CH2_TXBUFSTATUS_M,
  input [255:0] CH2_TXDATA,
  input CH2_TXDCCDONE_M,
  input CH2_TXDEBUGPCSOUT_M,
  input CH2_TXINHIBIT,
  input CH2_TXLATCLK,
  input [6:0] CH2_TXMAINCURSOR,
  input CH2_TXPCSRESETMASK,
  input [1:0] CH2_TXPD,
  input CH2_TXPERST,
  input CH2_TXPISOPD,
  input CH2_TXPMARESETDONE_M,
  input [1:0] CH2_TXPMARESETMASK,
  input CH2_TXPOLARITY,
  input [5:0] CH2_TXPOSTCURSOR,
  input CH2_TXPRBSFORCEERR,
  input [3:0] CH2_TXPRBSSEL,
  input [5:0] CH2_TXPRECURSOR,
  input [5:0] CH2_TXPRECURSOR2,
  input [5:0] CH2_TXPRECURSOR3,
  input CH2_TXPROGDIVRESET,
  input CH2_TXPROGDIVRESETDONE_M,
  input CH2_TXQPRBSEN,
  input [7:0] CH2_TXRATE,
  input CH2_TXRESETDONE_M,
  input [1:0] CH2_TXRESETMODE,
  input [4:0] CH2_TXRSV0,
  input [3:0] CH2_TXRSV1,
  input CH2_TXUSERRDY,
  input CH2_TXUSRCLK,
  input CH3_CDRFREQOS,
  input CH3_CDRINCPCTRL,
  input CH3_CDRSTEPDIR,
  input CH3_CDRSTEPSQ,
  input CH3_CDRSTEPSX,
  input CH3_CLKRSVD0,
  input CH3_CLKRSVD1,
  input CH3_DMONFIFORESET,
  input CH3_DMONITORCLK,
  input [31:0] CH3_DMONITOROUT_M,
  input CH3_EYESCANDATAERROR_M,
  input CH3_EYESCANRESET,
  input CH3_EYESCANTRIGGER,
  input [15:0] CH3_GTRSVD,
  input CH3_GTRXRESET,
  input CH3_GTTXRESET,
  input CH3_ILORESET,
  input CH3_ILORESETDONE_M,
  input CH3_ILORESETMASK,
  input [2:0] CH3_LOOPBACK,
  input [15:0] CH3_PCSRSVDIN,
  input [15:0] CH3_PCSRSVDOUT_M,
  input [15:0] CH3_PINRSVDAS_M,
  input [1:0] CH3_REFDEBUGOUT_M,
  input CH3_RESETEXCEPTION_M,
  input [2:0] CH3_RXBUFSTATUS_M,
  input CH3_RXCDRHOLD,
  input CH3_RXCDRLOCK_M,
  input CH3_RXCDROVRDEN,
  input CH3_RXCDRPHDONE_M,
  input CH3_RXCDRRESET,
  input [255:0] CH3_RXDATA_M,
  input CH3_RXDEBUGPCSOUT_M,
  input CH3_RXLATCLK,
  input [2:0] CH3_RXPCSRESETMASK,
  input [1:0] CH3_RXPD,
  input CH3_RXPERST,
  input CH3_RXPMARESETDONE_M,
  input [7:0] CH3_RXPMARESETMASK,
  input CH3_RXPOLARITY,
  input CH3_RXPRBSCNTRESET,
  input CH3_RXPRBSCNTSTOP,
  input CH3_RXPRBSERR_M,
  input CH3_RXPRBSLOCKED_M,
  input [3:0] CH3_RXPRBSSEL,
  input CH3_RXPROGDIVRESET,
  input CH3_RXPROGDIVRESETDONE_M,
  input CH3_RXQPRBSEN,
  input [7:0] CH3_RXRATE,
  input CH3_RXRESETDONE_M,
  input [1:0] CH3_RXRESETMODE,
  input CH3_RXRSV0,
  input CH3_RXRSV1,
  input CH3_RXRSV2,
  input CH3_RXUSERRDY,
  input CH3_RXUSRCLK,
  input CH3_TSTCLK0,
  input CH3_TSTCLK1,
  input [2:0] CH3_TXBUFSTATUS_M,
  input [255:0] CH3_TXDATA,
  input CH3_TXDCCDONE_M,
  input CH3_TXDEBUGPCSOUT_M,
  input CH3_TXINHIBIT,
  input CH3_TXLATCLK,
  input [6:0] CH3_TXMAINCURSOR,
  input CH3_TXPCSRESETMASK,
  input [1:0] CH3_TXPD,
  input CH3_TXPERST,
  input CH3_TXPISOPD,
  input CH3_TXPMARESETDONE_M,
  input [1:0] CH3_TXPMARESETMASK,
  input CH3_TXPOLARITY,
  input [5:0] CH3_TXPOSTCURSOR,
  input CH3_TXPRBSFORCEERR,
  input [3:0] CH3_TXPRBSSEL,
  input [5:0] CH3_TXPRECURSOR,
  input [5:0] CH3_TXPRECURSOR2,
  input [5:0] CH3_TXPRECURSOR3,
  input CH3_TXPROGDIVRESET,
  input CH3_TXPROGDIVRESETDONE_M,
  input CH3_TXQPRBSEN,
  input [7:0] CH3_TXRATE,
  input CH3_TXRESETDONE_M,
  input [1:0] CH3_TXRESETMODE,
  input [4:0] CH3_TXRSV0,
  input [3:0] CH3_TXRSV1,
  input CH3_TXUSERRDY,
  input CH3_TXUSRCLK,
  input COESTATUSDEBUG,
  input CORRECTERR_M,
  input [7:0] CTRLRSVDIN,
  input [7:0] CTRLRSVDOUT_M,
  input DEBUGTRACECLK,
  input DEBUGTRACEREADY,
  input [15:0] DEBUGTRACETDATA_M,
  input DEBUGTRACETVALID_M,
  input [31:0] GPI,
  input [31:0] GPO_M,
  input GTPOWERGOOD_M,
  input [15:0] HNICPIPE_ANLT_HNICX_STATUS_0_M,
  input [15:0] HNICPIPE_ANLT_HNICX_STATUS_1_M,
  input [15:0] HNICPIPE_ANLT_HNICX_STATUS_2_M,
  input [15:0] HNICPIPE_ANLT_HNICX_STATUS_3_M,
  input HNICPIPE_FEC_ALIGNED_0,
  input HNICPIPE_FEC_ALIGNED_1,
  input HNICPIPE_FEC_ALIGNED_2,
  input HNICPIPE_FEC_ALIGNED_3,
  input [3:0] HNICPIPE_FEC_LANE_LOCK_0,
  input [3:0] HNICPIPE_FEC_LANE_LOCK_1,
  input [3:0] HNICPIPE_FEC_LANE_LOCK_2,
  input [3:0] HNICPIPE_FEC_LANE_LOCK_3,
  input [3:0] HNICPIPE_GT_RX_SERDES_CLK_GOOD_IN,
  input [3:0] HNICPIPE_GT_TX_SERDES_CLK_GOOD_IN,
  input [79:0] HNICPIPE_HNICMAC_TXDATA0,
  input [79:0] HNICPIPE_HNICMAC_TXDATA1,
  input [79:0] HNICPIPE_HNICMAC_TXDATA2,
  input [79:0] HNICPIPE_HNICMAC_TXDATA3,
  input [79:0] HNICPIPE_HNICMAC_TXDATA4,
  input [79:0] HNICPIPE_HNICMAC_TXDATA5,
  input [79:0] HNICPIPE_HNICMAC_TXDATA6,
  input [79:0] HNICPIPE_HNICMAC_TXDATA7,
  input HNICPIPE_MAC_PHY_STATUS_OK_0,
  input HNICPIPE_MAC_PHY_STATUS_OK_1,
  input HNICPIPE_MAC_PHY_STATUS_OK_2,
  input HNICPIPE_MAC_PHY_STATUS_OK_3,
  input [3:0] HNICPIPE_NORTH_BOT_RXOUTCLK,
  input [3:0] HNICPIPE_NORTH_BOT_TXOUTCLK,
  input [3:0] HNICPIPE_NORTH_TOP_RXOUTCLK,
  input [3:0] HNICPIPE_NORTH_TOP_TXOUTCLK,
  input HNICPIPE_RSFEC_CORRECTED_CWB_INC_0,
  input HNICPIPE_RSFEC_CORRECTED_CWB_INC_1,
  input HNICPIPE_RSFEC_CORRECTED_CWB_INC_2,
  input HNICPIPE_RSFEC_CORRECTED_CWB_INC_3,
  input HNICPIPE_RSFEC_CORRECTED_CW_INC_0,
  input HNICPIPE_RSFEC_CORRECTED_CW_INC_1,
  input HNICPIPE_RSFEC_CORRECTED_CW_INC_2,
  input HNICPIPE_RSFEC_CORRECTED_CW_INC_3,
  input [4:0] HNICPIPE_RSFEC_CWA_ERR_CNT_INC_0,
  input [4:0] HNICPIPE_RSFEC_CWA_ERR_CNT_INC_1,
  input [4:0] HNICPIPE_RSFEC_CWA_ERR_CNT_INC_2,
  input [4:0] HNICPIPE_RSFEC_CWA_ERR_CNT_INC_3,
  input [4:0] HNICPIPE_RSFEC_CWB_ERR_CNT_INC_0,
  input [4:0] HNICPIPE_RSFEC_CWB_ERR_CNT_INC_1,
  input [4:0] HNICPIPE_RSFEC_CWB_ERR_CNT_INC_2,
  input [4:0] HNICPIPE_RSFEC_CWB_ERR_CNT_INC_3,
  input HNICPIPE_RSFEC_CWB_INC_0,
  input HNICPIPE_RSFEC_CWB_INC_1,
  input HNICPIPE_RSFEC_CWB_INC_2,
  input HNICPIPE_RSFEC_CWB_INC_3,
  input HNICPIPE_RSFEC_CW_INC_0,
  input HNICPIPE_RSFEC_CW_INC_1,
  input HNICPIPE_RSFEC_CW_INC_2,
  input HNICPIPE_RSFEC_CW_INC_3,
  input [4:0] HNICPIPE_RSFEC_L0_ERR_CNT_INC_0,
  input [4:0] HNICPIPE_RSFEC_L0_ERR_CNT_INC_1,
  input [4:0] HNICPIPE_RSFEC_L0_ERR_CNT_INC_2,
  input [4:0] HNICPIPE_RSFEC_L0_ERR_CNT_INC_3,
  input [4:0] HNICPIPE_RSFEC_L1_ERR_CNT_INC_0,
  input [4:0] HNICPIPE_RSFEC_L1_ERR_CNT_INC_1,
  input [4:0] HNICPIPE_RSFEC_L1_ERR_CNT_INC_2,
  input [4:0] HNICPIPE_RSFEC_L1_ERR_CNT_INC_3,
  input [4:0] HNICPIPE_RSFEC_L2_ERR_CNT_INC_0,
  input [4:0] HNICPIPE_RSFEC_L2_ERR_CNT_INC_1,
  input [4:0] HNICPIPE_RSFEC_L2_ERR_CNT_INC_2,
  input [4:0] HNICPIPE_RSFEC_L2_ERR_CNT_INC_3,
  input [4:0] HNICPIPE_RSFEC_L3_ERR_CNT_INC_0,
  input [4:0] HNICPIPE_RSFEC_L3_ERR_CNT_INC_1,
  input [4:0] HNICPIPE_RSFEC_L3_ERR_CNT_INC_2,
  input [4:0] HNICPIPE_RSFEC_L3_ERR_CNT_INC_3,
  input [11:0] HNICPIPE_RSFEC_MAPPING_0,
  input [11:0] HNICPIPE_RSFEC_MAPPING_1,
  input [11:0] HNICPIPE_RSFEC_MAPPING_2,
  input [11:0] HNICPIPE_RSFEC_MAPPING_3,
  input HNICPIPE_RSFEC_UNCORRECTED_CWB_INC_0,
  input HNICPIPE_RSFEC_UNCORRECTED_CWB_INC_1,
  input HNICPIPE_RSFEC_UNCORRECTED_CWB_INC_2,
  input HNICPIPE_RSFEC_UNCORRECTED_CWB_INC_3,
  input HNICPIPE_RSFEC_UNCORRECTED_CW_INC_0,
  input HNICPIPE_RSFEC_UNCORRECTED_CW_INC_1,
  input HNICPIPE_RSFEC_UNCORRECTED_CW_INC_2,
  input HNICPIPE_RSFEC_UNCORRECTED_CW_INC_3,
  input [79:0] HNICPIPE_RXDATA_BOT2TOP0,
  input [79:0] HNICPIPE_RXDATA_BOT2TOP1,
  input [79:0] HNICPIPE_RXDATA_BOT2TOP2,
  input [79:0] HNICPIPE_RXDATA_BOT2TOP3,
  input [3:0] HNICPIPE_RXUSRCLK_BOT2TOP_IN,
  input [3:0] HNICPIPE_RX_RST_BOT2TOP_IN,
  input [3:0] HNICPIPE_SOUTH_BOT_RXOUTCLK,
  input [3:0] HNICPIPE_SOUTH_BOT_TXOUTCLK,
  input [3:0] HNICPIPE_SOUTH_TOP_RXOUTCLK,
  input [3:0] HNICPIPE_SOUTH_TOP_TXOUTCLK,
  input [3:0] HNICPIPE_TXUSRCLK_BOT2TOP_IN,
  input [3:0] HNICPIPE_TX_RST_BOT2TOP_IN,
  input HNICPIPE_UBLAZE_ACK_0_M,
  input HNICPIPE_UBLAZE_ACK_1_M,
  input [59:0] HNICPIPE_UBLAZE_DATA_0,
  input [59:0] HNICPIPE_UBLAZE_DATA_1,
  input HNICPIPE_UBLAZE_DEN_0,
  input HNICPIPE_UBLAZE_DEN_1,
  input HSCLK0_LCPLLFBCLKLOST_M,
  input [7:0] HSCLK0_LCPLLFBDIV,
  input HSCLK0_LCPLLGTGREFCLK,
  input HSCLK0_LCPLLLOCK_M,
  input HSCLK0_LCPLLPD,
  input HSCLK0_LCPLLREFCLKLOST_M,
  input HSCLK0_LCPLLREFCLKMONITOR_M,
  input [2:0] HSCLK0_LCPLLREFCLKSEL,
  input HSCLK0_LCPLLRESET,
  input HSCLK0_LCPLLRESETBYPASSMODE,
  input [1:0] HSCLK0_LCPLLRESETMASK,
  input [25:0] HSCLK0_LCPLLSDMDATA,
  input HSCLK0_LCPLLSDMTOGGLE,
  input HSCLK1_LCPLLFBCLKLOST_M,
  input [7:0] HSCLK1_LCPLLFBDIV,
  input HSCLK1_LCPLLGTGREFCLK,
  input HSCLK1_LCPLLLOCK_M,
  input HSCLK1_LCPLLPD,
  input HSCLK1_LCPLLREFCLKLOST_M,
  input HSCLK1_LCPLLREFCLKMONITOR_M,
  input [2:0] HSCLK1_LCPLLREFCLKSEL,
  input HSCLK1_LCPLLRESET,
  input HSCLK1_LCPLLRESETBYPASSMODE,
  input [1:0] HSCLK1_LCPLLRESETMASK,
  input [25:0] HSCLK1_LCPLLSDMDATA,
  input HSCLK1_LCPLLSDMTOGGLE,
  input [31:0] M0_AXIS_TDATA_M,
  input M0_AXIS_TLAST_M,
  input M0_AXIS_TREADY,
  input M0_AXIS_TVALID_M,
  input [31:0] M1_AXIS_TDATA_M,
  input M1_AXIS_TLAST_M,
  input M1_AXIS_TREADY,
  input M1_AXIS_TVALID_M,
  input [31:0] M2_AXIS_TDATA_M,
  input M2_AXIS_TLAST_M,
  input M2_AXIS_TREADY,
  input M2_AXIS_TVALID_M,
  input [31:0] M3_AXIS_TDATA_M,
  input M3_AXIS_TLAST_M,
  input M3_AXIS_TREADY,
  input M3_AXIS_TVALID_M,
  input [3:0] MSTRXRESET,
  input [3:0] MSTRXRESETDONE_M,
  input [3:0] MSTTXRESET,
  input [3:0] MSTTXRESETDONE_M,
  input REFCLK0_CLKTESTSIG,
  input REFCLK0_GTREFCLKPD,
  input REFCLK1_CLKTESTSIG,
  input REFCLK1_GTREFCLKPD,
  input [31:0] S0_AXIS_TDATA,
  input S0_AXIS_TLAST,
  input S0_AXIS_TREADY_M,
  input S0_AXIS_TVALID,
  input [31:0] S1_AXIS_TDATA,
  input S1_AXIS_TLAST,
  input S1_AXIS_TREADY_M,
  input S1_AXIS_TVALID,
  input [31:0] S2_AXIS_TDATA,
  input S2_AXIS_TLAST,
  input S2_AXIS_TREADY_M,
  input S2_AXIS_TVALID,
  input [31:0] S3_AXIS_TDATA,
  input S3_AXIS_TLAST,
  input S3_AXIS_TREADY_M,
  input S3_AXIS_TVALID,
  input SIM_HNICPIPE_TOP_SEL,
  input TRIGACKIN0_M,
  input TRIGACKOUT0,
  input TRIGIN0,
  input TRIGOUT0_M,
  input UBENABLE,
  input UBINTERRUPT_M,
  input [11:0] UBINTR,
  input UBIOLMBRST,
  input UBMBRST,
  input UBRXUART,
  input UBTXUART_M,
  input UNCORRECTERR_M
);

// define constants
  localparam MODULE_NAME = "HNICPIPE_QUAD";
  
  reg trig_attr;
// include dynamic registers - XILINX test only
`ifdef XIL_DR
  `include "HNICPIPE_QUAD_dr.v"
`else
  reg [31:0] HNICPIPE_HPIPE_CFG0_REG = HNICPIPE_HPIPE_CFG0;
  reg [31:0] HNICPIPE_HPIPE_CFG1_REG = HNICPIPE_HPIPE_CFG1;
  reg [31:0] HNICPIPE_HPIPE_CFG2_REG = HNICPIPE_HPIPE_CFG2;
  reg [31:0] HNICPIPE_HPIPE_CFG3_REG = HNICPIPE_HPIPE_CFG3;
  reg [31:0] HNICPIPE_HPIPE_CFG4_REG = HNICPIPE_HPIPE_CFG4;
  reg [31:0] HNICPIPE_HPIPE_CFG5_REG = HNICPIPE_HPIPE_CFG5;
  reg [31:0] HNICPIPE_HPIPE_CFG6_REG = HNICPIPE_HPIPE_CFG6;
  reg [31:0] HNICPIPE_OPTDLY_CFG0_REG = HNICPIPE_OPTDLY_CFG0;
  reg [31:0] HNICPIPE_OPTDLY_CFG1_REG = HNICPIPE_OPTDLY_CFG1;
  reg [31:0] HNICPIPE_PIPE_CFG_REG = HNICPIPE_PIPE_CFG;
  reg [31:0] HNICPIPE_RX_CLKMUX_SEL_REG = HNICPIPE_RX_CLKMUX_SEL;
  reg [31:0] HNICPIPE_RX_CLK_REMAP_CFG_REG = HNICPIPE_RX_CLK_REMAP_CFG;
  reg [31:0] HNICPIPE_RX_DATA_REMAP_CFG_REG = HNICPIPE_RX_DATA_REMAP_CFG;
  reg [31:0] HNICPIPE_TX_CLKMUX_SEL_REG = HNICPIPE_TX_CLKMUX_SEL;
  reg [31:0] HNICPIPE_TX_CLK_REMAP_CFG_REG = HNICPIPE_TX_CLK_REMAP_CFG;
  reg [31:0] HNICPIPE_TX_DATA_REMAP_CFG_REG = HNICPIPE_TX_DATA_REMAP_CFG;
`endif

`ifdef XIL_XECLIB
reg glblGSR = 1'b0;
`else
//tri0 glblGSR = glbl.GSR;
`endif

  wire APB3CLK_M_out;
  wire APB3PENABLE_M_out;
  wire APB3PREADY_out;
  wire APB3PRESETN_M_out;
  wire APB3PSEL_M_out;
  wire APB3PSLVERR_out;
  wire APB3PWRITE_M_out;
  wire AXISCLK_M_out;
  wire BGBYPASSB_M_out;
  wire BGMONITORENB_M_out;
  wire BGPDB_M_out;
  wire BGRCALOVRDENB_M_out;
  wire CH0_BSR_SERIAL_M_out;
  wire CH0_CDRFREQOS_M_out;
  wire CH0_CDRINCPCTRL_M_out;
  wire CH0_CDRSTEPDIR_M_out;
  wire CH0_CDRSTEPSQ_M_out;
  wire CH0_CDRSTEPSX_M_out;
  wire CH0_CLKRSVD0_M_out;
  wire CH0_CLKRSVD1_M_out;
  wire CH0_CSSDSTOPCLKB_M_out;
  wire CH0_DMONFIFORESET_M_out;
  wire CH0_DMONITORCLK_M_out;
  wire CH0_EDTUPDATEB_M_out;
  wire CH0_EYESCANDATAERROR_out;
  wire CH0_EYESCANRESET_M_out;
  wire CH0_EYESCANTRIGGER_M_out;
  wire CH0_GTRXRESET_M_out;
  wire CH0_GTTXRESET_M_out;
  wire CH0_ILORESETDONE_out;
  wire CH0_ILORESETMASK_M_out;
  wire CH0_ILORESET_M_out;
  wire CH0_RESETEXCEPTION_out;
  wire CH0_RXCDRHOLD_M_out;
  wire CH0_RXCDRLOCK_out;
  wire CH0_RXCDROVRDEN_M_out;
  wire CH0_RXCDRPHDONE_out;
  wire CH0_RXCDRRESET_M_out;
  wire CH0_RXDEBUGPCSOUT_out;
  wire CH0_RXLATCLK_M_out;
  wire CH0_RXPERST_M_out;
  wire CH0_RXPMARESETDONE_out;
  wire CH0_RXPOLARITY_M_out;
  wire CH0_RXPRBSCNTRESET_M_out;
  wire CH0_RXPRBSCNTSTOP_M_out;
  wire CH0_RXPRBSERR_out;
  wire CH0_RXPRBSLOCKED_out;
  wire CH0_RXPROGDIVRESETDONE_out;
  wire CH0_RXPROGDIVRESET_M_out;
  wire CH0_RXQPRBSEN_M_out;
  wire CH0_RXRESETDONE_out;
  wire CH0_RXRSV0_M_out;
  wire CH0_RXRSV1_M_out;
  wire CH0_RXRSV2_M_out;
  wire CH0_RXUSERRDY_M_out;
  wire CH0_RXUSRCLK_M_out;
  wire CH0_SCANCLKB_M_out;
  wire CH0_SCANCNTRLIN_M_out;
  wire CH0_SCANCNTRLOUT_out;
  wire CH0_SCANENB_M_out;
  wire CH0_SCANRSTB_M_out;
  wire CH0_TSTCLK0_M_out;
  wire CH0_TSTCLK1_M_out;
  wire CH0_TXDCCDONE_out;
  wire CH0_TXDEBUGPCSOUT_out;
  wire CH0_TXINHIBIT_M_out;
  wire CH0_TXLATCLK_M_out;
  wire CH0_TXPCSRESETMASK_M_out;
  wire CH0_TXPERST_M_out;
  wire CH0_TXPISOPD_M_out;
  wire CH0_TXPMARESETDONE_out;
  wire CH0_TXPOLARITY_M_out;
  wire CH0_TXPRBSFORCEERR_M_out;
  wire CH0_TXPROGDIVRESETDONE_out;
  wire CH0_TXPROGDIVRESET_M_out;
  wire CH0_TXQPRBSEN_M_out;
  wire CH0_TXRESETDONE_out;
  wire CH0_TXUSERRDY_M_out;
  wire CH0_TXUSRCLK_M_out;
  wire CH1_BSR_SERIAL_M_out;
  wire CH1_CDRFREQOS_M_out;
  wire CH1_CDRINCPCTRL_M_out;
  wire CH1_CDRSTEPDIR_M_out;
  wire CH1_CDRSTEPSQ_M_out;
  wire CH1_CDRSTEPSX_M_out;
  wire CH1_CLKRSVD0_M_out;
  wire CH1_CLKRSVD1_M_out;
  wire CH1_CSSDSTOPCLKB_M_out;
  wire CH1_DMONFIFORESET_M_out;
  wire CH1_DMONITORCLK_M_out;
  wire CH1_EDTUPDATEB_M_out;
  wire CH1_EYESCANDATAERROR_out;
  wire CH1_EYESCANRESET_M_out;
  wire CH1_EYESCANTRIGGER_M_out;
  wire CH1_GTRXRESET_M_out;
  wire CH1_GTTXRESET_M_out;
  wire CH1_ILORESETDONE_out;
  wire CH1_ILORESETMASK_M_out;
  wire CH1_ILORESET_M_out;
  wire CH1_RESETEXCEPTION_out;
  wire CH1_RXCDRHOLD_M_out;
  wire CH1_RXCDRLOCK_out;
  wire CH1_RXCDROVRDEN_M_out;
  wire CH1_RXCDRPHDONE_out;
  wire CH1_RXCDRRESET_M_out;
  wire CH1_RXDEBUGPCSOUT_out;
  wire CH1_RXLATCLK_M_out;
  wire CH1_RXPERST_M_out;
  wire CH1_RXPMARESETDONE_out;
  wire CH1_RXPOLARITY_M_out;
  wire CH1_RXPRBSCNTRESET_M_out;
  wire CH1_RXPRBSCNTSTOP_M_out;
  wire CH1_RXPRBSERR_out;
  wire CH1_RXPRBSLOCKED_out;
  wire CH1_RXPROGDIVRESETDONE_out;
  wire CH1_RXPROGDIVRESET_M_out;
  wire CH1_RXQPRBSEN_M_out;
  wire CH1_RXRESETDONE_out;
  wire CH1_RXRSV0_M_out;
  wire CH1_RXRSV1_M_out;
  wire CH1_RXRSV2_M_out;
  wire CH1_RXUSERRDY_M_out;
  wire CH1_RXUSRCLK_M_out;
  wire CH1_SCANCLKB_M_out;
  wire CH1_SCANCNTRLIN_M_out;
  wire CH1_SCANCNTRLOUT_out;
  wire CH1_SCANENB_M_out;
  wire CH1_SCANRSTB_M_out;
  wire CH1_TSTCLK0_M_out;
  wire CH1_TSTCLK1_M_out;
  wire CH1_TXDCCDONE_out;
  wire CH1_TXDEBUGPCSOUT_out;
  wire CH1_TXINHIBIT_M_out;
  wire CH1_TXLATCLK_M_out;
  wire CH1_TXPCSRESETMASK_M_out;
  wire CH1_TXPERST_M_out;
  wire CH1_TXPISOPD_M_out;
  wire CH1_TXPMARESETDONE_out;
  wire CH1_TXPOLARITY_M_out;
  wire CH1_TXPRBSFORCEERR_M_out;
  wire CH1_TXPROGDIVRESETDONE_out;
  wire CH1_TXPROGDIVRESET_M_out;
  wire CH1_TXQPRBSEN_M_out;
  wire CH1_TXRESETDONE_out;
  wire CH1_TXUSERRDY_M_out;
  wire CH1_TXUSRCLK_M_out;
  wire CH2_BSR_SERIAL_M_out;
  wire CH2_CDRFREQOS_M_out;
  wire CH2_CDRINCPCTRL_M_out;
  wire CH2_CDRSTEPDIR_M_out;
  wire CH2_CDRSTEPSQ_M_out;
  wire CH2_CDRSTEPSX_M_out;
  wire CH2_CLKRSVD0_M_out;
  wire CH2_CLKRSVD1_M_out;
  wire CH2_CSSDSTOPCLKB_M_out;
  wire CH2_DMONFIFORESET_M_out;
  wire CH2_DMONITORCLK_M_out;
  wire CH2_EDTUPDATEB_M_out;
  wire CH2_EYESCANDATAERROR_out;
  wire CH2_EYESCANRESET_M_out;
  wire CH2_EYESCANTRIGGER_M_out;
  wire CH2_GTRXRESET_M_out;
  wire CH2_GTTXRESET_M_out;
  wire CH2_ILORESETDONE_out;
  wire CH2_ILORESETMASK_M_out;
  wire CH2_ILORESET_M_out;
  wire CH2_RESETEXCEPTION_out;
  wire CH2_RXCDRHOLD_M_out;
  wire CH2_RXCDRLOCK_out;
  wire CH2_RXCDROVRDEN_M_out;
  wire CH2_RXCDRPHDONE_out;
  wire CH2_RXCDRRESET_M_out;
  wire CH2_RXDEBUGPCSOUT_out;
  wire CH2_RXLATCLK_M_out;
  wire CH2_RXPERST_M_out;
  wire CH2_RXPMARESETDONE_out;
  wire CH2_RXPOLARITY_M_out;
  wire CH2_RXPRBSCNTRESET_M_out;
  wire CH2_RXPRBSCNTSTOP_M_out;
  wire CH2_RXPRBSERR_out;
  wire CH2_RXPRBSLOCKED_out;
  wire CH2_RXPROGDIVRESETDONE_out;
  wire CH2_RXPROGDIVRESET_M_out;
  wire CH2_RXQPRBSEN_M_out;
  wire CH2_RXRESETDONE_out;
  wire CH2_RXRSV0_M_out;
  wire CH2_RXRSV1_M_out;
  wire CH2_RXRSV2_M_out;
  wire CH2_RXUSERRDY_M_out;
  wire CH2_RXUSRCLK_M_out;
  wire CH2_SCANCLKB_M_out;
  wire CH2_SCANCNTRLIN_M_out;
  wire CH2_SCANCNTRLOUT_out;
  wire CH2_SCANENB_M_out;
  wire CH2_SCANRSTB_M_out;
  wire CH2_TSTCLK0_M_out;
  wire CH2_TSTCLK1_M_out;
  wire CH2_TXDCCDONE_out;
  wire CH2_TXDEBUGPCSOUT_out;
  wire CH2_TXINHIBIT_M_out;
  wire CH2_TXLATCLK_M_out;
  wire CH2_TXPCSRESETMASK_M_out;
  wire CH2_TXPERST_M_out;
  wire CH2_TXPISOPD_M_out;
  wire CH2_TXPMARESETDONE_out;
  wire CH2_TXPOLARITY_M_out;
  wire CH2_TXPRBSFORCEERR_M_out;
  wire CH2_TXPROGDIVRESETDONE_out;
  wire CH2_TXPROGDIVRESET_M_out;
  wire CH2_TXQPRBSEN_M_out;
  wire CH2_TXRESETDONE_out;
  wire CH2_TXUSERRDY_M_out;
  wire CH2_TXUSRCLK_M_out;
  wire CH3_BSR_SERIAL_M_out;
  wire CH3_CDRFREQOS_M_out;
  wire CH3_CDRINCPCTRL_M_out;
  wire CH3_CDRSTEPDIR_M_out;
  wire CH3_CDRSTEPSQ_M_out;
  wire CH3_CDRSTEPSX_M_out;
  wire CH3_CLKRSVD0_M_out;
  wire CH3_CLKRSVD1_M_out;
  wire CH3_CSSDSTOPCLKB_M_out;
  wire CH3_DMONFIFORESET_M_out;
  wire CH3_DMONITORCLK_M_out;
  wire CH3_EDTUPDATEB_M_out;
  wire CH3_EYESCANDATAERROR_out;
  wire CH3_EYESCANRESET_M_out;
  wire CH3_EYESCANTRIGGER_M_out;
  wire CH3_GTRXRESET_M_out;
  wire CH3_GTTXRESET_M_out;
  wire CH3_ILORESETDONE_out;
  wire CH3_ILORESETMASK_M_out;
  wire CH3_ILORESET_M_out;
  wire CH3_RESETEXCEPTION_out;
  wire CH3_RXCDRHOLD_M_out;
  wire CH3_RXCDRLOCK_out;
  wire CH3_RXCDROVRDEN_M_out;
  wire CH3_RXCDRPHDONE_out;
  wire CH3_RXCDRRESET_M_out;
  wire CH3_RXDEBUGPCSOUT_out;
  wire CH3_RXLATCLK_M_out;
  wire CH3_RXPERST_M_out;
  wire CH3_RXPMARESETDONE_out;
  wire CH3_RXPOLARITY_M_out;
  wire CH3_RXPRBSCNTRESET_M_out;
  wire CH3_RXPRBSCNTSTOP_M_out;
  wire CH3_RXPRBSERR_out;
  wire CH3_RXPRBSLOCKED_out;
  wire CH3_RXPROGDIVRESETDONE_out;
  wire CH3_RXPROGDIVRESET_M_out;
  wire CH3_RXQPRBSEN_M_out;
  wire CH3_RXRESETDONE_out;
  wire CH3_RXRSV0_M_out;
  wire CH3_RXRSV1_M_out;
  wire CH3_RXRSV2_M_out;
  wire CH3_RXUSERRDY_M_out;
  wire CH3_RXUSRCLK_M_out;
  wire CH3_SCANCLKB_M_out;
  wire CH3_SCANCNTRLIN_M_out;
  wire CH3_SCANCNTRLOUT_out;
  wire CH3_SCANENB_M_out;
  wire CH3_SCANRSTB_M_out;
  wire CH3_TSTCLK0_M_out;
  wire CH3_TSTCLK1_M_out;
  wire CH3_TXDCCDONE_out;
  wire CH3_TXDEBUGPCSOUT_out;
  wire CH3_TXINHIBIT_M_out;
  wire CH3_TXLATCLK_M_out;
  wire CH3_TXPCSRESETMASK_M_out;
  wire CH3_TXPERST_M_out;
  wire CH3_TXPISOPD_M_out;
  wire CH3_TXPMARESETDONE_out;
  wire CH3_TXPOLARITY_M_out;
  wire CH3_TXPRBSFORCEERR_M_out;
  wire CH3_TXPROGDIVRESETDONE_out;
  wire CH3_TXPROGDIVRESET_M_out;
  wire CH3_TXQPRBSEN_M_out;
  wire CH3_TXRESETDONE_out;
  wire CH3_TXUSERRDY_M_out;
  wire CH3_TXUSRCLK_M_out;
  wire COESTATUSDEBUG_M_out;
  wire CORRECTERR_out;
  wire CSSDSTOPCLKB_M_out;
  wire DEBUGTRACECLK_M_out;
  wire DEBUGTRACEREADY_M_out;
  wire DEBUGTRACETVALID_out;
  wire EDTUPDATEB_M_out;
  wire GTPOWERGOOD_out;
  wire HNICPIPE_FEC_ALIGNED_0_M_out;
  wire HNICPIPE_FEC_ALIGNED_1_M_out;
  wire HNICPIPE_FEC_ALIGNED_2_M_out;
  wire HNICPIPE_FEC_ALIGNED_3_M_out;
  wire HNICPIPE_MAC_PHY_STATUS_OK_0_M_out;
  wire HNICPIPE_MAC_PHY_STATUS_OK_1_M_out;
  wire HNICPIPE_MAC_PHY_STATUS_OK_2_M_out;
  wire HNICPIPE_MAC_PHY_STATUS_OK_3_M_out;
  wire HNICPIPE_RSFEC_CORRECTED_CWB_INC_0_M_out;
  wire HNICPIPE_RSFEC_CORRECTED_CWB_INC_1_M_out;
  wire HNICPIPE_RSFEC_CORRECTED_CWB_INC_2_M_out;
  wire HNICPIPE_RSFEC_CORRECTED_CWB_INC_3_M_out;
  wire HNICPIPE_RSFEC_CORRECTED_CW_INC_0_M_out;
  wire HNICPIPE_RSFEC_CORRECTED_CW_INC_1_M_out;
  wire HNICPIPE_RSFEC_CORRECTED_CW_INC_2_M_out;
  wire HNICPIPE_RSFEC_CORRECTED_CW_INC_3_M_out;
  wire HNICPIPE_RSFEC_CWB_INC_0_M_out;
  wire HNICPIPE_RSFEC_CWB_INC_1_M_out;
  wire HNICPIPE_RSFEC_CWB_INC_2_M_out;
  wire HNICPIPE_RSFEC_CWB_INC_3_M_out;
  wire HNICPIPE_RSFEC_CW_INC_0_M_out;
  wire HNICPIPE_RSFEC_CW_INC_1_M_out;
  wire HNICPIPE_RSFEC_CW_INC_2_M_out;
  wire HNICPIPE_RSFEC_CW_INC_3_M_out;
  wire HNICPIPE_RSFEC_UNCORRECTED_CWB_INC_0_M_out;
  wire HNICPIPE_RSFEC_UNCORRECTED_CWB_INC_1_M_out;
  wire HNICPIPE_RSFEC_UNCORRECTED_CWB_INC_2_M_out;
  wire HNICPIPE_RSFEC_UNCORRECTED_CWB_INC_3_M_out;
  wire HNICPIPE_RSFEC_UNCORRECTED_CW_INC_0_M_out;
  wire HNICPIPE_RSFEC_UNCORRECTED_CW_INC_1_M_out;
  wire HNICPIPE_RSFEC_UNCORRECTED_CW_INC_2_M_out;
  wire HNICPIPE_RSFEC_UNCORRECTED_CW_INC_3_M_out;
  wire HNICPIPE_UBLAZE_ACK_0_out;
  wire HNICPIPE_UBLAZE_ACK_1_out;
  wire HNICPIPE_UBLAZE_DEN_0_M_out;
  wire HNICPIPE_UBLAZE_DEN_1_M_out;
  wire HSCLK0_LCPLLFBCLKLOST_out;
  wire HSCLK0_LCPLLGTGREFCLK_M_out;
  wire HSCLK0_LCPLLLOCK_out;
  wire HSCLK0_LCPLLPD_M_out;
  wire HSCLK0_LCPLLREFCLKLOST_out;
  wire HSCLK0_LCPLLREFCLKMONITOR_out;
  wire HSCLK0_LCPLLRESETBYPASSMODE_M_out;
  wire HSCLK0_LCPLLRESET_M_out;
  wire HSCLK0_LCPLLSDMTOGGLE_M_out;
  wire HSCLK1_LCPLLFBCLKLOST_out;
  wire HSCLK1_LCPLLGTGREFCLK_M_out;
  wire HSCLK1_LCPLLLOCK_out;
  wire HSCLK1_LCPLLPD_M_out;
  wire HSCLK1_LCPLLREFCLKLOST_out;
  wire HSCLK1_LCPLLREFCLKMONITOR_out;
  wire HSCLK1_LCPLLRESETBYPASSMODE_M_out;
  wire HSCLK1_LCPLLRESET_M_out;
  wire HSCLK1_LCPLLSDMTOGGLE_M_out;
  wire M0_AXIS_TLAST_out;
  wire M0_AXIS_TREADY_M_out;
  wire M0_AXIS_TVALID_out;
  wire M1_AXIS_TLAST_out;
  wire M1_AXIS_TREADY_M_out;
  wire M1_AXIS_TVALID_out;
  wire M2_AXIS_TLAST_out;
  wire M2_AXIS_TREADY_M_out;
  wire M2_AXIS_TVALID_out;
  wire M3_AXIS_TLAST_out;
  wire M3_AXIS_TREADY_M_out;
  wire M3_AXIS_TVALID_out;
  wire RCALCMP_out;
  wire REFCLK0_CLKTESTSIG_M_out;
  wire REFCLK0_GTREFCLKPD_M_out;
  wire REFCLK1_CLKTESTSIG_M_out;
  wire REFCLK1_GTREFCLKPD_M_out;
  wire S0_AXIS_TLAST_M_out;
  wire S0_AXIS_TREADY_out;
  wire S0_AXIS_TVALID_M_out;
  wire S1_AXIS_TLAST_M_out;
  wire S1_AXIS_TREADY_out;
  wire S1_AXIS_TVALID_M_out;
  wire S2_AXIS_TLAST_M_out;
  wire S2_AXIS_TREADY_out;
  wire S2_AXIS_TVALID_M_out;
  wire S3_AXIS_TLAST_M_out;
  wire S3_AXIS_TREADY_out;
  wire S3_AXIS_TVALID_M_out;
  wire SCANCLKB_M_out;
  wire SCANCNTRLIN_M_out;
  wire SCANCNTRLOUT_out;
  wire SCANENB_M_out;
  wire SCANRSTB_M_out;
  wire TRIGACKIN0_out;
  wire TRIGACKOUT0_M_out;
  wire TRIGIN0_M_out;
  wire TRIGOUT0_out;
  wire UBENABLE_M_out;
  wire UBINTERRUPT_out;
  wire UBIOLMBRST_M_out;
  wire UBMBRST_M_out;
  wire UBRXUART_M_out;
  wire UBTXUART_out;
  wire UNCORRECTERR_out;
  wire [11:0] HNICPIPE_RSFEC_MAPPING_0_M_out;
  wire [11:0] HNICPIPE_RSFEC_MAPPING_1_M_out;
  wire [11:0] HNICPIPE_RSFEC_MAPPING_2_M_out;
  wire [11:0] HNICPIPE_RSFEC_MAPPING_3_M_out;
  wire [11:0] UBINTR_M_out;
  wire [15:0] APB3PADDR_M_out;
  wire [15:0] CH0_GTRSVD_M_out;
  wire [15:0] CH0_PCSRSVDIN_M_out;
  wire [15:0] CH0_PCSRSVDOUT_out;
  wire [15:0] CH0_PINRSVDAS_out;
  wire [15:0] CH1_GTRSVD_M_out;
  wire [15:0] CH1_PCSRSVDIN_M_out;
  wire [15:0] CH1_PCSRSVDOUT_out;
  wire [15:0] CH1_PINRSVDAS_out;
  wire [15:0] CH2_GTRSVD_M_out;
  wire [15:0] CH2_PCSRSVDIN_M_out;
  wire [15:0] CH2_PCSRSVDOUT_out;
  wire [15:0] CH2_PINRSVDAS_out;
  wire [15:0] CH3_GTRSVD_M_out;
  wire [15:0] CH3_PCSRSVDIN_M_out;
  wire [15:0] CH3_PCSRSVDOUT_out;
  wire [15:0] CH3_PINRSVDAS_out;
  wire [15:0] DEBUGTRACETDATA_out;
  wire [15:0] HNICPIPE_ANLT_HNICX_STATUS_0_out;
  wire [15:0] HNICPIPE_ANLT_HNICX_STATUS_1_out;
  wire [15:0] HNICPIPE_ANLT_HNICX_STATUS_2_out;
  wire [15:0] HNICPIPE_ANLT_HNICX_STATUS_3_out;
  wire [1:0] CH0_REFDEBUGOUT_out;
  wire [1:0] CH0_RXPD_M_out;
  wire [1:0] CH0_RXRESETMODE_M_out;
  wire [1:0] CH0_TXPD_M_out;
  wire [1:0] CH0_TXPMARESETMASK_M_out;
  wire [1:0] CH0_TXRESETMODE_M_out;
  wire [1:0] CH1_REFDEBUGOUT_out;
  wire [1:0] CH1_RXPD_M_out;
  wire [1:0] CH1_RXRESETMODE_M_out;
  wire [1:0] CH1_TXPD_M_out;
  wire [1:0] CH1_TXPMARESETMASK_M_out;
  wire [1:0] CH1_TXRESETMODE_M_out;
  wire [1:0] CH2_REFDEBUGOUT_out;
  wire [1:0] CH2_RXPD_M_out;
  wire [1:0] CH2_RXRESETMODE_M_out;
  wire [1:0] CH2_TXPD_M_out;
  wire [1:0] CH2_TXPMARESETMASK_M_out;
  wire [1:0] CH2_TXRESETMODE_M_out;
  wire [1:0] CH3_REFDEBUGOUT_out;
  wire [1:0] CH3_RXPD_M_out;
  wire [1:0] CH3_RXRESETMODE_M_out;
  wire [1:0] CH3_TXPD_M_out;
  wire [1:0] CH3_TXPMARESETMASK_M_out;
  wire [1:0] CH3_TXRESETMODE_M_out;
  wire [1:0] HSCLK0_LCPLLRESETMASK_M_out;
  wire [1:0] HSCLK1_LCPLLRESETMASK_M_out;
  wire [255:0] CH0_RXDATA_out;
  wire [255:0] CH0_TXDATA_M_out;
  wire [255:0] CH1_RXDATA_out;
  wire [255:0] CH1_TXDATA_M_out;
  wire [255:0] CH2_RXDATA_out;
  wire [255:0] CH2_TXDATA_M_out;
  wire [255:0] CH3_RXDATA_out;
  wire [255:0] CH3_TXDATA_M_out;
  wire [25:0] HSCLK0_LCPLLSDMDATA_M_out;
  wire [25:0] HSCLK1_LCPLLSDMDATA_M_out;
  wire [2:0] CH0_LOOPBACK_M_out;
  wire [2:0] CH0_RXBUFSTATUS_out;
  wire [2:0] CH0_RXPCSRESETMASK_M_out;
  wire [2:0] CH0_TXBUFSTATUS_out;
  wire [2:0] CH1_LOOPBACK_M_out;
  wire [2:0] CH1_RXBUFSTATUS_out;
  wire [2:0] CH1_RXPCSRESETMASK_M_out;
  wire [2:0] CH1_TXBUFSTATUS_out;
  wire [2:0] CH2_LOOPBACK_M_out;
  wire [2:0] CH2_RXBUFSTATUS_out;
  wire [2:0] CH2_RXPCSRESETMASK_M_out;
  wire [2:0] CH2_TXBUFSTATUS_out;
  wire [2:0] CH3_LOOPBACK_M_out;
  wire [2:0] CH3_RXBUFSTATUS_out;
  wire [2:0] CH3_RXPCSRESETMASK_M_out;
  wire [2:0] CH3_TXBUFSTATUS_out;
  wire [2:0] HSCLK0_LCPLLREFCLKSEL_M_out;
  wire [2:0] HSCLK1_LCPLLREFCLKSEL_M_out;
  wire [31:0] APB3PRDATA_out;
  wire [31:0] APB3PWDATA_M_out;
  wire [31:0] CH0_DMONITOROUT_out;
  wire [31:0] CH1_DMONITOROUT_out;
  wire [31:0] CH2_DMONITOROUT_out;
  wire [31:0] CH3_DMONITOROUT_out;
  wire [31:0] GPI_M_out;
  wire [31:0] GPO_out;
  wire [31:0] M0_AXIS_TDATA_out;
  wire [31:0] M1_AXIS_TDATA_out;
  wire [31:0] M2_AXIS_TDATA_out;
  wire [31:0] M3_AXIS_TDATA_out;
  wire [31:0] S0_AXIS_TDATA_M_out;
  wire [31:0] S1_AXIS_TDATA_M_out;
  wire [31:0] S2_AXIS_TDATA_M_out;
  wire [31:0] S3_AXIS_TDATA_M_out;
  wire [3:0] CH0_RXPRBSSEL_M_out;
  wire [3:0] CH0_SCANIN_M_out;
  wire [3:0] CH0_SCANOUT_out;
  wire [3:0] CH0_TXPRBSSEL_M_out;
  wire [3:0] CH0_TXRSV1_M_out;
  wire [3:0] CH1_RXPRBSSEL_M_out;
  wire [3:0] CH1_SCANIN_M_out;
  wire [3:0] CH1_SCANOUT_out;
  wire [3:0] CH1_TXPRBSSEL_M_out;
  wire [3:0] CH1_TXRSV1_M_out;
  wire [3:0] CH2_RXPRBSSEL_M_out;
  wire [3:0] CH2_SCANIN_M_out;
  wire [3:0] CH2_SCANOUT_out;
  wire [3:0] CH2_TXPRBSSEL_M_out;
  wire [3:0] CH2_TXRSV1_M_out;
  wire [3:0] CH3_RXPRBSSEL_M_out;
  wire [3:0] CH3_SCANIN_M_out;
  wire [3:0] CH3_SCANOUT_out;
  wire [3:0] CH3_TXPRBSSEL_M_out;
  wire [3:0] CH3_TXRSV1_M_out;
  wire [3:0] HNICPIPE_FEC_LANE_LOCK_0_M_out;
  wire [3:0] HNICPIPE_FEC_LANE_LOCK_1_M_out;
  wire [3:0] HNICPIPE_FEC_LANE_LOCK_2_M_out;
  wire [3:0] HNICPIPE_FEC_LANE_LOCK_3_M_out;
  wire [3:0] HNICPIPE_GT_TX_SERDES_CLK_GOOD_OUT_out;
  wire [3:0] HNICPIPE_RXUSRCLK_BOT2TOP_OUT_out;
  wire [3:0] HNICPIPE_RX_RST_BOT2TOP_OUT_out;
  wire [3:0] HNICPIPE_TXUSRCLK_BOT2TOP_OUT_out;
  wire [3:0] HNICPIPE_TX_RST_BOT2TOP_OUT_out;
  wire [3:0] HNICPIPE_TX_SERDES_CLK_out;
  wire [3:0] MSTRXRESETDONE_out;
  wire [3:0] MSTRXRESET_M_out;
  wire [3:0] MSTTXRESETDONE_out;
  wire [3:0] MSTTXRESET_M_out;
  wire [3:0] SCANIN_M_out;
  wire [3:0] SCANOUT_out;
  wire [4:0] BGRCALOVRD_M_out;
  wire [4:0] CH0_TXRSV0_M_out;
  wire [4:0] CH1_TXRSV0_M_out;
  wire [4:0] CH2_TXRSV0_M_out;
  wire [4:0] CH3_TXRSV0_M_out;
  wire [4:0] HNICPIPE_RSFEC_CWA_ERR_CNT_INC_0_M_out;
  wire [4:0] HNICPIPE_RSFEC_CWA_ERR_CNT_INC_1_M_out;
  wire [4:0] HNICPIPE_RSFEC_CWA_ERR_CNT_INC_2_M_out;
  wire [4:0] HNICPIPE_RSFEC_CWA_ERR_CNT_INC_3_M_out;
  wire [4:0] HNICPIPE_RSFEC_CWB_ERR_CNT_INC_0_M_out;
  wire [4:0] HNICPIPE_RSFEC_CWB_ERR_CNT_INC_1_M_out;
  wire [4:0] HNICPIPE_RSFEC_CWB_ERR_CNT_INC_2_M_out;
  wire [4:0] HNICPIPE_RSFEC_CWB_ERR_CNT_INC_3_M_out;
  wire [4:0] HNICPIPE_RSFEC_L0_ERR_CNT_INC_0_M_out;
  wire [4:0] HNICPIPE_RSFEC_L0_ERR_CNT_INC_1_M_out;
  wire [4:0] HNICPIPE_RSFEC_L0_ERR_CNT_INC_2_M_out;
  wire [4:0] HNICPIPE_RSFEC_L0_ERR_CNT_INC_3_M_out;
  wire [4:0] HNICPIPE_RSFEC_L1_ERR_CNT_INC_0_M_out;
  wire [4:0] HNICPIPE_RSFEC_L1_ERR_CNT_INC_1_M_out;
  wire [4:0] HNICPIPE_RSFEC_L1_ERR_CNT_INC_2_M_out;
  wire [4:0] HNICPIPE_RSFEC_L1_ERR_CNT_INC_3_M_out;
  wire [4:0] HNICPIPE_RSFEC_L2_ERR_CNT_INC_0_M_out;
  wire [4:0] HNICPIPE_RSFEC_L2_ERR_CNT_INC_1_M_out;
  wire [4:0] HNICPIPE_RSFEC_L2_ERR_CNT_INC_2_M_out;
  wire [4:0] HNICPIPE_RSFEC_L2_ERR_CNT_INC_3_M_out;
  wire [4:0] HNICPIPE_RSFEC_L3_ERR_CNT_INC_0_M_out;
  wire [4:0] HNICPIPE_RSFEC_L3_ERR_CNT_INC_1_M_out;
  wire [4:0] HNICPIPE_RSFEC_L3_ERR_CNT_INC_2_M_out;
  wire [4:0] HNICPIPE_RSFEC_L3_ERR_CNT_INC_3_M_out;
  wire [4:0] RCALOUT_out;
  wire [59:0] HNICPIPE_UBLAZE_DATA_0_M_out;
  wire [59:0] HNICPIPE_UBLAZE_DATA_1_M_out;
  wire [5:0] CH0_TXPOSTCURSOR_M_out;
  wire [5:0] CH0_TXPRECURSOR2_M_out;
  wire [5:0] CH0_TXPRECURSOR3_M_out;
  wire [5:0] CH0_TXPRECURSOR_M_out;
  wire [5:0] CH1_TXPOSTCURSOR_M_out;
  wire [5:0] CH1_TXPRECURSOR2_M_out;
  wire [5:0] CH1_TXPRECURSOR3_M_out;
  wire [5:0] CH1_TXPRECURSOR_M_out;
  wire [5:0] CH2_TXPOSTCURSOR_M_out;
  wire [5:0] CH2_TXPRECURSOR2_M_out;
  wire [5:0] CH2_TXPRECURSOR3_M_out;
  wire [5:0] CH2_TXPRECURSOR_M_out;
  wire [5:0] CH3_TXPOSTCURSOR_M_out;
  wire [5:0] CH3_TXPRECURSOR2_M_out;
  wire [5:0] CH3_TXPRECURSOR3_M_out;
  wire [5:0] CH3_TXPRECURSOR_M_out;
  wire [6:0] CH0_TXMAINCURSOR_M_out;
  wire [6:0] CH1_TXMAINCURSOR_M_out;
  wire [6:0] CH2_TXMAINCURSOR_M_out;
  wire [6:0] CH3_TXMAINCURSOR_M_out;
  wire [79:0] HNICPIPE_HNICMAC_RXDATA0_out;
  wire [79:0] HNICPIPE_HNICMAC_RXDATA1_out;
  wire [79:0] HNICPIPE_HNICMAC_RXDATA2_out;
  wire [79:0] HNICPIPE_HNICMAC_RXDATA3_out;
  wire [79:0] HNICPIPE_HNICMAC_RXDATA4_out;
  wire [79:0] HNICPIPE_HNICMAC_RXDATA5_out;
  wire [79:0] HNICPIPE_HNICMAC_RXDATA6_out;
  wire [79:0] HNICPIPE_HNICMAC_RXDATA7_out;
  wire [79:0] HNICPIPE_TXDATA_TOP2BOT0_out;
  wire [79:0] HNICPIPE_TXDATA_TOP2BOT1_out;
  wire [79:0] HNICPIPE_TXDATA_TOP2BOT2_out;
  wire [79:0] HNICPIPE_TXDATA_TOP2BOT3_out;
  wire [7:0] CH0_RXPMARESETMASK_M_out;
  wire [7:0] CH0_RXRATE_M_out;
  wire [7:0] CH0_TXRATE_M_out;
  wire [7:0] CH1_RXPMARESETMASK_M_out;
  wire [7:0] CH1_RXRATE_M_out;
  wire [7:0] CH1_TXRATE_M_out;
  wire [7:0] CH2_RXPMARESETMASK_M_out;
  wire [7:0] CH2_RXRATE_M_out;
  wire [7:0] CH2_TXRATE_M_out;
  wire [7:0] CH3_RXPMARESETMASK_M_out;
  wire [7:0] CH3_RXRATE_M_out;
  wire [7:0] CH3_TXRATE_M_out;
  wire [7:0] CTRLRSVDIN_M_out;
  wire [7:0] CTRLRSVDOUT_out;
  wire [7:0] HNICPIPE_GT_RX_SERDES_CLK_GOOD_OUT_out;
  wire [7:0] HNICPIPE_RX_SERDES_CLK_out;
  wire [7:0] HSCLK0_LCPLLFBDIV_M_out;
  wire [7:0] HSCLK1_LCPLLFBDIV_M_out;

  wire APB3CLK_in;
  wire APB3PENABLE_in;
  wire APB3PREADY_M_in;
  wire APB3PRESETN_in;
  wire APB3PSEL_in;
  wire APB3PSLVERR_M_in;
  wire APB3PWRITE_in;
  wire AXISCLK_in;
  wire BGBYPASSB_in;
  wire BGMONITORENB_in;
  wire BGPDB_in;
  wire BGRCALOVRDENB_in;
  wire CH0_BSR_SERIAL_in;
  wire CH0_CDRFREQOS_in;
  wire CH0_CDRINCPCTRL_in;
  wire CH0_CDRSTEPDIR_in;
  wire CH0_CDRSTEPSQ_in;
  wire CH0_CDRSTEPSX_in;
  wire CH0_CLKRSVD1_in;
  wire CH0_CSSDSTOPCLKB_in;
  wire CH0_DMONFIFORESET_in;
  wire CH0_DMONITORCLK_in;
  wire CH0_EDTUPDATEB_in;
  wire CH0_EYESCANDATAERROR_M_in;
  wire CH0_EYESCANRESET_in;
  wire CH0_EYESCANTRIGGER_in;
  wire CH0_GTRXRESET_in;
  wire CH0_GTTXRESET_in;
  wire CH0_ILORESETDONE_M_in;
  wire CH0_ILORESETMASK_in;
  wire CH0_ILORESET_in;
  wire CH0_RESETEXCEPTION_M_in;
  wire CH0_RXCDRHOLD_in;
  wire CH0_RXCDRLOCK_M_in;
  wire CH0_RXCDROVRDEN_in;
  wire CH0_RXCDRPHDONE_M_in;
  wire CH0_RXCDRRESET_in;
  wire CH0_RXDEBUGPCSOUT_M_in;
  wire CH0_RXLATCLK_in;
  wire CH0_RXPERST_in;
  wire CH0_RXPMARESETDONE_M_in;
  wire CH0_RXPOLARITY_in;
  wire CH0_RXPRBSCNTRESET_in;
  wire CH0_RXPRBSCNTSTOP_in;
  wire CH0_RXPRBSERR_M_in;
  wire CH0_RXPRBSLOCKED_M_in;
  wire CH0_RXPROGDIVRESETDONE_M_in;
  wire CH0_RXPROGDIVRESET_in;
  wire CH0_RXQPRBSEN_in;
  wire CH0_RXRESETDONE_M_in;
  wire CH0_RXRSV0_in;
  wire CH0_RXRSV1_in;
  wire CH0_RXRSV2_in;
  wire CH0_RXUSERRDY_in;
  wire CH0_RXUSRCLK_in;
  wire CH0_SCANCLKB_in;
  wire CH0_SCANCNTRLIN_in;
  wire CH0_SCANCNTRLOUT_M_in;
  wire CH0_SCANENB_in;
  wire CH0_SCANRSTB_in;
  wire CH0_TSTCLK0_in;
  wire CH0_TSTCLK1_in;
  wire CH0_TXDCCDONE_M_in;
  wire CH0_TXDEBUGPCSOUT_M_in;
  wire CH0_TXINHIBIT_in;
  wire CH0_TXLATCLK_in;
  wire CH0_TXPCSRESETMASK_in;
  wire CH0_TXPERST_in;
  wire CH0_TXPISOPD_in;
  wire CH0_TXPMARESETDONE_M_in;
  wire CH0_TXPOLARITY_in;
  wire CH0_TXPRBSFORCEERR_in;
  wire CH0_TXPROGDIVRESETDONE_M_in;
  wire CH0_TXPROGDIVRESET_in;
  wire CH0_TXQPRBSEN_in;
  wire CH0_TXRESETDONE_M_in;
  wire CH0_TXUSERRDY_in;
  wire CH0_TXUSRCLK_in;
  wire CH1_BSR_SERIAL_in;
  wire CH1_CDRFREQOS_in;
  wire CH1_CDRINCPCTRL_in;
  wire CH1_CDRSTEPDIR_in;
  wire CH1_CDRSTEPSQ_in;
  wire CH1_CDRSTEPSX_in;
  wire CH1_CLKRSVD0_in;
  wire CH1_CLKRSVD1_in;
  wire CH1_CSSDSTOPCLKB_in;
  wire CH1_DMONFIFORESET_in;
  wire CH1_DMONITORCLK_in;
  wire CH1_EDTUPDATEB_in;
  wire CH1_EYESCANDATAERROR_M_in;
  wire CH1_EYESCANRESET_in;
  wire CH1_EYESCANTRIGGER_in;
  wire CH1_GTRXRESET_in;
  wire CH1_GTTXRESET_in;
  wire CH1_ILORESETDONE_M_in;
  wire CH1_ILORESETMASK_in;
  wire CH1_ILORESET_in;
  wire CH1_RESETEXCEPTION_M_in;
  wire CH1_RXCDRHOLD_in;
  wire CH1_RXCDRLOCK_M_in;
  wire CH1_RXCDROVRDEN_in;
  wire CH1_RXCDRPHDONE_M_in;
  wire CH1_RXCDRRESET_in;
  wire CH1_RXDEBUGPCSOUT_M_in;
  wire CH1_RXLATCLK_in;
  wire CH1_RXPERST_in;
  wire CH1_RXPMARESETDONE_M_in;
  wire CH1_RXPOLARITY_in;
  wire CH1_RXPRBSCNTRESET_in;
  wire CH1_RXPRBSCNTSTOP_in;
  wire CH1_RXPRBSERR_M_in;
  wire CH1_RXPRBSLOCKED_M_in;
  wire CH1_RXPROGDIVRESETDONE_M_in;
  wire CH1_RXPROGDIVRESET_in;
  wire CH1_RXQPRBSEN_in;
  wire CH1_RXRESETDONE_M_in;
  wire CH1_RXRSV0_in;
  wire CH1_RXRSV1_in;
  wire CH1_RXRSV2_in;
  wire CH1_RXUSERRDY_in;
  wire CH1_RXUSRCLK_in;
  wire CH1_SCANCLKB_in;
  wire CH1_SCANCNTRLIN_in;
  wire CH1_SCANCNTRLOUT_M_in;
  wire CH1_SCANENB_in;
  wire CH1_SCANRSTB_in;
  wire CH1_TSTCLK0_in;
  wire CH1_TSTCLK1_in;
  wire CH1_TXDCCDONE_M_in;
  wire CH1_TXDEBUGPCSOUT_M_in;
  wire CH1_TXINHIBIT_in;
  wire CH1_TXLATCLK_in;
  wire CH1_TXPCSRESETMASK_in;
  wire CH1_TXPERST_in;
  wire CH1_TXPISOPD_in;
  wire CH1_TXPMARESETDONE_M_in;
  wire CH1_TXPOLARITY_in;
  wire CH1_TXPRBSFORCEERR_in;
  wire CH1_TXPROGDIVRESETDONE_M_in;
  wire CH1_TXPROGDIVRESET_in;
  wire CH1_TXQPRBSEN_in;
  wire CH1_TXRESETDONE_M_in;
  wire CH1_TXUSERRDY_in;
  wire CH1_TXUSRCLK_in;
  wire CH2_BSR_SERIAL_in;
  wire CH2_CDRFREQOS_in;
  wire CH2_CDRINCPCTRL_in;
  wire CH2_CDRSTEPDIR_in;
  wire CH2_CDRSTEPSQ_in;
  wire CH2_CDRSTEPSX_in;
  wire CH2_CLKRSVD0_in;
  wire CH2_CLKRSVD1_in;
  wire CH2_CSSDSTOPCLKB_in;
  wire CH2_DMONFIFORESET_in;
  wire CH2_DMONITORCLK_in;
  wire CH2_EDTUPDATEB_in;
  wire CH2_EYESCANDATAERROR_M_in;
  wire CH2_EYESCANRESET_in;
  wire CH2_EYESCANTRIGGER_in;
  wire CH2_GTRXRESET_in;
  wire CH2_GTTXRESET_in;
  wire CH2_ILORESETDONE_M_in;
  wire CH2_ILORESETMASK_in;
  wire CH2_ILORESET_in;
  wire CH2_RESETEXCEPTION_M_in;
  wire CH2_RXCDRHOLD_in;
  wire CH2_RXCDRLOCK_M_in;
  wire CH2_RXCDROVRDEN_in;
  wire CH2_RXCDRPHDONE_M_in;
  wire CH2_RXCDRRESET_in;
  wire CH2_RXDEBUGPCSOUT_M_in;
  wire CH2_RXLATCLK_in;
  wire CH2_RXPERST_in;
  wire CH2_RXPMARESETDONE_M_in;
  wire CH2_RXPOLARITY_in;
  wire CH2_RXPRBSCNTRESET_in;
  wire CH2_RXPRBSCNTSTOP_in;
  wire CH2_RXPRBSERR_M_in;
  wire CH2_RXPRBSLOCKED_M_in;
  wire CH2_RXPROGDIVRESETDONE_M_in;
  wire CH2_RXPROGDIVRESET_in;
  wire CH2_RXQPRBSEN_in;
  wire CH2_RXRESETDONE_M_in;
  wire CH2_RXRSV0_in;
  wire CH2_RXRSV1_in;
  wire CH2_RXRSV2_in;
  wire CH2_RXUSERRDY_in;
  wire CH2_RXUSRCLK_in;
  wire CH2_SCANCLKB_in;
  wire CH2_SCANCNTRLIN_in;
  wire CH2_SCANCNTRLOUT_M_in;
  wire CH2_SCANENB_in;
  wire CH2_SCANRSTB_in;
  wire CH2_TSTCLK0_in;
  wire CH2_TSTCLK1_in;
  wire CH2_TXDCCDONE_M_in;
  wire CH2_TXDEBUGPCSOUT_M_in;
  wire CH2_TXINHIBIT_in;
  wire CH2_TXLATCLK_in;
  wire CH2_TXPCSRESETMASK_in;
  wire CH2_TXPERST_in;
  wire CH2_TXPISOPD_in;
  wire CH2_TXPMARESETDONE_M_in;
  wire CH2_TXPOLARITY_in;
  wire CH2_TXPRBSFORCEERR_in;
  wire CH2_TXPROGDIVRESETDONE_M_in;
  wire CH2_TXPROGDIVRESET_in;
  wire CH2_TXQPRBSEN_in;
  wire CH2_TXRESETDONE_M_in;
  wire CH2_TXUSERRDY_in;
  wire CH2_TXUSRCLK_in;
  wire CH3_BSR_SERIAL_in;
  wire CH3_CDRFREQOS_in;
  wire CH3_CDRINCPCTRL_in;
  wire CH3_CDRSTEPDIR_in;
  wire CH3_CDRSTEPSQ_in;
  wire CH3_CDRSTEPSX_in;
  wire CH3_CLKRSVD0_in;
  wire CH3_CLKRSVD1_in;
  wire CH3_CSSDSTOPCLKB_in;
  wire CH3_DMONFIFORESET_in;
  wire CH3_DMONITORCLK_in;
  wire CH3_EDTUPDATEB_in;
  wire CH3_EYESCANDATAERROR_M_in;
  wire CH3_EYESCANRESET_in;
  wire CH3_EYESCANTRIGGER_in;
  wire CH3_GTRXRESET_in;
  wire CH3_GTTXRESET_in;
  wire CH3_ILORESETDONE_M_in;
  wire CH3_ILORESETMASK_in;
  wire CH3_ILORESET_in;
  wire CH3_RESETEXCEPTION_M_in;
  wire CH3_RXCDRHOLD_in;
  wire CH3_RXCDRLOCK_M_in;
  wire CH3_RXCDROVRDEN_in;
  wire CH3_RXCDRPHDONE_M_in;
  wire CH3_RXCDRRESET_in;
  wire CH3_RXDEBUGPCSOUT_M_in;
  wire CH3_RXLATCLK_in;
  wire CH3_RXPERST_in;
  wire CH3_RXPMARESETDONE_M_in;
  wire CH3_RXPOLARITY_in;
  wire CH3_RXPRBSCNTRESET_in;
  wire CH3_RXPRBSCNTSTOP_in;
  wire CH3_RXPRBSERR_M_in;
  wire CH3_RXPRBSLOCKED_M_in;
  wire CH3_RXPROGDIVRESETDONE_M_in;
  wire CH3_RXPROGDIVRESET_in;
  wire CH3_RXQPRBSEN_in;
  wire CH3_RXRESETDONE_M_in;
  wire CH3_RXRSV0_in;
  wire CH3_RXRSV1_in;
  wire CH3_RXRSV2_in;
  wire CH3_RXUSERRDY_in;
  wire CH3_RXUSRCLK_in;
  wire CH3_SCANCLKB_in;
  wire CH3_SCANCNTRLIN_in;
  wire CH3_SCANCNTRLOUT_M_in;
  wire CH3_SCANENB_in;
  wire CH3_SCANRSTB_in;
  wire CH3_TSTCLK0_in;
  wire CH3_TSTCLK1_in;
  wire CH3_TXDCCDONE_M_in;
  wire CH3_TXDEBUGPCSOUT_M_in;
  wire CH3_TXINHIBIT_in;
  wire CH3_TXLATCLK_in;
  wire CH3_TXPCSRESETMASK_in;
  wire CH3_TXPERST_in;
  wire CH3_TXPISOPD_in;
  wire CH3_TXPMARESETDONE_M_in;
  wire CH3_TXPOLARITY_in;
  wire CH3_TXPRBSFORCEERR_in;
  wire CH3_TXPROGDIVRESETDONE_M_in;
  wire CH3_TXPROGDIVRESET_in;
  wire CH3_TXQPRBSEN_in;
  wire CH3_TXRESETDONE_M_in;
  wire CH3_TXUSERRDY_in;
  wire CH3_TXUSRCLK_in;
  wire COESTATUSDEBUG_in;
  wire CORRECTERR_M_in;
  wire CSSDSTOPCLKB_in;
  wire DEBUGTRACECLK_in;
  wire DEBUGTRACEREADY_in;
  wire DEBUGTRACETVALID_M_in;
  wire EDTUPDATEB_in;
  wire GTPOWERGOOD_M_in;
  wire HNICPIPE_CSSD_TRIG_N_in;
  wire HNICPIPE_EDT_UPDT_N_in;
  wire HNICPIPE_FEC_ALIGNED_0_in;
  wire HNICPIPE_FEC_ALIGNED_1_in;
  wire HNICPIPE_FEC_ALIGNED_2_in;
  wire HNICPIPE_FEC_ALIGNED_3_in;
  wire HNICPIPE_MAC_PHY_STATUS_OK_0_in;
  wire HNICPIPE_MAC_PHY_STATUS_OK_1_in;
  wire HNICPIPE_MAC_PHY_STATUS_OK_2_in;
  wire HNICPIPE_MAC_PHY_STATUS_OK_3_in;
  wire HNICPIPE_RSFEC_CORRECTED_CWB_INC_0_in;
  wire HNICPIPE_RSFEC_CORRECTED_CWB_INC_1_in;
  wire HNICPIPE_RSFEC_CORRECTED_CWB_INC_2_in;
  wire HNICPIPE_RSFEC_CORRECTED_CWB_INC_3_in;
  wire HNICPIPE_RSFEC_CORRECTED_CW_INC_0_in;
  wire HNICPIPE_RSFEC_CORRECTED_CW_INC_1_in;
  wire HNICPIPE_RSFEC_CORRECTED_CW_INC_2_in;
  wire HNICPIPE_RSFEC_CORRECTED_CW_INC_3_in;
  wire HNICPIPE_RSFEC_CWB_INC_0_in;
  wire HNICPIPE_RSFEC_CWB_INC_1_in;
  wire HNICPIPE_RSFEC_CWB_INC_2_in;
  wire HNICPIPE_RSFEC_CWB_INC_3_in;
  wire HNICPIPE_RSFEC_CW_INC_0_in;
  wire HNICPIPE_RSFEC_CW_INC_1_in;
  wire HNICPIPE_RSFEC_CW_INC_2_in;
  wire HNICPIPE_RSFEC_CW_INC_3_in;
  wire HNICPIPE_RSFEC_UNCORRECTED_CWB_INC_0_in;
  wire HNICPIPE_RSFEC_UNCORRECTED_CWB_INC_1_in;
  wire HNICPIPE_RSFEC_UNCORRECTED_CWB_INC_2_in;
  wire HNICPIPE_RSFEC_UNCORRECTED_CWB_INC_3_in;
  wire HNICPIPE_RSFEC_UNCORRECTED_CW_INC_0_in;
  wire HNICPIPE_RSFEC_UNCORRECTED_CW_INC_1_in;
  wire HNICPIPE_RSFEC_UNCORRECTED_CW_INC_2_in;
  wire HNICPIPE_RSFEC_UNCORRECTED_CW_INC_3_in;
  wire HNICPIPE_SCAN_CLK_N_in;
  wire HNICPIPE_SCAN_CNTRL_CHNL_IN_in;
  wire HNICPIPE_SCAN_EN_N_in;
  wire HNICPIPE_SCAN_RST_N_in;
  wire HNICPIPE_UBLAZE_ACK_0_M_in;
  wire HNICPIPE_UBLAZE_ACK_1_M_in;
  wire HNICPIPE_UBLAZE_DEN_0_in;
  wire HNICPIPE_UBLAZE_DEN_1_in;
  wire HSCLK0_LCPLLFBCLKLOST_M_in;
  wire HSCLK0_LCPLLGTGREFCLK_in;
  wire HSCLK0_LCPLLLOCK_M_in;
  wire HSCLK0_LCPLLPD_in;
  wire HSCLK0_LCPLLREFCLKLOST_M_in;
  wire HSCLK0_LCPLLREFCLKMONITOR_M_in;
  wire HSCLK0_LCPLLRESETBYPASSMODE_in;
  wire HSCLK0_LCPLLRESET_in;
  wire HSCLK0_LCPLLSDMTOGGLE_in;
  wire HSCLK1_LCPLLFBCLKLOST_M_in;
  wire HSCLK1_LCPLLGTGREFCLK_in;
  wire HSCLK1_LCPLLLOCK_M_in;
  wire HSCLK1_LCPLLPD_in;
  wire HSCLK1_LCPLLREFCLKLOST_M_in;
  wire HSCLK1_LCPLLREFCLKMONITOR_M_in;
  wire HSCLK1_LCPLLRESETBYPASSMODE_in;
  wire HSCLK1_LCPLLRESET_in;
  wire HSCLK1_LCPLLSDMTOGGLE_in;
  wire M0_AXIS_TLAST_M_in;
  wire M0_AXIS_TREADY_in;
  wire M0_AXIS_TVALID_M_in;
  wire M1_AXIS_TLAST_M_in;
  wire M1_AXIS_TREADY_in;
  wire M1_AXIS_TVALID_M_in;
  wire M2_AXIS_TLAST_M_in;
  wire M2_AXIS_TREADY_in;
  wire M2_AXIS_TVALID_M_in;
  wire M3_AXIS_TLAST_M_in;
  wire M3_AXIS_TREADY_in;
  wire M3_AXIS_TVALID_M_in;
  wire RCALCMP_M_in;
  wire REFCLK0_CLKTESTSIG_in;
  wire REFCLK0_GTREFCLKPD_in;
  wire REFCLK1_CLKTESTSIG_in;
  wire REFCLK1_GTREFCLKPD_in;
  wire S0_AXIS_TLAST_in;
  wire S0_AXIS_TREADY_M_in;
  wire S0_AXIS_TVALID_in;
  wire S1_AXIS_TLAST_in;
  wire S1_AXIS_TREADY_M_in;
  wire S1_AXIS_TVALID_in;
  wire S2_AXIS_TLAST_in;
  wire S2_AXIS_TREADY_M_in;
  wire S2_AXIS_TVALID_in;
  wire S3_AXIS_TLAST_in;
  wire S3_AXIS_TREADY_M_in;
  wire S3_AXIS_TVALID_in;
  wire SCANCLKB_in;
  wire SCANCNTRLIN_in;
  wire SCANCNTRLOUT_M_in;
  wire SCANENB_in;
  wire SCANRSTB_in;
  wire SIM_HNICPIPE_TOP_SEL_in;
  wire TRIGACKIN0_M_in;
  wire TRIGACKOUT0_in;
  wire TRIGIN0_in;
  wire TRIGOUT0_M_in;
  wire UBENABLE_in;
  wire UBINTERRUPT_M_in;
  wire UBIOLMBRST_in;
  wire UBMBRST_in;
  wire UBRXUART_in;
  wire UBTXUART_M_in;
  wire UNCORRECTERR_M_in;
  wire [11:0] HNICPIPE_RSFEC_MAPPING_0_in;
  wire [11:0] HNICPIPE_RSFEC_MAPPING_1_in;
  wire [11:0] HNICPIPE_RSFEC_MAPPING_2_in;
  wire [11:0] HNICPIPE_RSFEC_MAPPING_3_in;
  wire [11:0] UBINTR_in;
  wire [15:0] APB3PADDR_in;
  wire [15:0] CH0_GTRSVD_in;
  wire [15:0] CH0_PCSRSVDOUT_M_in;
  wire [15:0] CH0_PINRSVDAS_M_in;
  wire [15:0] CH1_GTRSVD_in;
  wire [15:0] CH1_PCSRSVDIN_in;
  wire [15:0] CH1_PCSRSVDOUT_M_in;
  wire [15:0] CH1_PINRSVDAS_M_in;
  wire [15:0] CH2_GTRSVD_in;
  wire [15:0] CH2_PCSRSVDIN_in;
  wire [15:0] CH2_PCSRSVDOUT_M_in;
  wire [15:0] CH2_PINRSVDAS_M_in;
  wire [15:0] CH3_GTRSVD_in;
  wire [15:0] CH3_PCSRSVDIN_in;
  wire [15:0] CH3_PCSRSVDOUT_M_in;
  wire [15:0] CH3_PINRSVDAS_M_in;
  wire [15:0] DEBUGTRACETDATA_M_in;
  wire [15:0] HNICPIPE_ANLT_HNICX_STATUS_0_M_in;
  wire [15:0] HNICPIPE_ANLT_HNICX_STATUS_1_M_in;
  wire [15:0] HNICPIPE_ANLT_HNICX_STATUS_2_M_in;
  wire [15:0] HNICPIPE_ANLT_HNICX_STATUS_3_M_in;
  wire [1:0] CH0_REFDEBUGOUT_M_in;
  wire [1:0] CH0_RXPD_in;
  wire [1:0] CH0_RXRESETMODE_in;
  wire [1:0] CH0_TXPD_in;
  wire [1:0] CH0_TXPMARESETMASK_in;
  wire [1:0] CH0_TXRESETMODE_in;
  wire [1:0] CH1_REFDEBUGOUT_M_in;
  wire [1:0] CH1_RXPD_in;
  wire [1:0] CH1_RXRESETMODE_in;
  wire [1:0] CH1_TXPD_in;
  wire [1:0] CH1_TXPMARESETMASK_in;
  wire [1:0] CH1_TXRESETMODE_in;
  wire [1:0] CH2_REFDEBUGOUT_M_in;
  wire [1:0] CH2_RXPD_in;
  wire [1:0] CH2_RXRESETMODE_in;
  wire [1:0] CH2_TXPD_in;
  wire [1:0] CH2_TXPMARESETMASK_in;
  wire [1:0] CH2_TXRESETMODE_in;
  wire [1:0] CH3_REFDEBUGOUT_M_in;
  wire [1:0] CH3_RXPD_in;
  wire [1:0] CH3_RXRESETMODE_in;
  wire [1:0] CH3_TXPD_in;
  wire [1:0] CH3_TXPMARESETMASK_in;
  wire [1:0] CH3_TXRESETMODE_in;
  wire [1:0] HSCLK0_LCPLLRESETMASK_in;
  wire [1:0] HSCLK1_LCPLLRESETMASK_in;
  wire [255:0] CH0_RXDATA_M_in;
  wire [255:0] CH0_TXDATA_in;
  wire [255:0] CH1_RXDATA_M_in;
  wire [255:0] CH1_TXDATA_in;
  wire [255:0] CH2_RXDATA_M_in;
  wire [255:0] CH2_TXDATA_in;
  wire [255:0] CH3_RXDATA_M_in;
  wire [255:0] CH3_TXDATA_in;
  wire [25:0] HSCLK0_LCPLLSDMDATA_in;
  wire [25:0] HSCLK1_LCPLLSDMDATA_in;
  wire [2:0] CH0_LOOPBACK_in;
  wire [2:0] CH0_RXBUFSTATUS_M_in;
  wire [2:0] CH0_RXPCSRESETMASK_in;
  wire [2:0] CH0_TXBUFSTATUS_M_in;
  wire [2:0] CH1_LOOPBACK_in;
  wire [2:0] CH1_RXBUFSTATUS_M_in;
  wire [2:0] CH1_RXPCSRESETMASK_in;
  wire [2:0] CH1_TXBUFSTATUS_M_in;
  wire [2:0] CH2_LOOPBACK_in;
  wire [2:0] CH2_RXBUFSTATUS_M_in;
  wire [2:0] CH2_RXPCSRESETMASK_in;
  wire [2:0] CH2_TXBUFSTATUS_M_in;
  wire [2:0] CH3_LOOPBACK_in;
  wire [2:0] CH3_RXBUFSTATUS_M_in;
  wire [2:0] CH3_RXPCSRESETMASK_in;
  wire [2:0] CH3_TXBUFSTATUS_M_in;
  wire [2:0] HNICPIPE_SCAN_CHNL_IN_in;
  wire [2:0] HNICPIPE_SCAN_CHNL_MASK_IN_in;
  wire [2:0] HSCLK0_LCPLLREFCLKSEL_in;
  wire [2:0] HSCLK1_LCPLLREFCLKSEL_in;
  wire [31:0] APB3PRDATA_M_in;
  wire [31:0] APB3PWDATA_in;
  wire [31:0] CH0_DMONITOROUT_M_in;
  wire [31:0] CH1_DMONITOROUT_M_in;
  wire [31:0] CH2_DMONITOROUT_M_in;
  wire [31:0] CH3_DMONITOROUT_M_in;
  wire [31:0] GPI_in;
  wire [31:0] GPO_M_in;
  wire [31:0] M0_AXIS_TDATA_M_in;
  wire [31:0] M1_AXIS_TDATA_M_in;
  wire [31:0] M2_AXIS_TDATA_M_in;
  wire [31:0] M3_AXIS_TDATA_M_in;
  wire [31:0] S0_AXIS_TDATA_in;
  wire [31:0] S1_AXIS_TDATA_in;
  wire [31:0] S2_AXIS_TDATA_in;
  wire [31:0] S3_AXIS_TDATA_in;
  wire [3:0] CH0_RXPRBSSEL_in;
  wire [3:0] CH0_SCANIN_in;
  wire [3:0] CH0_SCANOUT_M_in;
  wire [3:0] CH0_TXPRBSSEL_in;
  wire [3:0] CH0_TXRSV1_in;
  wire [3:0] CH1_RXPRBSSEL_in;
  wire [3:0] CH1_SCANIN_in;
  wire [3:0] CH1_SCANOUT_M_in;
  wire [3:0] CH1_TXPRBSSEL_in;
  wire [3:0] CH1_TXRSV1_in;
  wire [3:0] CH2_RXPRBSSEL_in;
  wire [3:0] CH2_SCANIN_in;
  wire [3:0] CH2_SCANOUT_M_in;
  wire [3:0] CH2_TXPRBSSEL_in;
  wire [3:0] CH2_TXRSV1_in;
  wire [3:0] CH3_RXPRBSSEL_in;
  wire [3:0] CH3_SCANIN_in;
  wire [3:0] CH3_SCANOUT_M_in;
  wire [3:0] CH3_TXPRBSSEL_in;
  wire [3:0] CH3_TXRSV1_in;
  wire [3:0] HNICPIPE_FEC_LANE_LOCK_0_in;
  wire [3:0] HNICPIPE_FEC_LANE_LOCK_1_in;
  wire [3:0] HNICPIPE_FEC_LANE_LOCK_2_in;
  wire [3:0] HNICPIPE_FEC_LANE_LOCK_3_in;
  wire [3:0] HNICPIPE_GT_RX_SERDES_CLK_GOOD_IN_in;
  wire [3:0] HNICPIPE_GT_TX_SERDES_CLK_GOOD_IN_in;
  wire [3:0] HNICPIPE_NORTH_BOT_RXOUTCLK_in;
  wire [3:0] HNICPIPE_NORTH_BOT_TXOUTCLK_in;
  wire [3:0] HNICPIPE_NORTH_TOP_RXOUTCLK_in;
  wire [3:0] HNICPIPE_NORTH_TOP_TXOUTCLK_in;
  wire [3:0] HNICPIPE_RXUSRCLK_BOT2TOP_IN_in;
  wire [3:0] HNICPIPE_RX_RST_BOT2TOP_IN_in;
  wire [3:0] HNICPIPE_SOUTH_BOT_RXOUTCLK_in;
  wire [3:0] HNICPIPE_SOUTH_BOT_TXOUTCLK_in;
  wire [3:0] HNICPIPE_SOUTH_TOP_RXOUTCLK_in;
  wire [3:0] HNICPIPE_SOUTH_TOP_TXOUTCLK_in;
  wire [3:0] HNICPIPE_TXUSRCLK_BOT2TOP_IN_in;
  wire [3:0] HNICPIPE_TX_RST_BOT2TOP_IN_in;
  wire [3:0] MSTRXRESETDONE_M_in;
  wire [3:0] MSTRXRESET_in;
  wire [3:0] MSTTXRESETDONE_M_in;
  wire [3:0] MSTTXRESET_in;
  wire [3:0] SCANIN_in;
  wire [3:0] SCANOUT_M_in;
  wire [4:0] BGRCALOVRD_in;
  wire [4:0] CH0_PCSRSVDIN_in;
  wire [4:0] CH0_TXRSV0_in;
  wire [4:0] CH1_TXRSV0_in;
  wire [4:0] CH2_TXRSV0_in;
  wire [4:0] CH3_TXRSV0_in;
  wire [4:0] HNICPIPE_RSFEC_CWA_ERR_CNT_INC_0_in;
  wire [4:0] HNICPIPE_RSFEC_CWA_ERR_CNT_INC_1_in;
  wire [4:0] HNICPIPE_RSFEC_CWA_ERR_CNT_INC_2_in;
  wire [4:0] HNICPIPE_RSFEC_CWA_ERR_CNT_INC_3_in;
  wire [4:0] HNICPIPE_RSFEC_CWB_ERR_CNT_INC_0_in;
  wire [4:0] HNICPIPE_RSFEC_CWB_ERR_CNT_INC_1_in;
  wire [4:0] HNICPIPE_RSFEC_CWB_ERR_CNT_INC_2_in;
  wire [4:0] HNICPIPE_RSFEC_CWB_ERR_CNT_INC_3_in;
  wire [4:0] HNICPIPE_RSFEC_L0_ERR_CNT_INC_0_in;
  wire [4:0] HNICPIPE_RSFEC_L0_ERR_CNT_INC_1_in;
  wire [4:0] HNICPIPE_RSFEC_L0_ERR_CNT_INC_2_in;
  wire [4:0] HNICPIPE_RSFEC_L0_ERR_CNT_INC_3_in;
  wire [4:0] HNICPIPE_RSFEC_L1_ERR_CNT_INC_0_in;
  wire [4:0] HNICPIPE_RSFEC_L1_ERR_CNT_INC_1_in;
  wire [4:0] HNICPIPE_RSFEC_L1_ERR_CNT_INC_2_in;
  wire [4:0] HNICPIPE_RSFEC_L1_ERR_CNT_INC_3_in;
  wire [4:0] HNICPIPE_RSFEC_L2_ERR_CNT_INC_0_in;
  wire [4:0] HNICPIPE_RSFEC_L2_ERR_CNT_INC_1_in;
  wire [4:0] HNICPIPE_RSFEC_L2_ERR_CNT_INC_2_in;
  wire [4:0] HNICPIPE_RSFEC_L2_ERR_CNT_INC_3_in;
  wire [4:0] HNICPIPE_RSFEC_L3_ERR_CNT_INC_0_in;
  wire [4:0] HNICPIPE_RSFEC_L3_ERR_CNT_INC_1_in;
  wire [4:0] HNICPIPE_RSFEC_L3_ERR_CNT_INC_2_in;
  wire [4:0] HNICPIPE_RSFEC_L3_ERR_CNT_INC_3_in;
  wire [4:0] RCALOUT_M_in;
  wire [59:0] HNICPIPE_UBLAZE_DATA_0_in;
  wire [59:0] HNICPIPE_UBLAZE_DATA_1_in;
  wire [5:0] CH0_TXPOSTCURSOR_in;
  wire [5:0] CH0_TXPRECURSOR2_in;
  wire [5:0] CH0_TXPRECURSOR3_in;
  wire [5:0] CH0_TXPRECURSOR_in;
  wire [5:0] CH1_TXPOSTCURSOR_in;
  wire [5:0] CH1_TXPRECURSOR2_in;
  wire [5:0] CH1_TXPRECURSOR3_in;
  wire [5:0] CH1_TXPRECURSOR_in;
  wire [5:0] CH2_TXPOSTCURSOR_in;
  wire [5:0] CH2_TXPRECURSOR2_in;
  wire [5:0] CH2_TXPRECURSOR3_in;
  wire [5:0] CH2_TXPRECURSOR_in;
  wire [5:0] CH3_TXPOSTCURSOR_in;
  wire [5:0] CH3_TXPRECURSOR2_in;
  wire [5:0] CH3_TXPRECURSOR3_in;
  wire [5:0] CH3_TXPRECURSOR_in;
  wire [6:0] CH0_TXMAINCURSOR_in;
  wire [6:0] CH1_TXMAINCURSOR_in;
  wire [6:0] CH2_TXMAINCURSOR_in;
  wire [6:0] CH3_TXMAINCURSOR_in;
  wire [79:0] HNICPIPE_HNICMAC_TXDATA0_in;
  wire [79:0] HNICPIPE_HNICMAC_TXDATA1_in;
  wire [79:0] HNICPIPE_HNICMAC_TXDATA2_in;
  wire [79:0] HNICPIPE_HNICMAC_TXDATA3_in;
  wire [79:0] HNICPIPE_HNICMAC_TXDATA4_in;
  wire [79:0] HNICPIPE_HNICMAC_TXDATA5_in;
  wire [79:0] HNICPIPE_HNICMAC_TXDATA6_in;
  wire [79:0] HNICPIPE_HNICMAC_TXDATA7_in;
  wire [79:0] HNICPIPE_RXDATA_BOT2TOP0_in;
  wire [79:0] HNICPIPE_RXDATA_BOT2TOP1_in;
  wire [79:0] HNICPIPE_RXDATA_BOT2TOP2_in;
  wire [79:0] HNICPIPE_RXDATA_BOT2TOP3_in;
  wire [7:0] CH0_RXPMARESETMASK_in;
  wire [7:0] CH0_RXRATE_in;
  wire [7:0] CH0_TXRATE_in;
  wire [7:0] CH1_RXPMARESETMASK_in;
  wire [7:0] CH1_RXRATE_in;
  wire [7:0] CH1_TXRATE_in;
  wire [7:0] CH2_RXPMARESETMASK_in;
  wire [7:0] CH2_RXRATE_in;
  wire [7:0] CH2_TXRATE_in;
  wire [7:0] CH3_RXPMARESETMASK_in;
  wire [7:0] CH3_RXRATE_in;
  wire [7:0] CH3_TXRATE_in;
  wire [7:0] CTRLRSVDIN_in;
  wire [7:0] CTRLRSVDOUT_M_in;
  wire [7:0] HSCLK0_LCPLLFBDIV_in;
  wire [7:0] HSCLK1_LCPLLFBDIV_in;

  assign APB3CLK_M = APB3CLK_M_out;
  assign APB3PADDR_M = APB3PADDR_M_out;
  assign APB3PENABLE_M = APB3PENABLE_M_out;
  assign APB3PRDATA = APB3PRDATA_out;
  assign APB3PREADY = APB3PREADY_out;
  assign APB3PRESETN_M = APB3PRESETN_M_out;
  assign APB3PSEL_M = APB3PSEL_M_out;
  assign APB3PSLVERR = APB3PSLVERR_out;
  assign APB3PWDATA_M = APB3PWDATA_M_out;
  assign APB3PWRITE_M = APB3PWRITE_M_out;
  assign AXISCLK_M = AXISCLK_M_out;
  assign BGBYPASSB_M = BGBYPASSB_M_out;
  assign BGMONITORENB_M = BGMONITORENB_M_out;
  assign BGPDB_M = BGPDB_M_out;
  assign BGRCALOVRDENB_M = BGRCALOVRDENB_M_out;
  assign BGRCALOVRD_M = BGRCALOVRD_M_out;
  assign CH0_CDRFREQOS_M = CH0_CDRFREQOS_M_out;
  assign CH0_CDRINCPCTRL_M = CH0_CDRINCPCTRL_M_out;
  assign CH0_CDRSTEPDIR_M = CH0_CDRSTEPDIR_M_out;
  assign CH0_CDRSTEPSQ_M = CH0_CDRSTEPSQ_M_out;
  assign CH0_CDRSTEPSX_M = CH0_CDRSTEPSX_M_out;
  assign CH0_CLKRSVD0_M = CH0_CLKRSVD0_M_out;
  assign CH0_CLKRSVD1_M = CH0_CLKRSVD1_M_out;
  assign CH0_DMONFIFORESET_M = CH0_DMONFIFORESET_M_out;
  assign CH0_DMONITORCLK_M = CH0_DMONITORCLK_M_out;
  assign CH0_DMONITOROUT = CH0_DMONITOROUT_out;
  assign CH0_EYESCANDATAERROR = CH0_EYESCANDATAERROR_out;
  assign CH0_EYESCANRESET_M = CH0_EYESCANRESET_M_out;
  assign CH0_EYESCANTRIGGER_M = CH0_EYESCANTRIGGER_M_out;
  assign CH0_GTRSVD_M = CH0_GTRSVD_M_out;
  assign CH0_GTRXRESET_M = CH0_GTRXRESET_M_out;
  assign CH0_GTTXRESET_M = CH0_GTTXRESET_M_out;
  assign CH0_ILORESETDONE = CH0_ILORESETDONE_out;
  assign CH0_ILORESETMASK_M = CH0_ILORESETMASK_M_out;
  assign CH0_ILORESET_M = CH0_ILORESET_M_out;
  assign CH0_LOOPBACK_M = CH0_LOOPBACK_M_out;
  assign CH0_PCSRSVDIN_M = CH0_PCSRSVDIN_M_out;
  assign CH0_PCSRSVDOUT = CH0_PCSRSVDOUT_out;
  assign CH0_PINRSVDAS = CH0_PINRSVDAS_out;
  assign CH0_REFDEBUGOUT = CH0_REFDEBUGOUT_out;
  assign CH0_RESETEXCEPTION = CH0_RESETEXCEPTION_out;
  assign CH0_RXBUFSTATUS = CH0_RXBUFSTATUS_out;
  assign CH0_RXCDRHOLD_M = CH0_RXCDRHOLD_M_out;
  assign CH0_RXCDRLOCK = CH0_RXCDRLOCK_out;
  assign CH0_RXCDROVRDEN_M = CH0_RXCDROVRDEN_M_out;
  assign CH0_RXCDRPHDONE = CH0_RXCDRPHDONE_out;
  assign CH0_RXCDRRESET_M = CH0_RXCDRRESET_M_out;
  assign CH0_RXDATA = CH0_RXDATA_out;
  assign CH0_RXDEBUGPCSOUT = CH0_RXDEBUGPCSOUT_out;
  assign CH0_RXLATCLK_M = CH0_RXLATCLK_M_out;
  assign CH0_RXPCSRESETMASK_M = CH0_RXPCSRESETMASK_M_out;
  assign CH0_RXPD_M = CH0_RXPD_M_out;
  assign CH0_RXPERST_M = CH0_RXPERST_M_out;
  assign CH0_RXPMARESETDONE = CH0_RXPMARESETDONE_out;
  assign CH0_RXPMARESETMASK_M = CH0_RXPMARESETMASK_M_out;
  assign CH0_RXPOLARITY_M = CH0_RXPOLARITY_M_out;
  assign CH0_RXPRBSCNTRESET_M = CH0_RXPRBSCNTRESET_M_out;
  assign CH0_RXPRBSCNTSTOP_M = CH0_RXPRBSCNTSTOP_M_out;
  assign CH0_RXPRBSERR = CH0_RXPRBSERR_out;
  assign CH0_RXPRBSLOCKED = CH0_RXPRBSLOCKED_out;
  assign CH0_RXPRBSSEL_M = CH0_RXPRBSSEL_M_out;
  assign CH0_RXPROGDIVRESETDONE = CH0_RXPROGDIVRESETDONE_out;
  assign CH0_RXPROGDIVRESET_M = CH0_RXPROGDIVRESET_M_out;
  assign CH0_RXQPRBSEN_M = CH0_RXQPRBSEN_M_out;
  assign CH0_RXRATE_M = CH0_RXRATE_M_out;
  assign CH0_RXRESETDONE = CH0_RXRESETDONE_out;
  assign CH0_RXRESETMODE_M = CH0_RXRESETMODE_M_out;
  assign CH0_RXRSV0_M = CH0_RXRSV0_M_out;
  assign CH0_RXRSV1_M = CH0_RXRSV1_M_out;
  assign CH0_RXRSV2_M = CH0_RXRSV2_M_out;
  assign CH0_RXUSERRDY_M = CH0_RXUSERRDY_M_out;
  assign CH0_RXUSRCLK_M = CH0_RXUSRCLK_M_out;
  assign CH0_TSTCLK0_M = CH0_TSTCLK0_M_out;
  assign CH0_TSTCLK1_M = CH0_TSTCLK1_M_out;
  assign CH0_TXBUFSTATUS = CH0_TXBUFSTATUS_out;
  assign CH0_TXDATA_M = CH0_TXDATA_M_out;
  assign CH0_TXDCCDONE = CH0_TXDCCDONE_out;
  assign CH0_TXDEBUGPCSOUT = CH0_TXDEBUGPCSOUT_out;
  assign CH0_TXINHIBIT_M = CH0_TXINHIBIT_M_out;
  assign CH0_TXLATCLK_M = CH0_TXLATCLK_M_out;
  assign CH0_TXMAINCURSOR_M = CH0_TXMAINCURSOR_M_out;
  assign CH0_TXPCSRESETMASK_M = CH0_TXPCSRESETMASK_M_out;
  assign CH0_TXPD_M = CH0_TXPD_M_out;
  assign CH0_TXPERST_M = CH0_TXPERST_M_out;
  assign CH0_TXPISOPD_M = CH0_TXPISOPD_M_out;
  assign CH0_TXPMARESETDONE = CH0_TXPMARESETDONE_out;
  assign CH0_TXPMARESETMASK_M = CH0_TXPMARESETMASK_M_out;
  assign CH0_TXPOLARITY_M = CH0_TXPOLARITY_M_out;
  assign CH0_TXPOSTCURSOR_M = CH0_TXPOSTCURSOR_M_out;
  assign CH0_TXPRBSFORCEERR_M = CH0_TXPRBSFORCEERR_M_out;
  assign CH0_TXPRBSSEL_M = CH0_TXPRBSSEL_M_out;
  assign CH0_TXPRECURSOR2_M = CH0_TXPRECURSOR2_M_out;
  assign CH0_TXPRECURSOR3_M = CH0_TXPRECURSOR3_M_out;
  assign CH0_TXPRECURSOR_M = CH0_TXPRECURSOR_M_out;
  assign CH0_TXPROGDIVRESETDONE = CH0_TXPROGDIVRESETDONE_out;
  assign CH0_TXPROGDIVRESET_M = CH0_TXPROGDIVRESET_M_out;
  assign CH0_TXQPRBSEN_M = CH0_TXQPRBSEN_M_out;
  assign CH0_TXRATE_M = CH0_TXRATE_M_out;
  assign CH0_TXRESETDONE = CH0_TXRESETDONE_out;
  assign CH0_TXRESETMODE_M = CH0_TXRESETMODE_M_out;
  assign CH0_TXRSV0_M = CH0_TXRSV0_M_out;
  assign CH0_TXRSV1_M = CH0_TXRSV1_M_out;
  assign CH0_TXUSERRDY_M = CH0_TXUSERRDY_M_out;
  assign CH0_TXUSRCLK_M = CH0_TXUSRCLK_M_out;
  assign CH1_CDRFREQOS_M = CH1_CDRFREQOS_M_out;
  assign CH1_CDRINCPCTRL_M = CH1_CDRINCPCTRL_M_out;
  assign CH1_CDRSTEPDIR_M = CH1_CDRSTEPDIR_M_out;
  assign CH1_CDRSTEPSQ_M = CH1_CDRSTEPSQ_M_out;
  assign CH1_CDRSTEPSX_M = CH1_CDRSTEPSX_M_out;
  assign CH1_CLKRSVD0_M = CH1_CLKRSVD0_M_out;
  assign CH1_CLKRSVD1_M = CH1_CLKRSVD1_M_out;
  assign CH1_DMONFIFORESET_M = CH1_DMONFIFORESET_M_out;
  assign CH1_DMONITORCLK_M = CH1_DMONITORCLK_M_out;
  assign CH1_DMONITOROUT = CH1_DMONITOROUT_out;
  assign CH1_EYESCANDATAERROR = CH1_EYESCANDATAERROR_out;
  assign CH1_EYESCANRESET_M = CH1_EYESCANRESET_M_out;
  assign CH1_EYESCANTRIGGER_M = CH1_EYESCANTRIGGER_M_out;
  assign CH1_GTRSVD_M = CH1_GTRSVD_M_out;
  assign CH1_GTRXRESET_M = CH1_GTRXRESET_M_out;
  assign CH1_GTTXRESET_M = CH1_GTTXRESET_M_out;
  assign CH1_ILORESETDONE = CH1_ILORESETDONE_out;
  assign CH1_ILORESETMASK_M = CH1_ILORESETMASK_M_out;
  assign CH1_ILORESET_M = CH1_ILORESET_M_out;
  assign CH1_LOOPBACK_M = CH1_LOOPBACK_M_out;
  assign CH1_PCSRSVDIN_M = CH1_PCSRSVDIN_M_out;
  assign CH1_PCSRSVDOUT = CH1_PCSRSVDOUT_out;
  assign CH1_PINRSVDAS = CH1_PINRSVDAS_out;
  assign CH1_REFDEBUGOUT = CH1_REFDEBUGOUT_out;
  assign CH1_RESETEXCEPTION = CH1_RESETEXCEPTION_out;
  assign CH1_RXBUFSTATUS = CH1_RXBUFSTATUS_out;
  assign CH1_RXCDRHOLD_M = CH1_RXCDRHOLD_M_out;
  assign CH1_RXCDRLOCK = CH1_RXCDRLOCK_out;
  assign CH1_RXCDROVRDEN_M = CH1_RXCDROVRDEN_M_out;
  assign CH1_RXCDRPHDONE = CH1_RXCDRPHDONE_out;
  assign CH1_RXCDRRESET_M = CH1_RXCDRRESET_M_out;
  assign CH1_RXDATA = CH1_RXDATA_out;
  assign CH1_RXDEBUGPCSOUT = CH1_RXDEBUGPCSOUT_out;
  assign CH1_RXLATCLK_M = CH1_RXLATCLK_M_out;
  assign CH1_RXPCSRESETMASK_M = CH1_RXPCSRESETMASK_M_out;
  assign CH1_RXPD_M = CH1_RXPD_M_out;
  assign CH1_RXPERST_M = CH1_RXPERST_M_out;
  assign CH1_RXPMARESETDONE = CH1_RXPMARESETDONE_out;
  assign CH1_RXPMARESETMASK_M = CH1_RXPMARESETMASK_M_out;
  assign CH1_RXPOLARITY_M = CH1_RXPOLARITY_M_out;
  assign CH1_RXPRBSCNTRESET_M = CH1_RXPRBSCNTRESET_M_out;
  assign CH1_RXPRBSCNTSTOP_M = CH1_RXPRBSCNTSTOP_M_out;
  assign CH1_RXPRBSERR = CH1_RXPRBSERR_out;
  assign CH1_RXPRBSLOCKED = CH1_RXPRBSLOCKED_out;
  assign CH1_RXPRBSSEL_M = CH1_RXPRBSSEL_M_out;
  assign CH1_RXPROGDIVRESETDONE = CH1_RXPROGDIVRESETDONE_out;
  assign CH1_RXPROGDIVRESET_M = CH1_RXPROGDIVRESET_M_out;
  assign CH1_RXQPRBSEN_M = CH1_RXQPRBSEN_M_out;
  assign CH1_RXRATE_M = CH1_RXRATE_M_out;
  assign CH1_RXRESETDONE = CH1_RXRESETDONE_out;
  assign CH1_RXRESETMODE_M = CH1_RXRESETMODE_M_out;
  assign CH1_RXRSV0_M = CH1_RXRSV0_M_out;
  assign CH1_RXRSV1_M = CH1_RXRSV1_M_out;
  assign CH1_RXRSV2_M = CH1_RXRSV2_M_out;
  assign CH1_RXUSERRDY_M = CH1_RXUSERRDY_M_out;
  assign CH1_RXUSRCLK_M = CH1_RXUSRCLK_M_out;
  assign CH1_TSTCLK0_M = CH1_TSTCLK0_M_out;
  assign CH1_TSTCLK1_M = CH1_TSTCLK1_M_out;
  assign CH1_TXBUFSTATUS = CH1_TXBUFSTATUS_out;
  assign CH1_TXDATA_M = CH1_TXDATA_M_out;
  assign CH1_TXDCCDONE = CH1_TXDCCDONE_out;
  assign CH1_TXDEBUGPCSOUT = CH1_TXDEBUGPCSOUT_out;
  assign CH1_TXINHIBIT_M = CH1_TXINHIBIT_M_out;
  assign CH1_TXLATCLK_M = CH1_TXLATCLK_M_out;
  assign CH1_TXMAINCURSOR_M = CH1_TXMAINCURSOR_M_out;
  assign CH1_TXPCSRESETMASK_M = CH1_TXPCSRESETMASK_M_out;
  assign CH1_TXPD_M = CH1_TXPD_M_out;
  assign CH1_TXPERST_M = CH1_TXPERST_M_out;
  assign CH1_TXPISOPD_M = CH1_TXPISOPD_M_out;
  assign CH1_TXPMARESETDONE = CH1_TXPMARESETDONE_out;
  assign CH1_TXPMARESETMASK_M = CH1_TXPMARESETMASK_M_out;
  assign CH1_TXPOLARITY_M = CH1_TXPOLARITY_M_out;
  assign CH1_TXPOSTCURSOR_M = CH1_TXPOSTCURSOR_M_out;
  assign CH1_TXPRBSFORCEERR_M = CH1_TXPRBSFORCEERR_M_out;
  assign CH1_TXPRBSSEL_M = CH1_TXPRBSSEL_M_out;
  assign CH1_TXPRECURSOR2_M = CH1_TXPRECURSOR2_M_out;
  assign CH1_TXPRECURSOR3_M = CH1_TXPRECURSOR3_M_out;
  assign CH1_TXPRECURSOR_M = CH1_TXPRECURSOR_M_out;
  assign CH1_TXPROGDIVRESETDONE = CH1_TXPROGDIVRESETDONE_out;
  assign CH1_TXPROGDIVRESET_M = CH1_TXPROGDIVRESET_M_out;
  assign CH1_TXQPRBSEN_M = CH1_TXQPRBSEN_M_out;
  assign CH1_TXRATE_M = CH1_TXRATE_M_out;
  assign CH1_TXRESETDONE = CH1_TXRESETDONE_out;
  assign CH1_TXRESETMODE_M = CH1_TXRESETMODE_M_out;
  assign CH1_TXRSV0_M = CH1_TXRSV0_M_out;
  assign CH1_TXRSV1_M = CH1_TXRSV1_M_out;
  assign CH1_TXUSERRDY_M = CH1_TXUSERRDY_M_out;
  assign CH1_TXUSRCLK_M = CH1_TXUSRCLK_M_out;
  assign CH2_CDRFREQOS_M = CH2_CDRFREQOS_M_out;
  assign CH2_CDRINCPCTRL_M = CH2_CDRINCPCTRL_M_out;
  assign CH2_CDRSTEPDIR_M = CH2_CDRSTEPDIR_M_out;
  assign CH2_CDRSTEPSQ_M = CH2_CDRSTEPSQ_M_out;
  assign CH2_CDRSTEPSX_M = CH2_CDRSTEPSX_M_out;
  assign CH2_CLKRSVD0_M = CH2_CLKRSVD0_M_out;
  assign CH2_CLKRSVD1_M = CH2_CLKRSVD1_M_out;
  assign CH2_DMONFIFORESET_M = CH2_DMONFIFORESET_M_out;
  assign CH2_DMONITORCLK_M = CH2_DMONITORCLK_M_out;
  assign CH2_DMONITOROUT = CH2_DMONITOROUT_out;
  assign CH2_EYESCANDATAERROR = CH2_EYESCANDATAERROR_out;
  assign CH2_EYESCANRESET_M = CH2_EYESCANRESET_M_out;
  assign CH2_EYESCANTRIGGER_M = CH2_EYESCANTRIGGER_M_out;
  assign CH2_GTRSVD_M = CH2_GTRSVD_M_out;
  assign CH2_GTRXRESET_M = CH2_GTRXRESET_M_out;
  assign CH2_GTTXRESET_M = CH2_GTTXRESET_M_out;
  assign CH2_ILORESETDONE = CH2_ILORESETDONE_out;
  assign CH2_ILORESETMASK_M = CH2_ILORESETMASK_M_out;
  assign CH2_ILORESET_M = CH2_ILORESET_M_out;
  assign CH2_LOOPBACK_M = CH2_LOOPBACK_M_out;
  assign CH2_PCSRSVDIN_M = CH2_PCSRSVDIN_M_out;
  assign CH2_PCSRSVDOUT = CH2_PCSRSVDOUT_out;
  assign CH2_PINRSVDAS = CH2_PINRSVDAS_out;
  assign CH2_REFDEBUGOUT = CH2_REFDEBUGOUT_out;
  assign CH2_RESETEXCEPTION = CH2_RESETEXCEPTION_out;
  assign CH2_RXBUFSTATUS = CH2_RXBUFSTATUS_out;
  assign CH2_RXCDRHOLD_M = CH2_RXCDRHOLD_M_out;
  assign CH2_RXCDRLOCK = CH2_RXCDRLOCK_out;
  assign CH2_RXCDROVRDEN_M = CH2_RXCDROVRDEN_M_out;
  assign CH2_RXCDRPHDONE = CH2_RXCDRPHDONE_out;
  assign CH2_RXCDRRESET_M = CH2_RXCDRRESET_M_out;
  assign CH2_RXDATA = CH2_RXDATA_out;
  assign CH2_RXDEBUGPCSOUT = CH2_RXDEBUGPCSOUT_out;
  assign CH2_RXLATCLK_M = CH2_RXLATCLK_M_out;
  assign CH2_RXPCSRESETMASK_M = CH2_RXPCSRESETMASK_M_out;
  assign CH2_RXPD_M = CH2_RXPD_M_out;
  assign CH2_RXPERST_M = CH2_RXPERST_M_out;
  assign CH2_RXPMARESETDONE = CH2_RXPMARESETDONE_out;
  assign CH2_RXPMARESETMASK_M = CH2_RXPMARESETMASK_M_out;
  assign CH2_RXPOLARITY_M = CH2_RXPOLARITY_M_out;
  assign CH2_RXPRBSCNTRESET_M = CH2_RXPRBSCNTRESET_M_out;
  assign CH2_RXPRBSCNTSTOP_M = CH2_RXPRBSCNTSTOP_M_out;
  assign CH2_RXPRBSERR = CH2_RXPRBSERR_out;
  assign CH2_RXPRBSLOCKED = CH2_RXPRBSLOCKED_out;
  assign CH2_RXPRBSSEL_M = CH2_RXPRBSSEL_M_out;
  assign CH2_RXPROGDIVRESETDONE = CH2_RXPROGDIVRESETDONE_out;
  assign CH2_RXPROGDIVRESET_M = CH2_RXPROGDIVRESET_M_out;
  assign CH2_RXQPRBSEN_M = CH2_RXQPRBSEN_M_out;
  assign CH2_RXRATE_M = CH2_RXRATE_M_out;
  assign CH2_RXRESETDONE = CH2_RXRESETDONE_out;
  assign CH2_RXRESETMODE_M = CH2_RXRESETMODE_M_out;
  assign CH2_RXRSV0_M = CH2_RXRSV0_M_out;
  assign CH2_RXRSV1_M = CH2_RXRSV1_M_out;
  assign CH2_RXRSV2_M = CH2_RXRSV2_M_out;
  assign CH2_RXUSERRDY_M = CH2_RXUSERRDY_M_out;
  assign CH2_RXUSRCLK_M = CH2_RXUSRCLK_M_out;
  assign CH2_TSTCLK0_M = CH2_TSTCLK0_M_out;
  assign CH2_TSTCLK1_M = CH2_TSTCLK1_M_out;
  assign CH2_TXBUFSTATUS = CH2_TXBUFSTATUS_out;
  assign CH2_TXDATA_M = CH2_TXDATA_M_out;
  assign CH2_TXDCCDONE = CH2_TXDCCDONE_out;
  assign CH2_TXDEBUGPCSOUT = CH2_TXDEBUGPCSOUT_out;
  assign CH2_TXINHIBIT_M = CH2_TXINHIBIT_M_out;
  assign CH2_TXLATCLK_M = CH2_TXLATCLK_M_out;
  assign CH2_TXMAINCURSOR_M = CH2_TXMAINCURSOR_M_out;
  assign CH2_TXPCSRESETMASK_M = CH2_TXPCSRESETMASK_M_out;
  assign CH2_TXPD_M = CH2_TXPD_M_out;
  assign CH2_TXPERST_M = CH2_TXPERST_M_out;
  assign CH2_TXPISOPD_M = CH2_TXPISOPD_M_out;
  assign CH2_TXPMARESETDONE = CH2_TXPMARESETDONE_out;
  assign CH2_TXPMARESETMASK_M = CH2_TXPMARESETMASK_M_out;
  assign CH2_TXPOLARITY_M = CH2_TXPOLARITY_M_out;
  assign CH2_TXPOSTCURSOR_M = CH2_TXPOSTCURSOR_M_out;
  assign CH2_TXPRBSFORCEERR_M = CH2_TXPRBSFORCEERR_M_out;
  assign CH2_TXPRBSSEL_M = CH2_TXPRBSSEL_M_out;
  assign CH2_TXPRECURSOR2_M = CH2_TXPRECURSOR2_M_out;
  assign CH2_TXPRECURSOR3_M = CH2_TXPRECURSOR3_M_out;
  assign CH2_TXPRECURSOR_M = CH2_TXPRECURSOR_M_out;
  assign CH2_TXPROGDIVRESETDONE = CH2_TXPROGDIVRESETDONE_out;
  assign CH2_TXPROGDIVRESET_M = CH2_TXPROGDIVRESET_M_out;
  assign CH2_TXQPRBSEN_M = CH2_TXQPRBSEN_M_out;
  assign CH2_TXRATE_M = CH2_TXRATE_M_out;
  assign CH2_TXRESETDONE = CH2_TXRESETDONE_out;
  assign CH2_TXRESETMODE_M = CH2_TXRESETMODE_M_out;
  assign CH2_TXRSV0_M = CH2_TXRSV0_M_out;
  assign CH2_TXRSV1_M = CH2_TXRSV1_M_out;
  assign CH2_TXUSERRDY_M = CH2_TXUSERRDY_M_out;
  assign CH2_TXUSRCLK_M = CH2_TXUSRCLK_M_out;
  assign CH3_CDRFREQOS_M = CH3_CDRFREQOS_M_out;
  assign CH3_CDRINCPCTRL_M = CH3_CDRINCPCTRL_M_out;
  assign CH3_CDRSTEPDIR_M = CH3_CDRSTEPDIR_M_out;
  assign CH3_CDRSTEPSQ_M = CH3_CDRSTEPSQ_M_out;
  assign CH3_CDRSTEPSX_M = CH3_CDRSTEPSX_M_out;
  assign CH3_CLKRSVD0_M = CH3_CLKRSVD0_M_out;
  assign CH3_CLKRSVD1_M = CH3_CLKRSVD1_M_out;
  assign CH3_DMONFIFORESET_M = CH3_DMONFIFORESET_M_out;
  assign CH3_DMONITORCLK_M = CH3_DMONITORCLK_M_out;
  assign CH3_DMONITOROUT = CH3_DMONITOROUT_out;
  assign CH3_EYESCANDATAERROR = CH3_EYESCANDATAERROR_out;
  assign CH3_EYESCANRESET_M = CH3_EYESCANRESET_M_out;
  assign CH3_EYESCANTRIGGER_M = CH3_EYESCANTRIGGER_M_out;
  assign CH3_GTRSVD_M = CH3_GTRSVD_M_out;
  assign CH3_GTRXRESET_M = CH3_GTRXRESET_M_out;
  assign CH3_GTTXRESET_M = CH3_GTTXRESET_M_out;
  assign CH3_ILORESETDONE = CH3_ILORESETDONE_out;
  assign CH3_ILORESETMASK_M = CH3_ILORESETMASK_M_out;
  assign CH3_ILORESET_M = CH3_ILORESET_M_out;
  assign CH3_LOOPBACK_M = CH3_LOOPBACK_M_out;
  assign CH3_PCSRSVDIN_M = CH3_PCSRSVDIN_M_out;
  assign CH3_PCSRSVDOUT = CH3_PCSRSVDOUT_out;
  assign CH3_PINRSVDAS = CH3_PINRSVDAS_out;
  assign CH3_REFDEBUGOUT = CH3_REFDEBUGOUT_out;
  assign CH3_RESETEXCEPTION = CH3_RESETEXCEPTION_out;
  assign CH3_RXBUFSTATUS = CH3_RXBUFSTATUS_out;
  assign CH3_RXCDRHOLD_M = CH3_RXCDRHOLD_M_out;
  assign CH3_RXCDRLOCK = CH3_RXCDRLOCK_out;
  assign CH3_RXCDROVRDEN_M = CH3_RXCDROVRDEN_M_out;
  assign CH3_RXCDRPHDONE = CH3_RXCDRPHDONE_out;
  assign CH3_RXCDRRESET_M = CH3_RXCDRRESET_M_out;
  assign CH3_RXDATA = CH3_RXDATA_out;
  assign CH3_RXDEBUGPCSOUT = CH3_RXDEBUGPCSOUT_out;
  assign CH3_RXLATCLK_M = CH3_RXLATCLK_M_out;
  assign CH3_RXPCSRESETMASK_M = CH3_RXPCSRESETMASK_M_out;
  assign CH3_RXPD_M = CH3_RXPD_M_out;
  assign CH3_RXPERST_M = CH3_RXPERST_M_out;
  assign CH3_RXPMARESETDONE = CH3_RXPMARESETDONE_out;
  assign CH3_RXPMARESETMASK_M = CH3_RXPMARESETMASK_M_out;
  assign CH3_RXPOLARITY_M = CH3_RXPOLARITY_M_out;
  assign CH3_RXPRBSCNTRESET_M = CH3_RXPRBSCNTRESET_M_out;
  assign CH3_RXPRBSCNTSTOP_M = CH3_RXPRBSCNTSTOP_M_out;
  assign CH3_RXPRBSERR = CH3_RXPRBSERR_out;
  assign CH3_RXPRBSLOCKED = CH3_RXPRBSLOCKED_out;
  assign CH3_RXPRBSSEL_M = CH3_RXPRBSSEL_M_out;
  assign CH3_RXPROGDIVRESETDONE = CH3_RXPROGDIVRESETDONE_out;
  assign CH3_RXPROGDIVRESET_M = CH3_RXPROGDIVRESET_M_out;
  assign CH3_RXQPRBSEN_M = CH3_RXQPRBSEN_M_out;
  assign CH3_RXRATE_M = CH3_RXRATE_M_out;
  assign CH3_RXRESETDONE = CH3_RXRESETDONE_out;
  assign CH3_RXRESETMODE_M = CH3_RXRESETMODE_M_out;
  assign CH3_RXRSV0_M = CH3_RXRSV0_M_out;
  assign CH3_RXRSV1_M = CH3_RXRSV1_M_out;
  assign CH3_RXRSV2_M = CH3_RXRSV2_M_out;
  assign CH3_RXUSERRDY_M = CH3_RXUSERRDY_M_out;
  assign CH3_RXUSRCLK_M = CH3_RXUSRCLK_M_out;
  assign CH3_TSTCLK0_M = CH3_TSTCLK0_M_out;
  assign CH3_TSTCLK1_M = CH3_TSTCLK1_M_out;
  assign CH3_TXBUFSTATUS = CH3_TXBUFSTATUS_out;
  assign CH3_TXDATA_M = CH3_TXDATA_M_out;
  assign CH3_TXDCCDONE = CH3_TXDCCDONE_out;
  assign CH3_TXDEBUGPCSOUT = CH3_TXDEBUGPCSOUT_out;
  assign CH3_TXINHIBIT_M = CH3_TXINHIBIT_M_out;
  assign CH3_TXLATCLK_M = CH3_TXLATCLK_M_out;
  assign CH3_TXMAINCURSOR_M = CH3_TXMAINCURSOR_M_out;
  assign CH3_TXPCSRESETMASK_M = CH3_TXPCSRESETMASK_M_out;
  assign CH3_TXPD_M = CH3_TXPD_M_out;
  assign CH3_TXPERST_M = CH3_TXPERST_M_out;
  assign CH3_TXPISOPD_M = CH3_TXPISOPD_M_out;
  assign CH3_TXPMARESETDONE = CH3_TXPMARESETDONE_out;
  assign CH3_TXPMARESETMASK_M = CH3_TXPMARESETMASK_M_out;
  assign CH3_TXPOLARITY_M = CH3_TXPOLARITY_M_out;
  assign CH3_TXPOSTCURSOR_M = CH3_TXPOSTCURSOR_M_out;
  assign CH3_TXPRBSFORCEERR_M = CH3_TXPRBSFORCEERR_M_out;
  assign CH3_TXPRBSSEL_M = CH3_TXPRBSSEL_M_out;
  assign CH3_TXPRECURSOR2_M = CH3_TXPRECURSOR2_M_out;
  assign CH3_TXPRECURSOR3_M = CH3_TXPRECURSOR3_M_out;
  assign CH3_TXPRECURSOR_M = CH3_TXPRECURSOR_M_out;
  assign CH3_TXPROGDIVRESETDONE = CH3_TXPROGDIVRESETDONE_out;
  assign CH3_TXPROGDIVRESET_M = CH3_TXPROGDIVRESET_M_out;
  assign CH3_TXQPRBSEN_M = CH3_TXQPRBSEN_M_out;
  assign CH3_TXRATE_M = CH3_TXRATE_M_out;
  assign CH3_TXRESETDONE = CH3_TXRESETDONE_out;
  assign CH3_TXRESETMODE_M = CH3_TXRESETMODE_M_out;
  assign CH3_TXRSV0_M = CH3_TXRSV0_M_out;
  assign CH3_TXRSV1_M = CH3_TXRSV1_M_out;
  assign CH3_TXUSERRDY_M = CH3_TXUSERRDY_M_out;
  assign CH3_TXUSRCLK_M = CH3_TXUSRCLK_M_out;
  assign COESTATUSDEBUG_M = COESTATUSDEBUG_M_out;
  assign CORRECTERR = CORRECTERR_out;
  assign CTRLRSVDIN_M = CTRLRSVDIN_M_out;
  assign CTRLRSVDOUT = CTRLRSVDOUT_out;
  assign DEBUGTRACECLK_M = DEBUGTRACECLK_M_out;
  assign DEBUGTRACEREADY_M = DEBUGTRACEREADY_M_out;
  assign DEBUGTRACETDATA = DEBUGTRACETDATA_out;
  assign DEBUGTRACETVALID = DEBUGTRACETVALID_out;
  assign GPI_M = GPI_M_out;
  assign GPO = GPO_out;
  assign GTPOWERGOOD = GTPOWERGOOD_out;
  assign HNICPIPE_ANLT_HNICX_STATUS_0 = HNICPIPE_ANLT_HNICX_STATUS_0_out;
  assign HNICPIPE_ANLT_HNICX_STATUS_1 = HNICPIPE_ANLT_HNICX_STATUS_1_out;
  assign HNICPIPE_ANLT_HNICX_STATUS_2 = HNICPIPE_ANLT_HNICX_STATUS_2_out;
  assign HNICPIPE_ANLT_HNICX_STATUS_3 = HNICPIPE_ANLT_HNICX_STATUS_3_out;
  assign HNICPIPE_FEC_ALIGNED_0_M = HNICPIPE_FEC_ALIGNED_0_M_out;
  assign HNICPIPE_FEC_ALIGNED_1_M = HNICPIPE_FEC_ALIGNED_1_M_out;
  assign HNICPIPE_FEC_ALIGNED_2_M = HNICPIPE_FEC_ALIGNED_2_M_out;
  assign HNICPIPE_FEC_ALIGNED_3_M = HNICPIPE_FEC_ALIGNED_3_M_out;
  assign HNICPIPE_FEC_LANE_LOCK_0_M = HNICPIPE_FEC_LANE_LOCK_0_M_out;
  assign HNICPIPE_FEC_LANE_LOCK_1_M = HNICPIPE_FEC_LANE_LOCK_1_M_out;
  assign HNICPIPE_FEC_LANE_LOCK_2_M = HNICPIPE_FEC_LANE_LOCK_2_M_out;
  assign HNICPIPE_FEC_LANE_LOCK_3_M = HNICPIPE_FEC_LANE_LOCK_3_M_out;
  assign HNICPIPE_GT_RX_SERDES_CLK_GOOD_OUT = HNICPIPE_GT_RX_SERDES_CLK_GOOD_OUT_out;
  assign HNICPIPE_GT_TX_SERDES_CLK_GOOD_OUT = HNICPIPE_GT_TX_SERDES_CLK_GOOD_OUT_out;
  assign HNICPIPE_HNICMAC_RXDATA0 = HNICPIPE_HNICMAC_RXDATA0_out;
  assign HNICPIPE_HNICMAC_RXDATA1 = HNICPIPE_HNICMAC_RXDATA1_out;
  assign HNICPIPE_HNICMAC_RXDATA2 = HNICPIPE_HNICMAC_RXDATA2_out;
  assign HNICPIPE_HNICMAC_RXDATA3 = HNICPIPE_HNICMAC_RXDATA3_out;
  assign HNICPIPE_HNICMAC_RXDATA4 = HNICPIPE_HNICMAC_RXDATA4_out;
  assign HNICPIPE_HNICMAC_RXDATA5 = HNICPIPE_HNICMAC_RXDATA5_out;
  assign HNICPIPE_HNICMAC_RXDATA6 = HNICPIPE_HNICMAC_RXDATA6_out;
  assign HNICPIPE_HNICMAC_RXDATA7 = HNICPIPE_HNICMAC_RXDATA7_out;
  assign HNICPIPE_MAC_PHY_STATUS_OK_0_M = HNICPIPE_MAC_PHY_STATUS_OK_0_M_out;
  assign HNICPIPE_MAC_PHY_STATUS_OK_1_M = HNICPIPE_MAC_PHY_STATUS_OK_1_M_out;
  assign HNICPIPE_MAC_PHY_STATUS_OK_2_M = HNICPIPE_MAC_PHY_STATUS_OK_2_M_out;
  assign HNICPIPE_MAC_PHY_STATUS_OK_3_M = HNICPIPE_MAC_PHY_STATUS_OK_3_M_out;
  assign HNICPIPE_RSFEC_CORRECTED_CWB_INC_0_M = HNICPIPE_RSFEC_CORRECTED_CWB_INC_0_M_out;
  assign HNICPIPE_RSFEC_CORRECTED_CWB_INC_1_M = HNICPIPE_RSFEC_CORRECTED_CWB_INC_1_M_out;
  assign HNICPIPE_RSFEC_CORRECTED_CWB_INC_2_M = HNICPIPE_RSFEC_CORRECTED_CWB_INC_2_M_out;
  assign HNICPIPE_RSFEC_CORRECTED_CWB_INC_3_M = HNICPIPE_RSFEC_CORRECTED_CWB_INC_3_M_out;
  assign HNICPIPE_RSFEC_CORRECTED_CW_INC_0_M = HNICPIPE_RSFEC_CORRECTED_CW_INC_0_M_out;
  assign HNICPIPE_RSFEC_CORRECTED_CW_INC_1_M = HNICPIPE_RSFEC_CORRECTED_CW_INC_1_M_out;
  assign HNICPIPE_RSFEC_CORRECTED_CW_INC_2_M = HNICPIPE_RSFEC_CORRECTED_CW_INC_2_M_out;
  assign HNICPIPE_RSFEC_CORRECTED_CW_INC_3_M = HNICPIPE_RSFEC_CORRECTED_CW_INC_3_M_out;
  assign HNICPIPE_RSFEC_CWA_ERR_CNT_INC_0_M = HNICPIPE_RSFEC_CWA_ERR_CNT_INC_0_M_out;
  assign HNICPIPE_RSFEC_CWA_ERR_CNT_INC_1_M = HNICPIPE_RSFEC_CWA_ERR_CNT_INC_1_M_out;
  assign HNICPIPE_RSFEC_CWA_ERR_CNT_INC_2_M = HNICPIPE_RSFEC_CWA_ERR_CNT_INC_2_M_out;
  assign HNICPIPE_RSFEC_CWA_ERR_CNT_INC_3_M = HNICPIPE_RSFEC_CWA_ERR_CNT_INC_3_M_out;
  assign HNICPIPE_RSFEC_CWB_ERR_CNT_INC_0_M = HNICPIPE_RSFEC_CWB_ERR_CNT_INC_0_M_out;
  assign HNICPIPE_RSFEC_CWB_ERR_CNT_INC_1_M = HNICPIPE_RSFEC_CWB_ERR_CNT_INC_1_M_out;
  assign HNICPIPE_RSFEC_CWB_ERR_CNT_INC_2_M = HNICPIPE_RSFEC_CWB_ERR_CNT_INC_2_M_out;
  assign HNICPIPE_RSFEC_CWB_ERR_CNT_INC_3_M = HNICPIPE_RSFEC_CWB_ERR_CNT_INC_3_M_out;
  assign HNICPIPE_RSFEC_CWB_INC_0_M = HNICPIPE_RSFEC_CWB_INC_0_M_out;
  assign HNICPIPE_RSFEC_CWB_INC_1_M = HNICPIPE_RSFEC_CWB_INC_1_M_out;
  assign HNICPIPE_RSFEC_CWB_INC_2_M = HNICPIPE_RSFEC_CWB_INC_2_M_out;
  assign HNICPIPE_RSFEC_CWB_INC_3_M = HNICPIPE_RSFEC_CWB_INC_3_M_out;
  assign HNICPIPE_RSFEC_CW_INC_0_M = HNICPIPE_RSFEC_CW_INC_0_M_out;
  assign HNICPIPE_RSFEC_CW_INC_1_M = HNICPIPE_RSFEC_CW_INC_1_M_out;
  assign HNICPIPE_RSFEC_CW_INC_2_M = HNICPIPE_RSFEC_CW_INC_2_M_out;
  assign HNICPIPE_RSFEC_CW_INC_3_M = HNICPIPE_RSFEC_CW_INC_3_M_out;
  assign HNICPIPE_RSFEC_L0_ERR_CNT_INC_0_M = HNICPIPE_RSFEC_L0_ERR_CNT_INC_0_M_out;
  assign HNICPIPE_RSFEC_L0_ERR_CNT_INC_1_M = HNICPIPE_RSFEC_L0_ERR_CNT_INC_1_M_out;
  assign HNICPIPE_RSFEC_L0_ERR_CNT_INC_2_M = HNICPIPE_RSFEC_L0_ERR_CNT_INC_2_M_out;
  assign HNICPIPE_RSFEC_L0_ERR_CNT_INC_3_M = HNICPIPE_RSFEC_L0_ERR_CNT_INC_3_M_out;
  assign HNICPIPE_RSFEC_L1_ERR_CNT_INC_0_M = HNICPIPE_RSFEC_L1_ERR_CNT_INC_0_M_out;
  assign HNICPIPE_RSFEC_L1_ERR_CNT_INC_1_M = HNICPIPE_RSFEC_L1_ERR_CNT_INC_1_M_out;
  assign HNICPIPE_RSFEC_L1_ERR_CNT_INC_2_M = HNICPIPE_RSFEC_L1_ERR_CNT_INC_2_M_out;
  assign HNICPIPE_RSFEC_L1_ERR_CNT_INC_3_M = HNICPIPE_RSFEC_L1_ERR_CNT_INC_3_M_out;
  assign HNICPIPE_RSFEC_L2_ERR_CNT_INC_0_M = HNICPIPE_RSFEC_L2_ERR_CNT_INC_0_M_out;
  assign HNICPIPE_RSFEC_L2_ERR_CNT_INC_1_M = HNICPIPE_RSFEC_L2_ERR_CNT_INC_1_M_out;
  assign HNICPIPE_RSFEC_L2_ERR_CNT_INC_2_M = HNICPIPE_RSFEC_L2_ERR_CNT_INC_2_M_out;
  assign HNICPIPE_RSFEC_L2_ERR_CNT_INC_3_M = HNICPIPE_RSFEC_L2_ERR_CNT_INC_3_M_out;
  assign HNICPIPE_RSFEC_L3_ERR_CNT_INC_0_M = HNICPIPE_RSFEC_L3_ERR_CNT_INC_0_M_out;
  assign HNICPIPE_RSFEC_L3_ERR_CNT_INC_1_M = HNICPIPE_RSFEC_L3_ERR_CNT_INC_1_M_out;
  assign HNICPIPE_RSFEC_L3_ERR_CNT_INC_2_M = HNICPIPE_RSFEC_L3_ERR_CNT_INC_2_M_out;
  assign HNICPIPE_RSFEC_L3_ERR_CNT_INC_3_M = HNICPIPE_RSFEC_L3_ERR_CNT_INC_3_M_out;
  assign HNICPIPE_RSFEC_MAPPING_0_M = HNICPIPE_RSFEC_MAPPING_0_M_out;
  assign HNICPIPE_RSFEC_MAPPING_1_M = HNICPIPE_RSFEC_MAPPING_1_M_out;
  assign HNICPIPE_RSFEC_MAPPING_2_M = HNICPIPE_RSFEC_MAPPING_2_M_out;
  assign HNICPIPE_RSFEC_MAPPING_3_M = HNICPIPE_RSFEC_MAPPING_3_M_out;
  assign HNICPIPE_RSFEC_UNCORRECTED_CWB_INC_0_M = HNICPIPE_RSFEC_UNCORRECTED_CWB_INC_0_M_out;
  assign HNICPIPE_RSFEC_UNCORRECTED_CWB_INC_1_M = HNICPIPE_RSFEC_UNCORRECTED_CWB_INC_1_M_out;
  assign HNICPIPE_RSFEC_UNCORRECTED_CWB_INC_2_M = HNICPIPE_RSFEC_UNCORRECTED_CWB_INC_2_M_out;
  assign HNICPIPE_RSFEC_UNCORRECTED_CWB_INC_3_M = HNICPIPE_RSFEC_UNCORRECTED_CWB_INC_3_M_out;
  assign HNICPIPE_RSFEC_UNCORRECTED_CW_INC_0_M = HNICPIPE_RSFEC_UNCORRECTED_CW_INC_0_M_out;
  assign HNICPIPE_RSFEC_UNCORRECTED_CW_INC_1_M = HNICPIPE_RSFEC_UNCORRECTED_CW_INC_1_M_out;
  assign HNICPIPE_RSFEC_UNCORRECTED_CW_INC_2_M = HNICPIPE_RSFEC_UNCORRECTED_CW_INC_2_M_out;
  assign HNICPIPE_RSFEC_UNCORRECTED_CW_INC_3_M = HNICPIPE_RSFEC_UNCORRECTED_CW_INC_3_M_out;
  assign HNICPIPE_RXUSRCLK_BOT2TOP_OUT = HNICPIPE_RXUSRCLK_BOT2TOP_OUT_out;
  assign HNICPIPE_RX_RST_BOT2TOP_OUT = HNICPIPE_RX_RST_BOT2TOP_OUT_out;
  assign HNICPIPE_RX_SERDES_CLK = HNICPIPE_RX_SERDES_CLK_out;
  assign HNICPIPE_TXDATA_TOP2BOT0 = HNICPIPE_TXDATA_TOP2BOT0_out;
  assign HNICPIPE_TXDATA_TOP2BOT1 = HNICPIPE_TXDATA_TOP2BOT1_out;
  assign HNICPIPE_TXDATA_TOP2BOT2 = HNICPIPE_TXDATA_TOP2BOT2_out;
  assign HNICPIPE_TXDATA_TOP2BOT3 = HNICPIPE_TXDATA_TOP2BOT3_out;
  assign HNICPIPE_TXUSRCLK_BOT2TOP_OUT = HNICPIPE_TXUSRCLK_BOT2TOP_OUT_out;
  assign HNICPIPE_TX_RST_BOT2TOP_OUT = HNICPIPE_TX_RST_BOT2TOP_OUT_out;
  assign HNICPIPE_TX_SERDES_CLK = HNICPIPE_TX_SERDES_CLK_out;
  assign HNICPIPE_UBLAZE_ACK_0 = HNICPIPE_UBLAZE_ACK_0_out;
  assign HNICPIPE_UBLAZE_ACK_1 = HNICPIPE_UBLAZE_ACK_1_out;
  assign HNICPIPE_UBLAZE_DATA_0_M = HNICPIPE_UBLAZE_DATA_0_M_out;
  assign HNICPIPE_UBLAZE_DATA_1_M = HNICPIPE_UBLAZE_DATA_1_M_out;
  assign HNICPIPE_UBLAZE_DEN_0_M = HNICPIPE_UBLAZE_DEN_0_M_out;
  assign HNICPIPE_UBLAZE_DEN_1_M = HNICPIPE_UBLAZE_DEN_1_M_out;
  assign HSCLK0_LCPLLFBCLKLOST = HSCLK0_LCPLLFBCLKLOST_out;
  assign HSCLK0_LCPLLFBDIV_M = HSCLK0_LCPLLFBDIV_M_out;
  assign HSCLK0_LCPLLGTGREFCLK_M = HSCLK0_LCPLLGTGREFCLK_M_out;
  assign HSCLK0_LCPLLLOCK = HSCLK0_LCPLLLOCK_out;
  assign HSCLK0_LCPLLPD_M = HSCLK0_LCPLLPD_M_out;
  assign HSCLK0_LCPLLREFCLKLOST = HSCLK0_LCPLLREFCLKLOST_out;
  assign HSCLK0_LCPLLREFCLKMONITOR = HSCLK0_LCPLLREFCLKMONITOR_out;
  assign HSCLK0_LCPLLREFCLKSEL_M = HSCLK0_LCPLLREFCLKSEL_M_out;
  assign HSCLK0_LCPLLRESETBYPASSMODE_M = HSCLK0_LCPLLRESETBYPASSMODE_M_out;
  assign HSCLK0_LCPLLRESETMASK_M = HSCLK0_LCPLLRESETMASK_M_out;
  assign HSCLK0_LCPLLRESET_M = HSCLK0_LCPLLRESET_M_out;
  assign HSCLK0_LCPLLSDMDATA_M = HSCLK0_LCPLLSDMDATA_M_out;
  assign HSCLK0_LCPLLSDMTOGGLE_M = HSCLK0_LCPLLSDMTOGGLE_M_out;
  assign HSCLK1_LCPLLFBCLKLOST = HSCLK1_LCPLLFBCLKLOST_out;
  assign HSCLK1_LCPLLFBDIV_M = HSCLK1_LCPLLFBDIV_M_out;
  assign HSCLK1_LCPLLGTGREFCLK_M = HSCLK1_LCPLLGTGREFCLK_M_out;
  assign HSCLK1_LCPLLLOCK = HSCLK1_LCPLLLOCK_out;
  assign HSCLK1_LCPLLPD_M = HSCLK1_LCPLLPD_M_out;
  assign HSCLK1_LCPLLREFCLKLOST = HSCLK1_LCPLLREFCLKLOST_out;
  assign HSCLK1_LCPLLREFCLKMONITOR = HSCLK1_LCPLLREFCLKMONITOR_out;
  assign HSCLK1_LCPLLREFCLKSEL_M = HSCLK1_LCPLLREFCLKSEL_M_out;
  assign HSCLK1_LCPLLRESETBYPASSMODE_M = HSCLK1_LCPLLRESETBYPASSMODE_M_out;
  assign HSCLK1_LCPLLRESETMASK_M = HSCLK1_LCPLLRESETMASK_M_out;
  assign HSCLK1_LCPLLRESET_M = HSCLK1_LCPLLRESET_M_out;
  assign HSCLK1_LCPLLSDMDATA_M = HSCLK1_LCPLLSDMDATA_M_out;
  assign HSCLK1_LCPLLSDMTOGGLE_M = HSCLK1_LCPLLSDMTOGGLE_M_out;
  assign M0_AXIS_TDATA = M0_AXIS_TDATA_out;
  assign M0_AXIS_TLAST = M0_AXIS_TLAST_out;
  assign M0_AXIS_TREADY_M = M0_AXIS_TREADY_M_out;
  assign M0_AXIS_TVALID = M0_AXIS_TVALID_out;
  assign M1_AXIS_TDATA = M1_AXIS_TDATA_out;
  assign M1_AXIS_TLAST = M1_AXIS_TLAST_out;
  assign M1_AXIS_TREADY_M = M1_AXIS_TREADY_M_out;
  assign M1_AXIS_TVALID = M1_AXIS_TVALID_out;
  assign M2_AXIS_TDATA = M2_AXIS_TDATA_out;
  assign M2_AXIS_TLAST = M2_AXIS_TLAST_out;
  assign M2_AXIS_TREADY_M = M2_AXIS_TREADY_M_out;
  assign M2_AXIS_TVALID = M2_AXIS_TVALID_out;
  assign M3_AXIS_TDATA = M3_AXIS_TDATA_out;
  assign M3_AXIS_TLAST = M3_AXIS_TLAST_out;
  assign M3_AXIS_TREADY_M = M3_AXIS_TREADY_M_out;
  assign M3_AXIS_TVALID = M3_AXIS_TVALID_out;
  assign MSTRXRESETDONE = MSTRXRESETDONE_out;
  assign MSTRXRESET_M = MSTRXRESET_M_out;
  assign MSTTXRESETDONE = MSTTXRESETDONE_out;
  assign MSTTXRESET_M = MSTTXRESET_M_out;
  assign REFCLK0_CLKTESTSIG_M = REFCLK0_CLKTESTSIG_M_out;
  assign REFCLK0_GTREFCLKPD_M = REFCLK0_GTREFCLKPD_M_out;
  assign REFCLK1_CLKTESTSIG_M = REFCLK1_CLKTESTSIG_M_out;
  assign REFCLK1_GTREFCLKPD_M = REFCLK1_GTREFCLKPD_M_out;
  assign S0_AXIS_TDATA_M = S0_AXIS_TDATA_M_out;
  assign S0_AXIS_TLAST_M = S0_AXIS_TLAST_M_out;
  assign S0_AXIS_TREADY = S0_AXIS_TREADY_out;
  assign S0_AXIS_TVALID_M = S0_AXIS_TVALID_M_out;
  assign S1_AXIS_TDATA_M = S1_AXIS_TDATA_M_out;
  assign S1_AXIS_TLAST_M = S1_AXIS_TLAST_M_out;
  assign S1_AXIS_TREADY = S1_AXIS_TREADY_out;
  assign S1_AXIS_TVALID_M = S1_AXIS_TVALID_M_out;
  assign S2_AXIS_TDATA_M = S2_AXIS_TDATA_M_out;
  assign S2_AXIS_TLAST_M = S2_AXIS_TLAST_M_out;
  assign S2_AXIS_TREADY = S2_AXIS_TREADY_out;
  assign S2_AXIS_TVALID_M = S2_AXIS_TVALID_M_out;
  assign S3_AXIS_TDATA_M = S3_AXIS_TDATA_M_out;
  assign S3_AXIS_TLAST_M = S3_AXIS_TLAST_M_out;
  assign S3_AXIS_TREADY = S3_AXIS_TREADY_out;
  assign S3_AXIS_TVALID_M = S3_AXIS_TVALID_M_out;
  assign TRIGACKIN0 = TRIGACKIN0_out;
  assign TRIGACKOUT0_M = TRIGACKOUT0_M_out;
  assign TRIGIN0_M = TRIGIN0_M_out;
  assign TRIGOUT0 = TRIGOUT0_out;
  assign UBENABLE_M = UBENABLE_M_out;
  assign UBINTERRUPT = UBINTERRUPT_out;
  assign UBINTR_M = UBINTR_M_out;
  assign UBIOLMBRST_M = UBIOLMBRST_M_out;
  assign UBMBRST_M = UBMBRST_M_out;
  assign UBRXUART_M = UBRXUART_M_out;
  assign UBTXUART = UBTXUART_out;
  assign UNCORRECTERR = UNCORRECTERR_out;

  assign APB3CLK_in = (APB3CLK === 1'bz) || APB3CLK; // rv 1
  assign APB3PADDR_in[0] = (APB3PADDR[0] === 1'bz) || APB3PADDR[0]; // rv 1
  assign APB3PADDR_in[10] = (APB3PADDR[10] === 1'bz) || APB3PADDR[10]; // rv 1
  assign APB3PADDR_in[11] = (APB3PADDR[11] === 1'bz) || APB3PADDR[11]; // rv 1
  assign APB3PADDR_in[12] = (APB3PADDR[12] === 1'bz) || APB3PADDR[12]; // rv 1
  assign APB3PADDR_in[13] = (APB3PADDR[13] === 1'bz) || APB3PADDR[13]; // rv 1
  assign APB3PADDR_in[14] = (APB3PADDR[14] === 1'bz) || APB3PADDR[14]; // rv 1
  assign APB3PADDR_in[15] = (APB3PADDR[15] === 1'bz) || APB3PADDR[15]; // rv 1
  assign APB3PADDR_in[1] = (APB3PADDR[1] === 1'bz) || APB3PADDR[1]; // rv 1
  assign APB3PADDR_in[2] = (APB3PADDR[2] === 1'bz) || APB3PADDR[2]; // rv 1
  assign APB3PADDR_in[3] = (APB3PADDR[3] === 1'bz) || APB3PADDR[3]; // rv 1
  assign APB3PADDR_in[4] = (APB3PADDR[4] === 1'bz) || APB3PADDR[4]; // rv 1
  assign APB3PADDR_in[5] = (APB3PADDR[5] === 1'bz) || APB3PADDR[5]; // rv 1
  assign APB3PADDR_in[6] = (APB3PADDR[6] === 1'bz) || APB3PADDR[6]; // rv 1
  assign APB3PADDR_in[7] = (APB3PADDR[7] === 1'bz) || APB3PADDR[7]; // rv 1
  assign APB3PADDR_in[8] = (APB3PADDR[8] === 1'bz) || APB3PADDR[8]; // rv 1
  assign APB3PADDR_in[9] = (APB3PADDR[9] === 1'bz) || APB3PADDR[9]; // rv 1
  assign APB3PENABLE_in = (APB3PENABLE === 1'bz) || APB3PENABLE; // rv 1
  assign APB3PRDATA_M_in = APB3PRDATA_M;
  assign APB3PREADY_M_in = APB3PREADY_M;
  assign APB3PRESETN_in = (APB3PRESETN === 1'bz) || APB3PRESETN; // rv 1
  assign APB3PSEL_in = (APB3PSEL === 1'bz) || APB3PSEL; // rv 1
  assign APB3PSLVERR_M_in = APB3PSLVERR_M;
  assign APB3PWDATA_in[0] = (APB3PWDATA[0] === 1'bz) || APB3PWDATA[0]; // rv 1
  assign APB3PWDATA_in[10] = (APB3PWDATA[10] === 1'bz) || APB3PWDATA[10]; // rv 1
  assign APB3PWDATA_in[11] = (APB3PWDATA[11] === 1'bz) || APB3PWDATA[11]; // rv 1
  assign APB3PWDATA_in[12] = (APB3PWDATA[12] === 1'bz) || APB3PWDATA[12]; // rv 1
  assign APB3PWDATA_in[13] = (APB3PWDATA[13] === 1'bz) || APB3PWDATA[13]; // rv 1
  assign APB3PWDATA_in[14] = (APB3PWDATA[14] === 1'bz) || APB3PWDATA[14]; // rv 1
  assign APB3PWDATA_in[15] = (APB3PWDATA[15] === 1'bz) || APB3PWDATA[15]; // rv 1
  assign APB3PWDATA_in[16] = (APB3PWDATA[16] === 1'bz) || APB3PWDATA[16]; // rv 1
  assign APB3PWDATA_in[17] = (APB3PWDATA[17] === 1'bz) || APB3PWDATA[17]; // rv 1
  assign APB3PWDATA_in[18] = (APB3PWDATA[18] === 1'bz) || APB3PWDATA[18]; // rv 1
  assign APB3PWDATA_in[19] = (APB3PWDATA[19] === 1'bz) || APB3PWDATA[19]; // rv 1
  assign APB3PWDATA_in[1] = (APB3PWDATA[1] === 1'bz) || APB3PWDATA[1]; // rv 1
  assign APB3PWDATA_in[20] = (APB3PWDATA[20] === 1'bz) || APB3PWDATA[20]; // rv 1
  assign APB3PWDATA_in[21] = (APB3PWDATA[21] === 1'bz) || APB3PWDATA[21]; // rv 1
  assign APB3PWDATA_in[22] = (APB3PWDATA[22] === 1'bz) || APB3PWDATA[22]; // rv 1
  assign APB3PWDATA_in[23] = (APB3PWDATA[23] === 1'bz) || APB3PWDATA[23]; // rv 1
  assign APB3PWDATA_in[24] = (APB3PWDATA[24] === 1'bz) || APB3PWDATA[24]; // rv 1
  assign APB3PWDATA_in[25] = (APB3PWDATA[25] === 1'bz) || APB3PWDATA[25]; // rv 1
  assign APB3PWDATA_in[26] = (APB3PWDATA[26] === 1'bz) || APB3PWDATA[26]; // rv 1
  assign APB3PWDATA_in[27] = (APB3PWDATA[27] === 1'bz) || APB3PWDATA[27]; // rv 1
  assign APB3PWDATA_in[28] = (APB3PWDATA[28] === 1'bz) || APB3PWDATA[28]; // rv 1
  assign APB3PWDATA_in[29] = (APB3PWDATA[29] === 1'bz) || APB3PWDATA[29]; // rv 1
  assign APB3PWDATA_in[2] = (APB3PWDATA[2] === 1'bz) || APB3PWDATA[2]; // rv 1
  assign APB3PWDATA_in[30] = (APB3PWDATA[30] === 1'bz) || APB3PWDATA[30]; // rv 1
  assign APB3PWDATA_in[31] = (APB3PWDATA[31] === 1'bz) || APB3PWDATA[31]; // rv 1
  assign APB3PWDATA_in[3] = (APB3PWDATA[3] === 1'bz) || APB3PWDATA[3]; // rv 1
  assign APB3PWDATA_in[4] = (APB3PWDATA[4] === 1'bz) || APB3PWDATA[4]; // rv 1
  assign APB3PWDATA_in[5] = (APB3PWDATA[5] === 1'bz) || APB3PWDATA[5]; // rv 1
  assign APB3PWDATA_in[6] = (APB3PWDATA[6] === 1'bz) || APB3PWDATA[6]; // rv 1
  assign APB3PWDATA_in[7] = (APB3PWDATA[7] === 1'bz) || APB3PWDATA[7]; // rv 1
  assign APB3PWDATA_in[8] = (APB3PWDATA[8] === 1'bz) || APB3PWDATA[8]; // rv 1
  assign APB3PWDATA_in[9] = (APB3PWDATA[9] === 1'bz) || APB3PWDATA[9]; // rv 1
  assign APB3PWRITE_in = (APB3PWRITE === 1'bz) || APB3PWRITE; // rv 1
  assign AXISCLK_in = (AXISCLK === 1'bz) || AXISCLK; // rv 1
  assign BGBYPASSB_in = BGBYPASSB;
  assign BGMONITORENB_in = (BGMONITORENB === 1'bz) || BGMONITORENB; // rv 1
  assign BGPDB_in = BGPDB;
  assign BGRCALOVRDENB_in = BGRCALOVRDENB;
  assign BGRCALOVRD_in[0] = (BGRCALOVRD[0] === 1'bz) || BGRCALOVRD[0]; // rv 1
  assign BGRCALOVRD_in[1] = (BGRCALOVRD[1] === 1'bz) || BGRCALOVRD[1]; // rv 1
  assign BGRCALOVRD_in[2] = (BGRCALOVRD[2] === 1'bz) || BGRCALOVRD[2]; // rv 1
  assign BGRCALOVRD_in[3] = (BGRCALOVRD[3] === 1'bz) || BGRCALOVRD[3]; // rv 1
  assign BGRCALOVRD_in[4] = (BGRCALOVRD[4] === 1'bz) || BGRCALOVRD[4]; // rv 1
  assign CH0_CDRFREQOS_in = (CH0_CDRFREQOS === 1'bz) || CH0_CDRFREQOS; // rv 1
  assign CH0_CDRINCPCTRL_in = (CH0_CDRINCPCTRL === 1'bz) || CH0_CDRINCPCTRL; // rv 1
  assign CH0_CDRSTEPDIR_in = (CH0_CDRSTEPDIR === 1'bz) || CH0_CDRSTEPDIR; // rv 1
  assign CH0_CDRSTEPSQ_in = (CH0_CDRSTEPSQ === 1'bz) || CH0_CDRSTEPSQ; // rv 1
  assign CH0_CDRSTEPSX_in = (CH0_CDRSTEPSX === 1'bz) || CH0_CDRSTEPSX; // rv 1
  assign CH0_CLKRSVD1_in = (CH0_CLKRSVD1 === 1'bz) || CH0_CLKRSVD1; // rv 1
  assign CH0_DMONFIFORESET_in = (CH0_DMONFIFORESET === 1'bz) || CH0_DMONFIFORESET; // rv 1
  assign CH0_DMONITORCLK_in = (CH0_DMONITORCLK === 1'bz) || CH0_DMONITORCLK; // rv 1
  assign CH0_DMONITOROUT_M_in = CH0_DMONITOROUT_M;
  assign CH0_EYESCANDATAERROR_M_in = CH0_EYESCANDATAERROR_M;
  assign CH0_EYESCANRESET_in = (CH0_EYESCANRESET === 1'bz) || CH0_EYESCANRESET; // rv 1
  assign CH0_EYESCANTRIGGER_in = (CH0_EYESCANTRIGGER === 1'bz) || CH0_EYESCANTRIGGER; // rv 1
  assign CH0_GTRSVD_in[0] = (CH0_GTRSVD[0] === 1'bz) || CH0_GTRSVD[0]; // rv 1
  assign CH0_GTRSVD_in[10] = (CH0_GTRSVD[10] === 1'bz) || CH0_GTRSVD[10]; // rv 1
  assign CH0_GTRSVD_in[11] = (CH0_GTRSVD[11] === 1'bz) || CH0_GTRSVD[11]; // rv 1
  assign CH0_GTRSVD_in[12] = (CH0_GTRSVD[12] === 1'bz) || CH0_GTRSVD[12]; // rv 1
  assign CH0_GTRSVD_in[13] = (CH0_GTRSVD[13] === 1'bz) || CH0_GTRSVD[13]; // rv 1
  assign CH0_GTRSVD_in[14] = (CH0_GTRSVD[14] === 1'bz) || CH0_GTRSVD[14]; // rv 1
  assign CH0_GTRSVD_in[15] = (CH0_GTRSVD[15] === 1'bz) || CH0_GTRSVD[15]; // rv 1
  assign CH0_GTRSVD_in[1] = (CH0_GTRSVD[1] === 1'bz) || CH0_GTRSVD[1]; // rv 1
  assign CH0_GTRSVD_in[2] = (CH0_GTRSVD[2] === 1'bz) || CH0_GTRSVD[2]; // rv 1
  assign CH0_GTRSVD_in[3] = (CH0_GTRSVD[3] === 1'bz) || CH0_GTRSVD[3]; // rv 1
  assign CH0_GTRSVD_in[4] = (CH0_GTRSVD[4] === 1'bz) || CH0_GTRSVD[4]; // rv 1
  assign CH0_GTRSVD_in[5] = (CH0_GTRSVD[5] === 1'bz) || CH0_GTRSVD[5]; // rv 1
  assign CH0_GTRSVD_in[6] = (CH0_GTRSVD[6] === 1'bz) || CH0_GTRSVD[6]; // rv 1
  assign CH0_GTRSVD_in[7] = (CH0_GTRSVD[7] === 1'bz) || CH0_GTRSVD[7]; // rv 1
  assign CH0_GTRSVD_in[8] = (CH0_GTRSVD[8] === 1'bz) || CH0_GTRSVD[8]; // rv 1
  assign CH0_GTRSVD_in[9] = (CH0_GTRSVD[9] === 1'bz) || CH0_GTRSVD[9]; // rv 1
  assign CH0_GTRXRESET_in = (CH0_GTRXRESET === 1'bz) || CH0_GTRXRESET; // rv 1
  assign CH0_GTTXRESET_in = (CH0_GTTXRESET === 1'bz) || CH0_GTTXRESET; // rv 1
  assign CH0_ILORESETDONE_M_in = CH0_ILORESETDONE_M;
  assign CH0_ILORESETMASK_in = (CH0_ILORESETMASK === 1'bz) || CH0_ILORESETMASK; // rv 1
  assign CH0_ILORESET_in = (CH0_ILORESET === 1'bz) || CH0_ILORESET; // rv 1
  assign CH0_LOOPBACK_in[0] = (CH0_LOOPBACK[0] === 1'bz) || CH0_LOOPBACK[0]; // rv 1
  assign CH0_LOOPBACK_in[1] = (CH0_LOOPBACK[1] === 1'bz) || CH0_LOOPBACK[1]; // rv 1
  assign CH0_LOOPBACK_in[2] = (CH0_LOOPBACK[2] === 1'bz) || CH0_LOOPBACK[2]; // rv 1
  assign CH0_PCSRSVDIN_in[0] = (CH0_PCSRSVDIN[0] === 1'bz) || CH0_PCSRSVDIN[0]; // rv 1
  assign CH0_PCSRSVDIN_in[1] = (CH0_PCSRSVDIN[1] === 1'bz) || CH0_PCSRSVDIN[1]; // rv 1
  assign CH0_PCSRSVDIN_in[2] = (CH0_PCSRSVDIN[2] === 1'bz) || CH0_PCSRSVDIN[2]; // rv 1
  assign CH0_PCSRSVDIN_in[3] = (CH0_PCSRSVDIN[3] === 1'bz) || CH0_PCSRSVDIN[3]; // rv 1
  assign CH0_PCSRSVDIN_in[4] = (CH0_PCSRSVDIN[4] === 1'bz) || CH0_PCSRSVDIN[4]; // rv 1
  assign CH0_PCSRSVDOUT_M_in = CH0_PCSRSVDOUT_M;
  assign CH0_PINRSVDAS_M_in = CH0_PINRSVDAS_M;
  assign CH0_REFDEBUGOUT_M_in = CH0_REFDEBUGOUT_M;
  assign CH0_RESETEXCEPTION_M_in = CH0_RESETEXCEPTION_M;
  assign CH0_RXBUFSTATUS_M_in = CH0_RXBUFSTATUS_M;
  assign CH0_RXCDRHOLD_in = (CH0_RXCDRHOLD === 1'bz) || CH0_RXCDRHOLD; // rv 1
  assign CH0_RXCDRLOCK_M_in = CH0_RXCDRLOCK_M;
  assign CH0_RXCDROVRDEN_in = (CH0_RXCDROVRDEN === 1'bz) || CH0_RXCDROVRDEN; // rv 1
  assign CH0_RXCDRPHDONE_M_in = CH0_RXCDRPHDONE_M;
  assign CH0_RXCDRRESET_in = (CH0_RXCDRRESET === 1'bz) || CH0_RXCDRRESET; // rv 1
  assign CH0_RXDATA_M_in = CH0_RXDATA_M;
  assign CH0_RXDEBUGPCSOUT_M_in = CH0_RXDEBUGPCSOUT_M;
  assign CH0_RXLATCLK_in = (CH0_RXLATCLK === 1'bz) || CH0_RXLATCLK; // rv 1
  assign CH0_RXPCSRESETMASK_in[0] = (CH0_RXPCSRESETMASK[0] === 1'bz) || CH0_RXPCSRESETMASK[0]; // rv 1
  assign CH0_RXPCSRESETMASK_in[1] = (CH0_RXPCSRESETMASK[1] === 1'bz) || CH0_RXPCSRESETMASK[1]; // rv 1
  assign CH0_RXPCSRESETMASK_in[2] = (CH0_RXPCSRESETMASK[2] === 1'bz) || CH0_RXPCSRESETMASK[2]; // rv 1
  assign CH0_RXPD_in[0] = (CH0_RXPD[0] === 1'bz) || CH0_RXPD[0]; // rv 1
  assign CH0_RXPD_in[1] = (CH0_RXPD[1] === 1'bz) || CH0_RXPD[1]; // rv 1
  assign CH0_RXPERST_in = (CH0_RXPERST === 1'bz) || CH0_RXPERST; // rv 1
  assign CH0_RXPMARESETDONE_M_in = CH0_RXPMARESETDONE_M;
  assign CH0_RXPMARESETMASK_in[0] = (CH0_RXPMARESETMASK[0] === 1'bz) || CH0_RXPMARESETMASK[0]; // rv 1
  assign CH0_RXPMARESETMASK_in[1] = (CH0_RXPMARESETMASK[1] === 1'bz) || CH0_RXPMARESETMASK[1]; // rv 1
  assign CH0_RXPMARESETMASK_in[2] = (CH0_RXPMARESETMASK[2] === 1'bz) || CH0_RXPMARESETMASK[2]; // rv 1
  assign CH0_RXPMARESETMASK_in[3] = (CH0_RXPMARESETMASK[3] === 1'bz) || CH0_RXPMARESETMASK[3]; // rv 1
  assign CH0_RXPMARESETMASK_in[4] = (CH0_RXPMARESETMASK[4] === 1'bz) || CH0_RXPMARESETMASK[4]; // rv 1
  assign CH0_RXPMARESETMASK_in[5] = (CH0_RXPMARESETMASK[5] === 1'bz) || CH0_RXPMARESETMASK[5]; // rv 1
  assign CH0_RXPMARESETMASK_in[6] = (CH0_RXPMARESETMASK[6] === 1'bz) || CH0_RXPMARESETMASK[6]; // rv 1
  assign CH0_RXPMARESETMASK_in[7] = (CH0_RXPMARESETMASK[7] === 1'bz) || CH0_RXPMARESETMASK[7]; // rv 1
  assign CH0_RXPOLARITY_in = (CH0_RXPOLARITY === 1'bz) || CH0_RXPOLARITY; // rv 1
  assign CH0_RXPRBSCNTRESET_in = (CH0_RXPRBSCNTRESET === 1'bz) || CH0_RXPRBSCNTRESET; // rv 1
  assign CH0_RXPRBSCNTSTOP_in = (CH0_RXPRBSCNTSTOP === 1'bz) || CH0_RXPRBSCNTSTOP; // rv 1
  assign CH0_RXPRBSERR_M_in = CH0_RXPRBSERR_M;
  assign CH0_RXPRBSLOCKED_M_in = CH0_RXPRBSLOCKED_M;
  assign CH0_RXPRBSSEL_in[0] = (CH0_RXPRBSSEL[0] === 1'bz) || CH0_RXPRBSSEL[0]; // rv 1
  assign CH0_RXPRBSSEL_in[1] = (CH0_RXPRBSSEL[1] === 1'bz) || CH0_RXPRBSSEL[1]; // rv 1
  assign CH0_RXPRBSSEL_in[2] = (CH0_RXPRBSSEL[2] === 1'bz) || CH0_RXPRBSSEL[2]; // rv 1
  assign CH0_RXPRBSSEL_in[3] = (CH0_RXPRBSSEL[3] === 1'bz) || CH0_RXPRBSSEL[3]; // rv 1
  assign CH0_RXPROGDIVRESETDONE_M_in = CH0_RXPROGDIVRESETDONE_M;
  assign CH0_RXPROGDIVRESET_in = (CH0_RXPROGDIVRESET === 1'bz) || CH0_RXPROGDIVRESET; // rv 1
  assign CH0_RXQPRBSEN_in = (CH0_RXQPRBSEN === 1'bz) || CH0_RXQPRBSEN; // rv 1
  assign CH0_RXRATE_in[0] = (CH0_RXRATE[0] === 1'bz) || CH0_RXRATE[0]; // rv 1
  assign CH0_RXRATE_in[1] = (CH0_RXRATE[1] === 1'bz) || CH0_RXRATE[1]; // rv 1
  assign CH0_RXRATE_in[2] = (CH0_RXRATE[2] === 1'bz) || CH0_RXRATE[2]; // rv 1
  assign CH0_RXRATE_in[3] = (CH0_RXRATE[3] === 1'bz) || CH0_RXRATE[3]; // rv 1
  assign CH0_RXRATE_in[4] = (CH0_RXRATE[4] === 1'bz) || CH0_RXRATE[4]; // rv 1
  assign CH0_RXRATE_in[5] = (CH0_RXRATE[5] === 1'bz) || CH0_RXRATE[5]; // rv 1
  assign CH0_RXRATE_in[6] = (CH0_RXRATE[6] === 1'bz) || CH0_RXRATE[6]; // rv 1
  assign CH0_RXRATE_in[7] = (CH0_RXRATE[7] === 1'bz) || CH0_RXRATE[7]; // rv 1
  assign CH0_RXRESETDONE_M_in = CH0_RXRESETDONE_M;
  assign CH0_RXRESETMODE_in[0] = (CH0_RXRESETMODE[0] === 1'bz) || CH0_RXRESETMODE[0]; // rv 1
  assign CH0_RXRESETMODE_in[1] = (CH0_RXRESETMODE[1] === 1'bz) || CH0_RXRESETMODE[1]; // rv 1
  assign CH0_RXRSV0_in = (CH0_RXRSV0 === 1'bz) || CH0_RXRSV0; // rv 1
  assign CH0_RXRSV1_in = (CH0_RXRSV1 === 1'bz) || CH0_RXRSV1; // rv 1
  assign CH0_RXRSV2_in = (CH0_RXRSV2 === 1'bz) || CH0_RXRSV2; // rv 1
  assign CH0_RXUSERRDY_in = (CH0_RXUSERRDY === 1'bz) || CH0_RXUSERRDY; // rv 1
  assign CH0_RXUSRCLK_in = (CH0_RXUSRCLK === 1'bz) || CH0_RXUSRCLK; // rv 1
  assign CH0_TSTCLK0_in = (CH0_TSTCLK0 === 1'bz) || CH0_TSTCLK0; // rv 1
  assign CH0_TSTCLK1_in = (CH0_TSTCLK1 === 1'bz) || CH0_TSTCLK1; // rv 1
  assign CH0_TXBUFSTATUS_M_in = CH0_TXBUFSTATUS_M;
  assign CH0_TXDATA_in[0] = (CH0_TXDATA[0] === 1'bz) || CH0_TXDATA[0]; // rv 1
  assign CH0_TXDATA_in[100] = (CH0_TXDATA[100] === 1'bz) || CH0_TXDATA[100]; // rv 1
  assign CH0_TXDATA_in[101] = (CH0_TXDATA[101] === 1'bz) || CH0_TXDATA[101]; // rv 1
  assign CH0_TXDATA_in[102] = (CH0_TXDATA[102] === 1'bz) || CH0_TXDATA[102]; // rv 1
  assign CH0_TXDATA_in[103] = (CH0_TXDATA[103] === 1'bz) || CH0_TXDATA[103]; // rv 1
  assign CH0_TXDATA_in[104] = (CH0_TXDATA[104] === 1'bz) || CH0_TXDATA[104]; // rv 1
  assign CH0_TXDATA_in[105] = (CH0_TXDATA[105] === 1'bz) || CH0_TXDATA[105]; // rv 1
  assign CH0_TXDATA_in[106] = (CH0_TXDATA[106] === 1'bz) || CH0_TXDATA[106]; // rv 1
  assign CH0_TXDATA_in[107] = (CH0_TXDATA[107] === 1'bz) || CH0_TXDATA[107]; // rv 1
  assign CH0_TXDATA_in[108] = (CH0_TXDATA[108] === 1'bz) || CH0_TXDATA[108]; // rv 1
  assign CH0_TXDATA_in[109] = (CH0_TXDATA[109] === 1'bz) || CH0_TXDATA[109]; // rv 1
  assign CH0_TXDATA_in[10] = (CH0_TXDATA[10] === 1'bz) || CH0_TXDATA[10]; // rv 1
  assign CH0_TXDATA_in[110] = (CH0_TXDATA[110] === 1'bz) || CH0_TXDATA[110]; // rv 1
  assign CH0_TXDATA_in[111] = (CH0_TXDATA[111] === 1'bz) || CH0_TXDATA[111]; // rv 1
  assign CH0_TXDATA_in[112] = (CH0_TXDATA[112] === 1'bz) || CH0_TXDATA[112]; // rv 1
  assign CH0_TXDATA_in[113] = (CH0_TXDATA[113] === 1'bz) || CH0_TXDATA[113]; // rv 1
  assign CH0_TXDATA_in[114] = (CH0_TXDATA[114] === 1'bz) || CH0_TXDATA[114]; // rv 1
  assign CH0_TXDATA_in[115] = (CH0_TXDATA[115] === 1'bz) || CH0_TXDATA[115]; // rv 1
  assign CH0_TXDATA_in[116] = (CH0_TXDATA[116] === 1'bz) || CH0_TXDATA[116]; // rv 1
  assign CH0_TXDATA_in[117] = (CH0_TXDATA[117] === 1'bz) || CH0_TXDATA[117]; // rv 1
  assign CH0_TXDATA_in[118] = (CH0_TXDATA[118] === 1'bz) || CH0_TXDATA[118]; // rv 1
  assign CH0_TXDATA_in[119] = (CH0_TXDATA[119] === 1'bz) || CH0_TXDATA[119]; // rv 1
  assign CH0_TXDATA_in[11] = (CH0_TXDATA[11] === 1'bz) || CH0_TXDATA[11]; // rv 1
  assign CH0_TXDATA_in[120] = (CH0_TXDATA[120] === 1'bz) || CH0_TXDATA[120]; // rv 1
  assign CH0_TXDATA_in[121] = (CH0_TXDATA[121] === 1'bz) || CH0_TXDATA[121]; // rv 1
  assign CH0_TXDATA_in[122] = (CH0_TXDATA[122] === 1'bz) || CH0_TXDATA[122]; // rv 1
  assign CH0_TXDATA_in[123] = (CH0_TXDATA[123] === 1'bz) || CH0_TXDATA[123]; // rv 1
  assign CH0_TXDATA_in[124] = (CH0_TXDATA[124] === 1'bz) || CH0_TXDATA[124]; // rv 1
  assign CH0_TXDATA_in[125] = (CH0_TXDATA[125] === 1'bz) || CH0_TXDATA[125]; // rv 1
  assign CH0_TXDATA_in[126] = (CH0_TXDATA[126] === 1'bz) || CH0_TXDATA[126]; // rv 1
  assign CH0_TXDATA_in[127] = (CH0_TXDATA[127] === 1'bz) || CH0_TXDATA[127]; // rv 1
  assign CH0_TXDATA_in[128] = (CH0_TXDATA[128] === 1'bz) || CH0_TXDATA[128]; // rv 1
  assign CH0_TXDATA_in[129] = (CH0_TXDATA[129] === 1'bz) || CH0_TXDATA[129]; // rv 1
  assign CH0_TXDATA_in[12] = (CH0_TXDATA[12] === 1'bz) || CH0_TXDATA[12]; // rv 1
  assign CH0_TXDATA_in[130] = (CH0_TXDATA[130] === 1'bz) || CH0_TXDATA[130]; // rv 1
  assign CH0_TXDATA_in[131] = (CH0_TXDATA[131] === 1'bz) || CH0_TXDATA[131]; // rv 1
  assign CH0_TXDATA_in[132] = (CH0_TXDATA[132] === 1'bz) || CH0_TXDATA[132]; // rv 1
  assign CH0_TXDATA_in[133] = (CH0_TXDATA[133] === 1'bz) || CH0_TXDATA[133]; // rv 1
  assign CH0_TXDATA_in[134] = (CH0_TXDATA[134] === 1'bz) || CH0_TXDATA[134]; // rv 1
  assign CH0_TXDATA_in[135] = (CH0_TXDATA[135] === 1'bz) || CH0_TXDATA[135]; // rv 1
  assign CH0_TXDATA_in[136] = (CH0_TXDATA[136] === 1'bz) || CH0_TXDATA[136]; // rv 1
  assign CH0_TXDATA_in[137] = (CH0_TXDATA[137] === 1'bz) || CH0_TXDATA[137]; // rv 1
  assign CH0_TXDATA_in[138] = (CH0_TXDATA[138] === 1'bz) || CH0_TXDATA[138]; // rv 1
  assign CH0_TXDATA_in[139] = (CH0_TXDATA[139] === 1'bz) || CH0_TXDATA[139]; // rv 1
  assign CH0_TXDATA_in[13] = (CH0_TXDATA[13] === 1'bz) || CH0_TXDATA[13]; // rv 1
  assign CH0_TXDATA_in[140] = (CH0_TXDATA[140] === 1'bz) || CH0_TXDATA[140]; // rv 1
  assign CH0_TXDATA_in[141] = (CH0_TXDATA[141] === 1'bz) || CH0_TXDATA[141]; // rv 1
  assign CH0_TXDATA_in[142] = (CH0_TXDATA[142] === 1'bz) || CH0_TXDATA[142]; // rv 1
  assign CH0_TXDATA_in[143] = (CH0_TXDATA[143] === 1'bz) || CH0_TXDATA[143]; // rv 1
  assign CH0_TXDATA_in[144] = (CH0_TXDATA[144] === 1'bz) || CH0_TXDATA[144]; // rv 1
  assign CH0_TXDATA_in[145] = (CH0_TXDATA[145] === 1'bz) || CH0_TXDATA[145]; // rv 1
  assign CH0_TXDATA_in[146] = (CH0_TXDATA[146] === 1'bz) || CH0_TXDATA[146]; // rv 1
  assign CH0_TXDATA_in[147] = (CH0_TXDATA[147] === 1'bz) || CH0_TXDATA[147]; // rv 1
  assign CH0_TXDATA_in[148] = (CH0_TXDATA[148] === 1'bz) || CH0_TXDATA[148]; // rv 1
  assign CH0_TXDATA_in[149] = (CH0_TXDATA[149] === 1'bz) || CH0_TXDATA[149]; // rv 1
  assign CH0_TXDATA_in[14] = (CH0_TXDATA[14] === 1'bz) || CH0_TXDATA[14]; // rv 1
  assign CH0_TXDATA_in[150] = (CH0_TXDATA[150] === 1'bz) || CH0_TXDATA[150]; // rv 1
  assign CH0_TXDATA_in[151] = (CH0_TXDATA[151] === 1'bz) || CH0_TXDATA[151]; // rv 1
  assign CH0_TXDATA_in[152] = (CH0_TXDATA[152] === 1'bz) || CH0_TXDATA[152]; // rv 1
  assign CH0_TXDATA_in[153] = (CH0_TXDATA[153] === 1'bz) || CH0_TXDATA[153]; // rv 1
  assign CH0_TXDATA_in[154] = (CH0_TXDATA[154] === 1'bz) || CH0_TXDATA[154]; // rv 1
  assign CH0_TXDATA_in[155] = (CH0_TXDATA[155] === 1'bz) || CH0_TXDATA[155]; // rv 1
  assign CH0_TXDATA_in[156] = (CH0_TXDATA[156] === 1'bz) || CH0_TXDATA[156]; // rv 1
  assign CH0_TXDATA_in[157] = (CH0_TXDATA[157] === 1'bz) || CH0_TXDATA[157]; // rv 1
  assign CH0_TXDATA_in[158] = (CH0_TXDATA[158] === 1'bz) || CH0_TXDATA[158]; // rv 1
  assign CH0_TXDATA_in[159] = (CH0_TXDATA[159] === 1'bz) || CH0_TXDATA[159]; // rv 1
  assign CH0_TXDATA_in[15] = (CH0_TXDATA[15] === 1'bz) || CH0_TXDATA[15]; // rv 1
  assign CH0_TXDATA_in[160] = (CH0_TXDATA[160] === 1'bz) || CH0_TXDATA[160]; // rv 1
  assign CH0_TXDATA_in[161] = (CH0_TXDATA[161] === 1'bz) || CH0_TXDATA[161]; // rv 1
  assign CH0_TXDATA_in[162] = (CH0_TXDATA[162] === 1'bz) || CH0_TXDATA[162]; // rv 1
  assign CH0_TXDATA_in[163] = (CH0_TXDATA[163] === 1'bz) || CH0_TXDATA[163]; // rv 1
  assign CH0_TXDATA_in[164] = (CH0_TXDATA[164] === 1'bz) || CH0_TXDATA[164]; // rv 1
  assign CH0_TXDATA_in[165] = (CH0_TXDATA[165] === 1'bz) || CH0_TXDATA[165]; // rv 1
  assign CH0_TXDATA_in[166] = (CH0_TXDATA[166] === 1'bz) || CH0_TXDATA[166]; // rv 1
  assign CH0_TXDATA_in[167] = (CH0_TXDATA[167] === 1'bz) || CH0_TXDATA[167]; // rv 1
  assign CH0_TXDATA_in[168] = (CH0_TXDATA[168] === 1'bz) || CH0_TXDATA[168]; // rv 1
  assign CH0_TXDATA_in[169] = (CH0_TXDATA[169] === 1'bz) || CH0_TXDATA[169]; // rv 1
  assign CH0_TXDATA_in[16] = (CH0_TXDATA[16] === 1'bz) || CH0_TXDATA[16]; // rv 1
  assign CH0_TXDATA_in[170] = (CH0_TXDATA[170] === 1'bz) || CH0_TXDATA[170]; // rv 1
  assign CH0_TXDATA_in[171] = (CH0_TXDATA[171] === 1'bz) || CH0_TXDATA[171]; // rv 1
  assign CH0_TXDATA_in[172] = (CH0_TXDATA[172] === 1'bz) || CH0_TXDATA[172]; // rv 1
  assign CH0_TXDATA_in[173] = (CH0_TXDATA[173] === 1'bz) || CH0_TXDATA[173]; // rv 1
  assign CH0_TXDATA_in[174] = (CH0_TXDATA[174] === 1'bz) || CH0_TXDATA[174]; // rv 1
  assign CH0_TXDATA_in[175] = (CH0_TXDATA[175] === 1'bz) || CH0_TXDATA[175]; // rv 1
  assign CH0_TXDATA_in[176] = (CH0_TXDATA[176] === 1'bz) || CH0_TXDATA[176]; // rv 1
  assign CH0_TXDATA_in[177] = (CH0_TXDATA[177] === 1'bz) || CH0_TXDATA[177]; // rv 1
  assign CH0_TXDATA_in[178] = (CH0_TXDATA[178] === 1'bz) || CH0_TXDATA[178]; // rv 1
  assign CH0_TXDATA_in[179] = (CH0_TXDATA[179] === 1'bz) || CH0_TXDATA[179]; // rv 1
  assign CH0_TXDATA_in[17] = (CH0_TXDATA[17] === 1'bz) || CH0_TXDATA[17]; // rv 1
  assign CH0_TXDATA_in[180] = (CH0_TXDATA[180] === 1'bz) || CH0_TXDATA[180]; // rv 1
  assign CH0_TXDATA_in[181] = (CH0_TXDATA[181] === 1'bz) || CH0_TXDATA[181]; // rv 1
  assign CH0_TXDATA_in[182] = (CH0_TXDATA[182] === 1'bz) || CH0_TXDATA[182]; // rv 1
  assign CH0_TXDATA_in[183] = (CH0_TXDATA[183] === 1'bz) || CH0_TXDATA[183]; // rv 1
  assign CH0_TXDATA_in[184] = (CH0_TXDATA[184] === 1'bz) || CH0_TXDATA[184]; // rv 1
  assign CH0_TXDATA_in[185] = (CH0_TXDATA[185] === 1'bz) || CH0_TXDATA[185]; // rv 1
  assign CH0_TXDATA_in[186] = (CH0_TXDATA[186] === 1'bz) || CH0_TXDATA[186]; // rv 1
  assign CH0_TXDATA_in[187] = (CH0_TXDATA[187] === 1'bz) || CH0_TXDATA[187]; // rv 1
  assign CH0_TXDATA_in[188] = (CH0_TXDATA[188] === 1'bz) || CH0_TXDATA[188]; // rv 1
  assign CH0_TXDATA_in[189] = (CH0_TXDATA[189] === 1'bz) || CH0_TXDATA[189]; // rv 1
  assign CH0_TXDATA_in[18] = (CH0_TXDATA[18] === 1'bz) || CH0_TXDATA[18]; // rv 1
  assign CH0_TXDATA_in[190] = (CH0_TXDATA[190] === 1'bz) || CH0_TXDATA[190]; // rv 1
  assign CH0_TXDATA_in[191] = (CH0_TXDATA[191] === 1'bz) || CH0_TXDATA[191]; // rv 1
  assign CH0_TXDATA_in[192] = (CH0_TXDATA[192] === 1'bz) || CH0_TXDATA[192]; // rv 1
  assign CH0_TXDATA_in[193] = (CH0_TXDATA[193] === 1'bz) || CH0_TXDATA[193]; // rv 1
  assign CH0_TXDATA_in[194] = (CH0_TXDATA[194] === 1'bz) || CH0_TXDATA[194]; // rv 1
  assign CH0_TXDATA_in[195] = (CH0_TXDATA[195] === 1'bz) || CH0_TXDATA[195]; // rv 1
  assign CH0_TXDATA_in[196] = (CH0_TXDATA[196] === 1'bz) || CH0_TXDATA[196]; // rv 1
  assign CH0_TXDATA_in[197] = (CH0_TXDATA[197] === 1'bz) || CH0_TXDATA[197]; // rv 1
  assign CH0_TXDATA_in[198] = (CH0_TXDATA[198] === 1'bz) || CH0_TXDATA[198]; // rv 1
  assign CH0_TXDATA_in[199] = (CH0_TXDATA[199] === 1'bz) || CH0_TXDATA[199]; // rv 1
  assign CH0_TXDATA_in[19] = (CH0_TXDATA[19] === 1'bz) || CH0_TXDATA[19]; // rv 1
  assign CH0_TXDATA_in[1] = (CH0_TXDATA[1] === 1'bz) || CH0_TXDATA[1]; // rv 1
  assign CH0_TXDATA_in[200] = (CH0_TXDATA[200] === 1'bz) || CH0_TXDATA[200]; // rv 1
  assign CH0_TXDATA_in[201] = (CH0_TXDATA[201] === 1'bz) || CH0_TXDATA[201]; // rv 1
  assign CH0_TXDATA_in[202] = (CH0_TXDATA[202] === 1'bz) || CH0_TXDATA[202]; // rv 1
  assign CH0_TXDATA_in[203] = (CH0_TXDATA[203] === 1'bz) || CH0_TXDATA[203]; // rv 1
  assign CH0_TXDATA_in[204] = (CH0_TXDATA[204] === 1'bz) || CH0_TXDATA[204]; // rv 1
  assign CH0_TXDATA_in[205] = (CH0_TXDATA[205] === 1'bz) || CH0_TXDATA[205]; // rv 1
  assign CH0_TXDATA_in[206] = (CH0_TXDATA[206] === 1'bz) || CH0_TXDATA[206]; // rv 1
  assign CH0_TXDATA_in[207] = (CH0_TXDATA[207] === 1'bz) || CH0_TXDATA[207]; // rv 1
  assign CH0_TXDATA_in[208] = (CH0_TXDATA[208] === 1'bz) || CH0_TXDATA[208]; // rv 1
  assign CH0_TXDATA_in[209] = (CH0_TXDATA[209] === 1'bz) || CH0_TXDATA[209]; // rv 1
  assign CH0_TXDATA_in[20] = (CH0_TXDATA[20] === 1'bz) || CH0_TXDATA[20]; // rv 1
  assign CH0_TXDATA_in[210] = (CH0_TXDATA[210] === 1'bz) || CH0_TXDATA[210]; // rv 1
  assign CH0_TXDATA_in[211] = (CH0_TXDATA[211] === 1'bz) || CH0_TXDATA[211]; // rv 1
  assign CH0_TXDATA_in[212] = (CH0_TXDATA[212] === 1'bz) || CH0_TXDATA[212]; // rv 1
  assign CH0_TXDATA_in[213] = (CH0_TXDATA[213] === 1'bz) || CH0_TXDATA[213]; // rv 1
  assign CH0_TXDATA_in[214] = (CH0_TXDATA[214] === 1'bz) || CH0_TXDATA[214]; // rv 1
  assign CH0_TXDATA_in[215] = (CH0_TXDATA[215] === 1'bz) || CH0_TXDATA[215]; // rv 1
  assign CH0_TXDATA_in[216] = (CH0_TXDATA[216] === 1'bz) || CH0_TXDATA[216]; // rv 1
  assign CH0_TXDATA_in[217] = (CH0_TXDATA[217] === 1'bz) || CH0_TXDATA[217]; // rv 1
  assign CH0_TXDATA_in[218] = (CH0_TXDATA[218] === 1'bz) || CH0_TXDATA[218]; // rv 1
  assign CH0_TXDATA_in[219] = (CH0_TXDATA[219] === 1'bz) || CH0_TXDATA[219]; // rv 1
  assign CH0_TXDATA_in[21] = (CH0_TXDATA[21] === 1'bz) || CH0_TXDATA[21]; // rv 1
  assign CH0_TXDATA_in[220] = (CH0_TXDATA[220] === 1'bz) || CH0_TXDATA[220]; // rv 1
  assign CH0_TXDATA_in[221] = (CH0_TXDATA[221] === 1'bz) || CH0_TXDATA[221]; // rv 1
  assign CH0_TXDATA_in[222] = (CH0_TXDATA[222] === 1'bz) || CH0_TXDATA[222]; // rv 1
  assign CH0_TXDATA_in[223] = (CH0_TXDATA[223] === 1'bz) || CH0_TXDATA[223]; // rv 1
  assign CH0_TXDATA_in[224] = (CH0_TXDATA[224] === 1'bz) || CH0_TXDATA[224]; // rv 1
  assign CH0_TXDATA_in[225] = (CH0_TXDATA[225] === 1'bz) || CH0_TXDATA[225]; // rv 1
  assign CH0_TXDATA_in[226] = (CH0_TXDATA[226] === 1'bz) || CH0_TXDATA[226]; // rv 1
  assign CH0_TXDATA_in[227] = (CH0_TXDATA[227] === 1'bz) || CH0_TXDATA[227]; // rv 1
  assign CH0_TXDATA_in[228] = (CH0_TXDATA[228] === 1'bz) || CH0_TXDATA[228]; // rv 1
  assign CH0_TXDATA_in[229] = (CH0_TXDATA[229] === 1'bz) || CH0_TXDATA[229]; // rv 1
  assign CH0_TXDATA_in[22] = (CH0_TXDATA[22] === 1'bz) || CH0_TXDATA[22]; // rv 1
  assign CH0_TXDATA_in[230] = (CH0_TXDATA[230] === 1'bz) || CH0_TXDATA[230]; // rv 1
  assign CH0_TXDATA_in[231] = (CH0_TXDATA[231] === 1'bz) || CH0_TXDATA[231]; // rv 1
  assign CH0_TXDATA_in[232] = (CH0_TXDATA[232] === 1'bz) || CH0_TXDATA[232]; // rv 1
  assign CH0_TXDATA_in[233] = (CH0_TXDATA[233] === 1'bz) || CH0_TXDATA[233]; // rv 1
  assign CH0_TXDATA_in[234] = (CH0_TXDATA[234] === 1'bz) || CH0_TXDATA[234]; // rv 1
  assign CH0_TXDATA_in[235] = (CH0_TXDATA[235] === 1'bz) || CH0_TXDATA[235]; // rv 1
  assign CH0_TXDATA_in[236] = (CH0_TXDATA[236] === 1'bz) || CH0_TXDATA[236]; // rv 1
  assign CH0_TXDATA_in[237] = (CH0_TXDATA[237] === 1'bz) || CH0_TXDATA[237]; // rv 1
  assign CH0_TXDATA_in[238] = (CH0_TXDATA[238] === 1'bz) || CH0_TXDATA[238]; // rv 1
  assign CH0_TXDATA_in[239] = (CH0_TXDATA[239] === 1'bz) || CH0_TXDATA[239]; // rv 1
  assign CH0_TXDATA_in[23] = (CH0_TXDATA[23] === 1'bz) || CH0_TXDATA[23]; // rv 1
  assign CH0_TXDATA_in[240] = (CH0_TXDATA[240] === 1'bz) || CH0_TXDATA[240]; // rv 1
  assign CH0_TXDATA_in[241] = (CH0_TXDATA[241] === 1'bz) || CH0_TXDATA[241]; // rv 1
  assign CH0_TXDATA_in[242] = (CH0_TXDATA[242] === 1'bz) || CH0_TXDATA[242]; // rv 1
  assign CH0_TXDATA_in[243] = (CH0_TXDATA[243] === 1'bz) || CH0_TXDATA[243]; // rv 1
  assign CH0_TXDATA_in[244] = (CH0_TXDATA[244] === 1'bz) || CH0_TXDATA[244]; // rv 1
  assign CH0_TXDATA_in[245] = (CH0_TXDATA[245] === 1'bz) || CH0_TXDATA[245]; // rv 1
  assign CH0_TXDATA_in[246] = (CH0_TXDATA[246] === 1'bz) || CH0_TXDATA[246]; // rv 1
  assign CH0_TXDATA_in[247] = (CH0_TXDATA[247] === 1'bz) || CH0_TXDATA[247]; // rv 1
  assign CH0_TXDATA_in[248] = (CH0_TXDATA[248] === 1'bz) || CH0_TXDATA[248]; // rv 1
  assign CH0_TXDATA_in[249] = (CH0_TXDATA[249] === 1'bz) || CH0_TXDATA[249]; // rv 1
  assign CH0_TXDATA_in[24] = (CH0_TXDATA[24] === 1'bz) || CH0_TXDATA[24]; // rv 1
  assign CH0_TXDATA_in[250] = (CH0_TXDATA[250] === 1'bz) || CH0_TXDATA[250]; // rv 1
  assign CH0_TXDATA_in[251] = (CH0_TXDATA[251] === 1'bz) || CH0_TXDATA[251]; // rv 1
  assign CH0_TXDATA_in[252] = (CH0_TXDATA[252] === 1'bz) || CH0_TXDATA[252]; // rv 1
  assign CH0_TXDATA_in[253] = (CH0_TXDATA[253] === 1'bz) || CH0_TXDATA[253]; // rv 1
  assign CH0_TXDATA_in[254] = (CH0_TXDATA[254] === 1'bz) || CH0_TXDATA[254]; // rv 1
  assign CH0_TXDATA_in[255] = (CH0_TXDATA[255] === 1'bz) || CH0_TXDATA[255]; // rv 1
  assign CH0_TXDATA_in[25] = (CH0_TXDATA[25] === 1'bz) || CH0_TXDATA[25]; // rv 1
  assign CH0_TXDATA_in[26] = (CH0_TXDATA[26] === 1'bz) || CH0_TXDATA[26]; // rv 1
  assign CH0_TXDATA_in[27] = (CH0_TXDATA[27] === 1'bz) || CH0_TXDATA[27]; // rv 1
  assign CH0_TXDATA_in[28] = (CH0_TXDATA[28] === 1'bz) || CH0_TXDATA[28]; // rv 1
  assign CH0_TXDATA_in[29] = (CH0_TXDATA[29] === 1'bz) || CH0_TXDATA[29]; // rv 1
  assign CH0_TXDATA_in[2] = (CH0_TXDATA[2] === 1'bz) || CH0_TXDATA[2]; // rv 1
  assign CH0_TXDATA_in[30] = (CH0_TXDATA[30] === 1'bz) || CH0_TXDATA[30]; // rv 1
  assign CH0_TXDATA_in[31] = (CH0_TXDATA[31] === 1'bz) || CH0_TXDATA[31]; // rv 1
  assign CH0_TXDATA_in[32] = (CH0_TXDATA[32] === 1'bz) || CH0_TXDATA[32]; // rv 1
  assign CH0_TXDATA_in[33] = (CH0_TXDATA[33] === 1'bz) || CH0_TXDATA[33]; // rv 1
  assign CH0_TXDATA_in[34] = (CH0_TXDATA[34] === 1'bz) || CH0_TXDATA[34]; // rv 1
  assign CH0_TXDATA_in[35] = (CH0_TXDATA[35] === 1'bz) || CH0_TXDATA[35]; // rv 1
  assign CH0_TXDATA_in[36] = (CH0_TXDATA[36] === 1'bz) || CH0_TXDATA[36]; // rv 1
  assign CH0_TXDATA_in[37] = (CH0_TXDATA[37] === 1'bz) || CH0_TXDATA[37]; // rv 1
  assign CH0_TXDATA_in[38] = (CH0_TXDATA[38] === 1'bz) || CH0_TXDATA[38]; // rv 1
  assign CH0_TXDATA_in[39] = (CH0_TXDATA[39] === 1'bz) || CH0_TXDATA[39]; // rv 1
  assign CH0_TXDATA_in[3] = (CH0_TXDATA[3] === 1'bz) || CH0_TXDATA[3]; // rv 1
  assign CH0_TXDATA_in[40] = (CH0_TXDATA[40] === 1'bz) || CH0_TXDATA[40]; // rv 1
  assign CH0_TXDATA_in[41] = (CH0_TXDATA[41] === 1'bz) || CH0_TXDATA[41]; // rv 1
  assign CH0_TXDATA_in[42] = (CH0_TXDATA[42] === 1'bz) || CH0_TXDATA[42]; // rv 1
  assign CH0_TXDATA_in[43] = (CH0_TXDATA[43] === 1'bz) || CH0_TXDATA[43]; // rv 1
  assign CH0_TXDATA_in[44] = (CH0_TXDATA[44] === 1'bz) || CH0_TXDATA[44]; // rv 1
  assign CH0_TXDATA_in[45] = (CH0_TXDATA[45] === 1'bz) || CH0_TXDATA[45]; // rv 1
  assign CH0_TXDATA_in[46] = (CH0_TXDATA[46] === 1'bz) || CH0_TXDATA[46]; // rv 1
  assign CH0_TXDATA_in[47] = (CH0_TXDATA[47] === 1'bz) || CH0_TXDATA[47]; // rv 1
  assign CH0_TXDATA_in[48] = (CH0_TXDATA[48] === 1'bz) || CH0_TXDATA[48]; // rv 1
  assign CH0_TXDATA_in[49] = (CH0_TXDATA[49] === 1'bz) || CH0_TXDATA[49]; // rv 1
  assign CH0_TXDATA_in[4] = (CH0_TXDATA[4] === 1'bz) || CH0_TXDATA[4]; // rv 1
  assign CH0_TXDATA_in[50] = (CH0_TXDATA[50] === 1'bz) || CH0_TXDATA[50]; // rv 1
  assign CH0_TXDATA_in[51] = (CH0_TXDATA[51] === 1'bz) || CH0_TXDATA[51]; // rv 1
  assign CH0_TXDATA_in[52] = (CH0_TXDATA[52] === 1'bz) || CH0_TXDATA[52]; // rv 1
  assign CH0_TXDATA_in[53] = (CH0_TXDATA[53] === 1'bz) || CH0_TXDATA[53]; // rv 1
  assign CH0_TXDATA_in[54] = (CH0_TXDATA[54] === 1'bz) || CH0_TXDATA[54]; // rv 1
  assign CH0_TXDATA_in[55] = (CH0_TXDATA[55] === 1'bz) || CH0_TXDATA[55]; // rv 1
  assign CH0_TXDATA_in[56] = (CH0_TXDATA[56] === 1'bz) || CH0_TXDATA[56]; // rv 1
  assign CH0_TXDATA_in[57] = (CH0_TXDATA[57] === 1'bz) || CH0_TXDATA[57]; // rv 1
  assign CH0_TXDATA_in[58] = (CH0_TXDATA[58] === 1'bz) || CH0_TXDATA[58]; // rv 1
  assign CH0_TXDATA_in[59] = (CH0_TXDATA[59] === 1'bz) || CH0_TXDATA[59]; // rv 1
  assign CH0_TXDATA_in[5] = (CH0_TXDATA[5] === 1'bz) || CH0_TXDATA[5]; // rv 1
  assign CH0_TXDATA_in[60] = (CH0_TXDATA[60] === 1'bz) || CH0_TXDATA[60]; // rv 1
  assign CH0_TXDATA_in[61] = (CH0_TXDATA[61] === 1'bz) || CH0_TXDATA[61]; // rv 1
  assign CH0_TXDATA_in[62] = (CH0_TXDATA[62] === 1'bz) || CH0_TXDATA[62]; // rv 1
  assign CH0_TXDATA_in[63] = (CH0_TXDATA[63] === 1'bz) || CH0_TXDATA[63]; // rv 1
  assign CH0_TXDATA_in[64] = (CH0_TXDATA[64] === 1'bz) || CH0_TXDATA[64]; // rv 1
  assign CH0_TXDATA_in[65] = (CH0_TXDATA[65] === 1'bz) || CH0_TXDATA[65]; // rv 1
  assign CH0_TXDATA_in[66] = (CH0_TXDATA[66] === 1'bz) || CH0_TXDATA[66]; // rv 1
  assign CH0_TXDATA_in[67] = (CH0_TXDATA[67] === 1'bz) || CH0_TXDATA[67]; // rv 1
  assign CH0_TXDATA_in[68] = (CH0_TXDATA[68] === 1'bz) || CH0_TXDATA[68]; // rv 1
  assign CH0_TXDATA_in[69] = (CH0_TXDATA[69] === 1'bz) || CH0_TXDATA[69]; // rv 1
  assign CH0_TXDATA_in[6] = (CH0_TXDATA[6] === 1'bz) || CH0_TXDATA[6]; // rv 1
  assign CH0_TXDATA_in[70] = (CH0_TXDATA[70] === 1'bz) || CH0_TXDATA[70]; // rv 1
  assign CH0_TXDATA_in[71] = (CH0_TXDATA[71] === 1'bz) || CH0_TXDATA[71]; // rv 1
  assign CH0_TXDATA_in[72] = (CH0_TXDATA[72] === 1'bz) || CH0_TXDATA[72]; // rv 1
  assign CH0_TXDATA_in[73] = (CH0_TXDATA[73] === 1'bz) || CH0_TXDATA[73]; // rv 1
  assign CH0_TXDATA_in[74] = (CH0_TXDATA[74] === 1'bz) || CH0_TXDATA[74]; // rv 1
  assign CH0_TXDATA_in[75] = (CH0_TXDATA[75] === 1'bz) || CH0_TXDATA[75]; // rv 1
  assign CH0_TXDATA_in[76] = (CH0_TXDATA[76] === 1'bz) || CH0_TXDATA[76]; // rv 1
  assign CH0_TXDATA_in[77] = (CH0_TXDATA[77] === 1'bz) || CH0_TXDATA[77]; // rv 1
  assign CH0_TXDATA_in[78] = (CH0_TXDATA[78] === 1'bz) || CH0_TXDATA[78]; // rv 1
  assign CH0_TXDATA_in[79] = (CH0_TXDATA[79] === 1'bz) || CH0_TXDATA[79]; // rv 1
  assign CH0_TXDATA_in[7] = (CH0_TXDATA[7] === 1'bz) || CH0_TXDATA[7]; // rv 1
  assign CH0_TXDATA_in[80] = (CH0_TXDATA[80] === 1'bz) || CH0_TXDATA[80]; // rv 1
  assign CH0_TXDATA_in[81] = (CH0_TXDATA[81] === 1'bz) || CH0_TXDATA[81]; // rv 1
  assign CH0_TXDATA_in[82] = (CH0_TXDATA[82] === 1'bz) || CH0_TXDATA[82]; // rv 1
  assign CH0_TXDATA_in[83] = (CH0_TXDATA[83] === 1'bz) || CH0_TXDATA[83]; // rv 1
  assign CH0_TXDATA_in[84] = (CH0_TXDATA[84] === 1'bz) || CH0_TXDATA[84]; // rv 1
  assign CH0_TXDATA_in[85] = (CH0_TXDATA[85] === 1'bz) || CH0_TXDATA[85]; // rv 1
  assign CH0_TXDATA_in[86] = (CH0_TXDATA[86] === 1'bz) || CH0_TXDATA[86]; // rv 1
  assign CH0_TXDATA_in[87] = (CH0_TXDATA[87] === 1'bz) || CH0_TXDATA[87]; // rv 1
  assign CH0_TXDATA_in[88] = (CH0_TXDATA[88] === 1'bz) || CH0_TXDATA[88]; // rv 1
  assign CH0_TXDATA_in[89] = (CH0_TXDATA[89] === 1'bz) || CH0_TXDATA[89]; // rv 1
  assign CH0_TXDATA_in[8] = (CH0_TXDATA[8] === 1'bz) || CH0_TXDATA[8]; // rv 1
  assign CH0_TXDATA_in[90] = (CH0_TXDATA[90] === 1'bz) || CH0_TXDATA[90]; // rv 1
  assign CH0_TXDATA_in[91] = (CH0_TXDATA[91] === 1'bz) || CH0_TXDATA[91]; // rv 1
  assign CH0_TXDATA_in[92] = (CH0_TXDATA[92] === 1'bz) || CH0_TXDATA[92]; // rv 1
  assign CH0_TXDATA_in[93] = (CH0_TXDATA[93] === 1'bz) || CH0_TXDATA[93]; // rv 1
  assign CH0_TXDATA_in[94] = (CH0_TXDATA[94] === 1'bz) || CH0_TXDATA[94]; // rv 1
  assign CH0_TXDATA_in[95] = (CH0_TXDATA[95] === 1'bz) || CH0_TXDATA[95]; // rv 1
  assign CH0_TXDATA_in[96] = (CH0_TXDATA[96] === 1'bz) || CH0_TXDATA[96]; // rv 1
  assign CH0_TXDATA_in[97] = (CH0_TXDATA[97] === 1'bz) || CH0_TXDATA[97]; // rv 1
  assign CH0_TXDATA_in[98] = (CH0_TXDATA[98] === 1'bz) || CH0_TXDATA[98]; // rv 1
  assign CH0_TXDATA_in[99] = (CH0_TXDATA[99] === 1'bz) || CH0_TXDATA[99]; // rv 1
  assign CH0_TXDATA_in[9] = (CH0_TXDATA[9] === 1'bz) || CH0_TXDATA[9]; // rv 1
  assign CH0_TXDCCDONE_M_in = CH0_TXDCCDONE_M;
  assign CH0_TXDEBUGPCSOUT_M_in = CH0_TXDEBUGPCSOUT_M;
  assign CH0_TXINHIBIT_in = (CH0_TXINHIBIT === 1'bz) || CH0_TXINHIBIT; // rv 1
  assign CH0_TXLATCLK_in = (CH0_TXLATCLK === 1'bz) || CH0_TXLATCLK; // rv 1
  assign CH0_TXMAINCURSOR_in[0] = (CH0_TXMAINCURSOR[0] === 1'bz) || CH0_TXMAINCURSOR[0]; // rv 1
  assign CH0_TXMAINCURSOR_in[1] = (CH0_TXMAINCURSOR[1] === 1'bz) || CH0_TXMAINCURSOR[1]; // rv 1
  assign CH0_TXMAINCURSOR_in[2] = (CH0_TXMAINCURSOR[2] === 1'bz) || CH0_TXMAINCURSOR[2]; // rv 1
  assign CH0_TXMAINCURSOR_in[3] = (CH0_TXMAINCURSOR[3] === 1'bz) || CH0_TXMAINCURSOR[3]; // rv 1
  assign CH0_TXMAINCURSOR_in[4] = (CH0_TXMAINCURSOR[4] === 1'bz) || CH0_TXMAINCURSOR[4]; // rv 1
  assign CH0_TXMAINCURSOR_in[5] = (CH0_TXMAINCURSOR[5] === 1'bz) || CH0_TXMAINCURSOR[5]; // rv 1
  assign CH0_TXMAINCURSOR_in[6] = (CH0_TXMAINCURSOR[6] === 1'bz) || CH0_TXMAINCURSOR[6]; // rv 1
  assign CH0_TXPCSRESETMASK_in = (CH0_TXPCSRESETMASK === 1'bz) || CH0_TXPCSRESETMASK; // rv 1
  assign CH0_TXPD_in[0] = (CH0_TXPD[0] === 1'bz) || CH0_TXPD[0]; // rv 1
  assign CH0_TXPD_in[1] = (CH0_TXPD[1] === 1'bz) || CH0_TXPD[1]; // rv 1
  assign CH0_TXPERST_in = (CH0_TXPERST === 1'bz) || CH0_TXPERST; // rv 1
  assign CH0_TXPISOPD_in = (CH0_TXPISOPD === 1'bz) || CH0_TXPISOPD; // rv 1
  assign CH0_TXPMARESETDONE_M_in = CH0_TXPMARESETDONE_M;
  assign CH0_TXPMARESETMASK_in[0] = (CH0_TXPMARESETMASK[0] === 1'bz) || CH0_TXPMARESETMASK[0]; // rv 1
  assign CH0_TXPMARESETMASK_in[1] = (CH0_TXPMARESETMASK[1] === 1'bz) || CH0_TXPMARESETMASK[1]; // rv 1
  assign CH0_TXPOLARITY_in = (CH0_TXPOLARITY === 1'bz) || CH0_TXPOLARITY; // rv 1
  assign CH0_TXPOSTCURSOR_in[0] = (CH0_TXPOSTCURSOR[0] === 1'bz) || CH0_TXPOSTCURSOR[0]; // rv 1
  assign CH0_TXPOSTCURSOR_in[1] = (CH0_TXPOSTCURSOR[1] === 1'bz) || CH0_TXPOSTCURSOR[1]; // rv 1
  assign CH0_TXPOSTCURSOR_in[2] = (CH0_TXPOSTCURSOR[2] === 1'bz) || CH0_TXPOSTCURSOR[2]; // rv 1
  assign CH0_TXPOSTCURSOR_in[3] = (CH0_TXPOSTCURSOR[3] === 1'bz) || CH0_TXPOSTCURSOR[3]; // rv 1
  assign CH0_TXPOSTCURSOR_in[4] = (CH0_TXPOSTCURSOR[4] === 1'bz) || CH0_TXPOSTCURSOR[4]; // rv 1
  assign CH0_TXPOSTCURSOR_in[5] = (CH0_TXPOSTCURSOR[5] === 1'bz) || CH0_TXPOSTCURSOR[5]; // rv 1
  assign CH0_TXPRBSFORCEERR_in = (CH0_TXPRBSFORCEERR === 1'bz) || CH0_TXPRBSFORCEERR; // rv 1
  assign CH0_TXPRBSSEL_in[0] = (CH0_TXPRBSSEL[0] === 1'bz) || CH0_TXPRBSSEL[0]; // rv 1
  assign CH0_TXPRBSSEL_in[1] = (CH0_TXPRBSSEL[1] === 1'bz) || CH0_TXPRBSSEL[1]; // rv 1
  assign CH0_TXPRBSSEL_in[2] = (CH0_TXPRBSSEL[2] === 1'bz) || CH0_TXPRBSSEL[2]; // rv 1
  assign CH0_TXPRBSSEL_in[3] = (CH0_TXPRBSSEL[3] === 1'bz) || CH0_TXPRBSSEL[3]; // rv 1
  assign CH0_TXPRECURSOR2_in[0] = (CH0_TXPRECURSOR2[0] === 1'bz) || CH0_TXPRECURSOR2[0]; // rv 1
  assign CH0_TXPRECURSOR2_in[1] = (CH0_TXPRECURSOR2[1] === 1'bz) || CH0_TXPRECURSOR2[1]; // rv 1
  assign CH0_TXPRECURSOR2_in[2] = (CH0_TXPRECURSOR2[2] === 1'bz) || CH0_TXPRECURSOR2[2]; // rv 1
  assign CH0_TXPRECURSOR2_in[3] = (CH0_TXPRECURSOR2[3] === 1'bz) || CH0_TXPRECURSOR2[3]; // rv 1
  assign CH0_TXPRECURSOR2_in[4] = (CH0_TXPRECURSOR2[4] === 1'bz) || CH0_TXPRECURSOR2[4]; // rv 1
  assign CH0_TXPRECURSOR2_in[5] = (CH0_TXPRECURSOR2[5] === 1'bz) || CH0_TXPRECURSOR2[5]; // rv 1
  assign CH0_TXPRECURSOR3_in[0] = (CH0_TXPRECURSOR3[0] === 1'bz) || CH0_TXPRECURSOR3[0]; // rv 1
  assign CH0_TXPRECURSOR3_in[1] = (CH0_TXPRECURSOR3[1] === 1'bz) || CH0_TXPRECURSOR3[1]; // rv 1
  assign CH0_TXPRECURSOR3_in[2] = (CH0_TXPRECURSOR3[2] === 1'bz) || CH0_TXPRECURSOR3[2]; // rv 1
  assign CH0_TXPRECURSOR3_in[3] = (CH0_TXPRECURSOR3[3] === 1'bz) || CH0_TXPRECURSOR3[3]; // rv 1
  assign CH0_TXPRECURSOR3_in[4] = (CH0_TXPRECURSOR3[4] === 1'bz) || CH0_TXPRECURSOR3[4]; // rv 1
  assign CH0_TXPRECURSOR3_in[5] = (CH0_TXPRECURSOR3[5] === 1'bz) || CH0_TXPRECURSOR3[5]; // rv 1
  assign CH0_TXPRECURSOR_in[0] = (CH0_TXPRECURSOR[0] === 1'bz) || CH0_TXPRECURSOR[0]; // rv 1
  assign CH0_TXPRECURSOR_in[1] = (CH0_TXPRECURSOR[1] === 1'bz) || CH0_TXPRECURSOR[1]; // rv 1
  assign CH0_TXPRECURSOR_in[2] = (CH0_TXPRECURSOR[2] === 1'bz) || CH0_TXPRECURSOR[2]; // rv 1
  assign CH0_TXPRECURSOR_in[3] = (CH0_TXPRECURSOR[3] === 1'bz) || CH0_TXPRECURSOR[3]; // rv 1
  assign CH0_TXPRECURSOR_in[4] = (CH0_TXPRECURSOR[4] === 1'bz) || CH0_TXPRECURSOR[4]; // rv 1
  assign CH0_TXPRECURSOR_in[5] = (CH0_TXPRECURSOR[5] === 1'bz) || CH0_TXPRECURSOR[5]; // rv 1
  assign CH0_TXPROGDIVRESETDONE_M_in = CH0_TXPROGDIVRESETDONE_M;
  assign CH0_TXPROGDIVRESET_in = (CH0_TXPROGDIVRESET === 1'bz) || CH0_TXPROGDIVRESET; // rv 1
  assign CH0_TXQPRBSEN_in = (CH0_TXQPRBSEN === 1'bz) || CH0_TXQPRBSEN; // rv 1
  assign CH0_TXRATE_in[0] = (CH0_TXRATE[0] === 1'bz) || CH0_TXRATE[0]; // rv 1
  assign CH0_TXRATE_in[1] = (CH0_TXRATE[1] === 1'bz) || CH0_TXRATE[1]; // rv 1
  assign CH0_TXRATE_in[2] = (CH0_TXRATE[2] === 1'bz) || CH0_TXRATE[2]; // rv 1
  assign CH0_TXRATE_in[3] = (CH0_TXRATE[3] === 1'bz) || CH0_TXRATE[3]; // rv 1
  assign CH0_TXRATE_in[4] = (CH0_TXRATE[4] === 1'bz) || CH0_TXRATE[4]; // rv 1
  assign CH0_TXRATE_in[5] = (CH0_TXRATE[5] === 1'bz) || CH0_TXRATE[5]; // rv 1
  assign CH0_TXRATE_in[6] = (CH0_TXRATE[6] === 1'bz) || CH0_TXRATE[6]; // rv 1
  assign CH0_TXRATE_in[7] = (CH0_TXRATE[7] === 1'bz) || CH0_TXRATE[7]; // rv 1
  assign CH0_TXRESETDONE_M_in = CH0_TXRESETDONE_M;
  assign CH0_TXRESETMODE_in[0] = (CH0_TXRESETMODE[0] === 1'bz) || CH0_TXRESETMODE[0]; // rv 1
  assign CH0_TXRESETMODE_in[1] = (CH0_TXRESETMODE[1] === 1'bz) || CH0_TXRESETMODE[1]; // rv 1
  assign CH0_TXRSV0_in[0] = (CH0_TXRSV0[0] === 1'bz) || CH0_TXRSV0[0]; // rv 1
  assign CH0_TXRSV0_in[1] = (CH0_TXRSV0[1] === 1'bz) || CH0_TXRSV0[1]; // rv 1
  assign CH0_TXRSV0_in[2] = (CH0_TXRSV0[2] === 1'bz) || CH0_TXRSV0[2]; // rv 1
  assign CH0_TXRSV0_in[3] = (CH0_TXRSV0[3] === 1'bz) || CH0_TXRSV0[3]; // rv 1
  assign CH0_TXRSV0_in[4] = (CH0_TXRSV0[4] === 1'bz) || CH0_TXRSV0[4]; // rv 1
  assign CH0_TXRSV1_in[0] = (CH0_TXRSV1[0] === 1'bz) || CH0_TXRSV1[0]; // rv 1
  assign CH0_TXRSV1_in[1] = (CH0_TXRSV1[1] === 1'bz) || CH0_TXRSV1[1]; // rv 1
  assign CH0_TXRSV1_in[2] = (CH0_TXRSV1[2] === 1'bz) || CH0_TXRSV1[2]; // rv 1
  assign CH0_TXRSV1_in[3] = (CH0_TXRSV1[3] === 1'bz) || CH0_TXRSV1[3]; // rv 1
  assign CH0_TXUSERRDY_in = (CH0_TXUSERRDY === 1'bz) || CH0_TXUSERRDY; // rv 1
  assign CH0_TXUSRCLK_in = (CH0_TXUSRCLK === 1'bz) || CH0_TXUSRCLK; // rv 1
  assign CH1_CDRFREQOS_in = (CH1_CDRFREQOS === 1'bz) || CH1_CDRFREQOS; // rv 1
  assign CH1_CDRINCPCTRL_in = (CH1_CDRINCPCTRL === 1'bz) || CH1_CDRINCPCTRL; // rv 1
  assign CH1_CDRSTEPDIR_in = (CH1_CDRSTEPDIR === 1'bz) || CH1_CDRSTEPDIR; // rv 1
  assign CH1_CDRSTEPSQ_in = (CH1_CDRSTEPSQ === 1'bz) || CH1_CDRSTEPSQ; // rv 1
  assign CH1_CDRSTEPSX_in = (CH1_CDRSTEPSX === 1'bz) || CH1_CDRSTEPSX; // rv 1
  assign CH1_CLKRSVD0_in = (CH1_CLKRSVD0 === 1'bz) || CH1_CLKRSVD0; // rv 1
  assign CH1_CLKRSVD1_in = (CH1_CLKRSVD1 === 1'bz) || CH1_CLKRSVD1; // rv 1
  assign CH1_DMONFIFORESET_in = (CH1_DMONFIFORESET === 1'bz) || CH1_DMONFIFORESET; // rv 1
  assign CH1_DMONITORCLK_in = (CH1_DMONITORCLK === 1'bz) || CH1_DMONITORCLK; // rv 1
  assign CH1_DMONITOROUT_M_in = CH1_DMONITOROUT_M;
  assign CH1_EYESCANDATAERROR_M_in = CH1_EYESCANDATAERROR_M;
  assign CH1_EYESCANRESET_in = (CH1_EYESCANRESET === 1'bz) || CH1_EYESCANRESET; // rv 1
  assign CH1_EYESCANTRIGGER_in = (CH1_EYESCANTRIGGER === 1'bz) || CH1_EYESCANTRIGGER; // rv 1
  assign CH1_GTRSVD_in[0] = (CH1_GTRSVD[0] === 1'bz) || CH1_GTRSVD[0]; // rv 1
  assign CH1_GTRSVD_in[10] = (CH1_GTRSVD[10] === 1'bz) || CH1_GTRSVD[10]; // rv 1
  assign CH1_GTRSVD_in[11] = (CH1_GTRSVD[11] === 1'bz) || CH1_GTRSVD[11]; // rv 1
  assign CH1_GTRSVD_in[12] = (CH1_GTRSVD[12] === 1'bz) || CH1_GTRSVD[12]; // rv 1
  assign CH1_GTRSVD_in[13] = (CH1_GTRSVD[13] === 1'bz) || CH1_GTRSVD[13]; // rv 1
  assign CH1_GTRSVD_in[14] = (CH1_GTRSVD[14] === 1'bz) || CH1_GTRSVD[14]; // rv 1
  assign CH1_GTRSVD_in[15] = (CH1_GTRSVD[15] === 1'bz) || CH1_GTRSVD[15]; // rv 1
  assign CH1_GTRSVD_in[1] = (CH1_GTRSVD[1] === 1'bz) || CH1_GTRSVD[1]; // rv 1
  assign CH1_GTRSVD_in[2] = (CH1_GTRSVD[2] === 1'bz) || CH1_GTRSVD[2]; // rv 1
  assign CH1_GTRSVD_in[3] = (CH1_GTRSVD[3] === 1'bz) || CH1_GTRSVD[3]; // rv 1
  assign CH1_GTRSVD_in[4] = (CH1_GTRSVD[4] === 1'bz) || CH1_GTRSVD[4]; // rv 1
  assign CH1_GTRSVD_in[5] = (CH1_GTRSVD[5] === 1'bz) || CH1_GTRSVD[5]; // rv 1
  assign CH1_GTRSVD_in[6] = (CH1_GTRSVD[6] === 1'bz) || CH1_GTRSVD[6]; // rv 1
  assign CH1_GTRSVD_in[7] = (CH1_GTRSVD[7] === 1'bz) || CH1_GTRSVD[7]; // rv 1
  assign CH1_GTRSVD_in[8] = (CH1_GTRSVD[8] === 1'bz) || CH1_GTRSVD[8]; // rv 1
  assign CH1_GTRSVD_in[9] = (CH1_GTRSVD[9] === 1'bz) || CH1_GTRSVD[9]; // rv 1
  assign CH1_GTRXRESET_in = (CH1_GTRXRESET === 1'bz) || CH1_GTRXRESET; // rv 1
  assign CH1_GTTXRESET_in = (CH1_GTTXRESET === 1'bz) || CH1_GTTXRESET; // rv 1
  assign CH1_ILORESETDONE_M_in = CH1_ILORESETDONE_M;
  assign CH1_ILORESETMASK_in = (CH1_ILORESETMASK === 1'bz) || CH1_ILORESETMASK; // rv 1
  assign CH1_ILORESET_in = (CH1_ILORESET === 1'bz) || CH1_ILORESET; // rv 1
  assign CH1_LOOPBACK_in[0] = (CH1_LOOPBACK[0] === 1'bz) || CH1_LOOPBACK[0]; // rv 1
  assign CH1_LOOPBACK_in[1] = (CH1_LOOPBACK[1] === 1'bz) || CH1_LOOPBACK[1]; // rv 1
  assign CH1_LOOPBACK_in[2] = (CH1_LOOPBACK[2] === 1'bz) || CH1_LOOPBACK[2]; // rv 1
  assign CH1_PCSRSVDIN_in[0] = (CH1_PCSRSVDIN[0] === 1'bz) || CH1_PCSRSVDIN[0]; // rv 1
  assign CH1_PCSRSVDIN_in[10] = (CH1_PCSRSVDIN[10] === 1'bz) || CH1_PCSRSVDIN[10]; // rv 1
  assign CH1_PCSRSVDIN_in[11] = (CH1_PCSRSVDIN[11] === 1'bz) || CH1_PCSRSVDIN[11]; // rv 1
  assign CH1_PCSRSVDIN_in[12] = (CH1_PCSRSVDIN[12] === 1'bz) || CH1_PCSRSVDIN[12]; // rv 1
  assign CH1_PCSRSVDIN_in[13] = (CH1_PCSRSVDIN[13] === 1'bz) || CH1_PCSRSVDIN[13]; // rv 1
  assign CH1_PCSRSVDIN_in[14] = (CH1_PCSRSVDIN[14] === 1'bz) || CH1_PCSRSVDIN[14]; // rv 1
  assign CH1_PCSRSVDIN_in[15] = (CH1_PCSRSVDIN[15] === 1'bz) || CH1_PCSRSVDIN[15]; // rv 1
  assign CH1_PCSRSVDIN_in[1] = (CH1_PCSRSVDIN[1] === 1'bz) || CH1_PCSRSVDIN[1]; // rv 1
  assign CH1_PCSRSVDIN_in[2] = (CH1_PCSRSVDIN[2] === 1'bz) || CH1_PCSRSVDIN[2]; // rv 1
  assign CH1_PCSRSVDIN_in[3] = (CH1_PCSRSVDIN[3] === 1'bz) || CH1_PCSRSVDIN[3]; // rv 1
  assign CH1_PCSRSVDIN_in[4] = (CH1_PCSRSVDIN[4] === 1'bz) || CH1_PCSRSVDIN[4]; // rv 1
  assign CH1_PCSRSVDIN_in[5] = (CH1_PCSRSVDIN[5] === 1'bz) || CH1_PCSRSVDIN[5]; // rv 1
  assign CH1_PCSRSVDIN_in[6] = (CH1_PCSRSVDIN[6] === 1'bz) || CH1_PCSRSVDIN[6]; // rv 1
  assign CH1_PCSRSVDIN_in[7] = (CH1_PCSRSVDIN[7] === 1'bz) || CH1_PCSRSVDIN[7]; // rv 1
  assign CH1_PCSRSVDIN_in[8] = (CH1_PCSRSVDIN[8] === 1'bz) || CH1_PCSRSVDIN[8]; // rv 1
  assign CH1_PCSRSVDIN_in[9] = (CH1_PCSRSVDIN[9] === 1'bz) || CH1_PCSRSVDIN[9]; // rv 1
  assign CH1_PCSRSVDOUT_M_in = CH1_PCSRSVDOUT_M;
  assign CH1_PINRSVDAS_M_in = CH1_PINRSVDAS_M;
  assign CH1_REFDEBUGOUT_M_in = CH1_REFDEBUGOUT_M;
  assign CH1_RESETEXCEPTION_M_in = CH1_RESETEXCEPTION_M;
  assign CH1_RXBUFSTATUS_M_in = CH1_RXBUFSTATUS_M;
  assign CH1_RXCDRHOLD_in = (CH1_RXCDRHOLD === 1'bz) || CH1_RXCDRHOLD; // rv 1
  assign CH1_RXCDRLOCK_M_in = CH1_RXCDRLOCK_M;
  assign CH1_RXCDROVRDEN_in = (CH1_RXCDROVRDEN === 1'bz) || CH1_RXCDROVRDEN; // rv 1
  assign CH1_RXCDRPHDONE_M_in = CH1_RXCDRPHDONE_M;
  assign CH1_RXCDRRESET_in = (CH1_RXCDRRESET === 1'bz) || CH1_RXCDRRESET; // rv 1
  assign CH1_RXDATA_M_in = CH1_RXDATA_M;
  assign CH1_RXDEBUGPCSOUT_M_in = CH1_RXDEBUGPCSOUT_M;
  assign CH1_RXLATCLK_in = (CH1_RXLATCLK === 1'bz) || CH1_RXLATCLK; // rv 1
  assign CH1_RXPCSRESETMASK_in[0] = (CH1_RXPCSRESETMASK[0] === 1'bz) || CH1_RXPCSRESETMASK[0]; // rv 1
  assign CH1_RXPCSRESETMASK_in[1] = (CH1_RXPCSRESETMASK[1] === 1'bz) || CH1_RXPCSRESETMASK[1]; // rv 1
  assign CH1_RXPCSRESETMASK_in[2] = (CH1_RXPCSRESETMASK[2] === 1'bz) || CH1_RXPCSRESETMASK[2]; // rv 1
  assign CH1_RXPD_in[0] = (CH1_RXPD[0] === 1'bz) || CH1_RXPD[0]; // rv 1
  assign CH1_RXPD_in[1] = (CH1_RXPD[1] === 1'bz) || CH1_RXPD[1]; // rv 1
  assign CH1_RXPERST_in = (CH1_RXPERST === 1'bz) || CH1_RXPERST; // rv 1
  assign CH1_RXPMARESETDONE_M_in = CH1_RXPMARESETDONE_M;
  assign CH1_RXPMARESETMASK_in[0] = (CH1_RXPMARESETMASK[0] === 1'bz) || CH1_RXPMARESETMASK[0]; // rv 1
  assign CH1_RXPMARESETMASK_in[1] = (CH1_RXPMARESETMASK[1] === 1'bz) || CH1_RXPMARESETMASK[1]; // rv 1
  assign CH1_RXPMARESETMASK_in[2] = (CH1_RXPMARESETMASK[2] === 1'bz) || CH1_RXPMARESETMASK[2]; // rv 1
  assign CH1_RXPMARESETMASK_in[3] = (CH1_RXPMARESETMASK[3] === 1'bz) || CH1_RXPMARESETMASK[3]; // rv 1
  assign CH1_RXPMARESETMASK_in[4] = (CH1_RXPMARESETMASK[4] === 1'bz) || CH1_RXPMARESETMASK[4]; // rv 1
  assign CH1_RXPMARESETMASK_in[5] = (CH1_RXPMARESETMASK[5] === 1'bz) || CH1_RXPMARESETMASK[5]; // rv 1
  assign CH1_RXPMARESETMASK_in[6] = (CH1_RXPMARESETMASK[6] === 1'bz) || CH1_RXPMARESETMASK[6]; // rv 1
  assign CH1_RXPMARESETMASK_in[7] = (CH1_RXPMARESETMASK[7] === 1'bz) || CH1_RXPMARESETMASK[7]; // rv 1
  assign CH1_RXPOLARITY_in = (CH1_RXPOLARITY === 1'bz) || CH1_RXPOLARITY; // rv 1
  assign CH1_RXPRBSCNTRESET_in = (CH1_RXPRBSCNTRESET === 1'bz) || CH1_RXPRBSCNTRESET; // rv 1
  assign CH1_RXPRBSCNTSTOP_in = (CH1_RXPRBSCNTSTOP === 1'bz) || CH1_RXPRBSCNTSTOP; // rv 1
  assign CH1_RXPRBSERR_M_in = CH1_RXPRBSERR_M;
  assign CH1_RXPRBSLOCKED_M_in = CH1_RXPRBSLOCKED_M;
  assign CH1_RXPRBSSEL_in[0] = (CH1_RXPRBSSEL[0] === 1'bz) || CH1_RXPRBSSEL[0]; // rv 1
  assign CH1_RXPRBSSEL_in[1] = (CH1_RXPRBSSEL[1] === 1'bz) || CH1_RXPRBSSEL[1]; // rv 1
  assign CH1_RXPRBSSEL_in[2] = (CH1_RXPRBSSEL[2] === 1'bz) || CH1_RXPRBSSEL[2]; // rv 1
  assign CH1_RXPRBSSEL_in[3] = (CH1_RXPRBSSEL[3] === 1'bz) || CH1_RXPRBSSEL[3]; // rv 1
  assign CH1_RXPROGDIVRESETDONE_M_in = CH1_RXPROGDIVRESETDONE_M;
  assign CH1_RXPROGDIVRESET_in = (CH1_RXPROGDIVRESET === 1'bz) || CH1_RXPROGDIVRESET; // rv 1
  assign CH1_RXQPRBSEN_in = (CH1_RXQPRBSEN === 1'bz) || CH1_RXQPRBSEN; // rv 1
  assign CH1_RXRATE_in[0] = (CH1_RXRATE[0] === 1'bz) || CH1_RXRATE[0]; // rv 1
  assign CH1_RXRATE_in[1] = (CH1_RXRATE[1] === 1'bz) || CH1_RXRATE[1]; // rv 1
  assign CH1_RXRATE_in[2] = (CH1_RXRATE[2] === 1'bz) || CH1_RXRATE[2]; // rv 1
  assign CH1_RXRATE_in[3] = (CH1_RXRATE[3] === 1'bz) || CH1_RXRATE[3]; // rv 1
  assign CH1_RXRATE_in[4] = (CH1_RXRATE[4] === 1'bz) || CH1_RXRATE[4]; // rv 1
  assign CH1_RXRATE_in[5] = (CH1_RXRATE[5] === 1'bz) || CH1_RXRATE[5]; // rv 1
  assign CH1_RXRATE_in[6] = (CH1_RXRATE[6] === 1'bz) || CH1_RXRATE[6]; // rv 1
  assign CH1_RXRATE_in[7] = (CH1_RXRATE[7] === 1'bz) || CH1_RXRATE[7]; // rv 1
  assign CH1_RXRESETDONE_M_in = CH1_RXRESETDONE_M;
  assign CH1_RXRESETMODE_in[0] = (CH1_RXRESETMODE[0] === 1'bz) || CH1_RXRESETMODE[0]; // rv 1
  assign CH1_RXRESETMODE_in[1] = (CH1_RXRESETMODE[1] === 1'bz) || CH1_RXRESETMODE[1]; // rv 1
  assign CH1_RXRSV0_in = (CH1_RXRSV0 === 1'bz) || CH1_RXRSV0; // rv 1
  assign CH1_RXRSV1_in = (CH1_RXRSV1 === 1'bz) || CH1_RXRSV1; // rv 1
  assign CH1_RXRSV2_in = (CH1_RXRSV2 === 1'bz) || CH1_RXRSV2; // rv 1
  assign CH1_RXUSERRDY_in = (CH1_RXUSERRDY === 1'bz) || CH1_RXUSERRDY; // rv 1
  assign CH1_RXUSRCLK_in = (CH1_RXUSRCLK === 1'bz) || CH1_RXUSRCLK; // rv 1
  assign CH1_TSTCLK0_in = (CH1_TSTCLK0 === 1'bz) || CH1_TSTCLK0; // rv 1
  assign CH1_TSTCLK1_in = (CH1_TSTCLK1 === 1'bz) || CH1_TSTCLK1; // rv 1
  assign CH1_TXBUFSTATUS_M_in = CH1_TXBUFSTATUS_M;
  assign CH1_TXDATA_in[0] = (CH1_TXDATA[0] === 1'bz) || CH1_TXDATA[0]; // rv 1
  assign CH1_TXDATA_in[100] = (CH1_TXDATA[100] === 1'bz) || CH1_TXDATA[100]; // rv 1
  assign CH1_TXDATA_in[101] = (CH1_TXDATA[101] === 1'bz) || CH1_TXDATA[101]; // rv 1
  assign CH1_TXDATA_in[102] = (CH1_TXDATA[102] === 1'bz) || CH1_TXDATA[102]; // rv 1
  assign CH1_TXDATA_in[103] = (CH1_TXDATA[103] === 1'bz) || CH1_TXDATA[103]; // rv 1
  assign CH1_TXDATA_in[104] = (CH1_TXDATA[104] === 1'bz) || CH1_TXDATA[104]; // rv 1
  assign CH1_TXDATA_in[105] = (CH1_TXDATA[105] === 1'bz) || CH1_TXDATA[105]; // rv 1
  assign CH1_TXDATA_in[106] = (CH1_TXDATA[106] === 1'bz) || CH1_TXDATA[106]; // rv 1
  assign CH1_TXDATA_in[107] = (CH1_TXDATA[107] === 1'bz) || CH1_TXDATA[107]; // rv 1
  assign CH1_TXDATA_in[108] = (CH1_TXDATA[108] === 1'bz) || CH1_TXDATA[108]; // rv 1
  assign CH1_TXDATA_in[109] = (CH1_TXDATA[109] === 1'bz) || CH1_TXDATA[109]; // rv 1
  assign CH1_TXDATA_in[10] = (CH1_TXDATA[10] === 1'bz) || CH1_TXDATA[10]; // rv 1
  assign CH1_TXDATA_in[110] = (CH1_TXDATA[110] === 1'bz) || CH1_TXDATA[110]; // rv 1
  assign CH1_TXDATA_in[111] = (CH1_TXDATA[111] === 1'bz) || CH1_TXDATA[111]; // rv 1
  assign CH1_TXDATA_in[112] = (CH1_TXDATA[112] === 1'bz) || CH1_TXDATA[112]; // rv 1
  assign CH1_TXDATA_in[113] = (CH1_TXDATA[113] === 1'bz) || CH1_TXDATA[113]; // rv 1
  assign CH1_TXDATA_in[114] = (CH1_TXDATA[114] === 1'bz) || CH1_TXDATA[114]; // rv 1
  assign CH1_TXDATA_in[115] = (CH1_TXDATA[115] === 1'bz) || CH1_TXDATA[115]; // rv 1
  assign CH1_TXDATA_in[116] = (CH1_TXDATA[116] === 1'bz) || CH1_TXDATA[116]; // rv 1
  assign CH1_TXDATA_in[117] = (CH1_TXDATA[117] === 1'bz) || CH1_TXDATA[117]; // rv 1
  assign CH1_TXDATA_in[118] = (CH1_TXDATA[118] === 1'bz) || CH1_TXDATA[118]; // rv 1
  assign CH1_TXDATA_in[119] = (CH1_TXDATA[119] === 1'bz) || CH1_TXDATA[119]; // rv 1
  assign CH1_TXDATA_in[11] = (CH1_TXDATA[11] === 1'bz) || CH1_TXDATA[11]; // rv 1
  assign CH1_TXDATA_in[120] = (CH1_TXDATA[120] === 1'bz) || CH1_TXDATA[120]; // rv 1
  assign CH1_TXDATA_in[121] = (CH1_TXDATA[121] === 1'bz) || CH1_TXDATA[121]; // rv 1
  assign CH1_TXDATA_in[122] = (CH1_TXDATA[122] === 1'bz) || CH1_TXDATA[122]; // rv 1
  assign CH1_TXDATA_in[123] = (CH1_TXDATA[123] === 1'bz) || CH1_TXDATA[123]; // rv 1
  assign CH1_TXDATA_in[124] = (CH1_TXDATA[124] === 1'bz) || CH1_TXDATA[124]; // rv 1
  assign CH1_TXDATA_in[125] = (CH1_TXDATA[125] === 1'bz) || CH1_TXDATA[125]; // rv 1
  assign CH1_TXDATA_in[126] = (CH1_TXDATA[126] === 1'bz) || CH1_TXDATA[126]; // rv 1
  assign CH1_TXDATA_in[127] = (CH1_TXDATA[127] === 1'bz) || CH1_TXDATA[127]; // rv 1
  assign CH1_TXDATA_in[128] = (CH1_TXDATA[128] === 1'bz) || CH1_TXDATA[128]; // rv 1
  assign CH1_TXDATA_in[129] = (CH1_TXDATA[129] === 1'bz) || CH1_TXDATA[129]; // rv 1
  assign CH1_TXDATA_in[12] = (CH1_TXDATA[12] === 1'bz) || CH1_TXDATA[12]; // rv 1
  assign CH1_TXDATA_in[130] = (CH1_TXDATA[130] === 1'bz) || CH1_TXDATA[130]; // rv 1
  assign CH1_TXDATA_in[131] = (CH1_TXDATA[131] === 1'bz) || CH1_TXDATA[131]; // rv 1
  assign CH1_TXDATA_in[132] = (CH1_TXDATA[132] === 1'bz) || CH1_TXDATA[132]; // rv 1
  assign CH1_TXDATA_in[133] = (CH1_TXDATA[133] === 1'bz) || CH1_TXDATA[133]; // rv 1
  assign CH1_TXDATA_in[134] = (CH1_TXDATA[134] === 1'bz) || CH1_TXDATA[134]; // rv 1
  assign CH1_TXDATA_in[135] = (CH1_TXDATA[135] === 1'bz) || CH1_TXDATA[135]; // rv 1
  assign CH1_TXDATA_in[136] = (CH1_TXDATA[136] === 1'bz) || CH1_TXDATA[136]; // rv 1
  assign CH1_TXDATA_in[137] = (CH1_TXDATA[137] === 1'bz) || CH1_TXDATA[137]; // rv 1
  assign CH1_TXDATA_in[138] = (CH1_TXDATA[138] === 1'bz) || CH1_TXDATA[138]; // rv 1
  assign CH1_TXDATA_in[139] = (CH1_TXDATA[139] === 1'bz) || CH1_TXDATA[139]; // rv 1
  assign CH1_TXDATA_in[13] = (CH1_TXDATA[13] === 1'bz) || CH1_TXDATA[13]; // rv 1
  assign CH1_TXDATA_in[140] = (CH1_TXDATA[140] === 1'bz) || CH1_TXDATA[140]; // rv 1
  assign CH1_TXDATA_in[141] = (CH1_TXDATA[141] === 1'bz) || CH1_TXDATA[141]; // rv 1
  assign CH1_TXDATA_in[142] = (CH1_TXDATA[142] === 1'bz) || CH1_TXDATA[142]; // rv 1
  assign CH1_TXDATA_in[143] = (CH1_TXDATA[143] === 1'bz) || CH1_TXDATA[143]; // rv 1
  assign CH1_TXDATA_in[144] = (CH1_TXDATA[144] === 1'bz) || CH1_TXDATA[144]; // rv 1
  assign CH1_TXDATA_in[145] = (CH1_TXDATA[145] === 1'bz) || CH1_TXDATA[145]; // rv 1
  assign CH1_TXDATA_in[146] = (CH1_TXDATA[146] === 1'bz) || CH1_TXDATA[146]; // rv 1
  assign CH1_TXDATA_in[147] = (CH1_TXDATA[147] === 1'bz) || CH1_TXDATA[147]; // rv 1
  assign CH1_TXDATA_in[148] = (CH1_TXDATA[148] === 1'bz) || CH1_TXDATA[148]; // rv 1
  assign CH1_TXDATA_in[149] = (CH1_TXDATA[149] === 1'bz) || CH1_TXDATA[149]; // rv 1
  assign CH1_TXDATA_in[14] = (CH1_TXDATA[14] === 1'bz) || CH1_TXDATA[14]; // rv 1
  assign CH1_TXDATA_in[150] = (CH1_TXDATA[150] === 1'bz) || CH1_TXDATA[150]; // rv 1
  assign CH1_TXDATA_in[151] = (CH1_TXDATA[151] === 1'bz) || CH1_TXDATA[151]; // rv 1
  assign CH1_TXDATA_in[152] = (CH1_TXDATA[152] === 1'bz) || CH1_TXDATA[152]; // rv 1
  assign CH1_TXDATA_in[153] = (CH1_TXDATA[153] === 1'bz) || CH1_TXDATA[153]; // rv 1
  assign CH1_TXDATA_in[154] = (CH1_TXDATA[154] === 1'bz) || CH1_TXDATA[154]; // rv 1
  assign CH1_TXDATA_in[155] = (CH1_TXDATA[155] === 1'bz) || CH1_TXDATA[155]; // rv 1
  assign CH1_TXDATA_in[156] = (CH1_TXDATA[156] === 1'bz) || CH1_TXDATA[156]; // rv 1
  assign CH1_TXDATA_in[157] = (CH1_TXDATA[157] === 1'bz) || CH1_TXDATA[157]; // rv 1
  assign CH1_TXDATA_in[158] = (CH1_TXDATA[158] === 1'bz) || CH1_TXDATA[158]; // rv 1
  assign CH1_TXDATA_in[159] = (CH1_TXDATA[159] === 1'bz) || CH1_TXDATA[159]; // rv 1
  assign CH1_TXDATA_in[15] = (CH1_TXDATA[15] === 1'bz) || CH1_TXDATA[15]; // rv 1
  assign CH1_TXDATA_in[160] = (CH1_TXDATA[160] === 1'bz) || CH1_TXDATA[160]; // rv 1
  assign CH1_TXDATA_in[161] = (CH1_TXDATA[161] === 1'bz) || CH1_TXDATA[161]; // rv 1
  assign CH1_TXDATA_in[162] = (CH1_TXDATA[162] === 1'bz) || CH1_TXDATA[162]; // rv 1
  assign CH1_TXDATA_in[163] = (CH1_TXDATA[163] === 1'bz) || CH1_TXDATA[163]; // rv 1
  assign CH1_TXDATA_in[164] = (CH1_TXDATA[164] === 1'bz) || CH1_TXDATA[164]; // rv 1
  assign CH1_TXDATA_in[165] = (CH1_TXDATA[165] === 1'bz) || CH1_TXDATA[165]; // rv 1
  assign CH1_TXDATA_in[166] = (CH1_TXDATA[166] === 1'bz) || CH1_TXDATA[166]; // rv 1
  assign CH1_TXDATA_in[167] = (CH1_TXDATA[167] === 1'bz) || CH1_TXDATA[167]; // rv 1
  assign CH1_TXDATA_in[168] = (CH1_TXDATA[168] === 1'bz) || CH1_TXDATA[168]; // rv 1
  assign CH1_TXDATA_in[169] = (CH1_TXDATA[169] === 1'bz) || CH1_TXDATA[169]; // rv 1
  assign CH1_TXDATA_in[16] = (CH1_TXDATA[16] === 1'bz) || CH1_TXDATA[16]; // rv 1
  assign CH1_TXDATA_in[170] = (CH1_TXDATA[170] === 1'bz) || CH1_TXDATA[170]; // rv 1
  assign CH1_TXDATA_in[171] = (CH1_TXDATA[171] === 1'bz) || CH1_TXDATA[171]; // rv 1
  assign CH1_TXDATA_in[172] = (CH1_TXDATA[172] === 1'bz) || CH1_TXDATA[172]; // rv 1
  assign CH1_TXDATA_in[173] = (CH1_TXDATA[173] === 1'bz) || CH1_TXDATA[173]; // rv 1
  assign CH1_TXDATA_in[174] = (CH1_TXDATA[174] === 1'bz) || CH1_TXDATA[174]; // rv 1
  assign CH1_TXDATA_in[175] = (CH1_TXDATA[175] === 1'bz) || CH1_TXDATA[175]; // rv 1
  assign CH1_TXDATA_in[176] = (CH1_TXDATA[176] === 1'bz) || CH1_TXDATA[176]; // rv 1
  assign CH1_TXDATA_in[177] = (CH1_TXDATA[177] === 1'bz) || CH1_TXDATA[177]; // rv 1
  assign CH1_TXDATA_in[178] = (CH1_TXDATA[178] === 1'bz) || CH1_TXDATA[178]; // rv 1
  assign CH1_TXDATA_in[179] = (CH1_TXDATA[179] === 1'bz) || CH1_TXDATA[179]; // rv 1
  assign CH1_TXDATA_in[17] = (CH1_TXDATA[17] === 1'bz) || CH1_TXDATA[17]; // rv 1
  assign CH1_TXDATA_in[180] = (CH1_TXDATA[180] === 1'bz) || CH1_TXDATA[180]; // rv 1
  assign CH1_TXDATA_in[181] = (CH1_TXDATA[181] === 1'bz) || CH1_TXDATA[181]; // rv 1
  assign CH1_TXDATA_in[182] = (CH1_TXDATA[182] === 1'bz) || CH1_TXDATA[182]; // rv 1
  assign CH1_TXDATA_in[183] = (CH1_TXDATA[183] === 1'bz) || CH1_TXDATA[183]; // rv 1
  assign CH1_TXDATA_in[184] = (CH1_TXDATA[184] === 1'bz) || CH1_TXDATA[184]; // rv 1
  assign CH1_TXDATA_in[185] = (CH1_TXDATA[185] === 1'bz) || CH1_TXDATA[185]; // rv 1
  assign CH1_TXDATA_in[186] = (CH1_TXDATA[186] === 1'bz) || CH1_TXDATA[186]; // rv 1
  assign CH1_TXDATA_in[187] = (CH1_TXDATA[187] === 1'bz) || CH1_TXDATA[187]; // rv 1
  assign CH1_TXDATA_in[188] = (CH1_TXDATA[188] === 1'bz) || CH1_TXDATA[188]; // rv 1
  assign CH1_TXDATA_in[189] = (CH1_TXDATA[189] === 1'bz) || CH1_TXDATA[189]; // rv 1
  assign CH1_TXDATA_in[18] = (CH1_TXDATA[18] === 1'bz) || CH1_TXDATA[18]; // rv 1
  assign CH1_TXDATA_in[190] = (CH1_TXDATA[190] === 1'bz) || CH1_TXDATA[190]; // rv 1
  assign CH1_TXDATA_in[191] = (CH1_TXDATA[191] === 1'bz) || CH1_TXDATA[191]; // rv 1
  assign CH1_TXDATA_in[192] = (CH1_TXDATA[192] === 1'bz) || CH1_TXDATA[192]; // rv 1
  assign CH1_TXDATA_in[193] = (CH1_TXDATA[193] === 1'bz) || CH1_TXDATA[193]; // rv 1
  assign CH1_TXDATA_in[194] = (CH1_TXDATA[194] === 1'bz) || CH1_TXDATA[194]; // rv 1
  assign CH1_TXDATA_in[195] = (CH1_TXDATA[195] === 1'bz) || CH1_TXDATA[195]; // rv 1
  assign CH1_TXDATA_in[196] = (CH1_TXDATA[196] === 1'bz) || CH1_TXDATA[196]; // rv 1
  assign CH1_TXDATA_in[197] = (CH1_TXDATA[197] === 1'bz) || CH1_TXDATA[197]; // rv 1
  assign CH1_TXDATA_in[198] = (CH1_TXDATA[198] === 1'bz) || CH1_TXDATA[198]; // rv 1
  assign CH1_TXDATA_in[199] = (CH1_TXDATA[199] === 1'bz) || CH1_TXDATA[199]; // rv 1
  assign CH1_TXDATA_in[19] = (CH1_TXDATA[19] === 1'bz) || CH1_TXDATA[19]; // rv 1
  assign CH1_TXDATA_in[1] = (CH1_TXDATA[1] === 1'bz) || CH1_TXDATA[1]; // rv 1
  assign CH1_TXDATA_in[200] = (CH1_TXDATA[200] === 1'bz) || CH1_TXDATA[200]; // rv 1
  assign CH1_TXDATA_in[201] = (CH1_TXDATA[201] === 1'bz) || CH1_TXDATA[201]; // rv 1
  assign CH1_TXDATA_in[202] = (CH1_TXDATA[202] === 1'bz) || CH1_TXDATA[202]; // rv 1
  assign CH1_TXDATA_in[203] = (CH1_TXDATA[203] === 1'bz) || CH1_TXDATA[203]; // rv 1
  assign CH1_TXDATA_in[204] = (CH1_TXDATA[204] === 1'bz) || CH1_TXDATA[204]; // rv 1
  assign CH1_TXDATA_in[205] = (CH1_TXDATA[205] === 1'bz) || CH1_TXDATA[205]; // rv 1
  assign CH1_TXDATA_in[206] = (CH1_TXDATA[206] === 1'bz) || CH1_TXDATA[206]; // rv 1
  assign CH1_TXDATA_in[207] = (CH1_TXDATA[207] === 1'bz) || CH1_TXDATA[207]; // rv 1
  assign CH1_TXDATA_in[208] = (CH1_TXDATA[208] === 1'bz) || CH1_TXDATA[208]; // rv 1
  assign CH1_TXDATA_in[209] = (CH1_TXDATA[209] === 1'bz) || CH1_TXDATA[209]; // rv 1
  assign CH1_TXDATA_in[20] = (CH1_TXDATA[20] === 1'bz) || CH1_TXDATA[20]; // rv 1
  assign CH1_TXDATA_in[210] = (CH1_TXDATA[210] === 1'bz) || CH1_TXDATA[210]; // rv 1
  assign CH1_TXDATA_in[211] = (CH1_TXDATA[211] === 1'bz) || CH1_TXDATA[211]; // rv 1
  assign CH1_TXDATA_in[212] = (CH1_TXDATA[212] === 1'bz) || CH1_TXDATA[212]; // rv 1
  assign CH1_TXDATA_in[213] = (CH1_TXDATA[213] === 1'bz) || CH1_TXDATA[213]; // rv 1
  assign CH1_TXDATA_in[214] = (CH1_TXDATA[214] === 1'bz) || CH1_TXDATA[214]; // rv 1
  assign CH1_TXDATA_in[215] = (CH1_TXDATA[215] === 1'bz) || CH1_TXDATA[215]; // rv 1
  assign CH1_TXDATA_in[216] = (CH1_TXDATA[216] === 1'bz) || CH1_TXDATA[216]; // rv 1
  assign CH1_TXDATA_in[217] = (CH1_TXDATA[217] === 1'bz) || CH1_TXDATA[217]; // rv 1
  assign CH1_TXDATA_in[218] = (CH1_TXDATA[218] === 1'bz) || CH1_TXDATA[218]; // rv 1
  assign CH1_TXDATA_in[219] = (CH1_TXDATA[219] === 1'bz) || CH1_TXDATA[219]; // rv 1
  assign CH1_TXDATA_in[21] = (CH1_TXDATA[21] === 1'bz) || CH1_TXDATA[21]; // rv 1
  assign CH1_TXDATA_in[220] = (CH1_TXDATA[220] === 1'bz) || CH1_TXDATA[220]; // rv 1
  assign CH1_TXDATA_in[221] = (CH1_TXDATA[221] === 1'bz) || CH1_TXDATA[221]; // rv 1
  assign CH1_TXDATA_in[222] = (CH1_TXDATA[222] === 1'bz) || CH1_TXDATA[222]; // rv 1
  assign CH1_TXDATA_in[223] = (CH1_TXDATA[223] === 1'bz) || CH1_TXDATA[223]; // rv 1
  assign CH1_TXDATA_in[224] = (CH1_TXDATA[224] === 1'bz) || CH1_TXDATA[224]; // rv 1
  assign CH1_TXDATA_in[225] = (CH1_TXDATA[225] === 1'bz) || CH1_TXDATA[225]; // rv 1
  assign CH1_TXDATA_in[226] = (CH1_TXDATA[226] === 1'bz) || CH1_TXDATA[226]; // rv 1
  assign CH1_TXDATA_in[227] = (CH1_TXDATA[227] === 1'bz) || CH1_TXDATA[227]; // rv 1
  assign CH1_TXDATA_in[228] = (CH1_TXDATA[228] === 1'bz) || CH1_TXDATA[228]; // rv 1
  assign CH1_TXDATA_in[229] = (CH1_TXDATA[229] === 1'bz) || CH1_TXDATA[229]; // rv 1
  assign CH1_TXDATA_in[22] = (CH1_TXDATA[22] === 1'bz) || CH1_TXDATA[22]; // rv 1
  assign CH1_TXDATA_in[230] = (CH1_TXDATA[230] === 1'bz) || CH1_TXDATA[230]; // rv 1
  assign CH1_TXDATA_in[231] = (CH1_TXDATA[231] === 1'bz) || CH1_TXDATA[231]; // rv 1
  assign CH1_TXDATA_in[232] = (CH1_TXDATA[232] === 1'bz) || CH1_TXDATA[232]; // rv 1
  assign CH1_TXDATA_in[233] = (CH1_TXDATA[233] === 1'bz) || CH1_TXDATA[233]; // rv 1
  assign CH1_TXDATA_in[234] = (CH1_TXDATA[234] === 1'bz) || CH1_TXDATA[234]; // rv 1
  assign CH1_TXDATA_in[235] = (CH1_TXDATA[235] === 1'bz) || CH1_TXDATA[235]; // rv 1
  assign CH1_TXDATA_in[236] = (CH1_TXDATA[236] === 1'bz) || CH1_TXDATA[236]; // rv 1
  assign CH1_TXDATA_in[237] = (CH1_TXDATA[237] === 1'bz) || CH1_TXDATA[237]; // rv 1
  assign CH1_TXDATA_in[238] = (CH1_TXDATA[238] === 1'bz) || CH1_TXDATA[238]; // rv 1
  assign CH1_TXDATA_in[239] = (CH1_TXDATA[239] === 1'bz) || CH1_TXDATA[239]; // rv 1
  assign CH1_TXDATA_in[23] = (CH1_TXDATA[23] === 1'bz) || CH1_TXDATA[23]; // rv 1
  assign CH1_TXDATA_in[240] = (CH1_TXDATA[240] === 1'bz) || CH1_TXDATA[240]; // rv 1
  assign CH1_TXDATA_in[241] = (CH1_TXDATA[241] === 1'bz) || CH1_TXDATA[241]; // rv 1
  assign CH1_TXDATA_in[242] = (CH1_TXDATA[242] === 1'bz) || CH1_TXDATA[242]; // rv 1
  assign CH1_TXDATA_in[243] = (CH1_TXDATA[243] === 1'bz) || CH1_TXDATA[243]; // rv 1
  assign CH1_TXDATA_in[244] = (CH1_TXDATA[244] === 1'bz) || CH1_TXDATA[244]; // rv 1
  assign CH1_TXDATA_in[245] = (CH1_TXDATA[245] === 1'bz) || CH1_TXDATA[245]; // rv 1
  assign CH1_TXDATA_in[246] = (CH1_TXDATA[246] === 1'bz) || CH1_TXDATA[246]; // rv 1
  assign CH1_TXDATA_in[247] = (CH1_TXDATA[247] === 1'bz) || CH1_TXDATA[247]; // rv 1
  assign CH1_TXDATA_in[248] = (CH1_TXDATA[248] === 1'bz) || CH1_TXDATA[248]; // rv 1
  assign CH1_TXDATA_in[249] = (CH1_TXDATA[249] === 1'bz) || CH1_TXDATA[249]; // rv 1
  assign CH1_TXDATA_in[24] = (CH1_TXDATA[24] === 1'bz) || CH1_TXDATA[24]; // rv 1
  assign CH1_TXDATA_in[250] = (CH1_TXDATA[250] === 1'bz) || CH1_TXDATA[250]; // rv 1
  assign CH1_TXDATA_in[251] = (CH1_TXDATA[251] === 1'bz) || CH1_TXDATA[251]; // rv 1
  assign CH1_TXDATA_in[252] = (CH1_TXDATA[252] === 1'bz) || CH1_TXDATA[252]; // rv 1
  assign CH1_TXDATA_in[253] = (CH1_TXDATA[253] === 1'bz) || CH1_TXDATA[253]; // rv 1
  assign CH1_TXDATA_in[254] = (CH1_TXDATA[254] === 1'bz) || CH1_TXDATA[254]; // rv 1
  assign CH1_TXDATA_in[255] = (CH1_TXDATA[255] === 1'bz) || CH1_TXDATA[255]; // rv 1
  assign CH1_TXDATA_in[25] = (CH1_TXDATA[25] === 1'bz) || CH1_TXDATA[25]; // rv 1
  assign CH1_TXDATA_in[26] = (CH1_TXDATA[26] === 1'bz) || CH1_TXDATA[26]; // rv 1
  assign CH1_TXDATA_in[27] = (CH1_TXDATA[27] === 1'bz) || CH1_TXDATA[27]; // rv 1
  assign CH1_TXDATA_in[28] = (CH1_TXDATA[28] === 1'bz) || CH1_TXDATA[28]; // rv 1
  assign CH1_TXDATA_in[29] = (CH1_TXDATA[29] === 1'bz) || CH1_TXDATA[29]; // rv 1
  assign CH1_TXDATA_in[2] = (CH1_TXDATA[2] === 1'bz) || CH1_TXDATA[2]; // rv 1
  assign CH1_TXDATA_in[30] = (CH1_TXDATA[30] === 1'bz) || CH1_TXDATA[30]; // rv 1
  assign CH1_TXDATA_in[31] = (CH1_TXDATA[31] === 1'bz) || CH1_TXDATA[31]; // rv 1
  assign CH1_TXDATA_in[32] = (CH1_TXDATA[32] === 1'bz) || CH1_TXDATA[32]; // rv 1
  assign CH1_TXDATA_in[33] = (CH1_TXDATA[33] === 1'bz) || CH1_TXDATA[33]; // rv 1
  assign CH1_TXDATA_in[34] = (CH1_TXDATA[34] === 1'bz) || CH1_TXDATA[34]; // rv 1
  assign CH1_TXDATA_in[35] = (CH1_TXDATA[35] === 1'bz) || CH1_TXDATA[35]; // rv 1
  assign CH1_TXDATA_in[36] = (CH1_TXDATA[36] === 1'bz) || CH1_TXDATA[36]; // rv 1
  assign CH1_TXDATA_in[37] = (CH1_TXDATA[37] === 1'bz) || CH1_TXDATA[37]; // rv 1
  assign CH1_TXDATA_in[38] = (CH1_TXDATA[38] === 1'bz) || CH1_TXDATA[38]; // rv 1
  assign CH1_TXDATA_in[39] = (CH1_TXDATA[39] === 1'bz) || CH1_TXDATA[39]; // rv 1
  assign CH1_TXDATA_in[3] = (CH1_TXDATA[3] === 1'bz) || CH1_TXDATA[3]; // rv 1
  assign CH1_TXDATA_in[40] = (CH1_TXDATA[40] === 1'bz) || CH1_TXDATA[40]; // rv 1
  assign CH1_TXDATA_in[41] = (CH1_TXDATA[41] === 1'bz) || CH1_TXDATA[41]; // rv 1
  assign CH1_TXDATA_in[42] = (CH1_TXDATA[42] === 1'bz) || CH1_TXDATA[42]; // rv 1
  assign CH1_TXDATA_in[43] = (CH1_TXDATA[43] === 1'bz) || CH1_TXDATA[43]; // rv 1
  assign CH1_TXDATA_in[44] = (CH1_TXDATA[44] === 1'bz) || CH1_TXDATA[44]; // rv 1
  assign CH1_TXDATA_in[45] = (CH1_TXDATA[45] === 1'bz) || CH1_TXDATA[45]; // rv 1
  assign CH1_TXDATA_in[46] = (CH1_TXDATA[46] === 1'bz) || CH1_TXDATA[46]; // rv 1
  assign CH1_TXDATA_in[47] = (CH1_TXDATA[47] === 1'bz) || CH1_TXDATA[47]; // rv 1
  assign CH1_TXDATA_in[48] = (CH1_TXDATA[48] === 1'bz) || CH1_TXDATA[48]; // rv 1
  assign CH1_TXDATA_in[49] = (CH1_TXDATA[49] === 1'bz) || CH1_TXDATA[49]; // rv 1
  assign CH1_TXDATA_in[4] = (CH1_TXDATA[4] === 1'bz) || CH1_TXDATA[4]; // rv 1
  assign CH1_TXDATA_in[50] = (CH1_TXDATA[50] === 1'bz) || CH1_TXDATA[50]; // rv 1
  assign CH1_TXDATA_in[51] = (CH1_TXDATA[51] === 1'bz) || CH1_TXDATA[51]; // rv 1
  assign CH1_TXDATA_in[52] = (CH1_TXDATA[52] === 1'bz) || CH1_TXDATA[52]; // rv 1
  assign CH1_TXDATA_in[53] = (CH1_TXDATA[53] === 1'bz) || CH1_TXDATA[53]; // rv 1
  assign CH1_TXDATA_in[54] = (CH1_TXDATA[54] === 1'bz) || CH1_TXDATA[54]; // rv 1
  assign CH1_TXDATA_in[55] = (CH1_TXDATA[55] === 1'bz) || CH1_TXDATA[55]; // rv 1
  assign CH1_TXDATA_in[56] = (CH1_TXDATA[56] === 1'bz) || CH1_TXDATA[56]; // rv 1
  assign CH1_TXDATA_in[57] = (CH1_TXDATA[57] === 1'bz) || CH1_TXDATA[57]; // rv 1
  assign CH1_TXDATA_in[58] = (CH1_TXDATA[58] === 1'bz) || CH1_TXDATA[58]; // rv 1
  assign CH1_TXDATA_in[59] = (CH1_TXDATA[59] === 1'bz) || CH1_TXDATA[59]; // rv 1
  assign CH1_TXDATA_in[5] = (CH1_TXDATA[5] === 1'bz) || CH1_TXDATA[5]; // rv 1
  assign CH1_TXDATA_in[60] = (CH1_TXDATA[60] === 1'bz) || CH1_TXDATA[60]; // rv 1
  assign CH1_TXDATA_in[61] = (CH1_TXDATA[61] === 1'bz) || CH1_TXDATA[61]; // rv 1
  assign CH1_TXDATA_in[62] = (CH1_TXDATA[62] === 1'bz) || CH1_TXDATA[62]; // rv 1
  assign CH1_TXDATA_in[63] = (CH1_TXDATA[63] === 1'bz) || CH1_TXDATA[63]; // rv 1
  assign CH1_TXDATA_in[64] = (CH1_TXDATA[64] === 1'bz) || CH1_TXDATA[64]; // rv 1
  assign CH1_TXDATA_in[65] = (CH1_TXDATA[65] === 1'bz) || CH1_TXDATA[65]; // rv 1
  assign CH1_TXDATA_in[66] = (CH1_TXDATA[66] === 1'bz) || CH1_TXDATA[66]; // rv 1
  assign CH1_TXDATA_in[67] = (CH1_TXDATA[67] === 1'bz) || CH1_TXDATA[67]; // rv 1
  assign CH1_TXDATA_in[68] = (CH1_TXDATA[68] === 1'bz) || CH1_TXDATA[68]; // rv 1
  assign CH1_TXDATA_in[69] = (CH1_TXDATA[69] === 1'bz) || CH1_TXDATA[69]; // rv 1
  assign CH1_TXDATA_in[6] = (CH1_TXDATA[6] === 1'bz) || CH1_TXDATA[6]; // rv 1
  assign CH1_TXDATA_in[70] = (CH1_TXDATA[70] === 1'bz) || CH1_TXDATA[70]; // rv 1
  assign CH1_TXDATA_in[71] = (CH1_TXDATA[71] === 1'bz) || CH1_TXDATA[71]; // rv 1
  assign CH1_TXDATA_in[72] = (CH1_TXDATA[72] === 1'bz) || CH1_TXDATA[72]; // rv 1
  assign CH1_TXDATA_in[73] = (CH1_TXDATA[73] === 1'bz) || CH1_TXDATA[73]; // rv 1
  assign CH1_TXDATA_in[74] = (CH1_TXDATA[74] === 1'bz) || CH1_TXDATA[74]; // rv 1
  assign CH1_TXDATA_in[75] = (CH1_TXDATA[75] === 1'bz) || CH1_TXDATA[75]; // rv 1
  assign CH1_TXDATA_in[76] = (CH1_TXDATA[76] === 1'bz) || CH1_TXDATA[76]; // rv 1
  assign CH1_TXDATA_in[77] = (CH1_TXDATA[77] === 1'bz) || CH1_TXDATA[77]; // rv 1
  assign CH1_TXDATA_in[78] = (CH1_TXDATA[78] === 1'bz) || CH1_TXDATA[78]; // rv 1
  assign CH1_TXDATA_in[79] = (CH1_TXDATA[79] === 1'bz) || CH1_TXDATA[79]; // rv 1
  assign CH1_TXDATA_in[7] = (CH1_TXDATA[7] === 1'bz) || CH1_TXDATA[7]; // rv 1
  assign CH1_TXDATA_in[80] = (CH1_TXDATA[80] === 1'bz) || CH1_TXDATA[80]; // rv 1
  assign CH1_TXDATA_in[81] = (CH1_TXDATA[81] === 1'bz) || CH1_TXDATA[81]; // rv 1
  assign CH1_TXDATA_in[82] = (CH1_TXDATA[82] === 1'bz) || CH1_TXDATA[82]; // rv 1
  assign CH1_TXDATA_in[83] = (CH1_TXDATA[83] === 1'bz) || CH1_TXDATA[83]; // rv 1
  assign CH1_TXDATA_in[84] = (CH1_TXDATA[84] === 1'bz) || CH1_TXDATA[84]; // rv 1
  assign CH1_TXDATA_in[85] = (CH1_TXDATA[85] === 1'bz) || CH1_TXDATA[85]; // rv 1
  assign CH1_TXDATA_in[86] = (CH1_TXDATA[86] === 1'bz) || CH1_TXDATA[86]; // rv 1
  assign CH1_TXDATA_in[87] = (CH1_TXDATA[87] === 1'bz) || CH1_TXDATA[87]; // rv 1
  assign CH1_TXDATA_in[88] = (CH1_TXDATA[88] === 1'bz) || CH1_TXDATA[88]; // rv 1
  assign CH1_TXDATA_in[89] = (CH1_TXDATA[89] === 1'bz) || CH1_TXDATA[89]; // rv 1
  assign CH1_TXDATA_in[8] = (CH1_TXDATA[8] === 1'bz) || CH1_TXDATA[8]; // rv 1
  assign CH1_TXDATA_in[90] = (CH1_TXDATA[90] === 1'bz) || CH1_TXDATA[90]; // rv 1
  assign CH1_TXDATA_in[91] = (CH1_TXDATA[91] === 1'bz) || CH1_TXDATA[91]; // rv 1
  assign CH1_TXDATA_in[92] = (CH1_TXDATA[92] === 1'bz) || CH1_TXDATA[92]; // rv 1
  assign CH1_TXDATA_in[93] = (CH1_TXDATA[93] === 1'bz) || CH1_TXDATA[93]; // rv 1
  assign CH1_TXDATA_in[94] = (CH1_TXDATA[94] === 1'bz) || CH1_TXDATA[94]; // rv 1
  assign CH1_TXDATA_in[95] = (CH1_TXDATA[95] === 1'bz) || CH1_TXDATA[95]; // rv 1
  assign CH1_TXDATA_in[96] = (CH1_TXDATA[96] === 1'bz) || CH1_TXDATA[96]; // rv 1
  assign CH1_TXDATA_in[97] = (CH1_TXDATA[97] === 1'bz) || CH1_TXDATA[97]; // rv 1
  assign CH1_TXDATA_in[98] = (CH1_TXDATA[98] === 1'bz) || CH1_TXDATA[98]; // rv 1
  assign CH1_TXDATA_in[99] = (CH1_TXDATA[99] === 1'bz) || CH1_TXDATA[99]; // rv 1
  assign CH1_TXDATA_in[9] = (CH1_TXDATA[9] === 1'bz) || CH1_TXDATA[9]; // rv 1
  assign CH1_TXDCCDONE_M_in = CH1_TXDCCDONE_M;
  assign CH1_TXDEBUGPCSOUT_M_in = CH1_TXDEBUGPCSOUT_M;
  assign CH1_TXINHIBIT_in = (CH1_TXINHIBIT === 1'bz) || CH1_TXINHIBIT; // rv 1
  assign CH1_TXLATCLK_in = (CH1_TXLATCLK === 1'bz) || CH1_TXLATCLK; // rv 1
  assign CH1_TXMAINCURSOR_in[0] = (CH1_TXMAINCURSOR[0] === 1'bz) || CH1_TXMAINCURSOR[0]; // rv 1
  assign CH1_TXMAINCURSOR_in[1] = (CH1_TXMAINCURSOR[1] === 1'bz) || CH1_TXMAINCURSOR[1]; // rv 1
  assign CH1_TXMAINCURSOR_in[2] = (CH1_TXMAINCURSOR[2] === 1'bz) || CH1_TXMAINCURSOR[2]; // rv 1
  assign CH1_TXMAINCURSOR_in[3] = (CH1_TXMAINCURSOR[3] === 1'bz) || CH1_TXMAINCURSOR[3]; // rv 1
  assign CH1_TXMAINCURSOR_in[4] = (CH1_TXMAINCURSOR[4] === 1'bz) || CH1_TXMAINCURSOR[4]; // rv 1
  assign CH1_TXMAINCURSOR_in[5] = (CH1_TXMAINCURSOR[5] === 1'bz) || CH1_TXMAINCURSOR[5]; // rv 1
  assign CH1_TXMAINCURSOR_in[6] = (CH1_TXMAINCURSOR[6] === 1'bz) || CH1_TXMAINCURSOR[6]; // rv 1
  assign CH1_TXPCSRESETMASK_in = (CH1_TXPCSRESETMASK === 1'bz) || CH1_TXPCSRESETMASK; // rv 1
  assign CH1_TXPD_in[0] = (CH1_TXPD[0] === 1'bz) || CH1_TXPD[0]; // rv 1
  assign CH1_TXPD_in[1] = (CH1_TXPD[1] === 1'bz) || CH1_TXPD[1]; // rv 1
  assign CH1_TXPERST_in = (CH1_TXPERST === 1'bz) || CH1_TXPERST; // rv 1
  assign CH1_TXPISOPD_in = (CH1_TXPISOPD === 1'bz) || CH1_TXPISOPD; // rv 1
  assign CH1_TXPMARESETDONE_M_in = CH1_TXPMARESETDONE_M;
  assign CH1_TXPMARESETMASK_in[0] = (CH1_TXPMARESETMASK[0] === 1'bz) || CH1_TXPMARESETMASK[0]; // rv 1
  assign CH1_TXPMARESETMASK_in[1] = (CH1_TXPMARESETMASK[1] === 1'bz) || CH1_TXPMARESETMASK[1]; // rv 1
  assign CH1_TXPOLARITY_in = (CH1_TXPOLARITY === 1'bz) || CH1_TXPOLARITY; // rv 1
  assign CH1_TXPOSTCURSOR_in[0] = (CH1_TXPOSTCURSOR[0] === 1'bz) || CH1_TXPOSTCURSOR[0]; // rv 1
  assign CH1_TXPOSTCURSOR_in[1] = (CH1_TXPOSTCURSOR[1] === 1'bz) || CH1_TXPOSTCURSOR[1]; // rv 1
  assign CH1_TXPOSTCURSOR_in[2] = (CH1_TXPOSTCURSOR[2] === 1'bz) || CH1_TXPOSTCURSOR[2]; // rv 1
  assign CH1_TXPOSTCURSOR_in[3] = (CH1_TXPOSTCURSOR[3] === 1'bz) || CH1_TXPOSTCURSOR[3]; // rv 1
  assign CH1_TXPOSTCURSOR_in[4] = (CH1_TXPOSTCURSOR[4] === 1'bz) || CH1_TXPOSTCURSOR[4]; // rv 1
  assign CH1_TXPOSTCURSOR_in[5] = (CH1_TXPOSTCURSOR[5] === 1'bz) || CH1_TXPOSTCURSOR[5]; // rv 1
  assign CH1_TXPRBSFORCEERR_in = (CH1_TXPRBSFORCEERR === 1'bz) || CH1_TXPRBSFORCEERR; // rv 1
  assign CH1_TXPRBSSEL_in[0] = (CH1_TXPRBSSEL[0] === 1'bz) || CH1_TXPRBSSEL[0]; // rv 1
  assign CH1_TXPRBSSEL_in[1] = (CH1_TXPRBSSEL[1] === 1'bz) || CH1_TXPRBSSEL[1]; // rv 1
  assign CH1_TXPRBSSEL_in[2] = (CH1_TXPRBSSEL[2] === 1'bz) || CH1_TXPRBSSEL[2]; // rv 1
  assign CH1_TXPRBSSEL_in[3] = (CH1_TXPRBSSEL[3] === 1'bz) || CH1_TXPRBSSEL[3]; // rv 1
  assign CH1_TXPRECURSOR2_in[0] = (CH1_TXPRECURSOR2[0] === 1'bz) || CH1_TXPRECURSOR2[0]; // rv 1
  assign CH1_TXPRECURSOR2_in[1] = (CH1_TXPRECURSOR2[1] === 1'bz) || CH1_TXPRECURSOR2[1]; // rv 1
  assign CH1_TXPRECURSOR2_in[2] = (CH1_TXPRECURSOR2[2] === 1'bz) || CH1_TXPRECURSOR2[2]; // rv 1
  assign CH1_TXPRECURSOR2_in[3] = (CH1_TXPRECURSOR2[3] === 1'bz) || CH1_TXPRECURSOR2[3]; // rv 1
  assign CH1_TXPRECURSOR2_in[4] = (CH1_TXPRECURSOR2[4] === 1'bz) || CH1_TXPRECURSOR2[4]; // rv 1
  assign CH1_TXPRECURSOR2_in[5] = (CH1_TXPRECURSOR2[5] === 1'bz) || CH1_TXPRECURSOR2[5]; // rv 1
  assign CH1_TXPRECURSOR3_in[0] = (CH1_TXPRECURSOR3[0] === 1'bz) || CH1_TXPRECURSOR3[0]; // rv 1
  assign CH1_TXPRECURSOR3_in[1] = (CH1_TXPRECURSOR3[1] === 1'bz) || CH1_TXPRECURSOR3[1]; // rv 1
  assign CH1_TXPRECURSOR3_in[2] = (CH1_TXPRECURSOR3[2] === 1'bz) || CH1_TXPRECURSOR3[2]; // rv 1
  assign CH1_TXPRECURSOR3_in[3] = (CH1_TXPRECURSOR3[3] === 1'bz) || CH1_TXPRECURSOR3[3]; // rv 1
  assign CH1_TXPRECURSOR3_in[4] = (CH1_TXPRECURSOR3[4] === 1'bz) || CH1_TXPRECURSOR3[4]; // rv 1
  assign CH1_TXPRECURSOR3_in[5] = (CH1_TXPRECURSOR3[5] === 1'bz) || CH1_TXPRECURSOR3[5]; // rv 1
  assign CH1_TXPRECURSOR_in[0] = (CH1_TXPRECURSOR[0] === 1'bz) || CH1_TXPRECURSOR[0]; // rv 1
  assign CH1_TXPRECURSOR_in[1] = (CH1_TXPRECURSOR[1] === 1'bz) || CH1_TXPRECURSOR[1]; // rv 1
  assign CH1_TXPRECURSOR_in[2] = (CH1_TXPRECURSOR[2] === 1'bz) || CH1_TXPRECURSOR[2]; // rv 1
  assign CH1_TXPRECURSOR_in[3] = (CH1_TXPRECURSOR[3] === 1'bz) || CH1_TXPRECURSOR[3]; // rv 1
  assign CH1_TXPRECURSOR_in[4] = (CH1_TXPRECURSOR[4] === 1'bz) || CH1_TXPRECURSOR[4]; // rv 1
  assign CH1_TXPRECURSOR_in[5] = (CH1_TXPRECURSOR[5] === 1'bz) || CH1_TXPRECURSOR[5]; // rv 1
  assign CH1_TXPROGDIVRESETDONE_M_in = CH1_TXPROGDIVRESETDONE_M;
  assign CH1_TXPROGDIVRESET_in = (CH1_TXPROGDIVRESET === 1'bz) || CH1_TXPROGDIVRESET; // rv 1
  assign CH1_TXQPRBSEN_in = (CH1_TXQPRBSEN === 1'bz) || CH1_TXQPRBSEN; // rv 1
  assign CH1_TXRATE_in[0] = (CH1_TXRATE[0] === 1'bz) || CH1_TXRATE[0]; // rv 1
  assign CH1_TXRATE_in[1] = (CH1_TXRATE[1] === 1'bz) || CH1_TXRATE[1]; // rv 1
  assign CH1_TXRATE_in[2] = (CH1_TXRATE[2] === 1'bz) || CH1_TXRATE[2]; // rv 1
  assign CH1_TXRATE_in[3] = (CH1_TXRATE[3] === 1'bz) || CH1_TXRATE[3]; // rv 1
  assign CH1_TXRATE_in[4] = (CH1_TXRATE[4] === 1'bz) || CH1_TXRATE[4]; // rv 1
  assign CH1_TXRATE_in[5] = (CH1_TXRATE[5] === 1'bz) || CH1_TXRATE[5]; // rv 1
  assign CH1_TXRATE_in[6] = (CH1_TXRATE[6] === 1'bz) || CH1_TXRATE[6]; // rv 1
  assign CH1_TXRATE_in[7] = (CH1_TXRATE[7] === 1'bz) || CH1_TXRATE[7]; // rv 1
  assign CH1_TXRESETDONE_M_in = CH1_TXRESETDONE_M;
  assign CH1_TXRESETMODE_in[0] = (CH1_TXRESETMODE[0] === 1'bz) || CH1_TXRESETMODE[0]; // rv 1
  assign CH1_TXRESETMODE_in[1] = (CH1_TXRESETMODE[1] === 1'bz) || CH1_TXRESETMODE[1]; // rv 1
  assign CH1_TXRSV0_in[0] = (CH1_TXRSV0[0] === 1'bz) || CH1_TXRSV0[0]; // rv 1
  assign CH1_TXRSV0_in[1] = (CH1_TXRSV0[1] === 1'bz) || CH1_TXRSV0[1]; // rv 1
  assign CH1_TXRSV0_in[2] = (CH1_TXRSV0[2] === 1'bz) || CH1_TXRSV0[2]; // rv 1
  assign CH1_TXRSV0_in[3] = (CH1_TXRSV0[3] === 1'bz) || CH1_TXRSV0[3]; // rv 1
  assign CH1_TXRSV0_in[4] = (CH1_TXRSV0[4] === 1'bz) || CH1_TXRSV0[4]; // rv 1
  assign CH1_TXRSV1_in[0] = (CH1_TXRSV1[0] === 1'bz) || CH1_TXRSV1[0]; // rv 1
  assign CH1_TXRSV1_in[1] = (CH1_TXRSV1[1] === 1'bz) || CH1_TXRSV1[1]; // rv 1
  assign CH1_TXRSV1_in[2] = (CH1_TXRSV1[2] === 1'bz) || CH1_TXRSV1[2]; // rv 1
  assign CH1_TXRSV1_in[3] = (CH1_TXRSV1[3] === 1'bz) || CH1_TXRSV1[3]; // rv 1
  assign CH1_TXUSERRDY_in = (CH1_TXUSERRDY === 1'bz) || CH1_TXUSERRDY; // rv 1
  assign CH1_TXUSRCLK_in = (CH1_TXUSRCLK === 1'bz) || CH1_TXUSRCLK; // rv 1
  assign CH2_CDRFREQOS_in = (CH2_CDRFREQOS === 1'bz) || CH2_CDRFREQOS; // rv 1
  assign CH2_CDRINCPCTRL_in = (CH2_CDRINCPCTRL === 1'bz) || CH2_CDRINCPCTRL; // rv 1
  assign CH2_CDRSTEPDIR_in = (CH2_CDRSTEPDIR === 1'bz) || CH2_CDRSTEPDIR; // rv 1
  assign CH2_CDRSTEPSQ_in = (CH2_CDRSTEPSQ === 1'bz) || CH2_CDRSTEPSQ; // rv 1
  assign CH2_CDRSTEPSX_in = (CH2_CDRSTEPSX === 1'bz) || CH2_CDRSTEPSX; // rv 1
  assign CH2_CLKRSVD0_in = (CH2_CLKRSVD0 === 1'bz) || CH2_CLKRSVD0; // rv 1
  assign CH2_CLKRSVD1_in = (CH2_CLKRSVD1 === 1'bz) || CH2_CLKRSVD1; // rv 1
  assign CH2_DMONFIFORESET_in = (CH2_DMONFIFORESET === 1'bz) || CH2_DMONFIFORESET; // rv 1
  assign CH2_DMONITORCLK_in = (CH2_DMONITORCLK === 1'bz) || CH2_DMONITORCLK; // rv 1
  assign CH2_DMONITOROUT_M_in = CH2_DMONITOROUT_M;
  assign CH2_EYESCANDATAERROR_M_in = CH2_EYESCANDATAERROR_M;
  assign CH2_EYESCANRESET_in = (CH2_EYESCANRESET === 1'bz) || CH2_EYESCANRESET; // rv 1
  assign CH2_EYESCANTRIGGER_in = (CH2_EYESCANTRIGGER === 1'bz) || CH2_EYESCANTRIGGER; // rv 1
  assign CH2_GTRSVD_in[0] = (CH2_GTRSVD[0] === 1'bz) || CH2_GTRSVD[0]; // rv 1
  assign CH2_GTRSVD_in[10] = (CH2_GTRSVD[10] === 1'bz) || CH2_GTRSVD[10]; // rv 1
  assign CH2_GTRSVD_in[11] = (CH2_GTRSVD[11] === 1'bz) || CH2_GTRSVD[11]; // rv 1
  assign CH2_GTRSVD_in[12] = (CH2_GTRSVD[12] === 1'bz) || CH2_GTRSVD[12]; // rv 1
  assign CH2_GTRSVD_in[13] = (CH2_GTRSVD[13] === 1'bz) || CH2_GTRSVD[13]; // rv 1
  assign CH2_GTRSVD_in[14] = (CH2_GTRSVD[14] === 1'bz) || CH2_GTRSVD[14]; // rv 1
  assign CH2_GTRSVD_in[15] = (CH2_GTRSVD[15] === 1'bz) || CH2_GTRSVD[15]; // rv 1
  assign CH2_GTRSVD_in[1] = (CH2_GTRSVD[1] === 1'bz) || CH2_GTRSVD[1]; // rv 1
  assign CH2_GTRSVD_in[2] = (CH2_GTRSVD[2] === 1'bz) || CH2_GTRSVD[2]; // rv 1
  assign CH2_GTRSVD_in[3] = (CH2_GTRSVD[3] === 1'bz) || CH2_GTRSVD[3]; // rv 1
  assign CH2_GTRSVD_in[4] = (CH2_GTRSVD[4] === 1'bz) || CH2_GTRSVD[4]; // rv 1
  assign CH2_GTRSVD_in[5] = (CH2_GTRSVD[5] === 1'bz) || CH2_GTRSVD[5]; // rv 1
  assign CH2_GTRSVD_in[6] = (CH2_GTRSVD[6] === 1'bz) || CH2_GTRSVD[6]; // rv 1
  assign CH2_GTRSVD_in[7] = (CH2_GTRSVD[7] === 1'bz) || CH2_GTRSVD[7]; // rv 1
  assign CH2_GTRSVD_in[8] = (CH2_GTRSVD[8] === 1'bz) || CH2_GTRSVD[8]; // rv 1
  assign CH2_GTRSVD_in[9] = (CH2_GTRSVD[9] === 1'bz) || CH2_GTRSVD[9]; // rv 1
  assign CH2_GTRXRESET_in = (CH2_GTRXRESET === 1'bz) || CH2_GTRXRESET; // rv 1
  assign CH2_GTTXRESET_in = (CH2_GTTXRESET === 1'bz) || CH2_GTTXRESET; // rv 1
  assign CH2_ILORESETDONE_M_in = CH2_ILORESETDONE_M;
  assign CH2_ILORESETMASK_in = (CH2_ILORESETMASK === 1'bz) || CH2_ILORESETMASK; // rv 1
  assign CH2_ILORESET_in = (CH2_ILORESET === 1'bz) || CH2_ILORESET; // rv 1
  assign CH2_LOOPBACK_in[0] = (CH2_LOOPBACK[0] === 1'bz) || CH2_LOOPBACK[0]; // rv 1
  assign CH2_LOOPBACK_in[1] = (CH2_LOOPBACK[1] === 1'bz) || CH2_LOOPBACK[1]; // rv 1
  assign CH2_LOOPBACK_in[2] = (CH2_LOOPBACK[2] === 1'bz) || CH2_LOOPBACK[2]; // rv 1
  assign CH2_PCSRSVDIN_in[0] = (CH2_PCSRSVDIN[0] === 1'bz) || CH2_PCSRSVDIN[0]; // rv 1
  assign CH2_PCSRSVDIN_in[10] = (CH2_PCSRSVDIN[10] === 1'bz) || CH2_PCSRSVDIN[10]; // rv 1
  assign CH2_PCSRSVDIN_in[11] = (CH2_PCSRSVDIN[11] === 1'bz) || CH2_PCSRSVDIN[11]; // rv 1
  assign CH2_PCSRSVDIN_in[12] = (CH2_PCSRSVDIN[12] === 1'bz) || CH2_PCSRSVDIN[12]; // rv 1
  assign CH2_PCSRSVDIN_in[13] = (CH2_PCSRSVDIN[13] === 1'bz) || CH2_PCSRSVDIN[13]; // rv 1
  assign CH2_PCSRSVDIN_in[14] = (CH2_PCSRSVDIN[14] === 1'bz) || CH2_PCSRSVDIN[14]; // rv 1
  assign CH2_PCSRSVDIN_in[15] = (CH2_PCSRSVDIN[15] === 1'bz) || CH2_PCSRSVDIN[15]; // rv 1
  assign CH2_PCSRSVDIN_in[1] = (CH2_PCSRSVDIN[1] === 1'bz) || CH2_PCSRSVDIN[1]; // rv 1
  assign CH2_PCSRSVDIN_in[2] = (CH2_PCSRSVDIN[2] === 1'bz) || CH2_PCSRSVDIN[2]; // rv 1
  assign CH2_PCSRSVDIN_in[3] = (CH2_PCSRSVDIN[3] === 1'bz) || CH2_PCSRSVDIN[3]; // rv 1
  assign CH2_PCSRSVDIN_in[4] = (CH2_PCSRSVDIN[4] === 1'bz) || CH2_PCSRSVDIN[4]; // rv 1
  assign CH2_PCSRSVDIN_in[5] = (CH2_PCSRSVDIN[5] === 1'bz) || CH2_PCSRSVDIN[5]; // rv 1
  assign CH2_PCSRSVDIN_in[6] = (CH2_PCSRSVDIN[6] === 1'bz) || CH2_PCSRSVDIN[6]; // rv 1
  assign CH2_PCSRSVDIN_in[7] = (CH2_PCSRSVDIN[7] === 1'bz) || CH2_PCSRSVDIN[7]; // rv 1
  assign CH2_PCSRSVDIN_in[8] = (CH2_PCSRSVDIN[8] === 1'bz) || CH2_PCSRSVDIN[8]; // rv 1
  assign CH2_PCSRSVDIN_in[9] = (CH2_PCSRSVDIN[9] === 1'bz) || CH2_PCSRSVDIN[9]; // rv 1
  assign CH2_PCSRSVDOUT_M_in = CH2_PCSRSVDOUT_M;
  assign CH2_PINRSVDAS_M_in = CH2_PINRSVDAS_M;
  assign CH2_REFDEBUGOUT_M_in = CH2_REFDEBUGOUT_M;
  assign CH2_RESETEXCEPTION_M_in = CH2_RESETEXCEPTION_M;
  assign CH2_RXBUFSTATUS_M_in = CH2_RXBUFSTATUS_M;
  assign CH2_RXCDRHOLD_in = (CH2_RXCDRHOLD === 1'bz) || CH2_RXCDRHOLD; // rv 1
  assign CH2_RXCDRLOCK_M_in = CH2_RXCDRLOCK_M;
  assign CH2_RXCDROVRDEN_in = (CH2_RXCDROVRDEN === 1'bz) || CH2_RXCDROVRDEN; // rv 1
  assign CH2_RXCDRPHDONE_M_in = CH2_RXCDRPHDONE_M;
  assign CH2_RXCDRRESET_in = (CH2_RXCDRRESET === 1'bz) || CH2_RXCDRRESET; // rv 1
  assign CH2_RXDATA_M_in = CH2_RXDATA_M;
  assign CH2_RXDEBUGPCSOUT_M_in = CH2_RXDEBUGPCSOUT_M;
  assign CH2_RXLATCLK_in = (CH2_RXLATCLK === 1'bz) || CH2_RXLATCLK; // rv 1
  assign CH2_RXPCSRESETMASK_in[0] = (CH2_RXPCSRESETMASK[0] === 1'bz) || CH2_RXPCSRESETMASK[0]; // rv 1
  assign CH2_RXPCSRESETMASK_in[1] = (CH2_RXPCSRESETMASK[1] === 1'bz) || CH2_RXPCSRESETMASK[1]; // rv 1
  assign CH2_RXPCSRESETMASK_in[2] = (CH2_RXPCSRESETMASK[2] === 1'bz) || CH2_RXPCSRESETMASK[2]; // rv 1
  assign CH2_RXPD_in[0] = (CH2_RXPD[0] === 1'bz) || CH2_RXPD[0]; // rv 1
  assign CH2_RXPD_in[1] = (CH2_RXPD[1] === 1'bz) || CH2_RXPD[1]; // rv 1
  assign CH2_RXPERST_in = (CH2_RXPERST === 1'bz) || CH2_RXPERST; // rv 1
  assign CH2_RXPMARESETDONE_M_in = CH2_RXPMARESETDONE_M;
  assign CH2_RXPMARESETMASK_in[0] = (CH2_RXPMARESETMASK[0] === 1'bz) || CH2_RXPMARESETMASK[0]; // rv 1
  assign CH2_RXPMARESETMASK_in[1] = (CH2_RXPMARESETMASK[1] === 1'bz) || CH2_RXPMARESETMASK[1]; // rv 1
  assign CH2_RXPMARESETMASK_in[2] = (CH2_RXPMARESETMASK[2] === 1'bz) || CH2_RXPMARESETMASK[2]; // rv 1
  assign CH2_RXPMARESETMASK_in[3] = (CH2_RXPMARESETMASK[3] === 1'bz) || CH2_RXPMARESETMASK[3]; // rv 1
  assign CH2_RXPMARESETMASK_in[4] = (CH2_RXPMARESETMASK[4] === 1'bz) || CH2_RXPMARESETMASK[4]; // rv 1
  assign CH2_RXPMARESETMASK_in[5] = (CH2_RXPMARESETMASK[5] === 1'bz) || CH2_RXPMARESETMASK[5]; // rv 1
  assign CH2_RXPMARESETMASK_in[6] = (CH2_RXPMARESETMASK[6] === 1'bz) || CH2_RXPMARESETMASK[6]; // rv 1
  assign CH2_RXPMARESETMASK_in[7] = (CH2_RXPMARESETMASK[7] === 1'bz) || CH2_RXPMARESETMASK[7]; // rv 1
  assign CH2_RXPOLARITY_in = (CH2_RXPOLARITY === 1'bz) || CH2_RXPOLARITY; // rv 1
  assign CH2_RXPRBSCNTRESET_in = (CH2_RXPRBSCNTRESET === 1'bz) || CH2_RXPRBSCNTRESET; // rv 1
  assign CH2_RXPRBSCNTSTOP_in = (CH2_RXPRBSCNTSTOP === 1'bz) || CH2_RXPRBSCNTSTOP; // rv 1
  assign CH2_RXPRBSERR_M_in = CH2_RXPRBSERR_M;
  assign CH2_RXPRBSLOCKED_M_in = CH2_RXPRBSLOCKED_M;
  assign CH2_RXPRBSSEL_in[0] = (CH2_RXPRBSSEL[0] === 1'bz) || CH2_RXPRBSSEL[0]; // rv 1
  assign CH2_RXPRBSSEL_in[1] = (CH2_RXPRBSSEL[1] === 1'bz) || CH2_RXPRBSSEL[1]; // rv 1
  assign CH2_RXPRBSSEL_in[2] = (CH2_RXPRBSSEL[2] === 1'bz) || CH2_RXPRBSSEL[2]; // rv 1
  assign CH2_RXPRBSSEL_in[3] = (CH2_RXPRBSSEL[3] === 1'bz) || CH2_RXPRBSSEL[3]; // rv 1
  assign CH2_RXPROGDIVRESETDONE_M_in = CH2_RXPROGDIVRESETDONE_M;
  assign CH2_RXPROGDIVRESET_in = (CH2_RXPROGDIVRESET === 1'bz) || CH2_RXPROGDIVRESET; // rv 1
  assign CH2_RXQPRBSEN_in = (CH2_RXQPRBSEN === 1'bz) || CH2_RXQPRBSEN; // rv 1
  assign CH2_RXRATE_in[0] = (CH2_RXRATE[0] === 1'bz) || CH2_RXRATE[0]; // rv 1
  assign CH2_RXRATE_in[1] = (CH2_RXRATE[1] === 1'bz) || CH2_RXRATE[1]; // rv 1
  assign CH2_RXRATE_in[2] = (CH2_RXRATE[2] === 1'bz) || CH2_RXRATE[2]; // rv 1
  assign CH2_RXRATE_in[3] = (CH2_RXRATE[3] === 1'bz) || CH2_RXRATE[3]; // rv 1
  assign CH2_RXRATE_in[4] = (CH2_RXRATE[4] === 1'bz) || CH2_RXRATE[4]; // rv 1
  assign CH2_RXRATE_in[5] = (CH2_RXRATE[5] === 1'bz) || CH2_RXRATE[5]; // rv 1
  assign CH2_RXRATE_in[6] = (CH2_RXRATE[6] === 1'bz) || CH2_RXRATE[6]; // rv 1
  assign CH2_RXRATE_in[7] = (CH2_RXRATE[7] === 1'bz) || CH2_RXRATE[7]; // rv 1
  assign CH2_RXRESETDONE_M_in = CH2_RXRESETDONE_M;
  assign CH2_RXRESETMODE_in[0] = (CH2_RXRESETMODE[0] === 1'bz) || CH2_RXRESETMODE[0]; // rv 1
  assign CH2_RXRESETMODE_in[1] = (CH2_RXRESETMODE[1] === 1'bz) || CH2_RXRESETMODE[1]; // rv 1
  assign CH2_RXRSV0_in = (CH2_RXRSV0 === 1'bz) || CH2_RXRSV0; // rv 1
  assign CH2_RXRSV1_in = (CH2_RXRSV1 === 1'bz) || CH2_RXRSV1; // rv 1
  assign CH2_RXRSV2_in = (CH2_RXRSV2 === 1'bz) || CH2_RXRSV2; // rv 1
  assign CH2_RXUSERRDY_in = (CH2_RXUSERRDY === 1'bz) || CH2_RXUSERRDY; // rv 1
  assign CH2_RXUSRCLK_in = (CH2_RXUSRCLK === 1'bz) || CH2_RXUSRCLK; // rv 1
  assign CH2_TSTCLK0_in = (CH2_TSTCLK0 === 1'bz) || CH2_TSTCLK0; // rv 1
  assign CH2_TSTCLK1_in = (CH2_TSTCLK1 === 1'bz) || CH2_TSTCLK1; // rv 1
  assign CH2_TXBUFSTATUS_M_in = CH2_TXBUFSTATUS_M;
  assign CH2_TXDATA_in[0] = (CH2_TXDATA[0] === 1'bz) || CH2_TXDATA[0]; // rv 1
  assign CH2_TXDATA_in[100] = (CH2_TXDATA[100] === 1'bz) || CH2_TXDATA[100]; // rv 1
  assign CH2_TXDATA_in[101] = (CH2_TXDATA[101] === 1'bz) || CH2_TXDATA[101]; // rv 1
  assign CH2_TXDATA_in[102] = (CH2_TXDATA[102] === 1'bz) || CH2_TXDATA[102]; // rv 1
  assign CH2_TXDATA_in[103] = (CH2_TXDATA[103] === 1'bz) || CH2_TXDATA[103]; // rv 1
  assign CH2_TXDATA_in[104] = (CH2_TXDATA[104] === 1'bz) || CH2_TXDATA[104]; // rv 1
  assign CH2_TXDATA_in[105] = (CH2_TXDATA[105] === 1'bz) || CH2_TXDATA[105]; // rv 1
  assign CH2_TXDATA_in[106] = (CH2_TXDATA[106] === 1'bz) || CH2_TXDATA[106]; // rv 1
  assign CH2_TXDATA_in[107] = (CH2_TXDATA[107] === 1'bz) || CH2_TXDATA[107]; // rv 1
  assign CH2_TXDATA_in[108] = (CH2_TXDATA[108] === 1'bz) || CH2_TXDATA[108]; // rv 1
  assign CH2_TXDATA_in[109] = (CH2_TXDATA[109] === 1'bz) || CH2_TXDATA[109]; // rv 1
  assign CH2_TXDATA_in[10] = (CH2_TXDATA[10] === 1'bz) || CH2_TXDATA[10]; // rv 1
  assign CH2_TXDATA_in[110] = (CH2_TXDATA[110] === 1'bz) || CH2_TXDATA[110]; // rv 1
  assign CH2_TXDATA_in[111] = (CH2_TXDATA[111] === 1'bz) || CH2_TXDATA[111]; // rv 1
  assign CH2_TXDATA_in[112] = (CH2_TXDATA[112] === 1'bz) || CH2_TXDATA[112]; // rv 1
  assign CH2_TXDATA_in[113] = (CH2_TXDATA[113] === 1'bz) || CH2_TXDATA[113]; // rv 1
  assign CH2_TXDATA_in[114] = (CH2_TXDATA[114] === 1'bz) || CH2_TXDATA[114]; // rv 1
  assign CH2_TXDATA_in[115] = (CH2_TXDATA[115] === 1'bz) || CH2_TXDATA[115]; // rv 1
  assign CH2_TXDATA_in[116] = (CH2_TXDATA[116] === 1'bz) || CH2_TXDATA[116]; // rv 1
  assign CH2_TXDATA_in[117] = (CH2_TXDATA[117] === 1'bz) || CH2_TXDATA[117]; // rv 1
  assign CH2_TXDATA_in[118] = (CH2_TXDATA[118] === 1'bz) || CH2_TXDATA[118]; // rv 1
  assign CH2_TXDATA_in[119] = (CH2_TXDATA[119] === 1'bz) || CH2_TXDATA[119]; // rv 1
  assign CH2_TXDATA_in[11] = (CH2_TXDATA[11] === 1'bz) || CH2_TXDATA[11]; // rv 1
  assign CH2_TXDATA_in[120] = (CH2_TXDATA[120] === 1'bz) || CH2_TXDATA[120]; // rv 1
  assign CH2_TXDATA_in[121] = (CH2_TXDATA[121] === 1'bz) || CH2_TXDATA[121]; // rv 1
  assign CH2_TXDATA_in[122] = (CH2_TXDATA[122] === 1'bz) || CH2_TXDATA[122]; // rv 1
  assign CH2_TXDATA_in[123] = (CH2_TXDATA[123] === 1'bz) || CH2_TXDATA[123]; // rv 1
  assign CH2_TXDATA_in[124] = (CH2_TXDATA[124] === 1'bz) || CH2_TXDATA[124]; // rv 1
  assign CH2_TXDATA_in[125] = (CH2_TXDATA[125] === 1'bz) || CH2_TXDATA[125]; // rv 1
  assign CH2_TXDATA_in[126] = (CH2_TXDATA[126] === 1'bz) || CH2_TXDATA[126]; // rv 1
  assign CH2_TXDATA_in[127] = (CH2_TXDATA[127] === 1'bz) || CH2_TXDATA[127]; // rv 1
  assign CH2_TXDATA_in[128] = (CH2_TXDATA[128] === 1'bz) || CH2_TXDATA[128]; // rv 1
  assign CH2_TXDATA_in[129] = (CH2_TXDATA[129] === 1'bz) || CH2_TXDATA[129]; // rv 1
  assign CH2_TXDATA_in[12] = (CH2_TXDATA[12] === 1'bz) || CH2_TXDATA[12]; // rv 1
  assign CH2_TXDATA_in[130] = (CH2_TXDATA[130] === 1'bz) || CH2_TXDATA[130]; // rv 1
  assign CH2_TXDATA_in[131] = (CH2_TXDATA[131] === 1'bz) || CH2_TXDATA[131]; // rv 1
  assign CH2_TXDATA_in[132] = (CH2_TXDATA[132] === 1'bz) || CH2_TXDATA[132]; // rv 1
  assign CH2_TXDATA_in[133] = (CH2_TXDATA[133] === 1'bz) || CH2_TXDATA[133]; // rv 1
  assign CH2_TXDATA_in[134] = (CH2_TXDATA[134] === 1'bz) || CH2_TXDATA[134]; // rv 1
  assign CH2_TXDATA_in[135] = (CH2_TXDATA[135] === 1'bz) || CH2_TXDATA[135]; // rv 1
  assign CH2_TXDATA_in[136] = (CH2_TXDATA[136] === 1'bz) || CH2_TXDATA[136]; // rv 1
  assign CH2_TXDATA_in[137] = (CH2_TXDATA[137] === 1'bz) || CH2_TXDATA[137]; // rv 1
  assign CH2_TXDATA_in[138] = (CH2_TXDATA[138] === 1'bz) || CH2_TXDATA[138]; // rv 1
  assign CH2_TXDATA_in[139] = (CH2_TXDATA[139] === 1'bz) || CH2_TXDATA[139]; // rv 1
  assign CH2_TXDATA_in[13] = (CH2_TXDATA[13] === 1'bz) || CH2_TXDATA[13]; // rv 1
  assign CH2_TXDATA_in[140] = (CH2_TXDATA[140] === 1'bz) || CH2_TXDATA[140]; // rv 1
  assign CH2_TXDATA_in[141] = (CH2_TXDATA[141] === 1'bz) || CH2_TXDATA[141]; // rv 1
  assign CH2_TXDATA_in[142] = (CH2_TXDATA[142] === 1'bz) || CH2_TXDATA[142]; // rv 1
  assign CH2_TXDATA_in[143] = (CH2_TXDATA[143] === 1'bz) || CH2_TXDATA[143]; // rv 1
  assign CH2_TXDATA_in[144] = (CH2_TXDATA[144] === 1'bz) || CH2_TXDATA[144]; // rv 1
  assign CH2_TXDATA_in[145] = (CH2_TXDATA[145] === 1'bz) || CH2_TXDATA[145]; // rv 1
  assign CH2_TXDATA_in[146] = (CH2_TXDATA[146] === 1'bz) || CH2_TXDATA[146]; // rv 1
  assign CH2_TXDATA_in[147] = (CH2_TXDATA[147] === 1'bz) || CH2_TXDATA[147]; // rv 1
  assign CH2_TXDATA_in[148] = (CH2_TXDATA[148] === 1'bz) || CH2_TXDATA[148]; // rv 1
  assign CH2_TXDATA_in[149] = (CH2_TXDATA[149] === 1'bz) || CH2_TXDATA[149]; // rv 1
  assign CH2_TXDATA_in[14] = (CH2_TXDATA[14] === 1'bz) || CH2_TXDATA[14]; // rv 1
  assign CH2_TXDATA_in[150] = (CH2_TXDATA[150] === 1'bz) || CH2_TXDATA[150]; // rv 1
  assign CH2_TXDATA_in[151] = (CH2_TXDATA[151] === 1'bz) || CH2_TXDATA[151]; // rv 1
  assign CH2_TXDATA_in[152] = (CH2_TXDATA[152] === 1'bz) || CH2_TXDATA[152]; // rv 1
  assign CH2_TXDATA_in[153] = (CH2_TXDATA[153] === 1'bz) || CH2_TXDATA[153]; // rv 1
  assign CH2_TXDATA_in[154] = (CH2_TXDATA[154] === 1'bz) || CH2_TXDATA[154]; // rv 1
  assign CH2_TXDATA_in[155] = (CH2_TXDATA[155] === 1'bz) || CH2_TXDATA[155]; // rv 1
  assign CH2_TXDATA_in[156] = (CH2_TXDATA[156] === 1'bz) || CH2_TXDATA[156]; // rv 1
  assign CH2_TXDATA_in[157] = (CH2_TXDATA[157] === 1'bz) || CH2_TXDATA[157]; // rv 1
  assign CH2_TXDATA_in[158] = (CH2_TXDATA[158] === 1'bz) || CH2_TXDATA[158]; // rv 1
  assign CH2_TXDATA_in[159] = (CH2_TXDATA[159] === 1'bz) || CH2_TXDATA[159]; // rv 1
  assign CH2_TXDATA_in[15] = (CH2_TXDATA[15] === 1'bz) || CH2_TXDATA[15]; // rv 1
  assign CH2_TXDATA_in[160] = (CH2_TXDATA[160] === 1'bz) || CH2_TXDATA[160]; // rv 1
  assign CH2_TXDATA_in[161] = (CH2_TXDATA[161] === 1'bz) || CH2_TXDATA[161]; // rv 1
  assign CH2_TXDATA_in[162] = (CH2_TXDATA[162] === 1'bz) || CH2_TXDATA[162]; // rv 1
  assign CH2_TXDATA_in[163] = (CH2_TXDATA[163] === 1'bz) || CH2_TXDATA[163]; // rv 1
  assign CH2_TXDATA_in[164] = (CH2_TXDATA[164] === 1'bz) || CH2_TXDATA[164]; // rv 1
  assign CH2_TXDATA_in[165] = (CH2_TXDATA[165] === 1'bz) || CH2_TXDATA[165]; // rv 1
  assign CH2_TXDATA_in[166] = (CH2_TXDATA[166] === 1'bz) || CH2_TXDATA[166]; // rv 1
  assign CH2_TXDATA_in[167] = (CH2_TXDATA[167] === 1'bz) || CH2_TXDATA[167]; // rv 1
  assign CH2_TXDATA_in[168] = (CH2_TXDATA[168] === 1'bz) || CH2_TXDATA[168]; // rv 1
  assign CH2_TXDATA_in[169] = (CH2_TXDATA[169] === 1'bz) || CH2_TXDATA[169]; // rv 1
  assign CH2_TXDATA_in[16] = (CH2_TXDATA[16] === 1'bz) || CH2_TXDATA[16]; // rv 1
  assign CH2_TXDATA_in[170] = (CH2_TXDATA[170] === 1'bz) || CH2_TXDATA[170]; // rv 1
  assign CH2_TXDATA_in[171] = (CH2_TXDATA[171] === 1'bz) || CH2_TXDATA[171]; // rv 1
  assign CH2_TXDATA_in[172] = (CH2_TXDATA[172] === 1'bz) || CH2_TXDATA[172]; // rv 1
  assign CH2_TXDATA_in[173] = (CH2_TXDATA[173] === 1'bz) || CH2_TXDATA[173]; // rv 1
  assign CH2_TXDATA_in[174] = (CH2_TXDATA[174] === 1'bz) || CH2_TXDATA[174]; // rv 1
  assign CH2_TXDATA_in[175] = (CH2_TXDATA[175] === 1'bz) || CH2_TXDATA[175]; // rv 1
  assign CH2_TXDATA_in[176] = (CH2_TXDATA[176] === 1'bz) || CH2_TXDATA[176]; // rv 1
  assign CH2_TXDATA_in[177] = (CH2_TXDATA[177] === 1'bz) || CH2_TXDATA[177]; // rv 1
  assign CH2_TXDATA_in[178] = (CH2_TXDATA[178] === 1'bz) || CH2_TXDATA[178]; // rv 1
  assign CH2_TXDATA_in[179] = (CH2_TXDATA[179] === 1'bz) || CH2_TXDATA[179]; // rv 1
  assign CH2_TXDATA_in[17] = (CH2_TXDATA[17] === 1'bz) || CH2_TXDATA[17]; // rv 1
  assign CH2_TXDATA_in[180] = (CH2_TXDATA[180] === 1'bz) || CH2_TXDATA[180]; // rv 1
  assign CH2_TXDATA_in[181] = (CH2_TXDATA[181] === 1'bz) || CH2_TXDATA[181]; // rv 1
  assign CH2_TXDATA_in[182] = (CH2_TXDATA[182] === 1'bz) || CH2_TXDATA[182]; // rv 1
  assign CH2_TXDATA_in[183] = (CH2_TXDATA[183] === 1'bz) || CH2_TXDATA[183]; // rv 1
  assign CH2_TXDATA_in[184] = (CH2_TXDATA[184] === 1'bz) || CH2_TXDATA[184]; // rv 1
  assign CH2_TXDATA_in[185] = (CH2_TXDATA[185] === 1'bz) || CH2_TXDATA[185]; // rv 1
  assign CH2_TXDATA_in[186] = (CH2_TXDATA[186] === 1'bz) || CH2_TXDATA[186]; // rv 1
  assign CH2_TXDATA_in[187] = (CH2_TXDATA[187] === 1'bz) || CH2_TXDATA[187]; // rv 1
  assign CH2_TXDATA_in[188] = (CH2_TXDATA[188] === 1'bz) || CH2_TXDATA[188]; // rv 1
  assign CH2_TXDATA_in[189] = (CH2_TXDATA[189] === 1'bz) || CH2_TXDATA[189]; // rv 1
  assign CH2_TXDATA_in[18] = (CH2_TXDATA[18] === 1'bz) || CH2_TXDATA[18]; // rv 1
  assign CH2_TXDATA_in[190] = (CH2_TXDATA[190] === 1'bz) || CH2_TXDATA[190]; // rv 1
  assign CH2_TXDATA_in[191] = (CH2_TXDATA[191] === 1'bz) || CH2_TXDATA[191]; // rv 1
  assign CH2_TXDATA_in[192] = (CH2_TXDATA[192] === 1'bz) || CH2_TXDATA[192]; // rv 1
  assign CH2_TXDATA_in[193] = (CH2_TXDATA[193] === 1'bz) || CH2_TXDATA[193]; // rv 1
  assign CH2_TXDATA_in[194] = (CH2_TXDATA[194] === 1'bz) || CH2_TXDATA[194]; // rv 1
  assign CH2_TXDATA_in[195] = (CH2_TXDATA[195] === 1'bz) || CH2_TXDATA[195]; // rv 1
  assign CH2_TXDATA_in[196] = (CH2_TXDATA[196] === 1'bz) || CH2_TXDATA[196]; // rv 1
  assign CH2_TXDATA_in[197] = (CH2_TXDATA[197] === 1'bz) || CH2_TXDATA[197]; // rv 1
  assign CH2_TXDATA_in[198] = (CH2_TXDATA[198] === 1'bz) || CH2_TXDATA[198]; // rv 1
  assign CH2_TXDATA_in[199] = (CH2_TXDATA[199] === 1'bz) || CH2_TXDATA[199]; // rv 1
  assign CH2_TXDATA_in[19] = (CH2_TXDATA[19] === 1'bz) || CH2_TXDATA[19]; // rv 1
  assign CH2_TXDATA_in[1] = (CH2_TXDATA[1] === 1'bz) || CH2_TXDATA[1]; // rv 1
  assign CH2_TXDATA_in[200] = (CH2_TXDATA[200] === 1'bz) || CH2_TXDATA[200]; // rv 1
  assign CH2_TXDATA_in[201] = (CH2_TXDATA[201] === 1'bz) || CH2_TXDATA[201]; // rv 1
  assign CH2_TXDATA_in[202] = (CH2_TXDATA[202] === 1'bz) || CH2_TXDATA[202]; // rv 1
  assign CH2_TXDATA_in[203] = (CH2_TXDATA[203] === 1'bz) || CH2_TXDATA[203]; // rv 1
  assign CH2_TXDATA_in[204] = (CH2_TXDATA[204] === 1'bz) || CH2_TXDATA[204]; // rv 1
  assign CH2_TXDATA_in[205] = (CH2_TXDATA[205] === 1'bz) || CH2_TXDATA[205]; // rv 1
  assign CH2_TXDATA_in[206] = (CH2_TXDATA[206] === 1'bz) || CH2_TXDATA[206]; // rv 1
  assign CH2_TXDATA_in[207] = (CH2_TXDATA[207] === 1'bz) || CH2_TXDATA[207]; // rv 1
  assign CH2_TXDATA_in[208] = (CH2_TXDATA[208] === 1'bz) || CH2_TXDATA[208]; // rv 1
  assign CH2_TXDATA_in[209] = (CH2_TXDATA[209] === 1'bz) || CH2_TXDATA[209]; // rv 1
  assign CH2_TXDATA_in[20] = (CH2_TXDATA[20] === 1'bz) || CH2_TXDATA[20]; // rv 1
  assign CH2_TXDATA_in[210] = (CH2_TXDATA[210] === 1'bz) || CH2_TXDATA[210]; // rv 1
  assign CH2_TXDATA_in[211] = (CH2_TXDATA[211] === 1'bz) || CH2_TXDATA[211]; // rv 1
  assign CH2_TXDATA_in[212] = (CH2_TXDATA[212] === 1'bz) || CH2_TXDATA[212]; // rv 1
  assign CH2_TXDATA_in[213] = (CH2_TXDATA[213] === 1'bz) || CH2_TXDATA[213]; // rv 1
  assign CH2_TXDATA_in[214] = (CH2_TXDATA[214] === 1'bz) || CH2_TXDATA[214]; // rv 1
  assign CH2_TXDATA_in[215] = (CH2_TXDATA[215] === 1'bz) || CH2_TXDATA[215]; // rv 1
  assign CH2_TXDATA_in[216] = (CH2_TXDATA[216] === 1'bz) || CH2_TXDATA[216]; // rv 1
  assign CH2_TXDATA_in[217] = (CH2_TXDATA[217] === 1'bz) || CH2_TXDATA[217]; // rv 1
  assign CH2_TXDATA_in[218] = (CH2_TXDATA[218] === 1'bz) || CH2_TXDATA[218]; // rv 1
  assign CH2_TXDATA_in[219] = (CH2_TXDATA[219] === 1'bz) || CH2_TXDATA[219]; // rv 1
  assign CH2_TXDATA_in[21] = (CH2_TXDATA[21] === 1'bz) || CH2_TXDATA[21]; // rv 1
  assign CH2_TXDATA_in[220] = (CH2_TXDATA[220] === 1'bz) || CH2_TXDATA[220]; // rv 1
  assign CH2_TXDATA_in[221] = (CH2_TXDATA[221] === 1'bz) || CH2_TXDATA[221]; // rv 1
  assign CH2_TXDATA_in[222] = (CH2_TXDATA[222] === 1'bz) || CH2_TXDATA[222]; // rv 1
  assign CH2_TXDATA_in[223] = (CH2_TXDATA[223] === 1'bz) || CH2_TXDATA[223]; // rv 1
  assign CH2_TXDATA_in[224] = (CH2_TXDATA[224] === 1'bz) || CH2_TXDATA[224]; // rv 1
  assign CH2_TXDATA_in[225] = (CH2_TXDATA[225] === 1'bz) || CH2_TXDATA[225]; // rv 1
  assign CH2_TXDATA_in[226] = (CH2_TXDATA[226] === 1'bz) || CH2_TXDATA[226]; // rv 1
  assign CH2_TXDATA_in[227] = (CH2_TXDATA[227] === 1'bz) || CH2_TXDATA[227]; // rv 1
  assign CH2_TXDATA_in[228] = (CH2_TXDATA[228] === 1'bz) || CH2_TXDATA[228]; // rv 1
  assign CH2_TXDATA_in[229] = (CH2_TXDATA[229] === 1'bz) || CH2_TXDATA[229]; // rv 1
  assign CH2_TXDATA_in[22] = (CH2_TXDATA[22] === 1'bz) || CH2_TXDATA[22]; // rv 1
  assign CH2_TXDATA_in[230] = (CH2_TXDATA[230] === 1'bz) || CH2_TXDATA[230]; // rv 1
  assign CH2_TXDATA_in[231] = (CH2_TXDATA[231] === 1'bz) || CH2_TXDATA[231]; // rv 1
  assign CH2_TXDATA_in[232] = (CH2_TXDATA[232] === 1'bz) || CH2_TXDATA[232]; // rv 1
  assign CH2_TXDATA_in[233] = (CH2_TXDATA[233] === 1'bz) || CH2_TXDATA[233]; // rv 1
  assign CH2_TXDATA_in[234] = (CH2_TXDATA[234] === 1'bz) || CH2_TXDATA[234]; // rv 1
  assign CH2_TXDATA_in[235] = (CH2_TXDATA[235] === 1'bz) || CH2_TXDATA[235]; // rv 1
  assign CH2_TXDATA_in[236] = (CH2_TXDATA[236] === 1'bz) || CH2_TXDATA[236]; // rv 1
  assign CH2_TXDATA_in[237] = (CH2_TXDATA[237] === 1'bz) || CH2_TXDATA[237]; // rv 1
  assign CH2_TXDATA_in[238] = (CH2_TXDATA[238] === 1'bz) || CH2_TXDATA[238]; // rv 1
  assign CH2_TXDATA_in[239] = (CH2_TXDATA[239] === 1'bz) || CH2_TXDATA[239]; // rv 1
  assign CH2_TXDATA_in[23] = (CH2_TXDATA[23] === 1'bz) || CH2_TXDATA[23]; // rv 1
  assign CH2_TXDATA_in[240] = (CH2_TXDATA[240] === 1'bz) || CH2_TXDATA[240]; // rv 1
  assign CH2_TXDATA_in[241] = (CH2_TXDATA[241] === 1'bz) || CH2_TXDATA[241]; // rv 1
  assign CH2_TXDATA_in[242] = (CH2_TXDATA[242] === 1'bz) || CH2_TXDATA[242]; // rv 1
  assign CH2_TXDATA_in[243] = (CH2_TXDATA[243] === 1'bz) || CH2_TXDATA[243]; // rv 1
  assign CH2_TXDATA_in[244] = (CH2_TXDATA[244] === 1'bz) || CH2_TXDATA[244]; // rv 1
  assign CH2_TXDATA_in[245] = (CH2_TXDATA[245] === 1'bz) || CH2_TXDATA[245]; // rv 1
  assign CH2_TXDATA_in[246] = (CH2_TXDATA[246] === 1'bz) || CH2_TXDATA[246]; // rv 1
  assign CH2_TXDATA_in[247] = (CH2_TXDATA[247] === 1'bz) || CH2_TXDATA[247]; // rv 1
  assign CH2_TXDATA_in[248] = (CH2_TXDATA[248] === 1'bz) || CH2_TXDATA[248]; // rv 1
  assign CH2_TXDATA_in[249] = (CH2_TXDATA[249] === 1'bz) || CH2_TXDATA[249]; // rv 1
  assign CH2_TXDATA_in[24] = (CH2_TXDATA[24] === 1'bz) || CH2_TXDATA[24]; // rv 1
  assign CH2_TXDATA_in[250] = (CH2_TXDATA[250] === 1'bz) || CH2_TXDATA[250]; // rv 1
  assign CH2_TXDATA_in[251] = (CH2_TXDATA[251] === 1'bz) || CH2_TXDATA[251]; // rv 1
  assign CH2_TXDATA_in[252] = (CH2_TXDATA[252] === 1'bz) || CH2_TXDATA[252]; // rv 1
  assign CH2_TXDATA_in[253] = (CH2_TXDATA[253] === 1'bz) || CH2_TXDATA[253]; // rv 1
  assign CH2_TXDATA_in[254] = (CH2_TXDATA[254] === 1'bz) || CH2_TXDATA[254]; // rv 1
  assign CH2_TXDATA_in[255] = (CH2_TXDATA[255] === 1'bz) || CH2_TXDATA[255]; // rv 1
  assign CH2_TXDATA_in[25] = (CH2_TXDATA[25] === 1'bz) || CH2_TXDATA[25]; // rv 1
  assign CH2_TXDATA_in[26] = (CH2_TXDATA[26] === 1'bz) || CH2_TXDATA[26]; // rv 1
  assign CH2_TXDATA_in[27] = (CH2_TXDATA[27] === 1'bz) || CH2_TXDATA[27]; // rv 1
  assign CH2_TXDATA_in[28] = (CH2_TXDATA[28] === 1'bz) || CH2_TXDATA[28]; // rv 1
  assign CH2_TXDATA_in[29] = (CH2_TXDATA[29] === 1'bz) || CH2_TXDATA[29]; // rv 1
  assign CH2_TXDATA_in[2] = (CH2_TXDATA[2] === 1'bz) || CH2_TXDATA[2]; // rv 1
  assign CH2_TXDATA_in[30] = (CH2_TXDATA[30] === 1'bz) || CH2_TXDATA[30]; // rv 1
  assign CH2_TXDATA_in[31] = (CH2_TXDATA[31] === 1'bz) || CH2_TXDATA[31]; // rv 1
  assign CH2_TXDATA_in[32] = (CH2_TXDATA[32] === 1'bz) || CH2_TXDATA[32]; // rv 1
  assign CH2_TXDATA_in[33] = (CH2_TXDATA[33] === 1'bz) || CH2_TXDATA[33]; // rv 1
  assign CH2_TXDATA_in[34] = (CH2_TXDATA[34] === 1'bz) || CH2_TXDATA[34]; // rv 1
  assign CH2_TXDATA_in[35] = (CH2_TXDATA[35] === 1'bz) || CH2_TXDATA[35]; // rv 1
  assign CH2_TXDATA_in[36] = (CH2_TXDATA[36] === 1'bz) || CH2_TXDATA[36]; // rv 1
  assign CH2_TXDATA_in[37] = (CH2_TXDATA[37] === 1'bz) || CH2_TXDATA[37]; // rv 1
  assign CH2_TXDATA_in[38] = (CH2_TXDATA[38] === 1'bz) || CH2_TXDATA[38]; // rv 1
  assign CH2_TXDATA_in[39] = (CH2_TXDATA[39] === 1'bz) || CH2_TXDATA[39]; // rv 1
  assign CH2_TXDATA_in[3] = (CH2_TXDATA[3] === 1'bz) || CH2_TXDATA[3]; // rv 1
  assign CH2_TXDATA_in[40] = (CH2_TXDATA[40] === 1'bz) || CH2_TXDATA[40]; // rv 1
  assign CH2_TXDATA_in[41] = (CH2_TXDATA[41] === 1'bz) || CH2_TXDATA[41]; // rv 1
  assign CH2_TXDATA_in[42] = (CH2_TXDATA[42] === 1'bz) || CH2_TXDATA[42]; // rv 1
  assign CH2_TXDATA_in[43] = (CH2_TXDATA[43] === 1'bz) || CH2_TXDATA[43]; // rv 1
  assign CH2_TXDATA_in[44] = (CH2_TXDATA[44] === 1'bz) || CH2_TXDATA[44]; // rv 1
  assign CH2_TXDATA_in[45] = (CH2_TXDATA[45] === 1'bz) || CH2_TXDATA[45]; // rv 1
  assign CH2_TXDATA_in[46] = (CH2_TXDATA[46] === 1'bz) || CH2_TXDATA[46]; // rv 1
  assign CH2_TXDATA_in[47] = (CH2_TXDATA[47] === 1'bz) || CH2_TXDATA[47]; // rv 1
  assign CH2_TXDATA_in[48] = (CH2_TXDATA[48] === 1'bz) || CH2_TXDATA[48]; // rv 1
  assign CH2_TXDATA_in[49] = (CH2_TXDATA[49] === 1'bz) || CH2_TXDATA[49]; // rv 1
  assign CH2_TXDATA_in[4] = (CH2_TXDATA[4] === 1'bz) || CH2_TXDATA[4]; // rv 1
  assign CH2_TXDATA_in[50] = (CH2_TXDATA[50] === 1'bz) || CH2_TXDATA[50]; // rv 1
  assign CH2_TXDATA_in[51] = (CH2_TXDATA[51] === 1'bz) || CH2_TXDATA[51]; // rv 1
  assign CH2_TXDATA_in[52] = (CH2_TXDATA[52] === 1'bz) || CH2_TXDATA[52]; // rv 1
  assign CH2_TXDATA_in[53] = (CH2_TXDATA[53] === 1'bz) || CH2_TXDATA[53]; // rv 1
  assign CH2_TXDATA_in[54] = (CH2_TXDATA[54] === 1'bz) || CH2_TXDATA[54]; // rv 1
  assign CH2_TXDATA_in[55] = (CH2_TXDATA[55] === 1'bz) || CH2_TXDATA[55]; // rv 1
  assign CH2_TXDATA_in[56] = (CH2_TXDATA[56] === 1'bz) || CH2_TXDATA[56]; // rv 1
  assign CH2_TXDATA_in[57] = (CH2_TXDATA[57] === 1'bz) || CH2_TXDATA[57]; // rv 1
  assign CH2_TXDATA_in[58] = (CH2_TXDATA[58] === 1'bz) || CH2_TXDATA[58]; // rv 1
  assign CH2_TXDATA_in[59] = (CH2_TXDATA[59] === 1'bz) || CH2_TXDATA[59]; // rv 1
  assign CH2_TXDATA_in[5] = (CH2_TXDATA[5] === 1'bz) || CH2_TXDATA[5]; // rv 1
  assign CH2_TXDATA_in[60] = (CH2_TXDATA[60] === 1'bz) || CH2_TXDATA[60]; // rv 1
  assign CH2_TXDATA_in[61] = (CH2_TXDATA[61] === 1'bz) || CH2_TXDATA[61]; // rv 1
  assign CH2_TXDATA_in[62] = (CH2_TXDATA[62] === 1'bz) || CH2_TXDATA[62]; // rv 1
  assign CH2_TXDATA_in[63] = (CH2_TXDATA[63] === 1'bz) || CH2_TXDATA[63]; // rv 1
  assign CH2_TXDATA_in[64] = (CH2_TXDATA[64] === 1'bz) || CH2_TXDATA[64]; // rv 1
  assign CH2_TXDATA_in[65] = (CH2_TXDATA[65] === 1'bz) || CH2_TXDATA[65]; // rv 1
  assign CH2_TXDATA_in[66] = (CH2_TXDATA[66] === 1'bz) || CH2_TXDATA[66]; // rv 1
  assign CH2_TXDATA_in[67] = (CH2_TXDATA[67] === 1'bz) || CH2_TXDATA[67]; // rv 1
  assign CH2_TXDATA_in[68] = (CH2_TXDATA[68] === 1'bz) || CH2_TXDATA[68]; // rv 1
  assign CH2_TXDATA_in[69] = (CH2_TXDATA[69] === 1'bz) || CH2_TXDATA[69]; // rv 1
  assign CH2_TXDATA_in[6] = (CH2_TXDATA[6] === 1'bz) || CH2_TXDATA[6]; // rv 1
  assign CH2_TXDATA_in[70] = (CH2_TXDATA[70] === 1'bz) || CH2_TXDATA[70]; // rv 1
  assign CH2_TXDATA_in[71] = (CH2_TXDATA[71] === 1'bz) || CH2_TXDATA[71]; // rv 1
  assign CH2_TXDATA_in[72] = (CH2_TXDATA[72] === 1'bz) || CH2_TXDATA[72]; // rv 1
  assign CH2_TXDATA_in[73] = (CH2_TXDATA[73] === 1'bz) || CH2_TXDATA[73]; // rv 1
  assign CH2_TXDATA_in[74] = (CH2_TXDATA[74] === 1'bz) || CH2_TXDATA[74]; // rv 1
  assign CH2_TXDATA_in[75] = (CH2_TXDATA[75] === 1'bz) || CH2_TXDATA[75]; // rv 1
  assign CH2_TXDATA_in[76] = (CH2_TXDATA[76] === 1'bz) || CH2_TXDATA[76]; // rv 1
  assign CH2_TXDATA_in[77] = (CH2_TXDATA[77] === 1'bz) || CH2_TXDATA[77]; // rv 1
  assign CH2_TXDATA_in[78] = (CH2_TXDATA[78] === 1'bz) || CH2_TXDATA[78]; // rv 1
  assign CH2_TXDATA_in[79] = (CH2_TXDATA[79] === 1'bz) || CH2_TXDATA[79]; // rv 1
  assign CH2_TXDATA_in[7] = (CH2_TXDATA[7] === 1'bz) || CH2_TXDATA[7]; // rv 1
  assign CH2_TXDATA_in[80] = (CH2_TXDATA[80] === 1'bz) || CH2_TXDATA[80]; // rv 1
  assign CH2_TXDATA_in[81] = (CH2_TXDATA[81] === 1'bz) || CH2_TXDATA[81]; // rv 1
  assign CH2_TXDATA_in[82] = (CH2_TXDATA[82] === 1'bz) || CH2_TXDATA[82]; // rv 1
  assign CH2_TXDATA_in[83] = (CH2_TXDATA[83] === 1'bz) || CH2_TXDATA[83]; // rv 1
  assign CH2_TXDATA_in[84] = (CH2_TXDATA[84] === 1'bz) || CH2_TXDATA[84]; // rv 1
  assign CH2_TXDATA_in[85] = (CH2_TXDATA[85] === 1'bz) || CH2_TXDATA[85]; // rv 1
  assign CH2_TXDATA_in[86] = (CH2_TXDATA[86] === 1'bz) || CH2_TXDATA[86]; // rv 1
  assign CH2_TXDATA_in[87] = (CH2_TXDATA[87] === 1'bz) || CH2_TXDATA[87]; // rv 1
  assign CH2_TXDATA_in[88] = (CH2_TXDATA[88] === 1'bz) || CH2_TXDATA[88]; // rv 1
  assign CH2_TXDATA_in[89] = (CH2_TXDATA[89] === 1'bz) || CH2_TXDATA[89]; // rv 1
  assign CH2_TXDATA_in[8] = (CH2_TXDATA[8] === 1'bz) || CH2_TXDATA[8]; // rv 1
  assign CH2_TXDATA_in[90] = (CH2_TXDATA[90] === 1'bz) || CH2_TXDATA[90]; // rv 1
  assign CH2_TXDATA_in[91] = (CH2_TXDATA[91] === 1'bz) || CH2_TXDATA[91]; // rv 1
  assign CH2_TXDATA_in[92] = (CH2_TXDATA[92] === 1'bz) || CH2_TXDATA[92]; // rv 1
  assign CH2_TXDATA_in[93] = (CH2_TXDATA[93] === 1'bz) || CH2_TXDATA[93]; // rv 1
  assign CH2_TXDATA_in[94] = (CH2_TXDATA[94] === 1'bz) || CH2_TXDATA[94]; // rv 1
  assign CH2_TXDATA_in[95] = (CH2_TXDATA[95] === 1'bz) || CH2_TXDATA[95]; // rv 1
  assign CH2_TXDATA_in[96] = (CH2_TXDATA[96] === 1'bz) || CH2_TXDATA[96]; // rv 1
  assign CH2_TXDATA_in[97] = (CH2_TXDATA[97] === 1'bz) || CH2_TXDATA[97]; // rv 1
  assign CH2_TXDATA_in[98] = (CH2_TXDATA[98] === 1'bz) || CH2_TXDATA[98]; // rv 1
  assign CH2_TXDATA_in[99] = (CH2_TXDATA[99] === 1'bz) || CH2_TXDATA[99]; // rv 1
  assign CH2_TXDATA_in[9] = (CH2_TXDATA[9] === 1'bz) || CH2_TXDATA[9]; // rv 1
  assign CH2_TXDCCDONE_M_in = CH2_TXDCCDONE_M;
  assign CH2_TXDEBUGPCSOUT_M_in = CH2_TXDEBUGPCSOUT_M;
  assign CH2_TXINHIBIT_in = (CH2_TXINHIBIT === 1'bz) || CH2_TXINHIBIT; // rv 1
  assign CH2_TXLATCLK_in = (CH2_TXLATCLK === 1'bz) || CH2_TXLATCLK; // rv 1
  assign CH2_TXMAINCURSOR_in[0] = (CH2_TXMAINCURSOR[0] === 1'bz) || CH2_TXMAINCURSOR[0]; // rv 1
  assign CH2_TXMAINCURSOR_in[1] = (CH2_TXMAINCURSOR[1] === 1'bz) || CH2_TXMAINCURSOR[1]; // rv 1
  assign CH2_TXMAINCURSOR_in[2] = (CH2_TXMAINCURSOR[2] === 1'bz) || CH2_TXMAINCURSOR[2]; // rv 1
  assign CH2_TXMAINCURSOR_in[3] = (CH2_TXMAINCURSOR[3] === 1'bz) || CH2_TXMAINCURSOR[3]; // rv 1
  assign CH2_TXMAINCURSOR_in[4] = (CH2_TXMAINCURSOR[4] === 1'bz) || CH2_TXMAINCURSOR[4]; // rv 1
  assign CH2_TXMAINCURSOR_in[5] = (CH2_TXMAINCURSOR[5] === 1'bz) || CH2_TXMAINCURSOR[5]; // rv 1
  assign CH2_TXMAINCURSOR_in[6] = (CH2_TXMAINCURSOR[6] === 1'bz) || CH2_TXMAINCURSOR[6]; // rv 1
  assign CH2_TXPCSRESETMASK_in = (CH2_TXPCSRESETMASK === 1'bz) || CH2_TXPCSRESETMASK; // rv 1
  assign CH2_TXPD_in[0] = (CH2_TXPD[0] === 1'bz) || CH2_TXPD[0]; // rv 1
  assign CH2_TXPD_in[1] = (CH2_TXPD[1] === 1'bz) || CH2_TXPD[1]; // rv 1
  assign CH2_TXPERST_in = (CH2_TXPERST === 1'bz) || CH2_TXPERST; // rv 1
  assign CH2_TXPISOPD_in = (CH2_TXPISOPD === 1'bz) || CH2_TXPISOPD; // rv 1
  assign CH2_TXPMARESETDONE_M_in = CH2_TXPMARESETDONE_M;
  assign CH2_TXPMARESETMASK_in[0] = (CH2_TXPMARESETMASK[0] === 1'bz) || CH2_TXPMARESETMASK[0]; // rv 1
  assign CH2_TXPMARESETMASK_in[1] = (CH2_TXPMARESETMASK[1] === 1'bz) || CH2_TXPMARESETMASK[1]; // rv 1
  assign CH2_TXPOLARITY_in = (CH2_TXPOLARITY === 1'bz) || CH2_TXPOLARITY; // rv 1
  assign CH2_TXPOSTCURSOR_in[0] = (CH2_TXPOSTCURSOR[0] === 1'bz) || CH2_TXPOSTCURSOR[0]; // rv 1
  assign CH2_TXPOSTCURSOR_in[1] = (CH2_TXPOSTCURSOR[1] === 1'bz) || CH2_TXPOSTCURSOR[1]; // rv 1
  assign CH2_TXPOSTCURSOR_in[2] = (CH2_TXPOSTCURSOR[2] === 1'bz) || CH2_TXPOSTCURSOR[2]; // rv 1
  assign CH2_TXPOSTCURSOR_in[3] = (CH2_TXPOSTCURSOR[3] === 1'bz) || CH2_TXPOSTCURSOR[3]; // rv 1
  assign CH2_TXPOSTCURSOR_in[4] = (CH2_TXPOSTCURSOR[4] === 1'bz) || CH2_TXPOSTCURSOR[4]; // rv 1
  assign CH2_TXPOSTCURSOR_in[5] = (CH2_TXPOSTCURSOR[5] === 1'bz) || CH2_TXPOSTCURSOR[5]; // rv 1
  assign CH2_TXPRBSFORCEERR_in = (CH2_TXPRBSFORCEERR === 1'bz) || CH2_TXPRBSFORCEERR; // rv 1
  assign CH2_TXPRBSSEL_in[0] = (CH2_TXPRBSSEL[0] === 1'bz) || CH2_TXPRBSSEL[0]; // rv 1
  assign CH2_TXPRBSSEL_in[1] = (CH2_TXPRBSSEL[1] === 1'bz) || CH2_TXPRBSSEL[1]; // rv 1
  assign CH2_TXPRBSSEL_in[2] = (CH2_TXPRBSSEL[2] === 1'bz) || CH2_TXPRBSSEL[2]; // rv 1
  assign CH2_TXPRBSSEL_in[3] = (CH2_TXPRBSSEL[3] === 1'bz) || CH2_TXPRBSSEL[3]; // rv 1
  assign CH2_TXPRECURSOR2_in[0] = (CH2_TXPRECURSOR2[0] === 1'bz) || CH2_TXPRECURSOR2[0]; // rv 1
  assign CH2_TXPRECURSOR2_in[1] = (CH2_TXPRECURSOR2[1] === 1'bz) || CH2_TXPRECURSOR2[1]; // rv 1
  assign CH2_TXPRECURSOR2_in[2] = (CH2_TXPRECURSOR2[2] === 1'bz) || CH2_TXPRECURSOR2[2]; // rv 1
  assign CH2_TXPRECURSOR2_in[3] = (CH2_TXPRECURSOR2[3] === 1'bz) || CH2_TXPRECURSOR2[3]; // rv 1
  assign CH2_TXPRECURSOR2_in[4] = (CH2_TXPRECURSOR2[4] === 1'bz) || CH2_TXPRECURSOR2[4]; // rv 1
  assign CH2_TXPRECURSOR2_in[5] = (CH2_TXPRECURSOR2[5] === 1'bz) || CH2_TXPRECURSOR2[5]; // rv 1
  assign CH2_TXPRECURSOR3_in[0] = (CH2_TXPRECURSOR3[0] === 1'bz) || CH2_TXPRECURSOR3[0]; // rv 1
  assign CH2_TXPRECURSOR3_in[1] = (CH2_TXPRECURSOR3[1] === 1'bz) || CH2_TXPRECURSOR3[1]; // rv 1
  assign CH2_TXPRECURSOR3_in[2] = (CH2_TXPRECURSOR3[2] === 1'bz) || CH2_TXPRECURSOR3[2]; // rv 1
  assign CH2_TXPRECURSOR3_in[3] = (CH2_TXPRECURSOR3[3] === 1'bz) || CH2_TXPRECURSOR3[3]; // rv 1
  assign CH2_TXPRECURSOR3_in[4] = (CH2_TXPRECURSOR3[4] === 1'bz) || CH2_TXPRECURSOR3[4]; // rv 1
  assign CH2_TXPRECURSOR3_in[5] = (CH2_TXPRECURSOR3[5] === 1'bz) || CH2_TXPRECURSOR3[5]; // rv 1
  assign CH2_TXPRECURSOR_in[0] = (CH2_TXPRECURSOR[0] === 1'bz) || CH2_TXPRECURSOR[0]; // rv 1
  assign CH2_TXPRECURSOR_in[1] = (CH2_TXPRECURSOR[1] === 1'bz) || CH2_TXPRECURSOR[1]; // rv 1
  assign CH2_TXPRECURSOR_in[2] = (CH2_TXPRECURSOR[2] === 1'bz) || CH2_TXPRECURSOR[2]; // rv 1
  assign CH2_TXPRECURSOR_in[3] = (CH2_TXPRECURSOR[3] === 1'bz) || CH2_TXPRECURSOR[3]; // rv 1
  assign CH2_TXPRECURSOR_in[4] = (CH2_TXPRECURSOR[4] === 1'bz) || CH2_TXPRECURSOR[4]; // rv 1
  assign CH2_TXPRECURSOR_in[5] = (CH2_TXPRECURSOR[5] === 1'bz) || CH2_TXPRECURSOR[5]; // rv 1
  assign CH2_TXPROGDIVRESETDONE_M_in = CH2_TXPROGDIVRESETDONE_M;
  assign CH2_TXPROGDIVRESET_in = (CH2_TXPROGDIVRESET === 1'bz) || CH2_TXPROGDIVRESET; // rv 1
  assign CH2_TXQPRBSEN_in = (CH2_TXQPRBSEN === 1'bz) || CH2_TXQPRBSEN; // rv 1
  assign CH2_TXRATE_in[0] = (CH2_TXRATE[0] === 1'bz) || CH2_TXRATE[0]; // rv 1
  assign CH2_TXRATE_in[1] = (CH2_TXRATE[1] === 1'bz) || CH2_TXRATE[1]; // rv 1
  assign CH2_TXRATE_in[2] = (CH2_TXRATE[2] === 1'bz) || CH2_TXRATE[2]; // rv 1
  assign CH2_TXRATE_in[3] = (CH2_TXRATE[3] === 1'bz) || CH2_TXRATE[3]; // rv 1
  assign CH2_TXRATE_in[4] = (CH2_TXRATE[4] === 1'bz) || CH2_TXRATE[4]; // rv 1
  assign CH2_TXRATE_in[5] = (CH2_TXRATE[5] === 1'bz) || CH2_TXRATE[5]; // rv 1
  assign CH2_TXRATE_in[6] = (CH2_TXRATE[6] === 1'bz) || CH2_TXRATE[6]; // rv 1
  assign CH2_TXRATE_in[7] = (CH2_TXRATE[7] === 1'bz) || CH2_TXRATE[7]; // rv 1
  assign CH2_TXRESETDONE_M_in = CH2_TXRESETDONE_M;
  assign CH2_TXRESETMODE_in[0] = (CH2_TXRESETMODE[0] === 1'bz) || CH2_TXRESETMODE[0]; // rv 1
  assign CH2_TXRESETMODE_in[1] = (CH2_TXRESETMODE[1] === 1'bz) || CH2_TXRESETMODE[1]; // rv 1
  assign CH2_TXRSV0_in[0] = (CH2_TXRSV0[0] === 1'bz) || CH2_TXRSV0[0]; // rv 1
  assign CH2_TXRSV0_in[1] = (CH2_TXRSV0[1] === 1'bz) || CH2_TXRSV0[1]; // rv 1
  assign CH2_TXRSV0_in[2] = (CH2_TXRSV0[2] === 1'bz) || CH2_TXRSV0[2]; // rv 1
  assign CH2_TXRSV0_in[3] = (CH2_TXRSV0[3] === 1'bz) || CH2_TXRSV0[3]; // rv 1
  assign CH2_TXRSV0_in[4] = (CH2_TXRSV0[4] === 1'bz) || CH2_TXRSV0[4]; // rv 1
  assign CH2_TXRSV1_in[0] = (CH2_TXRSV1[0] === 1'bz) || CH2_TXRSV1[0]; // rv 1
  assign CH2_TXRSV1_in[1] = (CH2_TXRSV1[1] === 1'bz) || CH2_TXRSV1[1]; // rv 1
  assign CH2_TXRSV1_in[2] = (CH2_TXRSV1[2] === 1'bz) || CH2_TXRSV1[2]; // rv 1
  assign CH2_TXRSV1_in[3] = (CH2_TXRSV1[3] === 1'bz) || CH2_TXRSV1[3]; // rv 1
  assign CH2_TXUSERRDY_in = (CH2_TXUSERRDY === 1'bz) || CH2_TXUSERRDY; // rv 1
  assign CH2_TXUSRCLK_in = (CH2_TXUSRCLK === 1'bz) || CH2_TXUSRCLK; // rv 1
  assign CH3_CDRFREQOS_in = (CH3_CDRFREQOS === 1'bz) || CH3_CDRFREQOS; // rv 1
  assign CH3_CDRINCPCTRL_in = (CH3_CDRINCPCTRL === 1'bz) || CH3_CDRINCPCTRL; // rv 1
  assign CH3_CDRSTEPDIR_in = (CH3_CDRSTEPDIR === 1'bz) || CH3_CDRSTEPDIR; // rv 1
  assign CH3_CDRSTEPSQ_in = (CH3_CDRSTEPSQ === 1'bz) || CH3_CDRSTEPSQ; // rv 1
  assign CH3_CDRSTEPSX_in = (CH3_CDRSTEPSX === 1'bz) || CH3_CDRSTEPSX; // rv 1
  assign CH3_CLKRSVD0_in = (CH3_CLKRSVD0 === 1'bz) || CH3_CLKRSVD0; // rv 1
  assign CH3_CLKRSVD1_in = (CH3_CLKRSVD1 === 1'bz) || CH3_CLKRSVD1; // rv 1
  assign CH3_DMONFIFORESET_in = (CH3_DMONFIFORESET === 1'bz) || CH3_DMONFIFORESET; // rv 1
  assign CH3_DMONITORCLK_in = (CH3_DMONITORCLK === 1'bz) || CH3_DMONITORCLK; // rv 1
  assign CH3_DMONITOROUT_M_in = CH3_DMONITOROUT_M;
  assign CH3_EYESCANDATAERROR_M_in = CH3_EYESCANDATAERROR_M;
  assign CH3_EYESCANRESET_in = (CH3_EYESCANRESET === 1'bz) || CH3_EYESCANRESET; // rv 1
  assign CH3_EYESCANTRIGGER_in = (CH3_EYESCANTRIGGER === 1'bz) || CH3_EYESCANTRIGGER; // rv 1
  assign CH3_GTRSVD_in[0] = (CH3_GTRSVD[0] === 1'bz) || CH3_GTRSVD[0]; // rv 1
  assign CH3_GTRSVD_in[10] = (CH3_GTRSVD[10] === 1'bz) || CH3_GTRSVD[10]; // rv 1
  assign CH3_GTRSVD_in[11] = (CH3_GTRSVD[11] === 1'bz) || CH3_GTRSVD[11]; // rv 1
  assign CH3_GTRSVD_in[12] = (CH3_GTRSVD[12] === 1'bz) || CH3_GTRSVD[12]; // rv 1
  assign CH3_GTRSVD_in[13] = (CH3_GTRSVD[13] === 1'bz) || CH3_GTRSVD[13]; // rv 1
  assign CH3_GTRSVD_in[14] = (CH3_GTRSVD[14] === 1'bz) || CH3_GTRSVD[14]; // rv 1
  assign CH3_GTRSVD_in[15] = (CH3_GTRSVD[15] === 1'bz) || CH3_GTRSVD[15]; // rv 1
  assign CH3_GTRSVD_in[1] = (CH3_GTRSVD[1] === 1'bz) || CH3_GTRSVD[1]; // rv 1
  assign CH3_GTRSVD_in[2] = (CH3_GTRSVD[2] === 1'bz) || CH3_GTRSVD[2]; // rv 1
  assign CH3_GTRSVD_in[3] = (CH3_GTRSVD[3] === 1'bz) || CH3_GTRSVD[3]; // rv 1
  assign CH3_GTRSVD_in[4] = (CH3_GTRSVD[4] === 1'bz) || CH3_GTRSVD[4]; // rv 1
  assign CH3_GTRSVD_in[5] = (CH3_GTRSVD[5] === 1'bz) || CH3_GTRSVD[5]; // rv 1
  assign CH3_GTRSVD_in[6] = (CH3_GTRSVD[6] === 1'bz) || CH3_GTRSVD[6]; // rv 1
  assign CH3_GTRSVD_in[7] = (CH3_GTRSVD[7] === 1'bz) || CH3_GTRSVD[7]; // rv 1
  assign CH3_GTRSVD_in[8] = (CH3_GTRSVD[8] === 1'bz) || CH3_GTRSVD[8]; // rv 1
  assign CH3_GTRSVD_in[9] = (CH3_GTRSVD[9] === 1'bz) || CH3_GTRSVD[9]; // rv 1
  assign CH3_GTRXRESET_in = (CH3_GTRXRESET === 1'bz) || CH3_GTRXRESET; // rv 1
  assign CH3_GTTXRESET_in = (CH3_GTTXRESET === 1'bz) || CH3_GTTXRESET; // rv 1
  assign CH3_ILORESETDONE_M_in = CH3_ILORESETDONE_M;
  assign CH3_ILORESETMASK_in = (CH3_ILORESETMASK === 1'bz) || CH3_ILORESETMASK; // rv 1
  assign CH3_ILORESET_in = (CH3_ILORESET === 1'bz) || CH3_ILORESET; // rv 1
  assign CH3_LOOPBACK_in[0] = (CH3_LOOPBACK[0] === 1'bz) || CH3_LOOPBACK[0]; // rv 1
  assign CH3_LOOPBACK_in[1] = (CH3_LOOPBACK[1] === 1'bz) || CH3_LOOPBACK[1]; // rv 1
  assign CH3_LOOPBACK_in[2] = (CH3_LOOPBACK[2] === 1'bz) || CH3_LOOPBACK[2]; // rv 1
  assign CH3_PCSRSVDIN_in[0] = (CH3_PCSRSVDIN[0] === 1'bz) || CH3_PCSRSVDIN[0]; // rv 1
  assign CH3_PCSRSVDIN_in[10] = (CH3_PCSRSVDIN[10] === 1'bz) || CH3_PCSRSVDIN[10]; // rv 1
  assign CH3_PCSRSVDIN_in[11] = (CH3_PCSRSVDIN[11] === 1'bz) || CH3_PCSRSVDIN[11]; // rv 1
  assign CH3_PCSRSVDIN_in[12] = (CH3_PCSRSVDIN[12] === 1'bz) || CH3_PCSRSVDIN[12]; // rv 1
  assign CH3_PCSRSVDIN_in[13] = (CH3_PCSRSVDIN[13] === 1'bz) || CH3_PCSRSVDIN[13]; // rv 1
  assign CH3_PCSRSVDIN_in[14] = (CH3_PCSRSVDIN[14] === 1'bz) || CH3_PCSRSVDIN[14]; // rv 1
  assign CH3_PCSRSVDIN_in[15] = (CH3_PCSRSVDIN[15] === 1'bz) || CH3_PCSRSVDIN[15]; // rv 1
  assign CH3_PCSRSVDIN_in[1] = (CH3_PCSRSVDIN[1] === 1'bz) || CH3_PCSRSVDIN[1]; // rv 1
  assign CH3_PCSRSVDIN_in[2] = (CH3_PCSRSVDIN[2] === 1'bz) || CH3_PCSRSVDIN[2]; // rv 1
  assign CH3_PCSRSVDIN_in[3] = (CH3_PCSRSVDIN[3] === 1'bz) || CH3_PCSRSVDIN[3]; // rv 1
  assign CH3_PCSRSVDIN_in[4] = (CH3_PCSRSVDIN[4] === 1'bz) || CH3_PCSRSVDIN[4]; // rv 1
  assign CH3_PCSRSVDIN_in[5] = (CH3_PCSRSVDIN[5] === 1'bz) || CH3_PCSRSVDIN[5]; // rv 1
  assign CH3_PCSRSVDIN_in[6] = (CH3_PCSRSVDIN[6] === 1'bz) || CH3_PCSRSVDIN[6]; // rv 1
  assign CH3_PCSRSVDIN_in[7] = (CH3_PCSRSVDIN[7] === 1'bz) || CH3_PCSRSVDIN[7]; // rv 1
  assign CH3_PCSRSVDIN_in[8] = (CH3_PCSRSVDIN[8] === 1'bz) || CH3_PCSRSVDIN[8]; // rv 1
  assign CH3_PCSRSVDIN_in[9] = (CH3_PCSRSVDIN[9] === 1'bz) || CH3_PCSRSVDIN[9]; // rv 1
  assign CH3_PCSRSVDOUT_M_in = CH3_PCSRSVDOUT_M;
  assign CH3_PINRSVDAS_M_in = CH3_PINRSVDAS_M;
  assign CH3_REFDEBUGOUT_M_in = CH3_REFDEBUGOUT_M;
  assign CH3_RESETEXCEPTION_M_in = CH3_RESETEXCEPTION_M;
  assign CH3_RXBUFSTATUS_M_in = CH3_RXBUFSTATUS_M;
  assign CH3_RXCDRHOLD_in = (CH3_RXCDRHOLD === 1'bz) || CH3_RXCDRHOLD; // rv 1
  assign CH3_RXCDRLOCK_M_in = CH3_RXCDRLOCK_M;
  assign CH3_RXCDROVRDEN_in = (CH3_RXCDROVRDEN === 1'bz) || CH3_RXCDROVRDEN; // rv 1
  assign CH3_RXCDRPHDONE_M_in = CH3_RXCDRPHDONE_M;
  assign CH3_RXCDRRESET_in = (CH3_RXCDRRESET === 1'bz) || CH3_RXCDRRESET; // rv 1
  assign CH3_RXDATA_M_in = CH3_RXDATA_M;
  assign CH3_RXDEBUGPCSOUT_M_in = CH3_RXDEBUGPCSOUT_M;
  assign CH3_RXLATCLK_in = (CH3_RXLATCLK === 1'bz) || CH3_RXLATCLK; // rv 1
  assign CH3_RXPCSRESETMASK_in[0] = (CH3_RXPCSRESETMASK[0] === 1'bz) || CH3_RXPCSRESETMASK[0]; // rv 1
  assign CH3_RXPCSRESETMASK_in[1] = (CH3_RXPCSRESETMASK[1] === 1'bz) || CH3_RXPCSRESETMASK[1]; // rv 1
  assign CH3_RXPCSRESETMASK_in[2] = (CH3_RXPCSRESETMASK[2] === 1'bz) || CH3_RXPCSRESETMASK[2]; // rv 1
  assign CH3_RXPD_in[0] = (CH3_RXPD[0] === 1'bz) || CH3_RXPD[0]; // rv 1
  assign CH3_RXPD_in[1] = (CH3_RXPD[1] === 1'bz) || CH3_RXPD[1]; // rv 1
  assign CH3_RXPERST_in = (CH3_RXPERST === 1'bz) || CH3_RXPERST; // rv 1
  assign CH3_RXPMARESETDONE_M_in = CH3_RXPMARESETDONE_M;
  assign CH3_RXPMARESETMASK_in[0] = (CH3_RXPMARESETMASK[0] === 1'bz) || CH3_RXPMARESETMASK[0]; // rv 1
  assign CH3_RXPMARESETMASK_in[1] = (CH3_RXPMARESETMASK[1] === 1'bz) || CH3_RXPMARESETMASK[1]; // rv 1
  assign CH3_RXPMARESETMASK_in[2] = (CH3_RXPMARESETMASK[2] === 1'bz) || CH3_RXPMARESETMASK[2]; // rv 1
  assign CH3_RXPMARESETMASK_in[3] = (CH3_RXPMARESETMASK[3] === 1'bz) || CH3_RXPMARESETMASK[3]; // rv 1
  assign CH3_RXPMARESETMASK_in[4] = (CH3_RXPMARESETMASK[4] === 1'bz) || CH3_RXPMARESETMASK[4]; // rv 1
  assign CH3_RXPMARESETMASK_in[5] = (CH3_RXPMARESETMASK[5] === 1'bz) || CH3_RXPMARESETMASK[5]; // rv 1
  assign CH3_RXPMARESETMASK_in[6] = (CH3_RXPMARESETMASK[6] === 1'bz) || CH3_RXPMARESETMASK[6]; // rv 1
  assign CH3_RXPMARESETMASK_in[7] = (CH3_RXPMARESETMASK[7] === 1'bz) || CH3_RXPMARESETMASK[7]; // rv 1
  assign CH3_RXPOLARITY_in = (CH3_RXPOLARITY === 1'bz) || CH3_RXPOLARITY; // rv 1
  assign CH3_RXPRBSCNTRESET_in = (CH3_RXPRBSCNTRESET === 1'bz) || CH3_RXPRBSCNTRESET; // rv 1
  assign CH3_RXPRBSCNTSTOP_in = (CH3_RXPRBSCNTSTOP === 1'bz) || CH3_RXPRBSCNTSTOP; // rv 1
  assign CH3_RXPRBSERR_M_in = CH3_RXPRBSERR_M;
  assign CH3_RXPRBSLOCKED_M_in = CH3_RXPRBSLOCKED_M;
  assign CH3_RXPRBSSEL_in[0] = (CH3_RXPRBSSEL[0] === 1'bz) || CH3_RXPRBSSEL[0]; // rv 1
  assign CH3_RXPRBSSEL_in[1] = (CH3_RXPRBSSEL[1] === 1'bz) || CH3_RXPRBSSEL[1]; // rv 1
  assign CH3_RXPRBSSEL_in[2] = (CH3_RXPRBSSEL[2] === 1'bz) || CH3_RXPRBSSEL[2]; // rv 1
  assign CH3_RXPRBSSEL_in[3] = (CH3_RXPRBSSEL[3] === 1'bz) || CH3_RXPRBSSEL[3]; // rv 1
  assign CH3_RXPROGDIVRESETDONE_M_in = CH3_RXPROGDIVRESETDONE_M;
  assign CH3_RXPROGDIVRESET_in = (CH3_RXPROGDIVRESET === 1'bz) || CH3_RXPROGDIVRESET; // rv 1
  assign CH3_RXQPRBSEN_in = (CH3_RXQPRBSEN === 1'bz) || CH3_RXQPRBSEN; // rv 1
  assign CH3_RXRATE_in[0] = (CH3_RXRATE[0] === 1'bz) || CH3_RXRATE[0]; // rv 1
  assign CH3_RXRATE_in[1] = (CH3_RXRATE[1] === 1'bz) || CH3_RXRATE[1]; // rv 1
  assign CH3_RXRATE_in[2] = (CH3_RXRATE[2] === 1'bz) || CH3_RXRATE[2]; // rv 1
  assign CH3_RXRATE_in[3] = (CH3_RXRATE[3] === 1'bz) || CH3_RXRATE[3]; // rv 1
  assign CH3_RXRATE_in[4] = (CH3_RXRATE[4] === 1'bz) || CH3_RXRATE[4]; // rv 1
  assign CH3_RXRATE_in[5] = (CH3_RXRATE[5] === 1'bz) || CH3_RXRATE[5]; // rv 1
  assign CH3_RXRATE_in[6] = (CH3_RXRATE[6] === 1'bz) || CH3_RXRATE[6]; // rv 1
  assign CH3_RXRATE_in[7] = (CH3_RXRATE[7] === 1'bz) || CH3_RXRATE[7]; // rv 1
  assign CH3_RXRESETDONE_M_in = CH3_RXRESETDONE_M;
  assign CH3_RXRESETMODE_in[0] = (CH3_RXRESETMODE[0] === 1'bz) || CH3_RXRESETMODE[0]; // rv 1
  assign CH3_RXRESETMODE_in[1] = (CH3_RXRESETMODE[1] === 1'bz) || CH3_RXRESETMODE[1]; // rv 1
  assign CH3_RXRSV0_in = (CH3_RXRSV0 === 1'bz) || CH3_RXRSV0; // rv 1
  assign CH3_RXRSV1_in = (CH3_RXRSV1 === 1'bz) || CH3_RXRSV1; // rv 1
  assign CH3_RXRSV2_in = (CH3_RXRSV2 === 1'bz) || CH3_RXRSV2; // rv 1
  assign CH3_RXUSERRDY_in = (CH3_RXUSERRDY === 1'bz) || CH3_RXUSERRDY; // rv 1
  assign CH3_RXUSRCLK_in = (CH3_RXUSRCLK === 1'bz) || CH3_RXUSRCLK; // rv 1
  assign CH3_TSTCLK0_in = (CH3_TSTCLK0 === 1'bz) || CH3_TSTCLK0; // rv 1
  assign CH3_TSTCLK1_in = (CH3_TSTCLK1 === 1'bz) || CH3_TSTCLK1; // rv 1
  assign CH3_TXBUFSTATUS_M_in = CH3_TXBUFSTATUS_M;
  assign CH3_TXDATA_in[0] = (CH3_TXDATA[0] === 1'bz) || CH3_TXDATA[0]; // rv 1
  assign CH3_TXDATA_in[100] = (CH3_TXDATA[100] === 1'bz) || CH3_TXDATA[100]; // rv 1
  assign CH3_TXDATA_in[101] = (CH3_TXDATA[101] === 1'bz) || CH3_TXDATA[101]; // rv 1
  assign CH3_TXDATA_in[102] = (CH3_TXDATA[102] === 1'bz) || CH3_TXDATA[102]; // rv 1
  assign CH3_TXDATA_in[103] = (CH3_TXDATA[103] === 1'bz) || CH3_TXDATA[103]; // rv 1
  assign CH3_TXDATA_in[104] = (CH3_TXDATA[104] === 1'bz) || CH3_TXDATA[104]; // rv 1
  assign CH3_TXDATA_in[105] = (CH3_TXDATA[105] === 1'bz) || CH3_TXDATA[105]; // rv 1
  assign CH3_TXDATA_in[106] = (CH3_TXDATA[106] === 1'bz) || CH3_TXDATA[106]; // rv 1
  assign CH3_TXDATA_in[107] = (CH3_TXDATA[107] === 1'bz) || CH3_TXDATA[107]; // rv 1
  assign CH3_TXDATA_in[108] = (CH3_TXDATA[108] === 1'bz) || CH3_TXDATA[108]; // rv 1
  assign CH3_TXDATA_in[109] = (CH3_TXDATA[109] === 1'bz) || CH3_TXDATA[109]; // rv 1
  assign CH3_TXDATA_in[10] = (CH3_TXDATA[10] === 1'bz) || CH3_TXDATA[10]; // rv 1
  assign CH3_TXDATA_in[110] = (CH3_TXDATA[110] === 1'bz) || CH3_TXDATA[110]; // rv 1
  assign CH3_TXDATA_in[111] = (CH3_TXDATA[111] === 1'bz) || CH3_TXDATA[111]; // rv 1
  assign CH3_TXDATA_in[112] = (CH3_TXDATA[112] === 1'bz) || CH3_TXDATA[112]; // rv 1
  assign CH3_TXDATA_in[113] = (CH3_TXDATA[113] === 1'bz) || CH3_TXDATA[113]; // rv 1
  assign CH3_TXDATA_in[114] = (CH3_TXDATA[114] === 1'bz) || CH3_TXDATA[114]; // rv 1
  assign CH3_TXDATA_in[115] = (CH3_TXDATA[115] === 1'bz) || CH3_TXDATA[115]; // rv 1
  assign CH3_TXDATA_in[116] = (CH3_TXDATA[116] === 1'bz) || CH3_TXDATA[116]; // rv 1
  assign CH3_TXDATA_in[117] = (CH3_TXDATA[117] === 1'bz) || CH3_TXDATA[117]; // rv 1
  assign CH3_TXDATA_in[118] = (CH3_TXDATA[118] === 1'bz) || CH3_TXDATA[118]; // rv 1
  assign CH3_TXDATA_in[119] = (CH3_TXDATA[119] === 1'bz) || CH3_TXDATA[119]; // rv 1
  assign CH3_TXDATA_in[11] = (CH3_TXDATA[11] === 1'bz) || CH3_TXDATA[11]; // rv 1
  assign CH3_TXDATA_in[120] = (CH3_TXDATA[120] === 1'bz) || CH3_TXDATA[120]; // rv 1
  assign CH3_TXDATA_in[121] = (CH3_TXDATA[121] === 1'bz) || CH3_TXDATA[121]; // rv 1
  assign CH3_TXDATA_in[122] = (CH3_TXDATA[122] === 1'bz) || CH3_TXDATA[122]; // rv 1
  assign CH3_TXDATA_in[123] = (CH3_TXDATA[123] === 1'bz) || CH3_TXDATA[123]; // rv 1
  assign CH3_TXDATA_in[124] = (CH3_TXDATA[124] === 1'bz) || CH3_TXDATA[124]; // rv 1
  assign CH3_TXDATA_in[125] = (CH3_TXDATA[125] === 1'bz) || CH3_TXDATA[125]; // rv 1
  assign CH3_TXDATA_in[126] = (CH3_TXDATA[126] === 1'bz) || CH3_TXDATA[126]; // rv 1
  assign CH3_TXDATA_in[127] = (CH3_TXDATA[127] === 1'bz) || CH3_TXDATA[127]; // rv 1
  assign CH3_TXDATA_in[128] = (CH3_TXDATA[128] === 1'bz) || CH3_TXDATA[128]; // rv 1
  assign CH3_TXDATA_in[129] = (CH3_TXDATA[129] === 1'bz) || CH3_TXDATA[129]; // rv 1
  assign CH3_TXDATA_in[12] = (CH3_TXDATA[12] === 1'bz) || CH3_TXDATA[12]; // rv 1
  assign CH3_TXDATA_in[130] = (CH3_TXDATA[130] === 1'bz) || CH3_TXDATA[130]; // rv 1
  assign CH3_TXDATA_in[131] = (CH3_TXDATA[131] === 1'bz) || CH3_TXDATA[131]; // rv 1
  assign CH3_TXDATA_in[132] = (CH3_TXDATA[132] === 1'bz) || CH3_TXDATA[132]; // rv 1
  assign CH3_TXDATA_in[133] = (CH3_TXDATA[133] === 1'bz) || CH3_TXDATA[133]; // rv 1
  assign CH3_TXDATA_in[134] = (CH3_TXDATA[134] === 1'bz) || CH3_TXDATA[134]; // rv 1
  assign CH3_TXDATA_in[135] = (CH3_TXDATA[135] === 1'bz) || CH3_TXDATA[135]; // rv 1
  assign CH3_TXDATA_in[136] = (CH3_TXDATA[136] === 1'bz) || CH3_TXDATA[136]; // rv 1
  assign CH3_TXDATA_in[137] = (CH3_TXDATA[137] === 1'bz) || CH3_TXDATA[137]; // rv 1
  assign CH3_TXDATA_in[138] = (CH3_TXDATA[138] === 1'bz) || CH3_TXDATA[138]; // rv 1
  assign CH3_TXDATA_in[139] = (CH3_TXDATA[139] === 1'bz) || CH3_TXDATA[139]; // rv 1
  assign CH3_TXDATA_in[13] = (CH3_TXDATA[13] === 1'bz) || CH3_TXDATA[13]; // rv 1
  assign CH3_TXDATA_in[140] = (CH3_TXDATA[140] === 1'bz) || CH3_TXDATA[140]; // rv 1
  assign CH3_TXDATA_in[141] = (CH3_TXDATA[141] === 1'bz) || CH3_TXDATA[141]; // rv 1
  assign CH3_TXDATA_in[142] = (CH3_TXDATA[142] === 1'bz) || CH3_TXDATA[142]; // rv 1
  assign CH3_TXDATA_in[143] = (CH3_TXDATA[143] === 1'bz) || CH3_TXDATA[143]; // rv 1
  assign CH3_TXDATA_in[144] = (CH3_TXDATA[144] === 1'bz) || CH3_TXDATA[144]; // rv 1
  assign CH3_TXDATA_in[145] = (CH3_TXDATA[145] === 1'bz) || CH3_TXDATA[145]; // rv 1
  assign CH3_TXDATA_in[146] = (CH3_TXDATA[146] === 1'bz) || CH3_TXDATA[146]; // rv 1
  assign CH3_TXDATA_in[147] = (CH3_TXDATA[147] === 1'bz) || CH3_TXDATA[147]; // rv 1
  assign CH3_TXDATA_in[148] = (CH3_TXDATA[148] === 1'bz) || CH3_TXDATA[148]; // rv 1
  assign CH3_TXDATA_in[149] = (CH3_TXDATA[149] === 1'bz) || CH3_TXDATA[149]; // rv 1
  assign CH3_TXDATA_in[14] = (CH3_TXDATA[14] === 1'bz) || CH3_TXDATA[14]; // rv 1
  assign CH3_TXDATA_in[150] = (CH3_TXDATA[150] === 1'bz) || CH3_TXDATA[150]; // rv 1
  assign CH3_TXDATA_in[151] = (CH3_TXDATA[151] === 1'bz) || CH3_TXDATA[151]; // rv 1
  assign CH3_TXDATA_in[152] = (CH3_TXDATA[152] === 1'bz) || CH3_TXDATA[152]; // rv 1
  assign CH3_TXDATA_in[153] = (CH3_TXDATA[153] === 1'bz) || CH3_TXDATA[153]; // rv 1
  assign CH3_TXDATA_in[154] = (CH3_TXDATA[154] === 1'bz) || CH3_TXDATA[154]; // rv 1
  assign CH3_TXDATA_in[155] = (CH3_TXDATA[155] === 1'bz) || CH3_TXDATA[155]; // rv 1
  assign CH3_TXDATA_in[156] = (CH3_TXDATA[156] === 1'bz) || CH3_TXDATA[156]; // rv 1
  assign CH3_TXDATA_in[157] = (CH3_TXDATA[157] === 1'bz) || CH3_TXDATA[157]; // rv 1
  assign CH3_TXDATA_in[158] = (CH3_TXDATA[158] === 1'bz) || CH3_TXDATA[158]; // rv 1
  assign CH3_TXDATA_in[159] = (CH3_TXDATA[159] === 1'bz) || CH3_TXDATA[159]; // rv 1
  assign CH3_TXDATA_in[15] = (CH3_TXDATA[15] === 1'bz) || CH3_TXDATA[15]; // rv 1
  assign CH3_TXDATA_in[160] = (CH3_TXDATA[160] === 1'bz) || CH3_TXDATA[160]; // rv 1
  assign CH3_TXDATA_in[161] = (CH3_TXDATA[161] === 1'bz) || CH3_TXDATA[161]; // rv 1
  assign CH3_TXDATA_in[162] = (CH3_TXDATA[162] === 1'bz) || CH3_TXDATA[162]; // rv 1
  assign CH3_TXDATA_in[163] = (CH3_TXDATA[163] === 1'bz) || CH3_TXDATA[163]; // rv 1
  assign CH3_TXDATA_in[164] = (CH3_TXDATA[164] === 1'bz) || CH3_TXDATA[164]; // rv 1
  assign CH3_TXDATA_in[165] = (CH3_TXDATA[165] === 1'bz) || CH3_TXDATA[165]; // rv 1
  assign CH3_TXDATA_in[166] = (CH3_TXDATA[166] === 1'bz) || CH3_TXDATA[166]; // rv 1
  assign CH3_TXDATA_in[167] = (CH3_TXDATA[167] === 1'bz) || CH3_TXDATA[167]; // rv 1
  assign CH3_TXDATA_in[168] = (CH3_TXDATA[168] === 1'bz) || CH3_TXDATA[168]; // rv 1
  assign CH3_TXDATA_in[169] = (CH3_TXDATA[169] === 1'bz) || CH3_TXDATA[169]; // rv 1
  assign CH3_TXDATA_in[16] = (CH3_TXDATA[16] === 1'bz) || CH3_TXDATA[16]; // rv 1
  assign CH3_TXDATA_in[170] = (CH3_TXDATA[170] === 1'bz) || CH3_TXDATA[170]; // rv 1
  assign CH3_TXDATA_in[171] = (CH3_TXDATA[171] === 1'bz) || CH3_TXDATA[171]; // rv 1
  assign CH3_TXDATA_in[172] = (CH3_TXDATA[172] === 1'bz) || CH3_TXDATA[172]; // rv 1
  assign CH3_TXDATA_in[173] = (CH3_TXDATA[173] === 1'bz) || CH3_TXDATA[173]; // rv 1
  assign CH3_TXDATA_in[174] = (CH3_TXDATA[174] === 1'bz) || CH3_TXDATA[174]; // rv 1
  assign CH3_TXDATA_in[175] = (CH3_TXDATA[175] === 1'bz) || CH3_TXDATA[175]; // rv 1
  assign CH3_TXDATA_in[176] = (CH3_TXDATA[176] === 1'bz) || CH3_TXDATA[176]; // rv 1
  assign CH3_TXDATA_in[177] = (CH3_TXDATA[177] === 1'bz) || CH3_TXDATA[177]; // rv 1
  assign CH3_TXDATA_in[178] = (CH3_TXDATA[178] === 1'bz) || CH3_TXDATA[178]; // rv 1
  assign CH3_TXDATA_in[179] = (CH3_TXDATA[179] === 1'bz) || CH3_TXDATA[179]; // rv 1
  assign CH3_TXDATA_in[17] = (CH3_TXDATA[17] === 1'bz) || CH3_TXDATA[17]; // rv 1
  assign CH3_TXDATA_in[180] = (CH3_TXDATA[180] === 1'bz) || CH3_TXDATA[180]; // rv 1
  assign CH3_TXDATA_in[181] = (CH3_TXDATA[181] === 1'bz) || CH3_TXDATA[181]; // rv 1
  assign CH3_TXDATA_in[182] = (CH3_TXDATA[182] === 1'bz) || CH3_TXDATA[182]; // rv 1
  assign CH3_TXDATA_in[183] = (CH3_TXDATA[183] === 1'bz) || CH3_TXDATA[183]; // rv 1
  assign CH3_TXDATA_in[184] = (CH3_TXDATA[184] === 1'bz) || CH3_TXDATA[184]; // rv 1
  assign CH3_TXDATA_in[185] = (CH3_TXDATA[185] === 1'bz) || CH3_TXDATA[185]; // rv 1
  assign CH3_TXDATA_in[186] = (CH3_TXDATA[186] === 1'bz) || CH3_TXDATA[186]; // rv 1
  assign CH3_TXDATA_in[187] = (CH3_TXDATA[187] === 1'bz) || CH3_TXDATA[187]; // rv 1
  assign CH3_TXDATA_in[188] = (CH3_TXDATA[188] === 1'bz) || CH3_TXDATA[188]; // rv 1
  assign CH3_TXDATA_in[189] = (CH3_TXDATA[189] === 1'bz) || CH3_TXDATA[189]; // rv 1
  assign CH3_TXDATA_in[18] = (CH3_TXDATA[18] === 1'bz) || CH3_TXDATA[18]; // rv 1
  assign CH3_TXDATA_in[190] = (CH3_TXDATA[190] === 1'bz) || CH3_TXDATA[190]; // rv 1
  assign CH3_TXDATA_in[191] = (CH3_TXDATA[191] === 1'bz) || CH3_TXDATA[191]; // rv 1
  assign CH3_TXDATA_in[192] = (CH3_TXDATA[192] === 1'bz) || CH3_TXDATA[192]; // rv 1
  assign CH3_TXDATA_in[193] = (CH3_TXDATA[193] === 1'bz) || CH3_TXDATA[193]; // rv 1
  assign CH3_TXDATA_in[194] = (CH3_TXDATA[194] === 1'bz) || CH3_TXDATA[194]; // rv 1
  assign CH3_TXDATA_in[195] = (CH3_TXDATA[195] === 1'bz) || CH3_TXDATA[195]; // rv 1
  assign CH3_TXDATA_in[196] = (CH3_TXDATA[196] === 1'bz) || CH3_TXDATA[196]; // rv 1
  assign CH3_TXDATA_in[197] = (CH3_TXDATA[197] === 1'bz) || CH3_TXDATA[197]; // rv 1
  assign CH3_TXDATA_in[198] = (CH3_TXDATA[198] === 1'bz) || CH3_TXDATA[198]; // rv 1
  assign CH3_TXDATA_in[199] = (CH3_TXDATA[199] === 1'bz) || CH3_TXDATA[199]; // rv 1
  assign CH3_TXDATA_in[19] = (CH3_TXDATA[19] === 1'bz) || CH3_TXDATA[19]; // rv 1
  assign CH3_TXDATA_in[1] = (CH3_TXDATA[1] === 1'bz) || CH3_TXDATA[1]; // rv 1
  assign CH3_TXDATA_in[200] = (CH3_TXDATA[200] === 1'bz) || CH3_TXDATA[200]; // rv 1
  assign CH3_TXDATA_in[201] = (CH3_TXDATA[201] === 1'bz) || CH3_TXDATA[201]; // rv 1
  assign CH3_TXDATA_in[202] = (CH3_TXDATA[202] === 1'bz) || CH3_TXDATA[202]; // rv 1
  assign CH3_TXDATA_in[203] = (CH3_TXDATA[203] === 1'bz) || CH3_TXDATA[203]; // rv 1
  assign CH3_TXDATA_in[204] = (CH3_TXDATA[204] === 1'bz) || CH3_TXDATA[204]; // rv 1
  assign CH3_TXDATA_in[205] = (CH3_TXDATA[205] === 1'bz) || CH3_TXDATA[205]; // rv 1
  assign CH3_TXDATA_in[206] = (CH3_TXDATA[206] === 1'bz) || CH3_TXDATA[206]; // rv 1
  assign CH3_TXDATA_in[207] = (CH3_TXDATA[207] === 1'bz) || CH3_TXDATA[207]; // rv 1
  assign CH3_TXDATA_in[208] = (CH3_TXDATA[208] === 1'bz) || CH3_TXDATA[208]; // rv 1
  assign CH3_TXDATA_in[209] = (CH3_TXDATA[209] === 1'bz) || CH3_TXDATA[209]; // rv 1
  assign CH3_TXDATA_in[20] = (CH3_TXDATA[20] === 1'bz) || CH3_TXDATA[20]; // rv 1
  assign CH3_TXDATA_in[210] = (CH3_TXDATA[210] === 1'bz) || CH3_TXDATA[210]; // rv 1
  assign CH3_TXDATA_in[211] = (CH3_TXDATA[211] === 1'bz) || CH3_TXDATA[211]; // rv 1
  assign CH3_TXDATA_in[212] = (CH3_TXDATA[212] === 1'bz) || CH3_TXDATA[212]; // rv 1
  assign CH3_TXDATA_in[213] = (CH3_TXDATA[213] === 1'bz) || CH3_TXDATA[213]; // rv 1
  assign CH3_TXDATA_in[214] = (CH3_TXDATA[214] === 1'bz) || CH3_TXDATA[214]; // rv 1
  assign CH3_TXDATA_in[215] = (CH3_TXDATA[215] === 1'bz) || CH3_TXDATA[215]; // rv 1
  assign CH3_TXDATA_in[216] = (CH3_TXDATA[216] === 1'bz) || CH3_TXDATA[216]; // rv 1
  assign CH3_TXDATA_in[217] = (CH3_TXDATA[217] === 1'bz) || CH3_TXDATA[217]; // rv 1
  assign CH3_TXDATA_in[218] = (CH3_TXDATA[218] === 1'bz) || CH3_TXDATA[218]; // rv 1
  assign CH3_TXDATA_in[219] = (CH3_TXDATA[219] === 1'bz) || CH3_TXDATA[219]; // rv 1
  assign CH3_TXDATA_in[21] = (CH3_TXDATA[21] === 1'bz) || CH3_TXDATA[21]; // rv 1
  assign CH3_TXDATA_in[220] = (CH3_TXDATA[220] === 1'bz) || CH3_TXDATA[220]; // rv 1
  assign CH3_TXDATA_in[221] = (CH3_TXDATA[221] === 1'bz) || CH3_TXDATA[221]; // rv 1
  assign CH3_TXDATA_in[222] = (CH3_TXDATA[222] === 1'bz) || CH3_TXDATA[222]; // rv 1
  assign CH3_TXDATA_in[223] = (CH3_TXDATA[223] === 1'bz) || CH3_TXDATA[223]; // rv 1
  assign CH3_TXDATA_in[224] = (CH3_TXDATA[224] === 1'bz) || CH3_TXDATA[224]; // rv 1
  assign CH3_TXDATA_in[225] = (CH3_TXDATA[225] === 1'bz) || CH3_TXDATA[225]; // rv 1
  assign CH3_TXDATA_in[226] = (CH3_TXDATA[226] === 1'bz) || CH3_TXDATA[226]; // rv 1
  assign CH3_TXDATA_in[227] = (CH3_TXDATA[227] === 1'bz) || CH3_TXDATA[227]; // rv 1
  assign CH3_TXDATA_in[228] = (CH3_TXDATA[228] === 1'bz) || CH3_TXDATA[228]; // rv 1
  assign CH3_TXDATA_in[229] = (CH3_TXDATA[229] === 1'bz) || CH3_TXDATA[229]; // rv 1
  assign CH3_TXDATA_in[22] = (CH3_TXDATA[22] === 1'bz) || CH3_TXDATA[22]; // rv 1
  assign CH3_TXDATA_in[230] = (CH3_TXDATA[230] === 1'bz) || CH3_TXDATA[230]; // rv 1
  assign CH3_TXDATA_in[231] = (CH3_TXDATA[231] === 1'bz) || CH3_TXDATA[231]; // rv 1
  assign CH3_TXDATA_in[232] = (CH3_TXDATA[232] === 1'bz) || CH3_TXDATA[232]; // rv 1
  assign CH3_TXDATA_in[233] = (CH3_TXDATA[233] === 1'bz) || CH3_TXDATA[233]; // rv 1
  assign CH3_TXDATA_in[234] = (CH3_TXDATA[234] === 1'bz) || CH3_TXDATA[234]; // rv 1
  assign CH3_TXDATA_in[235] = (CH3_TXDATA[235] === 1'bz) || CH3_TXDATA[235]; // rv 1
  assign CH3_TXDATA_in[236] = (CH3_TXDATA[236] === 1'bz) || CH3_TXDATA[236]; // rv 1
  assign CH3_TXDATA_in[237] = (CH3_TXDATA[237] === 1'bz) || CH3_TXDATA[237]; // rv 1
  assign CH3_TXDATA_in[238] = (CH3_TXDATA[238] === 1'bz) || CH3_TXDATA[238]; // rv 1
  assign CH3_TXDATA_in[239] = (CH3_TXDATA[239] === 1'bz) || CH3_TXDATA[239]; // rv 1
  assign CH3_TXDATA_in[23] = (CH3_TXDATA[23] === 1'bz) || CH3_TXDATA[23]; // rv 1
  assign CH3_TXDATA_in[240] = (CH3_TXDATA[240] === 1'bz) || CH3_TXDATA[240]; // rv 1
  assign CH3_TXDATA_in[241] = (CH3_TXDATA[241] === 1'bz) || CH3_TXDATA[241]; // rv 1
  assign CH3_TXDATA_in[242] = (CH3_TXDATA[242] === 1'bz) || CH3_TXDATA[242]; // rv 1
  assign CH3_TXDATA_in[243] = (CH3_TXDATA[243] === 1'bz) || CH3_TXDATA[243]; // rv 1
  assign CH3_TXDATA_in[244] = (CH3_TXDATA[244] === 1'bz) || CH3_TXDATA[244]; // rv 1
  assign CH3_TXDATA_in[245] = (CH3_TXDATA[245] === 1'bz) || CH3_TXDATA[245]; // rv 1
  assign CH3_TXDATA_in[246] = (CH3_TXDATA[246] === 1'bz) || CH3_TXDATA[246]; // rv 1
  assign CH3_TXDATA_in[247] = (CH3_TXDATA[247] === 1'bz) || CH3_TXDATA[247]; // rv 1
  assign CH3_TXDATA_in[248] = (CH3_TXDATA[248] === 1'bz) || CH3_TXDATA[248]; // rv 1
  assign CH3_TXDATA_in[249] = (CH3_TXDATA[249] === 1'bz) || CH3_TXDATA[249]; // rv 1
  assign CH3_TXDATA_in[24] = (CH3_TXDATA[24] === 1'bz) || CH3_TXDATA[24]; // rv 1
  assign CH3_TXDATA_in[250] = (CH3_TXDATA[250] === 1'bz) || CH3_TXDATA[250]; // rv 1
  assign CH3_TXDATA_in[251] = (CH3_TXDATA[251] === 1'bz) || CH3_TXDATA[251]; // rv 1
  assign CH3_TXDATA_in[252] = (CH3_TXDATA[252] === 1'bz) || CH3_TXDATA[252]; // rv 1
  assign CH3_TXDATA_in[253] = (CH3_TXDATA[253] === 1'bz) || CH3_TXDATA[253]; // rv 1
  assign CH3_TXDATA_in[254] = (CH3_TXDATA[254] === 1'bz) || CH3_TXDATA[254]; // rv 1
  assign CH3_TXDATA_in[255] = (CH3_TXDATA[255] === 1'bz) || CH3_TXDATA[255]; // rv 1
  assign CH3_TXDATA_in[25] = (CH3_TXDATA[25] === 1'bz) || CH3_TXDATA[25]; // rv 1
  assign CH3_TXDATA_in[26] = (CH3_TXDATA[26] === 1'bz) || CH3_TXDATA[26]; // rv 1
  assign CH3_TXDATA_in[27] = (CH3_TXDATA[27] === 1'bz) || CH3_TXDATA[27]; // rv 1
  assign CH3_TXDATA_in[28] = (CH3_TXDATA[28] === 1'bz) || CH3_TXDATA[28]; // rv 1
  assign CH3_TXDATA_in[29] = (CH3_TXDATA[29] === 1'bz) || CH3_TXDATA[29]; // rv 1
  assign CH3_TXDATA_in[2] = (CH3_TXDATA[2] === 1'bz) || CH3_TXDATA[2]; // rv 1
  assign CH3_TXDATA_in[30] = (CH3_TXDATA[30] === 1'bz) || CH3_TXDATA[30]; // rv 1
  assign CH3_TXDATA_in[31] = (CH3_TXDATA[31] === 1'bz) || CH3_TXDATA[31]; // rv 1
  assign CH3_TXDATA_in[32] = (CH3_TXDATA[32] === 1'bz) || CH3_TXDATA[32]; // rv 1
  assign CH3_TXDATA_in[33] = (CH3_TXDATA[33] === 1'bz) || CH3_TXDATA[33]; // rv 1
  assign CH3_TXDATA_in[34] = (CH3_TXDATA[34] === 1'bz) || CH3_TXDATA[34]; // rv 1
  assign CH3_TXDATA_in[35] = (CH3_TXDATA[35] === 1'bz) || CH3_TXDATA[35]; // rv 1
  assign CH3_TXDATA_in[36] = (CH3_TXDATA[36] === 1'bz) || CH3_TXDATA[36]; // rv 1
  assign CH3_TXDATA_in[37] = (CH3_TXDATA[37] === 1'bz) || CH3_TXDATA[37]; // rv 1
  assign CH3_TXDATA_in[38] = (CH3_TXDATA[38] === 1'bz) || CH3_TXDATA[38]; // rv 1
  assign CH3_TXDATA_in[39] = (CH3_TXDATA[39] === 1'bz) || CH3_TXDATA[39]; // rv 1
  assign CH3_TXDATA_in[3] = (CH3_TXDATA[3] === 1'bz) || CH3_TXDATA[3]; // rv 1
  assign CH3_TXDATA_in[40] = (CH3_TXDATA[40] === 1'bz) || CH3_TXDATA[40]; // rv 1
  assign CH3_TXDATA_in[41] = (CH3_TXDATA[41] === 1'bz) || CH3_TXDATA[41]; // rv 1
  assign CH3_TXDATA_in[42] = (CH3_TXDATA[42] === 1'bz) || CH3_TXDATA[42]; // rv 1
  assign CH3_TXDATA_in[43] = (CH3_TXDATA[43] === 1'bz) || CH3_TXDATA[43]; // rv 1
  assign CH3_TXDATA_in[44] = (CH3_TXDATA[44] === 1'bz) || CH3_TXDATA[44]; // rv 1
  assign CH3_TXDATA_in[45] = (CH3_TXDATA[45] === 1'bz) || CH3_TXDATA[45]; // rv 1
  assign CH3_TXDATA_in[46] = (CH3_TXDATA[46] === 1'bz) || CH3_TXDATA[46]; // rv 1
  assign CH3_TXDATA_in[47] = (CH3_TXDATA[47] === 1'bz) || CH3_TXDATA[47]; // rv 1
  assign CH3_TXDATA_in[48] = (CH3_TXDATA[48] === 1'bz) || CH3_TXDATA[48]; // rv 1
  assign CH3_TXDATA_in[49] = (CH3_TXDATA[49] === 1'bz) || CH3_TXDATA[49]; // rv 1
  assign CH3_TXDATA_in[4] = (CH3_TXDATA[4] === 1'bz) || CH3_TXDATA[4]; // rv 1
  assign CH3_TXDATA_in[50] = (CH3_TXDATA[50] === 1'bz) || CH3_TXDATA[50]; // rv 1
  assign CH3_TXDATA_in[51] = (CH3_TXDATA[51] === 1'bz) || CH3_TXDATA[51]; // rv 1
  assign CH3_TXDATA_in[52] = (CH3_TXDATA[52] === 1'bz) || CH3_TXDATA[52]; // rv 1
  assign CH3_TXDATA_in[53] = (CH3_TXDATA[53] === 1'bz) || CH3_TXDATA[53]; // rv 1
  assign CH3_TXDATA_in[54] = (CH3_TXDATA[54] === 1'bz) || CH3_TXDATA[54]; // rv 1
  assign CH3_TXDATA_in[55] = (CH3_TXDATA[55] === 1'bz) || CH3_TXDATA[55]; // rv 1
  assign CH3_TXDATA_in[56] = (CH3_TXDATA[56] === 1'bz) || CH3_TXDATA[56]; // rv 1
  assign CH3_TXDATA_in[57] = (CH3_TXDATA[57] === 1'bz) || CH3_TXDATA[57]; // rv 1
  assign CH3_TXDATA_in[58] = (CH3_TXDATA[58] === 1'bz) || CH3_TXDATA[58]; // rv 1
  assign CH3_TXDATA_in[59] = (CH3_TXDATA[59] === 1'bz) || CH3_TXDATA[59]; // rv 1
  assign CH3_TXDATA_in[5] = (CH3_TXDATA[5] === 1'bz) || CH3_TXDATA[5]; // rv 1
  assign CH3_TXDATA_in[60] = (CH3_TXDATA[60] === 1'bz) || CH3_TXDATA[60]; // rv 1
  assign CH3_TXDATA_in[61] = (CH3_TXDATA[61] === 1'bz) || CH3_TXDATA[61]; // rv 1
  assign CH3_TXDATA_in[62] = (CH3_TXDATA[62] === 1'bz) || CH3_TXDATA[62]; // rv 1
  assign CH3_TXDATA_in[63] = (CH3_TXDATA[63] === 1'bz) || CH3_TXDATA[63]; // rv 1
  assign CH3_TXDATA_in[64] = (CH3_TXDATA[64] === 1'bz) || CH3_TXDATA[64]; // rv 1
  assign CH3_TXDATA_in[65] = (CH3_TXDATA[65] === 1'bz) || CH3_TXDATA[65]; // rv 1
  assign CH3_TXDATA_in[66] = (CH3_TXDATA[66] === 1'bz) || CH3_TXDATA[66]; // rv 1
  assign CH3_TXDATA_in[67] = (CH3_TXDATA[67] === 1'bz) || CH3_TXDATA[67]; // rv 1
  assign CH3_TXDATA_in[68] = (CH3_TXDATA[68] === 1'bz) || CH3_TXDATA[68]; // rv 1
  assign CH3_TXDATA_in[69] = (CH3_TXDATA[69] === 1'bz) || CH3_TXDATA[69]; // rv 1
  assign CH3_TXDATA_in[6] = (CH3_TXDATA[6] === 1'bz) || CH3_TXDATA[6]; // rv 1
  assign CH3_TXDATA_in[70] = (CH3_TXDATA[70] === 1'bz) || CH3_TXDATA[70]; // rv 1
  assign CH3_TXDATA_in[71] = (CH3_TXDATA[71] === 1'bz) || CH3_TXDATA[71]; // rv 1
  assign CH3_TXDATA_in[72] = (CH3_TXDATA[72] === 1'bz) || CH3_TXDATA[72]; // rv 1
  assign CH3_TXDATA_in[73] = (CH3_TXDATA[73] === 1'bz) || CH3_TXDATA[73]; // rv 1
  assign CH3_TXDATA_in[74] = (CH3_TXDATA[74] === 1'bz) || CH3_TXDATA[74]; // rv 1
  assign CH3_TXDATA_in[75] = (CH3_TXDATA[75] === 1'bz) || CH3_TXDATA[75]; // rv 1
  assign CH3_TXDATA_in[76] = (CH3_TXDATA[76] === 1'bz) || CH3_TXDATA[76]; // rv 1
  assign CH3_TXDATA_in[77] = (CH3_TXDATA[77] === 1'bz) || CH3_TXDATA[77]; // rv 1
  assign CH3_TXDATA_in[78] = (CH3_TXDATA[78] === 1'bz) || CH3_TXDATA[78]; // rv 1
  assign CH3_TXDATA_in[79] = (CH3_TXDATA[79] === 1'bz) || CH3_TXDATA[79]; // rv 1
  assign CH3_TXDATA_in[7] = (CH3_TXDATA[7] === 1'bz) || CH3_TXDATA[7]; // rv 1
  assign CH3_TXDATA_in[80] = (CH3_TXDATA[80] === 1'bz) || CH3_TXDATA[80]; // rv 1
  assign CH3_TXDATA_in[81] = (CH3_TXDATA[81] === 1'bz) || CH3_TXDATA[81]; // rv 1
  assign CH3_TXDATA_in[82] = (CH3_TXDATA[82] === 1'bz) || CH3_TXDATA[82]; // rv 1
  assign CH3_TXDATA_in[83] = (CH3_TXDATA[83] === 1'bz) || CH3_TXDATA[83]; // rv 1
  assign CH3_TXDATA_in[84] = (CH3_TXDATA[84] === 1'bz) || CH3_TXDATA[84]; // rv 1
  assign CH3_TXDATA_in[85] = (CH3_TXDATA[85] === 1'bz) || CH3_TXDATA[85]; // rv 1
  assign CH3_TXDATA_in[86] = (CH3_TXDATA[86] === 1'bz) || CH3_TXDATA[86]; // rv 1
  assign CH3_TXDATA_in[87] = (CH3_TXDATA[87] === 1'bz) || CH3_TXDATA[87]; // rv 1
  assign CH3_TXDATA_in[88] = (CH3_TXDATA[88] === 1'bz) || CH3_TXDATA[88]; // rv 1
  assign CH3_TXDATA_in[89] = (CH3_TXDATA[89] === 1'bz) || CH3_TXDATA[89]; // rv 1
  assign CH3_TXDATA_in[8] = (CH3_TXDATA[8] === 1'bz) || CH3_TXDATA[8]; // rv 1
  assign CH3_TXDATA_in[90] = (CH3_TXDATA[90] === 1'bz) || CH3_TXDATA[90]; // rv 1
  assign CH3_TXDATA_in[91] = (CH3_TXDATA[91] === 1'bz) || CH3_TXDATA[91]; // rv 1
  assign CH3_TXDATA_in[92] = (CH3_TXDATA[92] === 1'bz) || CH3_TXDATA[92]; // rv 1
  assign CH3_TXDATA_in[93] = (CH3_TXDATA[93] === 1'bz) || CH3_TXDATA[93]; // rv 1
  assign CH3_TXDATA_in[94] = (CH3_TXDATA[94] === 1'bz) || CH3_TXDATA[94]; // rv 1
  assign CH3_TXDATA_in[95] = (CH3_TXDATA[95] === 1'bz) || CH3_TXDATA[95]; // rv 1
  assign CH3_TXDATA_in[96] = (CH3_TXDATA[96] === 1'bz) || CH3_TXDATA[96]; // rv 1
  assign CH3_TXDATA_in[97] = (CH3_TXDATA[97] === 1'bz) || CH3_TXDATA[97]; // rv 1
  assign CH3_TXDATA_in[98] = (CH3_TXDATA[98] === 1'bz) || CH3_TXDATA[98]; // rv 1
  assign CH3_TXDATA_in[99] = (CH3_TXDATA[99] === 1'bz) || CH3_TXDATA[99]; // rv 1
  assign CH3_TXDATA_in[9] = (CH3_TXDATA[9] === 1'bz) || CH3_TXDATA[9]; // rv 1
  assign CH3_TXDCCDONE_M_in = CH3_TXDCCDONE_M;
  assign CH3_TXDEBUGPCSOUT_M_in = CH3_TXDEBUGPCSOUT_M;
  assign CH3_TXINHIBIT_in = (CH3_TXINHIBIT === 1'bz) || CH3_TXINHIBIT; // rv 1
  assign CH3_TXLATCLK_in = (CH3_TXLATCLK === 1'bz) || CH3_TXLATCLK; // rv 1
  assign CH3_TXMAINCURSOR_in[0] = (CH3_TXMAINCURSOR[0] === 1'bz) || CH3_TXMAINCURSOR[0]; // rv 1
  assign CH3_TXMAINCURSOR_in[1] = (CH3_TXMAINCURSOR[1] === 1'bz) || CH3_TXMAINCURSOR[1]; // rv 1
  assign CH3_TXMAINCURSOR_in[2] = (CH3_TXMAINCURSOR[2] === 1'bz) || CH3_TXMAINCURSOR[2]; // rv 1
  assign CH3_TXMAINCURSOR_in[3] = (CH3_TXMAINCURSOR[3] === 1'bz) || CH3_TXMAINCURSOR[3]; // rv 1
  assign CH3_TXMAINCURSOR_in[4] = (CH3_TXMAINCURSOR[4] === 1'bz) || CH3_TXMAINCURSOR[4]; // rv 1
  assign CH3_TXMAINCURSOR_in[5] = (CH3_TXMAINCURSOR[5] === 1'bz) || CH3_TXMAINCURSOR[5]; // rv 1
  assign CH3_TXMAINCURSOR_in[6] = (CH3_TXMAINCURSOR[6] === 1'bz) || CH3_TXMAINCURSOR[6]; // rv 1
  assign CH3_TXPCSRESETMASK_in = (CH3_TXPCSRESETMASK === 1'bz) || CH3_TXPCSRESETMASK; // rv 1
  assign CH3_TXPD_in[0] = (CH3_TXPD[0] === 1'bz) || CH3_TXPD[0]; // rv 1
  assign CH3_TXPD_in[1] = (CH3_TXPD[1] === 1'bz) || CH3_TXPD[1]; // rv 1
  assign CH3_TXPERST_in = (CH3_TXPERST === 1'bz) || CH3_TXPERST; // rv 1
  assign CH3_TXPISOPD_in = (CH3_TXPISOPD === 1'bz) || CH3_TXPISOPD; // rv 1
  assign CH3_TXPMARESETDONE_M_in = CH3_TXPMARESETDONE_M;
  assign CH3_TXPMARESETMASK_in[0] = (CH3_TXPMARESETMASK[0] === 1'bz) || CH3_TXPMARESETMASK[0]; // rv 1
  assign CH3_TXPMARESETMASK_in[1] = (CH3_TXPMARESETMASK[1] === 1'bz) || CH3_TXPMARESETMASK[1]; // rv 1
  assign CH3_TXPOLARITY_in = (CH3_TXPOLARITY === 1'bz) || CH3_TXPOLARITY; // rv 1
  assign CH3_TXPOSTCURSOR_in[0] = (CH3_TXPOSTCURSOR[0] === 1'bz) || CH3_TXPOSTCURSOR[0]; // rv 1
  assign CH3_TXPOSTCURSOR_in[1] = (CH3_TXPOSTCURSOR[1] === 1'bz) || CH3_TXPOSTCURSOR[1]; // rv 1
  assign CH3_TXPOSTCURSOR_in[2] = (CH3_TXPOSTCURSOR[2] === 1'bz) || CH3_TXPOSTCURSOR[2]; // rv 1
  assign CH3_TXPOSTCURSOR_in[3] = (CH3_TXPOSTCURSOR[3] === 1'bz) || CH3_TXPOSTCURSOR[3]; // rv 1
  assign CH3_TXPOSTCURSOR_in[4] = (CH3_TXPOSTCURSOR[4] === 1'bz) || CH3_TXPOSTCURSOR[4]; // rv 1
  assign CH3_TXPOSTCURSOR_in[5] = (CH3_TXPOSTCURSOR[5] === 1'bz) || CH3_TXPOSTCURSOR[5]; // rv 1
  assign CH3_TXPRBSFORCEERR_in = (CH3_TXPRBSFORCEERR === 1'bz) || CH3_TXPRBSFORCEERR; // rv 1
  assign CH3_TXPRBSSEL_in[0] = (CH3_TXPRBSSEL[0] === 1'bz) || CH3_TXPRBSSEL[0]; // rv 1
  assign CH3_TXPRBSSEL_in[1] = (CH3_TXPRBSSEL[1] === 1'bz) || CH3_TXPRBSSEL[1]; // rv 1
  assign CH3_TXPRBSSEL_in[2] = (CH3_TXPRBSSEL[2] === 1'bz) || CH3_TXPRBSSEL[2]; // rv 1
  assign CH3_TXPRBSSEL_in[3] = (CH3_TXPRBSSEL[3] === 1'bz) || CH3_TXPRBSSEL[3]; // rv 1
  assign CH3_TXPRECURSOR2_in[0] = (CH3_TXPRECURSOR2[0] === 1'bz) || CH3_TXPRECURSOR2[0]; // rv 1
  assign CH3_TXPRECURSOR2_in[1] = (CH3_TXPRECURSOR2[1] === 1'bz) || CH3_TXPRECURSOR2[1]; // rv 1
  assign CH3_TXPRECURSOR2_in[2] = (CH3_TXPRECURSOR2[2] === 1'bz) || CH3_TXPRECURSOR2[2]; // rv 1
  assign CH3_TXPRECURSOR2_in[3] = (CH3_TXPRECURSOR2[3] === 1'bz) || CH3_TXPRECURSOR2[3]; // rv 1
  assign CH3_TXPRECURSOR2_in[4] = (CH3_TXPRECURSOR2[4] === 1'bz) || CH3_TXPRECURSOR2[4]; // rv 1
  assign CH3_TXPRECURSOR2_in[5] = (CH3_TXPRECURSOR2[5] === 1'bz) || CH3_TXPRECURSOR2[5]; // rv 1
  assign CH3_TXPRECURSOR3_in[0] = (CH3_TXPRECURSOR3[0] === 1'bz) || CH3_TXPRECURSOR3[0]; // rv 1
  assign CH3_TXPRECURSOR3_in[1] = (CH3_TXPRECURSOR3[1] === 1'bz) || CH3_TXPRECURSOR3[1]; // rv 1
  assign CH3_TXPRECURSOR3_in[2] = (CH3_TXPRECURSOR3[2] === 1'bz) || CH3_TXPRECURSOR3[2]; // rv 1
  assign CH3_TXPRECURSOR3_in[3] = (CH3_TXPRECURSOR3[3] === 1'bz) || CH3_TXPRECURSOR3[3]; // rv 1
  assign CH3_TXPRECURSOR3_in[4] = (CH3_TXPRECURSOR3[4] === 1'bz) || CH3_TXPRECURSOR3[4]; // rv 1
  assign CH3_TXPRECURSOR3_in[5] = (CH3_TXPRECURSOR3[5] === 1'bz) || CH3_TXPRECURSOR3[5]; // rv 1
  assign CH3_TXPRECURSOR_in[0] = (CH3_TXPRECURSOR[0] === 1'bz) || CH3_TXPRECURSOR[0]; // rv 1
  assign CH3_TXPRECURSOR_in[1] = (CH3_TXPRECURSOR[1] === 1'bz) || CH3_TXPRECURSOR[1]; // rv 1
  assign CH3_TXPRECURSOR_in[2] = (CH3_TXPRECURSOR[2] === 1'bz) || CH3_TXPRECURSOR[2]; // rv 1
  assign CH3_TXPRECURSOR_in[3] = (CH3_TXPRECURSOR[3] === 1'bz) || CH3_TXPRECURSOR[3]; // rv 1
  assign CH3_TXPRECURSOR_in[4] = (CH3_TXPRECURSOR[4] === 1'bz) || CH3_TXPRECURSOR[4]; // rv 1
  assign CH3_TXPRECURSOR_in[5] = (CH3_TXPRECURSOR[5] === 1'bz) || CH3_TXPRECURSOR[5]; // rv 1
  assign CH3_TXPROGDIVRESETDONE_M_in = CH3_TXPROGDIVRESETDONE_M;
  assign CH3_TXPROGDIVRESET_in = (CH3_TXPROGDIVRESET === 1'bz) || CH3_TXPROGDIVRESET; // rv 1
  assign CH3_TXQPRBSEN_in = (CH3_TXQPRBSEN === 1'bz) || CH3_TXQPRBSEN; // rv 1
  assign CH3_TXRATE_in[0] = (CH3_TXRATE[0] === 1'bz) || CH3_TXRATE[0]; // rv 1
  assign CH3_TXRATE_in[1] = (CH3_TXRATE[1] === 1'bz) || CH3_TXRATE[1]; // rv 1
  assign CH3_TXRATE_in[2] = (CH3_TXRATE[2] === 1'bz) || CH3_TXRATE[2]; // rv 1
  assign CH3_TXRATE_in[3] = (CH3_TXRATE[3] === 1'bz) || CH3_TXRATE[3]; // rv 1
  assign CH3_TXRATE_in[4] = (CH3_TXRATE[4] === 1'bz) || CH3_TXRATE[4]; // rv 1
  assign CH3_TXRATE_in[5] = (CH3_TXRATE[5] === 1'bz) || CH3_TXRATE[5]; // rv 1
  assign CH3_TXRATE_in[6] = (CH3_TXRATE[6] === 1'bz) || CH3_TXRATE[6]; // rv 1
  assign CH3_TXRATE_in[7] = (CH3_TXRATE[7] === 1'bz) || CH3_TXRATE[7]; // rv 1
  assign CH3_TXRESETDONE_M_in = CH3_TXRESETDONE_M;
  assign CH3_TXRESETMODE_in[0] = (CH3_TXRESETMODE[0] === 1'bz) || CH3_TXRESETMODE[0]; // rv 1
  assign CH3_TXRESETMODE_in[1] = (CH3_TXRESETMODE[1] === 1'bz) || CH3_TXRESETMODE[1]; // rv 1
  assign CH3_TXRSV0_in[0] = (CH3_TXRSV0[0] === 1'bz) || CH3_TXRSV0[0]; // rv 1
  assign CH3_TXRSV0_in[1] = (CH3_TXRSV0[1] === 1'bz) || CH3_TXRSV0[1]; // rv 1
  assign CH3_TXRSV0_in[2] = (CH3_TXRSV0[2] === 1'bz) || CH3_TXRSV0[2]; // rv 1
  assign CH3_TXRSV0_in[3] = (CH3_TXRSV0[3] === 1'bz) || CH3_TXRSV0[3]; // rv 1
  assign CH3_TXRSV0_in[4] = (CH3_TXRSV0[4] === 1'bz) || CH3_TXRSV0[4]; // rv 1
  assign CH3_TXRSV1_in[0] = (CH3_TXRSV1[0] === 1'bz) || CH3_TXRSV1[0]; // rv 1
  assign CH3_TXRSV1_in[1] = (CH3_TXRSV1[1] === 1'bz) || CH3_TXRSV1[1]; // rv 1
  assign CH3_TXRSV1_in[2] = (CH3_TXRSV1[2] === 1'bz) || CH3_TXRSV1[2]; // rv 1
  assign CH3_TXRSV1_in[3] = (CH3_TXRSV1[3] === 1'bz) || CH3_TXRSV1[3]; // rv 1
  assign CH3_TXUSERRDY_in = (CH3_TXUSERRDY === 1'bz) || CH3_TXUSERRDY; // rv 1
  assign CH3_TXUSRCLK_in = (CH3_TXUSRCLK === 1'bz) || CH3_TXUSRCLK; // rv 1
  assign COESTATUSDEBUG_in = (COESTATUSDEBUG === 1'bz) || COESTATUSDEBUG; // rv 1
  assign CORRECTERR_M_in = CORRECTERR_M;
  assign CTRLRSVDIN_in[0] = (CTRLRSVDIN[0] === 1'bz) || CTRLRSVDIN[0]; // rv 1
  assign CTRLRSVDIN_in[1] = (CTRLRSVDIN[1] === 1'bz) || CTRLRSVDIN[1]; // rv 1
  assign CTRLRSVDIN_in[2] = (CTRLRSVDIN[2] === 1'bz) || CTRLRSVDIN[2]; // rv 1
  assign CTRLRSVDIN_in[3] = (CTRLRSVDIN[3] === 1'bz) || CTRLRSVDIN[3]; // rv 1
  assign CTRLRSVDIN_in[4] = (CTRLRSVDIN[4] === 1'bz) || CTRLRSVDIN[4]; // rv 1
  assign CTRLRSVDIN_in[5] = (CTRLRSVDIN[5] === 1'bz) || CTRLRSVDIN[5]; // rv 1
  assign CTRLRSVDIN_in[6] = (CTRLRSVDIN[6] === 1'bz) || CTRLRSVDIN[6]; // rv 1
  assign CTRLRSVDIN_in[7] = (CTRLRSVDIN[7] === 1'bz) || CTRLRSVDIN[7]; // rv 1
  assign CTRLRSVDOUT_M_in = CTRLRSVDOUT_M;
  assign DEBUGTRACECLK_in = (DEBUGTRACECLK === 1'bz) || DEBUGTRACECLK; // rv 1
  assign DEBUGTRACEREADY_in = (DEBUGTRACEREADY === 1'bz) || DEBUGTRACEREADY; // rv 1
  assign DEBUGTRACETDATA_M_in = DEBUGTRACETDATA_M;
  assign DEBUGTRACETVALID_M_in = DEBUGTRACETVALID_M;
  assign GPI_in[0] = (GPI[0] === 1'bz) || GPI[0]; // rv 1
  assign GPI_in[10] = (GPI[10] === 1'bz) || GPI[10]; // rv 1
  assign GPI_in[11] = (GPI[11] === 1'bz) || GPI[11]; // rv 1
  assign GPI_in[12] = (GPI[12] === 1'bz) || GPI[12]; // rv 1
  assign GPI_in[13] = (GPI[13] === 1'bz) || GPI[13]; // rv 1
  assign GPI_in[14] = (GPI[14] === 1'bz) || GPI[14]; // rv 1
  assign GPI_in[15] = (GPI[15] === 1'bz) || GPI[15]; // rv 1
  assign GPI_in[16] = (GPI[16] === 1'bz) || GPI[16]; // rv 1
  assign GPI_in[17] = (GPI[17] === 1'bz) || GPI[17]; // rv 1
  assign GPI_in[18] = (GPI[18] === 1'bz) || GPI[18]; // rv 1
  assign GPI_in[19] = (GPI[19] === 1'bz) || GPI[19]; // rv 1
  assign GPI_in[1] = (GPI[1] === 1'bz) || GPI[1]; // rv 1
  assign GPI_in[20] = (GPI[20] === 1'bz) || GPI[20]; // rv 1
  assign GPI_in[21] = (GPI[21] === 1'bz) || GPI[21]; // rv 1
  assign GPI_in[22] = (GPI[22] === 1'bz) || GPI[22]; // rv 1
  assign GPI_in[23] = (GPI[23] === 1'bz) || GPI[23]; // rv 1
  assign GPI_in[24] = (GPI[24] === 1'bz) || GPI[24]; // rv 1
  assign GPI_in[25] = (GPI[25] === 1'bz) || GPI[25]; // rv 1
  assign GPI_in[26] = (GPI[26] === 1'bz) || GPI[26]; // rv 1
  assign GPI_in[27] = (GPI[27] === 1'bz) || GPI[27]; // rv 1
  assign GPI_in[28] = (GPI[28] === 1'bz) || GPI[28]; // rv 1
  assign GPI_in[29] = (GPI[29] === 1'bz) || GPI[29]; // rv 1
  assign GPI_in[2] = (GPI[2] === 1'bz) || GPI[2]; // rv 1
  assign GPI_in[30] = (GPI[30] === 1'bz) || GPI[30]; // rv 1
  assign GPI_in[31] = (GPI[31] === 1'bz) || GPI[31]; // rv 1
  assign GPI_in[3] = (GPI[3] === 1'bz) || GPI[3]; // rv 1
  assign GPI_in[4] = (GPI[4] === 1'bz) || GPI[4]; // rv 1
  assign GPI_in[5] = (GPI[5] === 1'bz) || GPI[5]; // rv 1
  assign GPI_in[6] = (GPI[6] === 1'bz) || GPI[6]; // rv 1
  assign GPI_in[7] = (GPI[7] === 1'bz) || GPI[7]; // rv 1
  assign GPI_in[8] = (GPI[8] === 1'bz) || GPI[8]; // rv 1
  assign GPI_in[9] = (GPI[9] === 1'bz) || GPI[9]; // rv 1
  assign GPO_M_in = GPO_M;
  assign GTPOWERGOOD_M_in = GTPOWERGOOD_M;
  assign HNICPIPE_ANLT_HNICX_STATUS_0_M_in = HNICPIPE_ANLT_HNICX_STATUS_0_M;
  assign HNICPIPE_ANLT_HNICX_STATUS_1_M_in = HNICPIPE_ANLT_HNICX_STATUS_1_M;
  assign HNICPIPE_ANLT_HNICX_STATUS_2_M_in = HNICPIPE_ANLT_HNICX_STATUS_2_M;
  assign HNICPIPE_ANLT_HNICX_STATUS_3_M_in = HNICPIPE_ANLT_HNICX_STATUS_3_M;
  assign HNICPIPE_FEC_ALIGNED_0_in = HNICPIPE_FEC_ALIGNED_0;
  assign HNICPIPE_FEC_ALIGNED_1_in = HNICPIPE_FEC_ALIGNED_1;
  assign HNICPIPE_FEC_ALIGNED_2_in = HNICPIPE_FEC_ALIGNED_2;
  assign HNICPIPE_FEC_ALIGNED_3_in = HNICPIPE_FEC_ALIGNED_3;
  assign HNICPIPE_FEC_LANE_LOCK_0_in = HNICPIPE_FEC_LANE_LOCK_0;
  assign HNICPIPE_FEC_LANE_LOCK_1_in = HNICPIPE_FEC_LANE_LOCK_1;
  assign HNICPIPE_FEC_LANE_LOCK_2_in = HNICPIPE_FEC_LANE_LOCK_2;
  assign HNICPIPE_FEC_LANE_LOCK_3_in = HNICPIPE_FEC_LANE_LOCK_3;
  assign HNICPIPE_GT_RX_SERDES_CLK_GOOD_IN_in = HNICPIPE_GT_RX_SERDES_CLK_GOOD_IN;
  assign HNICPIPE_GT_TX_SERDES_CLK_GOOD_IN_in = HNICPIPE_GT_TX_SERDES_CLK_GOOD_IN;
  assign HNICPIPE_HNICMAC_TXDATA0_in = HNICPIPE_HNICMAC_TXDATA0;
  assign HNICPIPE_HNICMAC_TXDATA1_in = HNICPIPE_HNICMAC_TXDATA1;
  assign HNICPIPE_HNICMAC_TXDATA2_in = HNICPIPE_HNICMAC_TXDATA2;
  assign HNICPIPE_HNICMAC_TXDATA3_in = HNICPIPE_HNICMAC_TXDATA3;
  assign HNICPIPE_HNICMAC_TXDATA4_in = HNICPIPE_HNICMAC_TXDATA4;
  assign HNICPIPE_HNICMAC_TXDATA5_in = HNICPIPE_HNICMAC_TXDATA5;
  assign HNICPIPE_HNICMAC_TXDATA6_in = HNICPIPE_HNICMAC_TXDATA6;
  assign HNICPIPE_HNICMAC_TXDATA7_in = HNICPIPE_HNICMAC_TXDATA7;
  assign HNICPIPE_MAC_PHY_STATUS_OK_0_in = HNICPIPE_MAC_PHY_STATUS_OK_0;
  assign HNICPIPE_MAC_PHY_STATUS_OK_1_in = HNICPIPE_MAC_PHY_STATUS_OK_1;
  assign HNICPIPE_MAC_PHY_STATUS_OK_2_in = HNICPIPE_MAC_PHY_STATUS_OK_2;
  assign HNICPIPE_MAC_PHY_STATUS_OK_3_in = HNICPIPE_MAC_PHY_STATUS_OK_3;
  assign HNICPIPE_NORTH_BOT_RXOUTCLK_in = HNICPIPE_NORTH_BOT_RXOUTCLK;
  assign HNICPIPE_NORTH_BOT_TXOUTCLK_in = HNICPIPE_NORTH_BOT_TXOUTCLK;
  assign HNICPIPE_NORTH_TOP_RXOUTCLK_in = HNICPIPE_NORTH_TOP_RXOUTCLK;
  assign HNICPIPE_NORTH_TOP_TXOUTCLK_in = HNICPIPE_NORTH_TOP_TXOUTCLK;
  assign HNICPIPE_RSFEC_CORRECTED_CWB_INC_0_in = HNICPIPE_RSFEC_CORRECTED_CWB_INC_0;
  assign HNICPIPE_RSFEC_CORRECTED_CWB_INC_1_in = HNICPIPE_RSFEC_CORRECTED_CWB_INC_1;
  assign HNICPIPE_RSFEC_CORRECTED_CWB_INC_2_in = HNICPIPE_RSFEC_CORRECTED_CWB_INC_2;
  assign HNICPIPE_RSFEC_CORRECTED_CWB_INC_3_in = HNICPIPE_RSFEC_CORRECTED_CWB_INC_3;
  assign HNICPIPE_RSFEC_CORRECTED_CW_INC_0_in = HNICPIPE_RSFEC_CORRECTED_CW_INC_0;
  assign HNICPIPE_RSFEC_CORRECTED_CW_INC_1_in = HNICPIPE_RSFEC_CORRECTED_CW_INC_1;
  assign HNICPIPE_RSFEC_CORRECTED_CW_INC_2_in = HNICPIPE_RSFEC_CORRECTED_CW_INC_2;
  assign HNICPIPE_RSFEC_CORRECTED_CW_INC_3_in = HNICPIPE_RSFEC_CORRECTED_CW_INC_3;
  assign HNICPIPE_RSFEC_CWA_ERR_CNT_INC_0_in = HNICPIPE_RSFEC_CWA_ERR_CNT_INC_0;
  assign HNICPIPE_RSFEC_CWA_ERR_CNT_INC_1_in = HNICPIPE_RSFEC_CWA_ERR_CNT_INC_1;
  assign HNICPIPE_RSFEC_CWA_ERR_CNT_INC_2_in = HNICPIPE_RSFEC_CWA_ERR_CNT_INC_2;
  assign HNICPIPE_RSFEC_CWA_ERR_CNT_INC_3_in = HNICPIPE_RSFEC_CWA_ERR_CNT_INC_3;
  assign HNICPIPE_RSFEC_CWB_ERR_CNT_INC_0_in = HNICPIPE_RSFEC_CWB_ERR_CNT_INC_0;
  assign HNICPIPE_RSFEC_CWB_ERR_CNT_INC_1_in = HNICPIPE_RSFEC_CWB_ERR_CNT_INC_1;
  assign HNICPIPE_RSFEC_CWB_ERR_CNT_INC_2_in = HNICPIPE_RSFEC_CWB_ERR_CNT_INC_2;
  assign HNICPIPE_RSFEC_CWB_ERR_CNT_INC_3_in = HNICPIPE_RSFEC_CWB_ERR_CNT_INC_3;
  assign HNICPIPE_RSFEC_CWB_INC_0_in = HNICPIPE_RSFEC_CWB_INC_0;
  assign HNICPIPE_RSFEC_CWB_INC_1_in = HNICPIPE_RSFEC_CWB_INC_1;
  assign HNICPIPE_RSFEC_CWB_INC_2_in = HNICPIPE_RSFEC_CWB_INC_2;
  assign HNICPIPE_RSFEC_CWB_INC_3_in = HNICPIPE_RSFEC_CWB_INC_3;
  assign HNICPIPE_RSFEC_CW_INC_0_in = HNICPIPE_RSFEC_CW_INC_0;
  assign HNICPIPE_RSFEC_CW_INC_1_in = HNICPIPE_RSFEC_CW_INC_1;
  assign HNICPIPE_RSFEC_CW_INC_2_in = HNICPIPE_RSFEC_CW_INC_2;
  assign HNICPIPE_RSFEC_CW_INC_3_in = HNICPIPE_RSFEC_CW_INC_3;
  assign HNICPIPE_RSFEC_L0_ERR_CNT_INC_0_in = HNICPIPE_RSFEC_L0_ERR_CNT_INC_0;
  assign HNICPIPE_RSFEC_L0_ERR_CNT_INC_1_in = HNICPIPE_RSFEC_L0_ERR_CNT_INC_1;
  assign HNICPIPE_RSFEC_L0_ERR_CNT_INC_2_in = HNICPIPE_RSFEC_L0_ERR_CNT_INC_2;
  assign HNICPIPE_RSFEC_L0_ERR_CNT_INC_3_in = HNICPIPE_RSFEC_L0_ERR_CNT_INC_3;
  assign HNICPIPE_RSFEC_L1_ERR_CNT_INC_0_in = HNICPIPE_RSFEC_L1_ERR_CNT_INC_0;
  assign HNICPIPE_RSFEC_L1_ERR_CNT_INC_1_in = HNICPIPE_RSFEC_L1_ERR_CNT_INC_1;
  assign HNICPIPE_RSFEC_L1_ERR_CNT_INC_2_in = HNICPIPE_RSFEC_L1_ERR_CNT_INC_2;
  assign HNICPIPE_RSFEC_L1_ERR_CNT_INC_3_in = HNICPIPE_RSFEC_L1_ERR_CNT_INC_3;
  assign HNICPIPE_RSFEC_L2_ERR_CNT_INC_0_in = HNICPIPE_RSFEC_L2_ERR_CNT_INC_0;
  assign HNICPIPE_RSFEC_L2_ERR_CNT_INC_1_in = HNICPIPE_RSFEC_L2_ERR_CNT_INC_1;
  assign HNICPIPE_RSFEC_L2_ERR_CNT_INC_2_in = HNICPIPE_RSFEC_L2_ERR_CNT_INC_2;
  assign HNICPIPE_RSFEC_L2_ERR_CNT_INC_3_in = HNICPIPE_RSFEC_L2_ERR_CNT_INC_3;
  assign HNICPIPE_RSFEC_L3_ERR_CNT_INC_0_in = HNICPIPE_RSFEC_L3_ERR_CNT_INC_0;
  assign HNICPIPE_RSFEC_L3_ERR_CNT_INC_1_in = HNICPIPE_RSFEC_L3_ERR_CNT_INC_1;
  assign HNICPIPE_RSFEC_L3_ERR_CNT_INC_2_in = HNICPIPE_RSFEC_L3_ERR_CNT_INC_2;
  assign HNICPIPE_RSFEC_L3_ERR_CNT_INC_3_in = HNICPIPE_RSFEC_L3_ERR_CNT_INC_3;
  assign HNICPIPE_RSFEC_MAPPING_0_in = HNICPIPE_RSFEC_MAPPING_0;
  assign HNICPIPE_RSFEC_MAPPING_1_in = HNICPIPE_RSFEC_MAPPING_1;
  assign HNICPIPE_RSFEC_MAPPING_2_in = HNICPIPE_RSFEC_MAPPING_2;
  assign HNICPIPE_RSFEC_MAPPING_3_in = HNICPIPE_RSFEC_MAPPING_3;
  assign HNICPIPE_RSFEC_UNCORRECTED_CWB_INC_0_in = HNICPIPE_RSFEC_UNCORRECTED_CWB_INC_0;
  assign HNICPIPE_RSFEC_UNCORRECTED_CWB_INC_1_in = HNICPIPE_RSFEC_UNCORRECTED_CWB_INC_1;
  assign HNICPIPE_RSFEC_UNCORRECTED_CWB_INC_2_in = HNICPIPE_RSFEC_UNCORRECTED_CWB_INC_2;
  assign HNICPIPE_RSFEC_UNCORRECTED_CWB_INC_3_in = HNICPIPE_RSFEC_UNCORRECTED_CWB_INC_3;
  assign HNICPIPE_RSFEC_UNCORRECTED_CW_INC_0_in = HNICPIPE_RSFEC_UNCORRECTED_CW_INC_0;
  assign HNICPIPE_RSFEC_UNCORRECTED_CW_INC_1_in = HNICPIPE_RSFEC_UNCORRECTED_CW_INC_1;
  assign HNICPIPE_RSFEC_UNCORRECTED_CW_INC_2_in = HNICPIPE_RSFEC_UNCORRECTED_CW_INC_2;
  assign HNICPIPE_RSFEC_UNCORRECTED_CW_INC_3_in = HNICPIPE_RSFEC_UNCORRECTED_CW_INC_3;
  assign HNICPIPE_RXDATA_BOT2TOP0_in = HNICPIPE_RXDATA_BOT2TOP0;
  assign HNICPIPE_RXDATA_BOT2TOP1_in = HNICPIPE_RXDATA_BOT2TOP1;
  assign HNICPIPE_RXDATA_BOT2TOP2_in = HNICPIPE_RXDATA_BOT2TOP2;
  assign HNICPIPE_RXDATA_BOT2TOP3_in = HNICPIPE_RXDATA_BOT2TOP3;
  assign HNICPIPE_RXUSRCLK_BOT2TOP_IN_in = HNICPIPE_RXUSRCLK_BOT2TOP_IN;
  assign HNICPIPE_RX_RST_BOT2TOP_IN_in = HNICPIPE_RX_RST_BOT2TOP_IN;
  assign HNICPIPE_SOUTH_BOT_RXOUTCLK_in = HNICPIPE_SOUTH_BOT_RXOUTCLK;
  assign HNICPIPE_SOUTH_BOT_TXOUTCLK_in = HNICPIPE_SOUTH_BOT_TXOUTCLK;
  assign HNICPIPE_SOUTH_TOP_RXOUTCLK_in = HNICPIPE_SOUTH_TOP_RXOUTCLK;
  assign HNICPIPE_SOUTH_TOP_TXOUTCLK_in = HNICPIPE_SOUTH_TOP_TXOUTCLK;
  assign HNICPIPE_TXUSRCLK_BOT2TOP_IN_in = HNICPIPE_TXUSRCLK_BOT2TOP_IN;
  assign HNICPIPE_TX_RST_BOT2TOP_IN_in = HNICPIPE_TX_RST_BOT2TOP_IN;
  assign HNICPIPE_UBLAZE_ACK_0_M_in = HNICPIPE_UBLAZE_ACK_0_M;
  assign HNICPIPE_UBLAZE_ACK_1_M_in = HNICPIPE_UBLAZE_ACK_1_M;
  assign HNICPIPE_UBLAZE_DATA_0_in = HNICPIPE_UBLAZE_DATA_0;
  assign HNICPIPE_UBLAZE_DATA_1_in = HNICPIPE_UBLAZE_DATA_1;
  assign HNICPIPE_UBLAZE_DEN_0_in = HNICPIPE_UBLAZE_DEN_0;
  assign HNICPIPE_UBLAZE_DEN_1_in = HNICPIPE_UBLAZE_DEN_1;
  assign HSCLK0_LCPLLFBCLKLOST_M_in = HSCLK0_LCPLLFBCLKLOST_M;
  assign HSCLK0_LCPLLFBDIV_in[0] = (HSCLK0_LCPLLFBDIV[0] === 1'bz) || HSCLK0_LCPLLFBDIV[0]; // rv 1
  assign HSCLK0_LCPLLFBDIV_in[1] = (HSCLK0_LCPLLFBDIV[1] === 1'bz) || HSCLK0_LCPLLFBDIV[1]; // rv 1
  assign HSCLK0_LCPLLFBDIV_in[2] = (HSCLK0_LCPLLFBDIV[2] === 1'bz) || HSCLK0_LCPLLFBDIV[2]; // rv 1
  assign HSCLK0_LCPLLFBDIV_in[3] = (HSCLK0_LCPLLFBDIV[3] === 1'bz) || HSCLK0_LCPLLFBDIV[3]; // rv 1
  assign HSCLK0_LCPLLFBDIV_in[4] = (HSCLK0_LCPLLFBDIV[4] === 1'bz) || HSCLK0_LCPLLFBDIV[4]; // rv 1
  assign HSCLK0_LCPLLFBDIV_in[5] = (HSCLK0_LCPLLFBDIV[5] === 1'bz) || HSCLK0_LCPLLFBDIV[5]; // rv 1
  assign HSCLK0_LCPLLFBDIV_in[6] = (HSCLK0_LCPLLFBDIV[6] === 1'bz) || HSCLK0_LCPLLFBDIV[6]; // rv 1
  assign HSCLK0_LCPLLFBDIV_in[7] = (HSCLK0_LCPLLFBDIV[7] === 1'bz) || HSCLK0_LCPLLFBDIV[7]; // rv 1
  assign HSCLK0_LCPLLGTGREFCLK_in = HSCLK0_LCPLLGTGREFCLK;
  assign HSCLK0_LCPLLLOCK_M_in = HSCLK0_LCPLLLOCK_M;
  assign HSCLK0_LCPLLPD_in = (HSCLK0_LCPLLPD === 1'bz) || HSCLK0_LCPLLPD; // rv 1
  assign HSCLK0_LCPLLREFCLKLOST_M_in = HSCLK0_LCPLLREFCLKLOST_M;
  assign HSCLK0_LCPLLREFCLKMONITOR_M_in = HSCLK0_LCPLLREFCLKMONITOR_M;
  assign HSCLK0_LCPLLREFCLKSEL_in[0] = (HSCLK0_LCPLLREFCLKSEL[0] === 1'bz) || HSCLK0_LCPLLREFCLKSEL[0]; // rv 1
  assign HSCLK0_LCPLLREFCLKSEL_in[1] = (HSCLK0_LCPLLREFCLKSEL[1] === 1'bz) || HSCLK0_LCPLLREFCLKSEL[1]; // rv 1
  assign HSCLK0_LCPLLREFCLKSEL_in[2] = (HSCLK0_LCPLLREFCLKSEL[2] === 1'bz) || HSCLK0_LCPLLREFCLKSEL[2]; // rv 1
  assign HSCLK0_LCPLLRESETBYPASSMODE_in = (HSCLK0_LCPLLRESETBYPASSMODE === 1'bz) || HSCLK0_LCPLLRESETBYPASSMODE; // rv 1
  assign HSCLK0_LCPLLRESETMASK_in[0] = (HSCLK0_LCPLLRESETMASK[0] === 1'bz) || HSCLK0_LCPLLRESETMASK[0]; // rv 1
  assign HSCLK0_LCPLLRESETMASK_in[1] = (HSCLK0_LCPLLRESETMASK[1] === 1'bz) || HSCLK0_LCPLLRESETMASK[1]; // rv 1
  assign HSCLK0_LCPLLRESET_in = (HSCLK0_LCPLLRESET === 1'bz) || HSCLK0_LCPLLRESET; // rv 1
  assign HSCLK0_LCPLLSDMDATA_in[0] = (HSCLK0_LCPLLSDMDATA[0] === 1'bz) || HSCLK0_LCPLLSDMDATA[0]; // rv 1
  assign HSCLK0_LCPLLSDMDATA_in[10] = (HSCLK0_LCPLLSDMDATA[10] === 1'bz) || HSCLK0_LCPLLSDMDATA[10]; // rv 1
  assign HSCLK0_LCPLLSDMDATA_in[11] = (HSCLK0_LCPLLSDMDATA[11] === 1'bz) || HSCLK0_LCPLLSDMDATA[11]; // rv 1
  assign HSCLK0_LCPLLSDMDATA_in[12] = (HSCLK0_LCPLLSDMDATA[12] === 1'bz) || HSCLK0_LCPLLSDMDATA[12]; // rv 1
  assign HSCLK0_LCPLLSDMDATA_in[13] = (HSCLK0_LCPLLSDMDATA[13] === 1'bz) || HSCLK0_LCPLLSDMDATA[13]; // rv 1
  assign HSCLK0_LCPLLSDMDATA_in[14] = (HSCLK0_LCPLLSDMDATA[14] === 1'bz) || HSCLK0_LCPLLSDMDATA[14]; // rv 1
  assign HSCLK0_LCPLLSDMDATA_in[15] = (HSCLK0_LCPLLSDMDATA[15] === 1'bz) || HSCLK0_LCPLLSDMDATA[15]; // rv 1
  assign HSCLK0_LCPLLSDMDATA_in[16] = (HSCLK0_LCPLLSDMDATA[16] === 1'bz) || HSCLK0_LCPLLSDMDATA[16]; // rv 1
  assign HSCLK0_LCPLLSDMDATA_in[17] = (HSCLK0_LCPLLSDMDATA[17] === 1'bz) || HSCLK0_LCPLLSDMDATA[17]; // rv 1
  assign HSCLK0_LCPLLSDMDATA_in[18] = (HSCLK0_LCPLLSDMDATA[18] === 1'bz) || HSCLK0_LCPLLSDMDATA[18]; // rv 1
  assign HSCLK0_LCPLLSDMDATA_in[19] = (HSCLK0_LCPLLSDMDATA[19] === 1'bz) || HSCLK0_LCPLLSDMDATA[19]; // rv 1
  assign HSCLK0_LCPLLSDMDATA_in[1] = (HSCLK0_LCPLLSDMDATA[1] === 1'bz) || HSCLK0_LCPLLSDMDATA[1]; // rv 1
  assign HSCLK0_LCPLLSDMDATA_in[20] = (HSCLK0_LCPLLSDMDATA[20] === 1'bz) || HSCLK0_LCPLLSDMDATA[20]; // rv 1
  assign HSCLK0_LCPLLSDMDATA_in[21] = (HSCLK0_LCPLLSDMDATA[21] === 1'bz) || HSCLK0_LCPLLSDMDATA[21]; // rv 1
  assign HSCLK0_LCPLLSDMDATA_in[22] = (HSCLK0_LCPLLSDMDATA[22] === 1'bz) || HSCLK0_LCPLLSDMDATA[22]; // rv 1
  assign HSCLK0_LCPLLSDMDATA_in[23] = (HSCLK0_LCPLLSDMDATA[23] === 1'bz) || HSCLK0_LCPLLSDMDATA[23]; // rv 1
  assign HSCLK0_LCPLLSDMDATA_in[24] = (HSCLK0_LCPLLSDMDATA[24] === 1'bz) || HSCLK0_LCPLLSDMDATA[24]; // rv 1
  assign HSCLK0_LCPLLSDMDATA_in[25] = (HSCLK0_LCPLLSDMDATA[25] === 1'bz) || HSCLK0_LCPLLSDMDATA[25]; // rv 1
  assign HSCLK0_LCPLLSDMDATA_in[2] = (HSCLK0_LCPLLSDMDATA[2] === 1'bz) || HSCLK0_LCPLLSDMDATA[2]; // rv 1
  assign HSCLK0_LCPLLSDMDATA_in[3] = (HSCLK0_LCPLLSDMDATA[3] === 1'bz) || HSCLK0_LCPLLSDMDATA[3]; // rv 1
  assign HSCLK0_LCPLLSDMDATA_in[4] = (HSCLK0_LCPLLSDMDATA[4] === 1'bz) || HSCLK0_LCPLLSDMDATA[4]; // rv 1
  assign HSCLK0_LCPLLSDMDATA_in[5] = (HSCLK0_LCPLLSDMDATA[5] === 1'bz) || HSCLK0_LCPLLSDMDATA[5]; // rv 1
  assign HSCLK0_LCPLLSDMDATA_in[6] = (HSCLK0_LCPLLSDMDATA[6] === 1'bz) || HSCLK0_LCPLLSDMDATA[6]; // rv 1
  assign HSCLK0_LCPLLSDMDATA_in[7] = (HSCLK0_LCPLLSDMDATA[7] === 1'bz) || HSCLK0_LCPLLSDMDATA[7]; // rv 1
  assign HSCLK0_LCPLLSDMDATA_in[8] = (HSCLK0_LCPLLSDMDATA[8] === 1'bz) || HSCLK0_LCPLLSDMDATA[8]; // rv 1
  assign HSCLK0_LCPLLSDMDATA_in[9] = (HSCLK0_LCPLLSDMDATA[9] === 1'bz) || HSCLK0_LCPLLSDMDATA[9]; // rv 1
  assign HSCLK0_LCPLLSDMTOGGLE_in = (HSCLK0_LCPLLSDMTOGGLE === 1'bz) || HSCLK0_LCPLLSDMTOGGLE; // rv 1
  assign HSCLK1_LCPLLFBCLKLOST_M_in = HSCLK1_LCPLLFBCLKLOST_M;
  assign HSCLK1_LCPLLFBDIV_in[0] = (HSCLK1_LCPLLFBDIV[0] === 1'bz) || HSCLK1_LCPLLFBDIV[0]; // rv 1
  assign HSCLK1_LCPLLFBDIV_in[1] = (HSCLK1_LCPLLFBDIV[1] === 1'bz) || HSCLK1_LCPLLFBDIV[1]; // rv 1
  assign HSCLK1_LCPLLFBDIV_in[2] = (HSCLK1_LCPLLFBDIV[2] === 1'bz) || HSCLK1_LCPLLFBDIV[2]; // rv 1
  assign HSCLK1_LCPLLFBDIV_in[3] = (HSCLK1_LCPLLFBDIV[3] === 1'bz) || HSCLK1_LCPLLFBDIV[3]; // rv 1
  assign HSCLK1_LCPLLFBDIV_in[4] = (HSCLK1_LCPLLFBDIV[4] === 1'bz) || HSCLK1_LCPLLFBDIV[4]; // rv 1
  assign HSCLK1_LCPLLFBDIV_in[5] = (HSCLK1_LCPLLFBDIV[5] === 1'bz) || HSCLK1_LCPLLFBDIV[5]; // rv 1
  assign HSCLK1_LCPLLFBDIV_in[6] = (HSCLK1_LCPLLFBDIV[6] === 1'bz) || HSCLK1_LCPLLFBDIV[6]; // rv 1
  assign HSCLK1_LCPLLFBDIV_in[7] = (HSCLK1_LCPLLFBDIV[7] === 1'bz) || HSCLK1_LCPLLFBDIV[7]; // rv 1
  assign HSCLK1_LCPLLGTGREFCLK_in = HSCLK1_LCPLLGTGREFCLK;
  assign HSCLK1_LCPLLLOCK_M_in = HSCLK1_LCPLLLOCK_M;
  assign HSCLK1_LCPLLPD_in = (HSCLK1_LCPLLPD === 1'bz) || HSCLK1_LCPLLPD; // rv 1
  assign HSCLK1_LCPLLREFCLKLOST_M_in = HSCLK1_LCPLLREFCLKLOST_M;
  assign HSCLK1_LCPLLREFCLKMONITOR_M_in = HSCLK1_LCPLLREFCLKMONITOR_M;
  assign HSCLK1_LCPLLREFCLKSEL_in[0] = (HSCLK1_LCPLLREFCLKSEL[0] === 1'bz) || HSCLK1_LCPLLREFCLKSEL[0]; // rv 1
  assign HSCLK1_LCPLLREFCLKSEL_in[1] = (HSCLK1_LCPLLREFCLKSEL[1] === 1'bz) || HSCLK1_LCPLLREFCLKSEL[1]; // rv 1
  assign HSCLK1_LCPLLREFCLKSEL_in[2] = (HSCLK1_LCPLLREFCLKSEL[2] === 1'bz) || HSCLK1_LCPLLREFCLKSEL[2]; // rv 1
  assign HSCLK1_LCPLLRESETBYPASSMODE_in = (HSCLK1_LCPLLRESETBYPASSMODE === 1'bz) || HSCLK1_LCPLLRESETBYPASSMODE; // rv 1
  assign HSCLK1_LCPLLRESETMASK_in[0] = (HSCLK1_LCPLLRESETMASK[0] === 1'bz) || HSCLK1_LCPLLRESETMASK[0]; // rv 1
  assign HSCLK1_LCPLLRESETMASK_in[1] = (HSCLK1_LCPLLRESETMASK[1] === 1'bz) || HSCLK1_LCPLLRESETMASK[1]; // rv 1
  assign HSCLK1_LCPLLRESET_in = (HSCLK1_LCPLLRESET === 1'bz) || HSCLK1_LCPLLRESET; // rv 1
  assign HSCLK1_LCPLLSDMDATA_in[0] = (HSCLK1_LCPLLSDMDATA[0] === 1'bz) || HSCLK1_LCPLLSDMDATA[0]; // rv 1
  assign HSCLK1_LCPLLSDMDATA_in[10] = (HSCLK1_LCPLLSDMDATA[10] === 1'bz) || HSCLK1_LCPLLSDMDATA[10]; // rv 1
  assign HSCLK1_LCPLLSDMDATA_in[11] = (HSCLK1_LCPLLSDMDATA[11] === 1'bz) || HSCLK1_LCPLLSDMDATA[11]; // rv 1
  assign HSCLK1_LCPLLSDMDATA_in[12] = (HSCLK1_LCPLLSDMDATA[12] === 1'bz) || HSCLK1_LCPLLSDMDATA[12]; // rv 1
  assign HSCLK1_LCPLLSDMDATA_in[13] = (HSCLK1_LCPLLSDMDATA[13] === 1'bz) || HSCLK1_LCPLLSDMDATA[13]; // rv 1
  assign HSCLK1_LCPLLSDMDATA_in[14] = (HSCLK1_LCPLLSDMDATA[14] === 1'bz) || HSCLK1_LCPLLSDMDATA[14]; // rv 1
  assign HSCLK1_LCPLLSDMDATA_in[15] = (HSCLK1_LCPLLSDMDATA[15] === 1'bz) || HSCLK1_LCPLLSDMDATA[15]; // rv 1
  assign HSCLK1_LCPLLSDMDATA_in[16] = (HSCLK1_LCPLLSDMDATA[16] === 1'bz) || HSCLK1_LCPLLSDMDATA[16]; // rv 1
  assign HSCLK1_LCPLLSDMDATA_in[17] = (HSCLK1_LCPLLSDMDATA[17] === 1'bz) || HSCLK1_LCPLLSDMDATA[17]; // rv 1
  assign HSCLK1_LCPLLSDMDATA_in[18] = (HSCLK1_LCPLLSDMDATA[18] === 1'bz) || HSCLK1_LCPLLSDMDATA[18]; // rv 1
  assign HSCLK1_LCPLLSDMDATA_in[19] = (HSCLK1_LCPLLSDMDATA[19] === 1'bz) || HSCLK1_LCPLLSDMDATA[19]; // rv 1
  assign HSCLK1_LCPLLSDMDATA_in[1] = (HSCLK1_LCPLLSDMDATA[1] === 1'bz) || HSCLK1_LCPLLSDMDATA[1]; // rv 1
  assign HSCLK1_LCPLLSDMDATA_in[20] = (HSCLK1_LCPLLSDMDATA[20] === 1'bz) || HSCLK1_LCPLLSDMDATA[20]; // rv 1
  assign HSCLK1_LCPLLSDMDATA_in[21] = (HSCLK1_LCPLLSDMDATA[21] === 1'bz) || HSCLK1_LCPLLSDMDATA[21]; // rv 1
  assign HSCLK1_LCPLLSDMDATA_in[22] = (HSCLK1_LCPLLSDMDATA[22] === 1'bz) || HSCLK1_LCPLLSDMDATA[22]; // rv 1
  assign HSCLK1_LCPLLSDMDATA_in[23] = (HSCLK1_LCPLLSDMDATA[23] === 1'bz) || HSCLK1_LCPLLSDMDATA[23]; // rv 1
  assign HSCLK1_LCPLLSDMDATA_in[24] = (HSCLK1_LCPLLSDMDATA[24] === 1'bz) || HSCLK1_LCPLLSDMDATA[24]; // rv 1
  assign HSCLK1_LCPLLSDMDATA_in[25] = (HSCLK1_LCPLLSDMDATA[25] === 1'bz) || HSCLK1_LCPLLSDMDATA[25]; // rv 1
  assign HSCLK1_LCPLLSDMDATA_in[2] = (HSCLK1_LCPLLSDMDATA[2] === 1'bz) || HSCLK1_LCPLLSDMDATA[2]; // rv 1
  assign HSCLK1_LCPLLSDMDATA_in[3] = (HSCLK1_LCPLLSDMDATA[3] === 1'bz) || HSCLK1_LCPLLSDMDATA[3]; // rv 1
  assign HSCLK1_LCPLLSDMDATA_in[4] = (HSCLK1_LCPLLSDMDATA[4] === 1'bz) || HSCLK1_LCPLLSDMDATA[4]; // rv 1
  assign HSCLK1_LCPLLSDMDATA_in[5] = (HSCLK1_LCPLLSDMDATA[5] === 1'bz) || HSCLK1_LCPLLSDMDATA[5]; // rv 1
  assign HSCLK1_LCPLLSDMDATA_in[6] = (HSCLK1_LCPLLSDMDATA[6] === 1'bz) || HSCLK1_LCPLLSDMDATA[6]; // rv 1
  assign HSCLK1_LCPLLSDMDATA_in[7] = (HSCLK1_LCPLLSDMDATA[7] === 1'bz) || HSCLK1_LCPLLSDMDATA[7]; // rv 1
  assign HSCLK1_LCPLLSDMDATA_in[8] = (HSCLK1_LCPLLSDMDATA[8] === 1'bz) || HSCLK1_LCPLLSDMDATA[8]; // rv 1
  assign HSCLK1_LCPLLSDMDATA_in[9] = (HSCLK1_LCPLLSDMDATA[9] === 1'bz) || HSCLK1_LCPLLSDMDATA[9]; // rv 1
  assign HSCLK1_LCPLLSDMTOGGLE_in = (HSCLK1_LCPLLSDMTOGGLE === 1'bz) || HSCLK1_LCPLLSDMTOGGLE; // rv 1
  assign M0_AXIS_TDATA_M_in = M0_AXIS_TDATA_M;
  assign M0_AXIS_TLAST_M_in = M0_AXIS_TLAST_M;
  assign M0_AXIS_TREADY_in = (M0_AXIS_TREADY === 1'bz) || M0_AXIS_TREADY; // rv 1
  assign M0_AXIS_TVALID_M_in = M0_AXIS_TVALID_M;
  assign M1_AXIS_TDATA_M_in = M1_AXIS_TDATA_M;
  assign M1_AXIS_TLAST_M_in = M1_AXIS_TLAST_M;
  assign M1_AXIS_TREADY_in = (M1_AXIS_TREADY === 1'bz) || M1_AXIS_TREADY; // rv 1
  assign M1_AXIS_TVALID_M_in = M1_AXIS_TVALID_M;
  assign M2_AXIS_TDATA_M_in = M2_AXIS_TDATA_M;
  assign M2_AXIS_TLAST_M_in = M2_AXIS_TLAST_M;
  assign M2_AXIS_TREADY_in = (M2_AXIS_TREADY === 1'bz) || M2_AXIS_TREADY; // rv 1
  assign M2_AXIS_TVALID_M_in = M2_AXIS_TVALID_M;
  assign M3_AXIS_TDATA_M_in = M3_AXIS_TDATA_M;
  assign M3_AXIS_TLAST_M_in = M3_AXIS_TLAST_M;
  assign M3_AXIS_TREADY_in = (M3_AXIS_TREADY === 1'bz) || M3_AXIS_TREADY; // rv 1
  assign M3_AXIS_TVALID_M_in = M3_AXIS_TVALID_M;
  assign MSTRXRESETDONE_M_in = MSTRXRESETDONE_M;
  assign MSTRXRESET_in[0] = (MSTRXRESET[0] === 1'bz) || MSTRXRESET[0]; // rv 1
  assign MSTRXRESET_in[1] = (MSTRXRESET[1] === 1'bz) || MSTRXRESET[1]; // rv 1
  assign MSTRXRESET_in[2] = (MSTRXRESET[2] === 1'bz) || MSTRXRESET[2]; // rv 1
  assign MSTRXRESET_in[3] = (MSTRXRESET[3] === 1'bz) || MSTRXRESET[3]; // rv 1
  assign MSTTXRESETDONE_M_in = MSTTXRESETDONE_M;
  assign MSTTXRESET_in[0] = (MSTTXRESET[0] === 1'bz) || MSTTXRESET[0]; // rv 1
  assign MSTTXRESET_in[1] = (MSTTXRESET[1] === 1'bz) || MSTTXRESET[1]; // rv 1
  assign MSTTXRESET_in[2] = (MSTTXRESET[2] === 1'bz) || MSTTXRESET[2]; // rv 1
  assign MSTTXRESET_in[3] = (MSTTXRESET[3] === 1'bz) || MSTTXRESET[3]; // rv 1
  assign REFCLK0_CLKTESTSIG_in = REFCLK0_CLKTESTSIG;
  assign REFCLK0_GTREFCLKPD_in = (REFCLK0_GTREFCLKPD === 1'bz) || REFCLK0_GTREFCLKPD; // rv 1
  assign REFCLK1_CLKTESTSIG_in = REFCLK1_CLKTESTSIG;
  assign REFCLK1_GTREFCLKPD_in = (REFCLK1_GTREFCLKPD === 1'bz) || REFCLK1_GTREFCLKPD; // rv 1
  assign S0_AXIS_TDATA_in[0] = (S0_AXIS_TDATA[0] === 1'bz) || S0_AXIS_TDATA[0]; // rv 1
  assign S0_AXIS_TDATA_in[10] = (S0_AXIS_TDATA[10] === 1'bz) || S0_AXIS_TDATA[10]; // rv 1
  assign S0_AXIS_TDATA_in[11] = (S0_AXIS_TDATA[11] === 1'bz) || S0_AXIS_TDATA[11]; // rv 1
  assign S0_AXIS_TDATA_in[12] = (S0_AXIS_TDATA[12] === 1'bz) || S0_AXIS_TDATA[12]; // rv 1
  assign S0_AXIS_TDATA_in[13] = (S0_AXIS_TDATA[13] === 1'bz) || S0_AXIS_TDATA[13]; // rv 1
  assign S0_AXIS_TDATA_in[14] = (S0_AXIS_TDATA[14] === 1'bz) || S0_AXIS_TDATA[14]; // rv 1
  assign S0_AXIS_TDATA_in[15] = (S0_AXIS_TDATA[15] === 1'bz) || S0_AXIS_TDATA[15]; // rv 1
  assign S0_AXIS_TDATA_in[16] = (S0_AXIS_TDATA[16] === 1'bz) || S0_AXIS_TDATA[16]; // rv 1
  assign S0_AXIS_TDATA_in[17] = (S0_AXIS_TDATA[17] === 1'bz) || S0_AXIS_TDATA[17]; // rv 1
  assign S0_AXIS_TDATA_in[18] = (S0_AXIS_TDATA[18] === 1'bz) || S0_AXIS_TDATA[18]; // rv 1
  assign S0_AXIS_TDATA_in[19] = (S0_AXIS_TDATA[19] === 1'bz) || S0_AXIS_TDATA[19]; // rv 1
  assign S0_AXIS_TDATA_in[1] = (S0_AXIS_TDATA[1] === 1'bz) || S0_AXIS_TDATA[1]; // rv 1
  assign S0_AXIS_TDATA_in[20] = (S0_AXIS_TDATA[20] === 1'bz) || S0_AXIS_TDATA[20]; // rv 1
  assign S0_AXIS_TDATA_in[21] = (S0_AXIS_TDATA[21] === 1'bz) || S0_AXIS_TDATA[21]; // rv 1
  assign S0_AXIS_TDATA_in[22] = (S0_AXIS_TDATA[22] === 1'bz) || S0_AXIS_TDATA[22]; // rv 1
  assign S0_AXIS_TDATA_in[23] = (S0_AXIS_TDATA[23] === 1'bz) || S0_AXIS_TDATA[23]; // rv 1
  assign S0_AXIS_TDATA_in[24] = (S0_AXIS_TDATA[24] === 1'bz) || S0_AXIS_TDATA[24]; // rv 1
  assign S0_AXIS_TDATA_in[25] = (S0_AXIS_TDATA[25] === 1'bz) || S0_AXIS_TDATA[25]; // rv 1
  assign S0_AXIS_TDATA_in[26] = (S0_AXIS_TDATA[26] === 1'bz) || S0_AXIS_TDATA[26]; // rv 1
  assign S0_AXIS_TDATA_in[27] = (S0_AXIS_TDATA[27] === 1'bz) || S0_AXIS_TDATA[27]; // rv 1
  assign S0_AXIS_TDATA_in[28] = (S0_AXIS_TDATA[28] === 1'bz) || S0_AXIS_TDATA[28]; // rv 1
  assign S0_AXIS_TDATA_in[29] = (S0_AXIS_TDATA[29] === 1'bz) || S0_AXIS_TDATA[29]; // rv 1
  assign S0_AXIS_TDATA_in[2] = (S0_AXIS_TDATA[2] === 1'bz) || S0_AXIS_TDATA[2]; // rv 1
  assign S0_AXIS_TDATA_in[30] = (S0_AXIS_TDATA[30] === 1'bz) || S0_AXIS_TDATA[30]; // rv 1
  assign S0_AXIS_TDATA_in[31] = (S0_AXIS_TDATA[31] === 1'bz) || S0_AXIS_TDATA[31]; // rv 1
  assign S0_AXIS_TDATA_in[3] = (S0_AXIS_TDATA[3] === 1'bz) || S0_AXIS_TDATA[3]; // rv 1
  assign S0_AXIS_TDATA_in[4] = (S0_AXIS_TDATA[4] === 1'bz) || S0_AXIS_TDATA[4]; // rv 1
  assign S0_AXIS_TDATA_in[5] = (S0_AXIS_TDATA[5] === 1'bz) || S0_AXIS_TDATA[5]; // rv 1
  assign S0_AXIS_TDATA_in[6] = (S0_AXIS_TDATA[6] === 1'bz) || S0_AXIS_TDATA[6]; // rv 1
  assign S0_AXIS_TDATA_in[7] = (S0_AXIS_TDATA[7] === 1'bz) || S0_AXIS_TDATA[7]; // rv 1
  assign S0_AXIS_TDATA_in[8] = (S0_AXIS_TDATA[8] === 1'bz) || S0_AXIS_TDATA[8]; // rv 1
  assign S0_AXIS_TDATA_in[9] = (S0_AXIS_TDATA[9] === 1'bz) || S0_AXIS_TDATA[9]; // rv 1
  assign S0_AXIS_TLAST_in = (S0_AXIS_TLAST === 1'bz) || S0_AXIS_TLAST; // rv 1
  assign S0_AXIS_TREADY_M_in = S0_AXIS_TREADY_M;
  assign S0_AXIS_TVALID_in = (S0_AXIS_TVALID === 1'bz) || S0_AXIS_TVALID; // rv 1
  assign S1_AXIS_TDATA_in[0] = (S1_AXIS_TDATA[0] === 1'bz) || S1_AXIS_TDATA[0]; // rv 1
  assign S1_AXIS_TDATA_in[10] = (S1_AXIS_TDATA[10] === 1'bz) || S1_AXIS_TDATA[10]; // rv 1
  assign S1_AXIS_TDATA_in[11] = (S1_AXIS_TDATA[11] === 1'bz) || S1_AXIS_TDATA[11]; // rv 1
  assign S1_AXIS_TDATA_in[12] = (S1_AXIS_TDATA[12] === 1'bz) || S1_AXIS_TDATA[12]; // rv 1
  assign S1_AXIS_TDATA_in[13] = (S1_AXIS_TDATA[13] === 1'bz) || S1_AXIS_TDATA[13]; // rv 1
  assign S1_AXIS_TDATA_in[14] = (S1_AXIS_TDATA[14] === 1'bz) || S1_AXIS_TDATA[14]; // rv 1
  assign S1_AXIS_TDATA_in[15] = (S1_AXIS_TDATA[15] === 1'bz) || S1_AXIS_TDATA[15]; // rv 1
  assign S1_AXIS_TDATA_in[16] = (S1_AXIS_TDATA[16] === 1'bz) || S1_AXIS_TDATA[16]; // rv 1
  assign S1_AXIS_TDATA_in[17] = (S1_AXIS_TDATA[17] === 1'bz) || S1_AXIS_TDATA[17]; // rv 1
  assign S1_AXIS_TDATA_in[18] = (S1_AXIS_TDATA[18] === 1'bz) || S1_AXIS_TDATA[18]; // rv 1
  assign S1_AXIS_TDATA_in[19] = (S1_AXIS_TDATA[19] === 1'bz) || S1_AXIS_TDATA[19]; // rv 1
  assign S1_AXIS_TDATA_in[1] = (S1_AXIS_TDATA[1] === 1'bz) || S1_AXIS_TDATA[1]; // rv 1
  assign S1_AXIS_TDATA_in[20] = (S1_AXIS_TDATA[20] === 1'bz) || S1_AXIS_TDATA[20]; // rv 1
  assign S1_AXIS_TDATA_in[21] = (S1_AXIS_TDATA[21] === 1'bz) || S1_AXIS_TDATA[21]; // rv 1
  assign S1_AXIS_TDATA_in[22] = (S1_AXIS_TDATA[22] === 1'bz) || S1_AXIS_TDATA[22]; // rv 1
  assign S1_AXIS_TDATA_in[23] = (S1_AXIS_TDATA[23] === 1'bz) || S1_AXIS_TDATA[23]; // rv 1
  assign S1_AXIS_TDATA_in[24] = (S1_AXIS_TDATA[24] === 1'bz) || S1_AXIS_TDATA[24]; // rv 1
  assign S1_AXIS_TDATA_in[25] = (S1_AXIS_TDATA[25] === 1'bz) || S1_AXIS_TDATA[25]; // rv 1
  assign S1_AXIS_TDATA_in[26] = (S1_AXIS_TDATA[26] === 1'bz) || S1_AXIS_TDATA[26]; // rv 1
  assign S1_AXIS_TDATA_in[27] = (S1_AXIS_TDATA[27] === 1'bz) || S1_AXIS_TDATA[27]; // rv 1
  assign S1_AXIS_TDATA_in[28] = (S1_AXIS_TDATA[28] === 1'bz) || S1_AXIS_TDATA[28]; // rv 1
  assign S1_AXIS_TDATA_in[29] = (S1_AXIS_TDATA[29] === 1'bz) || S1_AXIS_TDATA[29]; // rv 1
  assign S1_AXIS_TDATA_in[2] = (S1_AXIS_TDATA[2] === 1'bz) || S1_AXIS_TDATA[2]; // rv 1
  assign S1_AXIS_TDATA_in[30] = (S1_AXIS_TDATA[30] === 1'bz) || S1_AXIS_TDATA[30]; // rv 1
  assign S1_AXIS_TDATA_in[31] = (S1_AXIS_TDATA[31] === 1'bz) || S1_AXIS_TDATA[31]; // rv 1
  assign S1_AXIS_TDATA_in[3] = (S1_AXIS_TDATA[3] === 1'bz) || S1_AXIS_TDATA[3]; // rv 1
  assign S1_AXIS_TDATA_in[4] = (S1_AXIS_TDATA[4] === 1'bz) || S1_AXIS_TDATA[4]; // rv 1
  assign S1_AXIS_TDATA_in[5] = (S1_AXIS_TDATA[5] === 1'bz) || S1_AXIS_TDATA[5]; // rv 1
  assign S1_AXIS_TDATA_in[6] = (S1_AXIS_TDATA[6] === 1'bz) || S1_AXIS_TDATA[6]; // rv 1
  assign S1_AXIS_TDATA_in[7] = (S1_AXIS_TDATA[7] === 1'bz) || S1_AXIS_TDATA[7]; // rv 1
  assign S1_AXIS_TDATA_in[8] = (S1_AXIS_TDATA[8] === 1'bz) || S1_AXIS_TDATA[8]; // rv 1
  assign S1_AXIS_TDATA_in[9] = (S1_AXIS_TDATA[9] === 1'bz) || S1_AXIS_TDATA[9]; // rv 1
  assign S1_AXIS_TLAST_in = (S1_AXIS_TLAST === 1'bz) || S1_AXIS_TLAST; // rv 1
  assign S1_AXIS_TREADY_M_in = S1_AXIS_TREADY_M;
  assign S1_AXIS_TVALID_in = (S1_AXIS_TVALID === 1'bz) || S1_AXIS_TVALID; // rv 1
  assign S2_AXIS_TDATA_in[0] = (S2_AXIS_TDATA[0] === 1'bz) || S2_AXIS_TDATA[0]; // rv 1
  assign S2_AXIS_TDATA_in[10] = (S2_AXIS_TDATA[10] === 1'bz) || S2_AXIS_TDATA[10]; // rv 1
  assign S2_AXIS_TDATA_in[11] = (S2_AXIS_TDATA[11] === 1'bz) || S2_AXIS_TDATA[11]; // rv 1
  assign S2_AXIS_TDATA_in[12] = (S2_AXIS_TDATA[12] === 1'bz) || S2_AXIS_TDATA[12]; // rv 1
  assign S2_AXIS_TDATA_in[13] = (S2_AXIS_TDATA[13] === 1'bz) || S2_AXIS_TDATA[13]; // rv 1
  assign S2_AXIS_TDATA_in[14] = (S2_AXIS_TDATA[14] === 1'bz) || S2_AXIS_TDATA[14]; // rv 1
  assign S2_AXIS_TDATA_in[15] = (S2_AXIS_TDATA[15] === 1'bz) || S2_AXIS_TDATA[15]; // rv 1
  assign S2_AXIS_TDATA_in[16] = (S2_AXIS_TDATA[16] === 1'bz) || S2_AXIS_TDATA[16]; // rv 1
  assign S2_AXIS_TDATA_in[17] = (S2_AXIS_TDATA[17] === 1'bz) || S2_AXIS_TDATA[17]; // rv 1
  assign S2_AXIS_TDATA_in[18] = (S2_AXIS_TDATA[18] === 1'bz) || S2_AXIS_TDATA[18]; // rv 1
  assign S2_AXIS_TDATA_in[19] = (S2_AXIS_TDATA[19] === 1'bz) || S2_AXIS_TDATA[19]; // rv 1
  assign S2_AXIS_TDATA_in[1] = (S2_AXIS_TDATA[1] === 1'bz) || S2_AXIS_TDATA[1]; // rv 1
  assign S2_AXIS_TDATA_in[20] = (S2_AXIS_TDATA[20] === 1'bz) || S2_AXIS_TDATA[20]; // rv 1
  assign S2_AXIS_TDATA_in[21] = (S2_AXIS_TDATA[21] === 1'bz) || S2_AXIS_TDATA[21]; // rv 1
  assign S2_AXIS_TDATA_in[22] = (S2_AXIS_TDATA[22] === 1'bz) || S2_AXIS_TDATA[22]; // rv 1
  assign S2_AXIS_TDATA_in[23] = (S2_AXIS_TDATA[23] === 1'bz) || S2_AXIS_TDATA[23]; // rv 1
  assign S2_AXIS_TDATA_in[24] = (S2_AXIS_TDATA[24] === 1'bz) || S2_AXIS_TDATA[24]; // rv 1
  assign S2_AXIS_TDATA_in[25] = (S2_AXIS_TDATA[25] === 1'bz) || S2_AXIS_TDATA[25]; // rv 1
  assign S2_AXIS_TDATA_in[26] = (S2_AXIS_TDATA[26] === 1'bz) || S2_AXIS_TDATA[26]; // rv 1
  assign S2_AXIS_TDATA_in[27] = (S2_AXIS_TDATA[27] === 1'bz) || S2_AXIS_TDATA[27]; // rv 1
  assign S2_AXIS_TDATA_in[28] = (S2_AXIS_TDATA[28] === 1'bz) || S2_AXIS_TDATA[28]; // rv 1
  assign S2_AXIS_TDATA_in[29] = (S2_AXIS_TDATA[29] === 1'bz) || S2_AXIS_TDATA[29]; // rv 1
  assign S2_AXIS_TDATA_in[2] = (S2_AXIS_TDATA[2] === 1'bz) || S2_AXIS_TDATA[2]; // rv 1
  assign S2_AXIS_TDATA_in[30] = (S2_AXIS_TDATA[30] === 1'bz) || S2_AXIS_TDATA[30]; // rv 1
  assign S2_AXIS_TDATA_in[31] = (S2_AXIS_TDATA[31] === 1'bz) || S2_AXIS_TDATA[31]; // rv 1
  assign S2_AXIS_TDATA_in[3] = (S2_AXIS_TDATA[3] === 1'bz) || S2_AXIS_TDATA[3]; // rv 1
  assign S2_AXIS_TDATA_in[4] = (S2_AXIS_TDATA[4] === 1'bz) || S2_AXIS_TDATA[4]; // rv 1
  assign S2_AXIS_TDATA_in[5] = (S2_AXIS_TDATA[5] === 1'bz) || S2_AXIS_TDATA[5]; // rv 1
  assign S2_AXIS_TDATA_in[6] = (S2_AXIS_TDATA[6] === 1'bz) || S2_AXIS_TDATA[6]; // rv 1
  assign S2_AXIS_TDATA_in[7] = (S2_AXIS_TDATA[7] === 1'bz) || S2_AXIS_TDATA[7]; // rv 1
  assign S2_AXIS_TDATA_in[8] = (S2_AXIS_TDATA[8] === 1'bz) || S2_AXIS_TDATA[8]; // rv 1
  assign S2_AXIS_TDATA_in[9] = (S2_AXIS_TDATA[9] === 1'bz) || S2_AXIS_TDATA[9]; // rv 1
  assign S2_AXIS_TLAST_in = (S2_AXIS_TLAST === 1'bz) || S2_AXIS_TLAST; // rv 1
  assign S2_AXIS_TREADY_M_in = S2_AXIS_TREADY_M;
  assign S2_AXIS_TVALID_in = (S2_AXIS_TVALID === 1'bz) || S2_AXIS_TVALID; // rv 1
  assign S3_AXIS_TDATA_in[0] = (S3_AXIS_TDATA[0] === 1'bz) || S3_AXIS_TDATA[0]; // rv 1
  assign S3_AXIS_TDATA_in[10] = (S3_AXIS_TDATA[10] === 1'bz) || S3_AXIS_TDATA[10]; // rv 1
  assign S3_AXIS_TDATA_in[11] = (S3_AXIS_TDATA[11] === 1'bz) || S3_AXIS_TDATA[11]; // rv 1
  assign S3_AXIS_TDATA_in[12] = (S3_AXIS_TDATA[12] === 1'bz) || S3_AXIS_TDATA[12]; // rv 1
  assign S3_AXIS_TDATA_in[13] = (S3_AXIS_TDATA[13] === 1'bz) || S3_AXIS_TDATA[13]; // rv 1
  assign S3_AXIS_TDATA_in[14] = (S3_AXIS_TDATA[14] === 1'bz) || S3_AXIS_TDATA[14]; // rv 1
  assign S3_AXIS_TDATA_in[15] = (S3_AXIS_TDATA[15] === 1'bz) || S3_AXIS_TDATA[15]; // rv 1
  assign S3_AXIS_TDATA_in[16] = (S3_AXIS_TDATA[16] === 1'bz) || S3_AXIS_TDATA[16]; // rv 1
  assign S3_AXIS_TDATA_in[17] = (S3_AXIS_TDATA[17] === 1'bz) || S3_AXIS_TDATA[17]; // rv 1
  assign S3_AXIS_TDATA_in[18] = (S3_AXIS_TDATA[18] === 1'bz) || S3_AXIS_TDATA[18]; // rv 1
  assign S3_AXIS_TDATA_in[19] = (S3_AXIS_TDATA[19] === 1'bz) || S3_AXIS_TDATA[19]; // rv 1
  assign S3_AXIS_TDATA_in[1] = (S3_AXIS_TDATA[1] === 1'bz) || S3_AXIS_TDATA[1]; // rv 1
  assign S3_AXIS_TDATA_in[20] = (S3_AXIS_TDATA[20] === 1'bz) || S3_AXIS_TDATA[20]; // rv 1
  assign S3_AXIS_TDATA_in[21] = (S3_AXIS_TDATA[21] === 1'bz) || S3_AXIS_TDATA[21]; // rv 1
  assign S3_AXIS_TDATA_in[22] = (S3_AXIS_TDATA[22] === 1'bz) || S3_AXIS_TDATA[22]; // rv 1
  assign S3_AXIS_TDATA_in[23] = (S3_AXIS_TDATA[23] === 1'bz) || S3_AXIS_TDATA[23]; // rv 1
  assign S3_AXIS_TDATA_in[24] = (S3_AXIS_TDATA[24] === 1'bz) || S3_AXIS_TDATA[24]; // rv 1
  assign S3_AXIS_TDATA_in[25] = (S3_AXIS_TDATA[25] === 1'bz) || S3_AXIS_TDATA[25]; // rv 1
  assign S3_AXIS_TDATA_in[26] = (S3_AXIS_TDATA[26] === 1'bz) || S3_AXIS_TDATA[26]; // rv 1
  assign S3_AXIS_TDATA_in[27] = (S3_AXIS_TDATA[27] === 1'bz) || S3_AXIS_TDATA[27]; // rv 1
  assign S3_AXIS_TDATA_in[28] = (S3_AXIS_TDATA[28] === 1'bz) || S3_AXIS_TDATA[28]; // rv 1
  assign S3_AXIS_TDATA_in[29] = (S3_AXIS_TDATA[29] === 1'bz) || S3_AXIS_TDATA[29]; // rv 1
  assign S3_AXIS_TDATA_in[2] = (S3_AXIS_TDATA[2] === 1'bz) || S3_AXIS_TDATA[2]; // rv 1
  assign S3_AXIS_TDATA_in[30] = (S3_AXIS_TDATA[30] === 1'bz) || S3_AXIS_TDATA[30]; // rv 1
  assign S3_AXIS_TDATA_in[31] = (S3_AXIS_TDATA[31] === 1'bz) || S3_AXIS_TDATA[31]; // rv 1
  assign S3_AXIS_TDATA_in[3] = (S3_AXIS_TDATA[3] === 1'bz) || S3_AXIS_TDATA[3]; // rv 1
  assign S3_AXIS_TDATA_in[4] = (S3_AXIS_TDATA[4] === 1'bz) || S3_AXIS_TDATA[4]; // rv 1
  assign S3_AXIS_TDATA_in[5] = (S3_AXIS_TDATA[5] === 1'bz) || S3_AXIS_TDATA[5]; // rv 1
  assign S3_AXIS_TDATA_in[6] = (S3_AXIS_TDATA[6] === 1'bz) || S3_AXIS_TDATA[6]; // rv 1
  assign S3_AXIS_TDATA_in[7] = (S3_AXIS_TDATA[7] === 1'bz) || S3_AXIS_TDATA[7]; // rv 1
  assign S3_AXIS_TDATA_in[8] = (S3_AXIS_TDATA[8] === 1'bz) || S3_AXIS_TDATA[8]; // rv 1
  assign S3_AXIS_TDATA_in[9] = (S3_AXIS_TDATA[9] === 1'bz) || S3_AXIS_TDATA[9]; // rv 1
  assign S3_AXIS_TLAST_in = (S3_AXIS_TLAST === 1'bz) || S3_AXIS_TLAST; // rv 1
  assign S3_AXIS_TREADY_M_in = S3_AXIS_TREADY_M;
  assign S3_AXIS_TVALID_in = (S3_AXIS_TVALID === 1'bz) || S3_AXIS_TVALID; // rv 1
  assign SIM_HNICPIPE_TOP_SEL_in = SIM_HNICPIPE_TOP_SEL;
  assign TRIGACKIN0_M_in = TRIGACKIN0_M;
  assign TRIGACKOUT0_in = (TRIGACKOUT0 === 1'bz) || TRIGACKOUT0; // rv 1
  assign TRIGIN0_in = (TRIGIN0 === 1'bz) || TRIGIN0; // rv 1
  assign TRIGOUT0_M_in = TRIGOUT0_M;
  assign UBENABLE_in = (UBENABLE === 1'bz) || UBENABLE; // rv 1
  assign UBINTERRUPT_M_in = UBINTERRUPT_M;
  assign UBINTR_in[0] = (UBINTR[0] === 1'bz) || UBINTR[0]; // rv 1
  assign UBINTR_in[10] = (UBINTR[10] === 1'bz) || UBINTR[10]; // rv 1
  assign UBINTR_in[11] = (UBINTR[11] === 1'bz) || UBINTR[11]; // rv 1
  assign UBINTR_in[1] = (UBINTR[1] === 1'bz) || UBINTR[1]; // rv 1
  assign UBINTR_in[2] = (UBINTR[2] === 1'bz) || UBINTR[2]; // rv 1
  assign UBINTR_in[3] = (UBINTR[3] === 1'bz) || UBINTR[3]; // rv 1
  assign UBINTR_in[4] = (UBINTR[4] === 1'bz) || UBINTR[4]; // rv 1
  assign UBINTR_in[5] = (UBINTR[5] === 1'bz) || UBINTR[5]; // rv 1
  assign UBINTR_in[6] = (UBINTR[6] === 1'bz) || UBINTR[6]; // rv 1
  assign UBINTR_in[7] = (UBINTR[7] === 1'bz) || UBINTR[7]; // rv 1
  assign UBINTR_in[8] = (UBINTR[8] === 1'bz) || UBINTR[8]; // rv 1
  assign UBINTR_in[9] = (UBINTR[9] === 1'bz) || UBINTR[9]; // rv 1
  assign UBIOLMBRST_in = (UBIOLMBRST === 1'bz) || UBIOLMBRST; // rv 1
  assign UBMBRST_in = (UBMBRST === 1'bz) || UBMBRST; // rv 1
  assign UBRXUART_in = (UBRXUART === 1'bz) || UBRXUART; // rv 1
  assign UBTXUART_M_in = UBTXUART_M;
  assign UNCORRECTERR_M_in = UNCORRECTERR_M;

`ifndef XIL_XECLIB
  initial begin
  trig_attr = 1'b0;
  #1;
  trig_attr = ~trig_attr;
end
`endif


assign CH0_SCANCLKB_in = 1'b1; // tie off
assign CH1_SCANCLKB_in = 1'b1; // tie off
assign CH2_SCANCLKB_in = 1'b1; // tie off
assign CH3_SCANCLKB_in = 1'b1; // tie off
assign HNICPIPE_SCAN_CLK_N_in = 1'b1; // tie off
assign SCANCLKB_in = 1'b1; // tie off

assign CH0_BSR_SERIAL_in = 1'b1; // tie off
assign CH0_CSSDSTOPCLKB_in = 1'b1; // tie off
assign CH0_EDTUPDATEB_in = 1'b1; // tie off
assign CH0_SCANCNTRLIN_in = 1'b1; // tie off
assign CH0_SCANCNTRLOUT_M_in = 1'b1; // tie off
assign CH0_SCANENB_in = 1'b1; // tie off
assign CH0_SCANIN_in = 4'b1111; // tie off
assign CH0_SCANOUT_M_in = 4'b1111; // tie off
assign CH0_SCANRSTB_in = 1'b1; // tie off
assign CH1_BSR_SERIAL_in = 1'b1; // tie off
assign CH1_CSSDSTOPCLKB_in = 1'b1; // tie off
assign CH1_EDTUPDATEB_in = 1'b1; // tie off
assign CH1_SCANCNTRLIN_in = 1'b1; // tie off
assign CH1_SCANCNTRLOUT_M_in = 1'b1; // tie off
assign CH1_SCANENB_in = 1'b1; // tie off
assign CH1_SCANIN_in = 4'b1111; // tie off
assign CH1_SCANOUT_M_in = 4'b1111; // tie off
assign CH1_SCANRSTB_in = 1'b1; // tie off
assign CH2_BSR_SERIAL_in = 1'b1; // tie off
assign CH2_CSSDSTOPCLKB_in = 1'b1; // tie off
assign CH2_EDTUPDATEB_in = 1'b1; // tie off
assign CH2_SCANCNTRLIN_in = 1'b1; // tie off
assign CH2_SCANCNTRLOUT_M_in = 1'b1; // tie off
assign CH2_SCANENB_in = 1'b1; // tie off
assign CH2_SCANIN_in = 4'b1111; // tie off
assign CH2_SCANOUT_M_in = 4'b1111; // tie off
assign CH2_SCANRSTB_in = 1'b1; // tie off
assign CH3_BSR_SERIAL_in = 1'b1; // tie off
assign CH3_CSSDSTOPCLKB_in = 1'b1; // tie off
assign CH3_EDTUPDATEB_in = 1'b1; // tie off
assign CH3_SCANCNTRLIN_in = 1'b1; // tie off
assign CH3_SCANCNTRLOUT_M_in = 1'b1; // tie off
assign CH3_SCANENB_in = 1'b1; // tie off
assign CH3_SCANIN_in = 4'b1111; // tie off
assign CH3_SCANOUT_M_in = 4'b1111; // tie off
assign CH3_SCANRSTB_in = 1'b1; // tie off
assign CSSDSTOPCLKB_in = 1'b1; // tie off
assign EDTUPDATEB_in = 1'b1; // tie off
assign HNICPIPE_CSSD_TRIG_N_in = 1'b1; // tie off
assign HNICPIPE_EDT_UPDT_N_in = 1'b1; // tie off
assign HNICPIPE_SCAN_CHNL_IN_in = 3'b111; // tie off
assign HNICPIPE_SCAN_CHNL_MASK_IN_in = 3'b111; // tie off
assign HNICPIPE_SCAN_CNTRL_CHNL_IN_in = 1'b1; // tie off
assign HNICPIPE_SCAN_EN_N_in = 1'b1; // tie off
assign HNICPIPE_SCAN_RST_N_in = 1'b1; // tie off
assign RCALCMP_M_in = 1'b1; // tie off
assign RCALOUT_M_in = 5'b11111; // tie off
assign SCANCNTRLIN_in = 1'b1; // tie off
assign SCANCNTRLOUT_M_in = 1'b1; // tie off
assign SCANENB_in = 1'b1; // tie off
assign SCANIN_in = 4'b1111; // tie off
assign SCANOUT_M_in = 4'b1111; // tie off
assign SCANRSTB_in = 1'b1; // tie off

SIP_HNICPIPE_QUAD SIP_HNICPIPE_QUAD_INST (
  .HNICPIPE_HPIPE_CFG0 (HNICPIPE_HPIPE_CFG0_REG),
  .HNICPIPE_HPIPE_CFG1 (HNICPIPE_HPIPE_CFG1_REG),
  .HNICPIPE_HPIPE_CFG2 (HNICPIPE_HPIPE_CFG2_REG),
  .HNICPIPE_HPIPE_CFG3 (HNICPIPE_HPIPE_CFG3_REG),
  .HNICPIPE_HPIPE_CFG4 (HNICPIPE_HPIPE_CFG4_REG),
  .HNICPIPE_HPIPE_CFG5 (HNICPIPE_HPIPE_CFG5_REG),
  .HNICPIPE_HPIPE_CFG6 (HNICPIPE_HPIPE_CFG6_REG),
  .HNICPIPE_OPTDLY_CFG0 (HNICPIPE_OPTDLY_CFG0_REG),
  .HNICPIPE_OPTDLY_CFG1 (HNICPIPE_OPTDLY_CFG1_REG),
  .HNICPIPE_PIPE_CFG (HNICPIPE_PIPE_CFG_REG),
  .HNICPIPE_RX_CLKMUX_SEL (HNICPIPE_RX_CLKMUX_SEL_REG),
  .HNICPIPE_RX_CLK_REMAP_CFG (HNICPIPE_RX_CLK_REMAP_CFG_REG),
  .HNICPIPE_RX_DATA_REMAP_CFG (HNICPIPE_RX_DATA_REMAP_CFG_REG),
  .HNICPIPE_TX_CLKMUX_SEL (HNICPIPE_TX_CLKMUX_SEL_REG),
  .HNICPIPE_TX_CLK_REMAP_CFG (HNICPIPE_TX_CLK_REMAP_CFG_REG),
  .HNICPIPE_TX_DATA_REMAP_CFG (HNICPIPE_TX_DATA_REMAP_CFG_REG),
  .APB3CLK_M (APB3CLK_M_out),
  .APB3PADDR_M (APB3PADDR_M_out),
  .APB3PENABLE_M (APB3PENABLE_M_out),
  .APB3PRDATA (APB3PRDATA_out),
  .APB3PREADY (APB3PREADY_out),
  .APB3PRESETN_M (APB3PRESETN_M_out),
  .APB3PSEL_M (APB3PSEL_M_out),
  .APB3PSLVERR (APB3PSLVERR_out),
  .APB3PWDATA_M (APB3PWDATA_M_out),
  .APB3PWRITE_M (APB3PWRITE_M_out),
  .AXISCLK_M (AXISCLK_M_out),
  .BGBYPASSB_M (BGBYPASSB_M_out),
  .BGMONITORENB_M (BGMONITORENB_M_out),
  .BGPDB_M (BGPDB_M_out),
  .BGRCALOVRDENB_M (BGRCALOVRDENB_M_out),
  .BGRCALOVRD_M (BGRCALOVRD_M_out),
  .CH0_BSR_SERIAL_M (CH0_BSR_SERIAL_M_out),
  .CH0_CDRFREQOS_M (CH0_CDRFREQOS_M_out),
  .CH0_CDRINCPCTRL_M (CH0_CDRINCPCTRL_M_out),
  .CH0_CDRSTEPDIR_M (CH0_CDRSTEPDIR_M_out),
  .CH0_CDRSTEPSQ_M (CH0_CDRSTEPSQ_M_out),
  .CH0_CDRSTEPSX_M (CH0_CDRSTEPSX_M_out),
  .CH0_CLKRSVD0_M (CH0_CLKRSVD0_M_out),
  .CH0_CLKRSVD1_M (CH0_CLKRSVD1_M_out),
  .CH0_CSSDSTOPCLKB_M (CH0_CSSDSTOPCLKB_M_out),
  .CH0_DMONFIFORESET_M (CH0_DMONFIFORESET_M_out),
  .CH0_DMONITORCLK_M (CH0_DMONITORCLK_M_out),
  .CH0_DMONITOROUT (CH0_DMONITOROUT_out),
  .CH0_EDTUPDATEB_M (CH0_EDTUPDATEB_M_out),
  .CH0_EYESCANDATAERROR (CH0_EYESCANDATAERROR_out),
  .CH0_EYESCANRESET_M (CH0_EYESCANRESET_M_out),
  .CH0_EYESCANTRIGGER_M (CH0_EYESCANTRIGGER_M_out),
  .CH0_GTRSVD_M (CH0_GTRSVD_M_out),
  .CH0_GTRXRESET_M (CH0_GTRXRESET_M_out),
  .CH0_GTTXRESET_M (CH0_GTTXRESET_M_out),
  .CH0_ILORESETDONE (CH0_ILORESETDONE_out),
  .CH0_ILORESETMASK_M (CH0_ILORESETMASK_M_out),
  .CH0_ILORESET_M (CH0_ILORESET_M_out),
  .CH0_LOOPBACK_M (CH0_LOOPBACK_M_out),
  .CH0_PCSRSVDIN_M (CH0_PCSRSVDIN_M_out),
  .CH0_PCSRSVDOUT (CH0_PCSRSVDOUT_out),
  .CH0_PINRSVDAS (CH0_PINRSVDAS_out),
  .CH0_REFDEBUGOUT (CH0_REFDEBUGOUT_out),
  .CH0_RESETEXCEPTION (CH0_RESETEXCEPTION_out),
  .CH0_RXBUFSTATUS (CH0_RXBUFSTATUS_out),
  .CH0_RXCDRHOLD_M (CH0_RXCDRHOLD_M_out),
  .CH0_RXCDRLOCK (CH0_RXCDRLOCK_out),
  .CH0_RXCDROVRDEN_M (CH0_RXCDROVRDEN_M_out),
  .CH0_RXCDRPHDONE (CH0_RXCDRPHDONE_out),
  .CH0_RXCDRRESET_M (CH0_RXCDRRESET_M_out),
  .CH0_RXDATA (CH0_RXDATA_out),
  .CH0_RXDEBUGPCSOUT (CH0_RXDEBUGPCSOUT_out),
  .CH0_RXLATCLK_M (CH0_RXLATCLK_M_out),
  .CH0_RXPCSRESETMASK_M (CH0_RXPCSRESETMASK_M_out),
  .CH0_RXPD_M (CH0_RXPD_M_out),
  .CH0_RXPERST_M (CH0_RXPERST_M_out),
  .CH0_RXPMARESETDONE (CH0_RXPMARESETDONE_out),
  .CH0_RXPMARESETMASK_M (CH0_RXPMARESETMASK_M_out),
  .CH0_RXPOLARITY_M (CH0_RXPOLARITY_M_out),
  .CH0_RXPRBSCNTRESET_M (CH0_RXPRBSCNTRESET_M_out),
  .CH0_RXPRBSCNTSTOP_M (CH0_RXPRBSCNTSTOP_M_out),
  .CH0_RXPRBSERR (CH0_RXPRBSERR_out),
  .CH0_RXPRBSLOCKED (CH0_RXPRBSLOCKED_out),
  .CH0_RXPRBSSEL_M (CH0_RXPRBSSEL_M_out),
  .CH0_RXPROGDIVRESETDONE (CH0_RXPROGDIVRESETDONE_out),
  .CH0_RXPROGDIVRESET_M (CH0_RXPROGDIVRESET_M_out),
  .CH0_RXQPRBSEN_M (CH0_RXQPRBSEN_M_out),
  .CH0_RXRATE_M (CH0_RXRATE_M_out),
  .CH0_RXRESETDONE (CH0_RXRESETDONE_out),
  .CH0_RXRESETMODE_M (CH0_RXRESETMODE_M_out),
  .CH0_RXRSV0_M (CH0_RXRSV0_M_out),
  .CH0_RXRSV1_M (CH0_RXRSV1_M_out),
  .CH0_RXRSV2_M (CH0_RXRSV2_M_out),
  .CH0_RXUSERRDY_M (CH0_RXUSERRDY_M_out),
  .CH0_RXUSRCLK_M (CH0_RXUSRCLK_M_out),
  .CH0_SCANCLKB_M (CH0_SCANCLKB_M_out),
  .CH0_SCANCNTRLIN_M (CH0_SCANCNTRLIN_M_out),
  .CH0_SCANCNTRLOUT (CH0_SCANCNTRLOUT_out),
  .CH0_SCANENB_M (CH0_SCANENB_M_out),
  .CH0_SCANIN_M (CH0_SCANIN_M_out),
  .CH0_SCANOUT (CH0_SCANOUT_out),
  .CH0_SCANRSTB_M (CH0_SCANRSTB_M_out),
  .CH0_TSTCLK0_M (CH0_TSTCLK0_M_out),
  .CH0_TSTCLK1_M (CH0_TSTCLK1_M_out),
  .CH0_TXBUFSTATUS (CH0_TXBUFSTATUS_out),
  .CH0_TXDATA_M (CH0_TXDATA_M_out),
  .CH0_TXDCCDONE (CH0_TXDCCDONE_out),
  .CH0_TXDEBUGPCSOUT (CH0_TXDEBUGPCSOUT_out),
  .CH0_TXINHIBIT_M (CH0_TXINHIBIT_M_out),
  .CH0_TXLATCLK_M (CH0_TXLATCLK_M_out),
  .CH0_TXMAINCURSOR_M (CH0_TXMAINCURSOR_M_out),
  .CH0_TXPCSRESETMASK_M (CH0_TXPCSRESETMASK_M_out),
  .CH0_TXPD_M (CH0_TXPD_M_out),
  .CH0_TXPERST_M (CH0_TXPERST_M_out),
  .CH0_TXPISOPD_M (CH0_TXPISOPD_M_out),
  .CH0_TXPMARESETDONE (CH0_TXPMARESETDONE_out),
  .CH0_TXPMARESETMASK_M (CH0_TXPMARESETMASK_M_out),
  .CH0_TXPOLARITY_M (CH0_TXPOLARITY_M_out),
  .CH0_TXPOSTCURSOR_M (CH0_TXPOSTCURSOR_M_out),
  .CH0_TXPRBSFORCEERR_M (CH0_TXPRBSFORCEERR_M_out),
  .CH0_TXPRBSSEL_M (CH0_TXPRBSSEL_M_out),
  .CH0_TXPRECURSOR2_M (CH0_TXPRECURSOR2_M_out),
  .CH0_TXPRECURSOR3_M (CH0_TXPRECURSOR3_M_out),
  .CH0_TXPRECURSOR_M (CH0_TXPRECURSOR_M_out),
  .CH0_TXPROGDIVRESETDONE (CH0_TXPROGDIVRESETDONE_out),
  .CH0_TXPROGDIVRESET_M (CH0_TXPROGDIVRESET_M_out),
  .CH0_TXQPRBSEN_M (CH0_TXQPRBSEN_M_out),
  .CH0_TXRATE_M (CH0_TXRATE_M_out),
  .CH0_TXRESETDONE (CH0_TXRESETDONE_out),
  .CH0_TXRESETMODE_M (CH0_TXRESETMODE_M_out),
  .CH0_TXRSV0_M (CH0_TXRSV0_M_out),
  .CH0_TXRSV1_M (CH0_TXRSV1_M_out),
  .CH0_TXUSERRDY_M (CH0_TXUSERRDY_M_out),
  .CH0_TXUSRCLK_M (CH0_TXUSRCLK_M_out),
  .CH1_BSR_SERIAL_M (CH1_BSR_SERIAL_M_out),
  .CH1_CDRFREQOS_M (CH1_CDRFREQOS_M_out),
  .CH1_CDRINCPCTRL_M (CH1_CDRINCPCTRL_M_out),
  .CH1_CDRSTEPDIR_M (CH1_CDRSTEPDIR_M_out),
  .CH1_CDRSTEPSQ_M (CH1_CDRSTEPSQ_M_out),
  .CH1_CDRSTEPSX_M (CH1_CDRSTEPSX_M_out),
  .CH1_CLKRSVD0_M (CH1_CLKRSVD0_M_out),
  .CH1_CLKRSVD1_M (CH1_CLKRSVD1_M_out),
  .CH1_CSSDSTOPCLKB_M (CH1_CSSDSTOPCLKB_M_out),
  .CH1_DMONFIFORESET_M (CH1_DMONFIFORESET_M_out),
  .CH1_DMONITORCLK_M (CH1_DMONITORCLK_M_out),
  .CH1_DMONITOROUT (CH1_DMONITOROUT_out),
  .CH1_EDTUPDATEB_M (CH1_EDTUPDATEB_M_out),
  .CH1_EYESCANDATAERROR (CH1_EYESCANDATAERROR_out),
  .CH1_EYESCANRESET_M (CH1_EYESCANRESET_M_out),
  .CH1_EYESCANTRIGGER_M (CH1_EYESCANTRIGGER_M_out),
  .CH1_GTRSVD_M (CH1_GTRSVD_M_out),
  .CH1_GTRXRESET_M (CH1_GTRXRESET_M_out),
  .CH1_GTTXRESET_M (CH1_GTTXRESET_M_out),
  .CH1_ILORESETDONE (CH1_ILORESETDONE_out),
  .CH1_ILORESETMASK_M (CH1_ILORESETMASK_M_out),
  .CH1_ILORESET_M (CH1_ILORESET_M_out),
  .CH1_LOOPBACK_M (CH1_LOOPBACK_M_out),
  .CH1_PCSRSVDIN_M (CH1_PCSRSVDIN_M_out),
  .CH1_PCSRSVDOUT (CH1_PCSRSVDOUT_out),
  .CH1_PINRSVDAS (CH1_PINRSVDAS_out),
  .CH1_REFDEBUGOUT (CH1_REFDEBUGOUT_out),
  .CH1_RESETEXCEPTION (CH1_RESETEXCEPTION_out),
  .CH1_RXBUFSTATUS (CH1_RXBUFSTATUS_out),
  .CH1_RXCDRHOLD_M (CH1_RXCDRHOLD_M_out),
  .CH1_RXCDRLOCK (CH1_RXCDRLOCK_out),
  .CH1_RXCDROVRDEN_M (CH1_RXCDROVRDEN_M_out),
  .CH1_RXCDRPHDONE (CH1_RXCDRPHDONE_out),
  .CH1_RXCDRRESET_M (CH1_RXCDRRESET_M_out),
  .CH1_RXDATA (CH1_RXDATA_out),
  .CH1_RXDEBUGPCSOUT (CH1_RXDEBUGPCSOUT_out),
  .CH1_RXLATCLK_M (CH1_RXLATCLK_M_out),
  .CH1_RXPCSRESETMASK_M (CH1_RXPCSRESETMASK_M_out),
  .CH1_RXPD_M (CH1_RXPD_M_out),
  .CH1_RXPERST_M (CH1_RXPERST_M_out),
  .CH1_RXPMARESETDONE (CH1_RXPMARESETDONE_out),
  .CH1_RXPMARESETMASK_M (CH1_RXPMARESETMASK_M_out),
  .CH1_RXPOLARITY_M (CH1_RXPOLARITY_M_out),
  .CH1_RXPRBSCNTRESET_M (CH1_RXPRBSCNTRESET_M_out),
  .CH1_RXPRBSCNTSTOP_M (CH1_RXPRBSCNTSTOP_M_out),
  .CH1_RXPRBSERR (CH1_RXPRBSERR_out),
  .CH1_RXPRBSLOCKED (CH1_RXPRBSLOCKED_out),
  .CH1_RXPRBSSEL_M (CH1_RXPRBSSEL_M_out),
  .CH1_RXPROGDIVRESETDONE (CH1_RXPROGDIVRESETDONE_out),
  .CH1_RXPROGDIVRESET_M (CH1_RXPROGDIVRESET_M_out),
  .CH1_RXQPRBSEN_M (CH1_RXQPRBSEN_M_out),
  .CH1_RXRATE_M (CH1_RXRATE_M_out),
  .CH1_RXRESETDONE (CH1_RXRESETDONE_out),
  .CH1_RXRESETMODE_M (CH1_RXRESETMODE_M_out),
  .CH1_RXRSV0_M (CH1_RXRSV0_M_out),
  .CH1_RXRSV1_M (CH1_RXRSV1_M_out),
  .CH1_RXRSV2_M (CH1_RXRSV2_M_out),
  .CH1_RXUSERRDY_M (CH1_RXUSERRDY_M_out),
  .CH1_RXUSRCLK_M (CH1_RXUSRCLK_M_out),
  .CH1_SCANCLKB_M (CH1_SCANCLKB_M_out),
  .CH1_SCANCNTRLIN_M (CH1_SCANCNTRLIN_M_out),
  .CH1_SCANCNTRLOUT (CH1_SCANCNTRLOUT_out),
  .CH1_SCANENB_M (CH1_SCANENB_M_out),
  .CH1_SCANIN_M (CH1_SCANIN_M_out),
  .CH1_SCANOUT (CH1_SCANOUT_out),
  .CH1_SCANRSTB_M (CH1_SCANRSTB_M_out),
  .CH1_TSTCLK0_M (CH1_TSTCLK0_M_out),
  .CH1_TSTCLK1_M (CH1_TSTCLK1_M_out),
  .CH1_TXBUFSTATUS (CH1_TXBUFSTATUS_out),
  .CH1_TXDATA_M (CH1_TXDATA_M_out),
  .CH1_TXDCCDONE (CH1_TXDCCDONE_out),
  .CH1_TXDEBUGPCSOUT (CH1_TXDEBUGPCSOUT_out),
  .CH1_TXINHIBIT_M (CH1_TXINHIBIT_M_out),
  .CH1_TXLATCLK_M (CH1_TXLATCLK_M_out),
  .CH1_TXMAINCURSOR_M (CH1_TXMAINCURSOR_M_out),
  .CH1_TXPCSRESETMASK_M (CH1_TXPCSRESETMASK_M_out),
  .CH1_TXPD_M (CH1_TXPD_M_out),
  .CH1_TXPERST_M (CH1_TXPERST_M_out),
  .CH1_TXPISOPD_M (CH1_TXPISOPD_M_out),
  .CH1_TXPMARESETDONE (CH1_TXPMARESETDONE_out),
  .CH1_TXPMARESETMASK_M (CH1_TXPMARESETMASK_M_out),
  .CH1_TXPOLARITY_M (CH1_TXPOLARITY_M_out),
  .CH1_TXPOSTCURSOR_M (CH1_TXPOSTCURSOR_M_out),
  .CH1_TXPRBSFORCEERR_M (CH1_TXPRBSFORCEERR_M_out),
  .CH1_TXPRBSSEL_M (CH1_TXPRBSSEL_M_out),
  .CH1_TXPRECURSOR2_M (CH1_TXPRECURSOR2_M_out),
  .CH1_TXPRECURSOR3_M (CH1_TXPRECURSOR3_M_out),
  .CH1_TXPRECURSOR_M (CH1_TXPRECURSOR_M_out),
  .CH1_TXPROGDIVRESETDONE (CH1_TXPROGDIVRESETDONE_out),
  .CH1_TXPROGDIVRESET_M (CH1_TXPROGDIVRESET_M_out),
  .CH1_TXQPRBSEN_M (CH1_TXQPRBSEN_M_out),
  .CH1_TXRATE_M (CH1_TXRATE_M_out),
  .CH1_TXRESETDONE (CH1_TXRESETDONE_out),
  .CH1_TXRESETMODE_M (CH1_TXRESETMODE_M_out),
  .CH1_TXRSV0_M (CH1_TXRSV0_M_out),
  .CH1_TXRSV1_M (CH1_TXRSV1_M_out),
  .CH1_TXUSERRDY_M (CH1_TXUSERRDY_M_out),
  .CH1_TXUSRCLK_M (CH1_TXUSRCLK_M_out),
  .CH2_BSR_SERIAL_M (CH2_BSR_SERIAL_M_out),
  .CH2_CDRFREQOS_M (CH2_CDRFREQOS_M_out),
  .CH2_CDRINCPCTRL_M (CH2_CDRINCPCTRL_M_out),
  .CH2_CDRSTEPDIR_M (CH2_CDRSTEPDIR_M_out),
  .CH2_CDRSTEPSQ_M (CH2_CDRSTEPSQ_M_out),
  .CH2_CDRSTEPSX_M (CH2_CDRSTEPSX_M_out),
  .CH2_CLKRSVD0_M (CH2_CLKRSVD0_M_out),
  .CH2_CLKRSVD1_M (CH2_CLKRSVD1_M_out),
  .CH2_CSSDSTOPCLKB_M (CH2_CSSDSTOPCLKB_M_out),
  .CH2_DMONFIFORESET_M (CH2_DMONFIFORESET_M_out),
  .CH2_DMONITORCLK_M (CH2_DMONITORCLK_M_out),
  .CH2_DMONITOROUT (CH2_DMONITOROUT_out),
  .CH2_EDTUPDATEB_M (CH2_EDTUPDATEB_M_out),
  .CH2_EYESCANDATAERROR (CH2_EYESCANDATAERROR_out),
  .CH2_EYESCANRESET_M (CH2_EYESCANRESET_M_out),
  .CH2_EYESCANTRIGGER_M (CH2_EYESCANTRIGGER_M_out),
  .CH2_GTRSVD_M (CH2_GTRSVD_M_out),
  .CH2_GTRXRESET_M (CH2_GTRXRESET_M_out),
  .CH2_GTTXRESET_M (CH2_GTTXRESET_M_out),
  .CH2_ILORESETDONE (CH2_ILORESETDONE_out),
  .CH2_ILORESETMASK_M (CH2_ILORESETMASK_M_out),
  .CH2_ILORESET_M (CH2_ILORESET_M_out),
  .CH2_LOOPBACK_M (CH2_LOOPBACK_M_out),
  .CH2_PCSRSVDIN_M (CH2_PCSRSVDIN_M_out),
  .CH2_PCSRSVDOUT (CH2_PCSRSVDOUT_out),
  .CH2_PINRSVDAS (CH2_PINRSVDAS_out),
  .CH2_REFDEBUGOUT (CH2_REFDEBUGOUT_out),
  .CH2_RESETEXCEPTION (CH2_RESETEXCEPTION_out),
  .CH2_RXBUFSTATUS (CH2_RXBUFSTATUS_out),
  .CH2_RXCDRHOLD_M (CH2_RXCDRHOLD_M_out),
  .CH2_RXCDRLOCK (CH2_RXCDRLOCK_out),
  .CH2_RXCDROVRDEN_M (CH2_RXCDROVRDEN_M_out),
  .CH2_RXCDRPHDONE (CH2_RXCDRPHDONE_out),
  .CH2_RXCDRRESET_M (CH2_RXCDRRESET_M_out),
  .CH2_RXDATA (CH2_RXDATA_out),
  .CH2_RXDEBUGPCSOUT (CH2_RXDEBUGPCSOUT_out),
  .CH2_RXLATCLK_M (CH2_RXLATCLK_M_out),
  .CH2_RXPCSRESETMASK_M (CH2_RXPCSRESETMASK_M_out),
  .CH2_RXPD_M (CH2_RXPD_M_out),
  .CH2_RXPERST_M (CH2_RXPERST_M_out),
  .CH2_RXPMARESETDONE (CH2_RXPMARESETDONE_out),
  .CH2_RXPMARESETMASK_M (CH2_RXPMARESETMASK_M_out),
  .CH2_RXPOLARITY_M (CH2_RXPOLARITY_M_out),
  .CH2_RXPRBSCNTRESET_M (CH2_RXPRBSCNTRESET_M_out),
  .CH2_RXPRBSCNTSTOP_M (CH2_RXPRBSCNTSTOP_M_out),
  .CH2_RXPRBSERR (CH2_RXPRBSERR_out),
  .CH2_RXPRBSLOCKED (CH2_RXPRBSLOCKED_out),
  .CH2_RXPRBSSEL_M (CH2_RXPRBSSEL_M_out),
  .CH2_RXPROGDIVRESETDONE (CH2_RXPROGDIVRESETDONE_out),
  .CH2_RXPROGDIVRESET_M (CH2_RXPROGDIVRESET_M_out),
  .CH2_RXQPRBSEN_M (CH2_RXQPRBSEN_M_out),
  .CH2_RXRATE_M (CH2_RXRATE_M_out),
  .CH2_RXRESETDONE (CH2_RXRESETDONE_out),
  .CH2_RXRESETMODE_M (CH2_RXRESETMODE_M_out),
  .CH2_RXRSV0_M (CH2_RXRSV0_M_out),
  .CH2_RXRSV1_M (CH2_RXRSV1_M_out),
  .CH2_RXRSV2_M (CH2_RXRSV2_M_out),
  .CH2_RXUSERRDY_M (CH2_RXUSERRDY_M_out),
  .CH2_RXUSRCLK_M (CH2_RXUSRCLK_M_out),
  .CH2_SCANCLKB_M (CH2_SCANCLKB_M_out),
  .CH2_SCANCNTRLIN_M (CH2_SCANCNTRLIN_M_out),
  .CH2_SCANCNTRLOUT (CH2_SCANCNTRLOUT_out),
  .CH2_SCANENB_M (CH2_SCANENB_M_out),
  .CH2_SCANIN_M (CH2_SCANIN_M_out),
  .CH2_SCANOUT (CH2_SCANOUT_out),
  .CH2_SCANRSTB_M (CH2_SCANRSTB_M_out),
  .CH2_TSTCLK0_M (CH2_TSTCLK0_M_out),
  .CH2_TSTCLK1_M (CH2_TSTCLK1_M_out),
  .CH2_TXBUFSTATUS (CH2_TXBUFSTATUS_out),
  .CH2_TXDATA_M (CH2_TXDATA_M_out),
  .CH2_TXDCCDONE (CH2_TXDCCDONE_out),
  .CH2_TXDEBUGPCSOUT (CH2_TXDEBUGPCSOUT_out),
  .CH2_TXINHIBIT_M (CH2_TXINHIBIT_M_out),
  .CH2_TXLATCLK_M (CH2_TXLATCLK_M_out),
  .CH2_TXMAINCURSOR_M (CH2_TXMAINCURSOR_M_out),
  .CH2_TXPCSRESETMASK_M (CH2_TXPCSRESETMASK_M_out),
  .CH2_TXPD_M (CH2_TXPD_M_out),
  .CH2_TXPERST_M (CH2_TXPERST_M_out),
  .CH2_TXPISOPD_M (CH2_TXPISOPD_M_out),
  .CH2_TXPMARESETDONE (CH2_TXPMARESETDONE_out),
  .CH2_TXPMARESETMASK_M (CH2_TXPMARESETMASK_M_out),
  .CH2_TXPOLARITY_M (CH2_TXPOLARITY_M_out),
  .CH2_TXPOSTCURSOR_M (CH2_TXPOSTCURSOR_M_out),
  .CH2_TXPRBSFORCEERR_M (CH2_TXPRBSFORCEERR_M_out),
  .CH2_TXPRBSSEL_M (CH2_TXPRBSSEL_M_out),
  .CH2_TXPRECURSOR2_M (CH2_TXPRECURSOR2_M_out),
  .CH2_TXPRECURSOR3_M (CH2_TXPRECURSOR3_M_out),
  .CH2_TXPRECURSOR_M (CH2_TXPRECURSOR_M_out),
  .CH2_TXPROGDIVRESETDONE (CH2_TXPROGDIVRESETDONE_out),
  .CH2_TXPROGDIVRESET_M (CH2_TXPROGDIVRESET_M_out),
  .CH2_TXQPRBSEN_M (CH2_TXQPRBSEN_M_out),
  .CH2_TXRATE_M (CH2_TXRATE_M_out),
  .CH2_TXRESETDONE (CH2_TXRESETDONE_out),
  .CH2_TXRESETMODE_M (CH2_TXRESETMODE_M_out),
  .CH2_TXRSV0_M (CH2_TXRSV0_M_out),
  .CH2_TXRSV1_M (CH2_TXRSV1_M_out),
  .CH2_TXUSERRDY_M (CH2_TXUSERRDY_M_out),
  .CH2_TXUSRCLK_M (CH2_TXUSRCLK_M_out),
  .CH3_BSR_SERIAL_M (CH3_BSR_SERIAL_M_out),
  .CH3_CDRFREQOS_M (CH3_CDRFREQOS_M_out),
  .CH3_CDRINCPCTRL_M (CH3_CDRINCPCTRL_M_out),
  .CH3_CDRSTEPDIR_M (CH3_CDRSTEPDIR_M_out),
  .CH3_CDRSTEPSQ_M (CH3_CDRSTEPSQ_M_out),
  .CH3_CDRSTEPSX_M (CH3_CDRSTEPSX_M_out),
  .CH3_CLKRSVD0_M (CH3_CLKRSVD0_M_out),
  .CH3_CLKRSVD1_M (CH3_CLKRSVD1_M_out),
  .CH3_CSSDSTOPCLKB_M (CH3_CSSDSTOPCLKB_M_out),
  .CH3_DMONFIFORESET_M (CH3_DMONFIFORESET_M_out),
  .CH3_DMONITORCLK_M (CH3_DMONITORCLK_M_out),
  .CH3_DMONITOROUT (CH3_DMONITOROUT_out),
  .CH3_EDTUPDATEB_M (CH3_EDTUPDATEB_M_out),
  .CH3_EYESCANDATAERROR (CH3_EYESCANDATAERROR_out),
  .CH3_EYESCANRESET_M (CH3_EYESCANRESET_M_out),
  .CH3_EYESCANTRIGGER_M (CH3_EYESCANTRIGGER_M_out),
  .CH3_GTRSVD_M (CH3_GTRSVD_M_out),
  .CH3_GTRXRESET_M (CH3_GTRXRESET_M_out),
  .CH3_GTTXRESET_M (CH3_GTTXRESET_M_out),
  .CH3_ILORESETDONE (CH3_ILORESETDONE_out),
  .CH3_ILORESETMASK_M (CH3_ILORESETMASK_M_out),
  .CH3_ILORESET_M (CH3_ILORESET_M_out),
  .CH3_LOOPBACK_M (CH3_LOOPBACK_M_out),
  .CH3_PCSRSVDIN_M (CH3_PCSRSVDIN_M_out),
  .CH3_PCSRSVDOUT (CH3_PCSRSVDOUT_out),
  .CH3_PINRSVDAS (CH3_PINRSVDAS_out),
  .CH3_REFDEBUGOUT (CH3_REFDEBUGOUT_out),
  .CH3_RESETEXCEPTION (CH3_RESETEXCEPTION_out),
  .CH3_RXBUFSTATUS (CH3_RXBUFSTATUS_out),
  .CH3_RXCDRHOLD_M (CH3_RXCDRHOLD_M_out),
  .CH3_RXCDRLOCK (CH3_RXCDRLOCK_out),
  .CH3_RXCDROVRDEN_M (CH3_RXCDROVRDEN_M_out),
  .CH3_RXCDRPHDONE (CH3_RXCDRPHDONE_out),
  .CH3_RXCDRRESET_M (CH3_RXCDRRESET_M_out),
  .CH3_RXDATA (CH3_RXDATA_out),
  .CH3_RXDEBUGPCSOUT (CH3_RXDEBUGPCSOUT_out),
  .CH3_RXLATCLK_M (CH3_RXLATCLK_M_out),
  .CH3_RXPCSRESETMASK_M (CH3_RXPCSRESETMASK_M_out),
  .CH3_RXPD_M (CH3_RXPD_M_out),
  .CH3_RXPERST_M (CH3_RXPERST_M_out),
  .CH3_RXPMARESETDONE (CH3_RXPMARESETDONE_out),
  .CH3_RXPMARESETMASK_M (CH3_RXPMARESETMASK_M_out),
  .CH3_RXPOLARITY_M (CH3_RXPOLARITY_M_out),
  .CH3_RXPRBSCNTRESET_M (CH3_RXPRBSCNTRESET_M_out),
  .CH3_RXPRBSCNTSTOP_M (CH3_RXPRBSCNTSTOP_M_out),
  .CH3_RXPRBSERR (CH3_RXPRBSERR_out),
  .CH3_RXPRBSLOCKED (CH3_RXPRBSLOCKED_out),
  .CH3_RXPRBSSEL_M (CH3_RXPRBSSEL_M_out),
  .CH3_RXPROGDIVRESETDONE (CH3_RXPROGDIVRESETDONE_out),
  .CH3_RXPROGDIVRESET_M (CH3_RXPROGDIVRESET_M_out),
  .CH3_RXQPRBSEN_M (CH3_RXQPRBSEN_M_out),
  .CH3_RXRATE_M (CH3_RXRATE_M_out),
  .CH3_RXRESETDONE (CH3_RXRESETDONE_out),
  .CH3_RXRESETMODE_M (CH3_RXRESETMODE_M_out),
  .CH3_RXRSV0_M (CH3_RXRSV0_M_out),
  .CH3_RXRSV1_M (CH3_RXRSV1_M_out),
  .CH3_RXRSV2_M (CH3_RXRSV2_M_out),
  .CH3_RXUSERRDY_M (CH3_RXUSERRDY_M_out),
  .CH3_RXUSRCLK_M (CH3_RXUSRCLK_M_out),
  .CH3_SCANCLKB_M (CH3_SCANCLKB_M_out),
  .CH3_SCANCNTRLIN_M (CH3_SCANCNTRLIN_M_out),
  .CH3_SCANCNTRLOUT (CH3_SCANCNTRLOUT_out),
  .CH3_SCANENB_M (CH3_SCANENB_M_out),
  .CH3_SCANIN_M (CH3_SCANIN_M_out),
  .CH3_SCANOUT (CH3_SCANOUT_out),
  .CH3_SCANRSTB_M (CH3_SCANRSTB_M_out),
  .CH3_TSTCLK0_M (CH3_TSTCLK0_M_out),
  .CH3_TSTCLK1_M (CH3_TSTCLK1_M_out),
  .CH3_TXBUFSTATUS (CH3_TXBUFSTATUS_out),
  .CH3_TXDATA_M (CH3_TXDATA_M_out),
  .CH3_TXDCCDONE (CH3_TXDCCDONE_out),
  .CH3_TXDEBUGPCSOUT (CH3_TXDEBUGPCSOUT_out),
  .CH3_TXINHIBIT_M (CH3_TXINHIBIT_M_out),
  .CH3_TXLATCLK_M (CH3_TXLATCLK_M_out),
  .CH3_TXMAINCURSOR_M (CH3_TXMAINCURSOR_M_out),
  .CH3_TXPCSRESETMASK_M (CH3_TXPCSRESETMASK_M_out),
  .CH3_TXPD_M (CH3_TXPD_M_out),
  .CH3_TXPERST_M (CH3_TXPERST_M_out),
  .CH3_TXPISOPD_M (CH3_TXPISOPD_M_out),
  .CH3_TXPMARESETDONE (CH3_TXPMARESETDONE_out),
  .CH3_TXPMARESETMASK_M (CH3_TXPMARESETMASK_M_out),
  .CH3_TXPOLARITY_M (CH3_TXPOLARITY_M_out),
  .CH3_TXPOSTCURSOR_M (CH3_TXPOSTCURSOR_M_out),
  .CH3_TXPRBSFORCEERR_M (CH3_TXPRBSFORCEERR_M_out),
  .CH3_TXPRBSSEL_M (CH3_TXPRBSSEL_M_out),
  .CH3_TXPRECURSOR2_M (CH3_TXPRECURSOR2_M_out),
  .CH3_TXPRECURSOR3_M (CH3_TXPRECURSOR3_M_out),
  .CH3_TXPRECURSOR_M (CH3_TXPRECURSOR_M_out),
  .CH3_TXPROGDIVRESETDONE (CH3_TXPROGDIVRESETDONE_out),
  .CH3_TXPROGDIVRESET_M (CH3_TXPROGDIVRESET_M_out),
  .CH3_TXQPRBSEN_M (CH3_TXQPRBSEN_M_out),
  .CH3_TXRATE_M (CH3_TXRATE_M_out),
  .CH3_TXRESETDONE (CH3_TXRESETDONE_out),
  .CH3_TXRESETMODE_M (CH3_TXRESETMODE_M_out),
  .CH3_TXRSV0_M (CH3_TXRSV0_M_out),
  .CH3_TXRSV1_M (CH3_TXRSV1_M_out),
  .CH3_TXUSERRDY_M (CH3_TXUSERRDY_M_out),
  .CH3_TXUSRCLK_M (CH3_TXUSRCLK_M_out),
  .COESTATUSDEBUG_M (COESTATUSDEBUG_M_out),
  .CORRECTERR (CORRECTERR_out),
  .CSSDSTOPCLKB_M (CSSDSTOPCLKB_M_out),
  .CTRLRSVDIN_M (CTRLRSVDIN_M_out),
  .CTRLRSVDOUT (CTRLRSVDOUT_out),
  .DEBUGTRACECLK_M (DEBUGTRACECLK_M_out),
  .DEBUGTRACEREADY_M (DEBUGTRACEREADY_M_out),
  .DEBUGTRACETDATA (DEBUGTRACETDATA_out),
  .DEBUGTRACETVALID (DEBUGTRACETVALID_out),
  .EDTUPDATEB_M (EDTUPDATEB_M_out),
  .GPI_M (GPI_M_out),
  .GPO (GPO_out),
  .GTPOWERGOOD (GTPOWERGOOD_out),
  .HNICPIPE_ANLT_HNICX_STATUS_0 (HNICPIPE_ANLT_HNICX_STATUS_0_out),
  .HNICPIPE_ANLT_HNICX_STATUS_1 (HNICPIPE_ANLT_HNICX_STATUS_1_out),
  .HNICPIPE_ANLT_HNICX_STATUS_2 (HNICPIPE_ANLT_HNICX_STATUS_2_out),
  .HNICPIPE_ANLT_HNICX_STATUS_3 (HNICPIPE_ANLT_HNICX_STATUS_3_out),
  .HNICPIPE_FEC_ALIGNED_0_M (HNICPIPE_FEC_ALIGNED_0_M_out),
  .HNICPIPE_FEC_ALIGNED_1_M (HNICPIPE_FEC_ALIGNED_1_M_out),
  .HNICPIPE_FEC_ALIGNED_2_M (HNICPIPE_FEC_ALIGNED_2_M_out),
  .HNICPIPE_FEC_ALIGNED_3_M (HNICPIPE_FEC_ALIGNED_3_M_out),
  .HNICPIPE_FEC_LANE_LOCK_0_M (HNICPIPE_FEC_LANE_LOCK_0_M_out),
  .HNICPIPE_FEC_LANE_LOCK_1_M (HNICPIPE_FEC_LANE_LOCK_1_M_out),
  .HNICPIPE_FEC_LANE_LOCK_2_M (HNICPIPE_FEC_LANE_LOCK_2_M_out),
  .HNICPIPE_FEC_LANE_LOCK_3_M (HNICPIPE_FEC_LANE_LOCK_3_M_out),
  .HNICPIPE_GT_RX_SERDES_CLK_GOOD_OUT (HNICPIPE_GT_RX_SERDES_CLK_GOOD_OUT_out),
  .HNICPIPE_GT_TX_SERDES_CLK_GOOD_OUT (HNICPIPE_GT_TX_SERDES_CLK_GOOD_OUT_out),
  .HNICPIPE_HNICMAC_RXDATA0 (HNICPIPE_HNICMAC_RXDATA0_out),
  .HNICPIPE_HNICMAC_RXDATA1 (HNICPIPE_HNICMAC_RXDATA1_out),
  .HNICPIPE_HNICMAC_RXDATA2 (HNICPIPE_HNICMAC_RXDATA2_out),
  .HNICPIPE_HNICMAC_RXDATA3 (HNICPIPE_HNICMAC_RXDATA3_out),
  .HNICPIPE_HNICMAC_RXDATA4 (HNICPIPE_HNICMAC_RXDATA4_out),
  .HNICPIPE_HNICMAC_RXDATA5 (HNICPIPE_HNICMAC_RXDATA5_out),
  .HNICPIPE_HNICMAC_RXDATA6 (HNICPIPE_HNICMAC_RXDATA6_out),
  .HNICPIPE_HNICMAC_RXDATA7 (HNICPIPE_HNICMAC_RXDATA7_out),
  .HNICPIPE_MAC_PHY_STATUS_OK_0_M (HNICPIPE_MAC_PHY_STATUS_OK_0_M_out),
  .HNICPIPE_MAC_PHY_STATUS_OK_1_M (HNICPIPE_MAC_PHY_STATUS_OK_1_M_out),
  .HNICPIPE_MAC_PHY_STATUS_OK_2_M (HNICPIPE_MAC_PHY_STATUS_OK_2_M_out),
  .HNICPIPE_MAC_PHY_STATUS_OK_3_M (HNICPIPE_MAC_PHY_STATUS_OK_3_M_out),
  .HNICPIPE_RSFEC_CORRECTED_CWB_INC_0_M (HNICPIPE_RSFEC_CORRECTED_CWB_INC_0_M_out),
  .HNICPIPE_RSFEC_CORRECTED_CWB_INC_1_M (HNICPIPE_RSFEC_CORRECTED_CWB_INC_1_M_out),
  .HNICPIPE_RSFEC_CORRECTED_CWB_INC_2_M (HNICPIPE_RSFEC_CORRECTED_CWB_INC_2_M_out),
  .HNICPIPE_RSFEC_CORRECTED_CWB_INC_3_M (HNICPIPE_RSFEC_CORRECTED_CWB_INC_3_M_out),
  .HNICPIPE_RSFEC_CORRECTED_CW_INC_0_M (HNICPIPE_RSFEC_CORRECTED_CW_INC_0_M_out),
  .HNICPIPE_RSFEC_CORRECTED_CW_INC_1_M (HNICPIPE_RSFEC_CORRECTED_CW_INC_1_M_out),
  .HNICPIPE_RSFEC_CORRECTED_CW_INC_2_M (HNICPIPE_RSFEC_CORRECTED_CW_INC_2_M_out),
  .HNICPIPE_RSFEC_CORRECTED_CW_INC_3_M (HNICPIPE_RSFEC_CORRECTED_CW_INC_3_M_out),
  .HNICPIPE_RSFEC_CWA_ERR_CNT_INC_0_M (HNICPIPE_RSFEC_CWA_ERR_CNT_INC_0_M_out),
  .HNICPIPE_RSFEC_CWA_ERR_CNT_INC_1_M (HNICPIPE_RSFEC_CWA_ERR_CNT_INC_1_M_out),
  .HNICPIPE_RSFEC_CWA_ERR_CNT_INC_2_M (HNICPIPE_RSFEC_CWA_ERR_CNT_INC_2_M_out),
  .HNICPIPE_RSFEC_CWA_ERR_CNT_INC_3_M (HNICPIPE_RSFEC_CWA_ERR_CNT_INC_3_M_out),
  .HNICPIPE_RSFEC_CWB_ERR_CNT_INC_0_M (HNICPIPE_RSFEC_CWB_ERR_CNT_INC_0_M_out),
  .HNICPIPE_RSFEC_CWB_ERR_CNT_INC_1_M (HNICPIPE_RSFEC_CWB_ERR_CNT_INC_1_M_out),
  .HNICPIPE_RSFEC_CWB_ERR_CNT_INC_2_M (HNICPIPE_RSFEC_CWB_ERR_CNT_INC_2_M_out),
  .HNICPIPE_RSFEC_CWB_ERR_CNT_INC_3_M (HNICPIPE_RSFEC_CWB_ERR_CNT_INC_3_M_out),
  .HNICPIPE_RSFEC_CWB_INC_0_M (HNICPIPE_RSFEC_CWB_INC_0_M_out),
  .HNICPIPE_RSFEC_CWB_INC_1_M (HNICPIPE_RSFEC_CWB_INC_1_M_out),
  .HNICPIPE_RSFEC_CWB_INC_2_M (HNICPIPE_RSFEC_CWB_INC_2_M_out),
  .HNICPIPE_RSFEC_CWB_INC_3_M (HNICPIPE_RSFEC_CWB_INC_3_M_out),
  .HNICPIPE_RSFEC_CW_INC_0_M (HNICPIPE_RSFEC_CW_INC_0_M_out),
  .HNICPIPE_RSFEC_CW_INC_1_M (HNICPIPE_RSFEC_CW_INC_1_M_out),
  .HNICPIPE_RSFEC_CW_INC_2_M (HNICPIPE_RSFEC_CW_INC_2_M_out),
  .HNICPIPE_RSFEC_CW_INC_3_M (HNICPIPE_RSFEC_CW_INC_3_M_out),
  .HNICPIPE_RSFEC_L0_ERR_CNT_INC_0_M (HNICPIPE_RSFEC_L0_ERR_CNT_INC_0_M_out),
  .HNICPIPE_RSFEC_L0_ERR_CNT_INC_1_M (HNICPIPE_RSFEC_L0_ERR_CNT_INC_1_M_out),
  .HNICPIPE_RSFEC_L0_ERR_CNT_INC_2_M (HNICPIPE_RSFEC_L0_ERR_CNT_INC_2_M_out),
  .HNICPIPE_RSFEC_L0_ERR_CNT_INC_3_M (HNICPIPE_RSFEC_L0_ERR_CNT_INC_3_M_out),
  .HNICPIPE_RSFEC_L1_ERR_CNT_INC_0_M (HNICPIPE_RSFEC_L1_ERR_CNT_INC_0_M_out),
  .HNICPIPE_RSFEC_L1_ERR_CNT_INC_1_M (HNICPIPE_RSFEC_L1_ERR_CNT_INC_1_M_out),
  .HNICPIPE_RSFEC_L1_ERR_CNT_INC_2_M (HNICPIPE_RSFEC_L1_ERR_CNT_INC_2_M_out),
  .HNICPIPE_RSFEC_L1_ERR_CNT_INC_3_M (HNICPIPE_RSFEC_L1_ERR_CNT_INC_3_M_out),
  .HNICPIPE_RSFEC_L2_ERR_CNT_INC_0_M (HNICPIPE_RSFEC_L2_ERR_CNT_INC_0_M_out),
  .HNICPIPE_RSFEC_L2_ERR_CNT_INC_1_M (HNICPIPE_RSFEC_L2_ERR_CNT_INC_1_M_out),
  .HNICPIPE_RSFEC_L2_ERR_CNT_INC_2_M (HNICPIPE_RSFEC_L2_ERR_CNT_INC_2_M_out),
  .HNICPIPE_RSFEC_L2_ERR_CNT_INC_3_M (HNICPIPE_RSFEC_L2_ERR_CNT_INC_3_M_out),
  .HNICPIPE_RSFEC_L3_ERR_CNT_INC_0_M (HNICPIPE_RSFEC_L3_ERR_CNT_INC_0_M_out),
  .HNICPIPE_RSFEC_L3_ERR_CNT_INC_1_M (HNICPIPE_RSFEC_L3_ERR_CNT_INC_1_M_out),
  .HNICPIPE_RSFEC_L3_ERR_CNT_INC_2_M (HNICPIPE_RSFEC_L3_ERR_CNT_INC_2_M_out),
  .HNICPIPE_RSFEC_L3_ERR_CNT_INC_3_M (HNICPIPE_RSFEC_L3_ERR_CNT_INC_3_M_out),
  .HNICPIPE_RSFEC_MAPPING_0_M (HNICPIPE_RSFEC_MAPPING_0_M_out),
  .HNICPIPE_RSFEC_MAPPING_1_M (HNICPIPE_RSFEC_MAPPING_1_M_out),
  .HNICPIPE_RSFEC_MAPPING_2_M (HNICPIPE_RSFEC_MAPPING_2_M_out),
  .HNICPIPE_RSFEC_MAPPING_3_M (HNICPIPE_RSFEC_MAPPING_3_M_out),
  .HNICPIPE_RSFEC_UNCORRECTED_CWB_INC_0_M (HNICPIPE_RSFEC_UNCORRECTED_CWB_INC_0_M_out),
  .HNICPIPE_RSFEC_UNCORRECTED_CWB_INC_1_M (HNICPIPE_RSFEC_UNCORRECTED_CWB_INC_1_M_out),
  .HNICPIPE_RSFEC_UNCORRECTED_CWB_INC_2_M (HNICPIPE_RSFEC_UNCORRECTED_CWB_INC_2_M_out),
  .HNICPIPE_RSFEC_UNCORRECTED_CWB_INC_3_M (HNICPIPE_RSFEC_UNCORRECTED_CWB_INC_3_M_out),
  .HNICPIPE_RSFEC_UNCORRECTED_CW_INC_0_M (HNICPIPE_RSFEC_UNCORRECTED_CW_INC_0_M_out),
  .HNICPIPE_RSFEC_UNCORRECTED_CW_INC_1_M (HNICPIPE_RSFEC_UNCORRECTED_CW_INC_1_M_out),
  .HNICPIPE_RSFEC_UNCORRECTED_CW_INC_2_M (HNICPIPE_RSFEC_UNCORRECTED_CW_INC_2_M_out),
  .HNICPIPE_RSFEC_UNCORRECTED_CW_INC_3_M (HNICPIPE_RSFEC_UNCORRECTED_CW_INC_3_M_out),
  .HNICPIPE_RXUSRCLK_BOT2TOP_OUT (HNICPIPE_RXUSRCLK_BOT2TOP_OUT_out),
  .HNICPIPE_RX_RST_BOT2TOP_OUT (HNICPIPE_RX_RST_BOT2TOP_OUT_out),
  .HNICPIPE_RX_SERDES_CLK (HNICPIPE_RX_SERDES_CLK_out),
  .HNICPIPE_TXDATA_TOP2BOT0 (HNICPIPE_TXDATA_TOP2BOT0_out),
  .HNICPIPE_TXDATA_TOP2BOT1 (HNICPIPE_TXDATA_TOP2BOT1_out),
  .HNICPIPE_TXDATA_TOP2BOT2 (HNICPIPE_TXDATA_TOP2BOT2_out),
  .HNICPIPE_TXDATA_TOP2BOT3 (HNICPIPE_TXDATA_TOP2BOT3_out),
  .HNICPIPE_TXUSRCLK_BOT2TOP_OUT (HNICPIPE_TXUSRCLK_BOT2TOP_OUT_out),
  .HNICPIPE_TX_RST_BOT2TOP_OUT (HNICPIPE_TX_RST_BOT2TOP_OUT_out),
  .HNICPIPE_TX_SERDES_CLK (HNICPIPE_TX_SERDES_CLK_out),
  .HNICPIPE_UBLAZE_ACK_0 (HNICPIPE_UBLAZE_ACK_0_out),
  .HNICPIPE_UBLAZE_ACK_1 (HNICPIPE_UBLAZE_ACK_1_out),
  .HNICPIPE_UBLAZE_DATA_0_M (HNICPIPE_UBLAZE_DATA_0_M_out),
  .HNICPIPE_UBLAZE_DATA_1_M (HNICPIPE_UBLAZE_DATA_1_M_out),
  .HNICPIPE_UBLAZE_DEN_0_M (HNICPIPE_UBLAZE_DEN_0_M_out),
  .HNICPIPE_UBLAZE_DEN_1_M (HNICPIPE_UBLAZE_DEN_1_M_out),
  .HSCLK0_LCPLLFBCLKLOST (HSCLK0_LCPLLFBCLKLOST_out),
  .HSCLK0_LCPLLFBDIV_M (HSCLK0_LCPLLFBDIV_M_out),
  .HSCLK0_LCPLLGTGREFCLK_M (HSCLK0_LCPLLGTGREFCLK_M_out),
  .HSCLK0_LCPLLLOCK (HSCLK0_LCPLLLOCK_out),
  .HSCLK0_LCPLLPD_M (HSCLK0_LCPLLPD_M_out),
  .HSCLK0_LCPLLREFCLKLOST (HSCLK0_LCPLLREFCLKLOST_out),
  .HSCLK0_LCPLLREFCLKMONITOR (HSCLK0_LCPLLREFCLKMONITOR_out),
  .HSCLK0_LCPLLREFCLKSEL_M (HSCLK0_LCPLLREFCLKSEL_M_out),
  .HSCLK0_LCPLLRESETBYPASSMODE_M (HSCLK0_LCPLLRESETBYPASSMODE_M_out),
  .HSCLK0_LCPLLRESETMASK_M (HSCLK0_LCPLLRESETMASK_M_out),
  .HSCLK0_LCPLLRESET_M (HSCLK0_LCPLLRESET_M_out),
  .HSCLK0_LCPLLSDMDATA_M (HSCLK0_LCPLLSDMDATA_M_out),
  .HSCLK0_LCPLLSDMTOGGLE_M (HSCLK0_LCPLLSDMTOGGLE_M_out),
  .HSCLK1_LCPLLFBCLKLOST (HSCLK1_LCPLLFBCLKLOST_out),
  .HSCLK1_LCPLLFBDIV_M (HSCLK1_LCPLLFBDIV_M_out),
  .HSCLK1_LCPLLGTGREFCLK_M (HSCLK1_LCPLLGTGREFCLK_M_out),
  .HSCLK1_LCPLLLOCK (HSCLK1_LCPLLLOCK_out),
  .HSCLK1_LCPLLPD_M (HSCLK1_LCPLLPD_M_out),
  .HSCLK1_LCPLLREFCLKLOST (HSCLK1_LCPLLREFCLKLOST_out),
  .HSCLK1_LCPLLREFCLKMONITOR (HSCLK1_LCPLLREFCLKMONITOR_out),
  .HSCLK1_LCPLLREFCLKSEL_M (HSCLK1_LCPLLREFCLKSEL_M_out),
  .HSCLK1_LCPLLRESETBYPASSMODE_M (HSCLK1_LCPLLRESETBYPASSMODE_M_out),
  .HSCLK1_LCPLLRESETMASK_M (HSCLK1_LCPLLRESETMASK_M_out),
  .HSCLK1_LCPLLRESET_M (HSCLK1_LCPLLRESET_M_out),
  .HSCLK1_LCPLLSDMDATA_M (HSCLK1_LCPLLSDMDATA_M_out),
  .HSCLK1_LCPLLSDMTOGGLE_M (HSCLK1_LCPLLSDMTOGGLE_M_out),
  .M0_AXIS_TDATA (M0_AXIS_TDATA_out),
  .M0_AXIS_TLAST (M0_AXIS_TLAST_out),
  .M0_AXIS_TREADY_M (M0_AXIS_TREADY_M_out),
  .M0_AXIS_TVALID (M0_AXIS_TVALID_out),
  .M1_AXIS_TDATA (M1_AXIS_TDATA_out),
  .M1_AXIS_TLAST (M1_AXIS_TLAST_out),
  .M1_AXIS_TREADY_M (M1_AXIS_TREADY_M_out),
  .M1_AXIS_TVALID (M1_AXIS_TVALID_out),
  .M2_AXIS_TDATA (M2_AXIS_TDATA_out),
  .M2_AXIS_TLAST (M2_AXIS_TLAST_out),
  .M2_AXIS_TREADY_M (M2_AXIS_TREADY_M_out),
  .M2_AXIS_TVALID (M2_AXIS_TVALID_out),
  .M3_AXIS_TDATA (M3_AXIS_TDATA_out),
  .M3_AXIS_TLAST (M3_AXIS_TLAST_out),
  .M3_AXIS_TREADY_M (M3_AXIS_TREADY_M_out),
  .M3_AXIS_TVALID (M3_AXIS_TVALID_out),
  .MSTRXRESETDONE (MSTRXRESETDONE_out),
  .MSTRXRESET_M (MSTRXRESET_M_out),
  .MSTTXRESETDONE (MSTTXRESETDONE_out),
  .MSTTXRESET_M (MSTTXRESET_M_out),
  .RCALCMP (RCALCMP_out),
  .RCALOUT (RCALOUT_out),
  .REFCLK0_CLKTESTSIG_M (REFCLK0_CLKTESTSIG_M_out),
  .REFCLK0_GTREFCLKPD_M (REFCLK0_GTREFCLKPD_M_out),
  .REFCLK1_CLKTESTSIG_M (REFCLK1_CLKTESTSIG_M_out),
  .REFCLK1_GTREFCLKPD_M (REFCLK1_GTREFCLKPD_M_out),
  .S0_AXIS_TDATA_M (S0_AXIS_TDATA_M_out),
  .S0_AXIS_TLAST_M (S0_AXIS_TLAST_M_out),
  .S0_AXIS_TREADY (S0_AXIS_TREADY_out),
  .S0_AXIS_TVALID_M (S0_AXIS_TVALID_M_out),
  .S1_AXIS_TDATA_M (S1_AXIS_TDATA_M_out),
  .S1_AXIS_TLAST_M (S1_AXIS_TLAST_M_out),
  .S1_AXIS_TREADY (S1_AXIS_TREADY_out),
  .S1_AXIS_TVALID_M (S1_AXIS_TVALID_M_out),
  .S2_AXIS_TDATA_M (S2_AXIS_TDATA_M_out),
  .S2_AXIS_TLAST_M (S2_AXIS_TLAST_M_out),
  .S2_AXIS_TREADY (S2_AXIS_TREADY_out),
  .S2_AXIS_TVALID_M (S2_AXIS_TVALID_M_out),
  .S3_AXIS_TDATA_M (S3_AXIS_TDATA_M_out),
  .S3_AXIS_TLAST_M (S3_AXIS_TLAST_M_out),
  .S3_AXIS_TREADY (S3_AXIS_TREADY_out),
  .S3_AXIS_TVALID_M (S3_AXIS_TVALID_M_out),
  .SCANCLKB_M (SCANCLKB_M_out),
  .SCANCNTRLIN_M (SCANCNTRLIN_M_out),
  .SCANCNTRLOUT (SCANCNTRLOUT_out),
  .SCANENB_M (SCANENB_M_out),
  .SCANIN_M (SCANIN_M_out),
  .SCANOUT (SCANOUT_out),
  .SCANRSTB_M (SCANRSTB_M_out),
  .TRIGACKIN0 (TRIGACKIN0_out),
  .TRIGACKOUT0_M (TRIGACKOUT0_M_out),
  .TRIGIN0_M (TRIGIN0_M_out),
  .TRIGOUT0 (TRIGOUT0_out),
  .UBENABLE_M (UBENABLE_M_out),
  .UBINTERRUPT (UBINTERRUPT_out),
  .UBINTR_M (UBINTR_M_out),
  .UBIOLMBRST_M (UBIOLMBRST_M_out),
  .UBMBRST_M (UBMBRST_M_out),
  .UBRXUART_M (UBRXUART_M_out),
  .UBTXUART (UBTXUART_out),
  .UNCORRECTERR (UNCORRECTERR_out),
  .APB3CLK (APB3CLK_in),
  .APB3PADDR (APB3PADDR_in),
  .APB3PENABLE (APB3PENABLE_in),
  .APB3PRDATA_M (APB3PRDATA_M_in),
  .APB3PREADY_M (APB3PREADY_M_in),
  .APB3PRESETN (APB3PRESETN_in),
  .APB3PSEL (APB3PSEL_in),
  .APB3PSLVERR_M (APB3PSLVERR_M_in),
  .APB3PWDATA (APB3PWDATA_in),
  .APB3PWRITE (APB3PWRITE_in),
  .AXISCLK (AXISCLK_in),
  .BGBYPASSB (BGBYPASSB_in),
  .BGMONITORENB (BGMONITORENB_in),
  .BGPDB (BGPDB_in),
  .BGRCALOVRD (BGRCALOVRD_in),
  .BGRCALOVRDENB (BGRCALOVRDENB_in),
  .CH0_BSR_SERIAL (CH0_BSR_SERIAL_in),
  .CH0_CDRFREQOS (CH0_CDRFREQOS_in),
  .CH0_CDRINCPCTRL (CH0_CDRINCPCTRL_in),
  .CH0_CDRSTEPDIR (CH0_CDRSTEPDIR_in),
  .CH0_CDRSTEPSQ (CH0_CDRSTEPSQ_in),
  .CH0_CDRSTEPSX (CH0_CDRSTEPSX_in),
  .CH0_CLKRSVD1 (CH0_CLKRSVD1_in),
  .CH0_CSSDSTOPCLKB (CH0_CSSDSTOPCLKB_in),
  .CH0_DMONFIFORESET (CH0_DMONFIFORESET_in),
  .CH0_DMONITORCLK (CH0_DMONITORCLK_in),
  .CH0_DMONITOROUT_M (CH0_DMONITOROUT_M_in),
  .CH0_EDTUPDATEB (CH0_EDTUPDATEB_in),
  .CH0_EYESCANDATAERROR_M (CH0_EYESCANDATAERROR_M_in),
  .CH0_EYESCANRESET (CH0_EYESCANRESET_in),
  .CH0_EYESCANTRIGGER (CH0_EYESCANTRIGGER_in),
  .CH0_GTRSVD (CH0_GTRSVD_in),
  .CH0_GTRXRESET (CH0_GTRXRESET_in),
  .CH0_GTTXRESET (CH0_GTTXRESET_in),
  .CH0_ILORESET (CH0_ILORESET_in),
  .CH0_ILORESETDONE_M (CH0_ILORESETDONE_M_in),
  .CH0_ILORESETMASK (CH0_ILORESETMASK_in),
  .CH0_LOOPBACK (CH0_LOOPBACK_in),
  .CH0_PCSRSVDIN (CH0_PCSRSVDIN_in),
  .CH0_PCSRSVDOUT_M (CH0_PCSRSVDOUT_M_in),
  .CH0_PINRSVDAS_M (CH0_PINRSVDAS_M_in),
  .CH0_REFDEBUGOUT_M (CH0_REFDEBUGOUT_M_in),
  .CH0_RESETEXCEPTION_M (CH0_RESETEXCEPTION_M_in),
  .CH0_RXBUFSTATUS_M (CH0_RXBUFSTATUS_M_in),
  .CH0_RXCDRHOLD (CH0_RXCDRHOLD_in),
  .CH0_RXCDRLOCK_M (CH0_RXCDRLOCK_M_in),
  .CH0_RXCDROVRDEN (CH0_RXCDROVRDEN_in),
  .CH0_RXCDRPHDONE_M (CH0_RXCDRPHDONE_M_in),
  .CH0_RXCDRRESET (CH0_RXCDRRESET_in),
  .CH0_RXDATA_M (CH0_RXDATA_M_in),
  .CH0_RXDEBUGPCSOUT_M (CH0_RXDEBUGPCSOUT_M_in),
  .CH0_RXLATCLK (CH0_RXLATCLK_in),
  .CH0_RXPCSRESETMASK (CH0_RXPCSRESETMASK_in),
  .CH0_RXPD (CH0_RXPD_in),
  .CH0_RXPERST (CH0_RXPERST_in),
  .CH0_RXPMARESETDONE_M (CH0_RXPMARESETDONE_M_in),
  .CH0_RXPMARESETMASK (CH0_RXPMARESETMASK_in),
  .CH0_RXPOLARITY (CH0_RXPOLARITY_in),
  .CH0_RXPRBSCNTRESET (CH0_RXPRBSCNTRESET_in),
  .CH0_RXPRBSCNTSTOP (CH0_RXPRBSCNTSTOP_in),
  .CH0_RXPRBSERR_M (CH0_RXPRBSERR_M_in),
  .CH0_RXPRBSLOCKED_M (CH0_RXPRBSLOCKED_M_in),
  .CH0_RXPRBSSEL (CH0_RXPRBSSEL_in),
  .CH0_RXPROGDIVRESET (CH0_RXPROGDIVRESET_in),
  .CH0_RXPROGDIVRESETDONE_M (CH0_RXPROGDIVRESETDONE_M_in),
  .CH0_RXQPRBSEN (CH0_RXQPRBSEN_in),
  .CH0_RXRATE (CH0_RXRATE_in),
  .CH0_RXRESETDONE_M (CH0_RXRESETDONE_M_in),
  .CH0_RXRESETMODE (CH0_RXRESETMODE_in),
  .CH0_RXRSV0 (CH0_RXRSV0_in),
  .CH0_RXRSV1 (CH0_RXRSV1_in),
  .CH0_RXRSV2 (CH0_RXRSV2_in),
  .CH0_RXUSERRDY (CH0_RXUSERRDY_in),
  .CH0_RXUSRCLK (CH0_RXUSRCLK_in),
  .CH0_SCANCLKB (CH0_SCANCLKB_in),
  .CH0_SCANCNTRLIN (CH0_SCANCNTRLIN_in),
  .CH0_SCANCNTRLOUT_M (CH0_SCANCNTRLOUT_M_in),
  .CH0_SCANENB (CH0_SCANENB_in),
  .CH0_SCANIN (CH0_SCANIN_in),
  .CH0_SCANOUT_M (CH0_SCANOUT_M_in),
  .CH0_SCANRSTB (CH0_SCANRSTB_in),
  .CH0_TSTCLK0 (CH0_TSTCLK0_in),
  .CH0_TSTCLK1 (CH0_TSTCLK1_in),
  .CH0_TXBUFSTATUS_M (CH0_TXBUFSTATUS_M_in),
  .CH0_TXDATA (CH0_TXDATA_in),
  .CH0_TXDCCDONE_M (CH0_TXDCCDONE_M_in),
  .CH0_TXDEBUGPCSOUT_M (CH0_TXDEBUGPCSOUT_M_in),
  .CH0_TXINHIBIT (CH0_TXINHIBIT_in),
  .CH0_TXLATCLK (CH0_TXLATCLK_in),
  .CH0_TXMAINCURSOR (CH0_TXMAINCURSOR_in),
  .CH0_TXPCSRESETMASK (CH0_TXPCSRESETMASK_in),
  .CH0_TXPD (CH0_TXPD_in),
  .CH0_TXPERST (CH0_TXPERST_in),
  .CH0_TXPISOPD (CH0_TXPISOPD_in),
  .CH0_TXPMARESETDONE_M (CH0_TXPMARESETDONE_M_in),
  .CH0_TXPMARESETMASK (CH0_TXPMARESETMASK_in),
  .CH0_TXPOLARITY (CH0_TXPOLARITY_in),
  .CH0_TXPOSTCURSOR (CH0_TXPOSTCURSOR_in),
  .CH0_TXPRBSFORCEERR (CH0_TXPRBSFORCEERR_in),
  .CH0_TXPRBSSEL (CH0_TXPRBSSEL_in),
  .CH0_TXPRECURSOR (CH0_TXPRECURSOR_in),
  .CH0_TXPRECURSOR2 (CH0_TXPRECURSOR2_in),
  .CH0_TXPRECURSOR3 (CH0_TXPRECURSOR3_in),
  .CH0_TXPROGDIVRESET (CH0_TXPROGDIVRESET_in),
  .CH0_TXPROGDIVRESETDONE_M (CH0_TXPROGDIVRESETDONE_M_in),
  .CH0_TXQPRBSEN (CH0_TXQPRBSEN_in),
  .CH0_TXRATE (CH0_TXRATE_in),
  .CH0_TXRESETDONE_M (CH0_TXRESETDONE_M_in),
  .CH0_TXRESETMODE (CH0_TXRESETMODE_in),
  .CH0_TXRSV0 (CH0_TXRSV0_in),
  .CH0_TXRSV1 (CH0_TXRSV1_in),
  .CH0_TXUSERRDY (CH0_TXUSERRDY_in),
  .CH0_TXUSRCLK (CH0_TXUSRCLK_in),
  .CH1_BSR_SERIAL (CH1_BSR_SERIAL_in),
  .CH1_CDRFREQOS (CH1_CDRFREQOS_in),
  .CH1_CDRINCPCTRL (CH1_CDRINCPCTRL_in),
  .CH1_CDRSTEPDIR (CH1_CDRSTEPDIR_in),
  .CH1_CDRSTEPSQ (CH1_CDRSTEPSQ_in),
  .CH1_CDRSTEPSX (CH1_CDRSTEPSX_in),
  .CH1_CLKRSVD0 (CH1_CLKRSVD0_in),
  .CH1_CLKRSVD1 (CH1_CLKRSVD1_in),
  .CH1_CSSDSTOPCLKB (CH1_CSSDSTOPCLKB_in),
  .CH1_DMONFIFORESET (CH1_DMONFIFORESET_in),
  .CH1_DMONITORCLK (CH1_DMONITORCLK_in),
  .CH1_DMONITOROUT_M (CH1_DMONITOROUT_M_in),
  .CH1_EDTUPDATEB (CH1_EDTUPDATEB_in),
  .CH1_EYESCANDATAERROR_M (CH1_EYESCANDATAERROR_M_in),
  .CH1_EYESCANRESET (CH1_EYESCANRESET_in),
  .CH1_EYESCANTRIGGER (CH1_EYESCANTRIGGER_in),
  .CH1_GTRSVD (CH1_GTRSVD_in),
  .CH1_GTRXRESET (CH1_GTRXRESET_in),
  .CH1_GTTXRESET (CH1_GTTXRESET_in),
  .CH1_ILORESET (CH1_ILORESET_in),
  .CH1_ILORESETDONE_M (CH1_ILORESETDONE_M_in),
  .CH1_ILORESETMASK (CH1_ILORESETMASK_in),
  .CH1_LOOPBACK (CH1_LOOPBACK_in),
  .CH1_PCSRSVDIN (CH1_PCSRSVDIN_in),
  .CH1_PCSRSVDOUT_M (CH1_PCSRSVDOUT_M_in),
  .CH1_PINRSVDAS_M (CH1_PINRSVDAS_M_in),
  .CH1_REFDEBUGOUT_M (CH1_REFDEBUGOUT_M_in),
  .CH1_RESETEXCEPTION_M (CH1_RESETEXCEPTION_M_in),
  .CH1_RXBUFSTATUS_M (CH1_RXBUFSTATUS_M_in),
  .CH1_RXCDRHOLD (CH1_RXCDRHOLD_in),
  .CH1_RXCDRLOCK_M (CH1_RXCDRLOCK_M_in),
  .CH1_RXCDROVRDEN (CH1_RXCDROVRDEN_in),
  .CH1_RXCDRPHDONE_M (CH1_RXCDRPHDONE_M_in),
  .CH1_RXCDRRESET (CH1_RXCDRRESET_in),
  .CH1_RXDATA_M (CH1_RXDATA_M_in),
  .CH1_RXDEBUGPCSOUT_M (CH1_RXDEBUGPCSOUT_M_in),
  .CH1_RXLATCLK (CH1_RXLATCLK_in),
  .CH1_RXPCSRESETMASK (CH1_RXPCSRESETMASK_in),
  .CH1_RXPD (CH1_RXPD_in),
  .CH1_RXPERST (CH1_RXPERST_in),
  .CH1_RXPMARESETDONE_M (CH1_RXPMARESETDONE_M_in),
  .CH1_RXPMARESETMASK (CH1_RXPMARESETMASK_in),
  .CH1_RXPOLARITY (CH1_RXPOLARITY_in),
  .CH1_RXPRBSCNTRESET (CH1_RXPRBSCNTRESET_in),
  .CH1_RXPRBSCNTSTOP (CH1_RXPRBSCNTSTOP_in),
  .CH1_RXPRBSERR_M (CH1_RXPRBSERR_M_in),
  .CH1_RXPRBSLOCKED_M (CH1_RXPRBSLOCKED_M_in),
  .CH1_RXPRBSSEL (CH1_RXPRBSSEL_in),
  .CH1_RXPROGDIVRESET (CH1_RXPROGDIVRESET_in),
  .CH1_RXPROGDIVRESETDONE_M (CH1_RXPROGDIVRESETDONE_M_in),
  .CH1_RXQPRBSEN (CH1_RXQPRBSEN_in),
  .CH1_RXRATE (CH1_RXRATE_in),
  .CH1_RXRESETDONE_M (CH1_RXRESETDONE_M_in),
  .CH1_RXRESETMODE (CH1_RXRESETMODE_in),
  .CH1_RXRSV0 (CH1_RXRSV0_in),
  .CH1_RXRSV1 (CH1_RXRSV1_in),
  .CH1_RXRSV2 (CH1_RXRSV2_in),
  .CH1_RXUSERRDY (CH1_RXUSERRDY_in),
  .CH1_RXUSRCLK (CH1_RXUSRCLK_in),
  .CH1_SCANCLKB (CH1_SCANCLKB_in),
  .CH1_SCANCNTRLIN (CH1_SCANCNTRLIN_in),
  .CH1_SCANCNTRLOUT_M (CH1_SCANCNTRLOUT_M_in),
  .CH1_SCANENB (CH1_SCANENB_in),
  .CH1_SCANIN (CH1_SCANIN_in),
  .CH1_SCANOUT_M (CH1_SCANOUT_M_in),
  .CH1_SCANRSTB (CH1_SCANRSTB_in),
  .CH1_TSTCLK0 (CH1_TSTCLK0_in),
  .CH1_TSTCLK1 (CH1_TSTCLK1_in),
  .CH1_TXBUFSTATUS_M (CH1_TXBUFSTATUS_M_in),
  .CH1_TXDATA (CH1_TXDATA_in),
  .CH1_TXDCCDONE_M (CH1_TXDCCDONE_M_in),
  .CH1_TXDEBUGPCSOUT_M (CH1_TXDEBUGPCSOUT_M_in),
  .CH1_TXINHIBIT (CH1_TXINHIBIT_in),
  .CH1_TXLATCLK (CH1_TXLATCLK_in),
  .CH1_TXMAINCURSOR (CH1_TXMAINCURSOR_in),
  .CH1_TXPCSRESETMASK (CH1_TXPCSRESETMASK_in),
  .CH1_TXPD (CH1_TXPD_in),
  .CH1_TXPERST (CH1_TXPERST_in),
  .CH1_TXPISOPD (CH1_TXPISOPD_in),
  .CH1_TXPMARESETDONE_M (CH1_TXPMARESETDONE_M_in),
  .CH1_TXPMARESETMASK (CH1_TXPMARESETMASK_in),
  .CH1_TXPOLARITY (CH1_TXPOLARITY_in),
  .CH1_TXPOSTCURSOR (CH1_TXPOSTCURSOR_in),
  .CH1_TXPRBSFORCEERR (CH1_TXPRBSFORCEERR_in),
  .CH1_TXPRBSSEL (CH1_TXPRBSSEL_in),
  .CH1_TXPRECURSOR (CH1_TXPRECURSOR_in),
  .CH1_TXPRECURSOR2 (CH1_TXPRECURSOR2_in),
  .CH1_TXPRECURSOR3 (CH1_TXPRECURSOR3_in),
  .CH1_TXPROGDIVRESET (CH1_TXPROGDIVRESET_in),
  .CH1_TXPROGDIVRESETDONE_M (CH1_TXPROGDIVRESETDONE_M_in),
  .CH1_TXQPRBSEN (CH1_TXQPRBSEN_in),
  .CH1_TXRATE (CH1_TXRATE_in),
  .CH1_TXRESETDONE_M (CH1_TXRESETDONE_M_in),
  .CH1_TXRESETMODE (CH1_TXRESETMODE_in),
  .CH1_TXRSV0 (CH1_TXRSV0_in),
  .CH1_TXRSV1 (CH1_TXRSV1_in),
  .CH1_TXUSERRDY (CH1_TXUSERRDY_in),
  .CH1_TXUSRCLK (CH1_TXUSRCLK_in),
  .CH2_BSR_SERIAL (CH2_BSR_SERIAL_in),
  .CH2_CDRFREQOS (CH2_CDRFREQOS_in),
  .CH2_CDRINCPCTRL (CH2_CDRINCPCTRL_in),
  .CH2_CDRSTEPDIR (CH2_CDRSTEPDIR_in),
  .CH2_CDRSTEPSQ (CH2_CDRSTEPSQ_in),
  .CH2_CDRSTEPSX (CH2_CDRSTEPSX_in),
  .CH2_CLKRSVD0 (CH2_CLKRSVD0_in),
  .CH2_CLKRSVD1 (CH2_CLKRSVD1_in),
  .CH2_CSSDSTOPCLKB (CH2_CSSDSTOPCLKB_in),
  .CH2_DMONFIFORESET (CH2_DMONFIFORESET_in),
  .CH2_DMONITORCLK (CH2_DMONITORCLK_in),
  .CH2_DMONITOROUT_M (CH2_DMONITOROUT_M_in),
  .CH2_EDTUPDATEB (CH2_EDTUPDATEB_in),
  .CH2_EYESCANDATAERROR_M (CH2_EYESCANDATAERROR_M_in),
  .CH2_EYESCANRESET (CH2_EYESCANRESET_in),
  .CH2_EYESCANTRIGGER (CH2_EYESCANTRIGGER_in),
  .CH2_GTRSVD (CH2_GTRSVD_in),
  .CH2_GTRXRESET (CH2_GTRXRESET_in),
  .CH2_GTTXRESET (CH2_GTTXRESET_in),
  .CH2_ILORESET (CH2_ILORESET_in),
  .CH2_ILORESETDONE_M (CH2_ILORESETDONE_M_in),
  .CH2_ILORESETMASK (CH2_ILORESETMASK_in),
  .CH2_LOOPBACK (CH2_LOOPBACK_in),
  .CH2_PCSRSVDIN (CH2_PCSRSVDIN_in),
  .CH2_PCSRSVDOUT_M (CH2_PCSRSVDOUT_M_in),
  .CH2_PINRSVDAS_M (CH2_PINRSVDAS_M_in),
  .CH2_REFDEBUGOUT_M (CH2_REFDEBUGOUT_M_in),
  .CH2_RESETEXCEPTION_M (CH2_RESETEXCEPTION_M_in),
  .CH2_RXBUFSTATUS_M (CH2_RXBUFSTATUS_M_in),
  .CH2_RXCDRHOLD (CH2_RXCDRHOLD_in),
  .CH2_RXCDRLOCK_M (CH2_RXCDRLOCK_M_in),
  .CH2_RXCDROVRDEN (CH2_RXCDROVRDEN_in),
  .CH2_RXCDRPHDONE_M (CH2_RXCDRPHDONE_M_in),
  .CH2_RXCDRRESET (CH2_RXCDRRESET_in),
  .CH2_RXDATA_M (CH2_RXDATA_M_in),
  .CH2_RXDEBUGPCSOUT_M (CH2_RXDEBUGPCSOUT_M_in),
  .CH2_RXLATCLK (CH2_RXLATCLK_in),
  .CH2_RXPCSRESETMASK (CH2_RXPCSRESETMASK_in),
  .CH2_RXPD (CH2_RXPD_in),
  .CH2_RXPERST (CH2_RXPERST_in),
  .CH2_RXPMARESETDONE_M (CH2_RXPMARESETDONE_M_in),
  .CH2_RXPMARESETMASK (CH2_RXPMARESETMASK_in),
  .CH2_RXPOLARITY (CH2_RXPOLARITY_in),
  .CH2_RXPRBSCNTRESET (CH2_RXPRBSCNTRESET_in),
  .CH2_RXPRBSCNTSTOP (CH2_RXPRBSCNTSTOP_in),
  .CH2_RXPRBSERR_M (CH2_RXPRBSERR_M_in),
  .CH2_RXPRBSLOCKED_M (CH2_RXPRBSLOCKED_M_in),
  .CH2_RXPRBSSEL (CH2_RXPRBSSEL_in),
  .CH2_RXPROGDIVRESET (CH2_RXPROGDIVRESET_in),
  .CH2_RXPROGDIVRESETDONE_M (CH2_RXPROGDIVRESETDONE_M_in),
  .CH2_RXQPRBSEN (CH2_RXQPRBSEN_in),
  .CH2_RXRATE (CH2_RXRATE_in),
  .CH2_RXRESETDONE_M (CH2_RXRESETDONE_M_in),
  .CH2_RXRESETMODE (CH2_RXRESETMODE_in),
  .CH2_RXRSV0 (CH2_RXRSV0_in),
  .CH2_RXRSV1 (CH2_RXRSV1_in),
  .CH2_RXRSV2 (CH2_RXRSV2_in),
  .CH2_RXUSERRDY (CH2_RXUSERRDY_in),
  .CH2_RXUSRCLK (CH2_RXUSRCLK_in),
  .CH2_SCANCLKB (CH2_SCANCLKB_in),
  .CH2_SCANCNTRLIN (CH2_SCANCNTRLIN_in),
  .CH2_SCANCNTRLOUT_M (CH2_SCANCNTRLOUT_M_in),
  .CH2_SCANENB (CH2_SCANENB_in),
  .CH2_SCANIN (CH2_SCANIN_in),
  .CH2_SCANOUT_M (CH2_SCANOUT_M_in),
  .CH2_SCANRSTB (CH2_SCANRSTB_in),
  .CH2_TSTCLK0 (CH2_TSTCLK0_in),
  .CH2_TSTCLK1 (CH2_TSTCLK1_in),
  .CH2_TXBUFSTATUS_M (CH2_TXBUFSTATUS_M_in),
  .CH2_TXDATA (CH2_TXDATA_in),
  .CH2_TXDCCDONE_M (CH2_TXDCCDONE_M_in),
  .CH2_TXDEBUGPCSOUT_M (CH2_TXDEBUGPCSOUT_M_in),
  .CH2_TXINHIBIT (CH2_TXINHIBIT_in),
  .CH2_TXLATCLK (CH2_TXLATCLK_in),
  .CH2_TXMAINCURSOR (CH2_TXMAINCURSOR_in),
  .CH2_TXPCSRESETMASK (CH2_TXPCSRESETMASK_in),
  .CH2_TXPD (CH2_TXPD_in),
  .CH2_TXPERST (CH2_TXPERST_in),
  .CH2_TXPISOPD (CH2_TXPISOPD_in),
  .CH2_TXPMARESETDONE_M (CH2_TXPMARESETDONE_M_in),
  .CH2_TXPMARESETMASK (CH2_TXPMARESETMASK_in),
  .CH2_TXPOLARITY (CH2_TXPOLARITY_in),
  .CH2_TXPOSTCURSOR (CH2_TXPOSTCURSOR_in),
  .CH2_TXPRBSFORCEERR (CH2_TXPRBSFORCEERR_in),
  .CH2_TXPRBSSEL (CH2_TXPRBSSEL_in),
  .CH2_TXPRECURSOR (CH2_TXPRECURSOR_in),
  .CH2_TXPRECURSOR2 (CH2_TXPRECURSOR2_in),
  .CH2_TXPRECURSOR3 (CH2_TXPRECURSOR3_in),
  .CH2_TXPROGDIVRESET (CH2_TXPROGDIVRESET_in),
  .CH2_TXPROGDIVRESETDONE_M (CH2_TXPROGDIVRESETDONE_M_in),
  .CH2_TXQPRBSEN (CH2_TXQPRBSEN_in),
  .CH2_TXRATE (CH2_TXRATE_in),
  .CH2_TXRESETDONE_M (CH2_TXRESETDONE_M_in),
  .CH2_TXRESETMODE (CH2_TXRESETMODE_in),
  .CH2_TXRSV0 (CH2_TXRSV0_in),
  .CH2_TXRSV1 (CH2_TXRSV1_in),
  .CH2_TXUSERRDY (CH2_TXUSERRDY_in),
  .CH2_TXUSRCLK (CH2_TXUSRCLK_in),
  .CH3_BSR_SERIAL (CH3_BSR_SERIAL_in),
  .CH3_CDRFREQOS (CH3_CDRFREQOS_in),
  .CH3_CDRINCPCTRL (CH3_CDRINCPCTRL_in),
  .CH3_CDRSTEPDIR (CH3_CDRSTEPDIR_in),
  .CH3_CDRSTEPSQ (CH3_CDRSTEPSQ_in),
  .CH3_CDRSTEPSX (CH3_CDRSTEPSX_in),
  .CH3_CLKRSVD0 (CH3_CLKRSVD0_in),
  .CH3_CLKRSVD1 (CH3_CLKRSVD1_in),
  .CH3_CSSDSTOPCLKB (CH3_CSSDSTOPCLKB_in),
  .CH3_DMONFIFORESET (CH3_DMONFIFORESET_in),
  .CH3_DMONITORCLK (CH3_DMONITORCLK_in),
  .CH3_DMONITOROUT_M (CH3_DMONITOROUT_M_in),
  .CH3_EDTUPDATEB (CH3_EDTUPDATEB_in),
  .CH3_EYESCANDATAERROR_M (CH3_EYESCANDATAERROR_M_in),
  .CH3_EYESCANRESET (CH3_EYESCANRESET_in),
  .CH3_EYESCANTRIGGER (CH3_EYESCANTRIGGER_in),
  .CH3_GTRSVD (CH3_GTRSVD_in),
  .CH3_GTRXRESET (CH3_GTRXRESET_in),
  .CH3_GTTXRESET (CH3_GTTXRESET_in),
  .CH3_ILORESET (CH3_ILORESET_in),
  .CH3_ILORESETDONE_M (CH3_ILORESETDONE_M_in),
  .CH3_ILORESETMASK (CH3_ILORESETMASK_in),
  .CH3_LOOPBACK (CH3_LOOPBACK_in),
  .CH3_PCSRSVDIN (CH3_PCSRSVDIN_in),
  .CH3_PCSRSVDOUT_M (CH3_PCSRSVDOUT_M_in),
  .CH3_PINRSVDAS_M (CH3_PINRSVDAS_M_in),
  .CH3_REFDEBUGOUT_M (CH3_REFDEBUGOUT_M_in),
  .CH3_RESETEXCEPTION_M (CH3_RESETEXCEPTION_M_in),
  .CH3_RXBUFSTATUS_M (CH3_RXBUFSTATUS_M_in),
  .CH3_RXCDRHOLD (CH3_RXCDRHOLD_in),
  .CH3_RXCDRLOCK_M (CH3_RXCDRLOCK_M_in),
  .CH3_RXCDROVRDEN (CH3_RXCDROVRDEN_in),
  .CH3_RXCDRPHDONE_M (CH3_RXCDRPHDONE_M_in),
  .CH3_RXCDRRESET (CH3_RXCDRRESET_in),
  .CH3_RXDATA_M (CH3_RXDATA_M_in),
  .CH3_RXDEBUGPCSOUT_M (CH3_RXDEBUGPCSOUT_M_in),
  .CH3_RXLATCLK (CH3_RXLATCLK_in),
  .CH3_RXPCSRESETMASK (CH3_RXPCSRESETMASK_in),
  .CH3_RXPD (CH3_RXPD_in),
  .CH3_RXPERST (CH3_RXPERST_in),
  .CH3_RXPMARESETDONE_M (CH3_RXPMARESETDONE_M_in),
  .CH3_RXPMARESETMASK (CH3_RXPMARESETMASK_in),
  .CH3_RXPOLARITY (CH3_RXPOLARITY_in),
  .CH3_RXPRBSCNTRESET (CH3_RXPRBSCNTRESET_in),
  .CH3_RXPRBSCNTSTOP (CH3_RXPRBSCNTSTOP_in),
  .CH3_RXPRBSERR_M (CH3_RXPRBSERR_M_in),
  .CH3_RXPRBSLOCKED_M (CH3_RXPRBSLOCKED_M_in),
  .CH3_RXPRBSSEL (CH3_RXPRBSSEL_in),
  .CH3_RXPROGDIVRESET (CH3_RXPROGDIVRESET_in),
  .CH3_RXPROGDIVRESETDONE_M (CH3_RXPROGDIVRESETDONE_M_in),
  .CH3_RXQPRBSEN (CH3_RXQPRBSEN_in),
  .CH3_RXRATE (CH3_RXRATE_in),
  .CH3_RXRESETDONE_M (CH3_RXRESETDONE_M_in),
  .CH3_RXRESETMODE (CH3_RXRESETMODE_in),
  .CH3_RXRSV0 (CH3_RXRSV0_in),
  .CH3_RXRSV1 (CH3_RXRSV1_in),
  .CH3_RXRSV2 (CH3_RXRSV2_in),
  .CH3_RXUSERRDY (CH3_RXUSERRDY_in),
  .CH3_RXUSRCLK (CH3_RXUSRCLK_in),
  .CH3_SCANCLKB (CH3_SCANCLKB_in),
  .CH3_SCANCNTRLIN (CH3_SCANCNTRLIN_in),
  .CH3_SCANCNTRLOUT_M (CH3_SCANCNTRLOUT_M_in),
  .CH3_SCANENB (CH3_SCANENB_in),
  .CH3_SCANIN (CH3_SCANIN_in),
  .CH3_SCANOUT_M (CH3_SCANOUT_M_in),
  .CH3_SCANRSTB (CH3_SCANRSTB_in),
  .CH3_TSTCLK0 (CH3_TSTCLK0_in),
  .CH3_TSTCLK1 (CH3_TSTCLK1_in),
  .CH3_TXBUFSTATUS_M (CH3_TXBUFSTATUS_M_in),
  .CH3_TXDATA (CH3_TXDATA_in),
  .CH3_TXDCCDONE_M (CH3_TXDCCDONE_M_in),
  .CH3_TXDEBUGPCSOUT_M (CH3_TXDEBUGPCSOUT_M_in),
  .CH3_TXINHIBIT (CH3_TXINHIBIT_in),
  .CH3_TXLATCLK (CH3_TXLATCLK_in),
  .CH3_TXMAINCURSOR (CH3_TXMAINCURSOR_in),
  .CH3_TXPCSRESETMASK (CH3_TXPCSRESETMASK_in),
  .CH3_TXPD (CH3_TXPD_in),
  .CH3_TXPERST (CH3_TXPERST_in),
  .CH3_TXPISOPD (CH3_TXPISOPD_in),
  .CH3_TXPMARESETDONE_M (CH3_TXPMARESETDONE_M_in),
  .CH3_TXPMARESETMASK (CH3_TXPMARESETMASK_in),
  .CH3_TXPOLARITY (CH3_TXPOLARITY_in),
  .CH3_TXPOSTCURSOR (CH3_TXPOSTCURSOR_in),
  .CH3_TXPRBSFORCEERR (CH3_TXPRBSFORCEERR_in),
  .CH3_TXPRBSSEL (CH3_TXPRBSSEL_in),
  .CH3_TXPRECURSOR (CH3_TXPRECURSOR_in),
  .CH3_TXPRECURSOR2 (CH3_TXPRECURSOR2_in),
  .CH3_TXPRECURSOR3 (CH3_TXPRECURSOR3_in),
  .CH3_TXPROGDIVRESET (CH3_TXPROGDIVRESET_in),
  .CH3_TXPROGDIVRESETDONE_M (CH3_TXPROGDIVRESETDONE_M_in),
  .CH3_TXQPRBSEN (CH3_TXQPRBSEN_in),
  .CH3_TXRATE (CH3_TXRATE_in),
  .CH3_TXRESETDONE_M (CH3_TXRESETDONE_M_in),
  .CH3_TXRESETMODE (CH3_TXRESETMODE_in),
  .CH3_TXRSV0 (CH3_TXRSV0_in),
  .CH3_TXRSV1 (CH3_TXRSV1_in),
  .CH3_TXUSERRDY (CH3_TXUSERRDY_in),
  .CH3_TXUSRCLK (CH3_TXUSRCLK_in),
  .COESTATUSDEBUG (COESTATUSDEBUG_in),
  .CORRECTERR_M (CORRECTERR_M_in),
  .CSSDSTOPCLKB (CSSDSTOPCLKB_in),
  .CTRLRSVDIN (CTRLRSVDIN_in),
  .CTRLRSVDOUT_M (CTRLRSVDOUT_M_in),
  .DEBUGTRACECLK (DEBUGTRACECLK_in),
  .DEBUGTRACEREADY (DEBUGTRACEREADY_in),
  .DEBUGTRACETDATA_M (DEBUGTRACETDATA_M_in),
  .DEBUGTRACETVALID_M (DEBUGTRACETVALID_M_in),
  .EDTUPDATEB (EDTUPDATEB_in),
  .GPI (GPI_in),
  .GPO_M (GPO_M_in),
  .GTPOWERGOOD_M (GTPOWERGOOD_M_in),
  .HNICPIPE_ANLT_HNICX_STATUS_0_M (HNICPIPE_ANLT_HNICX_STATUS_0_M_in),
  .HNICPIPE_ANLT_HNICX_STATUS_1_M (HNICPIPE_ANLT_HNICX_STATUS_1_M_in),
  .HNICPIPE_ANLT_HNICX_STATUS_2_M (HNICPIPE_ANLT_HNICX_STATUS_2_M_in),
  .HNICPIPE_ANLT_HNICX_STATUS_3_M (HNICPIPE_ANLT_HNICX_STATUS_3_M_in),
  .HNICPIPE_CSSD_TRIG_N (HNICPIPE_CSSD_TRIG_N_in),
  .HNICPIPE_EDT_UPDT_N (HNICPIPE_EDT_UPDT_N_in),
  .HNICPIPE_FEC_ALIGNED_0 (HNICPIPE_FEC_ALIGNED_0_in),
  .HNICPIPE_FEC_ALIGNED_1 (HNICPIPE_FEC_ALIGNED_1_in),
  .HNICPIPE_FEC_ALIGNED_2 (HNICPIPE_FEC_ALIGNED_2_in),
  .HNICPIPE_FEC_ALIGNED_3 (HNICPIPE_FEC_ALIGNED_3_in),
  .HNICPIPE_FEC_LANE_LOCK_0 (HNICPIPE_FEC_LANE_LOCK_0_in),
  .HNICPIPE_FEC_LANE_LOCK_1 (HNICPIPE_FEC_LANE_LOCK_1_in),
  .HNICPIPE_FEC_LANE_LOCK_2 (HNICPIPE_FEC_LANE_LOCK_2_in),
  .HNICPIPE_FEC_LANE_LOCK_3 (HNICPIPE_FEC_LANE_LOCK_3_in),
  .HNICPIPE_GT_RX_SERDES_CLK_GOOD_IN (HNICPIPE_GT_RX_SERDES_CLK_GOOD_IN_in),
  .HNICPIPE_GT_TX_SERDES_CLK_GOOD_IN (HNICPIPE_GT_TX_SERDES_CLK_GOOD_IN_in),
  .HNICPIPE_HNICMAC_TXDATA0 (HNICPIPE_HNICMAC_TXDATA0_in),
  .HNICPIPE_HNICMAC_TXDATA1 (HNICPIPE_HNICMAC_TXDATA1_in),
  .HNICPIPE_HNICMAC_TXDATA2 (HNICPIPE_HNICMAC_TXDATA2_in),
  .HNICPIPE_HNICMAC_TXDATA3 (HNICPIPE_HNICMAC_TXDATA3_in),
  .HNICPIPE_HNICMAC_TXDATA4 (HNICPIPE_HNICMAC_TXDATA4_in),
  .HNICPIPE_HNICMAC_TXDATA5 (HNICPIPE_HNICMAC_TXDATA5_in),
  .HNICPIPE_HNICMAC_TXDATA6 (HNICPIPE_HNICMAC_TXDATA6_in),
  .HNICPIPE_HNICMAC_TXDATA7 (HNICPIPE_HNICMAC_TXDATA7_in),
  .HNICPIPE_MAC_PHY_STATUS_OK_0 (HNICPIPE_MAC_PHY_STATUS_OK_0_in),
  .HNICPIPE_MAC_PHY_STATUS_OK_1 (HNICPIPE_MAC_PHY_STATUS_OK_1_in),
  .HNICPIPE_MAC_PHY_STATUS_OK_2 (HNICPIPE_MAC_PHY_STATUS_OK_2_in),
  .HNICPIPE_MAC_PHY_STATUS_OK_3 (HNICPIPE_MAC_PHY_STATUS_OK_3_in),
  .HNICPIPE_NORTH_BOT_RXOUTCLK (HNICPIPE_NORTH_BOT_RXOUTCLK_in),
  .HNICPIPE_NORTH_BOT_TXOUTCLK (HNICPIPE_NORTH_BOT_TXOUTCLK_in),
  .HNICPIPE_NORTH_TOP_RXOUTCLK (HNICPIPE_NORTH_TOP_RXOUTCLK_in),
  .HNICPIPE_NORTH_TOP_TXOUTCLK (HNICPIPE_NORTH_TOP_TXOUTCLK_in),
  .HNICPIPE_RSFEC_CORRECTED_CWB_INC_0 (HNICPIPE_RSFEC_CORRECTED_CWB_INC_0_in),
  .HNICPIPE_RSFEC_CORRECTED_CWB_INC_1 (HNICPIPE_RSFEC_CORRECTED_CWB_INC_1_in),
  .HNICPIPE_RSFEC_CORRECTED_CWB_INC_2 (HNICPIPE_RSFEC_CORRECTED_CWB_INC_2_in),
  .HNICPIPE_RSFEC_CORRECTED_CWB_INC_3 (HNICPIPE_RSFEC_CORRECTED_CWB_INC_3_in),
  .HNICPIPE_RSFEC_CORRECTED_CW_INC_0 (HNICPIPE_RSFEC_CORRECTED_CW_INC_0_in),
  .HNICPIPE_RSFEC_CORRECTED_CW_INC_1 (HNICPIPE_RSFEC_CORRECTED_CW_INC_1_in),
  .HNICPIPE_RSFEC_CORRECTED_CW_INC_2 (HNICPIPE_RSFEC_CORRECTED_CW_INC_2_in),
  .HNICPIPE_RSFEC_CORRECTED_CW_INC_3 (HNICPIPE_RSFEC_CORRECTED_CW_INC_3_in),
  .HNICPIPE_RSFEC_CWA_ERR_CNT_INC_0 (HNICPIPE_RSFEC_CWA_ERR_CNT_INC_0_in),
  .HNICPIPE_RSFEC_CWA_ERR_CNT_INC_1 (HNICPIPE_RSFEC_CWA_ERR_CNT_INC_1_in),
  .HNICPIPE_RSFEC_CWA_ERR_CNT_INC_2 (HNICPIPE_RSFEC_CWA_ERR_CNT_INC_2_in),
  .HNICPIPE_RSFEC_CWA_ERR_CNT_INC_3 (HNICPIPE_RSFEC_CWA_ERR_CNT_INC_3_in),
  .HNICPIPE_RSFEC_CWB_ERR_CNT_INC_0 (HNICPIPE_RSFEC_CWB_ERR_CNT_INC_0_in),
  .HNICPIPE_RSFEC_CWB_ERR_CNT_INC_1 (HNICPIPE_RSFEC_CWB_ERR_CNT_INC_1_in),
  .HNICPIPE_RSFEC_CWB_ERR_CNT_INC_2 (HNICPIPE_RSFEC_CWB_ERR_CNT_INC_2_in),
  .HNICPIPE_RSFEC_CWB_ERR_CNT_INC_3 (HNICPIPE_RSFEC_CWB_ERR_CNT_INC_3_in),
  .HNICPIPE_RSFEC_CWB_INC_0 (HNICPIPE_RSFEC_CWB_INC_0_in),
  .HNICPIPE_RSFEC_CWB_INC_1 (HNICPIPE_RSFEC_CWB_INC_1_in),
  .HNICPIPE_RSFEC_CWB_INC_2 (HNICPIPE_RSFEC_CWB_INC_2_in),
  .HNICPIPE_RSFEC_CWB_INC_3 (HNICPIPE_RSFEC_CWB_INC_3_in),
  .HNICPIPE_RSFEC_CW_INC_0 (HNICPIPE_RSFEC_CW_INC_0_in),
  .HNICPIPE_RSFEC_CW_INC_1 (HNICPIPE_RSFEC_CW_INC_1_in),
  .HNICPIPE_RSFEC_CW_INC_2 (HNICPIPE_RSFEC_CW_INC_2_in),
  .HNICPIPE_RSFEC_CW_INC_3 (HNICPIPE_RSFEC_CW_INC_3_in),
  .HNICPIPE_RSFEC_L0_ERR_CNT_INC_0 (HNICPIPE_RSFEC_L0_ERR_CNT_INC_0_in),
  .HNICPIPE_RSFEC_L0_ERR_CNT_INC_1 (HNICPIPE_RSFEC_L0_ERR_CNT_INC_1_in),
  .HNICPIPE_RSFEC_L0_ERR_CNT_INC_2 (HNICPIPE_RSFEC_L0_ERR_CNT_INC_2_in),
  .HNICPIPE_RSFEC_L0_ERR_CNT_INC_3 (HNICPIPE_RSFEC_L0_ERR_CNT_INC_3_in),
  .HNICPIPE_RSFEC_L1_ERR_CNT_INC_0 (HNICPIPE_RSFEC_L1_ERR_CNT_INC_0_in),
  .HNICPIPE_RSFEC_L1_ERR_CNT_INC_1 (HNICPIPE_RSFEC_L1_ERR_CNT_INC_1_in),
  .HNICPIPE_RSFEC_L1_ERR_CNT_INC_2 (HNICPIPE_RSFEC_L1_ERR_CNT_INC_2_in),
  .HNICPIPE_RSFEC_L1_ERR_CNT_INC_3 (HNICPIPE_RSFEC_L1_ERR_CNT_INC_3_in),
  .HNICPIPE_RSFEC_L2_ERR_CNT_INC_0 (HNICPIPE_RSFEC_L2_ERR_CNT_INC_0_in),
  .HNICPIPE_RSFEC_L2_ERR_CNT_INC_1 (HNICPIPE_RSFEC_L2_ERR_CNT_INC_1_in),
  .HNICPIPE_RSFEC_L2_ERR_CNT_INC_2 (HNICPIPE_RSFEC_L2_ERR_CNT_INC_2_in),
  .HNICPIPE_RSFEC_L2_ERR_CNT_INC_3 (HNICPIPE_RSFEC_L2_ERR_CNT_INC_3_in),
  .HNICPIPE_RSFEC_L3_ERR_CNT_INC_0 (HNICPIPE_RSFEC_L3_ERR_CNT_INC_0_in),
  .HNICPIPE_RSFEC_L3_ERR_CNT_INC_1 (HNICPIPE_RSFEC_L3_ERR_CNT_INC_1_in),
  .HNICPIPE_RSFEC_L3_ERR_CNT_INC_2 (HNICPIPE_RSFEC_L3_ERR_CNT_INC_2_in),
  .HNICPIPE_RSFEC_L3_ERR_CNT_INC_3 (HNICPIPE_RSFEC_L3_ERR_CNT_INC_3_in),
  .HNICPIPE_RSFEC_MAPPING_0 (HNICPIPE_RSFEC_MAPPING_0_in),
  .HNICPIPE_RSFEC_MAPPING_1 (HNICPIPE_RSFEC_MAPPING_1_in),
  .HNICPIPE_RSFEC_MAPPING_2 (HNICPIPE_RSFEC_MAPPING_2_in),
  .HNICPIPE_RSFEC_MAPPING_3 (HNICPIPE_RSFEC_MAPPING_3_in),
  .HNICPIPE_RSFEC_UNCORRECTED_CWB_INC_0 (HNICPIPE_RSFEC_UNCORRECTED_CWB_INC_0_in),
  .HNICPIPE_RSFEC_UNCORRECTED_CWB_INC_1 (HNICPIPE_RSFEC_UNCORRECTED_CWB_INC_1_in),
  .HNICPIPE_RSFEC_UNCORRECTED_CWB_INC_2 (HNICPIPE_RSFEC_UNCORRECTED_CWB_INC_2_in),
  .HNICPIPE_RSFEC_UNCORRECTED_CWB_INC_3 (HNICPIPE_RSFEC_UNCORRECTED_CWB_INC_3_in),
  .HNICPIPE_RSFEC_UNCORRECTED_CW_INC_0 (HNICPIPE_RSFEC_UNCORRECTED_CW_INC_0_in),
  .HNICPIPE_RSFEC_UNCORRECTED_CW_INC_1 (HNICPIPE_RSFEC_UNCORRECTED_CW_INC_1_in),
  .HNICPIPE_RSFEC_UNCORRECTED_CW_INC_2 (HNICPIPE_RSFEC_UNCORRECTED_CW_INC_2_in),
  .HNICPIPE_RSFEC_UNCORRECTED_CW_INC_3 (HNICPIPE_RSFEC_UNCORRECTED_CW_INC_3_in),
  .HNICPIPE_RXDATA_BOT2TOP0 (HNICPIPE_RXDATA_BOT2TOP0_in),
  .HNICPIPE_RXDATA_BOT2TOP1 (HNICPIPE_RXDATA_BOT2TOP1_in),
  .HNICPIPE_RXDATA_BOT2TOP2 (HNICPIPE_RXDATA_BOT2TOP2_in),
  .HNICPIPE_RXDATA_BOT2TOP3 (HNICPIPE_RXDATA_BOT2TOP3_in),
  .HNICPIPE_RXUSRCLK_BOT2TOP_IN (HNICPIPE_RXUSRCLK_BOT2TOP_IN_in),
  .HNICPIPE_RX_RST_BOT2TOP_IN (HNICPIPE_RX_RST_BOT2TOP_IN_in),
  .HNICPIPE_SCAN_CHNL_IN (HNICPIPE_SCAN_CHNL_IN_in),
  .HNICPIPE_SCAN_CHNL_MASK_IN (HNICPIPE_SCAN_CHNL_MASK_IN_in),
  .HNICPIPE_SCAN_CLK_N (HNICPIPE_SCAN_CLK_N_in),
  .HNICPIPE_SCAN_CNTRL_CHNL_IN (HNICPIPE_SCAN_CNTRL_CHNL_IN_in),
  .HNICPIPE_SCAN_EN_N (HNICPIPE_SCAN_EN_N_in),
  .HNICPIPE_SCAN_RST_N (HNICPIPE_SCAN_RST_N_in),
  .HNICPIPE_SOUTH_BOT_RXOUTCLK (HNICPIPE_SOUTH_BOT_RXOUTCLK_in),
  .HNICPIPE_SOUTH_BOT_TXOUTCLK (HNICPIPE_SOUTH_BOT_TXOUTCLK_in),
  .HNICPIPE_SOUTH_TOP_RXOUTCLK (HNICPIPE_SOUTH_TOP_RXOUTCLK_in),
  .HNICPIPE_SOUTH_TOP_TXOUTCLK (HNICPIPE_SOUTH_TOP_TXOUTCLK_in),
  .HNICPIPE_TXUSRCLK_BOT2TOP_IN (HNICPIPE_TXUSRCLK_BOT2TOP_IN_in),
  .HNICPIPE_TX_RST_BOT2TOP_IN (HNICPIPE_TX_RST_BOT2TOP_IN_in),
  .HNICPIPE_UBLAZE_ACK_0_M (HNICPIPE_UBLAZE_ACK_0_M_in),
  .HNICPIPE_UBLAZE_ACK_1_M (HNICPIPE_UBLAZE_ACK_1_M_in),
  .HNICPIPE_UBLAZE_DATA_0 (HNICPIPE_UBLAZE_DATA_0_in),
  .HNICPIPE_UBLAZE_DATA_1 (HNICPIPE_UBLAZE_DATA_1_in),
  .HNICPIPE_UBLAZE_DEN_0 (HNICPIPE_UBLAZE_DEN_0_in),
  .HNICPIPE_UBLAZE_DEN_1 (HNICPIPE_UBLAZE_DEN_1_in),
  .HSCLK0_LCPLLFBCLKLOST_M (HSCLK0_LCPLLFBCLKLOST_M_in),
  .HSCLK0_LCPLLFBDIV (HSCLK0_LCPLLFBDIV_in),
  .HSCLK0_LCPLLGTGREFCLK (HSCLK0_LCPLLGTGREFCLK_in),
  .HSCLK0_LCPLLLOCK_M (HSCLK0_LCPLLLOCK_M_in),
  .HSCLK0_LCPLLPD (HSCLK0_LCPLLPD_in),
  .HSCLK0_LCPLLREFCLKLOST_M (HSCLK0_LCPLLREFCLKLOST_M_in),
  .HSCLK0_LCPLLREFCLKMONITOR_M (HSCLK0_LCPLLREFCLKMONITOR_M_in),
  .HSCLK0_LCPLLREFCLKSEL (HSCLK0_LCPLLREFCLKSEL_in),
  .HSCLK0_LCPLLRESET (HSCLK0_LCPLLRESET_in),
  .HSCLK0_LCPLLRESETBYPASSMODE (HSCLK0_LCPLLRESETBYPASSMODE_in),
  .HSCLK0_LCPLLRESETMASK (HSCLK0_LCPLLRESETMASK_in),
  .HSCLK0_LCPLLSDMDATA (HSCLK0_LCPLLSDMDATA_in),
  .HSCLK0_LCPLLSDMTOGGLE (HSCLK0_LCPLLSDMTOGGLE_in),
  .HSCLK1_LCPLLFBCLKLOST_M (HSCLK1_LCPLLFBCLKLOST_M_in),
  .HSCLK1_LCPLLFBDIV (HSCLK1_LCPLLFBDIV_in),
  .HSCLK1_LCPLLGTGREFCLK (HSCLK1_LCPLLGTGREFCLK_in),
  .HSCLK1_LCPLLLOCK_M (HSCLK1_LCPLLLOCK_M_in),
  .HSCLK1_LCPLLPD (HSCLK1_LCPLLPD_in),
  .HSCLK1_LCPLLREFCLKLOST_M (HSCLK1_LCPLLREFCLKLOST_M_in),
  .HSCLK1_LCPLLREFCLKMONITOR_M (HSCLK1_LCPLLREFCLKMONITOR_M_in),
  .HSCLK1_LCPLLREFCLKSEL (HSCLK1_LCPLLREFCLKSEL_in),
  .HSCLK1_LCPLLRESET (HSCLK1_LCPLLRESET_in),
  .HSCLK1_LCPLLRESETBYPASSMODE (HSCLK1_LCPLLRESETBYPASSMODE_in),
  .HSCLK1_LCPLLRESETMASK (HSCLK1_LCPLLRESETMASK_in),
  .HSCLK1_LCPLLSDMDATA (HSCLK1_LCPLLSDMDATA_in),
  .HSCLK1_LCPLLSDMTOGGLE (HSCLK1_LCPLLSDMTOGGLE_in),
  .M0_AXIS_TDATA_M (M0_AXIS_TDATA_M_in),
  .M0_AXIS_TLAST_M (M0_AXIS_TLAST_M_in),
  .M0_AXIS_TREADY (M0_AXIS_TREADY_in),
  .M0_AXIS_TVALID_M (M0_AXIS_TVALID_M_in),
  .M1_AXIS_TDATA_M (M1_AXIS_TDATA_M_in),
  .M1_AXIS_TLAST_M (M1_AXIS_TLAST_M_in),
  .M1_AXIS_TREADY (M1_AXIS_TREADY_in),
  .M1_AXIS_TVALID_M (M1_AXIS_TVALID_M_in),
  .M2_AXIS_TDATA_M (M2_AXIS_TDATA_M_in),
  .M2_AXIS_TLAST_M (M2_AXIS_TLAST_M_in),
  .M2_AXIS_TREADY (M2_AXIS_TREADY_in),
  .M2_AXIS_TVALID_M (M2_AXIS_TVALID_M_in),
  .M3_AXIS_TDATA_M (M3_AXIS_TDATA_M_in),
  .M3_AXIS_TLAST_M (M3_AXIS_TLAST_M_in),
  .M3_AXIS_TREADY (M3_AXIS_TREADY_in),
  .M3_AXIS_TVALID_M (M3_AXIS_TVALID_M_in),
  .MSTRXRESET (MSTRXRESET_in),
  .MSTRXRESETDONE_M (MSTRXRESETDONE_M_in),
  .MSTTXRESET (MSTTXRESET_in),
  .MSTTXRESETDONE_M (MSTTXRESETDONE_M_in),
  .RCALCMP_M (RCALCMP_M_in),
  .RCALOUT_M (RCALOUT_M_in),
  .REFCLK0_CLKTESTSIG (REFCLK0_CLKTESTSIG_in),
  .REFCLK0_GTREFCLKPD (REFCLK0_GTREFCLKPD_in),
  .REFCLK1_CLKTESTSIG (REFCLK1_CLKTESTSIG_in),
  .REFCLK1_GTREFCLKPD (REFCLK1_GTREFCLKPD_in),
  .S0_AXIS_TDATA (S0_AXIS_TDATA_in),
  .S0_AXIS_TLAST (S0_AXIS_TLAST_in),
  .S0_AXIS_TREADY_M (S0_AXIS_TREADY_M_in),
  .S0_AXIS_TVALID (S0_AXIS_TVALID_in),
  .S1_AXIS_TDATA (S1_AXIS_TDATA_in),
  .S1_AXIS_TLAST (S1_AXIS_TLAST_in),
  .S1_AXIS_TREADY_M (S1_AXIS_TREADY_M_in),
  .S1_AXIS_TVALID (S1_AXIS_TVALID_in),
  .S2_AXIS_TDATA (S2_AXIS_TDATA_in),
  .S2_AXIS_TLAST (S2_AXIS_TLAST_in),
  .S2_AXIS_TREADY_M (S2_AXIS_TREADY_M_in),
  .S2_AXIS_TVALID (S2_AXIS_TVALID_in),
  .S3_AXIS_TDATA (S3_AXIS_TDATA_in),
  .S3_AXIS_TLAST (S3_AXIS_TLAST_in),
  .S3_AXIS_TREADY_M (S3_AXIS_TREADY_M_in),
  .S3_AXIS_TVALID (S3_AXIS_TVALID_in),
  .SCANCLKB (SCANCLKB_in),
  .SCANCNTRLIN (SCANCNTRLIN_in),
  .SCANCNTRLOUT_M (SCANCNTRLOUT_M_in),
  .SCANENB (SCANENB_in),
  .SCANIN (SCANIN_in),
  .SCANOUT_M (SCANOUT_M_in),
  .SCANRSTB (SCANRSTB_in),
  .SIM_HNICPIPE_TOP_SEL (SIM_HNICPIPE_TOP_SEL_in),
  .TRIGACKIN0_M (TRIGACKIN0_M_in),
  .TRIGACKOUT0 (TRIGACKOUT0_in),
  .TRIGIN0 (TRIGIN0_in),
  .TRIGOUT0_M (TRIGOUT0_M_in),
  .UBENABLE (UBENABLE_in),
  .UBINTERRUPT_M (UBINTERRUPT_M_in),
  .UBINTR (UBINTR_in),
  .UBIOLMBRST (UBIOLMBRST_in),
  .UBMBRST (UBMBRST_in),
  .UBRXUART (UBRXUART_in),
  .UBTXUART_M (UBTXUART_M_in),
  .UNCORRECTERR_M (UNCORRECTERR_M_in)
  //.GSR (glblGSR)
);

endmodule

`endcelldefine
